From fb72912a0392fa1f31b02bce0b4549be9cc5ee00 Mon Sep 17 00:00:00 2001
From: m-kirihara <sfaddmki-git@yahoo.co.jp>
Date: Thu, 10 Aug 2023 18:24:18 +0900
Subject: [PATCH 01/13] =?UTF-8?q?typo:=20@code{\"SS\"}=E3=80=82=E2=86=92@c?=
 =?UTF-8?q?ode{\"i\\u0307\"}=20(=E2=80=A6)=E3=80=82=EF=BC=8C(@code{\\\"i\\?=
 =?UTF-8?q?\\u0307\\\"}=E2=86=92@code{\"i\\u0307\"})?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

emacs-28ブランチ，emacs-29ブランチへの修正はバックスラッシュが多いと思います．
---
 lispref/nonascii.texi.po | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lispref/nonascii.texi.po b/lispref/nonascii.texi.po
index 61a3dfee..a7faace6 100644
--- a/lispref/nonascii.texi.po
+++ b/lispref/nonascii.texi.po
@@ -1030,7 +1030,7 @@ msgstr "special-lowercase"
 #. type: table
 #: original_texis/nonascii.texi:642
 msgid "Corresponds to Unicode language- and context-independent special lower-casing rules.  The value of this property is a string (which may be empty).  For example mapping for U+0130 @sc{latin capital letter i with dot above} the value is @code{\"i\\u0307\"} (i.e. 2-character string consisting of @sc{latin small letter i} followed by U+0307 @sc{combining dot above}).  For characters with no special mapping, the value is @code{nil} which means @code{lowercase} property needs to be consulted instead."
-msgstr "Unicodeの言語やコンテキストに依存しない特別な小文字caseルールに対応する。このプロパティの値は文字列(空も可)。たとえばU+0130 @sc{latin capital letter i with dot above}にたいするマッピングは@code{\"SS\"}。特別なマッピングのない文字にたいする値は@code{nil} (かわりに@code{lowercase}プロパティの照会が必要なことを意味する)。"
+msgstr "Unicodeの言語やコンテキストに依存しない特別な小文字caseルールに対応する。このプロパティの値は文字列(空も可)。たとえばU+0130 @sc{latin capital letter i with dot above}にたいするマッピングは@code{\"i\\u0307\"} (すなわち@sc{latin small letter i}の後にU+0307 @sc{combining dot above}が続くことによって構成される2文字の文字列)。特別なマッピングのない文字にたいする値は@code{nil} (かわりに@code{lowercase}プロパティの照会が必要なことを意味する)。"
 
 #. type: item
 #: original_texis/nonascii.texi:643

From 2e3ce8f32bbac4bd33ca4b305282bb1472e2e940 Mon Sep 17 00:00:00 2001
From: m-kirihara <sfaddmki-git@yahoo.co.jp>
Date: Thu, 10 Aug 2023 18:28:19 +0900
Subject: [PATCH 02/13] =?UTF-8?q?typo:=20=E3=83=8F=E2=86=92=E3=81=AF?=
 =?UTF-8?q?=EF=BC=8C=E3=83=8B=E2=86=92=E3=81=AB?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

「は」の置換はemacs-28ブランチ，emacs-29ブランチでも忘れています．
---
 lispref/objects.texi.po | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lispref/objects.texi.po b/lispref/objects.texi.po
index b59973ad..d89107a8 100644
--- a/lispref/objects.texi.po
+++ b/lispref/objects.texi.po
@@ -2420,7 +2420,7 @@ msgstr "primitive function"
 #. type: Plain text
 #: original_texis/objects.texi:1413
 msgid "A @dfn{primitive function} is a function callable from Lisp but written in the C programming language.  Primitive functions are also called @dfn{subrs} or @dfn{built-in functions}.  (The word ``subr'' is derived from ``subroutine''.)  Most primitive functions evaluate all their arguments when they are called.  A primitive function that does not evaluate all its arguments is called a @dfn{special form} (@pxref{Special Forms})."
-msgstr "@dfn{プリミティブ関数(primitive function)}とは、Cプログラミング言語で記述されたLispから呼び出せる関数です。プリミティブ関数は@dfn{subrs}や@dfn{ビルトイン関数(built-in functions)}とも呼ばれます(単語``subr''は``サブルーチン(subroutine)''が由来)。ほとんどのプリミティブ関数ハ、呼び出されたときニすべての引数を評価します。すべての引数を評価しないプリミティブ関数は@dfn{スペシャルフォーム(special form)}と呼ばれます(@ref{Special Forms}を参照)。"
+msgstr "@dfn{プリミティブ関数(primitive function)}とは、Cプログラミング言語で記述されたLispから呼び出せる関数です。プリミティブ関数は@dfn{subrs}や@dfn{ビルトイン関数(built-in functions)}とも呼ばれます(単語``subr''は``サブルーチン(subroutine)''が由来)。ほとんどのプリミティブ関数は、呼び出されたときにすべての引数を評価します。すべての引数を評価しないプリミティブ関数は@dfn{スペシャルフォーム(special form)}と呼ばれます(@ref{Special Forms}を参照)。"
 
 #. type: Plain text
 #: original_texis/objects.texi:1421

From eed14dc97f8ae7118e3529d975017f29745b21d7 Mon Sep 17 00:00:00 2001
From: m-kirihara <sfaddmki-git@yahoo.co.jp>
Date: Thu, 10 Aug 2023 18:31:31 +0900
Subject: [PATCH 03/13] =?UTF-8?q?typo:=20=E3=80=8C=E3=81=9F=E3=81=A8?=
 =?UTF-8?q?=E3=81=88=E3=81=B0=E3=80=8D=E6=8C=BF=E5=85=A5=EF=BC=8C=E3=81=A7?=
 =?UTF-8?q?=E2=86=92=E3=81=A7=E3=81=82=E3=82=8A=EF=BC=8C(=E3=81=9F?=
 =?UTF-8?q?=E3=81=84=E3=81=97=E3=81=A6=E3=80=82=E2=86=92=E3=81=9F=E3=81=84?=
 =?UTF-8?q?=E3=81=97=E3=81=A6=E3=80=81)?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

emacs-28ブランチ，emacs-29ブランチへの変更と同じですが，それらのブランチでは「たいして。」のように句点への誤変換があります．
---
 lispref/objects.texi.po | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lispref/objects.texi.po b/lispref/objects.texi.po
index d89107a8..b4b77fa3 100644
--- a/lispref/objects.texi.po
+++ b/lispref/objects.texi.po
@@ -2737,7 +2737,7 @@ msgstr "@dfn{バッファー(buffer)}とは、編集されるテキストを保
 #. type: Plain text
 #: original_texis/objects.texi:1567
 msgid "The contents of a buffer are much like a string, but buffers are not used like strings in Emacs Lisp, and the available operations are different.  For example, you can insert text efficiently into an existing buffer, altering the buffer's contents, whereas inserting text into a string requires concatenating substrings, and the result is an entirely new string object."
-msgstr "バッファーの内容は文字列によく似ていますが、バッファーはEmacs Lispの文字列と同じようには使用されず、利用可能な操作は異なります。文字列にテキストを挿入するためには部分文字列の結合が必要で、結果は完全に新しい文字列オブジェクトなのるのにたいして、バッファーでは既存のバッファーに効率的にテキストを挿入してバッファーの内容を変更できます。"
+msgstr "バッファーの内容は文字列によく似ていますが、バッファーはEmacs Lispの文字列と同じようには使用されず、利用可能な操作は異なります。たとえば文字列にテキストを挿入するためには部分文字列の結合が必要であり、結果は完全に新しい文字列オブジェクトなのるのにたいして、バッファーでは既存のバッファーに効率的にテキストを挿入してバッファーの内容を変更できます。"
 
 #. type: Plain text
 #: original_texis/objects.texi:1571

From 1be7a431499ccc394dfea1f4f033602ec168c26f Mon Sep 17 00:00:00 2001
From: m-kirihara <sfaddmki-git@yahoo.co.jp>
Date: Thu, 10 Aug 2023 18:35:04 +0900
Subject: [PATCH 04/13] =?UTF-8?q?typo:=20=E5=85=88=E9=A0=AD=E2=86=92?=
 =?UTF-8?q?=E7=B5=82=E7=AB=AF=EF=BC=8C@samp{\\(}=E2=86=92@samp{\\)}?=
 =?UTF-8?q?=EF=BC=8C@samp{\\(=3F:}=E5=89=8A=E9=99=A4?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

二つの@samp{…}の修正はemacs-28ブランチにもemacs-29ブランチにもありません．
---
 lispref/searching.texi.po | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lispref/searching.texi.po b/lispref/searching.texi.po
index f3f04d0f..c7e486fa 100644
--- a/lispref/searching.texi.po
+++ b/lispref/searching.texi.po
@@ -885,7 +885,7 @@ msgstr "バッファーではなく文字列とマッチする際には、@samp{
 #. type: table
 #: original_texis/searching.texi:524
 msgid "For historical compatibility reasons, @samp{$} can be used only at the end of the regular expression, or before @samp{\\)} or @samp{\\|}."
-msgstr "歴史的な互換性という理由により@samp{$}は正規表現の先頭、または@samp{\\(}、@samp{\\(?:}、@samp{\\|}の前でのみ使用できる。"
+msgstr "歴史的な互換性という理由により@samp{$}は正規表現の終端、または@samp{\\)}、@samp{\\|}の前でのみ使用できる。"
 
 #. type: samp{#1}
 #: original_texis/searching.texi:525

From b3057c081502a92f1e5c47995fbcc3421b7ea39a Mon Sep 17 00:00:00 2001
From: m-kirihara <sfaddmki-git@yahoo.co.jp>
Date: Thu, 10 Aug 2023 18:40:15 +0900
Subject: [PATCH 05/13] =?UTF-8?q?=E3=80=8C{\\=3D`}=E3=81=AF@samp{`}?=
 =?UTF-8?q?=E3=80=81=E3=80=8D=E3=81=AE=E8=BF=BD=E5=8A=A0?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

「@samp{\\=`}」への余分なバックスラッシュの削除と「@samp{`}、@samp{\\=\\[}」にある読点の追加がemacs-28ブランチには必要です．(つまり正しくは，emacs-29ブランチの記述と同じになります．)
---
 lispref/help.texi.po | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lispref/help.texi.po b/lispref/help.texi.po
index 2911388c..9a0bd2fa 100644
--- a/lispref/help.texi.po
+++ b/lispref/help.texi.po
@@ -732,7 +732,7 @@ msgstr "\\="
 #. type: table
 #: original_texis/help.texi:368
 msgid "quotes the following character and is discarded; thus, @samp{\\=`} puts @samp{`} into the output, @samp{\\=\\[} puts @samp{\\[} into the output, and @samp{\\=\\=} puts @samp{\\=} into the output."
-msgstr "これは後続の文字をクォートして無効にする。したがって@samp{\\=\\[}は@samp{\\[}、@samp{\\=\\=}は@samp{\\=}を出力する。"
+msgstr "これは後続の文字をクォートして無効にする。したがって@samp{\\=`}は@samp{`}、@samp{\\=\\[}は@samp{\\[}、@samp{\\=\\=}は@samp{\\=}を出力する。"
 
 #. type: item
 #: original_texis/help.texi:369

From da3f1f27c22e2f56d05163cd03ac41f13744c803 Mon Sep 17 00:00:00 2001
From: m-kirihara <sfaddmki-git@yahoo.co.jp>
Date: Thu, 10 Aug 2023 18:43:35 +0900
Subject: [PATCH 06/13] =?UTF-8?q?@samp{\\\\}=E2=86=92@samp{\\}=EF=BC=8C@sa?=
 =?UTF-8?q?mp{=3F\\\\(}=E2=86=92@samp{=3F\\(}?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

emacs-28ブランチ，emacs-29ブランチへの変更と同じです．
---
 lispref/objects.texi.po | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lispref/objects.texi.po b/lispref/objects.texi.po
index b4b77fa3..7eece7c6 100644
--- a/lispref/objects.texi.po
+++ b/lispref/objects.texi.po
@@ -960,7 +960,7 @@ msgstr "?Q @result{} 81     ?q @result{} 113\n"
 #. type: Plain text
 #: original_texis/objects.texi:377
 msgid "You can use the same syntax for punctuation characters.  However, if the punctuation character has a special syntactic meaning in Lisp, you must quote it with a @samp{\\}.  For example, @samp{?\\(} is the way to write the open-paren character.  Likewise, if the character is @samp{\\}, you must use a second @samp{\\} to quote it: @samp{?\\\\}."
-msgstr "区切り文字(punctuation characters)にも同じ構文を使用できますが、区切り文字がLispで特別な意味をもつ場合には@samp{\\\\}でクォートしなければなりません。たとえば@samp{?\\\\(}が開カッコを記述する方法であり、同様に文字が@samp{\\}なら、@samp{?\\\\}のようにクォートするために2つ目の@samp{\\}を使用しなければなりません。"
+msgstr "区切り文字(punctuation characters)にも同じ構文を使用できますが、区切り文字がLispで特別な意味をもつ場合には@samp{\\}でクォートしなければなりません。たとえば@samp{?\\(}が開カッコを記述する方法であり、同様に文字が@samp{\\}なら、@samp{?\\\\}のようにクォートするために2つ目の@samp{\\}を使用しなければなりません。"
 
 #. type: cindex
 #: original_texis/objects.texi:378

From 9f38a472272c9dd13d1e8fbe97c8aa568fad837e Mon Sep 17 00:00:00 2001
From: m-kirihara <sfaddmki-git@yahoo.co.jp>
Date: Thu, 10 Aug 2023 18:49:07 +0900
Subject: [PATCH 07/13] =?UTF-8?q?=E3=80=8C=E3=81=A9=E3=81=A1=E3=82=89?=
 =?UTF-8?q?=E3=82=82=E6=95=B4=E6=95=B0=E3=81=A7=E3=81=82=E3=82=8B=E3=81=8B?=
 =?UTF-8?q?=E3=81=A9=E3=81=A1=E3=82=89=E3=82=82=E6=B5=AE=E5=8B=95=E5=B0=8F?=
 =?UTF-8?q?=E6=95=B0=E3=81=A7=E3=81=82=E3=82=8B=E3=81=8B=E3=80=8D=E3=81=B8?=
 =?UTF-8?q?=E3=81=AE=E4=BF=AE=E6=AD=A3=EF=BC=8C=E3=80=8C=E3=81=AF=E3=80=81?=
 =?UTF-8?q?=E3=80=8D=E5=89=8A=E9=99=A4=EF=BC=8C=E3=80=8C(=E8=A8=B3?=
 =?UTF-8?q?=E6=B3=A8:=E5=90=8C=E3=81=98=E5=80=A4=E3=81=AE=E5=A0=B4?=
 =?UTF-8?q?=E5=90=88=E3=81=AB=E3=81=AF)=E3=80=8D=E3=81=AE=E8=BF=BD?=
 =?UTF-8?q?=E8=A8=98?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

emacs-28ブランチ，emacs-29ブランチへの変更と同じです．
---
 lispref/numbers.texi.po | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lispref/numbers.texi.po b/lispref/numbers.texi.po
index 3b6dac61..d531d028 100644
--- a/lispref/numbers.texi.po
+++ b/lispref/numbers.texi.po
@@ -810,7 +810,7 @@ msgstr "Emacs Lispでは2つのfixnumが数値的に等しければ同一のLisp
 #. type: Plain text
 #: original_texis/numbers.texi:428
 msgid "Sometimes it is useful to compare numbers with @code{eql} or @code{equal}, which treat two numbers as equal if they have the same data type (both integers, or both floating point) and the same value.  By contrast, @code{=} can treat an integer and a floating-point number as equal.  @xref{Equality Predicates}."
-msgstr "数の比較において、2つの数が同じデータ型(どちらも整数か浮動小数)では、同じ値の場合は等しい数として扱う@code{eql}や@code{equal}のほうが便利なときもあります。対照的に@code{=}は整数と浮動小数点数を等しい数と扱うことができます。@ref{Equality Predicates}を参照してください。"
+msgstr "数の比較において、2つの数が同じデータ型(どちらも整数であるかどちらも浮動小数であるか)で同じ値の場合は等しい数として扱う@code{eql}や@code{equal}のほうが便利なときもあります。対照的に@code{=}は整数と浮動小数点数を(訳注:同じ値の場合には)等しい数と扱うことができます。@ref{Equality Predicates}を参照してください。"
 
 #. type: Plain text
 #: original_texis/numbers.texi:433

From ec6e7428548e9c46949ef34bd97e15d6f3200f14 Mon Sep 17 00:00:00 2001
From: m-kirihara <sfaddmki-git@yahoo.co.jp>
Date: Thu, 10 Aug 2023 18:53:11 +0900
Subject: [PATCH 08/13] =?UTF-8?q?=E3=81=88=E3=81=8A=E2=86=92=E3=81=AE?=
 =?UTF-8?q?=EF=BC=8Ccomma=E5=89=8A=E9=99=A4=EF=BC=8C=E3=81=8C=E5=B0=8F?=
 =?UTF-8?q?=E3=81=95=E3=81=84=E6=95=B4=E6=95=B0=E3=81=AF=E2=86=92=E3=82=88?=
 =?UTF-8?q?=E3=82=8A=E5=B0=8F=E3=81=95=E3=81=84=E6=95=B4=E6=95=B0=E3=81=AE?=
 =?UTF-8?q?=E6=99=82=E3=81=AF?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

emacs-28ブランチ，emacs-29ブランチへの変更と同じです．
---
 lispref/numbers.texi.po | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/lispref/numbers.texi.po b/lispref/numbers.texi.po
index d531d028..e6d4f096 100644
--- a/lispref/numbers.texi.po
+++ b/lispref/numbers.texi.po
@@ -459,23 +459,23 @@ msgstr "integer-width"
 #. type: defvar
 #: original_texis/numbers.texi:204
 msgid "The value of this variable is a nonnegative integer that controls whether Emacs signals a range error when a large integer would be calculated.  Integers with absolute values less than"
-msgstr "この変数の値は大きな整数えお計算時にEmacsが範囲エラー(range error)をシグナルするかどうかを制御する負ではない整数。絶対値が"
+msgstr "この変数の値は大きな整数の計算時にEmacsが範囲エラー(range error)をシグナルするかどうかを制御する負ではない整数。絶対値が"
 
 #. type: ifnottex
 #: original_texis/numbers.texi:206
 msgid "2**@var{n},"
-msgstr "2**@var{n},"
+msgstr "2**@var{n}"
 
 #. type: tex
 #: original_texis/numbers.texi:209
 #, no-wrap
 msgid "@math{2^{n}},\n"
-msgstr "@math{2^{n}},\n"
+msgstr "@math{2^{n}}\n"
 
 #. type: defvar
 #: original_texis/numbers.texi:215
 msgid "where @var{n} is this variable's value, do not signal a range error.  Attempts to create larger integers typically signal a range error, although there might be no signal if a larger integer can be created cheaply.  Setting this variable to a large number can be costly if a computation creates huge integers."
-msgstr "(@var{n}はこの変数の値)が小さい整数は範囲エラーをシグナルしない。大きい整数を簡単に作成できればエラーがシグナルされない場合もあるが、通常は大きな整数の作成を試みると範囲エラーをシグナルする。この変数に大きな数値を設定すると、巨大な整数の計算にコストを要する可能性がある。"
+msgstr "(@var{n}はこの変数の値)より小さい整数の時は範囲エラーをシグナルしない。大きい整数を簡単に作成できればエラーがシグナルされない場合もあるが、通常は大きな整数の作成を試みると範囲エラーをシグナルする。この変数に大きな数値を設定すると、巨大な整数の計算にコストを要する可能性がある。"
 
 #. type: section
 #: original_texis/numbers.texi:218

From 2e0d76c968a171fe38b6614766f4f70e02f227bb Mon Sep 17 00:00:00 2001
From: m-kirihara <sfaddmki-git@yahoo.co.jp>
Date: Thu, 10 Aug 2023 18:59:39 +0900
Subject: [PATCH 09/13] =?UTF-8?q?numberl=E2=86=92number=EF=BC=8C=E6=95=B4?=
 =?UTF-8?q?=E6=95=B0=E2=86=92=E8=B2=A0=E3=81=A7=E3=81=AA=E3=81=84?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

emacs-28ブランチ，emacs-29ブランチへの変更と同じです．
---
 lispref/numbers.texi.po | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lispref/numbers.texi.po b/lispref/numbers.texi.po
index e6d4f096..54beee24 100644
--- a/lispref/numbers.texi.po
+++ b/lispref/numbers.texi.po
@@ -756,7 +756,7 @@ msgstr "natural numbers"
 #. type: defun
 #: original_texis/numbers.texi:386
 msgid "This predicate (whose name comes from the phrase ``natural number'')  tests to see whether its argument is a nonnegative integer, and returns @code{t} if so, @code{nil} otherwise.  0 is considered non-negative."
-msgstr "この述語は引数が正の整数かどうかをテストしてもしそうなら@code{t}、それ以外は@code{nil}をリターンする(名前は``natural numberl: 自然数''が由来)。0は整数と判断される。"
+msgstr "この述語は引数が正の整数かどうかをテストしてもしそうなら@code{t}、それ以外は@code{nil}をリターンする(名前は``natural number: 自然数''が由来)。0は負でないと判断される。"
 
 #. type: findex
 #: original_texis/numbers.texi:387

From a9a1bf17f7d6c0347a7efb810bf2c5d7fc1325d5 Mon Sep 17 00:00:00 2001
From: m-kirihara <sfaddmki-git@yahoo.co.jp>
Date: Thu, 10 Aug 2023 19:03:01 +0900
Subject: [PATCH 10/13] =?UTF-8?q?=E3=80=8C=E3=82=92=E3=80=8D=E8=BF=BD?=
 =?UTF-8?q?=E8=A8=98=E3=80=8C=E4=B8=8B=E6=96=B9=E3=80=8D=E5=89=8A=E9=99=A4?=
 =?UTF-8?q?=E3=80=8C=E3=81=9D=E3=81=AE=E3=80=8D=E8=BF=BD=E8=A8=98=EF=BC=8C?=
 =?UTF-8?q?=E3=80=8C=E5=85=88=E8=A1=8C=E3=83=93=E3=83=83=E3=83=88=E3=81=AF?=
 =?UTF-8?q?=E2=80=A6=E4=B8=B8=E3=82=81=E3=82=89=E3=82=8C=E3=82=8B=E3=80=82?=
 =?UTF-8?q?=E3=80=8D=E2=86=92=E3=80=8C=E5=85=88=E9=A0=AD=E3=83=93=E3=83=83?=
 =?UTF-8?q?=E3=83=88=E3=81=AF=E2=80=A6=E7=AD=89=E4=BE=A1=E3=81=A7=E3=81=82?=
 =?UTF-8?q?=E3=82=8B=E3=80=82=E3=80=8D?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

emacs-28ブランチ，emacs-29ブランチへの変更と同じです．
---
 lispref/numbers.texi.po | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/lispref/numbers.texi.po b/lispref/numbers.texi.po
index 54beee24..04978339 100644
--- a/lispref/numbers.texi.po
+++ b/lispref/numbers.texi.po
@@ -1704,12 +1704,12 @@ msgstr "@math{2^{count}}\n"
 #. type: defun
 #: original_texis/numbers.texi:894
 msgid "and then converts the result to an integer by rounding downward, toward minus infinity."
-msgstr "乗じてから下方、負の無限大に向かって丸めることにより結果を変換する。"
+msgstr "を乗じてから、負の無限大に向かって丸めることによりその結果を変換する。"
 
 #. type: defun
 #: original_texis/numbers.texi:901
 msgid "Here are examples of @code{ash}, shifting a pattern of bits one place to the left and to the right.  These examples show only the low-order bits of the binary pattern; leading bits all agree with the highest-order bit shown.  As you can see, shifting left by one is equivalent to multiplying by two, whereas shifting right by one is equivalent to dividing by two and then rounding toward minus infinity."
-msgstr "以下はビットパターンを1ビット左にシフトしてから右にシフトする例。この例で2進数パターンの下位ビットだけを示している。先行ビットは表示されている上位ビットにすべて一致する。確認できるように1ビットの左シフトは2を乗じて、右シフトは2で除してから負の無限大方向に丸められる。"
+msgstr "以下はビットパターンを1ビット左にシフトしてから右にシフトする例。この例で2進数パターンの下位ビットだけを示している。先頭ビットはすべて表示されている最上位ビットと一致する。ご覧のとおり1ビットの左シフトは2を乗ずること、1ビットの右シフトは2で除してから負の無限大方向に丸められることと等価である。"
 
 #. type: group
 #: original_texis/numbers.texi:909

From 0ff7b03d1e87206f2180d511f657c527dfc465b2 Mon Sep 17 00:00:00 2001
From: m-kirihara <sfaddmki-git@yahoo.co.jp>
Date: Thu, 10 Aug 2023 20:51:11 +0900
Subject: [PATCH 11/13] =?UTF-8?q?=E3=80=8C=E5=B7=A6=E3=81=AB@var{count}?=
 =?UTF-8?q?=E3=82=B7=E3=83=95=E3=83=88=E3=81=99=E3=82=8B=E3=80=8D=E2=86=92?=
 =?UTF-8?q?=E3=80=8C=E5=B7=A6=E3=81=AB=E3=82=B7=E3=83=95=E3=83=88=E3=80=81?=
 =?UTF-8?q?@var{count}=E3=81=8C=E8=B2=A0=E3=81=AA=E3=82=89=E2=80=A60?=
 =?UTF-8?q?=E3=81=8C=E5=89=B2=E3=82=8A=E5=BD=93=E3=81=A6=E3=82=89=E3=82=8C?=
 =?UTF-8?q?=E3=82=8B=E3=80=8D=E5=A4=89=E6=9B=B4=EF=BC=8C=E3=80=8C@code{log?=
 =?UTF-8?q?and}=E3=81=AB=E2=80=A6=E3=81=95=E3=82=8C=E3=82=8B=E3=80=82?=
 =?UTF-8?q?=E3=80=8D=E8=BF=BD=E8=A8=98?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

emacs-28ブランチ，emacs-29ブランチへの変更と同じです．
---
 lispref/numbers.texi.po | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/lispref/numbers.texi.po b/lispref/numbers.texi.po
index 04978339..b80d3f9f 100644
--- a/lispref/numbers.texi.po
+++ b/lispref/numbers.texi.po
@@ -1825,7 +1825,7 @@ msgstr "logical shift"
 #. type: defun
 #: original_texis/numbers.texi:965
 msgid "@code{lsh}, which is an abbreviation for @dfn{logical shift}, shifts the bits in @var{integer1} to the left @var{count} places, or to the right if @var{count} is negative, bringing zeros into the vacated bits.  If @var{count} is negative, then @var{integer1} must be either a fixnum or a positive bignum, and @code{lsh} treats a negative fixnum as if it were unsigned by subtracting twice @code{most-negative-fixnum} before shifting, producing a nonnegative result.  This quirky behavior dates back to when Emacs supported only fixnums; nowadays @code{ash} is a better choice."
-msgstr "@code{lsh}は@dfn{logical shift}の略で、@var{integer1}のビットを左に@var{count}シフトする。@var{count}が負なら@var{integer1}はfixnumか正のbignumのいずれかでなければならず、@code{lsh}はシフト前に負のfixnumを@code{most-negative-fixnum}で2回減算してあたかも符号なしであるかのように非負の結果を生成する。この奇妙な振る舞いはEmacsがfixnumsだけをサポートしていた頃の振る舞いであり、現在では@code{ash}がより良い選択である。"
+msgstr "@code{lsh}は@dfn{logical shift}の略で、@var{integer1}のビットを左にシフト、@var{count}が負なら右にシフトする。シフトの際に空きとなったビットには0が割り当てられる。@var{count}が負なら@var{integer1}はfixnumか正のbignumのいずれかでなければならず、@code{lsh}はシフト前に負のfixnumを@code{most-negative-fixnum}で2回減算してあたかも符号なしであるかのように非負の結果を生成する。この奇妙な振る舞いはEmacsがfixnumsだけをサポートしていた頃の振る舞いであり、現在では@code{ash}がより良い選択である。"
 
 #. type: defun
 #: original_texis/numbers.texi:969
@@ -1896,7 +1896,7 @@ msgstr ""
 #. type: defun
 #: original_texis/numbers.texi:1013
 msgid "If @code{logand} is not passed any argument, it returns a value of @minus{}1.  This number is an identity element for @code{logand} because its binary representation consists entirely of ones.  If @code{logand} is passed just one argument, it returns that argument."
-msgstr "@code{logand}に何も引数も渡さなければ、値@minus{}1がリターンされる。@minus{}1を2進数で表すとすべてのビットが1なので、@minus{}1は@code{logand}にたいする単位元(identity element)である。"
+msgstr "@code{logand}に何も引数も渡さなければ、値@minus{}1がリターンされる。@minus{}1を2進数で表すとすべてのビットが1なので、@minus{}1は@code{logand}にたいする単位元(identity element)である。@code{logand}に渡す引数が1つだけならその引数がリターンされる。"
 
 #. type: group
 #: original_texis/numbers.texi:1017 original_texis/numbers.texi:1047

From a3507ee0894205d2ab2f304ecaa219a14e10730f Mon Sep 17 00:00:00 2001
From: m-kirihara <sfaddmki-git@yahoo.co.jp>
Date: Thu, 10 Aug 2023 22:03:13 +0900
Subject: [PATCH 12/13] =?UTF-8?q?@var{x}=E3=81=AB@var{y}=E3=82=92=E4=B9=97?=
 =?UTF-8?q?=E3=81=98=E3=81=A6=E2=86=92@var{x}=E3=81=AE@var{y}=E4=B9=97?=
 =?UTF-8?q?=E3=82=92?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

emacs-28ブランチ，emacs-29ブランチへの変更と同じです．
---
 lispref/numbers.texi.po | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lispref/numbers.texi.po b/lispref/numbers.texi.po
index b80d3f9f..97c25b0a 100644
--- a/lispref/numbers.texi.po
+++ b/lispref/numbers.texi.po
@@ -2258,7 +2258,7 @@ msgstr "expt x y"
 #. type: defun
 #: original_texis/numbers.texi:1206
 msgid "This function returns @var{x} raised to power @var{y}.  If both arguments are integers and @var{y} is nonnegative, the result is an integer; in this case, overflow signals an error, so watch out.  If @var{x} is a finite negative number and @var{y} is a finite non-integer, @code{expt} returns a NaN."
-msgstr "この関数は@var{x}に@var{y}を乗じてリターンする。引数が両方とも整数で@var{y}が非負なら結果は整数になる。この場合オーバーフローはエラーをシグナルするので注意。@var{x}が有限の負数で@var{y}が有限の非整数なら、@code{expt}はNaNをリターンする。"
+msgstr "この関数は@var{x}の@var{y}乗をリターンする。引数が両方とも整数で@var{y}が非負なら結果は整数になる。この場合オーバーフローはエラーをシグナルするので注意。@var{x}が有限の負数で@var{y}が有限の非整数なら、@code{expt}はNaNをリターンする。"
 
 #. type: defun
 #: original_texis/numbers.texi:1208

From a22ad0cf147a78b7d80589c6dfc35c8a166e4d76 Mon Sep 17 00:00:00 2001
From: m-kirihara <sfaddmki-git@yahoo.co.jp>
Date: Thu, 10 Aug 2023 22:06:15 +0900
Subject: [PATCH 13/13] =?UTF-8?q?=E3=81=AE=E3=82=AA=E3=82=A2=E3=82=B9?=
 =?UTF-8?q?=E5=BE=8C=E3=81=AB=E2=86=92=E3=82=92=E3=83=91=E3=82=B9(?=
 =?UTF-8?q?=E9=80=9A=E9=81=8E)=E3=81=97=E3=81=9F=E5=BE=8C=E3=81=AB?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

emacs-28ブランチ，emacs-29ブランチへの変更と同じです．
---
 lispref/objects.texi.po | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lispref/objects.texi.po b/lispref/objects.texi.po
index 7eece7c6..5f70931d 100644
--- a/lispref/objects.texi.po
+++ b/lispref/objects.texi.po
@@ -2507,7 +2507,7 @@ msgstr "autoloadオブジェクトは通常、シンボルの関数セルにオ
 #. type: Plain text
 #: original_texis/objects.texi:1505
 msgid "A @dfn{finalizer object} helps Lisp code clean up after objects that are no longer needed.  A finalizer holds a Lisp function object.  When a finalizer object becomes unreachable after a garbage collection pass, Emacs calls the finalizer's associated function object.  When deciding whether a finalizer is reachable, Emacs does not count references from finalizer objects themselves, allowing you to use finalizers without having to worry about accidentally capturing references to finalized objects themselves."
-msgstr "@dfn{ファイナライザーオブジェクト(finalizer object)}は、オブジェクトがもはや必要なくなった後のLispコードのクリーンアップを助けます。ファイナライザーは、Lisp関数オブジェクトを保持します。ガーベージコレクションのオアス後にファイナライザーオブジェクトが到達不能になったとき、Emacsはそのファイナライザーに関連付けられた関数オブジェクトを呼び出します。ファイナライザーの到達可否の判定時、もしかしてファイナライザーオブジェクト自身が参照を離さないのではないかと心配することなくファイナライザーを使用できるように、Emacsはファイナラーオブジェト自身からの参照は勘定しません。"
+msgstr "@dfn{ファイナライザーオブジェクト(finalizer object)}は、オブジェクトがもはや必要なくなった後のLispコードのクリーンアップを助けます。ファイナライザーは、Lisp関数オブジェクトを保持します。ガーベージコレクションをパス(通過)した後にファイナライザーオブジェクトが到達不能になったとき、Emacsはそのファイナライザーに関連付けられた関数オブジェクトを呼び出します。ファイナライザーの到達可否の判定時、もしかしてファイナライザーオブジェクト自身が参照を離さないのではないかと心配することなくファイナライザーを使用できるように、Emacsはファイナラーオブジェト自身からの参照は勘定しません。"
 
 #. type: Plain text
 #: original_texis/objects.texi:1509
