#. type: chapter
#: original_texis/custom.texi:6 original_texis/custom.texi:7
#, no-wrap
msgid "Customization"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:8
#, no-wrap
msgid "customization"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:12
msgid "This chapter describes some simple methods to customize the behavior of Emacs."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:18
msgid "Apart from the methods described here, see @ref{X Resources} for information about using X resources to customize Emacs, and see @ref{Keyboard Macros} for information about recording and replaying keyboard macros.  Making more far-reaching and open-ended changes involves writing Emacs Lisp code; see"
msgstr ""

#. type: iftex
#: original_texis/custom.texi:20
msgid "@cite{The Emacs Lisp Reference Manual}."
msgstr ""

#. type: ifnottex
#: original_texis/custom.texi:24
msgid "@ref{Top, Emacs Lisp, Emacs Lisp, elisp, The Emacs Lisp Reference Manual}."
msgstr ""

#. type: node
#: original_texis/custom.texi:36 original_texis/custom.texi:39
#, no-wrap
msgid "Easy Customization"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:36
msgid "Convenient way to browse and change settings."
msgstr ""

#. type: section
#: original_texis/custom.texi:36 original_texis/custom.texi:730
#: original_texis/custom.texi:731
#, no-wrap
msgid "Variables"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:36
msgid "Many Emacs commands examine Emacs variables to decide what to do; by setting variables, you can control their functioning."
msgstr ""

#. type: node
#: original_texis/custom.texi:36 original_texis/custom.texi:1673
#, no-wrap
msgid "Key Bindings"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:36
msgid "The keymaps say what command each key runs.  By changing them, you can redefine keys."
msgstr ""

#. type: node
#: original_texis/custom.texi:36 original_texis/custom.texi:2471
#, no-wrap
msgid "Init File"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:36
msgid "How to write common customizations in the initialization file."
msgstr ""

#. type: node
#: original_texis/custom.texi:36 original_texis/custom.texi:3071
#, no-wrap
msgid "Authentication"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:36
msgid "Keeping persistent authentication information."
msgstr ""

#. type: section
#: original_texis/custom.texi:40
#, no-wrap
msgid "Easy Customization Interface"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:42
#, no-wrap
msgid "settings"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:43
#, no-wrap
msgid "user option"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:44
#, no-wrap
msgid "customizable variable"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:53
msgid "Emacs has many @dfn{settings} which you can change.  Most settings are @dfn{customizable variables} (@pxref{Variables}), which are also called @dfn{user options}.  There is a huge number of customizable variables, controlling numerous aspects of Emacs behavior; the variables documented in this manual are listed in @ref{Variable Index}.  A separate class of settings are the @dfn{faces}, which determine the fonts, colors, and other attributes of text (@pxref{Faces})."
msgstr ""

#. type: findex
#: original_texis/custom.texi:54
#, no-wrap
msgid "customize"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:55
#, no-wrap
msgid "customization buffer"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:60
msgid "To browse and alter settings (both variables and faces), type @kbd{M-x customize}.  This creates a @dfn{customization buffer}, which lets you navigate through a logically organized list of settings, edit and set their values, and save them permanently."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:70 original_texis/custom.texi:72
#: original_texis/custom.texi:73
#, no-wrap
msgid "Customization Groups"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:70
msgid "How settings are classified."
msgstr ""

#. type: node
#: original_texis/custom.texi:70 original_texis/custom.texi:137
#, no-wrap
msgid "Browsing Custom"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:70
msgid "Browsing and searching for settings."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:70 original_texis/custom.texi:184
#: original_texis/custom.texi:185
#, no-wrap
msgid "Changing a Variable"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:70
msgid "How to edit an option's value and set the option."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:70 original_texis/custom.texi:363
#: original_texis/custom.texi:364
#, no-wrap
msgid "Saving Customizations"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:70
msgid "Saving customizations for future Emacs sessions."
msgstr ""

#. type: node
#: original_texis/custom.texi:70 original_texis/custom.texi:424
#, no-wrap
msgid "Face Customization"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:70
msgid "How to edit the attributes of a face."
msgstr ""

#. type: node
#: original_texis/custom.texi:70 original_texis/custom.texi:504
#, no-wrap
msgid "Specific Customization"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:70
msgid "Customizing specific settings or groups."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:70 original_texis/custom.texi:576
#: original_texis/custom.texi:577
#, no-wrap
msgid "Custom Themes"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:70
msgid "Collections of customization settings."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:70 original_texis/custom.texi:681
#: original_texis/custom.texi:682
#, no-wrap
msgid "Creating Custom Themes"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:70
msgid "How to create a new custom theme."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:74
#, no-wrap
msgid "customization groups"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:79
msgid "Customization settings are organized into @dfn{customization groups}.  These groups are collected into bigger groups, all the way up to a master group called @code{Emacs}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:82
msgid "@kbd{M-x customize} creates a customization buffer that shows the top-level @code{Emacs} group.  It looks like this, in part:"
msgstr ""

#. type: group
#: original_texis/custom.texi:89
#, no-wrap
msgid ""
"For help using this buffer, see [Easy Customization] in the [Emacs manual].\n"
"\n"
msgstr ""

#. type: group
#: original_texis/custom.texi:91
#, no-wrap
msgid ""
"________________________________________ [ Search ]\n"
"\n"
msgstr ""

#. type: group
#: original_texis/custom.texi:94
#, no-wrap
msgid ""
" Operate on all settings in this buffer:\n"
" [ Revert... ] [ Apply ] [ Apply and Save ]\n"
"\n"
msgstr ""

#. type: group
#: original_texis/custom.texi:99
#, no-wrap
msgid ""
"Emacs group: Customization of the One True Editor.\n"
"      [State]: visible group members are all at standard values.\n"
"      See also [Manual].\n"
"\n"
msgstr ""

#. type: group
#: original_texis/custom.texi:102
#, no-wrap
msgid ""
"[Editing]      Basic text editing facilities.\n"
"[Convenience]  Convenience features for faster editing.\n"
"\n"
msgstr ""

#. type: group
#: original_texis/custom.texi:104
#, no-wrap
msgid "@var{...more second-level groups...}\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:112
msgid "The main part of this buffer shows the @samp{Emacs} customization group, which contains several other groups (@samp{Editing}, @samp{Convenience}, etc.).  The contents of those groups are not listed here, only one line of documentation each."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:115
msgid "The @dfn{state} of the group indicates whether setting in that group has been edited, set, or saved.  @xref{Changing a Variable}."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:116
#, no-wrap
msgid "editable fields (customization buffer)"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:117
#, no-wrap
msgid "buttons (customization buffer)"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:118
#, no-wrap
msgid "links (customization buffer)"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:127
msgid "Most of the customization buffer is read-only, but it includes some @dfn{editable fields} that you can edit.  For example, at the top of the customization buffer is an editable field for searching for settings (@pxref{Browsing Custom}).  There are also @dfn{buttons} and @dfn{links}, which you can activate by either clicking with the mouse, or moving point there and typing @kbd{@key{RET}}.  For example, the group names like @samp{[Editing]} are links; activating one of these links brings up the customization buffer for that group."
msgstr ""

#. type: kindex
#: original_texis/custom.texi:128
#, no-wrap
msgid "TAB @r{(customization buffer)}"
msgstr ""

#. type: kindex
#: original_texis/custom.texi:129
#, no-wrap
msgid "S-TAB @r{(customization buffer)}"
msgstr ""

#. type: findex
#: original_texis/custom.texi:130
#, no-wrap
msgid "widget-forward"
msgstr ""

#. type: findex
#: original_texis/custom.texi:131
#, no-wrap
msgid "widget-backward"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:136
msgid "In the customization buffer, you can type @kbd{@key{TAB}} (@code{widget-forward}) to move forward to the next button or editable field.  @kbd{S-@key{TAB}} (@code{widget-backward}) moves back to the previous button or editable field."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:138
#, no-wrap
msgid "Browsing and Searching for Settings"
msgstr ""

#. type: findex
#: original_texis/custom.texi:139
#, no-wrap
msgid "customize-browse"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:148
msgid "From the top-level customization buffer created by @kbd{M-x customize}, you can follow the links to the subgroups of the @samp{Emacs} customization group.  These subgroups may contain settings for you to customize; they may also contain further subgroups, dealing with yet more specialized subsystems of Emacs.  As you navigate the hierarchy of customization groups, you should find some settings that you want to customize."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:153
msgid "If you are interested in customizing a particular setting or customization group, you can go straight there with the commands @kbd{M-x customize-option}, @kbd{M-x customize-face}, or @w{@kbd{M-x customize-group}}.  @xref{Specific Customization}."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:154
#, no-wrap
msgid "custom-search-field"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:164
msgid "If you don't know exactly what groups or settings you want to customize, you can search for them using the editable search field at the top of each customization buffer.  Here, you can type in a search term---either one or more words separated by spaces, or a regular expression (@pxref{Regexps}).  Then type @kbd{@key{RET}} in the field, or activate the @samp{Search} button next to it, to switch to a customization buffer containing groups and settings that match those terms.  Note, however, that this feature only finds groups and settings that are loaded in the current Emacs session."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:167
msgid "If you don't want customization buffers to show the search field, change the variable @code{custom-search-field} to @code{nil}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:171
msgid "The command @kbd{M-x customize-apropos} is similar to using the search field, except that it reads the search term(s) using the minibuffer.  @xref{Specific Customization}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:183
msgid "@kbd{M-x customize-browse} is another way to browse the available settings.  This command creates a special customization buffer, which shows only the names of groups and settings, in a structured layout.  You can show the contents of a group, in the same buffer, by invoking the @samp{[+]} button next to the group name.  When the group contents are shown, the button changes to @samp{[-]}; invoking that hides the group contents again.  Each group or setting in this buffer has a link which says @samp{[Group]}, @samp{[Option]} or @samp{[Face]}.  Invoking this link creates an ordinary customization buffer showing just that group, option, or face; this is the way to change settings that you find with @kbd{M-x customize-browse}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:189
msgid "Here is an example of what a variable, or user option, looks like in the customization buffer:"
msgstr ""

#. type: smallexample
#: original_texis/custom.texi:194
#, no-wrap
msgid ""
"[Hide] Kill Ring Max: Integer (positive or zero): 120\n"
"   [State]: STANDARD.\n"
"   Maximum length of kill ring before oldest elements are thrown away.\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:208
msgid "The first line shows that the variable is named @code{kill-ring-max}, formatted as @samp{Kill Ring Max} for easier viewing, and also shows its expected type: a positive integer or zero.  The default value is @samp{120}.  The button labeled @samp{[Hide]}, if activated, hides the variable's value and state; this is useful to avoid cluttering up the customization buffer with very long values (for this reason, variables that have very long values may start out hidden).  If you use the @samp{[Hide]} button, it changes to @samp{[Show Value]}, which you can activate to reveal the value and state.  On a graphical display, the @samp{[Hide]} and @samp{[Show Value]} buttons are replaced with graphical triangles pointing downwards and rightwards respectively."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:214
msgid "The line after the variable name indicates the @dfn{customization state} of the variable: in this example, @samp{STANDARD} means you have not changed the variable, so its value is the default one.  The @samp{[State]} button gives a menu of operations for customizing the variable."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:220
msgid "Below the customization state is the documentation for the variable.  This is the same documentation that would be shown by the @kbd{C-h v} command (@pxref{Examining}).  If the documentation is more than one line long, only one line may be shown.  If so, that line ends with a @samp{[More]} button; activate this to see the full documentation."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:221
#, no-wrap
msgid "user options, changing"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:222
#, no-wrap
msgid "customizing variables"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:223
#, no-wrap
msgid "variables, changing"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:228
msgid "To enter a new value for @samp{Kill Ring Max}, just move point to the value and edit it.  For example, type @kbd{M-d} to delete the @samp{60} and type in another number.  As you begin to alter the text, the @samp{[State]} line will change:"
msgstr ""

#. type: smallexample
#: original_texis/custom.texi:232
#, no-wrap
msgid ""
"[State]: EDITED, shown value does not take effect until you\n"
"         set or save it.\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:239
msgid "Editing the value does not make it take effect right away.  To do that, you must @dfn{set} the variable by activating the @samp{[State]} button and choosing @samp{Set for Current Session}.  Then the variable's state becomes:"
msgstr ""

#. type: smallexample
#: original_texis/custom.texi:242
#, no-wrap
msgid "[State]: SET for current session only.\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:248
msgid "You don't have to worry about specifying a value that is not valid; the @samp{Set for Current Session} operation checks for validity and will not install an unacceptable value."
msgstr ""

#. type: kindex
#: original_texis/custom.texi:249
#, no-wrap
msgid "M-TAB @r{(customization buffer)}"
msgstr ""

#. type: kindex
#: original_texis/custom.texi:250
#, no-wrap
msgid "C-M-i @r{(customization buffer)}"
msgstr ""

#. type: findex
#: original_texis/custom.texi:251
#, no-wrap
msgid "widget-complete"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:257
msgid "While editing certain kinds of values, such as file names, directory names, and Emacs command names, you can perform completion with @kbd{C-M-i} (@code{widget-complete}), or the equivalent keys @kbd{M-@key{TAB}} or @kbd{@key{ESC} @key{TAB}}.  This behaves much like minibuffer completion (@pxref{Completion})."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:263
msgid "Typing @kbd{@key{RET}} on an editable value field moves point forward to the next field or button, like @kbd{@key{TAB}}.  You can thus type @kbd{@key{RET}} when you are finished editing a field, to move on to the next button or field.  To insert a newline within an editable field, use @kbd{C-o} or @kbd{C-q C-j}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:271
msgid "For some variables, there is only a fixed set of legitimate values, and you are not allowed to edit the value directly.  Instead, a @samp{[Value Menu]} button appears before the value; activating this button presents a choice of values.  For a boolean ``on or off'' value, the button says @samp{[Toggle]}, and flips the value.  After using the @samp{[Value Menu]} or @samp{[Toggle]} button, you must again set the variable to make the chosen value take effect."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:275
msgid "Some variables have values with complex structure.  For example, the value of @code{minibuffer-frame-alist} is an association list.  Here is how it appears in the customization buffer:"
msgstr ""

#. type: smallexample
#: original_texis/custom.texi:286
#, no-wrap
msgid ""
"[Hide] Minibuffer Frame Alist:\n"
"[INS] [DEL] Parameter: width\n"
"            Value: 80\n"
"[INS] [DEL] Parameter: height\n"
"            Value: 2\n"
"[INS]\n"
"   [ State ]: STANDARD.\n"
"   Alist of parameters for the initial minibuffer frame. [Hide]\n"
"   @r{[@dots{}more lines of documentation@dots{}]}\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:295
msgid "In this case, each association in the list consists of two items, one labeled @samp{Parameter} and one labeled @samp{Value}; both are editable fields.  You can delete an association from the list with the @samp{[DEL]} button next to it.  To add an association, use the @samp{[INS]} button at the position where you want to insert it; the very last @samp{[INS]} button inserts at the end of the list."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:296
#, no-wrap
msgid "saving a setting"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:297
#, no-wrap
msgid "settings, how to save"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:302
msgid "When you set a variable, the new value takes effect only in the current Emacs session.  To @dfn{save} the value for future sessions, use the @samp{[State]} button and select the @samp{Save for Future Sessions} operation.  @xref{Saving Customizations}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:306
msgid "You can also restore the variable to its standard value by using the @samp{[State]} button and selecting the @samp{Erase Customization} operation.  There are actually four reset operations:"
msgstr ""

#. type: item
#: original_texis/custom.texi:308
#, no-wrap
msgid "Undo Edits"
msgstr ""

#. type: table
#: original_texis/custom.texi:311
msgid "If you have modified but not yet set the variable, this restores the text in the customization buffer to match the actual value."
msgstr ""

#. type: item
#: original_texis/custom.texi:312
#, no-wrap
msgid "Revert This Session's Customizations"
msgstr ""

#. type: table
#: original_texis/custom.texi:316
msgid "This restores the value of the variable to the last saved value, if there was one.  Otherwise it restores the standard value.  It updates the text accordingly."
msgstr ""

#. type: item
#: original_texis/custom.texi:317
#, no-wrap
msgid "Erase Customization"
msgstr ""

#. type: table
#: original_texis/custom.texi:320
msgid "This sets the variable to its standard value.  Any saved value that you have is also eliminated."
msgstr ""

#. type: item
#: original_texis/custom.texi:321
#, no-wrap
msgid "Set to Backup Value"
msgstr ""

#. type: table
#: original_texis/custom.texi:326
msgid "This sets the variable to a previous value that was set in the customization buffer in this session.  If you customize a variable and then reset it, which discards the customized value, you can get the discarded value back again with this operation."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:328
#, no-wrap
msgid "comments on customized settings"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:332
msgid "Sometimes it is useful to record a comment about a specific customization.  Use the @samp{Add Comment} item from the @samp{[State]} menu to create a field for entering the comment."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:334
msgid "Near the top of the customization buffer are two lines of buttons:"
msgstr ""

#. type: smallexample
#: original_texis/custom.texi:338
#, no-wrap
msgid ""
" Operate on all settings in this buffer:\n"
" [Revert...] [Apply] [Apply and Save]\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:347
msgid "The @samp{[Revert...]} button drops a menu with the first 3 reset operations described above.  The @samp{[Apply]} button applies the settings for the current session.  The @samp{[Apply and Save]} button applies the settings and saves them for future sessions; this button does not appear if Emacs was started with the @option{-q} or @option{-Q} option (@pxref{Initial Options})."
msgstr ""

#. type: kindex
#: original_texis/custom.texi:348
#, no-wrap
msgid "C-c C-c @r{(customization buffer)}"
msgstr ""

#. type: kindex
#: original_texis/custom.texi:349
#, no-wrap
msgid "C-x C-c @r{(customization buffer)}"
msgstr ""

#. type: findex
#: original_texis/custom.texi:350
#, no-wrap
msgid "Custom-set"
msgstr ""

#. type: findex
#: original_texis/custom.texi:351
#, no-wrap
msgid "Custom-save"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:356
msgid "The command @kbd{C-c C-c} (@code{Custom-set}) is equivalent to using the @samp{[Set for Current Session]} button.  The command @kbd{C-x C-s} (@code{Custom-save}) is like using the @samp{[Save for Future Sessions]} button."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:357
#, no-wrap
msgid "custom-buffer-done-kill"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:362
msgid "The @samp{[Exit]} button switches out of the customization buffer, and buries the buffer at the bottom of the buffer list.  To make it kill the customization buffer instead, change the variable @code{custom-buffer-done-kill} to @code{t}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:371
msgid "In the customization buffer, you can @dfn{save} a customization setting by choosing the @samp{Save for Future Sessions} choice from its @samp{[State]} button.  The @kbd{C-x C-s} (@code{Custom-save})  command, or the @samp{[Apply and Save]} button at the top of the customization buffer, saves all applicable settings in the buffer."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:375
msgid "Saving works by writing code to a file, usually your initialization file (@pxref{Init File}).  Future Emacs sessions automatically read this file at startup, which sets up the customizations again."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:376
#, no-wrap
msgid "custom-file"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:382
msgid "You can choose to save customizations somewhere other than your initialization file.  To make this work, you must add a couple of lines of code to your initialization file, to set the variable @code{custom-file} to the name of the desired file, and to load that file.  For example:"
msgstr ""

#. type: example
#: original_texis/custom.texi:386
#, no-wrap
msgid ""
"(setq custom-file \"~/.config/emacs-custom.el\")\n"
"(load custom-file)\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:390
msgid "You can even specify different customization files for different Emacs versions, like this:"
msgstr ""

#. type: example
#: original_texis/custom.texi:402
#, no-wrap
msgid ""
"(cond ((< emacs-major-version 28)\n"
"       ;; @r{Emacs 27 customization.}\n"
"       (setq custom-file \"~/.config/custom-27.el\"))\n"
"      ((and (= emacs-major-version 26)\n"
"            (< emacs-minor-version 3))\n"
"       ;; @r{Emacs 26 customization, before version 26.3.}\n"
"       (setq custom-file \"~/.config/custom-26.el\"))\n"
"      (t\n"
"       ;; @r{Emacs version 28.1 or later.}\n"
"       (setq custom-file \"~/.config/emacs-custom.el\")))\n"
"\n"
msgstr ""

#. type: example
#: original_texis/custom.texi:404
#, no-wrap
msgid "(load custom-file)\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:411
msgid "If Emacs was invoked with the @option{-q} or @option{--no-init-file} options (@pxref{Initial Options}), it will not let you save your customizations in your initialization file.  This is because saving customizations from such a session would wipe out all the other customizations you might have on your initialization file."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:412
#, no-wrap
msgid "unsaved customizations, reminder to save"
msgstr ""

#. type: findex
#: original_texis/custom.texi:413
#, no-wrap
msgid "custom-prompt-customize-unsaved-options"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:418
msgid "Please note that any customizations you have not chosen to save for future sessions will be lost when you terminate Emacs.  If you'd like to be prompted about unsaved customizations at termination time, add the following to your initialization file:"
msgstr ""

#. type: example
#: original_texis/custom.texi:422
#, no-wrap
msgid ""
"(add-hook 'kill-emacs-query-functions\n"
"          'custom-prompt-customize-unsaved-options)\n"
msgstr ""

#. type: subsection
#: original_texis/custom.texi:425
#, no-wrap
msgid "Customizing Faces"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:426
#, no-wrap
msgid "customizing faces"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:427
#, no-wrap
msgid "faces, customizing"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:428
#, no-wrap
msgid "fonts and faces"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:433
msgid "You can customize faces (@pxref{Faces}), which determine how Emacs displays different types of text.  Customization groups can contain both variables and faces."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:438
msgid "For example, in programming language modes, source code comments are shown with @code{font-lock-comment-face} (@pxref{Font Lock}).  In a customization buffer, that face appears like this, after you click on the @samp{[Show All Attributes]} link:"
msgstr ""

#. type: smallexample
#: original_texis/custom.texi:459
#, no-wrap
msgid ""
"[Hide] Font Lock Comment Face:[sample]\n"
"   [State] : STANDARD.\n"
"   Font Lock mode face used to highlight comments.\n"
"   [ ] Font Family: --\n"
"   [ ] Font Foundry: --\n"
"   [ ] Width: --\n"
"   [ ] Height: --\n"
"   [ ] Weight: --\n"
"   [ ] Slant: --\n"
"   [ ] Underline: --\n"
"   [ ] Overline: --\n"
"   [ ] Strike-through: --\n"
"   [ ] Box around text: --\n"
"   [ ] Inverse-video: --\n"
"   [X] Foreground: Firebrick     [Choose]  (sample)\n"
"   [ ] Background: --\n"
"   [ ] Stipple: --\n"
"   [ ] Inherit: --\n"
"   [Hide Unused Attributes]\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:469
msgid "The first three lines show the name, @samp{[State]} button, and documentation for the face.  Below that is a list of @dfn{face attributes}.  In front of each attribute is a checkbox.  A filled checkbox, @samp{[X]}, means that the face specifies a value for this attribute; an empty checkbox, @samp{[ ]}, means that the face does not specify any special value for the attribute.  You can activate a checkbox to specify or unspecify its attribute."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:478
msgid "A face does not have to specify every single attribute; in fact, most faces only specify a few attributes.  In the above example, @code{font-lock-comment-face} only specifies the foreground color.  Any unspecified attribute is taken from the special face named @code{default}, whose attributes are all specified.  The @code{default} face is the face used to display any text that does not have an explicitly-assigned face; furthermore, its background color attribute serves as the background color of the frame."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:485
msgid "The @samp{[Hide Unused Attributes]} button, at the end of the attribute list, hides the unspecified attributes of the face.  When attributes are being hidden, the button changes to @samp{[Show All Attributes]}, which reveals the entire attribute list.  The customization buffer may start out with unspecified attributes hidden, to avoid cluttering the interface."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:488
msgid "When an attribute is specified, you can change its value in the usual ways."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:494
msgid "Foreground and background colors can be specified using either color names or RGB triplets (@pxref{Colors}).  You can also use the @samp{[Choose]} button to switch to a list of color names; select a color with @kbd{@key{RET}} in that buffer to put the color name in the value field."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:497
msgid "Setting, saving and resetting a face work like the same operations for variables (@pxref{Changing a Variable})."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:503
msgid "A face can specify different appearances for different types of displays.  For example, a face can make text red on a color display, but use a bold font on a monochrome display.  To specify multiple appearances for a face, select @samp{For All Kinds of Displays} in the menu you get from invoking @samp{[State]}."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:505
#, no-wrap
msgid "Customizing Specific Items"
msgstr ""

#. type: item
#: original_texis/custom.texi:508
#, no-wrap
msgid "M-x customize-option @key{RET} @var{option} @key{RET}"
msgstr ""

#. type: itemx
#: original_texis/custom.texi:509
#, no-wrap
msgid "M-x customize-variable @key{RET} @var{option} @key{RET}"
msgstr ""

#. type: table
#: original_texis/custom.texi:511
msgid "Set up a customization buffer for just one user option, @var{option}."
msgstr ""

#. type: item
#: original_texis/custom.texi:512
#, no-wrap
msgid "M-x customize-face @key{RET} @var{face} @key{RET}"
msgstr ""

#. type: table
#: original_texis/custom.texi:514
msgid "Set up a customization buffer for just one face, @var{face}."
msgstr ""

#. type: item
#: original_texis/custom.texi:515
#, no-wrap
msgid "M-x customize-icon @key{RET} @var{face} @key{RET}"
msgstr ""

#. type: table
#: original_texis/custom.texi:517
msgid "Set up a customization buffer for just one icon, @var{icon}."
msgstr ""

#. type: item
#: original_texis/custom.texi:518
#, no-wrap
msgid "M-x customize-group @key{RET} @var{group} @key{RET}"
msgstr ""

#. type: table
#: original_texis/custom.texi:520
msgid "Set up a customization buffer for just one group, @var{group}."
msgstr ""

#. type: item
#: original_texis/custom.texi:521
#, no-wrap
msgid "M-x customize-apropos @key{RET} @var{regexp} @key{RET}"
msgstr ""

#. type: table
#: original_texis/custom.texi:524
msgid "Set up a customization buffer for all the settings and groups that match @var{regexp}."
msgstr ""

#. type: item
#: original_texis/custom.texi:525
#, no-wrap
msgid "M-x customize-changed @key{RET} @var{version} @key{RET}"
msgstr ""

#. type: table
#: original_texis/custom.texi:529
msgid "Set up a customization buffer with all the user options, faces and groups whose meaning has changed since (or been added after) Emacs version @var{version}."
msgstr ""

#. type: item
#: original_texis/custom.texi:530
#, no-wrap
msgid "M-x customize-saved"
msgstr ""

#. type: table
#: original_texis/custom.texi:533
msgid "Set up a customization buffer containing all settings that you have saved with customization buffers."
msgstr ""

#. type: item
#: original_texis/custom.texi:534
#, no-wrap
msgid "M-x customize-unsaved"
msgstr ""

#. type: table
#: original_texis/custom.texi:537
msgid "Set up a customization buffer containing all settings that you have set but not saved."
msgstr ""

#. type: findex
#: original_texis/custom.texi:539
#, no-wrap
msgid "customize-option"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:545
msgid "If you want to customize a particular user option, type @kbd{M-x customize-option}.  This reads the variable name, and sets up the customization buffer with just that one user option.  When entering the variable name into the minibuffer, completion is available, but only for the names of variables that have been loaded into Emacs."
msgstr ""

#. type: findex
#: original_texis/custom.texi:546
#, no-wrap
msgid "customize-face"
msgstr ""

#. type: findex
#: original_texis/custom.texi:547
#, no-wrap
msgid "customize-group"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:551
msgid "Likewise, you can customize a specific face using @kbd{M-x customize-face}.  You can set up a customization buffer for a specific customization group using @kbd{M-x customize-group}."
msgstr ""

#. type: findex
#: original_texis/custom.texi:552
#, no-wrap
msgid "customize-apropos"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:558
msgid "@kbd{M-x customize-apropos} prompts for a search term---either one or more words separated by spaces, or a regular expression---and sets up a customization buffer for all @emph{loaded} settings and groups with matching names.  This is like using the search field at the top of the customization buffer (@pxref{Customization Groups})."
msgstr ""

#. type: findex
#: original_texis/custom.texi:559
#, no-wrap
msgid "customize-changed"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:567
msgid "When you upgrade to a new Emacs version, you might want to consider customizing new settings, and settings whose meanings or default values have changed.  To do this, use @kbd{M-x customize-changed} and specify a previous Emacs version number using the minibuffer.  It creates a customization buffer which shows all the settings and groups whose definitions have been changed since the specified version, loading them if necessary."
msgstr ""

#. type: findex
#: original_texis/custom.texi:568
#, no-wrap
msgid "customize-saved"
msgstr ""

#. type: findex
#: original_texis/custom.texi:569
#, no-wrap
msgid "customize-unsaved"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:575
msgid "If you change settings and then decide the change was a mistake, you can use two commands to revisit your changes.  Use @kbd{M-x customize-saved} to customize settings that you have saved.  Use @kbd{M-x customize-unsaved} to customize settings that you have set but not saved."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:578
#, no-wrap
msgid "custom themes"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:584
msgid "@dfn{Custom themes} are collections of settings that can be enabled or disabled as a unit.  You can use Custom themes to switch easily between various collections of settings, and to transfer such collections from one computer to another."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:589
msgid "A Custom theme is stored as an Emacs Lisp source file.  If the name of the Custom theme is @var{name}, the theme file is named @file{@var{name}-theme.el}.  @xref{Creating Custom Themes}, for the format of a theme file and how to make one."
msgstr ""

#. type: findex
#: original_texis/custom.texi:590
#, no-wrap
msgid "customize-themes"
msgstr ""

#. type: vindex
#: original_texis/custom.texi:591
#, no-wrap
msgid "custom-theme-directory"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:592
#, no-wrap
msgid "color scheme"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:604
msgid "Type @kbd{M-x customize-themes} to switch to a buffer named @file{*Custom Themes*}, which lists the Custom themes that Emacs knows about.  By default, Emacs looks for theme files in two locations: the directory specified by the variable @code{custom-theme-directory} (which defaults to @file{~/.emacs.d/}), and a directory named @file{etc/themes} in your Emacs installation (see the variable @code{data-directory}).  The latter contains several Custom themes distributed with Emacs that customize Emacs's faces to fit various color schemes.  (Note, however, that Custom themes need not be restricted to this purpose; they can be used to customize variables too.)"
msgstr ""

#. type: vindex
#: original_texis/custom.texi:605
#, no-wrap
msgid "custom-theme-load-path"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:615
msgid "If you want Emacs to look for Custom themes in some other directory, add the directory to the list variable @code{custom-theme-load-path}.  Its default value is @code{(custom-theme-directory t)}; here, the symbol @code{custom-theme-directory} has the special meaning of the value of the variable @code{custom-theme-directory}, while @code{t} stands for the built-in theme directory @file{etc/themes}.  The themes listed in the @file{*Custom Themes*} buffer are those found in the directories specified by @code{custom-theme-load-path}."
msgstr ""

#. type: kindex
#: original_texis/custom.texi:616
#, no-wrap
msgid "C-x C-s @r{(Custom Themes buffer)}"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:624
msgid "In the @file{*Custom Themes*} buffer, you can activate the checkbox next to a Custom theme to enable or disable the theme for the current Emacs session.  When a Custom theme is enabled, all of its settings (variables and faces) take effect in the Emacs session.  To apply the choice of theme(s) to future Emacs sessions, type @kbd{C-x C-s} (@code{custom-theme-save}) or use the @samp{[Save Theme Settings]} button."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:625
#, no-wrap
msgid "custom-safe-themes"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:636
msgid "When you first enable a Custom theme, Emacs displays the contents of the theme file and asks if you really want to load it.  Because loading a Custom theme can execute arbitrary Lisp code, you should only say yes if you know that the theme is safe; in that case, Emacs offers to remember in the future that the theme is safe (this is done by saving the theme file's SHA-256 hash to the variable @code{custom-safe-themes}; if you want to treat all themes as safe, change its value to @code{t}).  Themes that come with Emacs (in the @file{etc/themes} directory) are exempt from this check, and are always considered safe."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:637
#, no-wrap
msgid "custom-enabled-themes"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:646
msgid "Setting or saving Custom themes actually works by customizing the variable @code{custom-enabled-themes}.  The value of this variable is a list of Custom theme names (as Lisp symbols, e.g., @code{tango}).  Instead of using the @file{*Custom Themes*} buffer to set @code{custom-enabled-themes}, you can customize the variable using the usual customization interface, e.g., with @kbd{M-x customize-option}.  Note that Custom themes are not allowed to set @code{custom-enabled-themes} themselves."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:655
msgid "Any customizations that you make through the customization buffer take precedence over theme settings.  This lets you easily override individual theme settings that you disagree with.  If settings from two different themes overlap, the theme occurring earlier in @code{custom-enabled-themes} takes precedence.  In the customization buffer, if a setting has been changed from its default by a Custom theme, its @samp{State} display shows @samp{THEMED} instead of @samp{STANDARD}."
msgstr ""

#. type: findex
#: original_texis/custom.texi:656
#, no-wrap
msgid "load-theme"
msgstr ""

#. type: findex
#: original_texis/custom.texi:657
#, no-wrap
msgid "enable-theme"
msgstr ""

#. type: findex
#: original_texis/custom.texi:658
#, no-wrap
msgid "disable-theme"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:665
msgid "You can enable a specific Custom theme in the current Emacs session by typing @kbd{M-x load-theme}.  This prompts for a theme name, loads the theme from the theme file, and enables it.  If a theme file has been loaded before, you can enable the theme without loading its file by typing @kbd{M-x enable-theme}.  To disable a Custom theme, type @kbd{M-x disable-theme}."
msgstr ""

#. type: findex
#: original_texis/custom.texi:666
#, no-wrap
msgid "describe-theme"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:670
msgid "To see a description of a Custom theme, type @kbd{?} on its line in the @file{*Custom Themes*} buffer; or type @kbd{M-x describe-theme} anywhere in Emacs and enter the theme name."
msgstr ""

#. type: findex
#: original_texis/custom.texi:671
#, no-wrap
msgid "theme-choose-variant"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:677
msgid "Some themes have variants (most often just two: light and dark).  You can switch to another variant using @kbd{M-x theme-choose-variant}.  If the currently active theme has only one other variant, it will be selected; if there are more variants, the command will prompt you which one to switch to."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:680
msgid "Note that @code{theme-choose-variant} only works if a single theme is active."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:683
#, no-wrap
msgid "custom themes, creating"
msgstr ""

#. type: findex
#: original_texis/custom.texi:685
#, no-wrap
msgid "customize-create-theme"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:692
msgid "You can define a Custom theme using an interface similar to the customization buffer, by typing @kbd{M-x customize-create-theme}.  This switches to a buffer named @file{*Custom Theme*}.  It also offers to insert some common Emacs faces into the theme (a convenience, since Custom themes are often used to customize faces).  If you answer no, the theme will initially contain no settings."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:700
msgid "Near the top of the @file{*Custom Theme*} buffer, there are editable fields where you can enter the theme's name and description.  The name can be anything except @samp{user}.  The description is the one that will be shown when you invoke @kbd{M-x describe-theme} for the theme.  Its first line should be a brief one-sentence summary; in the buffer made by @kbd{M-x customize-themes}, this sentence is displayed next to the theme name."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:708
msgid "To add a new setting to the theme, use the @samp{[Insert Additional Face]} or @samp{[Insert Additional Variable]} buttons.  Each button reads a face or variable name using the minibuffer, with completion, and inserts a customization entry for the face or variable.  You can edit the variable values or face attributes in the same way as in a normal customization buffer.  To remove a face or variable from the theme, uncheck the checkbox next to its name."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:709
#, no-wrap
msgid "custom-theme-directory@r{, saving theme files}"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:715
msgid "After specifying the Custom theme's faces and variables, type @kbd{C-x C-s} (@code{custom-theme-write}) or use the buffer's @samp{[Save Theme]} button.  This saves the theme file, named @file{@var{name}-theme.el} where @var{name} is the theme name, in the directory named by @code{custom-theme-directory}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:723
msgid "From the @file{*Custom Theme*} buffer, you can view and edit an existing Custom theme by activating the @samp{[Visit Theme]} button and specifying the theme name.  You can also add the settings of another theme into the buffer, using the @samp{[Merge Theme]} button.  You can import your non-theme settings into a Custom theme by using the @samp{[Merge Theme]} button and specifying the special theme named @samp{user}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:729
msgid "A theme file is simply an Emacs Lisp source file, and loading the Custom theme works by loading the Lisp file.  Therefore, you can edit a theme file directly instead of using the @file{*Custom Theme*} buffer.  @xref{Custom Themes,,, elisp, The Emacs Lisp Reference Manual}, for details."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:732
#, no-wrap
msgid "variable"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:738
msgid "A @dfn{variable} is a Lisp symbol which has a value.  The symbol's name is also called the @dfn{variable name}.  A variable name can contain any characters that can appear in a file, but most variable names consist of ordinary words separated by hyphens."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:745
msgid "The name of the variable serves as a compact description of its role.  Most variables also have a @dfn{documentation string}, which describes what the variable's purpose is, what kind of value it should have, and how the value will be used.  You can view this documentation using the help command @kbd{C-h v} (@code{describe-variable}).  @xref{Examining}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:752
msgid "Emacs uses many Lisp variables for internal record keeping, but the most interesting variables for a non-programmer user are those meant for users to change---these are called @dfn{customizable variables} or @dfn{user options} (@pxref{Easy Customization}).  In the following sections, we will describe other aspects of Emacs variables, such as how to set them outside Customize."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:771
msgid "Emacs Lisp allows any variable (with a few exceptions) to have any kind of value.  However, many variables are meaningful only if assigned values of a certain type.  For example, only numbers are meaningful values for @code{kill-ring-max}, which specifies the maximum length of the kill ring (@pxref{Earlier Kills}); if you give @code{kill-ring-max} a string value, commands such as @kbd{C-y} (@code{yank}) will signal an error.  On the other hand, some variables don't care about type; for instance, if a variable has one effect for @code{nil} values and another effect for non-@code{nil} values, then any value that is not the symbol @code{nil} induces the second effect, regardless of its type (by convention, we usually use the value @code{t}---a symbol which stands for ``true''---to specify a non-@code{nil} value).  If you set a variable using the customization buffer, you need not worry about giving it an invalid type: the customization buffer usually only allows you to enter meaningful values.  When in doubt, use @kbd{C-h v} (@code{describe-variable}) to check the variable's documentation string to see what kind of value it expects (@pxref{Examining})."
msgstr ""

#. type: node
#: original_texis/custom.texi:781 original_texis/custom.texi:783
#, no-wrap
msgid "Examining"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:781
msgid "Examining or setting one variable's value."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:781 original_texis/custom.texi:876
#: original_texis/custom.texi:877
#, no-wrap
msgid "Hooks"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:781
msgid "Hook variables let you specify programs for parts of Emacs to run on particular occasions."
msgstr ""

#. type: node
#: original_texis/custom.texi:781 original_texis/custom.texi:994
#, no-wrap
msgid "Locals"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:781
msgid "Per-buffer values of variables."
msgstr ""

#. type: node
#: original_texis/custom.texi:781 original_texis/custom.texi:1082
#, no-wrap
msgid "File Variables"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:781
msgid "How files can specify variable values."
msgstr ""

#. type: node
#: original_texis/custom.texi:781 original_texis/custom.texi:1391
#, no-wrap
msgid "Directory Variables"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:781
msgid "How variable values can be specified by directory."
msgstr ""

#. type: node
#: original_texis/custom.texi:781 original_texis/custom.texi:1609
#, no-wrap
msgid "Connection Variables"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:781
msgid "Variables which are valid for buffers with a remote default directory."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:784
#, no-wrap
msgid "Examining and Setting Variables"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:785
#, no-wrap
msgid "setting variables"
msgstr ""

#. type: item
#: original_texis/custom.texi:788
#, no-wrap
msgid "C-h v @var{var} @key{RET}"
msgstr ""

#. type: table
#: original_texis/custom.texi:791
msgid "Display the value and documentation of variable @var{var} (@code{describe-variable})."
msgstr ""

#. type: item
#: original_texis/custom.texi:792
#, no-wrap
msgid "M-x set-variable @key{RET} @var{var} @key{RET} @var{value} @key{RET}"
msgstr ""

#. type: table
#: original_texis/custom.texi:794
msgid "Change the value of variable @var{var} to @var{value}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:800
msgid "To examine the value of a variable, use @kbd{C-h v} (@code{describe-variable}).  This reads a variable name using the minibuffer, with completion, and displays both the value and the documentation of the variable.  For example,"
msgstr ""

#. type: example
#: original_texis/custom.texi:803
#, no-wrap
msgid "C-h v fill-column @key{RET}\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:807
msgid "displays something like this:"
msgstr ""

#. type: example
#: original_texis/custom.texi:811
#, no-wrap
msgid ""
"fill-column is a variable defined in @quoteleft{}C source code@quoteright{}.\n"
"Its value is 70\n"
"\n"
msgstr ""

#. type: example
#: original_texis/custom.texi:816
#, no-wrap
msgid ""
"  Automatically becomes buffer-local when set.\n"
"  This variable is safe as a file local variable if its value\n"
"  satisfies the predicate @quoteleft{}integerp@quoteright{}.\n"
"  Probably introduced at or before Emacs version 18.\n"
"\n"
msgstr ""

#. type: example
#: original_texis/custom.texi:820
#, no-wrap
msgid ""
"Documentation:\n"
"Column beyond which automatic line-wrapping should happen.\n"
"Interactively, you can set the buffer local value using C-x f.\n"
"\n"
msgstr ""

#. type: example
#: original_texis/custom.texi:822
#, no-wrap
msgid "You can customize this variable.\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:828
msgid "The line that says @samp{You can customize the variable} indicates that this variable is a user option.  @kbd{C-h v} is not restricted to user options; it allows non-customizable variables too."
msgstr ""

#. type: findex
#: original_texis/custom.texi:829
#, no-wrap
msgid "set-variable"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:835
msgid "The most convenient way to set a specific customizable variable is with @kbd{M-x set-variable}.  This reads the variable name with the minibuffer (with completion), and then reads a Lisp expression for the new value using the minibuffer a second time (you can insert the old value into the minibuffer for editing via @kbd{M-n}).  For example,"
msgstr ""

#. type: example
#: original_texis/custom.texi:838
#, no-wrap
msgid "M-x set-variable @key{RET} fill-column @key{RET} 75 @key{RET}\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:842
msgid "sets @code{fill-column} to 75."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:845
msgid "@kbd{M-x set-variable} is limited to customizable variables, but you can set any variable with a Lisp expression like this:"
msgstr ""

#. type: example
#: original_texis/custom.texi:848
#, no-wrap
msgid "(setq fill-column 75)\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:855
msgid "To execute such an expression, type @kbd{M-:} (@code{eval-expression})  and enter the expression in the minibuffer (@pxref{Lisp Eval}).  Alternatively, go to the @file{*scratch*} buffer, type in the expression, and then type @kbd{C-j} (@pxref{Lisp Interaction})."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:860
msgid "Setting variables, like all means of customizing Emacs except where otherwise stated, affects only the current Emacs session.  The only way to alter the variable in future sessions is to put something in your initialization file (@pxref{Init File})."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:864
msgid "If you're setting a customizable variable in your initialization file, and you don't want to use the Customize interface, you can use the @code{setopt} macro.  For instance:"
msgstr ""

#. type: findex
#: original_texis/custom.texi:865
#, no-wrap
msgid "setopt"
msgstr ""

#. type: example
#: original_texis/custom.texi:868
#, no-wrap
msgid "(setopt fill-column 75)\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:875
msgid "This works the same as @code{setq}, but if the variable has any special setter functions, they will be run automatically when using @code{setopt}.  You can also use @code{setopt} on other, non-customizable variables, but this is less efficient than using @code{setq}."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:878
#, no-wrap
msgid "hook"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:879
#, no-wrap
msgid "running a hook"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:887
msgid "@dfn{Hooks} are an important mechanism for customizing Emacs.  A hook is a Lisp variable which holds a list of functions, to be called on some well-defined occasion.  (This is called @dfn{running the hook}.)  The individual functions in the list are called the @dfn{hook functions} of the hook.  For example, the hook @code{kill-emacs-hook} runs just before exiting Emacs (@pxref{Exiting})."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:888
#, no-wrap
msgid "normal hook"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:894
msgid "Most hooks are @dfn{normal hooks}.  This means that when Emacs runs the hook, it calls each hook function in turn, with no arguments.  We have made an effort to keep most hooks normal, so that you can use them in a uniform way.  Every variable whose name ends in @samp{-hook} is a normal hook."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:895
#, no-wrap
msgid "abnormal hook"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:906
msgid "A few hooks are @dfn{abnormal hooks}.  Their names end in @samp{-functions}, instead of @samp{-hook} (some old code may also use the deprecated suffix @samp{-hooks}).  What makes these hooks abnormal is the way its functions are called---perhaps they are given arguments, or perhaps the values they return are used in some way.  For example, @code{find-file-not-found-functions} is abnormal because as soon as one hook function returns a non-@code{nil} value, the rest are not called at all (@pxref{Visiting}).  The documentation of each abnormal hook variable explains how its functions are used."
msgstr ""

#. type: findex
#: original_texis/custom.texi:907
#, no-wrap
msgid "add-hook"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:913
msgid "You can set a hook variable with @code{setq} like any other Lisp variable, but the recommended way to add a function to a hook (either normal or abnormal) is to use @code{add-hook}, as shown by the following examples.  @xref{Hooks,,, elisp, The Emacs Lisp Reference Manual}, for details."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:919
msgid "Most major modes run one or more @dfn{mode hooks} as the last step of initialization.  Mode hooks are a convenient way to customize the behavior of individual modes; they are always normal.  For example, here's how to set up a hook to turn on Auto Fill mode in Text mode and other modes based on Text mode:"
msgstr ""

#. type: example
#: original_texis/custom.texi:922 original_texis/custom.texi:2724
#, no-wrap
msgid "(add-hook 'text-mode-hook 'auto-fill-mode)\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:930
msgid "This works by calling @code{auto-fill-mode}, which enables the minor mode when no argument is supplied (@pxref{Minor Modes}).  Next, suppose you don't want Auto Fill mode turned on in @LaTeX{} mode, which is one of the modes based on Text mode.  You can do this with the following additional line:"
msgstr ""

#. type: example
#: original_texis/custom.texi:933
#, no-wrap
msgid "(add-hook 'latex-mode-hook (lambda () (auto-fill-mode -1)))\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:942
msgid "Here we have used the special macro @code{lambda} to construct an anonymous function (@pxref{Lambda Expressions,,, elisp, The Emacs Lisp Reference Manual}), which calls @code{auto-fill-mode} with an argument of @code{-1} to disable the minor mode.  Because @LaTeX{} mode runs @code{latex-mode-hook} after running @code{text-mode-hook}, the result leaves Auto Fill mode disabled."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:945
msgid "Here is a more complex example, showing how to use a hook to customize the indentation of C code:"
msgstr ""

#. type: group
#: original_texis/custom.texi:950
#, no-wrap
msgid ""
"(setq my-c-style\n"
"  '((c-comment-only-line-offset . 4)\n"
msgstr ""

#. type: group
#: original_texis/custom.texi:955
#, no-wrap
msgid ""
"    (c-cleanup-list . (scope-operator\n"
"                       empty-defun-braces\n"
"                       defun-close-semi))))\n"
msgstr ""

#. type: group
#: original_texis/custom.texi:960
#, no-wrap
msgid ""
"(add-hook 'c-mode-common-hook\n"
"  (lambda () (c-add-style \"my-style\" my-c-style t)))\n"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:963
#, no-wrap
msgid "Prog mode"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:964
#, no-wrap
msgid "modes for editing programs"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:975
msgid "Major mode hooks also apply to other major modes @dfn{derived} from the original mode (@pxref{Derived Modes,,, elisp, The Emacs Lisp Reference Manual}).  For instance, HTML mode is derived from Text mode (@pxref{HTML Mode}); when HTML mode is enabled, it runs @code{text-mode-hook} before running @code{html-mode-hook}.  This provides a convenient way to use a single hook to affect several related modes.  In particular, if you want to apply a hook function to any programming language mode, add it to @code{prog-mode-hook}; Prog mode is a major mode that does little else than to let other major modes inherit from it, exactly for this purpose."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:980
msgid "It is best to design your hook functions so that the order in which they are executed does not matter.  Any dependence on the order is asking for trouble.  However, the order is predictable: the hook functions are executed in the order they appear in the hook."
msgstr ""

#. type: findex
#: original_texis/custom.texi:981
#, no-wrap
msgid "remove-hook"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:987
msgid "If you play with adding various different versions of a hook function by calling @code{add-hook} over and over, remember that all the versions you added will remain in the hook variable together.  You can clear out individual functions by calling @code{remove-hook}, or do @code{(setq @var{hook-variable} nil)} to remove everything."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:988
#, no-wrap
msgid "buffer-local hooks"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:993
msgid "If the hook variable is buffer-local, the buffer-local variable will be used instead of the global variable.  However, if the buffer-local variable contains the element @code{t}, the global hook variable will be run as well."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:995
#, no-wrap
msgid "Local Variables"
msgstr ""

#. type: item
#: original_texis/custom.texi:998
#, no-wrap
msgid "M-x make-local-variable @key{RET} @var{var} @key{RET}"
msgstr ""

#. type: table
#: original_texis/custom.texi:1000
msgid "Make variable @var{var} have a local value in the current buffer."
msgstr ""

#. type: item
#: original_texis/custom.texi:1001
#, no-wrap
msgid "M-x kill-local-variable @key{RET} @var{var} @key{RET}"
msgstr ""

#. type: table
#: original_texis/custom.texi:1003
msgid "Make variable @var{var} use its global value in the current buffer."
msgstr ""

#. type: item
#: original_texis/custom.texi:1004
#, no-wrap
msgid "M-x make-variable-buffer-local @key{RET} @var{var} @key{RET}"
msgstr ""

#. type: table
#: original_texis/custom.texi:1007
msgid "Mark variable @var{var} so that setting it will make it local to the buffer that is current at that time."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1009
#, no-wrap
msgid "local variables"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1015
msgid "Almost any variable can be made @dfn{local} to a specific Emacs buffer.  This means that its value in that buffer is independent of its value in other buffers.  A few variables are always local in every buffer.  Every other Emacs variable has a @dfn{global} value which is in effect in all buffers that have not made the variable local."
msgstr ""

#. type: findex
#: original_texis/custom.texi:1016
#, no-wrap
msgid "make-local-variable"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1021
msgid "@kbd{M-x make-local-variable} reads the name of a variable and makes it local to the current buffer.  Changing its value subsequently in this buffer will not affect others, and changes in its global value will not affect this buffer."
msgstr ""

#. type: findex
#: original_texis/custom.texi:1022
#, no-wrap
msgid "make-variable-buffer-local"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1023
#, no-wrap
msgid "per-buffer variables"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1033
msgid "@kbd{M-x make-variable-buffer-local} marks a variable so it will become local automatically whenever it is set.  More precisely, once a variable has been marked in this way, the usual ways of setting the variable automatically do @code{make-local-variable} first.  We call such variables @dfn{per-buffer} variables.  Many variables in Emacs are normally per-buffer; the variable's document string tells you when this is so.  A per-buffer variable's global value is normally never effective in any buffer, but it still has a meaning: it is the initial value of the variable for each new buffer."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1042
msgid "Major modes (@pxref{Major Modes}) always make variables local to the buffer before setting the variables.  This is why changing major modes in one buffer has no effect on other buffers.  Minor modes also work by setting variables---normally, each minor mode has one controlling variable which is non-@code{nil} when the mode is enabled (@pxref{Minor Modes}).  For many minor modes, the controlling variable is per buffer, and thus always buffer-local.  Otherwise, you can make it local in a specific buffer like any other variable."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1046
msgid "A few variables cannot be local to a buffer because they are always local to each display instead (@pxref{Multiple Displays}).  If you try to make one of these variables buffer-local, you'll get an error message."
msgstr ""

#. type: findex
#: original_texis/custom.texi:1047
#, no-wrap
msgid "kill-local-variable"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1053
msgid "@kbd{M-x kill-local-variable} makes a specified variable cease to be local to the current buffer.  The global value of the variable henceforth is in effect in this buffer.  Setting the major mode kills all the local variables of the buffer except for a few variables specially marked as @dfn{permanent locals}."
msgstr ""

#. type: findex
#: original_texis/custom.texi:1054
#, no-wrap
msgid "setq-default"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1062
msgid "To set the global value of a variable, regardless of whether the variable has a local value in the current buffer, you can use the Lisp construct @code{setq-default}.  This construct is used just like @code{setq}, but it sets variables' global values instead of their local values (if any).  When the current buffer does have a local value, the new global value may not be visible until you switch to another buffer.  Here is an example:"
msgstr ""

#. type: example
#: original_texis/custom.texi:1065
#, no-wrap
msgid "(setq-default fill-column 75)\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1070
msgid "@code{setq-default} is the only way to set the global value of a variable that has been marked with @code{make-variable-buffer-local}."
msgstr ""

#. type: findex
#: original_texis/custom.texi:1071
#, no-wrap
msgid "default-value"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1077
msgid "Lisp programs can use @code{default-value} to look at a variable's default value.  This function takes a symbol as argument and returns its default value.  The argument is evaluated; usually you must quote it explicitly.  For example, here's how to obtain the default value of @code{fill-column}:"
msgstr ""

#. type: example
#: original_texis/custom.texi:1080
#, no-wrap
msgid "(default-value 'fill-column)\n"
msgstr ""

#. type: subsection
#: original_texis/custom.texi:1083
#, no-wrap
msgid "Local Variables in Files"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1084
#, no-wrap
msgid "local variables in files"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1085
#, no-wrap
msgid "file local variables"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1092
msgid "A file can specify local variable values to use when editing the file with Emacs.  Visiting the file or setting a major mode checks for local variable specifications; it automatically makes these variables local to the buffer, and sets them to the values specified in the file."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1096
msgid "File local variables override directory local variables (@pxref{Directory Variables}), if any are specified for a file's directory."
msgstr ""

#. type: subsubsection
#: original_texis/custom.texi:1100 original_texis/custom.texi:1102
#: original_texis/custom.texi:1103
#, no-wrap
msgid "Specifying File Variables"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:1100
msgid "Specifying file local variables."
msgstr ""

#. type: node
#: original_texis/custom.texi:1100 original_texis/custom.texi:1300
#, no-wrap
msgid "Safe File Variables"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:1100
msgid "Making sure file local variables are safe."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1108
msgid "There are two ways to specify file local variable values: in the first line, or with a local variables list.  Here's how to specify them in the first line:"
msgstr ""

#. type: example
#: original_texis/custom.texi:1111
#, no-wrap
msgid "-*- mode: @var{modename}; @var{var}: @var{value}; @dots{} -*-\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1119
msgid "You can specify any number of variable/value pairs in this way, each pair with a colon and semicolon.  The special variable/value pair @code{mode: @var{modename};}, if present, specifies a major mode (without the ``-mode'' suffix).  The @var{value}s are used literally, and not evaluated."
msgstr ""

#. type: findex
#: original_texis/custom.texi:1120
#, no-wrap
msgid "add-file-local-variable-prop-line"
msgstr ""

#. type: findex
#: original_texis/custom.texi:1121
#, no-wrap
msgid "delete-file-local-variable-prop-line"
msgstr ""

#. type: findex
#: original_texis/custom.texi:1122
#, no-wrap
msgid "copy-dir-locals-to-file-locals-prop-line"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1131
msgid "You can use @kbd{M-x add-file-local-variable-prop-line} instead of adding entries by hand.  This command prompts for a variable and value, and adds them to the first line in the appropriate way.  @kbd{M-x delete-file-local-variable-prop-line} prompts for a variable, and deletes its entry from the line.  The command @kbd{M-x copy-dir-locals-to-file-locals-prop-line} copies the current directory-local variables to the first line (@pxref{Directory Variables})."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1134
msgid "Here is an example first line that specifies Lisp mode and sets two variables with numeric values:"
msgstr ""

#. type: smallexample
#: original_texis/custom.texi:1137
#, no-wrap
msgid ";; -*- mode: Lisp; fill-column: 75; comment-column: 50; -*-\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1143
msgid "Aside from @code{mode}, other keywords that have special meanings as file variables are @code{coding}, @code{unibyte}, and @code{eval}.  These are described below."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1144
#, no-wrap
msgid "shell scripts, and local file variables"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1145
#, no-wrap
msgid "man pages, and local file variables"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1153
msgid "In shell scripts, the first line is used to identify the script interpreter, so you cannot put any local variables there.  To accommodate this, Emacs looks for local variable specifications in the @emph{second} line if the first line specifies an interpreter.  The same is true for man pages which start with the magic string @samp{'\\\"} to specify a list of troff preprocessors (not all do, however)."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1159
msgid "Apart from using a @samp{-*-} line, you can define file local variables using a @dfn{local variables list} near the end of the file.  The start of the local variables list should be no more than 3000 characters from the end of the file, and must be on the last page if the file is divided into pages."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1166
msgid "If a file has both a local variables list and a @samp{-*-} line, Emacs processes @emph{everything} in the @samp{-*-} line first, and @emph{everything} in the local variables list afterward.  The exception to this is a major mode specification.  Emacs applies this first, wherever it appears, since most major modes kill all local variables as part of their initialization."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1171
msgid "A local variables list starts with a line containing the string @samp{Local Variables:}, and ends with a line containing the string @samp{End:}.  In between come the variable names and values, one set per line, like this:"
msgstr ""

#. type: example
#: original_texis/custom.texi:1177
#, no-wrap
msgid ""
"/* Local Variables:  */\n"
"/* mode: c           */\n"
"/* comment-column: 0 */\n"
"/* End:              */\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1189
msgid "In this example, each line starts with the prefix @samp{/*} and ends with the suffix @samp{*/}.  Emacs recognizes the prefix and suffix by finding them surrounding the magic string @samp{Local Variables:}, on the first line of the list; it then automatically discards them from the other lines of the list.  The usual reason for using a prefix and/or suffix is to embed the local variables list in a comment, so it won't confuse other programs that the file is intended for.  The example above is for the C programming language, where comments start with @samp{/*} and end with @samp{*/}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1195
msgid "If some unrelated text might look to Emacs as a local variables list, you can countermand that by inserting a form-feed character (a page delimiter, @pxref{Pages}) after that text.  Emacs only looks for file-local variables in the last page of a file, after the last page delimiter."
msgstr ""

#. type: findex
#: original_texis/custom.texi:1196
#, no-wrap
msgid "add-file-local-variable"
msgstr ""

#. type: findex
#: original_texis/custom.texi:1197
#, no-wrap
msgid "delete-file-local-variable"
msgstr ""

#. type: findex
#: original_texis/custom.texi:1198
#, no-wrap
msgid "copy-dir-locals-to-file-locals"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1206
msgid "Instead of typing in the local variables list directly, you can use the command @kbd{M-x add-file-local-variable}.  This prompts for a variable and value, and adds them to the list, adding the @samp{Local Variables:} string and start and end markers as necessary.  The command @kbd{M-x delete-file-local-variable} deletes a variable from the list.  @kbd{M-x copy-dir-locals-to-file-locals} copies directory-local variables to the list (@pxref{Directory Variables})."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1214
msgid "As with the @samp{-*-} line, the variables in a local variables list are used literally, and are not evaluated first.  If you want to split a long string value across multiple lines of the file, you can use backslash-newline, which is ignored in Lisp string constants; you should put the prefix and suffix on each line, even lines that start or end within the string, as they will be stripped off when processing the list.  Here is an example:"
msgstr ""

#. type: example
#: original_texis/custom.texi:1220
#, no-wrap
msgid ""
"# Local Variables:\n"
"# compile-command: \"cc foo.c -Dfoo=bar -Dhack=whatever \\\n"
"#   -Dmumble=blaah\"\n"
"# End:\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1224
msgid "Some names have special meanings in a local variables list:"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:1228
msgid "@code{mode} enables the specified major mode."
msgstr ""

#. type: itemize
#: original_texis/custom.texi:1232
msgid "@code{eval} evaluates the specified Lisp expression (the value returned by that expression is ignored)."
msgstr ""

#. type: itemize
#: original_texis/custom.texi:1236
msgid "@code{coding} specifies the coding system for character code conversion of this file.  @xref{Coding Systems}."
msgstr ""

#. type: itemize
#: original_texis/custom.texi:1242
msgid "@code{unibyte} says to load or compile a file of Emacs Lisp in unibyte mode, if the value is @code{t}.  @xref{Disabling Multibyte, , Disabling Multibyte Characters, elisp, GNU Emacs Lisp Reference Manual}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1248
msgid "These four keywords are not really variables; setting them in any other context has no special meaning."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1249
#, no-wrap
msgid "fallback modes"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1256
msgid "If you're editing a file across Emacs versions, and a new mode has been introduced to handle a file in a newer Emacs version, you can use several @code{mode} entries to use the new mode (called @code{my-new-mode}) in the new Emacs, and fall back to the old mode (called @code{my-old-mode}) in older Emacs versions.  If you're enabling the modes in the first line of the file, can say:"
msgstr ""

#. type: example
#: original_texis/custom.texi:1259
#, no-wrap
msgid "-*- mode: my-old; mode: my-new -*-\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1265
msgid "Emacs will use the final defined mode it finds, so in older Emacs versions it will ignore @code{my-new-mode}, while in Emacs versions where @code{my-new-mode} is defined, it'll ignore @code{my-old-mode}.  Similarly, in a local variable block at the end of the file:"
msgstr ""

#. type: example
#: original_texis/custom.texi:1270
#, no-wrap
msgid ""
"Local variables:\n"
"mode: my-old\n"
"mode: my-new\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1280
msgid "Do not use the @code{mode} keyword for minor modes.  To enable or disable a minor mode in a local variables list, use the @code{eval} keyword with a Lisp expression that runs the mode command (@pxref{Minor Modes}).  For example, the following local variables list enables ElDoc mode (@pxref{Programming Language Doc}) by calling @code{eldoc-mode} with no argument (calling it with an argument of 1 would do the same), and disables Font Lock mode (@pxref{Font Lock}) by calling @code{font-lock-mode} with an argument of @minus{}1."
msgstr ""

#. type: example
#: original_texis/custom.texi:1286
#, no-wrap
msgid ""
";; Local Variables:\n"
";; eval: (eldoc-mode)\n"
";; eval: (font-lock-mode -1)\n"
";; End:\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1295
msgid "Note, however, that it is often a mistake to specify minor modes this way.  Minor modes represent individual user preferences, and it may be inappropriate to impose your preferences on another user who might edit the file.  If you wish to automatically enable or disable a minor mode in a situation-dependent way, it is often better to do it in a major mode hook (@pxref{Hooks})."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1299
msgid "Use the command @kbd{M-x normal-mode} to reset the local variables and major mode of a buffer according to the file name and contents, including the local variables list if any.  @xref{Choosing Modes}."
msgstr ""

#. type: subsubsection
#: original_texis/custom.texi:1301
#, no-wrap
msgid "Safety of File Variables"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1308
msgid "File-local variables can be dangerous; when you visit someone else's file, there's no telling what its local variables list could do to your Emacs.  Improper values of the @code{eval} ``variable'', and other variables such as @code{load-path}, could execute Lisp code you didn't intend to run."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1316
msgid "Therefore, whenever Emacs encounters file local variable values that are not known to be safe, it displays the file's entire local variables list, and asks you for confirmation before setting them.  You can type @kbd{y} or @key{SPC} to put the local variables list into effect, or @kbd{n} to ignore it.  When Emacs is run in batch mode (@pxref{Initial Options}), it can't really ask you, so it assumes the answer @kbd{n}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1326
msgid "Emacs normally recognizes certain variable/value pairs as safe.  For instance, it is safe to give @code{comment-column} or @code{fill-column} any integer value.  If a file specifies only known-safe variable/value pairs, Emacs does not ask for confirmation before setting them.  Otherwise, you can tell Emacs to record all the variable/value pairs in this file as safe, by typing @kbd{!} at the confirmation prompt.  When Emacs encounters these variable/value pairs subsequently, in the same file or others, it will assume they are safe."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1331
msgid "You can also tell Emacs to permanently ignore all the variable/value pairs in the file, by typing @kbd{i} at the confirmation prompt -- these pairs will thereafter be ignored in this file and in all other files."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1340
msgid "When Emacs asks for confirmation for setting directory-local variables (@pxref{Directory Variables}), typing @kbd{+} at the confirmation prompt will set all the variables, and also add the directory to the list in @code{safe-local-variable-directories} (described below), which will cause Emacs to consider this directory as safe for loading any directory-local variables in the future.  The @kbd{+} response should only be used for directories whose contents you trust."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:1341
#, no-wrap
msgid "safe-local-variable-values"
msgstr ""

#. type: vindex
#: original_texis/custom.texi:1342
#, no-wrap
msgid "ignored-local-variable-values"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1343
#, no-wrap
msgid "risky variable"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1356
msgid "Some variables, such as @code{load-path}, are considered particularly @dfn{risky}: there is seldom any reason to specify them as local variables, and changing them can be dangerous.  If a file contains only risky local variables, Emacs neither offers nor accepts @kbd{!} as input at the confirmation prompt.  If some of the local variables in a file are risky, and some are only potentially unsafe, you can enter @kbd{!} at the prompt.  It applies all the variables, but only marks the non-risky ones as safe for the future.  If you really want to record safe values for risky variables, do it directly by customizing @samp{safe-local-variable-values} (@pxref{Easy Customization}).  Similarly, if you want to record values of risky variables that should be permanently ignored, customize @code{ignored-local-variable-values}."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:1357
#, no-wrap
msgid "safe-local-variable-directories"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1366
msgid "Sometimes it is helpful to always trust directory-variables in certain directories, and skip the confirmation prompt when local variables are loaded from those directories, even if the variables are risky.  The variable @code{safe-local-variable-directories} holds the list of such directories.  The names of the directories in this list must be full absolute file names.  If the variable @code{enable-remote-dir-locals} has a non-@code{nil} value, the list can include remote directories as well (@pxref{Remote Files})."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:1367
#, no-wrap
msgid "enable-local-variables"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1377
msgid "The variable @code{enable-local-variables} allows you to change the way Emacs processes local variables.  Its default value is @code{t}, which specifies the behavior described above.  If it is @code{nil}, Emacs simply ignores all file local variables.  @code{:safe} means use only the safe values and ignore the rest.  @code{:all} instructs Emacs to set all file local variables regardless of whether their value is safe or not (we advise not to use this permanently).  Any other value says to query you about each file that has local variables, without trying to determine whether the values are known to be safe."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:1378
#, no-wrap
msgid "enable-local-eval"
msgstr ""

#. type: vindex
#: original_texis/custom.texi:1379
#, no-wrap
msgid "safe-local-eval-forms"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1386
msgid "The variable @code{enable-local-eval} controls whether Emacs processes @code{eval} variables.  The three possibilities for the variable's value are @code{t}, @code{nil}, and anything else, just as for @code{enable-local-variables}.  The default is @code{maybe}, which is neither @code{t} nor @code{nil}, so normally Emacs does ask for confirmation about processing @code{eval} variables."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1390
msgid "As an exception, Emacs never asks for confirmation to evaluate any @code{eval} form if that form occurs within the variable @code{safe-local-eval-forms}."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:1392
#, no-wrap
msgid "Per-Directory Local Variables"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1393
#, no-wrap
msgid "local variables, for all files in a directory"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1394
#, no-wrap
msgid "directory-local variables"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1395
#, no-wrap
msgid "per-directory local variables"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1406
msgid "Sometimes, you may wish to define the same set of local variables to all the files in a certain directory and its subdirectories, such as the directory tree of a large software project.  This can be accomplished with @dfn{directory-local variables}.  File local variables override directory local variables, so if some of the files in a directory need specialized settings, you can specify the settings for the majority of the directory's files in directory variables, and then define file local variables in a few files which need the general settings overridden."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1407
#, no-wrap
msgid "@file{.dir-locals.el} file"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1423
msgid "The usual way to define directory-local variables is to put a file named @file{.dir-locals.el}@footnote{ On MS-DOS, the name of this file should be @file{_dir-locals.el}, due to limitations of the DOS filesystems.  If the filesystem is limited to 8+3 file names, the name of the file will be truncated by the OS to @file{_dir-loc.el}.  } in a directory.  Whenever Emacs visits any file in that directory or any of its subdirectories, it will apply the directory-local variables specified in @file{.dir-locals.el}, as though they had been defined as file-local variables for that file (@pxref{File Variables}).  Emacs searches for @file{.dir-locals.el} starting in the directory of the visited file, and moving up the directory tree.  To avoid slowdown, this search is skipped for remote files.  If needed, the search can be extended for remote files by setting the variable @code{enable-remote-dir-locals} to @code{t}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1428
msgid "You can also use @file{.dir-locals-2.el}; if found, Emacs loads it in addition to @file{.dir-locals.el}.  This is useful when @file{.dir-locals.el} is under version control in a shared repository and can't be used for personal customizations."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1438
msgid "The @file{.dir-locals.el} file should hold a specially-constructed list, which maps major mode names (symbols) to alists (@pxref{Association Lists,,, elisp, The Emacs Lisp Reference Manual}).  Each alist entry consists of a variable name and the directory-local value to assign to that variable, when the specified major mode is enabled.  Instead of a mode name, you can specify @samp{nil}, which means that the alist applies to any mode; or you can specify a subdirectory (a string), in which case the alist applies to all files in that subdirectory."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1440
msgid "Here's an example of a @file{.dir-locals.el} file:"
msgstr ""

#. type: example
#: original_texis/custom.texi:1450
#, no-wrap
msgid ""
"((nil . ((indent-tabs-mode . t)\n"
"         (fill-column . 80)\n"
"         (mode . auto-fill)))\n"
" (c-mode . ((c-file-style . \"BSD\")\n"
"            (subdirs . nil)))\n"
" (\"src/imported\"\n"
"  . ((nil . ((change-log-default-name\n"
"              . \"ChangeLog.local\"))))))\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1463
msgid "This sets the variables @samp{indent-tabs-mode} and @code{fill-column} for any file in the directory tree, and the indentation style for any C source file.  The special @code{mode} element specifies the minor mode to be enabled.  So @code{(mode . auto-fill)} specifies that the minor mode @code{auto-fill-mode} needs to be enabled.  The special @code{subdirs} element is not a variable, but a special keyword which indicates that the C mode settings are only to be applied in the current directory, not in any subdirectories.  Finally, it specifies a different @file{ChangeLog} file name for any file in the @file{src/imported} subdirectory."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1469
msgid "If the @file{.dir-locals.el} file contains multiple different values for a variable using different mode names or directories, the values will be applied in an order such that the values for more specific modes take priority over more generic modes.  Values specified under a directory have even more priority.  For example:"
msgstr ""

#. type: example
#: original_texis/custom.texi:1475
#, no-wrap
msgid ""
"((nil . ((fill-column . 40)))\n"
" (c-mode . ((fill-column . 50)))\n"
" (prog-mode . ((fill-column . 60)))\n"
" (\"narrow-files\" . ((nil . ((fill-column . 20))))))\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1485
msgid "Files that use @code{c-mode} also match @code{prog-mode} because the former inherits from the latter.  The value used for @code{fill-column} in C files will however be @code{50} because the mode name is more specific than @code{prog-mode}.  Files using other modes inheriting from @code{prog-mode} will use @code{60}.  Any file under the directory @file{narrow-files} will use the value @code{20} even if they use @code{c-mode} because directory entries have priority over mode entries."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1491
msgid "You can specify the variables @code{mode}, @code{eval}, and @code{unibyte} in your @file{.dir-locals.el}, and they have the same meanings as they would have in file local variables.  @code{coding} cannot be specified as a directory local variable.  @xref{File Variables}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1497
msgid "The special key @code{auto-mode-alist} in a @file{.dir-locals.el} lets you set a file's major mode.  It works much like the variable @code{auto-mode-alist} (@pxref{Choosing Modes}).  For example, here is how you can tell Emacs that @file{.def} source files in this directory should be in C mode:"
msgstr ""

#. type: example
#: original_texis/custom.texi:1500
#, no-wrap
msgid "((auto-mode-alist . ((\"\\\\.def\\\\'\" . c-mode))))\n"
msgstr ""

#. type: findex
#: original_texis/custom.texi:1502
#, no-wrap
msgid "add-dir-local-variable"
msgstr ""

#. type: findex
#: original_texis/custom.texi:1503
#, no-wrap
msgid "delete-dir-local-variable"
msgstr ""

#. type: findex
#: original_texis/custom.texi:1504
#, no-wrap
msgid "copy-file-locals-to-dir-locals"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1513
msgid "Instead of editing the @file{.dir-locals.el} file by hand, you can use the command @kbd{M-x add-dir-local-variable}.  This prompts for a mode or subdirectory, and for variable and value, and adds the entry defining the directory-local variable.  @kbd{M-x delete-dir-local-variable} deletes an entry.  @kbd{M-x copy-file-locals-to-dir-locals} copies the file-local variables in the current file into @file{.dir-locals.el}, or @file{.dir-locals-2.el} if that file is also present."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1518
msgid "With a prefix argument, all three commands prompt for the file you want to modify.  Although it doesn't have to exist, you must enter a valid filename, either @file{.dir-locals.el} or @file{.dir-locals-2.el}."
msgstr ""

#. type: findex
#: original_texis/custom.texi:1519
#, no-wrap
msgid "customize-dirlocals"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1523
msgid "There's also a command to pop up an Easy Customization buffer (@pxref{Easy Customization}) to edit directory local variables, @code{customize-dirlocals}."
msgstr ""

#. type: findex
#: original_texis/custom.texi:1524
#, no-wrap
msgid "dir-locals-set-class-variables"
msgstr ""

#. type: findex
#: original_texis/custom.texi:1525
#, no-wrap
msgid "dir-locals-set-directory-class"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1535
msgid "Another method of specifying directory-local variables is to define a group of variables/value pairs in a @dfn{directory class}, using the @code{dir-locals-set-class-variables} function; then, tell Emacs which directories correspond to the class by using the @code{dir-locals-set-directory-class} function.  These function calls normally go in your initialization file (@pxref{Init File}).  This method is useful when you can't put @file{.dir-locals.el} in a directory for some reason.  For example, you could apply settings to an unwritable directory this way:"
msgstr ""

#. type: example
#: original_texis/custom.texi:1539
#, no-wrap
msgid ""
"(dir-locals-set-class-variables 'unwritable-directory\n"
"   '((nil . ((some-useful-setting . value)))))\n"
"\n"
msgstr ""

#. type: example
#: original_texis/custom.texi:1542
#, no-wrap
msgid ""
"(dir-locals-set-directory-class\n"
"   \"/usr/include/\" 'unwritable-directory)\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1548
msgid "If a variable has both a directory-local and file-local value specified, the file-local value takes effect.  Unsafe directory-local variables are handled in the same way as unsafe file-local variables (@pxref{Safe File Variables})."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1552
msgid "Directory-local variables also take effect in certain buffers that do not visit a file directly but perform work within a directory, such as Dired buffers (@pxref{Dired})."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1555 original_texis/custom.texi:1557
#: original_texis/custom.texi:1559
#, no-wrap
msgid "EditorConfig support"
msgstr ""

#. type: subsubsection
#: original_texis/custom.texi:1555 original_texis/custom.texi:1558
#, no-wrap
msgid "Per-Directory Variables via EditorConfig"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1560
#, no-wrap
msgid "directory-local variables, via EditorConfig"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1561
#, no-wrap
msgid "per-directory local variables, via EditorConfig"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1569
msgid "The @uref{https://editorconfig.org/, EditorConfig standard} is an alternative to the @file{.dir-locals.el} files, which can control only a very small number of variables, but has the advantage of being editor-neutral, not specific to Emacs.  Those settings are stored in files named @file{.editorconfig}, and affect the files in that directory and its subdirectories."
msgstr ""

#. type: findex
#: original_texis/custom.texi:1570
#, no-wrap
msgid "editorconfig-mode"
msgstr ""

#. type: vindex
#: original_texis/custom.texi:1571
#, no-wrap
msgid "enable-local-variables@r{, and EditorConfig settings}"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1585
msgid "If you want Emacs to obey the settings from @file{.editorconfig} files, you need to enable the @code{editorconfig-mode} global minor mode.  This is usually all that is needed: when the mode is activated, whenever a file is visited, Emacs will look for @file{.editorconfig} in the file's directory and its parent directories, just as it does for @file{.dir-locals.el}.  When both @file{.editorconfig} and @file{.dir-locals.el} files are found, their settings are combined, and in case of a conflict, the setting coming from the file closest in the directory hierarchy takes precedence.  If they are equally close, @file{.dir-locals.el} takes precedence.  In terms of security, the @file{.editorconfig} settings are subject to the same checks as those coming from @file{.dir-locals.el} and from file-local variables (and also honor @code{enable-local-variables}).  @xref{Safe File Variables}."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1586
#, no-wrap
msgid "@code{indent_size} setting of EditorConfig"
msgstr ""

#. type: vindex
#: original_texis/custom.texi:1587
#, no-wrap
msgid "editorconfig-indent-size-vars"
msgstr ""

#. type: vindex
#: original_texis/custom.texi:1588
#, no-wrap
msgid "editorconfig-indentation-alist"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1597
msgid "The @code{indent_size} setting of the EditorConfig standard does not correspond to a fixed variable in Emacs, but instead needs to set different variables depending on the major mode.  Ideally all major modes should set the corresponding @code{editorconfig-indent-size-vars}, but if you use a major mode in which @code{indent_size} does not take effect because the major mode does not yet support it, you can customize the @code{editorconfig-indentation-alist} variable to tell Emacs which variables need to be set in that major mode."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1598
#, no-wrap
msgid "@code{trim_trailing_whitespace} setting of EditorConfig"
msgstr ""

#. type: vindex
#: original_texis/custom.texi:1599
#, no-wrap
msgid "editorconfig-trim-whitespaces-mode"
msgstr ""

#. type: findex
#: original_texis/custom.texi:1600
#, no-wrap
msgid "delete-trailing-whitespace, and EditorConfig settings"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1608
msgid "Similarly, there are several different ways to trim whitespace at the end of lines.  When the EditorConfig @code{trim_trailing_whitespace} setting is used, by default @code{editorconfig-mode} simply calls @code{delete-trailing-whitespace} (@pxref{Useless Whitespace}) every time you save your file.  If you prefer some other behavior, you can customize @code{editorconfig-trim-whitespaces-mode} to the minor mode of your preference, such as @code{ws-butler-mode}."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:1610
#, no-wrap
msgid "Per-Connection Local Variables"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1611
#, no-wrap
msgid "local variables, for all remote connections"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1612
#, no-wrap
msgid "connection-local variables"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1613
#, no-wrap
msgid "per-connection local variables"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1621
msgid "Most of the variables reflect the situation on the local machine.  Often, they must use a different value when you operate in buffers with a remote default directory.  Think about the behavior when calling @code{shell} -- on your local machine, you might use @file{/bin/bash} and rely on termcap, but on a remote machine, it may be @file{/bin/ksh} and terminfo."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1626
msgid "This can be accomplished with @dfn{connection-local variables}.  Directory and file local variables override connection-local variables.  Unsafe connection-local variables are handled in the same way as unsafe file-local variables (@pxref{Safe File Variables})."
msgstr ""

#. type: findex
#: original_texis/custom.texi:1627
#, no-wrap
msgid "connection-local-set-profile-variables"
msgstr ""

#. type: findex
#: original_texis/custom.texi:1628
#, no-wrap
msgid "connection-local-set-profiles"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1634
msgid "Connection-local variables are declared as a group of variables/value pairs in a @dfn{profile}, using the @code{connection-local-set-profile-variables} function.  The function @code{connection-local-set-profiles} activates profiles for a given criteria, identifying a remote machine:"
msgstr ""

#. type: example
#: original_texis/custom.texi:1639
#, no-wrap
msgid ""
"(connection-local-set-profile-variables 'remote-terminfo\n"
"   '((system-uses-terminfo . t)\n"
"     (comint-terminfo-terminal . \"dumb-emacs-ansi\")))\n"
"\n"
msgstr ""

#. type: example
#: original_texis/custom.texi:1643
#, no-wrap
msgid ""
"(connection-local-set-profile-variables 'remote-ksh\n"
"   '((shell-file-name . \"/bin/ksh\")\n"
"     (shell-command-switch . \"-c\")))\n"
"\n"
msgstr ""

#. type: example
#: original_texis/custom.texi:1647
#, no-wrap
msgid ""
"(connection-local-set-profile-variables 'remote-bash\n"
"   '((shell-file-name . \"/bin/bash\")\n"
"     (shell-command-switch . \"-c\")))\n"
"\n"
msgstr ""

#. type: example
#: original_texis/custom.texi:1651
#, no-wrap
msgid ""
"(connection-local-set-profiles\n"
"   '(:application tramp :machine \"remotemachine\")\n"
"   'remote-terminfo 'remote-ksh)\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1661
msgid "This code declares three different profiles, @code{remote-terminfo}, @code{remote-ksh}, and @code{remote-bash}.  The profiles @code{remote-terminfo} and @code{remote-ksh} are applied to all buffers which have a remote default directory matching the regexp @code{\"remotemachine\"} as host name.  Such a criteria can also discriminate for the properties @code{:protocol} (this is the Tramp method) or @code{:user} (a remote user name).  The @code{nil} criteria matches all buffers with a remote default directory."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1665
msgid "Be careful when declaring different profiles with the same variable, and setting these profiles to criteria which could match in parallel.  It is unspecified which variable value is used then."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1672
msgid "Be also careful when setting connection-local variables in a buffer, which changes its major mode afterwards.  Because all buffer-local variables will be killed when changing the major mode, the connection-local variable's value would be lost.  You can prevent this by setting the respective variable's @code{permanent-local} symbol property to non-@code{nil}."
msgstr ""

#. type: section
#: original_texis/custom.texi:1674
#, no-wrap
msgid "Customizing Key Bindings"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1675
#, no-wrap
msgid "key bindings"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1681
msgid "This section describes @dfn{key bindings}, which map keys to commands, and @dfn{keymaps}, which record key bindings.  It also explains how to customize key bindings, which is done by editing your init file (@pxref{Init Rebinding})."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1682
#, no-wrap
msgid "reserved key bindings"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1683
#, no-wrap
msgid "keys, reserved"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1691
msgid "Since most modes define their own key bindings, activating a mode might override your custom key bindings.  A small number of keys are reserved for user-defined bindings, and should not be used by modes, so key bindings using those keys are safer in this regard.  The reserved key sequences are those consisting of @kbd{C-c} followed by a letter (either upper or lower case), and function keys @key{F5} through @key{F9} without modifiers (@pxref{Modifier Keys})."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:1706 original_texis/custom.texi:1708
#: original_texis/custom.texi:1709
#, no-wrap
msgid "Keymaps"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:1706
msgid "Generalities.  The global keymap."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:1706 original_texis/custom.texi:1766
#: original_texis/custom.texi:1767
#, no-wrap
msgid "Prefix Keymaps"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:1706
msgid "Keymaps for prefix keys."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:1706 original_texis/custom.texi:1820
#: original_texis/custom.texi:1821
#, no-wrap
msgid "Local Keymaps"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:1706
msgid "Major and minor modes have their own keymaps."
msgstr ""

#. type: node
#: original_texis/custom.texi:1706 original_texis/custom.texi:1852
#, no-wrap
msgid "Minibuffer Maps"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:1706
msgid "The minibuffer uses its own local keymaps."
msgstr ""

#. type: node
#: original_texis/custom.texi:1706 original_texis/custom.texi:1892
#, no-wrap
msgid "Rebinding"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:1706
msgid "How to redefine one key's meaning conveniently."
msgstr ""

#. type: node
#: original_texis/custom.texi:1706 original_texis/custom.texi:1979
#, no-wrap
msgid "Init Rebinding"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:1706
msgid "Rebinding keys with your initialization file."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:1706 original_texis/custom.texi:2109
#: original_texis/custom.texi:2110
#, no-wrap
msgid "Modifier Keys"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:1706
msgid "Using modifier keys."
msgstr ""

#. type: node
#: original_texis/custom.texi:1706 original_texis/custom.texi:2166
#, no-wrap
msgid "Function Keys"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:1706
msgid "Rebinding terminal function keys."
msgstr ""

#. type: node
#: original_texis/custom.texi:1706 original_texis/custom.texi:2237
#, no-wrap
msgid "Named ASCII Chars"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:1706
msgid "Distinguishing @key{TAB} from @kbd{C-i}, and so on."
msgstr ""

#. type: node
#: original_texis/custom.texi:1706 original_texis/custom.texi:2266
#, no-wrap
msgid "Mouse Buttons"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:1706
msgid "Rebinding mouse buttons in Emacs."
msgstr ""

#. type: node
#: original_texis/custom.texi:1706 original_texis/custom.texi:2402
#, no-wrap
msgid "Disabling"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:1706
msgid "Disabling a command means confirmation is required before it can be executed.  This is done to protect beginners from surprises."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1710
#, no-wrap
msgid "keymap"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1716
msgid "As described in @ref{Commands}, each Emacs command is a Lisp function whose definition provides for interactive use.  Like every Lisp function, a command has a function name, which usually consists of lower-case letters and hyphens."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1722
msgid "A @dfn{key sequence} (@dfn{key}, for short) is a sequence of @dfn{input events} that have a meaning as a unit.  Input events include characters, function keys, and mouse buttons---all the inputs that you can send to the computer.  A key sequence gets its meaning from its @dfn{binding}, which says what command it runs."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1726
msgid "The bindings between key sequences and command functions are recorded in data structures called @dfn{keymaps}.  Emacs has many of these, each used on particular occasions."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1727
#, no-wrap
msgid "global keymap"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1733
msgid "The @dfn{global} keymap is the most important keymap because it is always in effect.  The global keymap defines keys for Fundamental mode (@pxref{Major Modes}); most of these definitions are common to most or all major modes.  Each major or minor mode can have its own keymap which overrides the global definitions of some keys."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1742
msgid "For example, a self-inserting character such as @kbd{g} is self-inserting because the global keymap binds it to the command @code{self-insert-command}.  The standard Emacs editing characters such as @kbd{C-a} also get their standard meanings from the global keymap.  Commands to rebind keys, such as @kbd{M-x keymap-global-set}, work by storing the new binding in the proper place in the global map (@pxref{Rebinding}).  To view the current key bindings, use the @kbd{C-h b} command."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1743
#, no-wrap
msgid "function key"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1751
msgid "Most modern keyboards have function keys as well as character keys.  Function keys send input events just as character keys do, and keymaps can have bindings for them.  Key sequences can mix function keys and characters.  For example, if your keyboard has a @key{Home} function key, Emacs can recognize key sequences like @kbd{C-x @key{Home}}.  You can even mix mouse events with keyboard events, such as @kbd{S-down-mouse-1}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1758
msgid "On text terminals, typing a function key actually sends the computer a sequence of characters; the precise details of the sequence depend on the function key and on the terminal type.  (Often the sequence starts with @kbd{@key{ESC} [}.)  If Emacs understands your terminal type properly, it automatically handles such sequences as single input events."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1765
msgid "Key sequences that consist of @kbd{C-c} followed by a letter (upper or lower case; @acronym{ASCII} or non-@acronym{ASCII}) are reserved for users.  Emacs itself will never bind those key sequences, and Emacs extensions should avoid binding them.  In other words, users can bind key sequences like @kbd{C-c a} or @kbd{C-c @,{c}} and rely on these never being shadowed by other Emacs bindings."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1776
msgid "Internally, Emacs records only single events in each keymap.  Interpreting a key sequence of multiple events involves a chain of keymaps: the first keymap gives a definition for the first event, which is another keymap, which is used to look up the second event in the sequence, and so on.  Thus, a prefix key such as @kbd{C-x} or @key{ESC} has its own keymap, which holds the definition for the event that immediately follows that prefix."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1786
msgid "The definition of a prefix key is usually the keymap to use for looking up the following event.  The definition can also be a Lisp symbol whose function definition is the following keymap; the effect is the same, but it provides a command name for the prefix key that can be used as a description of what the prefix key is for.  Thus, the binding of @kbd{C-x} is the symbol @code{Control-X-prefix}, whose function definition is the keymap for @kbd{C-x} commands.  The definitions of @kbd{C-c}, @kbd{C-x}, @kbd{C-h}, and @key{ESC} as prefix keys appear in the global map, so these prefix keys are always available."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1793
msgid "Aside from ordinary prefix keys, there is a fictitious ``prefix key'' which represents the menu bar; see @ref{Menu Bar,,,elisp, The Emacs Lisp Reference Manual}, for special information about menu bar key bindings.  Mouse button events that invoke pop-up menus are also prefix keys; see @ref{Menu Keymaps,,,elisp, The Emacs Lisp Reference Manual}, for more details."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1795
msgid "Some prefix keymaps are stored in variables with names:"
msgstr ""

#. type: vindex
#: original_texis/custom.texi:1798
#, no-wrap
msgid "ctl-x-map"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:1801
msgid "@code{ctl-x-map} is the variable name for the map used for characters that follow @kbd{C-x}."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:1802
#, no-wrap
msgid "help-map"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:1804
msgid "@code{help-map} is for characters that follow @kbd{C-h}."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:1805
#, no-wrap
msgid "esc-map"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:1808
msgid "@code{esc-map} is for characters that follow @key{ESC}.  Thus, all Meta characters are actually defined by this map."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:1809
#, no-wrap
msgid "ctl-x-4-map"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:1811
msgid "@code{ctl-x-4-map} is for characters that follow @kbd{C-x 4}."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:1812
#, no-wrap
msgid "mode-specific-map"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:1814
msgid "@code{mode-specific-map} is for characters that follow @kbd{C-c}."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:1815
#, no-wrap
msgid "project-prefix-map"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:1818
msgid "@code{project-prefix-map} is for characters that follow @kbd{C-x p}, used for project-related commands (@pxref{Projects})."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1823
#, no-wrap
msgid "local keymap"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1824
#, no-wrap
msgid "minor mode keymap"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1833
msgid "So far, we have explained the ins and outs of the global map.  Major modes customize Emacs by providing their own key bindings in @dfn{local keymaps}.  For example, C mode overrides @key{TAB} to make it indent the current line for C code.  Minor modes can also have local keymaps; whenever a minor mode is in effect, the definitions in its keymap override both the major mode's local keymap and the global keymap.  In addition, portions of text in the buffer can specify their own keymaps, which override all other keymaps."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1843
msgid "A local keymap can redefine a key as a prefix key by defining it as a prefix keymap.  If the key is also defined globally as a prefix, its local and global definitions (both keymaps) effectively combine: both definitions are used to look up the event that follows the prefix key.  For example, if a local keymap defines @kbd{C-c} as a prefix keymap, and that keymap defines @kbd{C-z} as a command, this provides a local meaning for @kbd{C-c C-z}.  This does not affect other sequences that start with @kbd{C-c}; if those sequences don't have their own local bindings, their global bindings remain in effect."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1851
msgid "Another way to think of this is that Emacs handles a multi-event key sequence by looking in several keymaps, one by one, for a binding of the whole key sequence.  First it checks the minor mode keymaps for minor modes that are enabled, then it checks the major mode's keymap, and then it checks the global keymap.  This is not precisely how key lookup works, but it's good enough for understanding the results in ordinary circumstances."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:1853
#, no-wrap
msgid "Minibuffer Keymaps"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1855
#, no-wrap
msgid "minibuffer keymaps"
msgstr ""

#. type: vindex
#: original_texis/custom.texi:1856
#, no-wrap
msgid "minibuffer-local-map"
msgstr ""

#. type: vindex
#: original_texis/custom.texi:1857
#, no-wrap
msgid "minibuffer-local-ns-map"
msgstr ""

#. type: vindex
#: original_texis/custom.texi:1858
#, no-wrap
msgid "minibuffer-local-completion-map"
msgstr ""

#. type: vindex
#: original_texis/custom.texi:1859
#, no-wrap
msgid "minibuffer-local-must-match-map"
msgstr ""

#. type: vindex
#: original_texis/custom.texi:1860
#, no-wrap
msgid "minibuffer-local-filename-completion-map"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1863
msgid "The minibuffer has its own set of local keymaps; they contain various completion and exit commands."
msgstr ""

#. type: itemize
#: original_texis/custom.texi:1867
msgid "@code{minibuffer-local-map} is used for ordinary input (no completion)."
msgstr ""

#. type: itemize
#: original_texis/custom.texi:1870
msgid "@code{minibuffer-local-ns-map} is similar, except that @key{SPC} exits just like @key{RET}."
msgstr ""

#. type: itemize
#: original_texis/custom.texi:1872
msgid "@code{minibuffer-local-completion-map} is for permissive completion."
msgstr ""

#. type: itemize
#: original_texis/custom.texi:1875
msgid "@code{minibuffer-local-must-match-map} is for strict completion and for cautious completion."
msgstr ""

#. type: itemize
#: original_texis/custom.texi:1879
msgid "@code{minibuffer-local-filename-completion-map} is like the two previous ones, but specifically for file name completion.  It does not bind @key{SPC}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1886
msgid "By default, @key{TAB}, @key{SPC} and @key{?} do completion in @code{minibuffer-local-completion-map}.  If you commonly complete over collections that have elements with space or question mark characters in them, it may be convenient to disable completion on those keys by putting this in your init file:"
msgstr ""

#. type: lisp
#: original_texis/custom.texi:1890
#, no-wrap
msgid ""
"(keymap-set minibuffer-local-completion-map \"SPC\" 'self-insert-command)\n"
"(keymap-set minibuffer-local-completion-map \"?\" 'self-insert-command)\n"
msgstr ""

#. type: subsection
#: original_texis/custom.texi:1893
#, no-wrap
msgid "Changing Key Bindings Interactively"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1894
#, no-wrap
msgid "key rebinding, this session"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1895
#, no-wrap
msgid "rebinding keys, this session"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1896
#, no-wrap
msgid "binding keys"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1903
msgid "The way to redefine an Emacs key is to change its entry in a keymap.  You can change the global keymap, in which case the change is effective in all major modes (except those that have their own overriding local bindings for the same key).  Or you can change a local keymap, which affects all buffers using the same major mode."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1907
msgid "In this section, we describe how to rebind keys for the present Emacs session.  @xref{Init Rebinding}, for a description of how to make key rebindings affect future Emacs sessions."
msgstr ""

#. type: findex
#: original_texis/custom.texi:1908 original_texis/custom.texi:1991
#, no-wrap
msgid "keymap-global-set"
msgstr ""

#. type: findex
#: original_texis/custom.texi:1909
#, no-wrap
msgid "keymap-local-set"
msgstr ""

#. type: findex
#: original_texis/custom.texi:1910
#, no-wrap
msgid "keymap-global-unset"
msgstr ""

#. type: findex
#: original_texis/custom.texi:1911
#, no-wrap
msgid "keymap-local-unset"
msgstr ""

#. type: item
#: original_texis/custom.texi:1913
#, no-wrap
msgid "M-x keymap-global-set @key{RET} @var{key} @var{cmd} @key{RET}"
msgstr ""

#. type: table
#: original_texis/custom.texi:1915
msgid "Define @var{key} globally to run @var{cmd}."
msgstr ""

#. type: item
#: original_texis/custom.texi:1915
#, no-wrap
msgid "M-x keymap-local-set @key{RET} @var{key} @var{cmd} @key{RET}"
msgstr ""

#. type: table
#: original_texis/custom.texi:1918
msgid "Define @var{key} locally (in the major mode now in effect) to run @var{cmd}."
msgstr ""

#. type: item
#: original_texis/custom.texi:1918
#, no-wrap
msgid "M-x keymap-global-unset @key{RET} @var{key}"
msgstr ""

#. type: table
#: original_texis/custom.texi:1920
msgid "Make @var{key} undefined in the global map."
msgstr ""

#. type: item
#: original_texis/custom.texi:1920
#, no-wrap
msgid "M-x keymap-local-unset @key{RET} @var{key}"
msgstr ""

#. type: table
#: original_texis/custom.texi:1922
msgid "Make @var{key} undefined locally (in the major mode now in effect)."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1927
msgid "For example, the following binds @kbd{C-z} to the @code{shell} command (@pxref{Interactive Shell}), replacing the normal global definition of @kbd{C-z}:"
msgstr ""

#. type: example
#: original_texis/custom.texi:1930
#, no-wrap
msgid "M-x keymap-global-set @key{RET} C-z shell @key{RET}\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1936
msgid "The @code{keymap-global-set} command reads the command name after the key.  After you press the key, a message like this appears so that you can confirm that you are binding the key you want:"
msgstr ""

#. type: example
#: original_texis/custom.texi:1939
#, no-wrap
msgid "Set key C-z to command:\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1944
msgid "You can redefine function keys and mouse events in the same way; just type the function key or click the mouse when it's time to specify the key to rebind."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1952
msgid "You can rebind a key that contains more than one event in the same way.  Emacs keeps reading the key to rebind until it is a complete key (that is, not a prefix key).  Thus, if you type @kbd{C-f} for @var{key}, that's the end; it enters the minibuffer immediately to read @var{cmd}.  But if you type @kbd{C-x}, since that's a prefix, it reads another character; if that is @kbd{4}, another prefix character, it reads one more character, and so on.  For example,"
msgstr ""

#. type: example
#: original_texis/custom.texi:1955
#, no-wrap
msgid "M-x keymap-global-set @key{RET} C-x 4 $ spell-other-window @key{RET}\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1960
msgid "redefines @kbd{C-x 4 $} to run the (fictitious) command @code{spell-other-window}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1966
msgid "You can remove the global definition of a key with @code{keymap-global-unset}.  This makes the key @dfn{undefined}; if you type it, Emacs will just beep.  Similarly, @code{keymap-local-unset} makes a key undefined in the current major mode keymap, which makes the global definition (or lack of one) come back into effect in that major mode."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1973
msgid "If you have redefined (or undefined) a key and you subsequently wish to retract the change, undefining the key will not do the job---you need to redefine the key with its standard definition.  To find the name of the standard definition of a key, go to a Fundamental mode buffer in a fresh Emacs and use @kbd{C-h c}.  The documentation of keys in this manual also lists their command names."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1978
msgid "If you want to prevent yourself from invoking a command by mistake, it is better to disable the command than to undefine the key.  A disabled command is less work to invoke when you really want to.  @xref{Disabling}."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:1980
#, no-wrap
msgid "Rebinding Keys in Your Init File"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1981
#, no-wrap
msgid "rebinding major mode keys"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1982
#, no-wrap
msgid "key rebinding, permanent"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:1983
#, no-wrap
msgid "rebinding keys, permanently"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1990
msgid "If you have a set of key bindings that you like to use all the time, you can specify them in your initialization file by writing Lisp code.  @xref{Init File}, for a description of the initialization file."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:1996
msgid "The recommended way to write a key binding using Lisp is to use either the @code{keymap-global-set} or the @code{keymap-set} functions.  For example, here's how to bind @kbd{C-z} to the @code{shell} command in the global keymap (@pxref{Interactive Shell}):"
msgstr ""

#. type: example
#: original_texis/custom.texi:1999
#, no-wrap
msgid "(keymap-global-set \"C-z\" 'shell)\n"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2001
#, no-wrap
msgid "key sequence syntax"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2010
msgid "The first argument to @code{keymap-global-set} describes the key sequence.  It is a string made of a series of characters separated by spaces, with each character corresponding to a key.  Keys with modifiers can be specified by prepending the modifier, such as @samp{C-} for Control, or @samp{M-} for Meta.  Special keys, such as @key{TAB} and @key{RET}, can be specified within angle brackets as in @kbd{@key{TAB}} and @kbd{@key{RET}}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2016
msgid "The single-quote before the command name that is being bound to the key sequence, @code{shell} in the above example, marks it as a constant symbol rather than a variable.  If you omit the quote, Emacs would try to evaluate @code{shell} as a variable.  This will probably cause an error; it certainly isn't what you want."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2019
msgid "Here are some additional examples, including binding function keys and mouse events:"
msgstr ""

#. type: example
#: original_texis/custom.texi:2027
#, no-wrap
msgid ""
"(keymap-global-set \"C-c y\" 'clipboard-yank)\n"
"(keymap-global-set \"C-M-q\" 'query-replace)\n"
"(keymap-global-set \"<f5>\" 'flyspell-mode)\n"
"(keymap-global-set \"C-<f5>\" 'display-line-numbers-mode)\n"
"(keymap-global-set \"C-<right>\" 'forward-sentence)\n"
"(keymap-global-set \"<mouse-2>\" 'mouse-save-then-kill)\n"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2029
#, no-wrap
msgid "binding key to string"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2034
msgid "Key sequences can also be bound directly to Lisp strings rather than commands.  Such strings are written using the same syntax as key sequences.  For example, to bind @kbd{C-c h} to the string @samp{hello}:"
msgstr ""

#. type: example
#: original_texis/custom.texi:2037
#, no-wrap
msgid "(keymap-global-set \"C-c h\" \"h e l l o\")\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2041
msgid "Since this is somewhat cumbersome to write, the convenience function @code{key-description} can be used instead:"
msgstr ""

#. type: example
#: original_texis/custom.texi:2044
#, no-wrap
msgid "(keymap-global-set \"C-c h\" (key-description \"hello\"))\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2048
msgid "Non-@acronym{ASCII} characters can be specified directly in the string.  To bind to e.g. @samp{ol@'a}, use:"
msgstr ""

#. type: example
#: original_texis/custom.texi:2051
#, no-wrap
msgid "(keymap-global-set \"C-c h\" (key-description \"ol@'a\"))\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2058
msgid "However, be aware that language and coding systems may cause problems with key bindings for non-@acronym{ASCII} characters (@pxref{Init Non-ASCII}).  Writing the binding directly with the Unicode codepoint avoids these problems (@pxref{International Chars} for how to determine the codepoint of a character from within Emacs):"
msgstr ""

#. type: example
#: original_texis/custom.texi:2061
#, no-wrap
msgid "(keymap-global-set \"C-c h\" (key-description \"ol\\u00E1\"))\n"
msgstr ""

#. type: findex
#: original_texis/custom.texi:2063
#, no-wrap
msgid "global-set-key"
msgstr ""

#. type: findex
#: original_texis/custom.texi:2064
#, no-wrap
msgid "define-key"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2069
msgid "Alternatively, you can use the low level functions @code{define-key} and @code{global-set-key}.  For example, to bind @kbd{C-z} to the @code{shell} command, as in the above example, using these low-level functions, use:"
msgstr ""

#. type: example
#: original_texis/custom.texi:2072
#, no-wrap
msgid "(global-set-key (kbd \"C-z\") 'shell)\n"
msgstr ""

#. type: findex
#: original_texis/custom.texi:2074
#, no-wrap
msgid "kbd"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2083
msgid "There are various ways to specify the key sequence but the simplest is to use the function @code{kbd} as shown in the example above.  @code{kbd} takes a single string argument that is a textual representation of a key sequence, and converts it into a form suitable for low-level functions such as @code{global-set-key}.  For more details about binding keys using Lisp, @pxref{Keymaps,,, elisp, The Emacs Lisp Reference Manual}."
msgstr ""

#. type: findex
#: original_texis/custom.texi:2084
#, no-wrap
msgid "keymap-set"
msgstr ""

#. type: findex
#: original_texis/custom.texi:2085
#, no-wrap
msgid "keymap-unset"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2091
msgid "As described in @ref{Local Keymaps}, major modes and minor modes can define local keymaps.  These keymaps are constructed when the mode is loaded for the first time in a session.  The function @code{keymap-set} can be used to make changes in a specific keymap.  To remove a key binding, use @code{keymap-unset}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2098
msgid "Since a mode's keymaps are not constructed until it has been loaded, you must delay running code which modifies them, e.g., by putting it on a @dfn{mode hook} (@pxref{Hooks}).  For example, Texinfo mode runs the hook @code{texinfo-mode-hook}.  Here's how you can use the hook to add local bindings for @kbd{C-c n} and @kbd{C-c p}, and remove the one for @kbd{C-c C-x x} in Texinfo mode:"
msgstr ""

#. type: example
#: original_texis/custom.texi:2107
#, no-wrap
msgid ""
"(add-hook 'texinfo-mode-hook\n"
"          (lambda ()\n"
"            (keymap-set texinfo-mode-map \"C-c p\"\n"
"                        'backward-paragraph)\n"
"            (keymap-set texinfo-mode-map \"C-c n\"\n"
"                        'forward-paragraph)\n"
"            (keymap-set texinfo-mode-map \"C-c C-x x\" nil)))\n"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2111
#, no-wrap
msgid "modifier keys, and key rebinding"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2119
msgid "The default key bindings in Emacs are set up so that modified alphabetical characters are case-insensitive.  In other words, @kbd{C-A} does the same thing as @kbd{C-a}, and @kbd{M-A} does the same thing as @kbd{M-a}.  This concerns only alphabetical characters, and does not apply to shifted versions of other keys; for instance, @kbd{C-@@} is not the same as @kbd{C-2}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2126
msgid "A @key{Control}-modified alphabetical character is generally considered case-insensitive: Emacs always treats @kbd{C-A} as @kbd{C-a}, @kbd{C-B} as @kbd{C-b}, and so forth.  The reason for this is historical: In non-graphical environments there is no distinction between those keystrokes.  However, you can bind shifted @key{Control} alphabetical keystrokes in GUI frames:"
msgstr ""

#. type: lisp
#: original_texis/custom.texi:2129
#, no-wrap
msgid "(keymap-global-set \"C-S-n\" #'previous-line)\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2135
msgid "For all other modifiers, you can make the modified alphabetical characters case-sensitive (even on non-graphical frames) when you customize Emacs.  For instance, you could make @kbd{M-a} and @kbd{M-A} run different commands."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2136
#, no-wrap
msgid "Alt, modifier key"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2137
#, no-wrap
msgid "Super, modifier key"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2138
#, no-wrap
msgid "Hyper, modifier key"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2139
#, no-wrap
msgid "s-"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2140
#, no-wrap
msgid "H-"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2141
#, no-wrap
msgid "A-"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2153
msgid "Although only the @key{Control} and @key{Meta} modifier keys are commonly used, Emacs supports three other modifier keys.  These are called @key{Super}, @key{Hyper}, and @key{Alt}.  Few terminals provide ways to use these modifiers; the key labeled @key{Alt} on most keyboards usually issues the @key{Meta} modifier, not @key{Alt}.  The standard key bindings in Emacs do not include any characters with the @key{Super} and @key{Hyper} modifiers, and only a small number of standard key bindings use @key{Alt}.  However, you can customize Emacs to assign meanings to key bindings that use these modifiers.  The modifier bits are labeled as @samp{s-}, @samp{H-} and @samp{A-} respectively."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2154
#, no-wrap
msgid "modifier keys unsupported by keyboard"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2165
msgid "Even if your keyboard lacks these additional modifier keys, you can enter them using @kbd{C-x @@}: @kbd{C-x @@ h} adds the Hyper flag to the next character, @kbd{C-x @@ s} adds the Super flag, and @kbd{C-x @@ a} adds the Alt flag.  For instance, @kbd{C-x @@ h C-a} is a way to enter @kbd{Hyper-Control-a}.  (Unfortunately, there is no way to add two modifiers by using @kbd{C-x @@} twice for the same character, because the first one goes to work on the @kbd{C-x}.)  You can similarly enter the Shift, Control, and Meta modifiers by using @kbd{C-x @@ S}, @kbd{C-x @@ c}, and @kbd{C-x @@ m}, respectively, although this is rarely needed."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:2167
#, no-wrap
msgid "Rebinding Function Keys"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2175
msgid "Key sequences can contain function keys as well as ordinary characters.  Just as Lisp characters (actually integers) represent keyboard characters, Lisp symbols represent function keys.  If the function key has a word as its label, then that word is also the name of the corresponding Lisp symbol.  Here are the conventional Lisp names for common function keys:"
msgstr ""

#. type: item
#: original_texis/custom.texi:2177
#, no-wrap
msgid "@code{left}, @code{up}, @code{right}, @code{down}"
msgstr ""

#. type: table
#: original_texis/custom.texi:2179
msgid "Cursor arrow keys."
msgstr ""

#. type: item
#: original_texis/custom.texi:2180
#, no-wrap
msgid "@code{begin}, @code{end}, @code{home}, @code{next}, @code{prior}"
msgstr ""

#. type: table
#: original_texis/custom.texi:2182
msgid "Other cursor repositioning keys."
msgstr ""

#. type: item
#: original_texis/custom.texi:2183
#, no-wrap
msgid "@code{select}, @code{print}, @code{execute}, @code{backtab}"
msgstr ""

#. type: itemx
#: original_texis/custom.texi:2184
#, no-wrap
msgid "@code{insert}, @code{undo}, @code{redo}, @code{clearline}"
msgstr ""

#. type: itemx
#: original_texis/custom.texi:2185
#, no-wrap
msgid "@code{insertline}, @code{deleteline}, @code{insertchar}, @code{deletechar}"
msgstr ""

#. type: table
#: original_texis/custom.texi:2187
msgid "Miscellaneous function keys."
msgstr ""

#. type: item
#: original_texis/custom.texi:2188
#, no-wrap
msgid "@code{f1}, @code{f2}, @dots{} @code{f35}"
msgstr ""

#. type: table
#: original_texis/custom.texi:2190
msgid "Numbered function keys (across the top of the keyboard)."
msgstr ""

#. type: item
#: original_texis/custom.texi:2191
#, no-wrap
msgid "@code{kp-add}, @code{kp-subtract}, @code{kp-multiply}, @code{kp-divide}"
msgstr ""

#. type: itemx
#: original_texis/custom.texi:2192
#, no-wrap
msgid "@code{kp-backtab}, @code{kp-space}, @code{kp-tab}, @code{kp-enter}"
msgstr ""

#. type: itemx
#: original_texis/custom.texi:2193
#, no-wrap
msgid "@code{kp-separator}, @code{kp-decimal}, @code{kp-equal}"
msgstr ""

#. type: itemx
#: original_texis/custom.texi:2194
#, no-wrap
msgid "@code{kp-prior}, @code{kp-next}, @code{kp-end}, @code{kp-home}"
msgstr ""

#. type: itemx
#: original_texis/custom.texi:2195
#, no-wrap
msgid "@code{kp-left}, @code{kp-up}, @code{kp-right}, @code{kp-down}"
msgstr ""

#. type: itemx
#: original_texis/custom.texi:2196
#, no-wrap
msgid "@code{kp-insert }, @code{kp-delete}"
msgstr ""

#. type: table
#: original_texis/custom.texi:2198
msgid "Keypad keys (to the right of the regular keyboard), with names or punctuation."
msgstr ""

#. type: item
#: original_texis/custom.texi:2199
#, no-wrap
msgid "@code{kp-0}, @code{kp-1}, @dots{} @code{kp-9}"
msgstr ""

#. type: table
#: original_texis/custom.texi:2201
msgid "Keypad keys with digits."
msgstr ""

#. type: item
#: original_texis/custom.texi:2202
#, no-wrap
msgid "@code{kp-f1}, @code{kp-f2}, @code{kp-f3}, @code{kp-f4}"
msgstr ""

#. type: table
#: original_texis/custom.texi:2204
msgid "Keypad PF keys."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2210
msgid "These names are conventional, but some systems (especially when using X) may use different names.  To make certain what symbol is used for a given function key on your terminal, type @kbd{C-h c} followed by that key."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2212
msgid "@xref{Init Rebinding}, for examples of binding function keys."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2213
#, no-wrap
msgid "keypad"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2228
msgid "Many keyboards have a numeric keypad on the right-hand side.  The numeric keys in the keypad double up as cursor motion keys, toggled by a key labeled @samp{Num Lock}.  By default, Emacs translates these keys to the corresponding keys on the main keyboard.  For example, when @samp{Num Lock} is on, the key labeled @samp{8} on the numeric keypad produces @code{kp-8}, which is translated to @kbd{8}; when @samp{Num Lock} is off, the same key produces @code{kp-up}, which is translated to @key{UP}.  If you rebind a key such as @kbd{8} or @key{UP}, it affects the equivalent keypad key too.  However, if you rebind a @samp{kp-} key directly, that won't affect its non-keypad equivalent.  Note that the modified keys are not translated: for instance, if you hold down the @key{Meta} key while pressing the @samp{8} key on the numeric keypad, that generates @kbd{M-@key{kp-8}}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2236
msgid "Emacs provides a convenient method for binding the numeric keypad keys, using the variables @code{keypad-setup}, @code{keypad-numlock-setup}, @code{keypad-shifted-setup}, and @code{keypad-numlock-shifted-setup}.  These can be found in the @samp{keyboard} customization group (@pxref{Easy Customization}).  You can rebind the keys to perform other tasks, such as issuing numeric prefix arguments."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:2238
#, no-wrap
msgid "Named @acronym{ASCII} Control Characters"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2248
msgid "@key{TAB}, @key{RET}, @key{BS}, @key{LFD}, @key{ESC}, and @key{DEL} started out as names for certain @acronym{ASCII} control characters, used so often that they have special keys of their own.  For instance, @key{TAB} was another name for @kbd{C-i}.  Later, users found it convenient to distinguish in Emacs between these keys and the corresponding control characters typed with the @key{Ctrl} key.  Therefore, on most modern terminals, they are no longer the same: @key{TAB} is different from @kbd{C-i}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2256
msgid "Emacs can distinguish these two kinds of input if the keyboard does.  It treats the special keys as function keys named @code{tab}, @code{return}, @code{backspace}, @code{linefeed}, @code{escape}, and @code{delete}.  These function keys translate automatically into the corresponding @acronym{ASCII} characters @emph{if} they have no bindings of their own.  As a result, neither users nor Lisp programs need to pay attention to the distinction unless they care to."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2261
msgid "If you do not want to distinguish between (for example) @key{TAB} and @kbd{C-i}, make just one binding, for the @acronym{ASCII} character @key{TAB} (octal code 011).  If you do want to distinguish, make one binding for this @acronym{ASCII} character, and another for the function key @code{tab}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2265
msgid "With an ordinary @acronym{ASCII} terminal, there is no way to distinguish between @key{TAB} and @kbd{C-i} (and likewise for other such pairs), because the terminal sends the same character in both cases."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:2267
#, no-wrap
msgid "Rebinding Mouse Buttons"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2268
#, no-wrap
msgid "mouse button events"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2269
#, no-wrap
msgid "rebinding mouse buttons"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2270
#, no-wrap
msgid "click events"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2271
#, no-wrap
msgid "drag events"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2272
#, no-wrap
msgid "down events"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2273
#, no-wrap
msgid "button-down events"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2280
msgid "Emacs uses Lisp symbols to designate mouse buttons, too.  The ordinary mouse events in Emacs are @dfn{click} events; these happen when you press a button and release it without moving the mouse.  You can also get @dfn{drag} events, when you move the mouse while holding the button down.  Drag events happen when you finally let go of the button."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2284
msgid "The symbols for basic click events are @code{mouse-1} for the leftmost button, @code{mouse-2} for the next, and so on.  Here is how you can redefine the second mouse button to split the current window:"
msgstr ""

#. type: example
#: original_texis/custom.texi:2287
#, no-wrap
msgid "(keymap-global-set \"<mouse-2>\" 'split-window-below)\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2292
msgid "The symbols for drag events are similar, but have the prefix @samp{drag-} before the word @samp{mouse}.  For example, dragging the first button generates a @code{drag-mouse-1} event."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2298
msgid "You can also define bindings for events that occur when a mouse button is pressed down.  These events start with @samp{down-} instead of @samp{drag-}.  Such events are generated only if they have key bindings.  When you get a button-down event, a corresponding click or drag event will always follow."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2299
#, no-wrap
msgid "double clicks"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2300
#, no-wrap
msgid "triple clicks"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2307
msgid "If you wish, you can distinguish single, double, and triple clicks.  A double click means clicking a mouse button twice in approximately the same place.  The first click generates an ordinary click event.  The second click, if it comes soon enough, generates a double-click event instead.  The event type for a double-click event starts with @samp{double-}: for example, @code{double-mouse-3}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2311
msgid "This means that you can give a special meaning to the second click at the same place, but it must act on the assumption that the ordinary single click definition has run when the first click was received."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2317
msgid "This constrains what you can do with double clicks, but user interface designers say that this constraint ought to be followed in any case.  A double click should do something similar to the single click, only more so.  The command for the double-click event should perform the extra work for the double click."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2322
msgid "If a double-click event has no binding, it changes to the corresponding single-click event.  Thus, if you don't define a particular double click specially, it executes the single-click command twice."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2333
msgid "Emacs also supports triple-click events whose names start with @samp{triple-}.  Emacs does not distinguish quadruple clicks as event types; clicks beyond the third generate additional triple-click events.  However, the full number of clicks is recorded in the event list, so if you know Emacs Lisp you can distinguish if you really want to (@pxref{Click Events,,, elisp, The Emacs Lisp Reference Manual}).  We don't recommend distinct meanings for more than three clicks, but sometimes it is useful for subsequent clicks to cycle through the same set of three meanings, so that four clicks are equivalent to one click, five are equivalent to two, and six are equivalent to three."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2340
msgid "Emacs also records multiple presses in drag and button-down events.  For example, when you press a button twice, then move the mouse while holding the button, Emacs gets a @samp{double-drag-} event.  And at the moment when you press it down for the second time, Emacs gets a @samp{double-down-} event (which is ignored, like all button-down events, if it has no binding)."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:2341
#, no-wrap
msgid "double-click-time"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2347
msgid "The variable @code{double-click-time} specifies how much time can elapse between clicks and still allow them to be grouped as a multiple click.  Its value is in units of milliseconds.  If the value is @code{nil}, double clicks are not detected at all.  If the value is @code{t}, then there is no time limit.  The default is 500."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:2348
#, no-wrap
msgid "double-click-fuzz"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2354
msgid "The variable @code{double-click-fuzz} specifies how much the mouse can move between clicks and still allow them to be grouped as a multiple click.  Its value is in units of pixels on windowed displays and in units of 1/8 of a character cell on text-mode terminals; the default is 3."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2359
msgid "The symbols for mouse events also indicate the status of the modifier keys, with the usual prefixes @samp{C-}, @samp{M-}, @samp{H-}, @samp{s-}, @samp{A-}, and @samp{S-}.  These always precede @samp{double-} or @samp{triple-}, which always precede @samp{drag-} or @samp{down-}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2367
msgid "A frame includes areas that don't show text from the buffer, such as the mode line and the scroll bar.  You can tell whether a mouse button comes from a special area of the screen by means of dummy prefix keys.  For example, if you click the mouse in the mode line, you get the prefix key @code{mode-line} before the ordinary mouse-button symbol.  Thus, here is how to define the command for clicking the first button in a mode line to run @code{scroll-up-command}:"
msgstr ""

#. type: example
#: original_texis/custom.texi:2370
#, no-wrap
msgid "(keymap-global-set \"<mode-line> <mouse-1>\" 'scroll-up-command)\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2374
msgid "Here is the complete list of these dummy prefix keys and their meanings:"
msgstr ""

#. type: item
#: original_texis/custom.texi:2376
#, no-wrap
msgid "mode-line"
msgstr ""

#. type: table
#: original_texis/custom.texi:2378
msgid "The mouse was in the mode line of a window."
msgstr ""

#. type: item
#: original_texis/custom.texi:2378
#, no-wrap
msgid "vertical-line"
msgstr ""

#. type: table
#: original_texis/custom.texi:2381
msgid "The mouse was in the vertical line separating side-by-side windows.  (If you use scroll bars, they appear in place of these vertical lines.)"
msgstr ""

#. type: item
#: original_texis/custom.texi:2381
#, no-wrap
msgid "vertical-scroll-bar"
msgstr ""

#. type: table
#: original_texis/custom.texi:2384
msgid "The mouse was in a vertical scroll bar.  (This is the only kind of scroll bar Emacs currently supports.)"
msgstr ""

#. type: item
#: original_texis/custom.texi:2384
#, no-wrap
msgid "menu-bar"
msgstr ""

#. type: table
#: original_texis/custom.texi:2386
msgid "The mouse was in the menu bar."
msgstr ""

#. type: item
#: original_texis/custom.texi:2386
#, no-wrap
msgid "tab-bar"
msgstr ""

#. type: table
#: original_texis/custom.texi:2388
msgid "The mouse was in a tab bar."
msgstr ""

#. type: item
#: original_texis/custom.texi:2388
#, no-wrap
msgid "tab-line"
msgstr ""

#. type: table
#: original_texis/custom.texi:2390
msgid "The mouse was in a tab line."
msgstr ""

#. type: item
#: original_texis/custom.texi:2390
#, no-wrap
msgid "header-line"
msgstr ""

#. type: table
#: original_texis/custom.texi:2392
msgid "The mouse was in a header line."
msgstr ""

#. type: item
#: original_texis/custom.texi:2393
#, no-wrap
msgid "horizontal-scroll-bar"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2401
msgid "You can put more than one mouse button in a key sequence, but it isn't usual to do so."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:2403
#, no-wrap
msgid "Disabling Commands"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2404
#, no-wrap
msgid "disabled command"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2410
msgid "Disabling a command means that invoking it interactively asks for confirmation from the user.  The purpose of disabling a command is to prevent users from executing it by accident; we do this for commands that might be confusing to the uninitiated."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2420
msgid "Attempting to invoke a disabled command interactively in Emacs displays a window containing the command's name, its documentation, and some instructions on what to do immediately; then Emacs asks for input saying whether to execute the command as requested, enable it and execute it, or cancel.  If you decide to enable the command, you must then answer another question---whether to do this permanently, or just for the current session.  (Enabling permanently works by automatically editing your initialization file.)  You can also type @kbd{!} to enable @emph{all} commands, for the current session only."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2424
msgid "The direct mechanism for disabling a command is to put a non-@code{nil} @code{disabled} property on the Lisp symbol for the command.  Here is the Lisp program to do this:"
msgstr ""

#. type: example
#: original_texis/custom.texi:2427
#, no-wrap
msgid "(put 'delete-region 'disabled t)\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2431
msgid "If the value of the @code{disabled} property is a string, that string is included in the message displayed when the command is used:"
msgstr ""

#. type: example
#: original_texis/custom.texi:2435
#, no-wrap
msgid ""
"(put 'delete-region 'disabled\n"
"     \"It's better to use `kill-region' instead.\\n\")\n"
msgstr ""

#. type: findex
#: original_texis/custom.texi:2437
#, no-wrap
msgid "command-query"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2442
msgid "As a less heavy-handed alternative to disabling commands, you may want to be queried before executing a command.  For instance, to be queried before executing the @kbd{M->} (@code{end-of-buffer})  command, you could put something like the following in your init file:"
msgstr ""

#. type: example
#: original_texis/custom.texi:2447
#, no-wrap
msgid ""
"(command-query\n"
" 'end-of-buffer\n"
" \"Do you really want to go to the end of the buffer?\")\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2452
msgid "By default, you'll be queried with a @kbd{y}/@kbd{n} question, but if you give a non-@code{nil} value to the third, optional argument, you'll be queried with @kbd{yes}/@kbd{no} instead."
msgstr ""

#. type: findex
#: original_texis/custom.texi:2453
#, no-wrap
msgid "disable-command"
msgstr ""

#. type: findex
#: original_texis/custom.texi:2454
#, no-wrap
msgid "enable-command"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2460
msgid "You can make a command disabled either by editing the initialization file directly, or with the command @kbd{M-x disable-command}, which edits the initialization file for you.  Likewise, @kbd{M-x enable-command} edits the initialization file to enable a command permanently.  @xref{Init File}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2465
msgid "If Emacs was invoked with the @option{-q} or @option{--no-init-file} options (@pxref{Initial Options}), it will not edit your initialization file.  Doing so could lose information because Emacs has not read your initialization file."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2470
msgid "Whether a command is disabled is independent of what key is used to invoke it; disabling also applies if the command is invoked using @kbd{M-x}.  However, disabling a command has no effect on calling it as a function from Lisp programs."
msgstr ""

#. type: section
#: original_texis/custom.texi:2472
#, no-wrap
msgid "The Emacs Initialization File"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2473
#, no-wrap
msgid "init file"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2474
#, no-wrap
msgid ".emacs file"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2475
#, no-wrap
msgid "~/.emacs file"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2476
#, no-wrap
msgid "~/.config/emacs/init.el file"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2477
#, no-wrap
msgid "Emacs initialization file"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2478
#, no-wrap
msgid "startup (init file)"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2479
#, no-wrap
msgid "XDG_CONFIG_HOME"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2489
msgid "When Emacs is started, it normally tries to load a Lisp program from an @dfn{initialization file}, or @dfn{init file} for short.  This file, if it exists, specifies how to initialize Emacs for you.  Traditionally, file @file{~/.emacs} is used as the init file, although Emacs also looks at @file{~/.emacs.el}, @file{~/.emacs.d/init.el}, @file{~/.config/emacs/init.el}, or other locations.  @xref{Find Init}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2493
msgid "You may find it convenient to have all your Emacs configuration in one directory, in which case you should use @file{~/.emacs.d/init.el} or the XDG-compatible @file{~/.config/emacs/init.el}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2497
msgid "You can use the command line switch @samp{-q} to prevent loading your init file, and @samp{-u} (or @samp{--user}) to specify a different user's init file (@pxref{Initial Options})."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2498
#, no-wrap
msgid "@file{default.el}, the default init file"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2507
msgid "There can also be a @dfn{default init file}, which is the library named @file{default.el}, found via the standard search path for libraries.  The Emacs distribution contains no such library; your site may create one for local customizations.  If this library exists, it is loaded whenever you start Emacs (except when you specify @samp{-q}).  But your init file, if any, is loaded first; if it sets @code{inhibit-default-init} non-@code{nil}, then @file{default} is not loaded."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2508
#, no-wrap
msgid "site init file"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2509
#, no-wrap
msgid "@file{site-start.el}, the site startup file"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2519
msgid "Your site may also have a @dfn{site startup file}; this is named @file{site-start.el}, if it exists.  Like @file{default.el}, Emacs finds this file via the standard search path for Lisp libraries.  Emacs loads this library before it loads your init file.  To inhibit loading of this library, use the option @samp{--no-site-file}.  @xref{Initial Options}.  We recommend against using @file{site-start.el} for changes that some users may not like.  It is better to put them in @file{default.el}, so that users can more easily override them."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2520
#, no-wrap
msgid "@file{site-lisp} directories"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2527
msgid "You can place @file{default.el} and @file{site-start.el} in any of the directories which Emacs searches for Lisp libraries.  The variable @code{load-path} (@pxref{Lisp Libraries}) specifies these directories.  Many sites put these files in a subdirectory named @file{site-lisp} in the Emacs installation directory, such as @file{/usr/local/share/emacs/site-lisp}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2536
msgid "Byte-compiling your init file is not recommended (@pxref{Byte Compilation,, Byte Compilation, elisp, the Emacs Lisp Reference Manual}).  It generally does not speed up startup very much, and often leads to problems when you forget to recompile the file.  A better solution is to use the Emacs server to reduce the number of times you have to start Emacs (@pxref{Emacs Server}).  If your init file defines many functions, consider moving them to a separate (byte-compiled)  file that you load in your init file."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2539
msgid "If you are going to write actual Emacs Lisp programs that go beyond minor customization, you should read the @cite{Emacs Lisp Reference Manual}."
msgstr ""

#. type: ifnottex
#: original_texis/custom.texi:2542
msgid "@xref{Top, Emacs Lisp, Emacs Lisp, elisp, the Emacs Lisp Reference Manual}."
msgstr ""

#. type: node
#: original_texis/custom.texi:2551 original_texis/custom.texi:2553
#, no-wrap
msgid "Init Syntax"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:2551
msgid "Syntax of constants in Emacs Lisp."
msgstr ""

#. type: node
#: original_texis/custom.texi:2551 original_texis/custom.texi:2635
#, no-wrap
msgid "Init Examples"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:2551
msgid "How to do some things with an init file."
msgstr ""

#. type: node
#: original_texis/custom.texi:2551 original_texis/custom.texi:2889
#, no-wrap
msgid "Terminal Init"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:2551
msgid "Each terminal type can have an init file."
msgstr ""

#. type: node
#: original_texis/custom.texi:2551 original_texis/custom.texi:2932
#, no-wrap
msgid "Find Init"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:2551
msgid "How Emacs finds the init file."
msgstr ""

#. type: node
#: original_texis/custom.texi:2551 original_texis/custom.texi:3000
#, no-wrap
msgid "Init Non-ASCII"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:2551
msgid "Using non-@acronym{ASCII} characters in an init file."
msgstr ""

#. type: node
#: original_texis/custom.texi:2551 original_texis/custom.texi:3040
#, no-wrap
msgid "Early Init File"
msgstr ""

#. type: menuentry
#: original_texis/custom.texi:2551
msgid "Another init file, which is read early on."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:2554
#, no-wrap
msgid "Init File Syntax"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2561
msgid "The init file contains one or more Lisp expressions.  Each of these consists of a function name followed by arguments, all surrounded by parentheses.  For example, @code{(setq fill-column 60)} calls the function @code{setq} to set the variable @code{fill-column} (@pxref{Filling}) to 60."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2568
msgid "You can set any Lisp variable with @code{setq}, but with certain variables @code{setq} won't do what you probably want in the init file.  Some variables automatically become buffer-local when set with @code{setq}; what you want in the init file is to set the default value, using @code{setq-default}.  (The following section has examples of both of these methods.)"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2576
msgid "Some customizable minor mode variables do special things to enable the mode when you set them with Customize, but ordinary @code{setq} won't do that; to enable the mode in your init file, call the minor mode command.  Finally, a few customizable user options are initialized in complex ways, and these have to be set either via the customize interface (@pxref{Customization}), or by using @code{customize-set-variable}/@code{setopt} (@pxref{Examining})."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2581
msgid "The second argument to @code{setq} is an expression for the new value of the variable.  This can be a constant, a variable, or a function call expression.  In the init file, constants are used most of the time.  They can be:"
msgstr ""

#. type: item
#: original_texis/custom.texi:2583
#, no-wrap
msgid "Numbers:"
msgstr ""

#. type: table
#: original_texis/custom.texi:2585
msgid "Numbers are written in decimal, with an optional initial minus sign."
msgstr ""

#. type: item
#: original_texis/custom.texi:2586
#, no-wrap
msgid "Strings:"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2587
#, no-wrap
msgid "Lisp string syntax"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2588
#, no-wrap
msgid "string syntax"
msgstr ""

#. type: table
#: original_texis/custom.texi:2591
msgid "Lisp string syntax is the same as C string syntax with a few extra features.  Use a double-quote character to begin and end a string constant."
msgstr ""

#. type: table
#: original_texis/custom.texi:2600
msgid "In a string, you can include newlines and special characters literally.  But often it is cleaner to use backslash sequences for them: @samp{\\n} for newline, @samp{\\b} for backspace, @samp{\\r} for carriage return, @samp{\\t} for tab, @samp{\\f} for formfeed (control-L), @samp{\\e} for escape, @samp{\\\\} for a backslash, @samp{\\\"} for a double-quote, or @samp{\\@var{ooo}} for the character whose octal code is @var{ooo}.  Backslash and double-quote are the only characters for which backslash sequences are mandatory."
msgstr ""

#. type: table
#: original_texis/custom.texi:2605
msgid "@samp{\\C-} can be used as a prefix for a control character, as in @samp{\\C-s} for @acronym{ASCII} control-S, and @samp{\\M-} can be used as a prefix for a Meta character, as in @samp{\\M-a} for @kbd{@key{Meta}-A} or @samp{\\M-\\C-a} for @kbd{@key{Ctrl}-@key{Meta}-A}."
msgstr ""

#. type: table
#: original_texis/custom.texi:2608
msgid "@xref{Init Non-ASCII}, for information about including non-@acronym{ASCII} in your init file."
msgstr ""

#. type: item
#: original_texis/custom.texi:2609
#, no-wrap
msgid "Characters:"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2610
#, no-wrap
msgid "Lisp character syntax"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2611
#, no-wrap
msgid "character syntax"
msgstr ""

#. type: table
#: original_texis/custom.texi:2617
msgid "Lisp character constant syntax consists of a @samp{?} followed by either a character or an escape sequence starting with @samp{\\}.  Examples: @code{?x}, @code{?\\n}, @code{?\\\"}, @code{?\\)}.  Note that strings and characters are not interchangeable in Lisp; some contexts require one and some contexts require the other."
msgstr ""

#. type: table
#: original_texis/custom.texi:2620
msgid "@xref{Init Non-ASCII}, for information about binding commands to keys which send non-@acronym{ASCII} characters."
msgstr ""

#. type: item
#: original_texis/custom.texi:2621
#, no-wrap
msgid "True:"
msgstr ""

#. type: table
#: original_texis/custom.texi:2623
msgid "@code{t} stands for ``true''."
msgstr ""

#. type: item
#: original_texis/custom.texi:2624
#, no-wrap
msgid "False:"
msgstr ""

#. type: table
#: original_texis/custom.texi:2626
msgid "@code{nil} stands for ``false''."
msgstr ""

#. type: item
#: original_texis/custom.texi:2627
#, no-wrap
msgid "Other Lisp objects:"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2628
#, no-wrap
msgid "Lisp object syntax"
msgstr ""

#. type: table
#: original_texis/custom.texi:2630
msgid "Write a single-quote (@code{'}) followed by the Lisp object you want."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2634
msgid "For more information on the Emacs Lisp syntax, @pxref{Introduction,,, elisp, The Emacs Lisp Reference Manual}."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:2636
#, no-wrap
msgid "Init File Examples"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2640
msgid "Here are some examples of doing certain commonly desired things with Lisp expressions:"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2646
msgid "Add a directory to the variable @code{load-path}.  You can then put Lisp libraries that are not included with Emacs in this directory, and load them with @kbd{M-x load-library}.  @xref{Lisp Libraries}."
msgstr ""

#. type: example
#: original_texis/custom.texi:2649
#, no-wrap
msgid "(add-to-list 'load-path \"/path/to/lisp/libraries\")\n"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2654
msgid "Make @key{TAB} in C mode just insert a tab if point is in the middle of a line."
msgstr ""

#. type: example
#: original_texis/custom.texi:2657
#, no-wrap
msgid "(setq c-tab-always-indent nil)\n"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2661
msgid "Here we have a variable whose value is normally @code{t} for ``true'' and the alternative is @code{nil} for ``false''."
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2665
msgid "Make searches case sensitive by default (in all buffers that do not override this)."
msgstr ""

#. type: example
#: original_texis/custom.texi:2668
#, no-wrap
msgid "(setq-default case-fold-search nil)\n"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2675
msgid "This sets the default value, which is effective in all buffers that do not have local values for the variable (@pxref{Locals}).  Setting @code{case-fold-search} with @code{setq} affects only the current buffer's local value, which is probably not what you want to do in an init file."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:2677
#, no-wrap
msgid "user-mail-address@r{, in init file}"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2679
msgid "Specify your own email address, if Emacs can't figure it out correctly."
msgstr ""

#. type: example
#: original_texis/custom.texi:2682
#, no-wrap
msgid "(setq user-mail-address \"cheney@@torture.gov\")\n"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2687
msgid "Various Emacs packages, such as Message mode, consult @code{user-mail-address} when they need to know your email address.  @xref{Mail Headers}."
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2690
msgid "Make Text mode the default mode for new buffers."
msgstr ""

#. type: example
#: original_texis/custom.texi:2693
#, no-wrap
msgid "(setq-default major-mode 'text-mode)\n"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2699
msgid "Note that @code{text-mode} is used because it is the command for entering Text mode.  The single-quote before it makes the symbol a constant; otherwise, @code{text-mode} would be treated as a variable name."
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2704
msgid "Set up defaults for the Latin-1 character set, which supports most of the languages of Western Europe."
msgstr ""

#. type: example
#: original_texis/custom.texi:2707
#, no-wrap
msgid "(set-language-environment \"Latin-1\")\n"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2712
msgid "Turn off Line Number mode, a global minor mode."
msgstr ""

#. type: example
#: original_texis/custom.texi:2715
#, no-wrap
msgid "(line-number-mode 0)\n"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2721
msgid "Turn on Auto Fill mode automatically in Text mode and related modes (@pxref{Hooks})."
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2729
msgid "Change the coding system used when using the clipboard (@pxref{Communication Coding})."
msgstr ""

#. type: example
#: original_texis/custom.texi:2732
#, no-wrap
msgid "(setopt selection-coding-system 'utf-8)\n"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2737
msgid "Load the installed Lisp library named @file{foo} (actually a file @file{foo.elc} or @file{foo.el} in a standard Emacs directory)."
msgstr ""

#. type: example
#: original_texis/custom.texi:2740
#, no-wrap
msgid "(load \"foo\")\n"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2745
msgid "When the argument to @code{load} is a relative file name, not starting with @samp{/} or @samp{~}, @code{load} searches the directories in @code{load-path} (@pxref{Lisp Libraries})."
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2748
msgid "Load the compiled Lisp file @file{foo.elc} from your home directory."
msgstr ""

#. type: example
#: original_texis/custom.texi:2751
#, no-wrap
msgid "(load \"~/foo.elc\")\n"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2754
msgid "Here a full file name is used, so no searching is done."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2756
#, no-wrap
msgid "loading Lisp libraries automatically"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:2757
#, no-wrap
msgid "autoload Lisp libraries"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2761
msgid "Tell Emacs to find the definition for the function @code{myfunction} by loading a Lisp library named @file{mypackage} (i.e., a file @file{mypackage.elc} or @file{mypackage.el}):"
msgstr ""

#. type: example
#: original_texis/custom.texi:2764
#, no-wrap
msgid "(autoload 'myfunction \"mypackage\" \"Do what I say.\" t)\n"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2775
msgid "Here the string @code{\"Do what I say.\"} is the function's documentation string.  You specify it in the @code{autoload} definition so it will be available for help commands even when the package is not loaded.  The last argument, @code{t}, indicates that this function is interactive; that is, it can be invoked interactively by typing @kbd{M-x myfunction @key{RET}} or by binding it to a key.  If the function is not interactive, omit the @code{t} or use @code{nil}."
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2779
msgid "Rebind the key @kbd{C-x l} to run the function @code{make-symbolic-link} (@pxref{Init Rebinding})."
msgstr ""

#. type: example
#: original_texis/custom.texi:2782
#, no-wrap
msgid "(keymap-global-set \"C-x l\" 'make-symbolic-link)\n"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2785
msgid "or"
msgstr ""

#. type: example
#: original_texis/custom.texi:2788
#, no-wrap
msgid "(keymap-set global-map \"C-x l\" 'make-symbolic-link)\n"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2792
msgid "Note once again the single-quote used to refer to the symbol @code{make-symbolic-link} instead of its value as a variable."
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2795
msgid "Do the same thing for Lisp mode only."
msgstr ""

#. type: example
#: original_texis/custom.texi:2798
#, no-wrap
msgid "(keymap-set lisp-mode-map \"C-x l\" 'make-symbolic-link)\n"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2803
msgid "Redefine all keys which now run @code{next-line} in Fundamental mode so that they run @code{forward-line} instead."
msgstr ""

#. type: findex
#: original_texis/custom.texi:2804
#, no-wrap
msgid "keymap-substitute"
msgstr ""

#. type: example
#: original_texis/custom.texi:2807
#, no-wrap
msgid "(keymap-substitute global-map 'next-line 'forward-line)\n"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2811
msgid "Make @kbd{C-x C-v} undefined."
msgstr ""

#. type: example
#: original_texis/custom.texi:2814
#, no-wrap
msgid "(keymap-global-unset \"C-x C-v\")\n"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2820
msgid "One reason to undefine a key is so that you can make it a prefix.  Simply defining @kbd{C-x C-v @var{anything}} will make @kbd{C-x C-v} a prefix, but @kbd{C-x C-v} must first be freed of its usual non-prefix definition."
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2824
msgid "Make @samp{$} have the syntax of punctuation in Text mode.  Note the use of a character constant for @samp{$}."
msgstr ""

#. type: example
#: original_texis/custom.texi:2827
#, no-wrap
msgid "(modify-syntax-entry ?\\$ \".\" text-mode-syntax-table)\n"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2831
msgid "Enable the use of the command @code{narrow-to-region} without confirmation."
msgstr ""

#. type: example
#: original_texis/custom.texi:2834
#, no-wrap
msgid "(put 'narrow-to-region 'disabled nil)\n"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2838
msgid "Adjusting the configuration to various platforms and Emacs versions."
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2845
msgid "Users typically want Emacs to behave the same on all systems, so the same init file is right for all platforms.  However, sometimes it happens that a function you use for customizing Emacs is not available on some platforms or in older Emacs versions.  To deal with that situation, put the customization inside a conditional that tests whether the function or facility is available, like this:"
msgstr ""

#. type: example
#: original_texis/custom.texi:2849
#, no-wrap
msgid ""
"(if (fboundp 'blink-cursor-mode)\n"
"    (blink-cursor-mode 0))\n"
"\n"
msgstr ""

#. type: example
#: original_texis/custom.texi:2853
#, no-wrap
msgid ""
"(if (boundp 'coding-category-utf-8)\n"
"    (set-coding-priority '(coding-category-utf-8)))\n"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2858
msgid "You can also simply disregard the errors that occur if the function is not defined."
msgstr ""

#. type: example
#: original_texis/custom.texi:2861
#, no-wrap
msgid "(ignore-errors (set-face-background 'region \"grey75\"))\n"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2865
msgid "A @code{setq} on a variable which does not exist is generally harmless, so those do not need a conditional."
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2869
msgid "Using @code{use-package} to automatically load and configure a package."
msgstr ""

#. type: example
#: original_texis/custom.texi:2878
#, no-wrap
msgid ""
"(use-package hi-lock\n"
"  :defer t\n"
"  :init (add-hook 'some-hook 'hi-lock-mode)\n"
"  :config (use-package my-hi-lock)\n"
"  :bind ((\"M-o l\" . highlight-lines-matching-regexp)\n"
"         (\"M-o r\" . highlight-regexp)\n"
"         (\"M-o w\" . highlight-phrase)))\n"
msgstr ""

#. type: itemize
#: original_texis/custom.texi:2887
msgid "This will load @code{hi-lock} when some of its commands or variables are first used, bind 3 keys to its commands, and additionally load the @code{my-hi-lock} package (presumably further customizing @code{hi-lock}) after loading @code{hi-lock}.  The @code{use-package} facility is fully documented in its own manual, @pxref{Top,,, use-package, use-package User manual}."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:2890
#, no-wrap
msgid "Terminal-specific Initialization"
msgstr ""

#. type: vindex
#: original_texis/custom.texi:2892
#, no-wrap
msgid "term-file-aliases"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2903
msgid "Each terminal type can have a Lisp library to be loaded into Emacs when it is run on that type of terminal.  For a terminal type named @var{termtype}, the library is called @file{term/@var{termtype}}.  (If there is an entry of the form @code{(@var{termtype} . @var{alias})} in the @code{term-file-aliases} association list, Emacs uses @var{alias} in place of @var{termtype}.)  The library is found by searching the directories @code{load-path} as usual and trying the suffixes @samp{.elc} and @samp{.el}.  Normally it appears in the subdirectory @file{term} of the directory where most Emacs libraries are kept."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2911
msgid "The usual purpose of the terminal-specific library is to map the escape sequences used by the terminal's function keys onto more meaningful names, using @code{input-decode-map}.  See the file @file{term/lk201.el} for an example of how this is done.  Many function keys are mapped automatically according to the information in the Termcap data base; the terminal-specific library needs to map only the function keys that Termcap does not specify."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2917
msgid "When the terminal type contains a hyphen, only the part of the name before the first hyphen is significant in choosing the library name.  Thus, terminal types @samp{aaa-48} and @samp{aaa-30-rv} both use the library @file{term/aaa}.  The code in the library can use @code{(getenv \"TERM\")} to find the full terminal type name."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:2918
#, no-wrap
msgid "term-file-prefix"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2923
msgid "The library's name is constructed by concatenating the value of the variable @code{term-file-prefix} and the terminal type.  Your @file{.emacs} file can prevent the loading of the terminal-specific library by setting @code{term-file-prefix} to @code{nil}."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:2924
#, no-wrap
msgid "tty-setup-hook"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2931
msgid "Emacs runs the hook @code{tty-setup-hook} at the end of initialization, after both your @file{.emacs} file and any terminal-specific library have been read in.  Add hook functions to this hook if you wish to override part of any of the terminal-specific libraries and to define initializations for terminals that do not have a library.  @xref{Hooks}."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:2933
#, no-wrap
msgid "How Emacs Finds Your Init File"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2942
msgid "Emacs normally finds your init file in a location under your home directory@footnote{ On MS-Windows, there's no single directory considered by all programs as ``the home directory'' of the user.  Emacs uses one of the pertinent directories as the equivalent of your home directory; see @ref{Windows HOME}, for the details.  }.  @xref{Init File}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2948
msgid "Emacs looks for your init file using the filenames @file{~/.emacs.el}, @file{~/.emacs}, or @file{~/.emacs.d/init.el} in that order; you can choose to use any one of these names.  (Note that only the locations directly in your home directory have a leading dot in the location's basename.)"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2956
msgid "Emacs can also look in an XDG-compatible location for @file{init.el}, the default is the directory @file{~/.config/emacs}.  This can be overridden by setting @env{XDG_CONFIG_HOME} in your environment, its value replaces @file{~/.config} in the name of the default XDG init file.  However @file{~/.emacs.d}, @file{~/.emacs}, and @file{~/.emacs.el} are always preferred if they exist, which means that you must delete or rename them in order to use the XDG location."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2960
msgid "Note also that if neither the XDG location nor @file{~/.emacs.d} exist, then Emacs will create @file{~/.emacs.d} (and therefore use it during subsequent invocations)."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:2961
#, no-wrap
msgid "user-emacs-directory"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2969
msgid "Emacs will set @code{user-emacs-directory} to the directory it decides to use.  This directory is subsequently used to look for your other user-specific Emacs files, such as @code{custom-file} (@pxref{Saving Customizations}), the saved desktop (@pxref{Saving Emacs Sessions}) and others.  The @code{--init-directory} command-line option (@pxref{Initial Options}) overrides the value of @code{user-emacs-directory} determined as side effect of the search for your user init file described above."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2977
msgid "Although this is backward-compatible with older Emacs versions, modern POSIX platforms prefer putting your initialization files under @file{~/.config} so that troubleshooting a problem that might be due to a bad init file, or archiving a collection of init files, can be done by renaming that directory.  To help older Emacs versions find configuration files in their current default locations, you can execute the following Emacs Lisp code:"
msgstr ""

#. type: example
#: original_texis/custom.texi:2980
#, no-wrap
msgid "(make-symbolic-link \".config/emacs\" \"~/.emacs.d\")\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2987
msgid "However, if you run Emacs from a shell started by @code{su} and @env{XDG_CONFIG_HOME} is not set in your environment, Emacs tries to find your own initialization files, not that of the user you are currently pretending to be.  The idea is that you should get your own editor customizations even if you are running as the super user."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2994
msgid "More precisely, Emacs first determines which user's init file to use.  It gets your user name from the environment variables @env{LOGNAME} and @env{USER}; if neither of those exists, it uses the effective user-ID@.  If that user name matches the real user-ID, then Emacs uses @env{HOME}; otherwise, it looks up the home directory corresponding to that user name in the system's data base of users."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:2999
msgid "For brevity the rest of the Emacs documentation generally uses just the current default location @file{~/.emacs.d/init.el} for the init file."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:3001
#, no-wrap
msgid "Non-@acronym{ASCII} Characters in Init Files"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:3002
#, no-wrap
msgid "international characters in @file{.emacs}"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:3003
#, no-wrap
msgid "non-@acronym{ASCII} characters in @file{.emacs}"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:3004
#, no-wrap
msgid "non-@acronym{ASCII} keys, binding"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:3005
#, no-wrap
msgid "rebinding non-@acronym{ASCII} keys"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:3010
msgid "Language and coding systems may cause problems if your init file contains non-@acronym{ASCII} characters, such as accented letters, in strings or key bindings."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:3021
msgid "If you want to use non-@acronym{ASCII} characters in your init file, you should put a @w{@samp{-*-coding: @var{coding-system}-*-}} tag on the first line of the init file, and specify a coding system that supports the character(s) in question.  @xref{Recognize Coding}.  This is because the defaults for decoding non-@acronym{ASCII} text might not yet be set up by the time Emacs reads those parts of your init file which use such strings, possibly leading Emacs to decode those strings incorrectly.  You should then avoid adding Emacs Lisp code that modifies the coding system in other ways, such as calls to @code{set-language-environment}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:3027
msgid "An alternative to using non-@acronym{ASCII} characters directly is to use one of the character escape syntaxes described in @pxref{General Escape Syntax,,, elisp, The Emacs Lisp Reference Manual}, as they allow all Unicode codepoints to be specified using only @acronym{ASCII} characters."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:3032
msgid "To bind non-@acronym{ASCII} keys, you must use a vector (@pxref{Init Rebinding}).  The string syntax cannot be used, since the non-@acronym{ASCII} characters will be interpreted as meta keys.  For instance:"
msgstr ""

#. type: example
#: original_texis/custom.texi:3035
#, no-wrap
msgid "(global-set-key [?@var{char}] 'some-function)\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:3039
msgid "Type @kbd{C-q}, followed by the key you want to bind, to insert @var{char}."
msgstr ""

#. type: subsection
#: original_texis/custom.texi:3041
#, no-wrap
msgid "The Early Init File"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:3042
#, no-wrap
msgid "early init file"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:3043
#, no-wrap
msgid "@file{early-init.el} file"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:3057
msgid "Most customizations for Emacs should be put in the normal init file.  @xref{Init File}.  However, it is sometimes necessary to have customizations take effect during Emacs startup earlier than the normal init file is processed.  Such customizations can be put in the early init file, @file{~/.config/emacs/early-init.el} or @file{~/.emacs.d/early-init.el}.  This file is loaded before the package system and GUI is initialized, so in it you can customize variables that affect the package initialization process, such as @code{package-enable-at-startup}, @code{package-load-list}, and @code{package-user-dir}.  Note that variables like @code{package-archives} which only affect the installation of new packages, and not the process of making already-installed packages available, may be customized in the regular init file.  @xref{Package Installation}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:3067
msgid "We do not recommend that you move into @file{early-init.el} customizations that can be left in the normal init files.  That is because the early init file is read before the GUI is initialized, so customizations related to GUI features will not work reliably in @file{early-init.el}.  By contrast, the normal init files are read after the GUI is initialized.  If you must have customizations in the early init file that rely on GUI features, make them run off hooks provided by the Emacs startup, such as @code{window-setup-hook} or @code{tty-setup-hook}.  @xref{Hooks}."
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:3070
msgid "For more information on the early init file, @pxref{Init File,,, elisp, The Emacs Lisp Reference Manual}."
msgstr ""

#. type: section
#: original_texis/custom.texi:3072
#, no-wrap
msgid "Keeping Persistent Authentication Information"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:3080
msgid "Some Emacs packages, which connect to other services, require authentication (@pxref{Passwords}), e.g., see @ref{Top, Gnus,, gnus, The Gnus Manual}, or @ref{Top, Tramp,, tramp, The Tramp Manual}.  Because it might be annoying to provide the same user name and password again and again, Emacs offers to keep this information persistent via the @file{auth-source} library."
msgstr ""

#. type: cindex
#: original_texis/custom.texi:3081
#, no-wrap
msgid "@file{~/.authinfo} file"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:3082
#, no-wrap
msgid "@file{~/.authinfo.gpg} file"
msgstr ""

#. type: cindex
#: original_texis/custom.texi:3083
#, no-wrap
msgid "~/.netrc file"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:3088
msgid "By default, the authentication information is taken from the file @file{~/.authinfo} or @file{~/.authinfo.gpg} or @file{~/.netrc}.  These files have a syntax similar to netrc files as known from the @command{ftp} program, like this:"
msgstr ""

#. type: example
#: original_texis/custom.texi:3091
#, no-wrap
msgid "machine @var{mymachine} login @var{myloginname} password @var{mypassword} port @var{myport}\n"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:3096
msgid "Similarly, the @file{auth-source} library supports multiple storage backend, currently either the classic netrc backend, JSON files, the Secret Service API, and pass, the standard unix password manager."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:3097
#, no-wrap
msgid "auth-sources"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:3101
msgid "All these alternatives can be customized via the user option @code{auth-sources}, see @ref{Help for users, Emacs auth-source,, auth, Emacs auth-source}."
msgstr ""

#. type: vindex
#: original_texis/custom.texi:3102
#, no-wrap
msgid "auth-source-save-behavior"
msgstr ""

#. type: Plain text
#: original_texis/custom.texi:3106
msgid "When a password is entered interactively, which is not found via the configured backend, some of the backends offer to save it persistently.  This can be changed by customizing the user option @code{auth-source-save-behavior}."
msgstr ""
