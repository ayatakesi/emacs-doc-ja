@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================

@c This is part of the Emacs manual.
@c Copyright (C) 1985--1987, 1993--1995, 1997, 2000--2024 Free Software
@c Foundation, Inc.
@c See file emacs-ja.texi for copying conditions.
@node Packages
@chapter Emacs Lispパッケージ
@cindex Package
@cindex Package archive

  EmacsはEmacs
Lispライブラリーである@dfn{パッケージ(packages)}で追加機能を実装することにより拡張可能です。これらは自分で記述することも、他の人が提供することもあります。そのようなパッケージを将来のEmacsセッションで利用できるようにインストールしたい場合には、それらをコンパイルしてEmacsがLispライブラリーを探すディレクトリーに配置する必要があります。手動によるインストール手法の詳細は@ref{Lisp
Libraries}を参照してください。多くのパッケージにはLispファイルの先頭付近にインストールと使用方法の手順が大きくコメントされています。パッケージのインストールと使用方法の微調整にこれらの手順を使用できます。

@cindex Emacs Lisp package archive
  パッケージは巨大なEmacs Lispパッケージのコレクションである@dfn{パッケージアーカイブ(package
archives)}から提供されることもあります。それぞれのパッケージは個別のEmacs
Lispプログラムと、Infoマニュアルのような別のコンポーネントを含むこともあります。Emacsにはそのようなアーカイブから簡単にパッケージをダウンロードしてインストールする機能が含まれています。このチャプターの残りの部分ではその機能について説明します。

  パッケージアーカイブからのインストールで利用可能なパッケージをリストするには@w{@kbd{M-x list-packages
@key{RET}}}とタイプします。@kbd{M-x
list-packages}により、すべてのパッケージのリストを含む、@file{*Packages*}という名前のバッファーが表示されます。このバッファーを通じてパッケージをインストールしたりアンインストールできます。@ref{Package
Menu}を参照してください。

  コマンド@kbd{C-h P}
(@code{describe-package})はパッケージ名の入力を求め、そのパッケージの属性や、実装する機能を説明するヘルプバッファーを表示します。

  デフォルトでは、Emacsはemacs開発者により保守されGNUプロジェクトによりホスティングされるパッケージアーカイブからパッケージをダウンロードします。オプションでサードパーティーにより保守されるアーカイブから、パッケージをダウンロードすることもできます。@ref{Package
Installation}を参照してください。

  Emacs Lispのプログラムをインストール可能なパッケージに変更する情報に関しては、@ref{Packaging,,,elisp, The
Emacs Lisp Reference Manual}を参照してください。

@menu
* Package Menu::             パッケージを閲覧・管理するためのバッファー。
* Package Statuses::         パッケージが保有できるステータス。
* Package Installation::     パッケージのインストールにたいするオプション。
* Package Files::            パッケージがインストールされる場所。
* Fetching Package Sources::  Managing packages directly from source.
@end menu

@node Package Menu
@section Package Menuバッファー
@cindex package menu
@cindex built-in package
@findex list-packages

コマンド@kbd{M-x list-packages}は、@dfn{パッケージメニュー(package
menu)}を立ち上げます。これはEmacsが把握するすべてのパッケージをリストするバッファーです。リストの各行には以下の情報が表示されます:

@itemize @bullet
@item
パッケージ名(例: @samp{auctex})。

@item
パッケージのバージョン番号(例: @samp{11.86})。

@item
@c @samp{unsigned} (installed, but not signed; @pxref{Package Signing}),
パッケージのステータスは通常は@samp{available}
(パッケージアーカイブからダウンロード可能)、@samp{installed}、@samp{built-in}
(デフォルトでEmacsに同梱)のいずれかです。@ref{Package Statuses}.<を参照してください。

@item
複数のパッケージアーカイブが有効ならそのパッケージがどのパッケージアーカイブのものか。

@item
パッケージの短い説明。
@end itemize

@noindent
@code{list-packages}は、パッケージアーカイブサーバーから利用可能なパッケージのリストを取得するために、ネットワークにアクセスします。ネットワークが利用できない場合、一番最近取得したリストにフォールバックします。

パッケージリストバッファーで主に使うことになるコマンドが@key{x}コマンドです。ポイント位置にあるパッケージがまだインストールされていなければ、このコマンドがそのパッケージをインストールします。そしてもしインストール済みのパッケージなら、このコマンドはそのパッケージを削除するのです。

パッケージメニューでは、以下のコマンドが利用可能です:

@table @kbd
@item h
@kindex h @r{(Package Menu)}
@findex package-menu-quick-help
パッケージメニューの使い方を要約した短いメッセージを表示します(@code{package-menu-quick-help})。

@item ?
@itemx @key{RET}
@kindex ? @r{(Package Menu)}
@kindex RET @r{(Package Menu)}
@findex package-menu-describe-package
カレント行のパッケージにたいして、@kbd{C-h
P}コマンド(@ref{Packages}を参照してください)により表示されるヘルプウィンドウと同様の、ヘルプバッファーを表示します(@code{package-menu-describe-package})。

@item i
@kindex i @r{(Package Menu)}
@findex package-menu-mark-install
カレント行のパッケージをインストールのためにマークします(@code{package-menu-mark-install})。パッケージのステータスが@samp{available}の場合、行の先頭に文字@samp{I}を追加します。@kbd{x}とタイプすると、パッケージをダウンロードしてインストールします(以下参照)。

@item d
@kindex d @r{(Package Menu)}
@findex package-menu-mark-delete
カレント行のパッケージを削除のためにマークします(@code{package-menu-mark-delete})。パッケージのステータスが@samp{installed}の場合、行の先頭に文字@samp{D}を追加します。@kbd{x}とタイプすると、パッケージを削除します(以下参照)。パッケージ削除の結果、何が起こるかについての情報は、@ref{Package
Files}を参照してください。

@item w
@kindex w @r{(Package Menu)}
@findex package-browse-url
カレント行にあるパッケージのウェブサイトをブラウザでオープンします。ブラウザのオープンには@code{browse-url}を使用します。

@item ~
@kindex ~ @r{(Package Menu)}
@findex package-menu-mark-obsolete-for-deletion
削除のためにすべての時代遅れのパッケージobsolete
packagesをマークします(@code{package-menu-mark-obsolete-for-deletion})。これは状態が@samp{obsolete}の、すべてのパッケージを削除のためにマークします。

@item u
@itemx @key{DEL}
@kindex u @r{(Package Menu)}
@findex package-menu-mark-unmark
@kbd{i}や@kbd{d}コマンドによりカレント行に追加された、以前のインストールや削除マークを外します(@code{package-menu-mark-unmark})。

@item U
@kindex U @r{(Package Menu)}
@findex package-menu-mark-upgrades
新しいバージョンが利用可能なパッケージすべてをアップグレード用にマークします(@code{package-menu-mark-upgrades})。このコマンドによって利用可能な新たなバージョンにはインストール用のマーク、インストール済みの古いバージョンには(@samp{obsolete}という状態のマークとともに)削除用のマークがつけられます。デフォルトではビルトインパッケージには利用可能な新しいバージョン用にマークしませんが、@code{package-install-upgrade-built-in}をカスタマイズして変更できます。@ref{Package
Installation}を参照してください。@code{package-install-upgrade-built-in}を非@code{nil}値にカスタマイズする場合には、上書きされたくないビルトインパッケージの更新を避けるために、@kbd{U}コマンドがマークしたビルトインパッケージすべてを確認してください。

@item x
@kindex x @r{(Package Menu)}
@vindex package-menu-async
@findex package-menu-execute
@kbd{i}でマークされたすべてのパッケージをダウンロードしてインストールするとともに、@kbd{d}でマークされたすべてのパッケージを削除します(@code{package-menu-execute})。これによりマークは削除されます。マークされているパッケージがなければ、このコマンドはポイントの下にあるパッケージのインストール(インストール済みでない場合)、またはパッケージの削除(インストール済みの場合)を行います。

@item g
@item r
@kindex g @r{(Package Menu)}
@kindex r @r{(Package Menu)}
パッケージリストを更新します(@code{revert-buffer})。これは再度パッケージアーカイブから利用可能なパッケージのリストを取得してパッケージリストを再表示します。

@item H
@kindex H @r{(Package Menu)}
@findex package-menu-hide-package
名前がregexpにマッチするパッケージを非表示にします(@code{package-menu-hide-package})。これはregexpの入力を求めて名前がマッチするパッケージを非表示にします。regexpのデフォルト値はポイント位置の名前のパッケージだけを非表示にするので、プロンプトで単に@key{RET}を押下するとカレントパッケージだけを非表示にします。

@item (
@kindex ( @r{(Package Menu)}
@findex package-menu-toggle-hiding
古いバージョンのパッケージ、および優先度低のアーカイブから取得したバージョンの可視性を切り替えます(@code{package-menu-toggle-hiding})。

@item / a
@kindex / a @r{(Package Menu)}
@findex package-menu-filter-by-archive
パッケージリストをアーカイブでフィルターします(@code{package-menu-filter-by-archive})。これはアーカイブ(例:
@samp{gnu})の入力を求めて、そのアーカイブ由来のパッケージだけを表示します。アーカイブ名をカンマで区切ってタイプすれば、複数のアーカイブを指定できます。

@item / d
@kindex / d @r{(Package Menu)}
@findex package-menu-filter-by-description
description(説明)によりパッケージリストをフィルターします(@code{package-menu-filter-by-description})。これは正規表現の入力を求めて、そのregexpにマッチするdescriptionのパッケージだけを表示します。

@item / k
@kindex / k @r{(Package Menu)}
@findex package-menu-filter-by-keyword
パッケージリストをキーワードでフィルターします(@code{package-menu-filter-by-keyword})。これはキーワード(例:
@samp{games})の入力を求めて、そのキーワードのパッケージだけを表示します。キーワードをカンマで区切ってタイプすれば、複数のキーワードを指定できます。

@item / N
@kindex / N @r{(Package Menu)}
@findex package-menu-filter-by-name-or-description
名前やdescriptionによりパッケージリストをフィルターします(@code{package-menu-filter-by-name-or-description})。これは正規表現の入力を求めて、そのregexpに名前かdescriptorがマッチするパッケージだけを表示します。

@item / n
@kindex / n @r{(Package Menu)}
@findex package-menu-filter-by-name
名前によりパッケージリストをフィルターします(@code{package-menu-filter-by-name})。これは正規表現の入力を求めて、そのregexpにマッチする名前のパッケージだけを表示します。

@item / s
@kindex / s @r{(Package Menu)}
@findex package-menu-filter-by-status
パッケージリストをstatus(状態)でフィルターします(@code{package-menu-filter-by-status})。これは1つ以上のstatus(@samp{available}等,
@ref{Package
Statuses}を参照)の入力を求めて、そのstatusにマッチするパッケージだけを表示します。statusをカンマで区切ってタイプすれば、複数のstatusを指定できます。

@item / v
@kindex / v @r{(Package Menu)}
@findex package-menu-filter-by-version
パッケージリストをバージョンでフィルターします(@code{package-menu-filter-by-version})。これはまずバージョン文字列にたいする比較シンボルとして@samp{<}、@samp{>}、@samp{=}いずれかの入力を求めて、それに応じてタイプしたバージョンより小さい、大きい、あるいは等しいバージョンのパッケージを表示します。

@item / m
@kindex / m @r{(Package Menu)}
@findex package-menu-filter-marked
非空のマークでパッケージリストをフィルターします(@code{package-menu-filter-marked})。これはインストールまたは削除とマークされたパッケージだけを表示します。

@item / u
@kindex / u @r{(Package Menu)}
@findex package-menu-filter-upgradable
利用可能なアップグレードが存在するパッケージだけを表示するようパッケージリストをフィルターします(@code{package-menu-filter-upgradable})。このフィルターはデフォルトでは、ビルトインパッケージでは新しいバージョンが利用可能でも除外しますが、これは@code{package-install-upgrade-built-in}をカスタマイズして変更できます。@ref{Package
Installation}を参照してください。

@item / /
@kindex / / @r{(Package Menu)}
@findex package-menu-filter-clear
カレントで適用されたパッケージリストのフィルターをクリアします(@code{package-menu-filter-clear})。
@end table

@noindent
たとえばパッケージをインストールするには、そのパッケージの行で@kbd{i}をタイプしてから、@kbd{x}をタイプします。

@node Package Statuses
@section パッケージのステータス
@cindex package status

パッケージは以下のステータスのいずれかを保有できます:

@table @samp
@item available
パッケージは未インストールだがパッケージアーカイブからのダウンロードとインストールが可能。

@item avail-obso
インストールするためにパッケージは利用可能だが新たなバージョンも利用可能。このステータスのパッケージはデフォルトでは非表示。

@cindex built-in package
@item built-in
パッケージはデフォルトでEmacsに同梱されている。これはパッケージメニューからは削除できず、デフォルトではアップグレード対象とはみなされない(だが@code{package-install-upgrade-built-in}をカスタマイズして変更可,
@ref{Package Installation}を参照のこと)。

@item dependency
別パッケージの依存関係を満足するために自動的にインストールされたパッケージ。

@item disabled
パッケージは@code{package-load-list}変数を使用して無効化された。

@item external
このパッケージはbuilt-inではなく、@code{package-user-dir}で指定されたディレクトリーのものではない(@ref{Package
Files}を参照)。外部パッケージは@samp{built-in}と同様に扱われて削除できない。

@item held
パッケージはheld(固定)されている。@ref{Package Installation}を参照のこと。

@item incompat
何らかの理由(たとえばインストール不可能なパッケージに依存)によりパッケージはインストール不能。

@item installed
パッケージはインストール済み。

@item new
@samp{available}と等価だが最後に@kbd{M-x
list-packages}を呼び出した後にパッケージがパッケージアーカイブで新たに利用可能になった点が異なる。

@item obsolete
パッケージはインストール済みの古いバージョン。パッケージの当該バージョンに加えて、新たなバージョンもインストール済み。

@c @samp{unsigned} (installed, but not signed; @pxref{Package Signing}),
@end table

@node Package Installation
@section パッケージのインストール

@findex package-install
@findex package-upgrade
@findex package-upgrade-all
  パッケージを一番便利にインストールするのはパッケージメニューを使う方法(@ref{Package Menu}を参照)ですが、コマンド@kbd{M-x
package-install}を使用することもできます。これはステータスが@samp{available}のパッケージ名の入力を求めて、それをダウンロードしてからインストールします。同様にあるパッケージのアップグレード行いたければ@kbd{M-x
package-upgrade}コマンド、すべてのパッケージをアップグレードしたければ@kbd{M-x
package-upgrade-all}コマンドを使うことができます。

@vindex package-install-upgrade-built-in
  デフォルトではアーカイブから新しいバージョンが利用可能なビルトインパッケージを@code{package-install}は考慮しません(パッケージがEmacsディストーションに含まれているパッケージはビルトイン)。特にビルトインパッケージはパッケージ入力を求める際の補完候補には表示されません。ただしプレフィックス引数とともに@code{package-install}を呼び出すと、アップグレード可能なビルトインパッケージも考慮するようになります。変数@code{package-install-upgrade-built-in}をカスタマイズすることによって、この挙動をデフォルトにすることができます。この変数の値が非@code{nil}であれば、たとえプレフィックス引数なしで@code{package-install}を呼び出した際にもビルトインパッケージが考慮されるようになります。@code{package-install-upgrade-built-in}はpackage-menuコマンド(@ref{Package
Menu}を参照)にも影響を与えることに注意してください。

  これとは対照的に、@code{package-upgrade}と@code{package-upgrade-all}がビルトインパッケージを考慮することは決してありません。あるビルトインパッケージのアップグレードにこれらのコマンドを使いたければ@kbd{C-u
M-x package-install
@key{RET}}を通じてアップグレードするか、あるいは@code{package-install-upgrade-built-in}を非@code{nil}値にカスタマイズしてからパッケージメニューか@code{package-install}からそれらのパッケージを一度アップグレードする必要があります。

  @code{package-upgrade-all}やパッケージメニューの@kbd{U}といったコマンドを使うと一度に多くのパッケージがアップデートされるので、@code{package-install-upgrade-built-in}を非@code{nil}値にカスタマイズする場合には注意してください。あなたの意図に反して、これらのコマンドがビルトインパッケージをアーカイブ由来の新バージョンに上書きして置き換えてしまうかもしれません。少数のビルトインパッケージだけをアップデートしたい場合には、これらのバルクコマンド(bulk
command: 一度に大量の処理を行うコマンド)を使わないでください。

@cindex package requirements
  他のパッケージが提供する機能に依存するために、それらのパッケージがインストール済みであることを@dfn{必要(require)}とするパッケージもあるでしょう。Emacsがそのようなパッケージをインストールするときは、必要なパッケージがインストールされていなければ、それらのパッケージのダウンロードとインストールも自動に行ないます(必要なパッケージが何らかの理由で利用できない場合、Emacsはエラーをシグナルしてインストールを中止します)。パッケージの必要条件リスト(requirements
list)は、そのパッケージのヘルプバッファーに表示されます。

@vindex package-archives
  デフォルトでは、パッケージはEmacs開発者により保守される単一のパッケージアーカイブからダウンロードされます。これは変数@code{package-archives}により制御されます。この変数の値は、Emacsが認識するパッケージアーカイブのリストです。リストの各要素は@code{(@var{id}
.
@var{location})}という形式でなければなりません。ここで、@var{id}はパッケージアーカイブの名前、@var{location}はパッケージアーカイブディレクトリーの@acronym{URL}か名前です。サードパーティーのアーカイブを使用したい場合はこのリストを変更できます
--- が、自己責任で行い、信用できるサードパーティーだけを使用してください!

@anchor{Package Signing}
@cindex package security
@cindex package signing
  パッケージアーカイブのメンテナーは、パッケージに@dfn{サイン(signing)}を付して、信頼度を増すことができます。これらはプライベートとパブリックのペアーからなる暗号化キーにより生成されます。プライベートキーは各パッケージにたいする@dfn{署名ファイル(signature
file)}を作成するのに使用されます。パブリックキーにより、署名ファイルを使用してそのパッケージ作成者と、それが改ざんされていないかを確認できます。署名の検証は、EasyPGインターフェイス(@ref{Top,,
EasyPG, epa, Emacs EasyPG Assistant
Manual}を参照)を通じて@uref{https://www.gnupg.org/, the GnuPG
package}を使用します(@ref{Top,, EasyPG, epa, Emacs EasyPG Assistant
Manual}を参照)。有効な署名であっても、それが悪意がないパッケージであることを厳正に保証する訳ではなく、用心するべきです。パッケージアーカイブは、パブリックキーの入手方法について、説明を提供するべきです。@url{http://pgp.mit.edu/}のようなサーバーからキーをダウンロードするのも1つの方法です。Emacsにキーをインポートするには、@kbd{M-x
package-import-keyring}を使用します。Emacsは変数@code{package-user-dir}で指定されるディレクトリー(デフォルトは@code{package-gnupghome-dir}のサブディレクトリー@file{gnupg})にパッケージキーを格納します。これにより、Emacsが署名を検証する際に、オプション@file{gnupg}でGnuPGを呼び出すようになります。@code{package-gnupghome-dir}が@code{nil},の場合は、GnuPGのオプション@samp{--homedir}は省略します。GNUパッケージアーカイブにたいするパブリックキーはEmacsと共に配布され、@file{etc/package-keyring.gpg}にあります。Emacsはこれを自動的に使用します。

@vindex package-check-signature
@vindex package-unsigned-archives
  ユーザーオプション@code{package-check-signature}が非@code{nil}の場合、Emacsはパッケージのインストール時に署名の検証を試みます。このオプションが値@code{allow-unsigned}をもち、使用可能なOpenPGP設定が見つかったらサインされたパッケージはチェックされますが、未サインのパッケージもまだインストールができます。パッケージにサインしないアーカイブを使用する場合には、それらを@code{package-unsigned-archives}に追加できます(値が@code{allow-unsigned}で使用可能なOpenPGPが見つからなければこのオプションはあたかも値が@code{nil}であるかのように扱われる)。値が@code{t}なら少なくとも1つの署名が有効でなければならず、@code{all}ならすべての署名が有効でなければなりません。

  暗号化キーとサインについての詳細は、@ref{Top,, GnuPG, gnupg, The GNU Privacy Guard
Manual}を参照してください。EmacsのGNU Privacy Guardにたいするインターフェースについては、@ref{Top,,
EasyPG, epa, Emacs EasyPG Assistant Manual}を参照してください。

@vindex package-pinned-packages
  複数のパッケージアーカイブが有効で、同じパッケージにたいして異なるバージョンを提供する場合は、オプション@code{package-pinned-packages}が便利かもしれません。指定したパッケージが指定されたアーカイブだけからダウンロードされるように、このリストにパッケージとアーカイブのペアーを追加できます。

@vindex package-archive-priorities
@vindex package-menu-hide-low-priority
  複数の有効なパッケージアーカイブがあるときに便利な他のオプションとして、@code{package-archive-priorities}があります。これは各アーカイブにたいして、優先度(高い数字は高い優先度のアーカイブを指定します)を指定します。このオプションにより指定されない限り、アーカイブの優先度はデフォルトの0です。優先度高のアーカイブのパッケージが利用可能な場合、優先度低のアーカイブのパッケージはメニューに表示されません(これは@code{package-menu-hide-low-priority}の値により制御されます)。

  一度パッケージをダウンロードしてバイトコンパイル、インストールするとそのパッケージはカレントEmacsセッションで利用可能になります。パッケージを利用可能にするにはパッケージのディレクトリーを@code{load-path}に追加してパッケージのautoloadをロードします。パッケージのautoloadの効果はパッケージごとにさまざまです。ほとんどのパッケージはいくつかの新たなコマンドを利用可能にするだけですが、Emacsセッションにたいして広範な影響を及ぼすものもあります。この種の情報についてはパッケージのヘルプバッファーを参照してください。

  インストールされたパッケージはその後のすべてのEmacsセッションで自動的にロードされます。これはEmacs開始時のinitファイル処理前、早期initファイル(@ref{Early
Init
File}を参照)の処理後に行なわれます。例外として@samp{-q}か@samp{--no-init-file}オプション(@ref{Initial
Options}を参照してください)で呼び出されたときは、Emacs開始時にパッケージを利用可能にしません。

@vindex package-enable-at-startup
  スタートアップ時にEmacsが自動的にパッケージを利用可能しないようにするためには変数@code{package-enable-at-startup}を@code{nil}に変更してください。この変数は正規のinitファイル(regular
init file)のロード前に読み込まれるので早期initファイル(early init
file)で行うようにしてください。したがってCustomize経由でこの変数の値のセットや変更を行う場合には、カスタマイズしたセッティングは早期initファイルに保存する必要があります。これを行うには@code{package-enable-at-startup}のカスタマイズした値を保存する前に、変数@code{custom-file}
(@ref{Saving Customizations}を参照)の値が早期initファイルを指すようにセットまたは変更してください。

@findex package-quickstart-refresh
@vindex package-quickstart
  多くのパッケージのインストール後には、ユーザーオプション@code{package-quickstart}のセッティングでスタートアップタイムを改善できるかもしれません。このオプションをセットすることによって、Emacsのスタートアップ時に毎回再計算するかわりに、多くの事項をEmacsに事前に計算させることができます。しかしこれを行うと、@code{package-load-list}の値の変更時のようなアクティベーション変更が必要になった際にコマンド@code{package-quickstart-refresh}を手動で実行する必要が生じます。

@findex package-activate-all
  @code{package-enable-at-startup}を@code{nil}にセットしてもスタートアップ中およびスタートアップじにパッケージを利用可能にすることはできます。インストール済みパッケージをスタートアップ中に利用可能にするにはinitファイル内で関数@code{package-activate-all}を呼び出し手ください。スタートアップ後に利用可能にするにはコマンド@kbd{M-:
(package-activate-all) RET}を呼び出してください。

@vindex package-load-list
  スタートアップ時に利用可能になるようにパッケージのロードをより精密に制御するために、変数@code{package-load-list}を使用することができます。この変数の値にはリストを指定します。@w{@code{(@var{name}
@var{version})}}という形式のリスト要素は、@var{name}という名前のパッケージのバージョン@var{version}を利用可能にするように指示します。ここで@var{version}には、(そのパッケージの特定のバージョンに対応する)バージョン文字列、@code{t}
(任意のインストール済みのバージョンを意味する)、または@code{nil}
(バージョンを意味しない。パッケージを利用可能にすることを抑止してパッケージを無効にする)を指定します。リストの要素にはシンボル@code{all}も指定でき、これは他のリスト要素で名前指定されていない任意のパッケージのインストール済みバージョンを利用可能にすることを意味します。デフォルト値は単に@code{'(all)}となっています。

  たとえば@code{package-load-list}を@code{'((muse "3.20")
all)}にセットするとEmacsは@samp{muse}のバージョン3.20のみ、および@samp{muse}以外のパッケージのインストール済みの任意のバージョンをロードします。@samp{muse}の他のバージョンがインストールされていたとしてもそれらは無視されます。@samp{muse}パッケージは@samp{held}というステータスでパッケージメニューにリストされるはずです。

@findex package-recompile
@findex package-recompile-all
  Emacsのバイトコードは極めて安定していますがバイトコードが古くなってしまったり、コンパイル済みファイルが依存するマクロが新しいバージョンのEmacsで変更されてしまう可能性もあります。特定のパッケージをリコンパイルするためには@w{@kbd{M-x
package-recompile}}、すべてのパッケージをリコンパイルするためには@w{@kbd{M-x
package-recompile-all}}というコマンドを使うことができます(インストール済みパッケージの数が多ければ後者コマンドの実行にかなりの時間を要するかもしれない)。

@node Package Files
@section パッケージのファイルとディレクトリー
@cindex package directory

@cindex package file
@findex package-install-file
  各パッケージはパッケージアーカイブから単一ファイル形式 －－－ 1つのEmacs Lispソースファイル、または複数のEmacs
Lispソースと他のファイルを含むtarファイル ---
でダウンロードされます。パッケージファイルは、パッケージをインストールするEmacsコマンドにより自動的に取得、処理、配置されます。パッケージを作成する(@ref{Packaging,,,elisp,
The Emacs Lisp Reference
Manual}を参照してください)のでない限り、通常これらを直接扱う必要はないでしょう。パッケージファイルから直接パッケージをインストールする必要があるときは、コマンド@kbd{M-x
package-install-file}を使用してください。

@vindex package-user-dir
  Once installed, the contents of a package are placed in a subdirectory of
@file{~/.emacs.d/elpa/} (you can change the name of that directory by
customizing the variable @code{package-user-dir}).  The package subdirectory
is named @file{@var{name}-@var{version}}, where @var{name} is the package
name and @var{version} is its version string.

@cindex system-wide packages
@vindex package-directory-list
  @code{package-user-dir}に加えて、Emacsは@code{package-directory-list}にリストされたディレクトリーからインストール済みパッケージを探します。これらのディレクトリーはシステム管理者のためのディレクトリーで、Emacsパッケージをシステムワイドに利用可能にするためのものです。Emacs自身がこれらのディレクトリーにパッケージをインストールすることはありません。@code{package-directory-list}にたいするパッケージのサブディレクトリーは、@code{package-user-dir}と同じ方法で配置されます。

  パッケージの削除(@ref{Package
Menu}を参照してください)は、対応するパッケージのサブディレクトリーを削除します。これは@code{package-user-dir}にインストールされたパッケージだけに機能します。システムワイドなパッケージディレクトリーにたいして呼び出された場合、削除コマンドはエラーをシグナルします。

@node Fetching Package Sources
@section パッケージソースの取得
@cindex package development source
@cindex upstream source, for packages
@cindex git source of package @c "git" is not technically correct

  @code{package-install}はデフォルトではパッケージアーカイブからtarballをダウンロードしてそのファイルをインストールします。あなたがパッケージのソースをハッキングして、あなたの変更を他の人たちと共有したい場合には、これでは不十分かもしれません。そのような場合にはアップストリームのソースを直接取得して、それにたいして作業したいと思うのではないでしょうか。そのようにすることによって、パッチ開発やバグレポートが容易になることが多々あるからです。

@findex package-vc-install
@findex package-vc-checkout
  パッケージのソースコードをソースから直接手に入れるために@code{package-vc-install}を使うのも1つの手段です。このコマンドは通常のパッケージの場合と同じように、すべてのファイルがバイトコンパイルされて、auto-loadされることも保証してくれます。この方法でインストールされたパッケージは、他のパッケージとまったく同じように振る舞うでしょう。それらのパッケージは@code{package-upgrade}や@code{package-upgrade-all}を使ってアップグレード、@code{package-delete}を使って再び削除することができます。通常のパッケージのリストにさえこれらのパッケージが表示されます。パッケージのリストに加えずにソースのcloneだけを望む場合には、@code{package-vc-checkout}を使用してください。

@findex package-report-bug
@findex package-vc-prepare-patch
  ソースをチェックアウトするとカレントの開発HEADにたいするバグを再現させたり、新しい機能を実装して不満を解消したいと思うかもしれません。このパッケージのメタデータにメンテナーへ連絡する方法が示されていれば、コマンド@code{package-report-bug}を使用してバグを電子メール経由で報告することができます。このレポートにはあなたがカスタマイズしたすべてのユーザーオプションが含まれます。メンテナーと共有したい変更を行ったら、まずその変更をコミットしてからコマンド@code{package-vc-prepare-patch}でその変更を共有できます。@ref{Preparing
Patches}を参照してください。

@findex package-vc-install-from-checkout
@findex package-vc-rebuild
  あなたが自分のパッケージを保守している場合は、リモートレポジトリにoneするのではなくローカルでのチェックアウトを使いたいと思うかもしれません。@code{package-vc-install-from-checkout}を使ってこれを行うことができます。これはパッケージのディレクトリー(@ref{Package
Files}を参照)からあなたのチェックアウトにシンボリックリンクを作成して、コードの初期化を行うコマンドです。初期化を繰り返してautoloadを更新するために、@code{package-vc-rebuild}の使用が必要かもしれないことに注意してください。

@subsection パッケージソースの指定
@cindex package specification
@cindex specification, for source packages

  ソースからパッケージをインストールするためにはパッケージのソースをどこから取得するか(たとえばコードレポジトリ)、そしてコードの構造に関する基本情報(たとえば複数ファイルパッケージのメインファイル)をEmacsが承知していなければなりませんこれらのプロパティを記述するのが@dfn{パッケージ仕様(package
specification)}です。

  パッケージアーカイブ(@ref{Package Archives,,,elisp, The Emacs Lisp Reference
Manual}を参照)からサポートされると、Emacsはそのアーカイブからパッケージの仕様を自動的にダウンロードできます。@code{package-vc-install}に渡される1つ目の引数がパッケージを命名するシンボルであれば、Emacsはそのパッケージ用にアーカイブが提供する仕様を使用します。

@example
@group
;; EmacsはGNU ELPAからBBDBの仕様をダウンロードする:
(package-vc-install 'bbdb)
@end group
@end example

  @code{package-vc-install}の1つ目の引数はパッケージ仕様の場合もあります。これによってユーザーオプション@code{package-archives}にリストされている既知のアーカイブ以外の場所からソースパッケージをインストールできるようになります。パッケージ仕様は@code{(@var{name}
. @var{spec})}という形式のリストです。ここで@var{spec}は下記テーブルの任意のキーを使用するプロパティリストである必要があります。

コードレポジトリやバージョンコントロールシステムでの作業に使用する基本的な用語の定義については@ref{VCS Concepts,,,emacs,
The GNU Emacs Manual}を参照してください。

@table @code
@item :url
パッケージのソースコードを取得するレポジトリを指定するURL文字列。

@item :branch
インストールするコードのリビジョンを指定する文字列。バージョンのバージョン番号と混同しないこと。

@item :lisp-dir
Lispソースのロードに用いる、レポジトリに相対的なディレクトリー名文字列。デフォルトはレポジトリのルートディレクトリー。

@item :main-file
パッケージのメタデータを集約したプロジェクトのメインファイル名文字列。与えられない場合のデフォルトはパッケージ名に".el"を追加したファイル名。

@item :doc
Infoファイルをビルドするためのレポジトリに相対的なドキュメンテーションファイル名文字列。TexinfoまたはOrgのファイルが指定できる。

@item :make
A string or list of strings providing the target or targets defined in the
repository Makefile which should run before building the Info file.  Only
takes effect when @code{package-vc-allow-build-commands} is non-@code{nil}.

@item :shell-command
Infoファイルのビルド前に実行を要するシェルコマンドを与える文字列。@code{package-vc-allow-build-commands}が非@code{nil}のときのみ効果がある。

@item :vc-backend
パッケージのレポジトリのコピーのダウンロードに用いるVCバックエンドを指名する文字列(@ref{Version Control
Systems,,,emacs, The GNU Emacs
Manual}を参照)。省略時には提供されたURLからEmacsが推測を試み、それに失敗するとプロセスは@code{package-vc-default-backend}の値にフォールバックする。
@end table

@example
@group
;;情報を手作業で指定:
(package-vc-install
  '(bbdb :url "https://git.savannah.nongnu.org/git/bbdb.git"
         :lisp-dir "lisp"
         :doc "doc/bbdb.texi"))
@end group
@end example
