@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c This is part of the Emacs manual.
@c Copyright (C) 2023--2024 Free Software Foundation, Inc.
@c See file emacs-ja.texi for copying conditions.
@node Other Input
@section タッチスクリーン入力と仮想キーボード
@cindex other input devices

  Emacsは当初は、キーボード(およびもしかしたらマウスのような適切なポインティングデバイス)の備わったデスクトップコンピューターから使用するユーザーを想定して記述されました(@ref{Mouse
Input}を参照)。

  Emacsは代替えとなる入力ソースから入力を受信する能力も備えており、キーボードとマウスの組み合わせという通常の入力ソースを置き換えるコンピューターにインストールされている場合でも、ユーザーはそれらの入力ソースと対話することが可能です。

@menu
* Touchscreens::             タッチスクリーンによるEmacsとの対話。
* On-Screen Keyboards::      仮想キーボードによるテキスト入力。
@end menu

@node Touchscreens
@subsection Emacsでのタッチスクリーンの使用
@cindex touchscreen input

  タッチスクリーン入力では、フレームを表示しているモニターやコンピューター端末上にツール(指やタッチペンのようなポインティングデバイスによってインスタンス化される)を置いて移動することでフレームのコンテンツを操作します。

  このようなツールが置かれると、順序と位置という2つのファクターが@dfn{ジェスチャー(gestures)}と呼ばれる事前定義されたパターンと比較されます。その後にこれらのファクターと一致するジェスチャーが指定した一連のアクションがツールの下のテキストに実行されます。現在のところ認識可能なジェスチャーは以下のとおりです:

@itemize @bullet
@item
@cindex tapping, touchscreens
  @dfn{タップ}
(ディスプレイに一時的にツールを置いて離す)すると、タップされたウィンドウが選択されて、ウィンドウのその位置で@code{mouse-1}にバインドされた任意のコマンドを実行します。そこにリンク(@ref{Mouse
References}を参照)が存在する場合には、Emacsはそのリンクをフォローします(アクションが@code{mouse-1}イベントのエミュレーション時のアクションと異なる場合にかぎる)。

@item
@cindex scrolling, touchscreens
@vindex touch-screen-enable-hscroll
  @dfn{スクロール}
(スクリーン上での垂直または水平方向への継続的な移動)するとツールの初期位置の下にあるウィンドウのコンテンツが移動方向へとスクロールされます。ユーザーオプション@code{touch-screen-enable-hscroll}はこのジェスチャーへの反応として水平スクロール(@ref{Horizontal
Scrolling}を参照)を行うかどうかを管理します。

@item
@cindex dragging, touchscreens
@cindex long-press, touchscreens
  @dfn{長押し}
(ディスプレイ上にツールを置き、別の位置に移動する前に少し放置する)して@dfn{ドラッグ}すると、ツール自身が移動を継続しているかのようにポイントがツールの初期位置に移動して@code{mouse-1}を押したまま動かしたかのように移動します。@ref{Mouse
Commands}を参照してください。

@vindex touch-screen-word-select
@cindex word selection mode, touchscreens
  テキスト選択にとって不利なのは、ツールをタッチスクリーンのディスプレイ上に正確に配置することが難しいかもしれないことです。ユーザーオプション@code{touch-screen-word-select}が有効の場合には、ツールの下にある完全な単語をドラッグするかどうか確認を求めます(通常だとツールの下の文字を含む分だけ選択が拡張される)。

@vindex touch-screen-extend-selection
@cindex extending the selection, touchscreens
  同様にすべてのテキストを1回のジェスチャーで選択するのは難しいかもしれません。ユーザーオプション@code{touch-screen-extend-selection}が有効の場合には、ウィンドウのポイントかマークの位置をタップすると``ドラッグ''の新たなジェスチャーが開始されて、以降の移動の方向にリージョンが拡大されます。

@vindex touch-screen-preview-select
@cindex previewing the region during selection, touchscreens
  カーソルがツールで物理的に隠れていることが領域の正確な調整を難しくしています。これはエコーエリアにポイントの位置を示すことで解決できます。@code{touch-screen-preview-select}が非@code{nil}の場合には、ポイントを取り囲む行がエコーエリア(@ref{Echo
Area}を参照)に表示されて、ツールの移動中には最初の位置からの相対的な位置を示す別の行が下に表示されます。

@item
@cindex pinching, touchscreens
  @dfn{ピンチ}
(スクリーン上離して2つのツールを置き、距離の増減によって位置を調整する)すると、間の距離に比例してテキストスケール(@ref{Text
Scale}を参照)が変化します。
@end itemize

@vindex touch-screen-delay
  ツールをスクリーン上に置いて0.7秒を超えると、Emacsが長押し(long-press)を登録します。この遅延は変数@code{touch-screen-delay}をカスタマイズして調節できます。

@node On-Screen Keyboards
@subsection Emacsでの仮想キーボードの使用
@cindex virtual keyboards
@cindex on-screen keyboards

  物理的なキーボードが接続されていないシステムでは、そのウィンドウシステムがオンスクリーンキーボード(``仮想キーボード: virtual
keyboard''
として広く知られている)を提供しているかもしれません。これは何列かに並んだクリック可能なボタンをもち、キーボード入力を実際のキーボードと同じようにアプリケーションに送信するキーボードです。

  フォーカスのあるアプリケーションがテキスト入力をリクエストしていないときは、ディスプレイ上で少しの領域しか専有しないように仮想キーボードを非表示にします。Xを実行するシステムでは仮想キーボードの表示は保証されていますが、Android
Emacsのように他のシステムでは必要になったとき(一般的にはタッチスクリーンへの``タップ''ジェスチャーへの反応として;
@ref{Touchscreens}を参照)、あるいはミニバッファー(@ref{Minibuffer}を参照)を使用する際の仮想キーボードの表示はAndroid
Emacsの役目です。

@vindex touch-screen-set-point-commands
  ``タップ''ジェスチャーによってあるコマンドが実行されると、Emacsはリスト@code{touch-screen-set-point-commands}を検索して、それがポイントのセットを意図したコマンドなのかどうかチェックします。もし意図したコマンドであれば、新たなポイントの下にあるテキストが読み取り専用でなければ仮想キーボードをアクティブして、アプリケーションのユーザーがそこで入力できるようになるのです。

  @code{touch-screen-set-point-commands}のデフォルト値には、コマンド@code{mouse-set-point}
(@ref{Mouse
Commands}を参照)だけがセットされています。@code{mouse-1}はデフォルトで@code{touch-screen-set-point-commands}にバインドされており、同じようにタッチスクリーンのタップジェスチャーもバインドされています。

@vindex touch-screen-display-keyboard
  ユーザーオプション@code{touch-screen-display-keyboard}はたとえテキストが読み取り専用であっても、すべてのタップジェスチャーにたいして仮想キーボードの表示を強制します。これはバッファーローカルにセットすることもできます。この場合にはセットされたバッファーを表示しているウィンドウへのタップの反応として、Emacsは常にキーボードを表示します。

  オンスクリーンキーボードの表示や非表示を行う関数は他にもいくつかあります。詳細については@ref{On-Screen Keyboards,,,
elisp, The Emacs Lisp Reference Manual}を参照してください。

@cindex quitting, without a keyboard
  コマンドの実行中にEmacsが仮想キーボードを表示できない可能性があるため、物理的キーボードを備えていない場合が多いウィンドウシステムでは、デバイスに常に存在するハードウェアボタンを素早く2回クリックしてquit(閉じる、終了)する機能を実装しています。@ref{Quitting}を参照してください。

@vindex x-quit-keysym
@vindex android-quit-keycode
  Xではこのようなボタンは有効ではありませんが変数@code{x-quit-keysym}を通じて設定できます。Androidのデフォルトのキーはボリュームダウンボタンですが、これも変数@code{android-quit-keycode}を通じて設定できます。

@cindex text conversion, keyboards
  仮想キーボードで動作するようにデザインされた入力メソッドのほとんどは、デスクトップの入力メソッドとは異なる方法でテキストを編集します。

  デスクトップの伝統的なウィンドウシステムでは、入力メソッドは進行中の文字合成の内容をスクリーン上に単に表示して、ユーザーの確認後にその内容を反映するイベントを送信します。

  対照的に仮想キーボードの入力メソッドは、それぞれのフレームの選択されたウィンドウにたいして編集を直接実行します。これはXウィンドウシステムでは``テキスト変換(text
conversion)''あるいは``文字列変換(string conversion)''と呼ばれる方法です。

  Emacsはバッファーローカル変数@code{text-conversion-style}が非@code{nil}のとき、つまり一般的には@code{text-mode}および@code{prog-mode}の派生モードの内部では、これらの入力メソッドを有効にします。

  Emacsは入力メソッドから処理の要求を受信すると、常に非同期でテキスト変換を実行します。現在のところすでにプレフィクスキーが読み取られたキーシーケンス(@ref{Keys}を参照)は読み取りません。変換が完了した後は@code{text-conversion}イベントが送信されます。@ref{Misc
Events,,, elisp, the Emacs Reference Manual}を参照してください。

@vindex text-conversion-face
  バッファーのリージョンにたいして入力メソッドが処理を必要とする場合には、その領域は``構成リージョン(composing
region)''、または``変換前リージョン(preconversion
region)''と指定されます。変数@code{text-conversion-face}は構成リージョンを特定のフェイスで表示するか、表示する場合にはどのフェイスを用いるかを制御します。
