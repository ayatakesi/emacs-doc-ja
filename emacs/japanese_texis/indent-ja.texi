@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================

@c This is part of the Emacs manual.
@c Copyright (C) 1985--1987, 1993--1995, 1997, 2001--2024 Free Software
@c Foundation, Inc.
@c See file emacs-ja.texi for copying conditions.
@node Indentation
@chapter インデント
@cindex indentation
@cindex tabs
@cindex columns (indentation)

@cindex whitespace character
  @dfn{インデント(Indentation)}とは、@dfn{空白文字}(スペースやタブ文字)を行のテキストの先頭に挿入したり調整することを指します。このチャプターでは、インデントコマンドと、Textモードやそれに関連するモード、同様にプログラミング言語のモードでの一般的なオプションを記します。プログラミング用のモードでのインデントに関する追加のドキュメントは、@ref{Program
Indent}を参照してください。

@findex indent-for-tab-command
@kindex TAB @r{(indentation)}
  インデントを行うもっとも簡単な方法は、@key{TAB}キーです。ほとんどのメジャーモードでは、これによりコマンド@code{indent-for-tab-command}が実行されます(Cおよびそれに関連するモードでは、@key{TAB}は同じように振る舞うコマンド@code{c-indent-line-or-region}を実行する。@ref{C
Indent}を参照されたい)。

@table @key
@item TAB
空白文字を挿入、またはモードに適した方法でカレント行をインデントします(@code{indent-for-tab-command})。リージョンがアクティブのときは、リージョンのすべての行をインデントします。
@end table

  @key{TAB}の正確な動作は、メジャーモードに依存します。Textモードおよびそれに関連するモードでは、@key{TAB}は通常、空白とタブ文字を組み合わせたものを挿入して、ポイントを次のタブストップに進めます。このために、先行する行の最初の空白以外の文字の位置は、追加のタブストップとして扱われるので、@key{TAB}を使って先行する行にポイントを揃えることができます。リージョンがアクティブ(@ref{Using
Region}を参照してください)な場合、@key{TAB}は特別な動作をします。これはリージョンの各行をインデントするので、各行の最初の空白以外の文字は、先行する行に揃えられます。

  プログラミング関連のモードでは、@key{TAB}はコードのカレント行にたいして、前の行のコードの意味を理解してインデントします。リージョンがアクティブな場合、リージョンのすべての行はこの方法でインデントされます。ポイントが最初にカレント行のインデント領域にあった場合、その行の最初の空白以外の文字に再配置されます。

  単にタブ文字をバッファーに挿入したいときは、@kbd{C-q @key{TAB}}とタイプします(@ref{Inserting
Text}を参照してください)。

@menu
* Indentation Commands::     インデントを処理するほかのコマンド。
* Tab Stops::                Textモードのインデントのストップポイント。
* Just Spaces::              インデントにスペース文字だけを使用する。
* Indent Convenience::       インデントのオプション機能。
* Code Alignment::           行の共通部分を同じ列から開始する。
@end menu

@node Indentation Commands
@section インデントコマンド

@kbd{@key{TAB}}
(@code{indent-for-tab-command})コマンドとは別に、Emacsは他の方法でインデントを処理する、さまざまなコマンドを提供します。

@table @kbd
@item C-M-o
@kindex C-M-o
@findex split-line
カレント行をポイント位置で分割します(@code{split-line})。その行のポイントの後にあるテキストは新しい行となり、ポイントがあった位置と同じ列にインデントされます。このコマンドは、最初にポイントを複数のスペースまたはタブを飛び越えて移動させます。その後、ポイントは挿入された行の前に配されます。

@kindex M-m
@findex back-to-indentation
@item M-m
カレント行の最初の空白以外の文字に移動(前方または後方)します(@code{back-to-indentation})。その行に空白文字しかない場合は、その行の行末に移動します。

@item M-i
@kindex M-i
@findex tab-to-tab-stop
ポイント位置の空白文字を次のタブストップまでインデントします(@code{tab-to-tab-stop})。@ref{Tab
Stops}を参照してください。

@findex indent-relative
@item M-x indent-relative
ポイントが前の行(実際には最後の空行以外の行)の、最初の空白以外の文字に揃うように、ポイント位置に空白文字を挿入します。ポイントがすでにその位置より右にある場合は、かわりに@code{tab-to-tab-stop}を実行します
--- ただし数引数を指定した場合は何もしません。

@item M-^
@kindex M-^
@findex delete-indentation
前の行とカレント行をマージします(@code{delete-indentation})。このコマンドはカレント行の前にある任意のインデントと、行の境界を1つのスペースで置き換えて、2つの行を明解に結合(join)します。

特別なケースとして、結合された文字が連続する開きカッコまたは閉じカッコの場合、または他の改行が続く場合、1つのスペースは省略されます(Lispコードにたいして有用)。

fillプレフィクスが存在して、それが改行の後ろにあった場合、@kbd{M-^}はfillプレフィクスを削除します。@ref{Fill
Prefix}を参照してください。

プレフィクス引数を与えると、カレント行を後続行に結合します。リージョンがアクティブでプレフィクス引数が与えられなければ、かわりにリージョン内の全行を結合します。

@item C-M-\
@kindex C-M-\
@findex indent-region
リージョンのすべての行にたいして、各行の先頭で@kbd{@key{TAB}}をタイプしたかのようにインデントします(@code{indent-region})。

数引数が与えられた場合、その列番号までリージョンのすべての行をインデントします。

@item C-x @key{TAB}
@kindex C-x TAB
@findex indent-rigidly
@cindex remove indentation
リージョン内で開始されるすべての行をインデントします。影響を受ける行は厳格な(rigid)単位とによって移動されます(@code{indent-rigidly})。

引数を指定しないで呼び出されたとき、このコマンドは影響を受ける行のインデントを対話的に調整するために、transientモードをアクティブにします。transientモードがアクティブの間は、@kbd{@key{LEFT}}または@kbd{@key{RIGHT}}により、スペース1文字単位で左または右にインデントします。@kbd{S-@key{LEFT}}または@kbd{S-@key{RIGHT}}とタイプすることにより、タブストップ単位で左または右にインデントすることもできます。他のキーをタイプするとtransientモードは無効になり、その後はこのキーは通知のように動作します。

プレフィクス引数@var{n}を指定して呼び出すと、このコマンドは行を@var{n}個のスペースでインデントします(transientモードは有効になりません)。@var{n}に値を与えると後方にインデントするので、リージョン内の行のすべてのインデントを除去したいときは、以下のように充分に大きい負の引数を与えます。

@smallexample
C-u -999 C-x @key{TAB}
@end smallexample
@end table

@node Tab Stops
@section タブストップ
@cindex tab stops

@vindex tab-stop-list
  Emacsは、特定の列番号が@dfn{タブストップ}になるよう定義しています。これらはTextモードおよびそれに関連するモードで、@key{TAB}および@kbd{M-i}のようなコマンドにより、空白文字が挿入されるときのストップポイントとして使用されます。変数@code{tab-stop-list}は、これらの位置を制御します。デフォルト値は@code{nil}で、これはタブストップが8列ごとという意味です。値には、タブストップの列番号を、0基準の列番号のリスト(昇順)で指定することもできます。Emacsは最後の要素と、その1つ前の要素の差分を繰り返すことにより、リストを無限に拡張します。

@findex edit-tab-stops
@kindex C-c C-c @r{(Edit Tab Stops)}
  変数@code{tab-stop-list}を直接カスタマイズするかわりに、コマンド@kbd{M-x
edit-tab-stops}を通じて、タブストップを視認しながらセットする便利な方法があります。このコマンドは、以下のようなタブストップの説明を含んだバッファーに切り替えます。

@example
        :       :       :       :       :       :
0         1         2         3         4
0123456789012345678901234567890123456789012345678
To install changes, type C-c C-c
@end example

@noindent
最初の行は各タブストップ位置にコロンを示します。その後の2行はコロンが示す位置を表示します。@code{tab-stop-list}の値が@code{nil}(デフォルト)の場合、最初はコロンが表示されません。

  異なるタブストップを置きたい列に、コロンを配して指定するために、このバッファーを編集できます。このバッファーはOverwriteモードを使用します(@ref{Minor
Modes}を参照してください)。Emacsは、最後に明示した2つのストップの差分を繰り返すことにより、タブストップのリストを無限に拡張することを思い出してください。編集が終わったら、新しいタブストップを有効にするために、@kbd{C-c
C-c}とタイプします。通常、新しいタブストップのセッティングは、すべてのバッファーに適用されます。しかし@kbd{M-x
edit-tab-stops}を呼び出したバッファーにたいして、ローカルな変数@code{tab-stop-list}を作成していた場合(@ref{Locals}を参照してください)、新しいタブストップのセッティングは、そのバッファーだけに適用されます。将来のEmacsセッションのためにタブストップのセッティングを保存するには、Customizeインターフェースを使用して@code{tab-stop-list}の値を保存します(@ref{Easy
Customization}を参照してください)。

  このセクションで議論したタブストップは、バッファーでタブ文字が表示される方法には影響しないことに注意してください。タブ文字は常に次の@dfn{タブストップ表示(display
tab stop)}まで拡張される、空のスペースとして表示されます。@ref{Text Display}を参照してください。

@node Just Spaces
@section タブ vs. スペース

  インデントコマンドは通常、最小になるような一連のタブ文字とスペースを挿入(または削除)することにより、望む列に行を揃えます。タブ文字は次の@dfn{タブストップ表示(display
tab
stop)}まで伸長された、空のスペースとして表示されます。デフォルトでは、@code{tab-width}列ごと(デフォルトは8)に、1つのタブストップ表示があります。@ref{Text
Display}を参照してください。

@vindex indent-tabs-mode
  もし望むなら、すべてのインデントをスペースだけで行うこともできます。これを要求するには、バッファーローカルな変数@code{indent-tabs-mode}を@code{nil}にセットします。バッファーローカルな変数についての情報は、@ref{Locals}を参照してください。しかし@kbd{C-q
@key{TAB}}は、@code{indent-tabs-mode}の値とは無関係に、常にタブ文字を挿入することに注意してください。

  @code{indent-tabs-mode}を@code{nil}にセットする1つの理由は、すべてのエディターがタブ文字を同じ方法で表示するわけではないという理由です。Emacsユーザーも同様で、彼らはカスタマイズされた@code{tab-width}により、異なる値をもつかもしれません。スペースだけを使うことにより、ファイルが常に同じように見えることを保証できます。Emacsでどのように見えるかだけに関心がある場合、この問題に取り組む他の方法は、ファイルローカルな変数@code{tab-width}をセットする方法です(@ref{File
Variables}を参照してください)。

@findex tabify
@findex untabify
  空白以外の文字の列を常に保ちながら、スペースをタブに、またはその逆の変換を行うコマンドも存在します。@kbd{M-x
tabify}は、リージョンの連続するスペースをスキャンして、インデントを変更せずに、少なくとも2文字の連続するスペースをタブに変換します。@kbd{M-x
untabify}は、リージョンのすべてのタブを適正な数のスペースに変更します。

@node Indent Convenience
@section インデントの便利な機能

@vindex tab-always-indent
  変数@code{tab-always-indent}は、@key{TAB}
(@code{indent-for-tab-command})コマンドの動作を微調整します。デフォルト値は@code{t}で、これは@ref{Indentation}で説明した動作を与えます。値をシンボル@code{complete}に変更すると、@key{TAB}は最初にカレント行のインデントを試みます、すでにその行がインデントされている場合、このコマンドはポイント位置のテキストの補完を試みます(@ref{Symbol
Completion}を参照してください)。値が@code{nil}の場合、@key{TAB}はポイントが行の左端かインデント位置にあるときだけインデントを行い、それ以外はタブ文字を挿入します。

@vindex tab-first-completion
  @code{tab-always-indent}が@code{complete}の場合には、@code{tab-first-completion}変数を通じて展開するか、それともインデントするかを更にカスタマイズできます。たとえばこの変数が@code{eol}なら、ポイントが行末にある場合のみ補完します。詳細は@ref{Mode-Specific
Indent,,, elisp, The Emacs Lisp Reference Manual}を参照してください。

@cindex Electric Indent mode
@cindex mode, Electric Indent
@findex electric-indent-mode
  Electric
Indentモードはグローバルなマイナーモードで、これは@key{RET}をタイプしたあと自動的にインデントを行います。このモードはデフォルトで有効です。このマイナーモードを切り替えるには、@kbd{M-x
electric-indent-mode}とタイプします。1つのバッファーにたいしてモードを切り替えるには、@kbd{M-x
electric-indent-local-mode}を使用してください。

@node Code Alignment
@section Code Alignment
@cindex code alignment
@cindex aligning code

  @dfn{アライメント(Alignment:
整列)}とはリージョン内の一連の行において、すべての行の特定の部分が同じ列で始まるように、空白文字を調整するプロセスのことです。これはテキストやコードの可読性を向上させるために、あなたが通常行っていることです。以下はCのようなプログラミング言語における一連の割り当てを整列する古典的な例を示しましょう:

@example
int a = 1;
short foo = 2;
double blah = 4;
@end example

@noindent
これは典型的には以下のように整列されます:

@example
int    a    = 1;
short  foo  = 2;
double blah = 4;
@end example

@cindex alignment rules
@findex align
  コマンド@kbd{M-x
align}を使えば、カレントリージョン内の行を整列できます。このコマンドは多くのマークアップやプログラミング言語に通じる一般的なアライメントパターンを承知しています。異なるコンテキストにおける異なる種類のテキストをどのように整列するかを指定するための@dfn{アライメントルール(alignment
rules)}のセットとして、これらのパターンを符号化するのです。

@vindex align-rules-list
@vindex align-mode-rules-list
ユーザーオプション@code{align-rules-list}は、どのアライメントルールを@kbd{M-x
align}が参照すべきかを指示します。このオプションの値は、アライメントルールが記述された要素のリストです。要素はそれぞれ@code{(@var{title}
.
@var{attributes})}という形式のコンスセルです。ここで@var{title}はそのアライメントルールの名前(シンボル)、@var{attributes}はそのルールをいつ適用するか、どのように行を区切って整列するかを定義するルール属性のリストです。ルール属性はそれぞれ@code{(@var{attribute}
.
@var{value})}という形式のコンスセルであり@var{attribute}は属性の名前、@var{value}がその属性の値になります。唯一必須の属性である@code{regexp}値は、それぞれの行において@kbd{M-x
align}が空白を展開、あるいは縮小すべき部分にマッチする部分式(sub-expressions)を表す正規表現です。利用可能なアライメントルールの属性についての完全な説明については、@code{align-rules-list}のドキュメント文字列(@kbd{C-h
v align-rules-list
@key{RET}})を参照してください。このオプションのデフォルトには、Emacsがサポートする多くの言語用にアライメントルールの長いリストがセットされています。デフォルトのルールでは、@kbd{M-x
align}を適用するメジャーモードを指定するルール属性である@code{modes}が使用されます。メジャーモードのほうもバッファーローカル変数@code{align-mode-rules-list}に非@code{nil}のアライメントルールのリストをセットして、@code{align-rules-list}をオーバーライドできます。@code{align-mode-rules-list}が非@code{nil}なら、@kbd{M-x
align}は@code{align-rules-list}ではなくそちらを参照します。

@cindex align exclusion rules
@vindex align-exclude-rules-list
@vindex align-mode-exclude-rules-list
アライメントルール以外にも、@kbd{M-x align}は@dfn{除外ルール(exclusion
rules)}と呼ばれる別の類のルールを使用します。@kbd{M-x
align}にたいしてリージョン内のどの部分を整列せずに手つかずのまま残すよう指示するのが除外ルールです。この除外ルールはユーザーオプション@code{align-exclude-rules-list}によって指定されます。@code{align-rules-list}と同じように、@code{align-exclude-rules-list}の値も除外ルールを記述するコンスセルのリストです。デフォルトで@code{align-exclude-rules-list}に含まれているのはクォートされた文字列、およびLispやCなどの言語のコメントを整列から除外するためのルールです。@code{align-mode-exclude-rules-list}に非@code{nil}のルールのリストをセットすることによって、メジャーモードはデフォルトの除外ルールから更にモード用に誂えた除外ルールを定義することができます。@code{align-mode-rules-list}が@code{align-rules-list}をオーバーライドするのと同じように、このルールは@code{align-exclude-rules-list}をオーバーライドします。

@cindex alignment sections
@vindex align-region-separate
@kbd{M-x
align}はリージョンを一連の@dfn{セクション(sections)}に分割します。セクションとは通常は連続する非空行のことです。マッチするすべてのアライメントルールに応じて空白部分を展開あるいは縮小することによる、それぞれのセクションを整列します。@kbd{M-x
align}は1つのセクション内部のすべての行にたいして一貫性をもった整列を行いますが、リージョンに含まれている別のセクションにたいしては異なる整列を行うかもしれません。@kbd{M-x
align}がリージョンをどのようにセクションに分割するかは、ユーザーオプション@code{align-region-separate}で指定します。このオプションにはシンボル@code{entire}か@code{group}、あるいは正規表現を指定できます。@code{align-region-separate}が@code{entire}ならEmacsはリージョン全体を単一のセクションとして整列、@code{group}ならリージョン内で連続する非空行のグループそれぞれを個別のセクションとして整列します。@code{align-region-separate}が正規表現の場合には、@kbd{M-x
align}はリージョンからその正規表現にたいするマッチをスキャンして、それらのマッチを個別のセクションとして扱います。デフォルトでは@code{align-region-separate}は空行、空白のみからなる行、単独の中カッコ(curly
brace;
@samp{@{}や@samp{@}})にマッチする正規表現がセットされています。正規表現では不十分であるような特殊ケースについては、セクション整列のためにリージョンをどのように分割するかを指示する関数を@code{align-region-separate}にセットすることもできます。詳細については@code{align-region-separate}のドキュメント文字列を参照してください。特定のアライメントルールはルール属性@code{separate}を指定してセクション区切りを独自に定義することによって、@code{align-region-separate}の値をオーバーライドすることができます。

プレフィックス引数(@kbd{C-u})とともに@kbd{M-x
align}を呼び出せば、より多くのアライメントルールを有効にできます。これは役に立つことが多いものの、場合によっては煩わし過ぎるかもしれません。たとえばLispバッファーで以下のようなフォームがあるとすると:

@lisp
(set-face-attribute 'mode-line-inactive nil
                    :box nil
                    :background nil
                    :underline "black")
@end lisp

@noindent
@kbd{C-u M-x align}とタイプして以下が得られるでしょう:

@lisp
(set-face-attribute 'mode-line-inactive nil
                    :box                nil
                    :background         nil
                    :underline          "black")
@end lisp

ほとんどの場合においてはまずプレフィックス引数なしの@kbd{M-x
align}を試してみて、正しい結果が生み出されなければ@kbd{C-/}でアンドゥしてから再度@kbd{C-u M-x
align}を試みるべきでしょう。

@findex align-highlight-rule
@findex align-unhighlight-rule
カレントリージョンにたいして特定のアライメントルールや除外ルールの視覚的効果を確認するためにコマンド@kbd{M-x
align-highlight-rule}を使うことができます。このコマンドはルールのタイトルの入力を求めて、そのルールが効果を及ぼすリージョン部分をハイライトします。アライメントルールにたいしてこのコマンドは@kbd{M-x
align}が展開あるいは縮小するであろう空白をハイライト、除外ルールにたいしては@kbd{M-x
align}が整列から除外するであろう部分をハイライトします。このコマンドが作成したハイライトを削除するには、@kbd{M-x
align-unhighlight-rule}とタイプしてください。

@findex align-current
@findex align-entire
  コマンド@kbd{M-x align-current}は@kbd{M-x
align}と似ていますが、カレントリージョンとは無関係にポイントを含むアライメント対象セクションだけを処理する点が異なります。@code{align-region-separate}で定義されたセクション区切りに応じて、このコマンドはカレントセクションの境界を判断します。もう一つの@kbd{M-x
align}の変種である@kbd{M-x
align-entire}は@code{align-region-separate}を無視して、リージョン全体を単一のアライメント対象セクションとして一貫した整列を行います。@code{align-region-separate}に@code{entire}をセットしている場合には、@kbd{M-x
align}はデフォルトでは@kbd{M-x
align-entire}と同じように振る舞います。リージョン全体を単一のアライメント対象セクションとして整列する効果を説明するために、以下のコードで考えてみましょう:

@example
one = 1;
foobarbaz = 2;

spam = 3;
emacs = 4;
@end example

@noindent
リージョンがこれらの行すべてを含む場合には、@kbd{M-x align}をタイプすることによって以下が得られるでしょう:

@example
one       = 1;
foobarbaz = 2;

spam  = 3;
emacs = 4;
@end example

@noindent
一方@kbd{M-x
align-entire}はすべての行を単一のセクションとして整列するので、@samp{=}はすべての行で同じ列に表示されることになります:

@example
one       = 1;
foobarbaz = 2;

spam      = 3;
emacs     = 4;
@end example

@findex align-regexp
  コマンド@kbd{M-x
align-regexp}は@code{align-rules-list}に事前定義されているルールを用いるのではなく、その場で定義したアライメントルールによってカレントリージョンを整列する手段を与えます。@kbd{M-x
align-regexp}は正規表現の入力を求めて、その式をそのとき限りのアライメントルール用の@code{regexp}属性として使用します。このコマンドはデフォルトでは指定された正規表現の最初の部分式にマッチした空白を調整します。プレフィックス引数とともに@kbd{M-x
align-regexp}を呼び出すと、このコマンドは使用する部分式、パディングとして用いる空白の量、更にそれぞれの行において正規表現のすべてのマッチにルールを繰り返し適用するかどうかの入力を求めます。正規表現と正規表現の部分式に関する詳細については@ref{Regexp
Backslash}を参照してください。

@vindex align-indent-before-aligning
  ユーザーオプション@code{align-indent-before-aligning}が非@code{nil}の場合には、@kbd{M-x
align}で整列する前にEmacsがそのリージョンをインデントします。@ref{Indentation}を参照してください。@code{align-indent-before-aligning}はデフォルトでは@code{nil}にセットされています。

@vindex align-to-tab-stop
  ユーザーオプション@code{align-to-tab-stop}は整列される部分をタブストップ(@ref{Tab
Stops}を参照)から開始する必要があるかどうかを指定します。コンスオプションが@code{nil}なら、@kbd{M-x
align}はタブストップを無視して整列に必要となる空白だけを使用します。非@code{nil}のシンボルの場合には、@kbd{M-x
align}がそのシンボルの値をチェックして非@code{nil}なら@kbd{M-x
align}はタブストップに整列します。このオプションはデフォルトでは@code{indent-tabs-mode}にセットされているので、インデントにタブを用いているバッファーではタブストップを考慮した整列を行います。@ref{Just
Spaces}を参照してください。

@vindex align-default-spacing
  ユーザーオプション@code{align-default-spacing}は、@kbd{M-x
align}とその関連コマンドが行を整列する際にそれぞれの行の異なる部分の間のパディングに用いる空白のデフォルト量を指定します。@code{align-to-tab-stop}が@code{nil}なら@code{align-default-spacing}の値はパディングに用いるスペースの数、非@code{nil}なら@code{align-default-spacing}の値はタブストップの数です。各アライメントルールは@code{spacing}属性ルールによって@code{align-default-spacing}で指定されたデフォルトをオーバーライドできます。
