# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2024-10-06 07:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: original_texis/functions.texi:6 original_texis/functions.texi:7
#, no-wrap
msgid "Functions"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:12
msgid ""
"A Lisp program is composed mainly of Lisp functions.  This chapter explains "
"what functions are, how they accept arguments, and how to define them."
msgstr ""

#. type: node
#: original_texis/functions.texi:34 original_texis/functions.texi:36
#, no-wrap
msgid "What Is a Function"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:34
msgid "Lisp functions vs. primitives; terminology."
msgstr ""

#. type: section
#: original_texis/functions.texi:34 original_texis/functions.texi:260 original_texis/functions.texi:261
#, no-wrap
msgid "Lambda Expressions"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:34
msgid "How functions are expressed as Lisp objects."
msgstr ""

#. type: node
#: original_texis/functions.texi:34 original_texis/functions.texi:631
#, no-wrap
msgid "Function Names"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:34
msgid "A symbol can serve as the name of a function."
msgstr ""

#. type: section
#: original_texis/functions.texi:34 original_texis/functions.texi:686 original_texis/functions.texi:687
#, no-wrap
msgid "Defining Functions"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:34
msgid "Lisp expressions for defining functions."
msgstr ""

#. type: section
#: original_texis/functions.texi:34 original_texis/functions.texi:835 original_texis/functions.texi:836
#, no-wrap
msgid "Calling Functions"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:34
msgid "How to use an existing function."
msgstr ""

#. type: section
#: original_texis/functions.texi:34 original_texis/functions.texi:1028 original_texis/functions.texi:1029
#, no-wrap
msgid "Mapping Functions"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:34
msgid "Applying a function to each element of a list, etc."
msgstr ""

#. type: section
#: original_texis/functions.texi:34 original_texis/functions.texi:1148 original_texis/functions.texi:1149
#, no-wrap
msgid "Anonymous Functions"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:34
msgid "Lambda expressions are functions with no names."
msgstr ""

#. type: section
#: original_texis/functions.texi:34 original_texis/functions.texi:1262 original_texis/functions.texi:1263
#, no-wrap
msgid "Generic Functions"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:34
msgid "Polymorphism, Emacs-style."
msgstr ""

#. type: node
#: original_texis/functions.texi:34 original_texis/functions.texi:1499
#, no-wrap
msgid "Function Cells"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:34
msgid "Accessing or setting the function definition of a symbol."
msgstr ""

#. type: section
#: original_texis/functions.texi:34 original_texis/functions.texi:1606 original_texis/functions.texi:1607
#, no-wrap
msgid "Closures"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:34
msgid "Functions that enclose a lexical environment."
msgstr ""

#. type: node
#: original_texis/functions.texi:34 original_texis/functions.texi:1644
#, no-wrap
msgid "OClosures"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:34
msgid "Function objects with meta-data."
msgstr ""

#. type: node
#: original_texis/functions.texi:34 original_texis/functions.texi:1802
#, no-wrap
msgid "Advising Functions"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:34
msgid "Adding to the definition of a function."
msgstr ""

#. type: node
#: original_texis/functions.texi:34 original_texis/functions.texi:2357
#, no-wrap
msgid "Obsolete Functions"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:34
msgid "Declaring functions obsolete."
msgstr ""

#. type: section
#: original_texis/functions.texi:34 original_texis/functions.texi:2442 original_texis/functions.texi:2443
#, no-wrap
msgid "Inline Functions"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:34
msgid "Functions that the compiler will expand inline."
msgstr ""

#. type: node
#: original_texis/functions.texi:34 original_texis/functions.texi:2591
#, no-wrap
msgid "Declare Form"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:34
msgid "Adding additional information about a function."
msgstr ""

#. type: node
#: original_texis/functions.texi:34 original_texis/functions.texi:2795
#, no-wrap
msgid "Declaring Functions"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:34
msgid "Telling the compiler that a function is defined."
msgstr ""

#. type: node
#: original_texis/functions.texi:34 original_texis/functions.texi:2883
#, no-wrap
msgid "Function Safety"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:34
msgid "Determining whether a function is safe to call."
msgstr ""

#. type: node
#: original_texis/functions.texi:34 original_texis/functions.texi:2971
#, no-wrap
msgid "Related Topics"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:34
msgid ""
"Cross-references to specific Lisp primitives that have a special bearing on "
"how functions work."
msgstr ""

#. type: section
#: original_texis/functions.texi:37
#, no-wrap
msgid "What Is a Function?"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:39
#, no-wrap
msgid "return value"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:40
#, no-wrap
msgid "value of function"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:41
#, no-wrap
msgid "argument"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:42
#, no-wrap
msgid "pure function"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:52
msgid ""
"In a general sense, a function is a rule for carrying out a computation "
"given input values called @dfn{arguments}.  The result of the computation is "
"called the @dfn{value} or @dfn{return value} of the function.  The "
"computation can also have side effects, such as lasting changes in the "
"values of variables or the contents of data structures (@pxref{Definition of "
"side effect}).  A @dfn{pure function} is a function which, in addition to "
"having no side effects, always returns the same value for the same "
"combination of arguments, regardless of external factors such as machine "
"type or system state."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:62
msgid ""
"In most computer languages, every function has a name.  But in Lisp, a "
"function in the strictest sense has no name: it is an object which can "
"@emph{optionally} be associated with a symbol (e.g., @code{car})  that "
"serves as the function name.  @xref{Function Names}.  When a function has "
"been given a name, we usually also refer to that symbol as a ``function'' "
"(e.g., we refer to ``the function @code{car}'').  In this manual, the "
"distinction between a function name and the function object itself is "
"usually unimportant, but we will take note wherever it is relevant."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:67
msgid ""
"Certain function-like objects, called @dfn{special forms} and @dfn{macros}, "
"also accept arguments to carry out computations.  However, as explained "
"below, these are not considered functions in Emacs Lisp."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:69
msgid "Here are important terms for functions and function-like objects:"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:71 original_texis/functions.texi:262
#, no-wrap
msgid "lambda expression"
msgstr ""

#. type: table
#: original_texis/functions.texi:74
msgid ""
"A function (in the strict sense, i.e., a function object) which is written "
"in Lisp.  These are described in the following section."
msgstr ""

#. type: ifnottex
#: original_texis/functions.texi:76
msgid "@xref{Lambda Expressions}."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:78 original_texis/functions.texi:79
#, no-wrap
msgid "primitive"
msgstr ""

#. type: item
#: original_texis/functions.texi:80 original_texis/functions.texi:1406
#, no-wrap
msgid "subr"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:81
#, no-wrap
msgid "built-in function"
msgstr ""

#. type: table
#: original_texis/functions.texi:87
msgid ""
"A function which is callable from Lisp but is actually written in C@.  "
"Primitives are also called @dfn{built-in functions}, or @dfn{subrs}.  "
"Examples include functions like @code{car} and @code{append}.  In addition, "
"all special forms (see below) are also considered primitives."
msgstr ""

#. type: table
#: original_texis/functions.texi:94
msgid ""
"Usually, a function is implemented as a primitive because it is a "
"fundamental part of Lisp (e.g., @code{car}), or because it provides a "
"low-level interface to operating system services, or because it needs to run "
"fast.  Unlike functions defined in Lisp, primitives can be modified or added "
"only by changing the C sources and recompiling Emacs.  See @ref{Writing "
"Emacs Primitives}."
msgstr ""

#. type: item
#: original_texis/functions.texi:95
#, no-wrap
msgid "special form"
msgstr ""

#. type: table
#: original_texis/functions.texi:101
msgid ""
"A primitive that is like a function but does not evaluate all of its "
"arguments in the usual way.  It may evaluate only some of the arguments, or "
"may evaluate them in an unusual order, or several times.  Examples include "
"@code{if}, @code{and}, and @code{while}.  @xref{Special Forms}."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:102 original_texis/functions.texi:103
#, no-wrap
msgid "macro"
msgstr ""

#. type: table
#: original_texis/functions.texi:109
msgid ""
"A construct defined in Lisp, which differs from a function in that it "
"translates a Lisp expression into another expression which is to be "
"evaluated instead of the original expression.  Macros enable Lisp "
"programmers to do the sorts of things that special forms can do.  "
"@xref{Macros}."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:110 original_texis/functions.texi:111
#, no-wrap
msgid "command"
msgstr ""

#. type: table
#: original_texis/functions.texi:119
msgid ""
"An object which can be invoked via the @code{command-execute} primitive, "
"usually due to the user typing in a key sequence @dfn{bound} to that "
"command.  @xref{Interactive Call}.  A command is usually a function; if the "
"function is written in Lisp, it is made into a command by an "
"@code{interactive} form in the function definition (@pxref{Defining "
"Commands}).  Commands that are functions can also be called from Lisp "
"expressions, just like other functions."
msgstr ""

#. type: table
#: original_texis/functions.texi:125
msgid ""
"Keyboard macros (strings and vectors) are commands also, even though they "
"are not functions.  @xref{Keyboard Macros}.  We say that a symbol is a "
"command if its function cell contains a command (@pxref{Symbol Components}); "
"such a @dfn{named command} can be invoked with @kbd{M-x}."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:126 original_texis/functions.texi:1617
#, no-wrap
msgid "closure"
msgstr ""

#. type: table
#: original_texis/functions.texi:130
msgid ""
"A function object that is much like a lambda expression, except that it also "
"encloses an environment of lexical variable bindings.  @xref{Closures}."
msgstr ""

#. type: item
#: original_texis/functions.texi:131
#, no-wrap
msgid "byte-code function"
msgstr ""

#. type: table
#: original_texis/functions.texi:134
msgid ""
"A function that has been compiled by the byte compiler.  @xref{Closure "
"Type}."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:135 original_texis/functions.texi:136
#, no-wrap
msgid "autoload object"
msgstr ""

#. type: table
#: original_texis/functions.texi:140
msgid ""
"A place-holder for a real function.  If the autoload object is called, Emacs "
"loads the file containing the definition of the real function, and then "
"calls the real function.  @xref{Autoload}."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:144
msgid ""
"You can use the function @code{functionp} to test if an object is a "
"function:"
msgstr ""

#. type: defun
#: original_texis/functions.texi:145
#, no-wrap
msgid "functionp object"
msgstr ""

#. type: defun
#: original_texis/functions.texi:150
msgid ""
"This function returns @code{t} if @var{object} is any kind of function, "
"i.e., can be passed to @code{funcall}.  Note that @code{functionp} returns "
"@code{t} for symbols that are function names, and returns @code{nil} for "
"symbols that are macros or special forms."
msgstr ""

#. type: defun
#: original_texis/functions.texi:155
msgid ""
"If @var{object} is not a function, this function ordinarily returns "
"@code{nil}.  However, the representation of function objects is complicated, "
"and for efficiency reasons in rare cases this function can return @code{t} "
"even when @var{object} is not a function."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:159
msgid ""
"It is also possible to find out how many arguments an arbitrary function "
"expects:"
msgstr ""

#. type: defun
#: original_texis/functions.texi:160
#, no-wrap
msgid "func-arity function"
msgstr ""

#. type: defun
#: original_texis/functions.texi:168
msgid ""
"This function provides information about the argument list of the specified "
"@var{function}.  The returned value is a cons cell of the form "
"@w{@code{(@var{min} . @var{max})}}, where @var{min} is the minimum number of "
"arguments, and @var{max} is either the maximum number of arguments, or the "
"symbol @code{many} for functions with @code{&rest} arguments, or the symbol "
"@code{unevalled} if @var{function} is a special form."
msgstr ""

#. type: defun
#: original_texis/functions.texi:171
msgid ""
"Note that this function might return inaccurate results in some situations, "
"such as the following:"
msgstr ""

#. type: itemize
#: original_texis/functions.texi:176
msgid ""
"Functions defined using @code{apply-partially} (@pxref{Calling Functions, "
"apply-partially})."
msgstr ""

#. type: itemize
#: original_texis/functions.texi:180
msgid ""
"Functions that are advised using @code{advice-add} (@pxref{Advising Named "
"Functions})."
msgstr ""

#. type: itemize
#: original_texis/functions.texi:184
msgid ""
"Functions that determine the argument list dynamically, as part of their "
"code."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:191
msgid ""
"Unlike @code{functionp}, the next functions do @emph{not} treat a symbol as "
"its function definition."
msgstr ""

#. type: defun
#: original_texis/functions.texi:192
#, no-wrap
msgid "subrp object"
msgstr ""

#. type: defun
#: original_texis/functions.texi:195
msgid ""
"This function returns @code{t} if @var{object} is a built-in function (i.e., "
"a Lisp primitive)."
msgstr ""

#. type: group
#: original_texis/functions.texi:200
#, no-wrap
msgid ""
"(subrp 'message)            ; @r{@code{message} is a symbol,}\n"
"     @result{} nil                 ;   @r{not a subr object.}\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:204
#, no-wrap
msgid ""
"(subrp (symbol-function 'message))\n"
"     @result{} t\n"
msgstr ""

#. type: defun
#: original_texis/functions.texi:208
#, no-wrap
msgid "byte-code-function-p object"
msgstr ""

#. type: defun
#: original_texis/functions.texi:211
msgid ""
"This function returns @code{t} if @var{object} is a byte-code function.  For "
"example:"
msgstr ""

#. type: group
#: original_texis/functions.texi:216
#, no-wrap
msgid ""
"(byte-code-function-p (symbol-function 'next-line))\n"
"     @result{} t\n"
msgstr ""

#. type: defun
#: original_texis/functions.texi:220
#, no-wrap
msgid "compiled-function-p object"
msgstr ""

#. type: defun
#: original_texis/functions.texi:228
msgid ""
"This function returns @code{t} if @var{object} is a function object that is "
"not in the form of ELisp source code but something like machine code or byte "
"code instead.  More specifically it returns @code{t} if the function is "
"built-in (a.k.a.@: ``primitive'', @pxref{What Is a Function}), or "
"byte-compiled (@pxref{Byte Compilation}), or natively-compiled "
"(@pxref{Native Compilation}), or a function loaded from a dynamic module "
"(@pxref{Dynamic Modules})."
msgstr ""

#. type: defun
#: original_texis/functions.texi:230
#, no-wrap
msgid "interpreted-function-p object"
msgstr ""

#. type: defun
#: original_texis/functions.texi:232
msgid "This function returns @code{t} if @var{object} is an interpreted function."
msgstr ""

#. type: defun
#: original_texis/functions.texi:234
#, no-wrap
msgid "closurep object"
msgstr ""

#. type: defun
#: original_texis/functions.texi:238
msgid ""
"This function returns @code{t} if @var{object} is a closure, which is a "
"particular kind of function object.  Currently closures are used for all "
"byte-code functions and all interpreted functions."
msgstr ""

#. type: defun
#: original_texis/functions.texi:240
#, no-wrap
msgid "subr-arity subr"
msgstr ""

#. type: defun
#: original_texis/functions.texi:244
msgid ""
"This works like @code{func-arity}, but only for built-in functions and "
"without symbol indirection.  It signals an error for non-built-in "
"functions.  We recommend to use @code{func-arity} instead."
msgstr ""

#. type: defun
#: original_texis/functions.texi:246
#, no-wrap
msgid "cl-functionp object"
msgstr ""

#. type: defun
#: original_texis/functions.texi:249
msgid ""
"This function is like @code{functionp}, except it returns @code{nil} for "
"lists and symbols."
msgstr ""

#. type: findex
#: original_texis/functions.texi:251
#, no-wrap
msgid "subr-primitive-p"
msgstr ""

#. type: defun
#: original_texis/functions.texi:252
#, no-wrap
msgid "primitive-function-p object"
msgstr ""

#. type: defun
#: original_texis/functions.texi:257
msgid ""
"This function returns @code{t} if @var{object} is a built-in primitive "
"written in C (@pxref{Primitive Function Type}).  Note that special forms are "
"explicitly excluded, as they are not functions.  Use @code{subr-primitive-p} "
"if you need to recognize special forms as well."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:266
msgid ""
"A lambda expression is a function object written in Lisp.  Here is an "
"example:"
msgstr ""

#. type: example
#: original_texis/functions.texi:271
#, no-wrap
msgid ""
"(lambda (x)\n"
"  \"Return the hyperbolic cosine of X.\"\n"
"  (* 0.5 (+ (exp x) (exp (- x)))))\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:276
msgid ""
"In Emacs Lisp, such a list is a valid expression which evaluates to a "
"function object."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:283
msgid ""
"A lambda expression, by itself, has no name; it is an @dfn{anonymous "
"function}.  Although lambda expressions can be used this way "
"(@pxref{Anonymous Functions}), they are more commonly associated with "
"symbols to make @dfn{named functions} (@pxref{Function Names}).  Before "
"going into these details, the following subsections describe the components "
"of a lambda expression and what they do."
msgstr ""

#. type: node
#: original_texis/functions.texi:289 original_texis/functions.texi:291
#, no-wrap
msgid "Lambda Components"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:289
msgid "The parts of a lambda expression."
msgstr ""

#. type: node
#: original_texis/functions.texi:289 original_texis/functions.texi:335
#, no-wrap
msgid "Simple Lambda"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:289
msgid "A simple example."
msgstr ""

#. type: node
#: original_texis/functions.texi:289 original_texis/functions.texi:385
#, no-wrap
msgid "Argument List"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:289
msgid "Details and special features of argument lists."
msgstr ""

#. type: node
#: original_texis/functions.texi:289 original_texis/functions.texi:495
#, no-wrap
msgid "Function Documentation"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:289
msgid "How to put documentation in a function."
msgstr ""

#. type: subsection
#: original_texis/functions.texi:292
#, no-wrap
msgid "Components of a Lambda Expression"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:295
msgid "A lambda expression is a list that looks like this:"
msgstr ""

#. type: example
#: original_texis/functions.texi:301
#, no-wrap
msgid ""
"(lambda (@var{arg-variables}@dots{})\n"
"  [@var{documentation-string}]\n"
"  [@var{interactive-declaration}]\n"
"  @var{body-forms}@dots{})\n"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:303
#, no-wrap
msgid "lambda list"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:309
msgid ""
"The first element of a lambda expression is always the symbol "
"@code{lambda}.  This indicates that the list represents a function.  The "
"reason functions are defined to start with @code{lambda} is so that other "
"lists, intended for other uses, will not accidentally be valid as functions."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:316
msgid ""
"The second element is a list of symbols---the argument variable names "
"(@pxref{Argument List}).  This is called the @dfn{lambda list}.  When a Lisp "
"function is called, the argument values are matched up against the variables "
"in the lambda list, which are given local bindings with the values "
"provided.  @xref{Local Variables}."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:320
msgid ""
"The documentation string is a Lisp string object placed within the function "
"definition to describe the function for the Emacs help facilities.  "
"@xref{Function Documentation}."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:328
msgid ""
"The interactive declaration is a list of the form @code{(interactive "
"@var{code-string})}.  This declares how to provide arguments if the function "
"is used interactively.  Functions with this declaration are called "
"@dfn{commands}; they can be called using @kbd{M-x} or bound to a key.  "
"Functions not intended to be called in this way should not have interactive "
"declarations.  @xref{Defining Commands}, for how to write an interactive "
"declaration."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:329
#, no-wrap
msgid "body of function"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:334
msgid ""
"The rest of the elements are the @dfn{body} of the function: the Lisp code "
"to do the work of the function (or, as a Lisp programmer would say, ``a list "
"of Lisp forms to evaluate'').  The value returned by the function is the "
"value returned by the last element of the body."
msgstr ""

#. type: subsection
#: original_texis/functions.texi:336
#, no-wrap
msgid "A Simple Lambda Expression Example"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:339
msgid "Consider the following example:"
msgstr ""

#. type: example
#: original_texis/functions.texi:342
#, no-wrap
msgid "(lambda (a b c) (+ a b c))\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:346
msgid "We can call this function by passing it to @code{funcall}, like this:"
msgstr ""

#. type: group
#: original_texis/functions.texi:351
#, no-wrap
msgid ""
"(funcall (lambda (a b c) (+ a b c))\n"
"         1 2 3)\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:359
msgid ""
"This call evaluates the body of the lambda expression with the variable "
"@code{a} bound to 1, @code{b} bound to 2, and @code{c} bound to 3.  "
"Evaluation of the body adds these three numbers, producing the result 6; "
"therefore, this call to the function returns the value 6."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:362
msgid ""
"Note that the arguments can be the results of other function calls, as in "
"this example:"
msgstr ""

#. type: group
#: original_texis/functions.texi:367
#, no-wrap
msgid ""
"(funcall (lambda (a b c) (+ a b c))\n"
"         1 (* 2 3) (- 5 4))\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:374
msgid ""
"This evaluates the arguments @code{1}, @code{(* 2 3)}, and @code{(- 5 4)} "
"from left to right.  Then it applies the lambda expression to the argument "
"values 1, 6 and 1 to produce the value 8."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:384
msgid ""
"As these examples show, you can use a form with a lambda expression as its "
"@sc{car} to make local variables and give them values.  In the old days of "
"Lisp, this technique was the only way to bind and initialize local "
"variables.  But nowadays, it is clearer to use the special form @code{let} "
"for this purpose (@pxref{Local Variables}).  Lambda expressions are mainly "
"used as anonymous functions for passing as arguments to other functions "
"(@pxref{Anonymous Functions}), or stored as symbol function definitions to "
"produce named functions (@pxref{Function Names})."
msgstr ""

#. type: subsection
#: original_texis/functions.texi:386
#, no-wrap
msgid "Features of Argument Lists"
msgstr ""

#. type: kindex
#: original_texis/functions.texi:387
#, no-wrap
msgid "wrong-number-of-arguments"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:388
#, no-wrap
msgid "argument binding"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:389
#, no-wrap
msgid "binding arguments"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:390
#, no-wrap
msgid "argument lists, features"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:397
msgid ""
"Our simple sample function, @code{(lambda (a b c) (+ a b c))}, specifies "
"three argument variables, so it must be called with three arguments: if you "
"try to call it with only two arguments or four arguments, you get a "
"@code{wrong-number-of-arguments} error (@pxref{Errors})."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:405
msgid ""
"It is often convenient to write a function that allows certain arguments to "
"be omitted.  For example, the function @code{substring} accepts three "
"arguments---a string, the start index and the end index---but the third "
"argument defaults to the @var{length} of the string if you omit it.  It is "
"also convenient for certain functions to accept an indefinite number of "
"arguments, as the functions @code{list} and @code{+} do."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:406
#, no-wrap
msgid "optional arguments"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:407
#, no-wrap
msgid "rest arguments"
msgstr ""

#. type: kindex
#: original_texis/functions.texi:408
#, no-wrap
msgid "&optional"
msgstr ""

#. type: kindex
#: original_texis/functions.texi:409
#, no-wrap
msgid "&rest"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:414
msgid ""
"To specify optional arguments that may be omitted when a function is called, "
"simply include the keyword @code{&optional} before the optional arguments.  "
"To specify a list of zero or more extra arguments, include the keyword "
"@code{&rest} before one final argument."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:416
msgid "Thus, the complete syntax for an argument list is as follows:"
msgstr ""

#. type: group
#: original_texis/functions.texi:422
#, no-wrap
msgid ""
"(@var{required-vars}@dots{}\n"
" @r{[}&optional @r{[}@var{optional-vars}@dots{}@r{]}@r{]}\n"
" @r{[}&rest @var{rest-var}@r{]})\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:428
msgid ""
"The square brackets indicate that the @code{&optional} and @code{&rest} "
"clauses, and the variables that follow them, are optional."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:434
msgid ""
"A call to the function requires one actual argument for each of the "
"@var{required-vars}.  There may be actual arguments for zero or more of the "
"@var{optional-vars}, and there cannot be any actual arguments beyond that "
"unless the lambda list uses @code{&rest}.  In that case, there may be any "
"number of extra actual arguments."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:442
msgid ""
"If actual arguments for the optional and rest variables are omitted, then "
"they always default to @code{nil}.  There is no way for the function to "
"distinguish between an explicit argument of @code{nil} and an omitted "
"argument.  However, the body of the function is free to consider @code{nil} "
"an abbreviation for some other meaningful value.  This is what "
"@code{substring} does; @code{nil} as the third argument to @code{substring} "
"means to use the length of the string supplied."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:443
#, no-wrap
msgid "CL note---default optional arg"
msgstr ""

#. type: quotation
#: original_texis/functions.texi:449
msgid ""
"@b{Common Lisp note:} Common Lisp allows the function to specify what "
"default value to use when an optional argument is omitted; Emacs Lisp always "
"uses @code{nil}.  Emacs Lisp does not support @code{supplied-p} variables "
"that tell you whether an argument was explicitly passed."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:452
msgid "For example, an argument list that looks like this:"
msgstr ""

#. type: example
#: original_texis/functions.texi:455
#, no-wrap
msgid "(a b &optional c d &rest e)\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:469
msgid ""
"binds @code{a} and @code{b} to the first two actual arguments, which are "
"required.  If one or two more arguments are provided, @code{c} and @code{d} "
"are bound to them respectively; any arguments after the first four are "
"collected into a list and @code{e} is bound to that list.  Thus, if there "
"are only two arguments, @code{c}, @code{d} and @code{e} are @code{nil}; if "
"two or three arguments, @code{d} and @code{e} are @code{nil}; if four "
"arguments or fewer, @code{e} is @code{nil}.  Note that exactly five "
"arguments with an explicit @code{nil} argument provided for @code{e} will "
"cause that @code{nil} argument to be passed as a list with one element, "
"@code{(nil)}, as with any other single value for @code{e}."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:478
msgid ""
"There is no way to have required arguments following optional ones---it "
"would not make sense.  To see why this must be so, suppose that @code{c} in "
"the example were optional and @code{d} were required.  Suppose three actual "
"arguments are given; which variable would the third argument be for? Would "
"it be used for the @var{c}, or for @var{d}? One can argue for both "
"possibilities.  Similarly, it makes no sense to have any more arguments "
"(either required or optional)  after a @code{&rest} argument."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:480
msgid "Here are some examples of argument lists and proper calls:"
msgstr ""

#. type: example
#: original_texis/functions.texi:493
#, no-wrap
msgid ""
"(funcall (lambda (n) (1+ n))        ; @r{One required:}\n"
"         1)                         ; @r{requires exactly one argument.}\n"
"     @result{} 2\n"
"(funcall (lambda (n &optional n1)   ; @r{One required and one optional:}\n"
"           (if n1 (+ n n1) (1+ n))) ; @r{1 or 2 arguments.}\n"
"         1 2)\n"
"     @result{} 3\n"
"(funcall (lambda (n &rest ns)       ; @r{One required and one rest:}\n"
"           (+ n (apply '+ ns)))     ; @r{1 or more arguments.}\n"
"         1 2 3 4 5)\n"
"     @result{} 15\n"
msgstr ""

#. type: subsection
#: original_texis/functions.texi:496
#, no-wrap
msgid "Documentation Strings of Functions"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:497
#, no-wrap
msgid "documentation string of function"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:498
#, no-wrap
msgid "function's documentation string"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:506
msgid ""
"A lambda expression may optionally have a @dfn{documentation string} just "
"after the lambda list.  This string does not affect execution of the "
"function; it is a kind of comment, but a systematized comment which actually "
"appears inside the Lisp world and can be used by the Emacs help facilities.  "
"@xref{Documentation}, for how the documentation string is accessed."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:511
msgid ""
"It is a good idea to provide documentation strings for all the functions in "
"your program, even those that are called only from within your program.  "
"Documentation strings are like comments, except that they are easier to "
"access."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:515
msgid ""
"The first line of the documentation string should stand on its own, because "
"@code{apropos} displays just this first line.  It should consist of one or "
"two complete sentences that summarize the function's purpose."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:524
msgid ""
"The start of the documentation string is usually indented in the source "
"file, but since these spaces come before the starting double-quote, they are "
"not part of the string.  Some people make a practice of indenting any "
"additional lines of the string so that the text lines up in the program "
"source.  @emph{That is a mistake.} The indentation of the following lines is "
"inside the string; what looks nice in the source code will look ugly when "
"displayed by the help commands."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:531
msgid ""
"A documentation string must always be followed by at least one Lisp "
"expression; otherwise, it is not a documentation string at all but the "
"single expression of the body and used as the return value.  When there is "
"no meaningful value to return from a function, it is standard practice to "
"return @code{nil} by adding it after the documentation string."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:535
msgid ""
"The last line of the documentation string can specify calling conventions "
"different from the actual function arguments.  Write text like this:"
msgstr ""

#. type: example
#: original_texis/functions.texi:538
#, no-wrap
msgid "\\(fn @var{arglist})\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:546
msgid ""
"following a blank line, at the beginning of the line, with no newline "
"following it inside the documentation string.  (The @samp{\\} is used to "
"avoid confusing the Emacs motion commands.)  The calling convention "
"specified in this way appears in help messages in place of the one derived "
"from the actual arguments of the function."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:550
msgid ""
"This feature is particularly useful for macro definitions, since the "
"arguments written in a macro definition often do not correspond to the way "
"users think of the parts of the macro call."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:558
msgid ""
"Do not use this feature if you want to deprecate the calling convention and "
"favor the one you advertise by the above specification.  Instead, use the "
"@code{advertised-calling-convention} declaration (@pxref{Declare Form}) or "
"@code{set-advertised-calling-convention} (@pxref{Obsolete Functions}), "
"because these two will cause the byte compiler emit a warning message when "
"it compiles Lisp programs which use the deprecated calling convention."
msgstr ""

#. type: ifnottex
#: original_texis/functions.texi:561
msgid "The @code{(fn)} feature is typically used in the following situations:"
msgstr ""

#. type: item
#: original_texis/functions.texi:563
#, no-wrap
msgid ""
"To spell out arguments and their purposes in a macro or a function.  "
"Example:"
msgstr ""

#. type: example
#: original_texis/functions.texi:569
#, no-wrap
msgid ""
"(defmacro lambda (&rest cdr)\n"
"  \"@dots{}\n"
"\\(fn ARGS [DOCSTRING] [INTERACTIVE] BODY)\"@dots{})\n"
msgstr ""

#. type: item
#: original_texis/functions.texi:571
#, no-wrap
msgid "To provide a more detailed description and names of arguments.  Example:"
msgstr ""

#. type: example
#: original_texis/functions.texi:581
#, no-wrap
msgid ""
"(defmacro macroexp--accumulate (var+list &rest body)\n"
"  \"@dots{}\n"
"\\(fn (VAR LIST) BODY@dots{})\"\n"
"  (declare (indent 1))\n"
"  (let ((var (car var+list))\n"
"\t  (list (cadr var+list))\n"
"@dots{})))\n"
msgstr ""

#. type: item
#: original_texis/functions.texi:583
#, no-wrap
msgid "To better explain the purpose of a @code{defalias}.  Example:"
msgstr ""

#. type: example
#: original_texis/functions.texi:589
#, no-wrap
msgid ""
"(defalias 'abbrev-get 'get\n"
"  \"@dots{}\n"
"\\(fn ABBREV PROP)\")\n"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:593
#, no-wrap
msgid "computed documentation string"
msgstr ""

#. type: kindex
#: original_texis/functions.texi:594
#, no-wrap
msgid ":documentation"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:607
msgid ""
"Documentation strings are usually static, but occasionally it can be "
"necessary to generate them dynamically.  In some cases you can do so by "
"writing a macro which generates at compile time the code of the function, "
"including the desired documentation string.  But you can also generate the "
"docstring dynamically by writing @code{(:documentation @var{form})} instead "
"of the documentation string.  This will evaluate @var{form} at run-time when "
"the function is defined and use it as the documentation string@footnote{This "
"only works in code using @code{lexical-binding}.}.  You can also compute the "
"documentation string on the fly when it is requested, by setting the "
"@code{function-documentation} property of the function's symbol to a Lisp "
"form that evaluates to a string."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:609
msgid "For example:"
msgstr ""

#. type: group
#: original_texis/functions.texi:618
#, no-wrap
msgid ""
"(defun adder (x)\n"
"  (lambda (y)\n"
"    (:documentation (format \"Add %S to the argument Y.\" x))\n"
"    (+ x y)))\n"
"(defalias 'adder5 (adder 5))\n"
"(documentation 'adder5)\n"
"    @result{} \"Add 5 to the argument Y.\"\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:628
#, no-wrap
msgid ""
"(put 'adder5 'function-documentation\n"
"     '(concat (documentation (symbol-function 'adder5) 'raw)\n"
"              \"  Consulted at \" (format-time-string \"%H:%M:%S\")))\n"
"(documentation 'adder5)\n"
"    @result{} \"Add 5 to the argument Y.  Consulted at 15:52:13\"\n"
"(documentation 'adder5)\n"
"    @result{} \"Add 5 to the argument Y.  Consulted at 15:52:18\"\n"
msgstr ""

#. type: section
#: original_texis/functions.texi:632
#, no-wrap
msgid "Naming a Function"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:633
#, no-wrap
msgid "function definition"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:634
#, no-wrap
msgid "named function"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:635
#, no-wrap
msgid "function name"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:642
msgid ""
"A symbol can serve as the name of a function.  This happens when the "
"symbol's @dfn{function cell} (@pxref{Symbol Components}) contains a function "
"object (e.g., a lambda expression).  Then the symbol itself becomes a valid, "
"callable function, equivalent to the function object in its function cell."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:649
msgid ""
"The contents of the function cell are also called the symbol's @dfn{function "
"definition}.  The procedure of using a symbol's function definition in place "
"of the symbol is called @dfn{symbol function indirection}; see @ref{Function "
"Indirection}.  If you have not given a symbol a function definition, its "
"function cell is said to be @dfn{void}, and it cannot be used as a function."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:655
msgid ""
"In practice, nearly all functions have names, and are referred to by their "
"names.  You can create a named Lisp function by defining a lambda expression "
"and putting it in a function cell (@pxref{Function Cells}).  However, it is "
"more common to use the @code{defun} macro, described in the next section."
msgstr ""

#. type: ifnottex
#: original_texis/functions.texi:657
msgid "@xref{Defining Functions}."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:665
msgid ""
"We give functions names because it is convenient to refer to them by their "
"names in Lisp expressions.  Also, a named Lisp function can easily refer to "
"itself---it can be recursive.  Furthermore, primitives can only be referred "
"to textually by their names, since primitive function objects "
"(@pxref{Primitive Function Type}) have no read syntax."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:671
msgid ""
"A function need not have a unique name.  A given function object "
"@emph{usually} appears in the function cell of only one symbol, but this is "
"just a convention.  It is easy to store it in several symbols using "
"@code{fset}; then each of the symbols is a valid name for the same function."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:676
msgid ""
"Note that a symbol used as a function name may also be used as a variable; "
"these two uses of a symbol are independent and do not conflict.  (This is "
"not the case in some dialects of Lisp, like Scheme.)"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:685
msgid ""
"By convention, if a function's symbol consists of two names separated by "
"@samp{--}, the function is intended for internal use and the first part "
"names the file defining the function.  For example, a function named "
"@code{vc-git--rev-parse} is an internal function defined in "
"@file{vc-git.el}.  Internal-use functions written in C have names ending in "
"@samp{-internal}, e.g., @code{bury-buffer-internal}.  Emacs code contributed "
"before 2018 may follow other internal-use naming conventions, which are "
"being phased out."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:688
#, no-wrap
msgid "defining a function"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:694
msgid ""
"We usually give a name to a function when it is first created.  This is "
"called @dfn{defining a function}, and we usually do it with the @code{defun} "
"macro.  This section also describes other ways to define a function."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:695
#, no-wrap
msgid "defun name args [doc] [declare] [interactive] body@dots{}"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:700
msgid ""
"@code{defun} is the usual way to define new Lisp functions.  It defines the "
"symbol @var{name} as a function with argument list @var{args} "
"(@pxref{Argument List}) and body forms given by @var{body}.  Neither "
"@var{name} nor @var{args} should be quoted."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:707
msgid ""
"@var{doc}, if present, should be a string specifying the function's "
"documentation string (@pxref{Function Documentation}).  @var{declare}, if "
"present, should be a @code{declare} form specifying function metadata "
"(@pxref{Declare Form}).  @var{interactive}, if present, should be an "
"@code{interactive} form specifying how the function is to be called "
"interactively (@pxref{Interactive Call})."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:709
msgid "The return value of @code{defun} is undefined."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:711
msgid "Here are some examples:"
msgstr ""

#. type: group
#: original_texis/functions.texi:717
#, no-wrap
msgid ""
"(defun foo () 5)\n"
"(foo)\n"
"     @result{} 5\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:724
#, no-wrap
msgid ""
"(defun bar (a &optional b &rest c)\n"
"    (list a b c))\n"
"(bar 1 2 3 4 5)\n"
"     @result{} (1 2 (3 4 5))\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:728
#, no-wrap
msgid ""
"(bar 1)\n"
"     @result{} (1 nil nil)\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:732
#, no-wrap
msgid ""
"(bar)\n"
"@error{} Wrong number of arguments.\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:742
#, no-wrap
msgid ""
"(defun capitalize-backwards ()\n"
"  \"Upcase the last letter of the word at point.\"\n"
"  (interactive)\n"
"  (backward-word 1)\n"
"  (forward-word 1)\n"
"  (backward-char 1)\n"
"  (capitalize-word 1))\n"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:745
#, no-wrap
msgid "defining functions dynamically"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:758
msgid ""
"Most Emacs functions are part of the source code of Lisp programs, and are "
"defined when the Emacs Lisp reader reads the program source before executing "
"it.  However, you can also define functions dynamically at run time, e.g., "
"by generating @code{defun} calls when your program's code is executed.  If "
"you do this, be aware that Emacs's Help commands, such as @kbd{C-h f}, which "
"present in the @file{*Help*} buffer a button to jump to the function's "
"definition, might be unable to find the source code because generating a "
"function dynamically usually looks very different from the usual static "
"calls to @code{defun}.  You can make the job of finding the code which "
"generates such functions easier by using the @code{definition-name} "
"property, @pxref{Standard Properties}."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:759
#, no-wrap
msgid "override existing functions"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:760
#, no-wrap
msgid "redefine existing functions"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:767
msgid ""
"Be careful not to redefine existing functions unintentionally.  @code{defun} "
"redefines even primitive functions such as @code{car} without any hesitation "
"or notification.  Emacs does not prevent you from doing this, because "
"redefining a function is sometimes done deliberately, and there is no way to "
"distinguish deliberate redefinition from unintentional redefinition."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:769
#, no-wrap
msgid "function aliases"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:770
#, no-wrap
msgid "alias, for functions"
msgstr ""

#. type: defun
#: original_texis/functions.texi:771
#, no-wrap
msgid "defalias name definition &optional doc"
msgstr ""

#. type: anchor{#1}
#: original_texis/functions.texi:778
msgid "Definition of defalias"
msgstr ""

#. type: defun
#: original_texis/functions.texi:778
msgid ""
"This function defines the symbol @var{name} as a function, with definition "
"@var{definition}.  @var{definition} can be any valid Lisp function or macro, "
"or a special form (@pxref{Special Forms}), or a keymap (@pxref{Keymaps}), or "
"a vector or string (a keyboard macro).  The return value of @code{defalias} "
"is @emph{undefined}."
msgstr ""

#. type: defun
#: original_texis/functions.texi:782
msgid ""
"If @var{doc} is non-@code{nil}, it becomes the function documentation of "
"@var{name}.  Otherwise, any documentation provided by @var{definition} is "
"used."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:783
#, no-wrap
msgid "defalias-fset-function property"
msgstr ""

#. type: defun
#: original_texis/functions.texi:787
msgid ""
"Internally, @code{defalias} normally uses @code{fset} to set the "
"definition.  If @var{name} has a @code{defalias-fset-function} property, "
"however, the associated value is used as a function to call in place of "
"@code{fset}."
msgstr ""

#. type: defun
#: original_texis/functions.texi:793
msgid ""
"The proper place to use @code{defalias} is where a specific function or "
"macro name is being defined---especially where that name appears explicitly "
"in the source file being loaded.  This is because @code{defalias} records "
"which file defined the function, just like @code{defun} (@pxref{Unloading})."
msgstr ""

#. type: defun
#: original_texis/functions.texi:797
msgid ""
"By contrast, in programs that manipulate function definitions for other "
"purposes, it is better to use @code{fset}, which does not keep such "
"records.  @xref{Function Cells}."
msgstr ""

#. type: defun
#: original_texis/functions.texi:800 original_texis/functions.texi:1604
msgid ""
"If the resulting function definition chain would be circular, then Emacs "
"will signal a @code{cyclic-function-indirection} error."
msgstr ""

#. type: defun
#: original_texis/functions.texi:802
#, no-wrap
msgid "function-alias-p object"
msgstr ""

#. type: defun
#: original_texis/functions.texi:807
msgid ""
"Checks whether @var{object} is a function alias.  If it is, it returns a "
"list of symbols representing the function alias chain, else @code{nil}.  For "
"instance, if @code{a} is an alias for @code{b}, and @code{b} is an alias for "
"@code{c}:"
msgstr ""

#. type: example
#: original_texis/functions.texi:811
#, no-wrap
msgid ""
"(function-alias-p 'a)\n"
"    @result{} (b c)\n"
msgstr ""

#. type: defun
#: original_texis/functions.texi:815
msgid ""
"There is also a second, optional argument that is obsolete and has no "
"effect."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:827
msgid ""
"You cannot create a new primitive function with @code{defun} or "
"@code{defalias}, but you can use them to change the function definition of "
"any symbol, even one such as @code{car} or @code{x-popup-menu} whose normal "
"definition is a primitive.  However, this is risky: for instance, it is next "
"to impossible to redefine @code{car} without breaking Lisp completely.  "
"Redefining an obscure function such as @code{x-popup-menu} is less "
"dangerous, but it still may not work as you expect.  If there are calls to "
"the primitive from C code, they call the primitive's C definition directly, "
"so changing the symbol's definition will have no effect on them."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:831
msgid ""
"See also @code{defsubst}, which defines a function like @code{defun} and "
"tells the Lisp compiler to perform inline expansion on it.  @xref{Inline "
"Functions}."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:834
msgid "To undefine a function name, use @code{fmakunbound}.  @xref{Function Cells}."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:837
#, no-wrap
msgid "function invocation"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:838
#, no-wrap
msgid "calling a function"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:843
msgid ""
"Defining functions is only half the battle.  Functions don't do anything "
"until you @dfn{call} them, i.e., tell them to run.  Calling a function is "
"also known as @dfn{invocation}."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:848
msgid ""
"The most common way of invoking a function is by evaluating a list.  For "
"example, evaluating the list @code{(concat \"a\" \"b\")} calls the function "
"@code{concat} with arguments @code{\"a\"} and @code{\"b\"}.  "
"@xref{Evaluation}, for a description of evaluation."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:855
msgid ""
"When you write a list as an expression in your program, you specify which "
"function to call, and how many arguments to give it, in the text of the "
"program.  Usually that's just what you want.  Occasionally you need to "
"compute at run time which function to call.  To do that, use the function "
"@code{funcall}.  When you also need to determine at run time how many "
"arguments to pass, use @code{apply}."
msgstr ""

#. type: defun
#: original_texis/functions.texi:856
#, no-wrap
msgid "funcall function &rest arguments"
msgstr ""

#. type: defun
#: original_texis/functions.texi:859
msgid ""
"@code{funcall} calls @var{function} with @var{arguments}, and returns "
"whatever @var{function} returns."
msgstr ""

#. type: defun
#: original_texis/functions.texi:869
msgid ""
"Since @code{funcall} is a function, all of its arguments, including "
"@var{function}, are evaluated before @code{funcall} is called.  This means "
"that you can use any expression to obtain the function to be called.  It "
"also means that @code{funcall} does not see the expressions you write for "
"the @var{arguments}, only their values.  These values are @emph{not} "
"evaluated a second time in the act of calling @var{function}; the operation "
"of @code{funcall} is like the normal procedure for calling a function, once "
"its arguments have already been evaluated."
msgstr ""

#. type: defun
#: original_texis/functions.texi:875
msgid ""
"The argument @var{function} must be either a Lisp function or a primitive "
"function.  Special forms and macros are not allowed, because they make sense "
"only when given the unevaluated argument expressions.  @code{funcall} cannot "
"provide these because, as we saw above, it never knows them in the first "
"place."
msgstr ""

#. type: defun
#: original_texis/functions.texi:879
msgid ""
"If you need to use @code{funcall} to call a command and make it behave as if "
"invoked interactively, use @code{funcall-interactively} (@pxref{Interactive "
"Call})."
msgstr ""

#. type: group
#: original_texis/functions.texi:884 original_texis/functions.texi:924
#, no-wrap
msgid ""
"(setq f 'list)\n"
"     @result{} list\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:888
#, no-wrap
msgid ""
"(funcall f 'x 'y 'z)\n"
"     @result{} (x y z)\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:892
#, no-wrap
msgid ""
"(funcall f 'x 'y '(z))\n"
"     @result{} (x y (z))\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:896
#, no-wrap
msgid ""
"(funcall 'and t nil)\n"
"@error{} Invalid function: #<subr and>\n"
msgstr ""

#. type: defun
#: original_texis/functions.texi:900
msgid "Compare these examples with the examples of @code{apply}."
msgstr ""

#. type: defun
#: original_texis/functions.texi:902
#, no-wrap
msgid "apply function &rest arguments"
msgstr ""

#. type: defun
#: original_texis/functions.texi:909
msgid ""
"@code{apply} calls @var{function} with @var{arguments}, just like "
"@code{funcall} but with one difference: the last of @var{arguments} is a "
"list of objects, which are passed to @var{function} as separate arguments, "
"rather than a single list.  We say that @code{apply} @dfn{spreads} this list "
"so that each individual element becomes an argument."
msgstr ""

#. type: defun
#: original_texis/functions.texi:914
msgid ""
"@code{apply} with a single argument is special: the first element of the "
"argument, which must be a non-empty list, is called as a function with the "
"remaining elements as individual arguments.  Passing two or more arguments "
"will be faster."
msgstr ""

#. type: defun
#: original_texis/functions.texi:919
msgid ""
"@code{apply} returns the result of calling @var{function}.  As with "
"@code{funcall}, @var{function} must either be a Lisp function or a primitive "
"function; special forms and macros do not make sense in @code{apply}."
msgstr ""

#. type: group
#: original_texis/functions.texi:928
#, no-wrap
msgid ""
"(apply f 'x 'y 'z)\n"
"@error{} Wrong type argument: listp, z\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:932
#, no-wrap
msgid ""
"(apply '+ 1 2 '(3 4))\n"
"     @result{} 10\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:936
#, no-wrap
msgid ""
"(apply '+ '(1 2 3 4))\n"
"     @result{} 10\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:941
#, no-wrap
msgid ""
"(apply 'append '((a b c) nil (x y z) nil))\n"
"     @result{} (a b c x y z)\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:946
#, no-wrap
msgid ""
"(apply '(+ 3 4))\n"
"     @result{} 7\n"
msgstr ""

#. type: defun
#: original_texis/functions.texi:951
msgid ""
"For an interesting example of using @code{apply}, see @ref{Definition of "
"mapcar}."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:953
#, no-wrap
msgid "partial application of functions"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:954
#, no-wrap
msgid "currying"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:966
msgid ""
"Sometimes it is useful to fix some of the function's arguments at certain "
"values, and leave the rest of arguments for when the function is actually "
"called.  The act of fixing some of the function's arguments is called "
"@dfn{partial application} of the function@footnote{ This is related to, but "
"different from @dfn{currying}, which transforms a function that takes "
"multiple arguments in such a way that it can be called as a chain of "
"functions, each one with a single argument.}.  The result is a new function "
"that accepts the rest of arguments and calls the original function with all "
"the arguments combined."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:968
msgid "Here's how to do partial application in Emacs Lisp:"
msgstr ""

#. type: defun
#: original_texis/functions.texi:969
#, no-wrap
msgid "apply-partially func &rest args"
msgstr ""

#. type: defun
#: original_texis/functions.texi:981
msgid ""
"This function returns a new function which, when called, will call "
"@var{func} with the list of arguments composed from @var{args} and "
"additional arguments specified at the time of the call.  If @var{func} "
"accepts @var{n} arguments, then a call to @code{apply-partially} with "
"@w{@code{@var{m} <= @var{n}}} arguments will produce a new function of "
"@w{@code{@var{n} - @var{m}}} arguments@footnote{ If the number of arguments "
"that @var{func} can accept is unlimited, then the new function will also "
"accept an unlimited number of arguments, so in that case "
"@code{apply-partially} doesn't reduce the number of arguments that the new "
"function could accept.  }."
msgstr ""

#. type: defun
#: original_texis/functions.texi:988
msgid ""
"Here's how we could define the built-in function @code{1+}, if it didn't "
"exist, using @code{apply-partially} and @code{+}, another built-in "
"function@footnote{ Note that unlike the built-in function, this version "
"accepts any number of arguments.  }:"
msgstr ""

#. type: group
#: original_texis/functions.texi:993
#, no-wrap
msgid ""
"(defalias '1+ (apply-partially '+ 1)\n"
"  \"Increment argument by one.\")\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:997
#, no-wrap
msgid ""
"(1+ 10)\n"
"     @result{} 11\n"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:1001
#, no-wrap
msgid "functionals"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1006
msgid ""
"It is common for Lisp functions to accept functions as arguments or find "
"them in data structures (especially in hook variables and property lists) "
"and call them using @code{funcall} or @code{apply}.  Functions that accept "
"function arguments are often called @dfn{functionals}."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1010
msgid ""
"Sometimes, when you call a functional, it is useful to supply a no-op "
"function as the argument.  Here are three different kinds of no-op "
"functions:"
msgstr ""

#. type: defun
#: original_texis/functions.texi:1011
#, no-wrap
msgid "identity argument"
msgstr ""

#. type: defun
#: original_texis/functions.texi:1013
msgid "This function returns @var{argument} and has no side effects."
msgstr ""

#. type: defun
#: original_texis/functions.texi:1015
#, no-wrap
msgid "ignore &rest arguments"
msgstr ""

#. type: defun
#: original_texis/functions.texi:1017
msgid "This function ignores any @var{arguments} and returns @code{nil}."
msgstr ""

#. type: defun
#: original_texis/functions.texi:1019
#, no-wrap
msgid "always &rest arguments"
msgstr ""

#. type: defun
#: original_texis/functions.texi:1021
msgid "This function ignores any @var{arguments} and returns @code{t}."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1027
msgid ""
"Some functions are user-visible @dfn{commands}, which can be called "
"interactively (usually by a key sequence).  It is possible to invoke such a "
"command exactly as though it was called interactively, by using the "
"@code{call-interactively} function.  @xref{Interactive Call}."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:1030
#, no-wrap
msgid "mapping functions"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1040
msgid ""
"A @dfn{mapping function} applies a given function (@emph{not} a special form "
"or macro) to each element of a list or other collection.  Emacs Lisp has "
"several such functions; this section describes @code{mapcar}, @code{mapc}, "
"@code{mapconcat}, and @code{mapcan}, which map over a list.  "
"@xref{Definition of mapatoms}, for the function @code{mapatoms} which maps "
"over the symbols in an obarray.  @xref{Definition of maphash}, for the "
"function @code{maphash} which maps over key/value associations in a hash "
"table."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1045
msgid ""
"These mapping functions do not allow char-tables because a char-table is a "
"sparse array whose nominal range of indices is very large.  To map over a "
"char-table in a way that deals properly with its sparse nature, use the "
"function @code{map-char-table} (@pxref{Char-Tables})."
msgstr ""

#. type: defun
#: original_texis/functions.texi:1046
#, no-wrap
msgid "mapcar function sequence"
msgstr ""

#. type: anchor{#1}
#: original_texis/functions.texi:1050
msgid "Definition of mapcar"
msgstr ""

#. type: defun
#: original_texis/functions.texi:1050
msgid ""
"@code{mapcar} applies @var{function} to each element of @var{sequence} in "
"turn, and returns a list of the results."
msgstr ""

#. type: defun
#: original_texis/functions.texi:1055
msgid ""
"The argument @var{sequence} can be any kind of sequence except a char-table; "
"that is, a list, a vector, a bool-vector, or a string.  The result is always "
"a list.  The length of the result is the same as the length of "
"@var{sequence}.  For example:"
msgstr ""

#. type: group
#: original_texis/functions.texi:1064
#, no-wrap
msgid ""
"(mapcar #'car '((a b) (c d) (e f)))\n"
"     @result{} (a c e)\n"
"(mapcar #'1+ [1 2 3])\n"
"     @result{} (2 3 4)\n"
"(mapcar #'string \"abc\")\n"
"     @result{} (\"a\" \"b\" \"c\")\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:1069
#, no-wrap
msgid ""
";; @r{Call each function in @code{my-hooks}.}\n"
"(mapcar 'funcall my-hooks)\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:1082
#, no-wrap
msgid ""
"(defun mapcar* (function &rest args)\n"
"  \"Apply FUNCTION to successive cars of all ARGS.\n"
"Return the list of results.\"\n"
"  ;; @r{If no list is exhausted,}\n"
"  (if (not (memq nil args))\n"
"      ;; @r{apply function to @sc{car}s.}\n"
"      (cons (apply function (mapcar #'car args))\n"
"            (apply #'mapcar* function\n"
"                   ;; @r{Recurse for rest of elements.}\n"
"                   (mapcar #'cdr args)))))\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:1087
#, no-wrap
msgid ""
"(mapcar* #'cons '(a b c) '(1 2 3 4))\n"
"     @result{} ((a . 1) (b . 2) (c . 3))\n"
msgstr ""

#. type: defun
#: original_texis/functions.texi:1091
#, no-wrap
msgid "mapcan function sequence"
msgstr ""

#. type: defun
#: original_texis/functions.texi:1098
msgid ""
"This function applies @var{function} to each element of @var{sequence}, like "
"@code{mapcar}, but instead of collecting the results into a list, it returns "
"a single list with all the elements of the results (which must be lists), by "
"altering the results (using @code{nconc}; @pxref{Rearrangement}).  Like with "
"@code{mapcar}, @var{sequence} can be of any type except a char-table."
msgstr ""

#. type: group
#: original_texis/functions.texi:1107
#, no-wrap
msgid ""
";; @r{Contrast this:}\n"
"(mapcar #'list '(a b c d))\n"
"     @result{} ((a) (b) (c) (d))\n"
";; @r{with this:}\n"
"(mapcan #'list '(a b c d))\n"
"     @result{} (a b c d)\n"
msgstr ""

#. type: defun
#: original_texis/functions.texi:1111
#, no-wrap
msgid "mapc function sequence"
msgstr ""

#. type: defun
#: original_texis/functions.texi:1115
msgid ""
"@code{mapc} is like @code{mapcar} except that @var{function} is used for "
"side-effects only---the values it returns are ignored, not collected into a "
"list.  @code{mapc} always returns @var{sequence}."
msgstr ""

#. type: defun
#: original_texis/functions.texi:1117
#, no-wrap
msgid "mapconcat function sequence &optional separator"
msgstr ""

#. type: defun
#: original_texis/functions.texi:1125
msgid ""
"@code{mapconcat} applies @var{function} to each element of @var{sequence}; "
"the results, which must be sequences of characters (strings, vectors, or "
"lists), are concatenated into a single string return value.  Between each "
"pair of result sequences, @code{mapconcat} inserts the characters from "
"@var{separator}, which also must be a string, or a vector or list of "
"characters; a @code{nil} value is treated as the empty string.  "
"@xref{Sequences Arrays Vectors}."
msgstr ""

#. type: defun
#: original_texis/functions.texi:1131
msgid ""
"The argument @var{function} must be a function that can take one argument "
"and returns a sequence of characters: a string, a vector, or a list.  The "
"argument @var{sequence} can be any kind of sequence except a char-table; "
"that is, a list, a vector, a bool-vector, or a string."
msgstr ""

#. type: group
#: original_texis/functions.texi:1138
#, no-wrap
msgid ""
"(mapconcat #'symbol-name\n"
"           '(The cat in the hat)\n"
"           \" \")\n"
"     @result{} \"The cat in the hat\"\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:1144
#, no-wrap
msgid ""
"(mapconcat (lambda (x) (format \"%c\" (1+ x)))\n"
"           \"HAL-8000\")\n"
"     @result{} \"IBM.9111\"\n"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:1150
#, no-wrap
msgid "anonymous function"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1161
msgid ""
"Although functions are usually defined with @code{defun} and given names at "
"the same time, it is sometimes convenient to use an explicit lambda "
"expression---an @dfn{anonymous function}.  Anonymous functions are valid "
"wherever function names are.  They are often assigned as variable values, or "
"as arguments to functions; for instance, you might pass one as the "
"@var{function} argument to @code{mapcar}, which applies that function to "
"each element of a list (@pxref{Mapping Functions}).  @xref{describe-symbols "
"example}, for a realistic example of this."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1165
msgid ""
"When defining a lambda expression that is to be used as an anonymous "
"function, you should use the @code{lambda} macro, or the @code{function} "
"special form, or the @code{#'} read syntax:"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1166
#, no-wrap
msgid "lambda args [doc] [interactive] body@dots{}"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1170
msgid ""
"This macro returns an anonymous function with argument list @var{args}, "
"documentation string @var{doc} (if any), interactive spec @var{interactive} "
"(if any), and body forms given by @var{body}."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1174
msgid ""
"For example, this macro makes @code{lambda} forms almost self-quoting: "
"evaluating a form whose @sc{car} is @code{lambda} yields a value that is "
"almost like the form itself:"
msgstr ""

#. type: example
#: original_texis/functions.texi:1178
#, no-wrap
msgid ""
"(lambda (x) (* x x))\n"
"     @result{} #f(lambda (x) :dynbind (* x x))\n"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1183
msgid ""
"When evaluating under lexical binding the result is a similar closure "
"object, where the @code{:dynbind} marker is replaced by the captured "
"variables (@pxref{Closures})."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1187
msgid ""
"The @code{lambda} form has one other effect: it tells the Emacs evaluator "
"and byte-compiler that its argument is a function, by using @code{function} "
"as a subroutine (see below)."
msgstr ""

#. type: defspec
#: original_texis/functions.texi:1189
#, no-wrap
msgid "function function-object"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:1190
#, no-wrap
msgid "function quoting"
msgstr ""

#. type: defspec
#: original_texis/functions.texi:1197
msgid ""
"This special form returns the function value of the @var{function-object}.  "
"In many ways, it is similar to @code{quote} (@pxref{Quoting}).  But unlike "
"@code{quote}, it also serves as a note to the Emacs evaluator and "
"byte-compiler that @var{function-object} is intended to be used as a "
"function.  Assuming @var{function-object} is a valid lambda expression, this "
"has two effects:"
msgstr ""

#. type: itemize
#: original_texis/functions.texi:1202
msgid ""
"When the code is byte-compiled, @var{function-object} is compiled into a "
"byte-code function object (@pxref{Byte Compilation})."
msgstr ""

#. type: itemize
#: original_texis/functions.texi:1206
msgid ""
"When lexical binding is enabled, @var{function-object} is converted into a "
"closure.  @xref{Closures}."
msgstr ""

#. type: defspec
#: original_texis/functions.texi:1211
msgid ""
"When @var{function-object} is a symbol and the code is byte compiled, the "
"byte-compiler will warn if that function is not defined or might not be "
"known at run time."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:1213
#, no-wrap
msgid "@samp{#'} syntax"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1216
msgid ""
"The read syntax @code{#'} is a short-hand for using @code{function}.  The "
"following forms are all equivalent:"
msgstr ""

#. type: example
#: original_texis/functions.texi:1221
#, no-wrap
msgid ""
"(lambda (x) (* x x))\n"
"(function (lambda (x) (* x x)))\n"
"#'(lambda (x) (* x x))\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1227
msgid ""
"In the following example, we define a @code{change-property} function that "
"takes a function as its third argument, followed by a @code{double-property} "
"function that makes use of @code{change-property} by passing it an anonymous "
"function:"
msgstr ""

#. type: group
#: original_texis/functions.texi:1233
#, no-wrap
msgid ""
"(defun change-property (symbol prop function)\n"
"  (let ((value (get symbol prop)))\n"
"    (put symbol prop (funcall function value))))\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:1238
#, no-wrap
msgid ""
"(defun double-property (symbol prop)\n"
"  (change-property symbol prop (lambda (x) (* 2 x))))\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1243
msgid "Note that we do not quote the @code{lambda} form."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1247
msgid ""
"If you compile the above code, the anonymous function is also compiled.  "
"This would not happen if, say, you had constructed the anonymous function by "
"quoting it as a list:"
msgstr ""

#. type: group
#: original_texis/functions.texi:1253
#, no-wrap
msgid ""
"(defun double-property (symbol prop)\n"
"  (change-property symbol prop '(lambda (x) (* 2 x))))\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1261
msgid ""
"In that case, the anonymous function is kept as a lambda expression in the "
"compiled code.  The byte-compiler cannot assume this list is a function, "
"even though it looks like one, since it does not know that "
"@code{change-property} intends to use it as a function."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:1264
#, no-wrap
msgid "generic functions"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:1265
#, no-wrap
msgid "polymorphism"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1275
msgid ""
"Functions defined using @code{defun} have a hard-coded set of assumptions "
"about the types and expected values of their arguments.  For example, a "
"function that was designed to handle values of its argument that are either "
"numbers or lists of numbers will fail or signal an error if called with a "
"value of any other type, such as a vector or a string.  This happens because "
"the implementation of the function is not prepared to deal with types other "
"than those assumed during the design."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1281
msgid ""
"By contrast, object-oriented programs use @dfn{polymorphic functions}: a set "
"of specialized functions having the same name, each one of which was written "
"for a certain specific set of argument types.  Which of the functions is "
"actually called is decided at run time based on the types of the actual "
"arguments."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:1282
#, no-wrap
msgid "CLOS"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1289
msgid ""
"Emacs provides support for polymorphism.  Like other Lisp environments, "
"notably Common Lisp and its Common Lisp Object System (@acronym{CLOS}), this "
"support is based on @dfn{generic functions}.  The Emacs generic functions "
"closely follow @acronym{CLOS}, including use of similar names, so if you "
"have experience with @acronym{CLOS}, the rest of this section will sound "
"very familiar."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1300
msgid ""
"A generic function specifies an abstract operation, by defining its name and "
"list of arguments, but (usually) no implementation.  The actual "
"implementation for several specific classes of arguments is provided by "
"@dfn{methods}, which should be defined separately.  Each method that "
"implements a generic function has the same name as the generic function, but "
"the method's definition indicates what kinds of arguments it can handle by "
"@dfn{specializing} the arguments defined by the generic function.  These "
"@dfn{argument specializers} can be more or less specific; for example, a "
"@code{string} type is more specific than a more general type, such as "
"@code{sequence}."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1304
msgid ""
"Note that, unlike in message-based OO languages, such as C@t{++} and Simula, "
"methods that implement generic functions don't belong to a class, they "
"belong to the generic function they implement."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1312
msgid ""
"When a generic function is invoked, it selects the applicable methods by "
"comparing the actual arguments passed by the caller with the argument "
"specializers of each method.  A method is applicable if the actual arguments "
"of the call are compatible with the method's specializers.  If more than one "
"method is applicable, they are combined using certain rules, described "
"below, and the combination then handles the call."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1313
#, no-wrap
msgid ""
"cl-defgeneric name arguments [documentation] [options-and-methods@dots{}] "
"&rest body"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1320
msgid ""
"This macro defines a generic function with the specified @var{name} and "
"@var{arguments}.  If @var{body} is present, it provides the default "
"implementation.  If @var{documentation} is present (it should always be), it "
"specifies the documentation string for the generic function, in the form "
"@code{(:documentation @var{docstring})}.  The optional "
"@var{options-and-methods} can be one of the following forms:"
msgstr ""

#. type: item
#: original_texis/functions.texi:1322
#, no-wrap
msgid "(declare @var{declarations})"
msgstr ""

#. type: table
#: original_texis/functions.texi:1324
msgid "A declare form, as described in @ref{Declare Form}."
msgstr ""

#. type: item
#: original_texis/functions.texi:1324
#, no-wrap
msgid "(:argument-precedence-order &rest @var{args})"
msgstr ""

#. type: table
#: original_texis/functions.texi:1331
msgid ""
"This form affects the sorting order for combining applicable methods.  "
"Normally, when two methods are compared during combination, method arguments "
"are examined left to right, and the first method whose argument specializer "
"is more specific will come before the other one.  The order defined by this "
"form overrides that, and the arguments are examined according to their order "
"in this form, and not left to right."
msgstr ""

#. type: item
#: original_texis/functions.texi:1331
#, no-wrap
msgid "(:method [@var{qualifiers}@dots{}] args &rest body)"
msgstr ""

#. type: table
#: original_texis/functions.texi:1333
msgid "This form defines a method like @code{cl-defmethod} does."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1336
#, no-wrap
msgid ""
"cl-defmethod name [extra] [qualifier] arguments [&context (expr "
"spec)@dots{}] &rest [docstring] body"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1346
msgid ""
"This macro defines a particular implementation for the generic function "
"called @var{name}.  The implementation code is given by @var{body}.  If "
"present, @var{docstring} is the documentation string for the method.  The "
"@var{arguments} list, which must be identical in all the methods that "
"implement a generic function, and must match the argument list of that "
"function, provides argument specializers of the form @code{(@var{arg} "
"@var{spec})}, where @var{arg} is the argument name as specified in the "
"@code{cl-defgeneric} call, and @var{spec} is one of the following "
"specializer forms:"
msgstr ""

#. type: var{#1}
#: original_texis/functions.texi:1348
#, no-wrap
msgid "type"
msgstr ""

#. type: table
#: original_texis/functions.texi:1351
msgid ""
"This specializer requires the argument to be of the given @var{type}, one of "
"the types from the type hierarchy described below."
msgstr ""

#. type: item
#: original_texis/functions.texi:1351
#, no-wrap
msgid "(eql @var{object})"
msgstr ""

#. type: table
#: original_texis/functions.texi:1354
msgid ""
"This specializer requires the argument be @code{eql} to the given "
"@var{object}."
msgstr ""

#. type: item
#: original_texis/functions.texi:1354
#, no-wrap
msgid "(head @var{object})"
msgstr ""

#. type: table
#: original_texis/functions.texi:1357
msgid ""
"The argument must be a cons cell whose @code{car} is @code{eql} to "
"@var{object}."
msgstr ""

#. type: var{#1}
#: original_texis/functions.texi:1357
#, no-wrap
msgid "struct-type"
msgstr ""

#. type: table
#: original_texis/functions.texi:1361
msgid ""
"The argument must be an instance of a class named @var{struct-type} defined "
"with @code{cl-defstruct} (@pxref{Structures,,, cl, Common Lisp Extensions "
"for GNU Emacs Lisp}), or of one of its child classes."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1377
msgid ""
"Method definitions can make use of a new argument-list keyword, "
"@code{&context}, which introduces extra specializers that test the "
"environment at the time the method is run.  This keyword should appear after "
"the list of required arguments, but before any @code{&rest} or "
"@code{&optional} keywords.  The @code{&context} specializers look much like "
"regular argument specializers---(@var{expr} @var{spec})---except that "
"@var{expr} is an expression to be evaluated in the current context, and the "
"@var{spec} is a value to compare against.  For example, @code{&context "
"(overwrite-mode (eql t))} will make the method applicable only when "
"@code{overwrite-mode} is turned on.  The @code{&context} keyword can be "
"followed by any number of context specializers.  Because the context "
"specializers are not part of the generic function's argument signature, they "
"may be omitted in methods that don't require them."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1383
msgid ""
"The type specializer, @code{(@var{arg} @var{type})}, can specify one of the "
"@dfn{system types} in the following list.  When a parent type is specified, "
"an argument whose type is any of its more specific child types, as well as "
"grand-children, grand-grand-children, etc. will also be compatible."
msgstr ""

#. type: item
#: original_texis/functions.texi:1385
#, no-wrap
msgid "integer"
msgstr ""

#. type: table
#: original_texis/functions.texi:1387 original_texis/functions.texi:1403
msgid "Parent type: @code{number}."
msgstr ""

#. type: item
#: original_texis/functions.texi:1387
#, no-wrap
msgid "number"
msgstr ""

#. type: item
#: original_texis/functions.texi:1388
#, no-wrap
msgid "null"
msgstr ""

#. type: table
#: original_texis/functions.texi:1390
msgid "Parent type: @code{symbol}"
msgstr ""

#. type: item
#: original_texis/functions.texi:1390
#, no-wrap
msgid "symbol"
msgstr ""

#. type: item
#: original_texis/functions.texi:1391
#, no-wrap
msgid "string"
msgstr ""

#. type: table
#: original_texis/functions.texi:1393 original_texis/functions.texi:1411 original_texis/functions.texi:1413 original_texis/functions.texi:1415
msgid "Parent type: @code{array}."
msgstr ""

#. type: item
#: original_texis/functions.texi:1393
#, no-wrap
msgid "array"
msgstr ""

#. type: table
#: original_texis/functions.texi:1395 original_texis/functions.texi:1399
msgid "Parent type: @code{sequence}."
msgstr ""

#. type: item
#: original_texis/functions.texi:1395
#, no-wrap
msgid "cons"
msgstr ""

#. type: table
#: original_texis/functions.texi:1397
msgid "Parent type: @code{list}."
msgstr ""

#. type: item
#: original_texis/functions.texi:1397
#, no-wrap
msgid "list"
msgstr ""

#. type: item
#: original_texis/functions.texi:1399
#, no-wrap
msgid "marker"
msgstr ""

#. type: item
#: original_texis/functions.texi:1400
#, no-wrap
msgid "overlay"
msgstr ""

#. type: item
#: original_texis/functions.texi:1401
#, no-wrap
msgid "float"
msgstr ""

#. type: item
#: original_texis/functions.texi:1403
#, no-wrap
msgid "window-configuration"
msgstr ""

#. type: item
#: original_texis/functions.texi:1404
#, no-wrap
msgid "process"
msgstr ""

#. type: item
#: original_texis/functions.texi:1405
#, no-wrap
msgid "window"
msgstr ""

#. type: item
#: original_texis/functions.texi:1407
#, no-wrap
msgid "compiled-function"
msgstr ""

#. type: item
#: original_texis/functions.texi:1408
#, no-wrap
msgid "buffer"
msgstr ""

#. type: item
#: original_texis/functions.texi:1409
#, no-wrap
msgid "char-table"
msgstr ""

#. type: item
#: original_texis/functions.texi:1411
#, no-wrap
msgid "bool-vector"
msgstr ""

#. type: item
#: original_texis/functions.texi:1413
#, no-wrap
msgid "vector"
msgstr ""

#. type: item
#: original_texis/functions.texi:1415
#, no-wrap
msgid "frame"
msgstr ""

#. type: item
#: original_texis/functions.texi:1416
#, no-wrap
msgid "hash-table"
msgstr ""

#. type: item
#: original_texis/functions.texi:1417
#, no-wrap
msgid "font-spec"
msgstr ""

#. type: item
#: original_texis/functions.texi:1418
#, no-wrap
msgid "font-entity"
msgstr ""

#. type: item
#: original_texis/functions.texi:1419
#, no-wrap
msgid "font-object"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1425
msgid ""
"The optional @var{extra} element, expressed as @samp{:extra @var{string}}, "
"allows you to add more methods, distinguished by @var{string}, for the same "
"specializers and qualifiers."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1432
msgid ""
"The optional @var{qualifier} allows combining several applicable methods.  "
"If it is not present, the defined method is a @dfn{primary} method, "
"responsible for providing the primary implementation of the generic function "
"for the specialized arguments.  You can also define @dfn{auxiliary methods}, "
"by using one of the following values as @var{qualifier}:"
msgstr ""

#. type: item
#: original_texis/functions.texi:1434 original_texis/functions.texi:2131
#, no-wrap
msgid ":before"
msgstr ""

#. type: table
#: original_texis/functions.texi:1438
msgid ""
"This auxiliary method will run before the primary method.  More accurately, "
"all the @code{:before} methods will run before the primary, in the "
"most-specific-first order."
msgstr ""

#. type: item
#: original_texis/functions.texi:1438 original_texis/functions.texi:2143
#, no-wrap
msgid ":after"
msgstr ""

#. type: table
#: original_texis/functions.texi:1442
msgid ""
"This auxiliary method will run after the primary method.  More accurately, "
"all such methods will run after the primary, in the most-specific-last "
"order."
msgstr ""

#. type: item
#: original_texis/functions.texi:1442 original_texis/functions.texi:2159
#, no-wrap
msgid ":around"
msgstr ""

#. type: table
#: original_texis/functions.texi:1447
msgid ""
"This auxiliary method will run @emph{instead} of the primary method.  The "
"most specific of such methods will be run before any other method.  Such "
"methods normally use @code{cl-call-next-method}, described below, to invoke "
"the other auxiliary or primary methods."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1455
msgid ""
"Functions defined using @code{cl-defmethod} cannot be made interactive, "
"i.e.@: commands (@pxref{Defining Commands}), by adding the "
"@code{interactive} form to them.  If you need a polymorphic command, we "
"recommend defining a normal command that calls a polymorphic function "
"defined via @code{cl-defgeneric} and @code{cl-defmethod}."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:1457
#, no-wrap
msgid "dispatch of methods for generic function"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:1458
#, no-wrap
msgid "multiple-dispatch methods"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1469
msgid ""
"Each time a generic function is called, it builds the @dfn{effective method} "
"which will handle this invocation by combining the applicable methods "
"defined for the function.  The process of finding the applicable methods and "
"producing the effective method is called @dfn{dispatch}.  The applicable "
"methods are those all of whose specializers are compatible with the actual "
"arguments of the call.  Since all of the arguments must be compatible with "
"the specializers, they all determine whether a method is applicable.  "
"Methods that explicitly specialize more than one argument are called "
"@dfn{multiple-dispatch methods}."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1482
msgid ""
"The applicable methods are sorted into the order in which they will be "
"combined.  The method whose left-most argument specializer is the most "
"specific one will come first in the order.  (Specifying "
"@code{:argument-precedence-order} as part of @code{cl-defmethod} overrides "
"that, as described above.)  If the method body calls "
"@code{cl-call-next-method}, the next most-specific method will run.  If "
"there are applicable @code{:around} methods, the most-specific of them will "
"run first; it should call @code{cl-call-next-method} to run any of the less "
"specific @code{:around} methods.  Next, the @code{:before} methods run in "
"the order of their specificity, followed by the primary method, and lastly "
"the @code{:after} methods in the reverse order of their specificity."
msgstr ""

#. type: defun
#: original_texis/functions.texi:1483
#, no-wrap
msgid "cl-call-next-method &rest args"
msgstr ""

#. type: defun
#: original_texis/functions.texi:1490
msgid ""
"When invoked from within the lexical body of a primary or an @code{:around} "
"auxiliary method, call the next applicable method for the same generic "
"function.  Normally, it is called with no arguments, which means to call the "
"next applicable method with the same arguments that the calling method was "
"invoked.  Otherwise, the specified arguments are used instead."
msgstr ""

#. type: defun
#: original_texis/functions.texi:1492
#, no-wrap
msgid "cl-next-method-p"
msgstr ""

#. type: defun
#: original_texis/functions.texi:1496
msgid ""
"This function, when called from within the lexical body of a primary or an "
"@code{:around} auxiliary method, returns non-@code{nil} if there is a next "
"method to call."
msgstr ""

#. type: section
#: original_texis/functions.texi:1500
#, no-wrap
msgid "Accessing Function Cell Contents"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1505
msgid ""
"The @dfn{function definition} of a symbol is the object stored in the "
"function cell of the symbol.  The functions described here access, test, and "
"set the function cell of symbols."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1508
msgid ""
"See also the function @code{indirect-function}.  @xref{Definition of "
"indirect-function}."
msgstr ""

#. type: defun
#: original_texis/functions.texi:1509
#, no-wrap
msgid "symbol-function symbol"
msgstr ""

#. type: kindex
#: original_texis/functions.texi:1510
#, no-wrap
msgid "void-function"
msgstr ""

#. type: defun
#: original_texis/functions.texi:1513
msgid ""
"This returns the object in the function cell of @var{symbol}.  It does not "
"check that the returned object is a legitimate function."
msgstr ""

#. type: defun
#: original_texis/functions.texi:1517
msgid ""
"If the function cell is void, the return value is @code{nil}.  To "
"distinguish between a function cell that is void and one set to @code{nil}, "
"use @code{fboundp} (see below)."
msgstr ""

#. type: group
#: original_texis/functions.texi:1523
#, no-wrap
msgid ""
"(defun bar (n) (+ n 2))\n"
"(symbol-function 'bar)\n"
"     @result{} #f(lambda (n) [t] (+ n 2))\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:1527
#, no-wrap
msgid ""
"(fset 'baz 'bar)\n"
"     @result{} bar\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:1531
#, no-wrap
msgid ""
"(symbol-function 'baz)\n"
"     @result{} bar\n"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:1535
#, no-wrap
msgid "void function cell"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1540
msgid ""
"If you have never given a symbol any function definition, we say that that "
"symbol's function cell is @dfn{void}.  In other words, the function cell "
"does not have any Lisp object in it.  If you try to call the symbol as a "
"function, Emacs signals a @code{void-function} error."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1546
msgid ""
"Note that void is not the same as @code{nil} or the symbol @code{void}.  The "
"symbols @code{nil} and @code{void} are Lisp objects, and can be stored into "
"a function cell just as any other object can be (and @code{void} can be a "
"valid function if you define it with @code{defun}).  A void function cell "
"contains no object whatsoever."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1550
msgid ""
"You can test the voidness of a symbol's function definition with "
"@code{fboundp}.  After you have given a symbol a function definition, you "
"can make it void once more using @code{fmakunbound}."
msgstr ""

#. type: defun
#: original_texis/functions.texi:1551
#, no-wrap
msgid "fboundp symbol"
msgstr ""

#. type: defun
#: original_texis/functions.texi:1555
msgid ""
"This function returns @code{t} if the symbol has an object in its function "
"cell, @code{nil} otherwise.  It does not check that the object is a "
"legitimate function."
msgstr ""

#. type: defun
#: original_texis/functions.texi:1557
#, no-wrap
msgid "fmakunbound symbol"
msgstr ""

#. type: defun
#: original_texis/functions.texi:1562
msgid ""
"This function makes @var{symbol}'s function cell void, so that a subsequent "
"attempt to access this cell will cause a @code{void-function} error.  It "
"returns @var{symbol}.  (See also @code{makunbound}, in @ref{Void "
"Variables}.)"
msgstr ""

#. type: group
#: original_texis/functions.texi:1568
#, no-wrap
msgid ""
"(defun foo (x) x)\n"
"(foo 1)\n"
"     @result{}1\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:1572
#, no-wrap
msgid ""
"(fmakunbound 'foo)\n"
"     @result{} foo\n"
msgstr ""

#. type: group
#: original_texis/functions.texi:1576
#, no-wrap
msgid ""
"(foo 1)\n"
"@error{} Symbol's function definition is void: foo\n"
msgstr ""

#. type: defun
#: original_texis/functions.texi:1580
#, no-wrap
msgid "fset symbol definition"
msgstr ""

#. type: defun
#: original_texis/functions.texi:1586
msgid ""
"This function stores @var{definition} in the function cell of @var{symbol}.  "
"The result is @var{definition}.  Normally @var{definition} should be a "
"function or the name of a function, but this is not checked.  The argument "
"@var{symbol} is an ordinary evaluated argument."
msgstr ""

#. type: defun
#: original_texis/functions.texi:1591
msgid ""
"The primary use of this function is as a subroutine by constructs that "
"define or alter functions, like @code{defun} or @code{advice-add} "
"(@pxref{Advising Functions}).  You can also use it to give a symbol a "
"function definition that is not a function, e.g., a keyboard macro "
"(@pxref{Keyboard Macros}):"
msgstr ""

#. type: example
#: original_texis/functions.texi:1596
#, no-wrap
msgid ""
";; @r{Define a named keyboard macro.}\n"
"(fset 'kill-two-lines \"\\^u2\\^k\")\n"
"     @result{} \"\\^u2\\^k\"\n"
msgstr ""

#. type: defun
#: original_texis/functions.texi:1601
msgid ""
"If you wish to use @code{fset} to make an alternate name for a function, "
"consider using @code{defalias} instead.  @xref{Definition of defalias}."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1616
msgid ""
"As explained in @ref{Variable Scoping}, Emacs can optionally enable lexical "
"binding of variables.  When lexical binding is enabled, any named function "
"that you create (e.g., with @code{defun}), as well as any anonymous function "
"that you create using the @code{lambda} macro or the @code{function} special "
"form or the @code{#'} syntax (@pxref{Anonymous Functions}), is automatically "
"converted into a @dfn{closure}."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1624
msgid ""
"A closure is a function that also carries a record of the lexical "
"environment that existed when the function was defined.  When it is invoked, "
"any lexical variable references within its definition use the retained "
"lexical environment.  In all other respects, closures behave much like "
"ordinary functions; in particular, they can be called in the same way as "
"ordinary functions."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1626
msgid "@xref{Lexical Binding}, for an example of using a closure."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1631
msgid ""
"Currently, an Emacs Lisp closure object is represented by a list with the "
"symbol @code{closure} as the first element, a list representing the lexical "
"environment as the second element, and the argument list and body forms as "
"the remaining elements:"
msgstr ""

#. type: example
#: original_texis/functions.texi:1636
#, no-wrap
msgid ""
";; @r{lexical binding is enabled.}\n"
"(lambda (x) (* x x))\n"
"     @result{} #f(lambda (x) [t] (* x x))\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1643
msgid ""
"However, the fact that the internal structure of a closure is exposed to the "
"rest of the Lisp world is considered an internal implementation detail.  For "
"this reason, we recommend against directly examining or altering the "
"structure of closure objects."
msgstr ""

#. type: section
#: original_texis/functions.texi:1645
#, no-wrap
msgid "Open Closures"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:1646
#, no-wrap
msgid "oclosures"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:1647
#, no-wrap
msgid "open closures"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1655
msgid ""
"Traditionally, functions are opaque objects which offer no other "
"functionality but to call them.  (Emacs Lisp functions aren't fully opaque "
"since you can extract some info out of them such as their docstring, their "
"arglist, or their interactive spec, but they are still mostly opaque.)  This "
"is usually what we want, but occasionally we need functions to expose a bit "
"more information about themselves."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1660
msgid ""
"@dfn{Open closures}, or @dfn{OClosures} for short, are function objects "
"which carry additional type information and expose some information about "
"themselves in the form of slots which you can access via accessor functions."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1665
msgid ""
"OClosures are defined in two steps: first you use @code{oclosure-define} to "
"define a new OClosure type by specifying the slots carried by the OClosures "
"of this type, and then you use @code{oclosure-lambda} to create an OClosure "
"object of a given type."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1669
msgid ""
"Let's say we want to define keyboard macros, i.e.@: interactive functions "
"which re-execute a sequence of key events (@pxref{Keyboard Macros}).  You "
"could do it with a plain function as follows:"
msgstr ""

#. type: example
#: original_texis/functions.texi:1675
#, no-wrap
msgid ""
"(defun kbd-macro (key-sequence)\n"
"  (lambda (&optional arg)\n"
"    (interactive \"P\")\n"
"    (execute-kbd-macro key-sequence arg)))\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1680
msgid ""
"But with such a definition there is no easy way to extract the "
"@var{key-sequence} from that function, for example to print it."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1684
msgid ""
"We can solve this problem using OClosures as follows.  First we define the "
"type of our keyboard macros (to which we decided to add a @code{counter} "
"slot while at it):"
msgstr ""

#. type: example
#: original_texis/functions.texi:1689
#, no-wrap
msgid ""
"(oclosure-define kbd-macro\n"
"  \"Keyboard macro.\"\n"
"  keys (counter :mutable t))\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1693
msgid "After which we can rewrite our @code{kbd-macro} function:"
msgstr ""

#. type: example
#: original_texis/functions.texi:1701
#, no-wrap
msgid ""
"(defun kbd-macro (key-sequence)\n"
"  (oclosure-lambda (kbd-macro (keys key-sequence) (counter 0))\n"
"      (&optional arg)\n"
"    (interactive \"P\")\n"
"    (execute-kbd-macro keys arg)\n"
"    (setq counter (1+ counter))))\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1708
msgid ""
"As you can see, the @code{keys} and @code{counter} slots of the OClosure can "
"be accessed as local variables from within the body of the OClosure.  But we "
"can now also access them from outside of the body of the OClosure, for "
"example to describe a keyboard macro:"
msgstr ""

#. type: example
#: original_texis/functions.texi:1716
#, no-wrap
msgid ""
"(defun describe-kbd-macro (km)\n"
"  (if (not (eq 'kbd-macro (oclosure-type km)))\n"
"      (message \"Not a keyboard macro\")\n"
"    (let ((keys    (kbd-macro--keys km))\n"
"          (counter (kbd-macro--counter km)))\n"
"      (message \"Keys=%S, called %d times\" keys counter))))\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1722
msgid ""
"Where @code{kbd-macro--keys} and @code{kbd-macro--counter} are accessor "
"functions generated by the @code{oclosure-define} macro for oclosures whose "
"type is @code{kbd-macro}."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1723
#, no-wrap
msgid "oclosure-define oname &optional docstring &rest slots"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1736
msgid ""
"This macro defines a new OClosure type along with accessor functions for its "
"@var{slots}.  @var{oname} can be a symbol (the name of the new type), or a "
"list of the form @w{@code{(@var{oname} . @var{type-props})}}, in which case "
"@var{type-props} is a list of additional properties of this oclosure type.  "
"@var{slots} is a list of slot descriptions where each slot can be either a "
"symbol (the name of the slot) or it can be of the form "
"@w{@code{(@var{slot-name} . @var{slot-props})}}, where @var{slot-props} is a "
"property list of the corresponding slot @var{slot-name}.  The OClosure "
"type's properties specified by @var{type-props} can include the following:"
msgstr ""

#. type: item
#: original_texis/functions.texi:1738
#, no-wrap
msgid "(:predicate @var{pred-name})"
msgstr ""

#. type: table
#: original_texis/functions.texi:1744
msgid ""
"This requests creation of a predicate function named @var{pred-name}.  This "
"function will be used to recognize OClosures of the type @var{oname}.  If "
"this type property is not specified, @code{oclosure-define} will generate a "
"default name for the predicate."
msgstr ""

#. type: item
#: original_texis/functions.texi:1744
#, no-wrap
msgid "(:parent @var{otype})"
msgstr ""

#. type: table
#: original_texis/functions.texi:1749
msgid ""
"This makes type @var{otype} of OClosures be the parent of the type "
"@var{oname}.  The OClosures of type @var{oname} inherit the @var{slots} "
"defined by their parent type."
msgstr ""

#. type: item
#: original_texis/functions.texi:1749
#, no-wrap
msgid "(:copier @var{copier-name} @var{copier-args})"
msgstr ""

#. type: table
#: original_texis/functions.texi:1755
msgid ""
"This causes the definition of a functional update function, knows as the "
"@dfn{copier}, which takes an OClosure of type @var{oname} as its first "
"argument and returns a copy of it with the slots named in @var{copier-args} "
"modified to contain the value passed in the corresponding argument in the "
"actual call to @var{copier-name}."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1761
msgid ""
"For each slot in @var{slots}, the @code{oclosure-define} macro creates an "
"accessor function named @code{@var{oname}--@var{slot-name}}; these can be "
"used to access the values of the slots.  The slot definitions in @var{slots} "
"can specify the following properties of the slots:"
msgstr ""

#. type: item
#: original_texis/functions.texi:1763
#, no-wrap
msgid ":mutable @var{val}"
msgstr ""

#. type: table
#: original_texis/functions.texi:1770
msgid ""
"By default, slots are immutable, but if you specify the @code{:mutable} "
"property with a non-@code{nil} value, the slot can be mutated, for example "
"with @code{setf} (@pxref{Setting Generalized Variables})."
msgstr ""

#. type: item
#: original_texis/functions.texi:1770
#, no-wrap
msgid ":type @var{val-type}"
msgstr ""

#. type: table
#: original_texis/functions.texi:1773
msgid "This specifies the type of the values expected to appear in the slot."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1776
#, no-wrap
msgid "oclosure-lambda (type . slots) arglist &rest body"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1783
msgid ""
"This macro creates an anonymous OClosure of type @var{type}, which should "
"have been defined with @code{oclosure-define}.  @var{slots} should be a list "
"of elements of the form @w{@code{(@var{slot-name} @var{expr})}}.  At run "
"time, each @var{expr} is evaluated, in order, after which the OClosure is "
"created with its slots initialized with the resulting values."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1789
msgid ""
"When called as a function (@pxref{Calling Functions}), the OClosure created "
"by this macro will accept arguments according to @var{arglist} and will "
"execute the code in @var{body}.  @var{body} can refer to the value of any of "
"its slot directly as if it were a local variable that had been captured by "
"static scoping."
msgstr ""

#. type: defun
#: original_texis/functions.texi:1791
#, no-wrap
msgid "oclosure-type object"
msgstr ""

#. type: defun
#: original_texis/functions.texi:1794
msgid ""
"This function returns the OClosure type (a symbol) of @var{object} if it is "
"an OClosure, and @code{nil} otherwise."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1800
msgid ""
"One other function related to OClosures is @code{oclosure-interactive-form}, "
"which allows some types of OClosures to compute their interactive forms "
"dynamically.  @xref{Using Interactive, oclosure-interactive-form}."
msgstr ""

#. type: section
#: original_texis/functions.texi:1803
#, no-wrap
msgid "Advising Emacs Lisp Functions"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:1804
#, no-wrap
msgid "advising functions"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:1805
#, no-wrap
msgid "piece of advice"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1814
msgid ""
"When you need to modify a function defined in another library, or when you "
"need to modify a hook like @code{@var{foo}-function}, a process filter, or "
"basically any variable or object field which holds a function value, you can "
"use the appropriate setter function, such as @code{fset} or @code{defun} for "
"named functions, @code{setq} for hook variables, or "
"@code{set-process-filter} for process filters, but those are often too "
"blunt, completely throwing away the previous value."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1818
msgid ""
"The @dfn{advice} feature lets you add to the existing definition of a "
"function, by @dfn{advising the function}.  This is a cleaner method than "
"redefining the whole function."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1824
msgid ""
"Emacs's advice system provides two sets of primitives for that: the core "
"set, for function values held in variables and object fields (with the "
"corresponding primitives being @code{add-function} and "
"@code{remove-function}) and another set layered on top of it for named "
"functions (with the main primitives being @code{advice-add} and "
"@code{advice-remove})."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1827
msgid ""
"As a trivial example, here's how to add advice that'll modify the return "
"value of a function every time it's called:"
msgstr ""

#. type: example
#: original_texis/functions.texi:1834
#, no-wrap
msgid ""
"(defun my-double (x)\n"
"  (* x 2))\n"
"(defun my-increase (x)\n"
"  (+ x 1))\n"
"(advice-add 'my-double :filter-return #'my-increase)\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1838
msgid ""
"After adding this advice, if you call @code{my-double} with @samp{3}, the "
"return value will be @samp{7}.  To remove this advice, say"
msgstr ""

#. type: example
#: original_texis/functions.texi:1841
#, no-wrap
msgid "(advice-remove 'my-double #'my-increase)\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1845
msgid ""
"A more advanced example would be to trace the calls to the process filter of "
"a process @var{proc}:"
msgstr ""

#. type: example
#: original_texis/functions.texi:1849
#, no-wrap
msgid ""
"(defun my-tracing-function (proc string)\n"
"  (message \"Proc %S received %S\" proc string))\n"
"\n"
msgstr ""

#. type: example
#: original_texis/functions.texi:1851
#, no-wrap
msgid "(add-function :before (process-filter @var{proc}) #'my-tracing-function)\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1857
msgid ""
"This will cause the process's output to be passed to "
"@code{my-tracing-function} before being passed to the original process "
"filter.  @code{my-tracing-function} receives the same arguments as the "
"original function.  When you're done with it, you can revert to the untraced "
"behavior with:"
msgstr ""

#. type: example
#: original_texis/functions.texi:1860
#, no-wrap
msgid "(remove-function (process-filter @var{proc}) #'my-tracing-function)\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1864
msgid ""
"Similarly, if you want to trace the execution of the function named "
"@code{display-buffer}, you could use:"
msgstr ""

#. type: example
#: original_texis/functions.texi:1871
#, no-wrap
msgid ""
"(defun his-tracing-function (orig-fun &rest args)\n"
"  (message \"display-buffer called with args %S\" args)\n"
"  (let ((res (apply orig-fun args)))\n"
"    (message \"display-buffer returned %S\" res)\n"
"    res))\n"
"\n"
msgstr ""

#. type: example
#: original_texis/functions.texi:1873
#, no-wrap
msgid "(advice-add 'display-buffer :around #'his-tracing-function)\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1880
msgid ""
"Here, @code{his-tracing-function} is called instead of the original function "
"and receives the original function (additionally to that function's "
"arguments)  as argument, so it can call it if and when it needs to.  When "
"you're tired of seeing this output, you can revert to the untraced behavior "
"with:"
msgstr ""

#. type: example
#: original_texis/functions.texi:1883
#, no-wrap
msgid "(advice-remove 'display-buffer #'his-tracing-function)\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:1888
msgid ""
"The arguments @code{:before} and @code{:around} used in the above examples "
"specify how the two functions are composed, since there are many different "
"ways to do it.  The added function is also called a piece of @emph{advice}."
msgstr ""

#. type: node
#: original_texis/functions.texi:1895 original_texis/functions.texi:1897
#, no-wrap
msgid "Core Advising Primitives"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:1895
msgid "Primitives to manipulate advice."
msgstr ""

#. type: subsection
#: original_texis/functions.texi:1895 original_texis/functions.texi:2027 original_texis/functions.texi:2028
#, no-wrap
msgid "Advising Named Functions"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:1895
msgid "Advising named functions."
msgstr ""

#. type: node
#: original_texis/functions.texi:1895 original_texis/functions.texi:2123
#, no-wrap
msgid "Advice Combinators"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:1895
msgid "Ways to compose advice."
msgstr ""

#. type: node
#: original_texis/functions.texi:1895 original_texis/functions.texi:2236
#, no-wrap
msgid "Porting Old Advice"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:1895
msgid "Adapting code using the old defadvice."
msgstr ""

#. type: subsection
#: original_texis/functions.texi:1895 original_texis/functions.texi:2327 original_texis/functions.texi:2328
#, no-wrap
msgid "Advice and Byte Code"
msgstr ""

#. type: menuentry
#: original_texis/functions.texi:1895
msgid "Not all functions can be advised."
msgstr ""

#. type: subsection
#: original_texis/functions.texi:1898
#, no-wrap
msgid "Primitives to manipulate advices"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:1899
#, no-wrap
msgid "advice, add and remove"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1901
#, no-wrap
msgid "add-function where place function &optional props"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1904
msgid ""
"This macro is the handy way to add the advice @var{function} to the function "
"stored in @var{place} (@pxref{Generalized Variables})."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1909
msgid ""
"@var{where} determines how @var{function} is composed with the existing "
"function, e.g., whether @var{function} should be called before, or after the "
"original function.  @xref{Advice Combinators}, for the list of available "
"ways to compose the two functions."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1918
msgid ""
"When modifying a variable (whose name will usually end with "
"@code{-function}), you can choose whether @var{function} is used globally or "
"only in the current buffer: if @var{place} is just a symbol, then "
"@var{function} is added to the global value of @var{place}.  Whereas if "
"@var{place} is of the form @code{(local @var{symbol})}, where @var{symbol} "
"is an expression which returns the variable name, then @var{function} will "
"only be added in the current buffer.  Finally, if you want to modify a "
"lexical variable, you will have to use @code{(var @var{variable})}."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1922
msgid ""
"Every function added with @code{add-function} can be accompanied by an "
"association list of properties @var{props}.  Currently only two of those "
"properties have a special meaning:"
msgstr ""

#. type: item
#: original_texis/functions.texi:1924
#, no-wrap
msgid "name"
msgstr ""

#. type: table
#: original_texis/functions.texi:1928
msgid ""
"This gives a name to the advice, which @code{remove-function} can use to "
"identify which function to remove.  Typically used when @var{function} is an "
"anonymous function."
msgstr ""

#. type: item
#: original_texis/functions.texi:1929
#, no-wrap
msgid "depth"
msgstr ""

#. type: table
#: original_texis/functions.texi:1936
msgid ""
"This specifies how to order the advice, should several pieces of advice be "
"present.  By default, the depth is 0.  A depth of 100 indicates that this "
"piece of advice should be kept as deep as possible, whereas a depth of "
"@minus{}100 indicates that it should stay as the outermost piece.  When two "
"pieces of advice specify the same depth, the most recently added one will be "
"outermost."
msgstr ""

#. type: table
#: original_texis/functions.texi:1949
msgid ""
"For @code{:before} advice, being outermost means that this advice will be "
"run first, before any other advice, whereas being innermost means that it "
"will run right before the original function, with no other advice run "
"between itself and the original function.  Similarly, for @code{:after} "
"advice innermost means that it will run right after the original function, "
"with no other advice run in between, whereas outermost means that it will be "
"run right at the end after all other advice.  An innermost @code{:override} "
"piece of advice will only override the original function and other pieces of "
"advice will apply to it, whereas an outermost @code{:override} piece of "
"advice will override not only the original function but all other advice "
"applied to it as well."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1961
msgid ""
"If @var{function} is not interactive, then the combined function will "
"inherit the interactive spec, if any, of the original function.  Else, the "
"combined function will be interactive and will use the interactive spec of "
"@var{function}.  One exception: if the interactive spec of @var{function} is "
"a function (i.e., a @code{lambda} expression or an @code{fbound} symbol "
"rather than an expression or a string), then the interactive spec of the "
"combined function will be a call to that function with the interactive spec "
"of the original function as sole argument.  To interpret the spec received "
"as argument, use @code{advice-eval-interactive-spec}."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1969
msgid ""
"Note: The interactive spec of @var{function} will apply to the combined "
"function and should hence obey the calling convention of the combined "
"function rather than that of @var{function}.  In many cases, it makes no "
"difference since they are identical, but it does matter for @code{:around}, "
"@code{:filter-args}, and @code{:filter-return}, where @var{function} "
"receives different arguments than the original function stored in "
"@var{place}."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1971
#, no-wrap
msgid "remove-function place function"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1975
msgid ""
"This macro removes @var{function} from the function stored in @var{place}.  "
"This only works if @var{function} was added to @var{place} using "
"@code{add-function}."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:1981
msgid ""
"@var{function} is compared with functions added to @var{place} using "
"@code{equal}, to try and make it work also with lambda expressions.  It is "
"additionally compared also with the @code{name} property of the functions "
"added to @var{place}, which can be more reliable than comparing lambda "
"expressions using @code{equal}."
msgstr ""

#. type: defun
#: original_texis/functions.texi:1983
#, no-wrap
msgid "advice-function-member-p advice function-def"
msgstr ""

#. type: defun
#: original_texis/functions.texi:1987
msgid ""
"Return non-@code{nil} if @var{advice} is already in @var{function-def}.  "
"Like for @code{remove-function} above, instead of @var{advice} being the "
"actual function, it can also be the @code{name} of the piece of advice."
msgstr ""

#. type: defun
#: original_texis/functions.texi:1989
#, no-wrap
msgid "advice-function-mapc f function-def"
msgstr ""

#. type: defun
#: original_texis/functions.texi:1993
msgid ""
"Call the function @var{f} for every piece of advice that was added to "
"@var{function-def}.  @var{f} is called with two arguments: the advice "
"function and its properties."
msgstr ""

#. type: defun
#: original_texis/functions.texi:1995
#, no-wrap
msgid "advice-eval-interactive-spec spec"
msgstr ""

#. type: defun
#: original_texis/functions.texi:2001
msgid ""
"Evaluate the interactive @var{spec} just like an interactive call to a "
"function with such a spec would, and then return the corresponding list of "
"arguments that was built.  E.g., @code{(advice-eval-interactive-spec "
"\"r\\nP\")} will return a list of three elements, containing the boundaries "
"of the region and the current prefix argument."
msgstr ""

#. type: defun
#: original_texis/functions.texi:2005
msgid ""
"For instance, if you want to make the @kbd{C-x m} (@code{compose-mail}) "
"command prompt for a @samp{From:} header, you could say something like this:"
msgstr ""

#. type: example
#: original_texis/functions.texi:2022
#, no-wrap
msgid ""
"(defun my-compose-mail-advice (orig &rest args)\n"
"  \"Read From: address interactively.\"\n"
"  (interactive\n"
"   (lambda (spec)\n"
"     (let* ((user-mail-address\n"
"             (completing-read \"From: \"\n"
"                              '(\"one.address@@example.net\"\n"
"                                \"alternative.address@@example.net\")))\n"
"            (from (message-make-from user-full-name\n"
"                                     user-mail-address))\n"
"            (spec (advice-eval-interactive-spec spec)))\n"
"       ;; Put the From header into the OTHER-HEADERS argument.\n"
"       (push (cons 'From from) (nth 2 spec))\n"
"       spec)))\n"
"  (apply orig args))\n"
"\n"
msgstr ""

#. type: example
#: original_texis/functions.texi:2024
#, no-wrap
msgid "(advice-add 'compose-mail :around #'my-compose-mail-advice)\n"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:2029
#, no-wrap
msgid "advising named functions"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2033
msgid ""
"A common use of advice is for named functions and macros.  You could just "
"use @code{add-function} as in:"
msgstr ""

#. type: example
#: original_texis/functions.texi:2036
#, no-wrap
msgid "(add-function :around (symbol-function '@var{fun}) #'his-tracing-function)\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2045
msgid ""
"But you should use @code{advice-add} and @code{advice-remove} for that "
"instead.  This separate set of functions to manipulate pieces of advice "
"applied to named functions, offers the following extra features compared to "
"@code{add-function}: they know how to deal with macros and autoloaded "
"functions, they let @code{describe-function} preserve the original docstring "
"as well as document the added advice, and they let you add and remove advice "
"before a function is even defined."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2053
msgid ""
"@code{advice-add} can be useful for altering the behavior of existing calls "
"to an existing function without having to redefine the whole function.  "
"However, it can be a source of bugs, since existing callers to the function "
"may assume the old behavior, and work incorrectly when the behavior is "
"changed by advice.  Advice can also cause confusion in debugging, if the "
"person doing the debugging does not notice or remember that the function has "
"been modified by advice."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2060
msgid ""
"Note that the problems are not due to advice per se, but to the act of "
"modifying a named function.  It is even more problematic to modify a named "
"function via lower-level primitives like @code{fset}, @code{defalias}, or "
"@code{cl-letf}.  From that point of view, advice is the better way to modify "
"a named function because it keeps track of the modifications, so they can be "
"listed and undone."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2067
msgid ""
"Modifying a named function should be reserved for the cases where you cannot "
"modify Emacs's behavior in any other way.  If it is possible to do the same "
"thing via a hook, that is preferable (@pxref{Hooks}).  If you simply want to "
"change what a particular key does, it may be better to write a new command, "
"and remap the old command's key bindings to the new one (@pxref{Remapping "
"Commands})."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2076
msgid ""
"If you are writing code for release, for others to use, try to avoid "
"including advice in it.  If the function you want to advise has no hook to "
"do the job, please talk with the Emacs developers about adding a suitable "
"hook.  Especially, Emacs's own source files should not put advice on "
"functions in Emacs.  (There are currently a few exceptions to this "
"convention, but we aim to correct them.)  It is generally cleaner to create "
"a new hook in @code{foo}, and make @code{bar} use the hook, than to have "
"@code{bar} put advice in @code{foo}."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2081
msgid ""
"Special forms (@pxref{Special Forms}) cannot be advised, however macros can "
"be advised, in much the same way as functions.  Of course, this will not "
"affect code that has already been macro-expanded, so you need to make sure "
"the advice is installed before the macro is expanded."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2089
msgid ""
"It is possible to advise a primitive (@pxref{What Is a Function}), but one "
"should typically @emph{not} do so, for two reasons.  Firstly, some "
"primitives are used by the advice mechanism, and advising them could cause "
"an infinite recursion.  Secondly, many primitives are called directly from "
"C, and such calls ignore advice; hence, one ends up in a confusing situation "
"where some calls (occurring from Lisp code) obey the advice and other calls "
"(from C code) do not."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2090
#, no-wrap
msgid "define-advice symbol (where lambda-list &optional name depth) &rest body"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2096
msgid ""
"This macro defines a piece of advice and adds it to the function named "
"@var{symbol}.  If @var{name} is non-@code{nil}, the advice is named "
"@code{@var{symbol}@@@var{name}} and installed with the name @var{name}; "
"otherwise, the advice is anonymous.  See @code{advice-add} for explanation "
"of other arguments."
msgstr ""

#. type: defun
#: original_texis/functions.texi:2098
#, no-wrap
msgid "advice-add symbol where function &optional props"
msgstr ""

#. type: defun
#: original_texis/functions.texi:2102
msgid ""
"Add the advice @var{function} to the named function @var{symbol}.  "
"@var{where} and @var{props} have the same meaning as for @code{add-function} "
"(@pxref{Core Advising Primitives})."
msgstr ""

#. type: deffn
#: original_texis/functions.texi:2104
#, no-wrap
msgid "Command advice-remove symbol function"
msgstr ""

#. type: deffn
#: original_texis/functions.texi:2109
msgid ""
"Remove the advice @var{function} from the named function @var{symbol}.  "
"@var{function} can also be the @code{name} of a piece of advice.  When "
"called interactively, prompt for both an advised @var{function} and the "
"advice to remove."
msgstr ""

#. type: defun
#: original_texis/functions.texi:2111
#, no-wrap
msgid "advice-member-p function symbol"
msgstr ""

#. type: defun
#: original_texis/functions.texi:2115
msgid ""
"Return non-@code{nil} if the advice @var{function} is already in the named "
"function @var{symbol}.  @var{function} can also be the @code{name} of a "
"piece of advice."
msgstr ""

#. type: defun
#: original_texis/functions.texi:2117
#, no-wrap
msgid "advice-mapc function symbol"
msgstr ""

#. type: defun
#: original_texis/functions.texi:2121
msgid ""
"Call @var{function} for every piece of advice that was added to the named "
"function @var{symbol}.  @var{function} is called with two arguments: the "
"advice function and its properties."
msgstr ""

#. type: subsection
#: original_texis/functions.texi:2124
#, no-wrap
msgid "Ways to compose advice"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2129
msgid ""
"Here are the different possible values for the @var{where} argument of "
"@code{add-function} and @code{advice-add}, specifying how the advice "
"@var{function} and the original function should be composed."
msgstr ""

#. type: table
#: original_texis/functions.texi:2136
msgid ""
"Call @var{function} before the old function.  Both functions receive the "
"same arguments, and the return value of the composition is the return value "
"of the old function.  More specifically, the composition of the two "
"functions behaves like:"
msgstr ""

#. type: example
#: original_texis/functions.texi:2138
#, no-wrap
msgid "(lambda (&rest r) (apply @var{function} r) (apply @var{oldfun} r))\n"
msgstr ""

#. type: table
#: original_texis/functions.texi:2142
msgid ""
"@code{(add-function :before @var{funvar} @var{function})} is comparable for "
"single-function hooks to @code{(add-hook '@var{hookvar} @var{function})} for "
"normal hooks."
msgstr ""

#. type: table
#: original_texis/functions.texi:2148
msgid ""
"Call @var{function} after the old function.  Both functions receive the same "
"arguments, and the return value of the composition is the return value of "
"the old function.  More specifically, the composition of the two functions "
"behaves like:"
msgstr ""

#. type: example
#: original_texis/functions.texi:2150
#, no-wrap
msgid "(lambda (&rest r) (prog1 (apply @var{oldfun} r) (apply @var{function} r)))\n"
msgstr ""

#. type: table
#: original_texis/functions.texi:2154
msgid ""
"@code{(add-function :after @var{funvar} @var{function})} is comparable for "
"single-function hooks to @code{(add-hook '@var{hookvar} @var{function} "
"'append)} for normal hooks."
msgstr ""

#. type: item
#: original_texis/functions.texi:2155
#, no-wrap
msgid ":override"
msgstr ""

#. type: table
#: original_texis/functions.texi:2158
msgid ""
"This completely replaces the old function with the new one.  The old "
"function can of course be recovered if you later call "
"@code{remove-function}."
msgstr ""

#. type: table
#: original_texis/functions.texi:2166
msgid ""
"Call @var{function} instead of the old function, but provide the old "
"function as an extra argument to @var{function}.  This is the most flexible "
"composition.  For example, it lets you call the old function with different "
"arguments, or many times, or within a let-binding, or you can sometimes "
"delegate the work to the old function and sometimes override it completely.  "
"More specifically, the composition of the two functions behaves like:"
msgstr ""

#. type: example
#: original_texis/functions.texi:2168
#, no-wrap
msgid "(lambda (&rest r) (apply @var{function} @var{oldfun} r))\n"
msgstr ""

#. type: item
#: original_texis/functions.texi:2170
#, no-wrap
msgid ":before-while"
msgstr ""

#. type: table
#: original_texis/functions.texi:2176
msgid ""
"Call @var{function} before the old function and don't call the old function "
"if @var{function} returns @code{nil}.  Both functions receive the same "
"arguments, and the return value of the composition is the return value of "
"the old function.  More specifically, the composition of the two functions "
"behaves like:"
msgstr ""

#. type: example
#: original_texis/functions.texi:2178
#, no-wrap
msgid "(lambda (&rest r) (and (apply @var{function} r) (apply @var{oldfun} r)))\n"
msgstr ""

#. type: table
#: original_texis/functions.texi:2182
msgid ""
"@code{(add-function :before-while @var{funvar} @var{function})} is "
"comparable for single-function hooks to @code{(add-hook '@var{hookvar} "
"@var{function})} when @var{hookvar} is run via "
"@code{run-hook-with-args-until-failure}."
msgstr ""

#. type: item
#: original_texis/functions.texi:2183
#, no-wrap
msgid ":before-until"
msgstr ""

#. type: table
#: original_texis/functions.texi:2187
msgid ""
"Call @var{function} before the old function and only call the old function "
"if @var{function} returns @code{nil}.  More specifically, the composition of "
"the two functions behaves like:"
msgstr ""

#. type: example
#: original_texis/functions.texi:2189
#, no-wrap
msgid "(lambda (&rest r) (or (apply @var{function} r) (apply @var{oldfun} r)))\n"
msgstr ""

#. type: table
#: original_texis/functions.texi:2193
msgid ""
"@code{(add-function :before-until @var{funvar} @var{function})} is "
"comparable for single-function hooks to @code{(add-hook '@var{hookvar} "
"@var{function})} when @var{hookvar} is run via "
"@code{run-hook-with-args-until-success}."
msgstr ""

#. type: item
#: original_texis/functions.texi:2194
#, no-wrap
msgid ":after-while"
msgstr ""

#. type: table
#: original_texis/functions.texi:2199
msgid ""
"Call @var{function} after the old function and only if the old function "
"returned non-@code{nil}.  Both functions receive the same arguments, and the "
"return value of the composition is the return value of @var{function}.  More "
"specifically, the composition of the two functions behaves like:"
msgstr ""

#. type: example
#: original_texis/functions.texi:2201
#, no-wrap
msgid "(lambda (&rest r) (and (apply @var{oldfun} r) (apply @var{function} r)))\n"
msgstr ""

#. type: table
#: original_texis/functions.texi:2206
msgid ""
"@code{(add-function :after-while @var{funvar} @var{function})} is comparable "
"for single-function hooks to @code{(add-hook '@var{hookvar} @var{function} "
"'append)} when @var{hookvar} is run via "
"@code{run-hook-with-args-until-failure}."
msgstr ""

#. type: item
#: original_texis/functions.texi:2207
#, no-wrap
msgid ":after-until"
msgstr ""

#. type: table
#: original_texis/functions.texi:2211
msgid ""
"Call @var{function} after the old function and only if the old function "
"returned @code{nil}.  More specifically, the composition of the two "
"functions behaves like:"
msgstr ""

#. type: example
#: original_texis/functions.texi:2213
#, no-wrap
msgid "(lambda (&rest r) (or  (apply @var{oldfun} r) (apply @var{function} r)))\n"
msgstr ""

#. type: table
#: original_texis/functions.texi:2218
msgid ""
"@code{(add-function :after-until @var{funvar} @var{function})} is comparable "
"for single-function hooks to @code{(add-hook '@var{hookvar} @var{function} "
"'append)} when @var{hookvar} is run via "
"@code{run-hook-with-args-until-success}."
msgstr ""

#. type: item
#: original_texis/functions.texi:2219
#, no-wrap
msgid ":filter-args"
msgstr ""

#. type: table
#: original_texis/functions.texi:2223
msgid ""
"Call @var{function} first and use the result (which should be a list) as the "
"new arguments to pass to the old function.  More specifically, the "
"composition of the two functions behaves like:"
msgstr ""

#. type: example
#: original_texis/functions.texi:2225
#, no-wrap
msgid "(lambda (&rest r) (apply @var{oldfun} (funcall @var{function} r)))\n"
msgstr ""

#. type: item
#: original_texis/functions.texi:2227
#, no-wrap
msgid ":filter-return"
msgstr ""

#. type: table
#: original_texis/functions.texi:2230
msgid ""
"Call the old function first and pass the result to @var{function}.  More "
"specifically, the composition of the two functions behaves like:"
msgstr ""

#. type: example
#: original_texis/functions.texi:2232
#, no-wrap
msgid "(lambda (&rest r) (funcall @var{function} (apply @var{oldfun} r)))\n"
msgstr ""

#. type: subsection
#: original_texis/functions.texi:2237
#, no-wrap
msgid "Adapting code using the old defadvice"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:2238
#, no-wrap
msgid "old advices, porting"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:2243
#, no-wrap
msgid "advices, porting from @code{defadvice}"
msgstr ""

#. type: findex
#: original_texis/functions.texi:2244
#, no-wrap
msgid "defadvice"
msgstr ""

#. type: findex
#: original_texis/functions.texi:2245
#, no-wrap
msgid "ad-activate"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2250
msgid ""
"A lot of code uses the old @code{defadvice} mechanism, which has been made "
"obsolete by the new @code{advice-add}, whose implementation and semantics is "
"significantly simpler."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2252
msgid "An old piece of advice such as:"
msgstr ""

#. type: example
#: original_texis/functions.texi:2262
#, no-wrap
msgid ""
"(defadvice previous-line (before next-line-at-end\n"
"                                 (&optional arg try-vscroll))\n"
"  \"Insert an empty line when moving up from the top line.\"\n"
"  (if (and next-line-add-newlines (= arg 1)\n"
"           (save-excursion (beginning-of-line) (bobp)))\n"
"      (progn\n"
"        (beginning-of-line)\n"
"        (newline))))\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2265
msgid "could be translated in the new advice mechanism into a plain function:"
msgstr ""

#. type: example
#: original_texis/functions.texi:2274
#, no-wrap
msgid ""
"(defun previous-line--next-line-at-end (&optional arg try-vscroll)\n"
"  \"Insert an empty line when moving up from the top line.\"\n"
"  (if (and next-line-add-newlines (= arg 1)\n"
"           (save-excursion (beginning-of-line) (bobp)))\n"
"      (progn\n"
"        (beginning-of-line)\n"
"        (newline))))\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2278
msgid ""
"Obviously, this does not actually modify @code{previous-line}.  For that the "
"old advice needed:"
msgstr ""

#. type: example
#: original_texis/functions.texi:2280
#, no-wrap
msgid "(ad-activate 'previous-line)\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2282
msgid "whereas the new advice mechanism needs:"
msgstr ""

#. type: example
#: original_texis/functions.texi:2284
#, no-wrap
msgid "(advice-add 'previous-line :before #'previous-line--next-line-at-end)\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2291
msgid ""
"Note that @code{ad-activate} had a global effect: it activated all pieces of "
"advice enabled for that specified function.  If you wanted to only activate "
"or deactivate a particular piece, you needed to @emph{enable} or "
"@emph{disable} it with @code{ad-enable-advice} and "
"@code{ad-disable-advice}.  The new mechanism does away with this "
"distinction."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2293
msgid "Around advice such as:"
msgstr ""

#. type: example
#: original_texis/functions.texi:2300
#, no-wrap
msgid ""
"(defadvice foo (around foo-around)\n"
"  \"Ignore case in `foo'.\"\n"
"  (let ((case-fold-search t))\n"
"    ad-do-it))\n"
"(ad-activate 'foo)\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2303
msgid "could translate into:"
msgstr ""

#. type: example
#: original_texis/functions.texi:2310
#, no-wrap
msgid ""
"(defun foo--foo-around (orig-fun &rest args)\n"
"  \"Ignore case in `foo'.\"\n"
"  (let ((case-fold-search t))\n"
"    (apply orig-fun args)))\n"
"(advice-add 'foo :around #'foo--foo-around)\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2320
msgid ""
"Regarding the advice's @emph{class}, note that the new @code{:before} is not "
"quite equivalent to the old @code{before}, because in the old advice you "
"could modify the function's arguments (e.g., with @code{ad-set-arg}), and "
"that would affect the argument values seen by the original function, whereas "
"in the new @code{:before}, modifying an argument via @code{setq} in the "
"advice has no effect on the arguments seen by the original function.  When "
"porting @code{before} advice which relied on this behavior, you'll need to "
"turn it into new @code{:around} or @code{:filter-args} advice instead."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2325
msgid ""
"Similarly old @code{after} advice could modify the returned value by "
"changing @code{ad-return-value}, whereas new @code{:after} advice cannot, so "
"when porting such old @code{after} advice, you'll need to turn it into new "
"@code{:around} or @code{:filter-return} advice instead."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:2329
#, no-wrap
msgid "compiler macros, advising"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:2330
#, no-wrap
msgid "@code{byte-compile} and  @code{byte-optimize}, advising"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2335
msgid ""
"Not all functions can be reliably advised.  The byte compiler may choose to "
"replace a call to a function with a sequence of instructions that doesn't "
"call the function you were interested in altering."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2337
msgid "This usually happens due to one of the three following mechanisms:"
msgstr ""

#. type: item
#: original_texis/functions.texi:2339
#, no-wrap
msgid "@code{byte-compile} properties"
msgstr ""

#. type: table
#: original_texis/functions.texi:2343
msgid ""
"If a function's symbol has a @code{byte-compile} property, that property "
"will be used instead of the symbol's function definition.  @xref{Compilation "
"Functions}."
msgstr ""

#. type: item
#: original_texis/functions.texi:2344
#, no-wrap
msgid "@code{byte-optimize} properties"
msgstr ""

#. type: table
#: original_texis/functions.texi:2348
msgid ""
"If a function's symbol has a @code{byte-optimize} property, the byte "
"compiler may rewrite the function arguments, or decide to use a different "
"function altogether."
msgstr ""

#. type: item
#: original_texis/functions.texi:2349
#, no-wrap
msgid "@code{compiler-macro} declare forms"
msgstr ""

#. type: table
#: original_texis/functions.texi:2355
msgid ""
"A function can have a special @code{compiler-macro} @code{declare} form in "
"its definition (@pxref{Declare Form}) that defines an @dfn{expander} to call "
"when compiling the function.  The expander could then cause the produced "
"byte-code not to call the original function."
msgstr ""

#. type: section
#: original_texis/functions.texi:2358
#, no-wrap
msgid "Declaring Functions Obsolete"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:2359
#, no-wrap
msgid "obsolete functions"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2367
msgid ""
"You can mark a named function as @dfn{obsolete}, meaning that it may be "
"removed at some point in the future.  This causes Emacs to warn that the "
"function is obsolete whenever it byte-compiles code containing that "
"function, and whenever it displays the documentation for that function.  In "
"all other respects, an obsolete function behaves like any other function."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2372
msgid ""
"The easiest way to mark a function as obsolete is to put a @code{(declare "
"(obsolete @dots{}))} form in the function's @code{defun} definition.  "
"@xref{Declare Form}.  Alternatively, you can use the @code{make-obsolete} "
"function, described below."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2378
msgid ""
"A macro (@pxref{Macros}) can also be marked obsolete with "
"@code{make-obsolete}; this has the same effects as for a function.  An alias "
"for a function or macro can also be marked as obsolete; this makes the alias "
"itself obsolete, not the function or macro which it resolves to."
msgstr ""

#. type: defun
#: original_texis/functions.texi:2379
#, no-wrap
msgid "make-obsolete obsolete-name current-name when"
msgstr ""

#. type: defun
#: original_texis/functions.texi:2383
msgid ""
"This function marks @var{obsolete-name} as obsolete.  @var{obsolete-name} "
"should be a symbol naming a function or macro, or an alias for a function or "
"macro."
msgstr ""

#. type: defun
#: original_texis/functions.texi:2392
msgid ""
"If @var{current-name} is a symbol, the warning message says to use "
"@var{current-name} instead of @var{obsolete-name}.  @var{current-name} does "
"not need to be an alias for @var{obsolete-name}; it can be a different "
"function with similar functionality.  @var{current-name} can also be a "
"string, which serves as the warning message.  The message should begin in "
"lower case, and end with a period.  It can also be @code{nil}, in which case "
"the warning message provides no additional details."
msgstr ""

#. type: defun
#: original_texis/functions.texi:2395
msgid ""
"The argument @var{when} should be a string indicating when the function was "
"first made obsolete---for example, a date or a release number."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2397
#, no-wrap
msgid "define-obsolete-function-alias obsolete-name current-name when &optional doc"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2401
msgid ""
"This convenience macro marks the function @var{obsolete-name} obsolete and "
"also defines it as an alias for the function @var{current-name}.  It is "
"equivalent to the following:"
msgstr ""

#. type: example
#: original_texis/functions.texi:2405
#, no-wrap
msgid ""
"(defalias @var{obsolete-name} @var{current-name} @var{doc})\n"
"(make-obsolete @var{obsolete-name} @var{current-name} @var{when})\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2410
msgid ""
"In addition, you can mark a particular calling convention for a function as "
"obsolete:"
msgstr ""

#. type: defun
#: original_texis/functions.texi:2411
#, no-wrap
msgid "set-advertised-calling-convention function signature when"
msgstr ""

#. type: defun
#: original_texis/functions.texi:2419
msgid ""
"This function specifies the argument list @var{signature} as the correct way "
"to call @var{function}.  This causes the Emacs byte compiler to issue a "
"warning whenever it comes across an Emacs Lisp program that calls "
"@var{function} any other way (however, it will still allow the code to be "
"byte compiled).  @var{when} should be a string indicating when the variable "
"was first made obsolete (usually a version number string)."
msgstr ""

#. type: defun
#: original_texis/functions.texi:2422
msgid ""
"For instance, in old versions of Emacs the @code{sit-for} function accepted "
"three arguments, like this"
msgstr ""

#. type: example
#: original_texis/functions.texi:2425
#, no-wrap
msgid "  (sit-for seconds milliseconds nodisp)\n"
msgstr ""

#. type: defun
#: original_texis/functions.texi:2430
msgid ""
"During a transition period, the function accepted those three arguments, but "
"declared this old calling convention as deprecated like this:"
msgstr ""

#. type: example
#: original_texis/functions.texi:2434
#, no-wrap
msgid ""
"(set-advertised-calling-convention\n"
"  'sit-for '(seconds &optional nodisp) \"22.1\")\n"
msgstr ""

#. type: defun
#: original_texis/functions.texi:2440
msgid ""
"The alternative to using this function is the "
"@code{advertised-calling-convention} @code{declare} spec, see @ref{Declare "
"Form}."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:2444
#, no-wrap
msgid "inline functions"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2450
msgid ""
"An @dfn{inline function} is a function that works just like an ordinary "
"function, except for one thing: when you byte-compile a call to the function "
"(@pxref{Byte Compilation}), the function's definition is expanded into the "
"caller."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2455
msgid ""
"The simple way to define an inline function, is to write @code{defsubst} "
"instead of @code{defun}.  The rest of the definition looks just the same, "
"but using @code{defsubst} says to make it inline for byte compilation."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2456
#, no-wrap
msgid "defsubst name args [doc] [declare] [interactive] body@dots{}"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2459
msgid ""
"This macro defines an inline function.  Its syntax is exactly the same as "
"@code{defun} (@pxref{Defining Functions})."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2465
msgid ""
"Making a function inline often makes its function calls run faster.  But it "
"also has disadvantages.  For one thing, it reduces flexibility; if you "
"change the definition of the function, calls already inlined still use the "
"old definition until you recompile them."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2470
msgid ""
"Another disadvantage is that making a large function inline can increase the "
"size of compiled code both in files and in memory.  Since the speed "
"advantage of inline functions is greatest for small functions, you generally "
"should not make large functions inline."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2477
msgid ""
"Also, inline functions do not behave well with respect to debugging, "
"tracing, and advising (@pxref{Advising Functions}).  Since ease of debugging "
"and the flexibility of redefining functions are important features of Emacs, "
"you should not make a function inline, even if it's small, unless its speed "
"is really crucial, and you've timed the code to verify that using "
"@code{defun} actually has performance problems."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2480
msgid ""
"After an inline function is defined, its inline expansion can be performed "
"later on in the same file, just like macros."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2491
msgid ""
"It's possible to use @code{defmacro} to define a macro to expand into the "
"same code that an inline function would execute (@pxref{Macros}).  But the "
"macro would be limited to direct use in expressions---a macro cannot be "
"called with @code{apply}, @code{mapcar} and so on.  Also, it takes some work "
"to convert an ordinary function into a macro.  To convert it into an inline "
"function is easy; just replace @code{defun} with @code{defsubst}.  Since "
"each argument of an inline function is evaluated exactly once, you needn't "
"worry about how many times the body uses the arguments, as you do for "
"macros."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2495
msgid ""
"Alternatively, you can define a function by providing the code which will "
"inline it as a compiler macro (@pxref{Declare Form}).  The following macros "
"make this possible."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2497
#, no-wrap
msgid "define-inline name args [doc] [declare] body@dots{}"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2501
msgid ""
"Define a function @var{name} by providing code that does its inlining, as a "
"compiler macro.  The function will accept the argument list @var{args} and "
"will have the specified @var{body}."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2506
msgid ""
"If present, @var{doc} should be the function's documentation string "
"(@pxref{Function Documentation}); @var{declare}, if present, should be a "
"@code{declare} form (@pxref{Declare Form}) specifying the function's "
"metadata."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2510
msgid ""
"Functions defined via @code{define-inline} have several advantages with "
"respect to macros defined by @code{defsubst} or @code{defmacro}:"
msgstr ""

#. type: itemize
#: original_texis/functions.texi:2514
msgid "They can be passed to @code{mapcar} (@pxref{Mapping Functions})."
msgstr ""

#. type: itemize
#: original_texis/functions.texi:2517
msgid "They are more efficient."
msgstr ""

#. type: itemize
#: original_texis/functions.texi:2521
msgid ""
"They can be used as @dfn{place forms} to store values (@pxref{Generalized "
"Variables})."
msgstr ""

#. type: itemize
#: original_texis/functions.texi:2526
msgid ""
"They behave in a more predictable way than @code{cl-defsubst} "
"(@pxref{Argument Lists,,, cl, Common Lisp Extensions for GNU Emacs Lisp})."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2531
msgid ""
"Like @code{defmacro}, a function inlined with @code{define-inline} inherits "
"the scoping rules, either dynamic or lexical, from the call site.  "
"@xref{Variable Scoping}."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2534
msgid ""
"The following macros should be used in the body of a function defined by "
"@code{define-inline}."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2535
#, no-wrap
msgid "inline-quote expression"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2539
msgid ""
"Quote @var{expression} for @code{define-inline}.  This is similar to the "
"backquote (@pxref{Backquote}), but quotes code and accepts only @code{,}, "
"not @code{,@@}."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2541
#, no-wrap
msgid "inline-letevals (bindings@dots{}) body@dots{}"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2545
msgid ""
"This provides a convenient way to ensure that the arguments to an inlined "
"function are evaluated exactly once, as well as to create local variables."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2549
msgid ""
"It's similar to @code{let} (@pxref{Local Variables}): It sets up local "
"variables as specified by @var{bindings}, and then evaluates @var{body} with "
"those bindings in effect."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2556
msgid ""
"Each element of @var{bindings} should be either a symbol or a list of the "
"form @w{@code{(@var{var} @var{expr})}}; the result is to evaluate @var{expr} "
"and bind @var{var} to the result.  However, when an element of "
"@var{bindings} is just a symbol @var{var}, the result of evaluating "
"@var{var} is re-bound to @var{var} (which is quite different from the way "
"@code{let} works)."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2560
msgid ""
"The tail of @var{bindings} can be either @code{nil} or a symbol which should "
"hold a list of arguments, in which case each argument is evaluated, and the "
"symbol is bound to the resulting list."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2562
#, no-wrap
msgid "inline-const-p expression"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2565
msgid "Return non-@code{nil} if the value of @var{expression} is already known."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2567
#, no-wrap
msgid "inline-const-val expression"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2569
msgid "Return the value of @var{expression}."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2571
#, no-wrap
msgid "inline-error format &rest args"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2573
msgid "Signal an error, formatting @var{args} according to @var{format}."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2576
msgid "Here's an example of using @code{define-inline}:"
msgstr ""

#. type: lisp
#: original_texis/functions.texi:2581
#, no-wrap
msgid ""
"(define-inline myaccessor (obj)\n"
"  (inline-letevals (obj)\n"
"    (inline-quote (if (foo-p ,obj) (aref (cdr ,obj) 3) (aref ,obj 2)))))\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2585
msgid "This is equivalent to"
msgstr ""

#. type: lisp
#: original_texis/functions.texi:2589
#, no-wrap
msgid ""
"(defsubst myaccessor (obj)\n"
"  (if (foo-p obj) (aref (cdr obj) 3) (aref obj 2)))\n"
msgstr ""

#. type: section
#: original_texis/functions.texi:2592
#, no-wrap
msgid "The @code{declare} Form"
msgstr ""

#. type: findex
#: original_texis/functions.texi:2593
#, no-wrap
msgid "declare"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2599
msgid ""
"@code{declare} is a special macro which can be used to add meta properties "
"to a function or macro: for example, marking it as obsolete, or giving its "
"forms a special @key{TAB} indentation convention in Emacs Lisp mode."
msgstr ""

#. type: anchor{#1}
#: original_texis/functions.texi:2601
msgid "Definition of declare"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2601
#, no-wrap
msgid "declare specs@dots{}"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2610
msgid ""
"This macro ignores its arguments and evaluates to @code{nil}; it has no "
"run-time effect.  However, when a @code{declare} form occurs in the "
"@var{declare} argument of a @code{defun} or @code{defsubst} function "
"definition (@pxref{Defining Functions}) or a @code{defmacro} macro "
"definition (@pxref{Defining Macros}), it appends the properties specified by "
"@var{specs} to the function or macro.  This work is specially performed by "
"@code{defun}, @code{defsubst}, and @code{defmacro}."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2614
msgid ""
"Each element in @var{specs} should have the form @code{(@var{property} "
"@var{args}@dots{})}, which should not be quoted.  These have the following "
"effects:"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:2616
#, no-wrap
msgid "@code{advertised-calling-convention} (@code{declare} spec)"
msgstr ""

#. type: item
#: original_texis/functions.texi:2617
#, no-wrap
msgid "(advertised-calling-convention @var{signature} @var{when})"
msgstr ""

#. type: table
#: original_texis/functions.texi:2622
msgid ""
"This acts like a call to @code{set-advertised-calling-convention} "
"(@pxref{Obsolete Functions}); @var{signature} specifies the correct argument "
"list for calling the function or macro, and @var{when} should be a string "
"indicating when the old argument list was first made obsolete."
msgstr ""

#. type: item
#: original_texis/functions.texi:2623
#, no-wrap
msgid "(debug @var{edebug-form-spec})"
msgstr ""

#. type: table
#: original_texis/functions.texi:2626
msgid ""
"This is valid for macros only.  When stepping through the macro with Edebug, "
"use @var{edebug-form-spec}.  @xref{Instrumenting Macro Calls}."
msgstr ""

#. type: item
#: original_texis/functions.texi:2627
#, no-wrap
msgid "(doc-string @var{n})"
msgstr ""

#. type: table
#: original_texis/functions.texi:2632
msgid ""
"This is used when defining a function or macro which itself will be used to "
"define entities like functions, macros, or variables.  It indicates that the "
"@var{n}th argument, if any, should be considered as a documentation string."
msgstr ""

#. type: item
#: original_texis/functions.texi:2633
#, no-wrap
msgid "(indent @var{indent-spec})"
msgstr ""

#. type: table
#: original_texis/functions.texi:2637
msgid ""
"Indent calls to this function or macro according to @var{indent-spec}.  This "
"is typically used for macros, though it works for functions too.  "
"@xref{Indenting Macros}."
msgstr ""

#. type: item
#: original_texis/functions.texi:2638
#, no-wrap
msgid "(interactive-only @var{value})"
msgstr ""

#. type: table
#: original_texis/functions.texi:2641
msgid ""
"Set the function's @code{interactive-only} property to @var{value}.  "
"@xref{The interactive-only property}."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:2642
#, no-wrap
msgid "@code{obsolete} (@code{declare} spec)"
msgstr ""

#. type: item
#: original_texis/functions.texi:2643
#, no-wrap
msgid "(obsolete @var{current-name} @var{when})"
msgstr ""

#. type: table
#: original_texis/functions.texi:2651
msgid ""
"Mark the function or macro as obsolete, similar to a call to "
"@code{make-obsolete} (@pxref{Obsolete Functions}).  @var{current-name} "
"should be a symbol (in which case the warning message says to use that "
"instead), a string (specifying the warning message), or @code{nil} (in which "
"case the warning message gives no extra details).  @var{when} should be a "
"string indicating when the function or macro was first made obsolete."
msgstr ""

#. type: cindex
#: original_texis/functions.texi:2652
#, no-wrap
msgid "compiler macro"
msgstr ""

#. type: item
#: original_texis/functions.texi:2653
#, no-wrap
msgid "(compiler-macro @var{expander})"
msgstr ""

#. type: table
#: original_texis/functions.texi:2661
msgid ""
"This can only be used for functions, and tells the compiler to use "
"@var{expander} as an optimization function.  When encountering a call to the "
"function, of the form @code{(@var{function} @var{args}@dots{})}, the macro "
"expander will call @var{expander} with that form as well as with "
"@var{args}@dots{}, and @var{expander} can either return a new expression to "
"use instead of the function call, or it can return just the form unchanged, "
"to indicate that the function call should be left alone."
msgstr ""

#. type: table
#: original_texis/functions.texi:2666
msgid ""
"When @var{expander} is a lambda form it should be written with a single "
"argument (i.e., be of the form @code{(lambda (@var{arg})  @var{body})}) "
"because the function's formal arguments are automatically added to the "
"lambda's list of arguments for you."
msgstr ""

#. type: item
#: original_texis/functions.texi:2667
#, no-wrap
msgid "(gv-expander @var{expander})"
msgstr ""

#. type: table
#: original_texis/functions.texi:2673
msgid ""
"Declare @var{expander} to be the function to handle calls to the macro (or "
"function) as a generalized variable, similarly to "
"@code{gv-define-expander}.  @var{expander} can be a symbol or it can be of "
"the form @code{(lambda (@var{arg}) @var{body})} in which case that function "
"will additionally have access to the macro (or function)'s arguments."
msgstr ""

#. type: item
#: original_texis/functions.texi:2674
#, no-wrap
msgid "(gv-setter @var{setter})"
msgstr ""

#. type: table
#: original_texis/functions.texi:2681
msgid ""
"Declare @var{setter} to be the function to handle calls to the macro (or "
"function) as a generalized variable.  @var{setter} can be a symbol in which "
"case it will be passed to @code{gv-define-simple-setter}, or it can be of "
"the form @code{(lambda (@var{arg}) @var{body})} in which case that function "
"will additionally have access to the macro (or function)'s arguments and it "
"will be passed to @code{gv-define-setter}."
msgstr ""

#. type: item
#: original_texis/functions.texi:2682
#, no-wrap
msgid "(completion @var{completion-predicate})"
msgstr ""

#. type: table
#: original_texis/functions.texi:2692
msgid ""
"Declare @var{completion-predicate} as a function to determine whether to "
"include a function's symbol in the list of functions when asking for "
"completions in @kbd{M-x}.  This predicate function will only be called when "
"@code{read-extended-command-predicate} is customized to "
"@code{command-completion-default-include-p}; by default the value of "
"@code{read-extended-command-predicate} is nil (@pxref{Interactive Call, "
"execute-extended-command}).  The predicate @var{completion-predicate} is "
"called with two arguments: the function's symbol and the current buffer."
msgstr ""

#. type: item
#: original_texis/functions.texi:2693
#, no-wrap
msgid "(modes @var{modes})"
msgstr ""

#. type: table
#: original_texis/functions.texi:2696
msgid ""
"Specify that this command is meant to be applicable only to specified "
"@var{modes}.  @xref{Command Modes}."
msgstr ""

#. type: item
#: original_texis/functions.texi:2697
#, no-wrap
msgid "(interactive-args @var{arg} ...)"
msgstr ""

#. type: table
#: original_texis/functions.texi:2700
msgid ""
"Specify the arguments that should be stored for @code{repeat-command}.  Each "
"@var{arg} is on the form @code{@var{argument-name} @var{form}}."
msgstr ""

#. type: item
#: original_texis/functions.texi:2701
#, no-wrap
msgid "(pure @var{val})"
msgstr ""

#. type: table
#: original_texis/functions.texi:2705
msgid ""
"If @var{val} is non-@code{nil}, this function is @dfn{pure} (@pxref{What Is "
"a Function}).  This is the same as the @code{pure} property of the "
"function's symbol (@pxref{Standard Properties})."
msgstr ""

#. type: item
#: original_texis/functions.texi:2706
#, no-wrap
msgid "(side-effect-free @var{val})"
msgstr ""

#. type: table
#: original_texis/functions.texi:2711
msgid ""
"If @var{val} is non-@code{nil}, this function is free of side effects, so "
"the byte compiler can ignore calls whose value is ignored.  This is the same "
"as the @code{side-effect-free} property of the function's symbol, "
"@pxref{Standard Properties}."
msgstr ""

#. type: item
#: original_texis/functions.texi:2712
#, no-wrap
msgid "(important-return-value @var{val})"
msgstr ""

#. type: table
#: original_texis/functions.texi:2717
msgid ""
"If @var{val} is non-@code{nil}, the byte compiler will warn about calls to "
"this function that do not use the returned value.  This is the same as the "
"@code{important-return-value} property of the function's symbol, "
"@pxref{Standard Properties}."
msgstr ""

#. type: item
#: original_texis/functions.texi:2718
#, no-wrap
msgid "(speed @var{n})"
msgstr ""

#. type: table
#: original_texis/functions.texi:2725
msgid ""
"Specify the value of @code{native-comp-speed} in effect for native "
"compilation of this function (@pxref{Native-Compilation Variables}).  This "
"allows function-level control of the optimization level used for native code "
"emitted for the function.  In particular, if @var{n} is @minus{}1, native "
"compilation of the function will emit bytecode instead of native code for "
"the function."
msgstr ""

#. type: item
#: original_texis/functions.texi:2726
#, no-wrap
msgid "(safety @var{n})"
msgstr ""

#. type: table
#: original_texis/functions.texi:2731
msgid ""
"Specify the value of @code{compilation-safety} in effect for this function.  "
"This allows function-level control of the safety level used for the code "
"emitted for the function (@pxref{Native-Compilation Variables})."
msgstr ""

#. type: item
#: original_texis/functions.texi:2732
#, no-wrap
msgid "(ftype @var{type} &optional @var{function})"
msgstr ""

#. type: table
#: original_texis/functions.texi:2738
msgid ""
"Declare @var{type} to be the type of this function.  This is used for "
"documentation by @code{describe-function}.  Also it can be used by the "
"native compiler (@pxref{Native Compilation}) for improving code generation "
"and for deriving more precisely the type of other functions without type "
"declaration."
msgstr ""

#. type: table
#: original_texis/functions.texi:2743
msgid ""
"@var{type} is a type specifier in the form @w{@code{(function (ARG-1-TYPE "
"... ARG-N-TYPE) RETURN-TYPE)}}.  Argument types can be interleaved with "
"symbols @code{&optional} and @code{&rest} to match the function's arguments "
"(@pxref{Argument List})."
msgstr ""

#. type: table
#: original_texis/functions.texi:2745
msgid "@var{function} if present should be the name of function being defined."
msgstr ""

#. type: table
#: original_texis/functions.texi:2749
msgid ""
"Here's an example of using @code{ftype} inside @code{declare} to declare a "
"function @code{positive-p} that takes an argument of type @var{number} and "
"return a @var{boolean}:"
msgstr ""

#. type: group
#: original_texis/functions.texi:2756
#, no-wrap
msgid ""
"(defun positive-p (x)\n"
"  (declare (ftype (function (number) boolean)))\n"
"  (when (> x 0)\n"
"    t))\n"
msgstr ""

#. type: table
#: original_texis/functions.texi:2763
msgid ""
"Similarly this declares a function @code{cons-or-number} that: expects a "
"first argument being a @var{cons} or a @var{number}, a second optional "
"argument of type @var{string} and return one of the symbols @code{is-cons} "
"or @code{is-number}:"
msgstr ""

#. type: group
#: original_texis/functions.texi:2774
#, no-wrap
msgid ""
"(defun cons-or-number (x &optional err-msg)\n"
"  (declare (ftype (function ((or cons number) &optional string)\n"
"\t\t\t    (member is-cons is-number))))\n"
"  (if (consp x)\n"
"      'is-cons\n"
"    (if (numberp x)\n"
"\t'is-number\n"
"      (error (or err-msg \"Unexpected input\")))))\n"
msgstr ""

#. type: table
#: original_texis/functions.texi:2778
msgid "For description of additional types, see @ref{Lisp Data Types})."
msgstr ""

#. type: table
#: original_texis/functions.texi:2786
msgid ""
"Declaring a function with an incorrect type produces undefined behavior and "
"could lead to unexpected results or might even crash Emacs when "
"natively-compiled code is loaded, if it was compiled with "
"@code{compilation-safety} level of zero (@pxref{compilation-safety}).  Note "
"also that when redefining (or advising) a type-declared function, the "
"replacement should respect the original signature to avoid such undefined "
"behavior."
msgstr ""

#. type: item
#: original_texis/functions.texi:2787
#, no-wrap
msgid "no-font-lock-keyword"
msgstr ""

#. type: table
#: original_texis/functions.texi:2791
msgid ""
"This is valid for macros only.  Macros with this declaration are highlighted "
"by font-lock (@pxref{Font Lock Mode}) as normal functions, not specially as "
"macros."
msgstr ""

#. type: section
#: original_texis/functions.texi:2796
#, no-wrap
msgid "Telling the Compiler that a Function is Defined"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:2797
#, no-wrap
msgid "function declaration"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:2798
#, no-wrap
msgid "declaring functions"
msgstr ""

#. type: findex
#: original_texis/functions.texi:2799
#, no-wrap
msgid "declare-function"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2806
msgid ""
"Byte-compiling a file often produces warnings about functions that the "
"compiler doesn't know about (@pxref{Compiler Errors}).  Sometimes this "
"indicates a real problem, but usually the functions in question are defined "
"in other files which would be loaded if that code is run.  For example, "
"byte-compiling @file{simple.el} used to warn:"
msgstr ""

#. type: example
#: original_texis/functions.texi:2810
#, no-wrap
msgid ""
"simple.el:8727:1:Warning: the function ‘shell-mode’ is not known to be\n"
"    defined.\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2818
msgid ""
"In fact, @code{shell-mode} is used only in a function that executes "
"@code{(require 'shell)} before calling @code{shell-mode}, so "
"@code{shell-mode} will be defined properly at run-time.  When you know that "
"such a warning does not indicate a real problem, it is good to suppress the "
"warning.  That makes new warnings which might mean real problems more "
"visible.  You do that with @code{declare-function}."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2821
msgid ""
"All you need to do is add a @code{declare-function} statement before the "
"first use of the function in question:"
msgstr ""

#. type: example
#: original_texis/functions.texi:2824
#, no-wrap
msgid "(declare-function shell-mode \"shell\" ())\n"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2829
msgid ""
"This says that @code{shell-mode} is defined in @file{shell.el} (the "
"@samp{.el} can be omitted).  The compiler takes for granted that that file "
"really defines the function, and does not check."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2836
msgid ""
"The optional third argument specifies the argument list of "
"@code{shell-mode}.  In this case, it takes no arguments (@code{nil} is "
"different from not specifying a value).  In other cases, this might be "
"something like @code{(file &optional overwrite)}.  You don't have to specify "
"the argument list, but if you do the byte compiler can check that the calls "
"match the declaration."
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2837
#, no-wrap
msgid "declare-function function file &optional arglist fileonly"
msgstr ""

#. type: defmac
#: original_texis/functions.texi:2849
msgid ""
"Tell the byte compiler to assume that @var{function} is defined in the file "
"@var{file}.  The optional third argument @var{arglist} is either @code{t}, "
"meaning the argument list is unspecified, or a list of formal parameters in "
"the same style as @code{defun} (including the parentheses).  An omitted "
"@var{arglist} defaults to @code{t}, not @code{nil}; this is atypical "
"behavior for omitted arguments, and it means that to supply a fourth but not "
"third argument one must specify @code{t} for the third-argument placeholder "
"instead of the usual @code{nil}.  The optional fourth argument "
"@var{fileonly} non-@code{nil} means check only that @var{file} exists, not "
"that it actually defines @var{function}."
msgstr ""

#. type: findex
#: original_texis/functions.texi:2851
#, no-wrap
msgid "check-declare-file"
msgstr ""

#. type: findex
#: original_texis/functions.texi:2852
#, no-wrap
msgid "check-declare-directory"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2858
msgid ""
"To verify that these functions really are declared where "
"@code{declare-function} says they are, use @code{check-declare-file} to "
"check all @code{declare-function} calls in one source file, or use "
"@code{check-declare-directory} check all the files in and under a certain "
"directory."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2863
msgid ""
"These commands find the file that ought to contain a function's definition "
"using @code{locate-library}; if that finds no file, they expand the "
"definition file name relative to the directory of the file that contains the "
"@code{declare-function} call."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2868
msgid ""
"You can also say that a function is a primitive by specifying a file name "
"ending in @samp{.c} or @samp{.m}.  This is useful only when you call a "
"primitive that is defined only on certain systems.  Most primitives are "
"always defined, so they will never give you a warning."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2873
msgid ""
"Sometimes a file will optionally use functions from an external package.  If "
"you prefix the filename in the @code{declare-function} statement with "
"@samp{ext:}, then it will be checked if it is found, otherwise skipped "
"without error."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2882
msgid ""
"There are some function definitions that @samp{check-declare} does not "
"understand (e.g., @code{defstruct} and some other macros).  In such cases, "
"you can pass a non-@code{nil} @var{fileonly} argument to "
"@code{declare-function}, meaning to only check that the file exists, not "
"that it actually defines the function.  Note that to do this without having "
"to specify an argument list, you should set the @var{arglist} argument to "
"@code{t} (because @code{nil} means an empty argument list, as opposed to an "
"unspecified one)."
msgstr ""

#. type: section
#: original_texis/functions.texi:2884
#, no-wrap
msgid "Determining whether a Function is Safe to Call"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:2885
#, no-wrap
msgid "function safety"
msgstr ""

#. type: cindex
#: original_texis/functions.texi:2886
#, no-wrap
msgid "safety of functions"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2895
msgid ""
"Some major modes, such as SES, call functions that are stored in user "
"files.  (@xref{Top, Simple Emacs Spreadsheet,,ses}, for more information on "
"SES@.)  User files sometimes have poor pedigrees---you can get a spreadsheet "
"from someone you've just met, or you can get one through email from someone "
"you've never met.  So it is risky to call a function whose source code is "
"stored in a user file until you have determined that it is safe."
msgstr ""

#. type: defun
#: original_texis/functions.texi:2896
#, no-wrap
msgid "unsafep form &optional unsafep-vars"
msgstr ""

#. type: defun
#: original_texis/functions.texi:2903
msgid ""
"Returns @code{nil} if @var{form} is a @dfn{safe} Lisp expression, or returns "
"a list that describes why it might be unsafe.  The argument "
"@var{unsafep-vars} is a list of symbols known to have temporary bindings at "
"this point; it is mainly used for internal recursive calls.  The current "
"buffer is an implicit argument, which provides a list of buffer-local "
"bindings."
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2914
msgid ""
"Being quick and simple, @code{unsafep} does a very light analysis and "
"rejects many Lisp expressions that are actually safe.  There are no known "
"cases where @code{unsafep} returns @code{nil} for an unsafe expression.  "
"However, a safe Lisp expression can return a string with a @code{display} "
"property, containing an associated Lisp expression to be executed after the "
"string is inserted into a buffer.  This associated expression can be a "
"virus.  In order to be safe, you must delete properties from all strings "
"calculated by user code before inserting them into buffers."
msgstr ""

#. type: item
#: original_texis/functions.texi:2922
#, no-wrap
msgid "Safe expression"
msgstr ""

#. type: itemize
#: original_texis/functions.texi:2926
#, no-wrap
msgid "An atom or quoted thing.\n"
msgstr ""

#. type: itemize
#: original_texis/functions.texi:2929
#, no-wrap
msgid ""
"A call to a safe function (see below), if all its arguments are\n"
"safe expressions.\n"
msgstr ""

#. type: itemize
#: original_texis/functions.texi:2934
#, no-wrap
msgid ""
"One of the special forms @code{and}, @code{catch}, @code{cond},\n"
"@code{if}, @code{or}, @code{prog1}, @code{prog2}, @code{progn},\n"
"@code{while}, and @code{unwind-protect}], if all its arguments are\n"
"safe.\n"
msgstr ""

#. type: itemize
#: original_texis/functions.texi:2939
#, no-wrap
msgid ""
"A form that creates temporary bindings (@code{condition-case},\n"
"@code{dolist}, @code{dotimes}, @code{lambda}, @code{let}, or\n"
"@code{let*}), if all args are safe and the symbols to be bound are not\n"
"explicitly risky (@pxref{File Local Variables}).\n"
msgstr ""

#. type: itemize
#: original_texis/functions.texi:2944
#, no-wrap
msgid ""
"An assignment using @code{add-to-list}, @code{setq}, @code{push}, or\n"
"@code{pop}, if all args are safe and the symbols to be assigned are\n"
"not explicitly risky and they already have temporary or buffer-local\n"
"bindings.\n"
msgstr ""

#. type: itemize
#: original_texis/functions.texi:2947
#, no-wrap
msgid ""
"One of [apply, mapc, mapcar, mapconcat] if the first argument is a\n"
"safe explicit lambda and the other args are safe expressions.\n"
msgstr ""

#. type: item
#: original_texis/functions.texi:2949
#, no-wrap
msgid "Safe function"
msgstr ""

#. type: itemize
#: original_texis/functions.texi:2953
#, no-wrap
msgid "A lambda containing safe expressions.\n"
msgstr ""

#. type: itemize
#: original_texis/functions.texi:2955
#, no-wrap
msgid "A symbol on the list @code{safe-functions}, so the user says it's safe.\n"
msgstr ""

#. type: itemize
#: original_texis/functions.texi:2957
#, no-wrap
msgid "A symbol with a non-@code{nil} @code{side-effect-free} property.\n"
msgstr ""

#. type: itemize
#: original_texis/functions.texi:2962
#, no-wrap
msgid ""
"A symbol with a non-@code{nil} @code{safe-function} property.  The\n"
"value @code{t} indicates a function that is safe but has innocuous\n"
"side effects.  Other values will someday indicate functions with\n"
"classes of side effects that are not always safe.\n"
msgstr ""

#. type: table
#: original_texis/functions.texi:2968
#, no-wrap
msgid ""
"The @code{side-effect-free} and @code{safe-function} properties are\n"
"provided for built-in functions and for low-level functions and macros\n"
"defined in @file{subr.el}.  You can assign these properties for the\n"
"functions you write.\n"
msgstr ""

#. type: section
#: original_texis/functions.texi:2972
#, no-wrap
msgid "Other Topics Related to Functions"
msgstr ""

#. type: Plain text
#: original_texis/functions.texi:2977
msgid ""
"Here is a table of several functions that do things related to function "
"calling and function definitions.  They are documented elsewhere, but we "
"provide cross references here."
msgstr ""

#. type: item
#: original_texis/functions.texi:2979
#, no-wrap
msgid "apply"
msgstr ""

#. type: table
#: original_texis/functions.texi:2981 original_texis/functions.texi:3002 original_texis/functions.texi:3008
msgid "See @ref{Calling Functions}."
msgstr ""

#. type: item
#: original_texis/functions.texi:2982
#, no-wrap
msgid "autoload"
msgstr ""

#. type: table
#: original_texis/functions.texi:2984
msgid "See @ref{Autoload}."
msgstr ""

#. type: item
#: original_texis/functions.texi:2985
#, no-wrap
msgid "call-interactively"
msgstr ""

#. type: table
#: original_texis/functions.texi:2987 original_texis/functions.texi:2993
msgid "See @ref{Interactive Call}."
msgstr ""

#. type: item
#: original_texis/functions.texi:2988
#, no-wrap
msgid "called-interactively-p"
msgstr ""

#. type: table
#: original_texis/functions.texi:2990 original_texis/functions.texi:3017
msgid "See @ref{Distinguish Interactive}."
msgstr ""

#. type: item
#: original_texis/functions.texi:2991
#, no-wrap
msgid "commandp"
msgstr ""

#. type: item
#: original_texis/functions.texi:2994
#, no-wrap
msgid "documentation"
msgstr ""

#. type: table
#: original_texis/functions.texi:2996
msgid "See @ref{Accessing Documentation}."
msgstr ""

#. type: item
#: original_texis/functions.texi:2997
#, no-wrap
msgid "eval"
msgstr ""

#. type: table
#: original_texis/functions.texi:2999
msgid "See @ref{Eval}."
msgstr ""

#. type: item
#: original_texis/functions.texi:3000
#, no-wrap
msgid "funcall"
msgstr ""

#. type: item
#: original_texis/functions.texi:3003
#, no-wrap
msgid "function"
msgstr ""

#. type: table
#: original_texis/functions.texi:3005
msgid "See @ref{Anonymous Functions}."
msgstr ""

#. type: item
#: original_texis/functions.texi:3006
#, no-wrap
msgid "ignore"
msgstr ""

#. type: item
#: original_texis/functions.texi:3009
#, no-wrap
msgid "indirect-function"
msgstr ""

#. type: table
#: original_texis/functions.texi:3011
msgid "See @ref{Function Indirection}."
msgstr ""

#. type: item
#: original_texis/functions.texi:3012
#, no-wrap
msgid "interactive"
msgstr ""

#. type: table
#: original_texis/functions.texi:3014
msgid "See @ref{Using Interactive}."
msgstr ""

#. type: item
#: original_texis/functions.texi:3015
#, no-wrap
msgid "interactive-p"
msgstr ""

#. type: item
#: original_texis/functions.texi:3018
#, no-wrap
msgid "mapatoms"
msgstr ""

#. type: table
#: original_texis/functions.texi:3020
msgid "See @ref{Creating Symbols}."
msgstr ""

#. type: item
#: original_texis/functions.texi:3021
#, no-wrap
msgid "mapcar"
msgstr ""

#. type: table
#: original_texis/functions.texi:3023 original_texis/functions.texi:3029
msgid "See @ref{Mapping Functions}."
msgstr ""

#. type: item
#: original_texis/functions.texi:3024
#, no-wrap
msgid "map-char-table"
msgstr ""

#. type: table
#: original_texis/functions.texi:3026
msgid "See @ref{Char-Tables}."
msgstr ""

#. type: item
#: original_texis/functions.texi:3027
#, no-wrap
msgid "mapconcat"
msgstr ""

#. type: item
#: original_texis/functions.texi:3030
#, no-wrap
msgid "undefined"
msgstr ""

#. type: table
#: original_texis/functions.texi:3032
msgid "See @ref{Functions for Key Lookup}."
msgstr ""
