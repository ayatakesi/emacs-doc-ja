# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2024-10-06 07:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: node
#: original_texis/customize.texi:5
#, no-wrap
msgid "Customization"
msgstr ""

#. type: chapter
#: original_texis/customize.texi:6
#, no-wrap
msgid "Customization Settings"
msgstr ""

#. type: cindex
#: original_texis/customize.texi:8
#, no-wrap
msgid "customization item"
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:14
msgid ""
"Users of Emacs can customize variables and faces without writing Lisp code, "
"by using the Customize interface.  @xref{Easy Customization,,, emacs, The "
"GNU Emacs Manual}.  This chapter describes how to define @dfn{customization "
"items} that users can interact with through the Customize interface."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:17
msgid ""
"Customization items include customizable variables, which are defined with "
"the"
msgstr ""

#. type: ifinfo
#: original_texis/customize.texi:19
msgid "@code{defcustom} macro (@pxref{Variable Definitions});"
msgstr ""

#. type: ifnotinfo
#: original_texis/customize.texi:22
msgid "@code{defcustom} macro;"
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:26
msgid ""
"customizable faces, which are defined with @code{defface} (described "
"separately in @ref{Defining Faces}); and @dfn{customization groups}, defined "
"with"
msgstr ""

#. type: ifinfo
#: original_texis/customize.texi:28
msgid "@code{defgroup} (@pxref{Group Definitions}),"
msgstr ""

#. type: ifnotinfo
#: original_texis/customize.texi:31
msgid "@code{defgroup},"
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:33
msgid "which act as containers for groups of related customization items."
msgstr ""

#. type: node
#: original_texis/customize.texi:42 original_texis/customize.texi:44
#, no-wrap
msgid "Common Keywords"
msgstr ""

#. type: menuentry
#: original_texis/customize.texi:42
msgid "Common keyword arguments for all kinds of customization declarations."
msgstr ""

#. type: node
#: original_texis/customize.texi:42 original_texis/customize.texi:212
#, no-wrap
msgid "Group Definitions"
msgstr ""

#. type: menuentry
#: original_texis/customize.texi:42
msgid "Writing customization group definitions."
msgstr ""

#. type: node
#: original_texis/customize.texi:42 original_texis/customize.texi:285
#, no-wrap
msgid "Variable Definitions"
msgstr ""

#. type: menuentry
#: original_texis/customize.texi:42
msgid "Declaring user options."
msgstr ""

#. type: section
#: original_texis/customize.texi:42 original_texis/customize.texi:543 original_texis/customize.texi:544
#, no-wrap
msgid "Customization Types"
msgstr ""

#. type: menuentry
#: original_texis/customize.texi:42
msgid "Specifying the type of a user option."
msgstr ""

#. type: section
#: original_texis/customize.texi:42 original_texis/customize.texi:1365 original_texis/customize.texi:1366
#, no-wrap
msgid "Applying Customizations"
msgstr ""

#. type: menuentry
#: original_texis/customize.texi:42
msgid "Functions to apply customization settings."
msgstr ""

#. type: section
#: original_texis/customize.texi:42 original_texis/customize.texi:1422 original_texis/customize.texi:1423
#, no-wrap
msgid "Custom Themes"
msgstr ""

#. type: menuentry
#: original_texis/customize.texi:42
msgid "Writing Custom themes."
msgstr ""

#. type: section
#: original_texis/customize.texi:45
#, no-wrap
msgid "Common Item Keywords"
msgstr ""

#. type: cindex
#: original_texis/customize.texi:47
#, no-wrap
msgid "customization keywords"
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:53
msgid ""
"The customization declarations that we will describe in the next few "
"sections---@code{defcustom}, @code{defgroup}, etc.---all accept keyword "
"arguments (@pxref{Constant Variables}) for specifying various information.  "
"This section describes keywords that apply to all types of customization "
"declarations."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:58
msgid ""
"All of these keywords, except @code{:tag}, can be used more than once in a "
"given item.  Each use of the keyword has an independent effect.  The keyword "
"@code{:tag} is an exception because any given item can only display one "
"name."
msgstr ""

#. type: item
#: original_texis/customize.texi:60
#, no-wrap
msgid ":tag @var{label}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:61
#, no-wrap
msgid "tag@r{, customization keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:66
msgid ""
"Use @var{label}, a string, instead of the item's name, to label the item in "
"customization menus and buffers.  @strong{Don't use a tag which is "
"substantially different from the item's real name; that would cause "
"confusion.}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:67
#, no-wrap
msgid "group@r{, customization keyword}"
msgstr ""

#. type: item
#: original_texis/customize.texi:68
#, no-wrap
msgid ":group @var{group}"
msgstr ""

#. type: table
#: original_texis/customize.texi:72
msgid ""
"Put this customization item in group @var{group}.  If this keyword is "
"missing from a customization item, it'll be placed in the same group that "
"was last defined (in the current file)."
msgstr ""

#. type: table
#: original_texis/customize.texi:75
msgid ""
"When you use @code{:group} in a @code{defgroup}, it makes the new group a "
"subgroup of @var{group}."
msgstr ""

#. type: table
#: original_texis/customize.texi:79
msgid ""
"If you use this keyword more than once, you can put a single item into more "
"than one group.  Displaying any of those groups will show this item.  Please "
"don't overdo this, since the result would be annoying."
msgstr ""

#. type: item
#: original_texis/customize.texi:80
#, no-wrap
msgid ":link @var{link-data}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:81
#, no-wrap
msgid "link@r{, customization keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:85
msgid ""
"Include an external link after the documentation string for this item.  This "
"is a sentence containing a button that references some other documentation."
msgstr ""

#. type: table
#: original_texis/customize.texi:87
msgid "There are several alternatives you can use for @var{link-data}:"
msgstr ""

#. type: item
#: original_texis/customize.texi:89
#, no-wrap
msgid "(custom-manual @var{info-node})"
msgstr ""

#. type: table
#: original_texis/customize.texi:94
msgid ""
"Link to an Info node; @var{info-node} is a string which specifies the node "
"name, as in @code{\"(emacs)Top\"}.  The link appears as @samp{[Manual]} in "
"the customization buffer and enters the built-in Info reader on "
"@var{info-node}."
msgstr ""

#. type: item
#: original_texis/customize.texi:95
#, no-wrap
msgid "(info-link @var{info-node})"
msgstr ""

#. type: table
#: original_texis/customize.texi:98
msgid ""
"Like @code{custom-manual} except that the link appears in the customization "
"buffer with the Info node name."
msgstr ""

#. type: item
#: original_texis/customize.texi:99
#, no-wrap
msgid "(url-link @var{url})"
msgstr ""

#. type: table
#: original_texis/customize.texi:104
msgid ""
"Link to a web page; @var{url} is a string which specifies the "
"@acronym{URL}.  The link appears in the customization buffer as @var{url} "
"and invokes the WWW browser specified by @code{browse-url-browser-function}."
msgstr ""

#. type: item
#: original_texis/customize.texi:105
#, no-wrap
msgid "(emacs-commentary-link @var{library})"
msgstr ""

#. type: table
#: original_texis/customize.texi:108
msgid ""
"Link to the commentary section of a library; @var{library} is a string which "
"specifies the library name.  @xref{Library Headers}."
msgstr ""

#. type: item
#: original_texis/customize.texi:109
#, no-wrap
msgid "(emacs-library-link @var{library})"
msgstr ""

#. type: table
#: original_texis/customize.texi:112
msgid ""
"Link to an Emacs Lisp library file; @var{library} is a string which "
"specifies the library name."
msgstr ""

#. type: item
#: original_texis/customize.texi:113
#, no-wrap
msgid "(file-link @var{file})"
msgstr ""

#. type: table
#: original_texis/customize.texi:116
msgid ""
"Link to a file; @var{file} is a string which specifies the name of the file "
"to visit with @code{find-file} when the user invokes this link."
msgstr ""

#. type: item
#: original_texis/customize.texi:117
#, no-wrap
msgid "(function-link @var{function})"
msgstr ""

#. type: table
#: original_texis/customize.texi:121
msgid ""
"Link to the documentation of a function; @var{function} is a string which "
"specifies the name of the function to describe with @code{describe-function} "
"when the user invokes this link."
msgstr ""

#. type: item
#: original_texis/customize.texi:122
#, no-wrap
msgid "(variable-link @var{variable})"
msgstr ""

#. type: table
#: original_texis/customize.texi:126
msgid ""
"Link to the documentation of a variable; @var{variable} is a string which "
"specifies the name of the variable to describe with @code{describe-variable} "
"when the user invokes this link."
msgstr ""

#. type: item
#: original_texis/customize.texi:127
#, no-wrap
msgid "(face-link @var{face})"
msgstr ""

#. type: table
#: original_texis/customize.texi:131
msgid ""
"Link to the documentation of a face; @var{face} is a string which specifies "
"the name of the face to describe with @code{describe-face} when the user "
"invokes this link."
msgstr ""

#. type: item
#: original_texis/customize.texi:132
#, no-wrap
msgid "(custom-group-link @var{group})"
msgstr ""

#. type: table
#: original_texis/customize.texi:135
msgid ""
"Link to another customization group.  Invoking it creates a new "
"customization buffer for @var{group}."
msgstr ""

#. type: table
#: original_texis/customize.texi:141
msgid ""
"You can specify the text to use in the customization buffer by adding "
"@code{:tag @var{name}} after the first element of the @var{link-data}; for "
"example, @code{(info-link :tag \"foo\" \"(emacs)Top\")} makes a link to the "
"Emacs manual which appears in the buffer as @samp{foo}."
msgstr ""

#. type: table
#: original_texis/customize.texi:143
msgid "You can use this keyword more than once, to add multiple links."
msgstr ""

#. type: item
#: original_texis/customize.texi:144
#, no-wrap
msgid ":load @var{file}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:145
#, no-wrap
msgid "load@r{, customization keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:149
msgid ""
"Load file @var{file} (a string) before displaying this customization item "
"(@pxref{Loading}).  Loading is done with @code{load}, and only if the file "
"is not already loaded."
msgstr ""

#. type: item
#: original_texis/customize.texi:150
#, no-wrap
msgid ":require @var{feature}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:151
#, no-wrap
msgid "require@r{, customization keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:154
msgid ""
"Execute @code{(require '@var{feature})} when your saved customizations set "
"the value of this item.  @var{feature} should be a symbol."
msgstr ""

#. type: table
#: original_texis/customize.texi:158
msgid ""
"The most common reason to use @code{:require} is when a variable enables a "
"feature such as a minor mode, and just setting the variable won't have any "
"effect unless the code which implements the mode is loaded."
msgstr ""

#. type: item
#: original_texis/customize.texi:159
#, no-wrap
msgid ":version @var{version}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:160
#, no-wrap
msgid "version@r{, customization keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:164
msgid ""
"This keyword specifies that the item was first introduced in Emacs version "
"@var{version}, or that its default value was changed in that version.  The "
"value @var{version} must be a string."
msgstr ""

#. type: item
#: original_texis/customize.texi:165
#, no-wrap
msgid ":package-version '(@var{package} . @var{version})"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:166
#, no-wrap
msgid "package-version@r{, customization keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:171
msgid ""
"This keyword specifies that the item was first introduced in @var{package} "
"version @var{version}, or that its meaning or default value was changed in "
"that version.  This keyword takes priority over @code{:version}."
msgstr ""

#. type: table
#: original_texis/customize.texi:177
msgid ""
"@var{package} should be the official name of the package, as a symbol (e.g., "
"@code{MH-E}).  @var{version} should be a string.  If the package "
"@var{package} is released as part of Emacs, @var{package} and @var{version} "
"should appear in the value of @code{customize-package-emacs-version-alist}."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:182
msgid ""
"Packages distributed as part of Emacs that use the @code{:package-version} "
"keyword must also update the @code{customize-package-emacs-version-alist} "
"variable."
msgstr ""

#. type: defvar
#: original_texis/customize.texi:183
#, no-wrap
msgid "customize-package-emacs-version-alist"
msgstr ""

#. type: defvar
#: original_texis/customize.texi:187
msgid ""
"This alist provides a mapping for the versions of Emacs that are associated "
"with versions of a package listed in the @code{:package-version} keyword.  "
"Its elements are:"
msgstr ""

#. type: example
#: original_texis/customize.texi:190
#, no-wrap
msgid "(@var{package} (@var{pversion} . @var{eversion})@dots{})\n"
msgstr ""

#. type: defvar
#: original_texis/customize.texi:196
msgid ""
"For each @var{package}, which is a symbol, there are one or more elements "
"that contain a package version @var{pversion} with an associated Emacs "
"version @var{eversion}.  These versions are strings.  For example, the MH-E "
"package updates this alist with the following:"
msgstr ""

#. type: smallexample
#: original_texis/customize.texi:204
#, no-wrap
msgid ""
"(add-to-list 'customize-package-emacs-version-alist\n"
"             '(MH-E (\"6.0\" . \"22.1\") (\"6.1\" . \"22.1\") (\"7.0\" "
". \"22.1\")\n"
"                    (\"7.1\" . \"22.1\") (\"7.2\" . \"22.1\") (\"7.3\" "
". \"22.1\")\n"
"                    (\"7.4\" . \"22.1\") (\"8.0\" . \"22.1\")))\n"
msgstr ""

#. type: defvar
#: original_texis/customize.texi:210
msgid ""
"The value of @var{package} needs to be unique and it needs to match the "
"@var{package} value appearing in the @code{:package-version} keyword.  Since "
"the user might see the value in an error message, a good choice is the "
"official name of the package, such as MH-E or Gnus."
msgstr ""

#. type: section
#: original_texis/customize.texi:213
#, no-wrap
msgid "Defining Customization Groups"
msgstr ""

#. type: cindex
#: original_texis/customize.texi:214
#, no-wrap
msgid "define customization group"
msgstr ""

#. type: cindex
#: original_texis/customize.texi:215
#, no-wrap
msgid "customization groups, defining"
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:225
msgid ""
"Each Emacs Lisp package should have one main customization group which "
"contains all the options, faces and other groups in the package.  If the "
"package has a small number of options and faces, use just one group and put "
"everything in it.  When there are more than twenty or so options and faces, "
"then you should structure them into subgroups, and put the subgroups under "
"the package's main customization group.  It is OK to put some of the options "
"and faces in the package's main group alongside the subgroups."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:231
msgid ""
"The package's main or only group should be a member of one or more of the "
"standard customization groups.  (To display the full list of them, use "
"@kbd{M-x customize}.)  Choose one or more of them (but not too many), and "
"add your group to each of them using the @code{:group} keyword."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:233
msgid "The way to declare new customization groups is with @code{defgroup}."
msgstr ""

#. type: defmac
#: original_texis/customize.texi:234
#, no-wrap
msgid "defgroup group members doc [keyword value]@dots{}"
msgstr ""

#. type: defmac
#: original_texis/customize.texi:238
msgid ""
"Declare @var{group} as a customization group containing @var{members}.  Do "
"not quote the symbol @var{group}.  The argument @var{doc} specifies the "
"documentation string for the group."
msgstr ""

#. type: defmac
#: original_texis/customize.texi:243
msgid ""
"The argument @var{members} is a list specifying an initial set of "
"customization items to be members of the group.  However, most often "
"@var{members} is @code{nil}, and you specify the group's members by using "
"the @code{:group} keyword when defining those members."
msgstr ""

#. type: defmac
#: original_texis/customize.texi:249
msgid ""
"If you want to specify group members through @var{members}, each element "
"should have the form @code{(@var{name} @var{widget})}.  Here @var{name} is a "
"symbol, and @var{widget} is a widget type for editing that symbol.  Useful "
"widgets are @code{custom-variable} for a variable, @code{custom-face} for a "
"face, and @code{custom-group} for a group."
msgstr ""

#. type: defmac
#: original_texis/customize.texi:253
msgid ""
"When you introduce a new group into Emacs, use the @code{:version} keyword "
"in the @code{defgroup}; then you need not use it for the individual members "
"of the group."
msgstr ""

#. type: defmac
#: original_texis/customize.texi:256
msgid ""
"In addition to the common keywords (@pxref{Common Keywords}), you can also "
"use this keyword in @code{defgroup}:"
msgstr ""

#. type: item
#: original_texis/customize.texi:258
#, no-wrap
msgid ":prefix @var{prefix}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:259
#, no-wrap
msgid "prefix@r{, @code{defgroup} keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:264
msgid ""
"If the name of an item in the group starts with @var{prefix}, and the "
"customizable variable @code{custom-unlispify-remove-prefixes} is "
"non-@code{nil}, the item's tag will omit @var{prefix}.  A group can have any "
"number of prefixes."
msgstr ""

#. type: cindex
#: original_texis/customize.texi:266
#, no-wrap
msgid "@code{custom-group} property"
msgstr ""

#. type: defmac
#: original_texis/customize.texi:273
msgid ""
"The variables, faces, and subgroups of a group are stored in the "
"@code{custom-group} property of the group's symbol.  @xref{Symbol Plists}.  "
"The value of that property is a list of pairs whose @code{car} is the symbol "
"of the variable or the face or the subgroup, and the @code{cdr} is one of "
"the corresponding symbols @code{custom-variable}, @code{custom-face}, or "
"@code{custom-group}."
msgstr ""

#. type: defopt
#: original_texis/customize.texi:275
#, no-wrap
msgid "custom-unlispify-remove-prefixes"
msgstr ""

#. type: defopt
#: original_texis/customize.texi:279
msgid ""
"If this variable is non-@code{nil}, the prefixes specified by a group's "
"@code{:prefix} keyword are omitted from tag names, whenever the user "
"customizes the group."
msgstr ""

#. type: defopt
#: original_texis/customize.texi:283
msgid ""
"The default value is @code{nil}, i.e., the prefix-discarding feature is "
"disabled.  This is because discarding prefixes often leads to confusing "
"names for options and faces."
msgstr ""

#. type: section
#: original_texis/customize.texi:286
#, no-wrap
msgid "Defining Customization Variables"
msgstr ""

#. type: cindex
#: original_texis/customize.texi:287
#, no-wrap
msgid "define customization options"
msgstr ""

#. type: cindex
#: original_texis/customize.texi:288
#, no-wrap
msgid "customizable variables, how to define"
msgstr ""

#. type: cindex
#: original_texis/customize.texi:289
#, no-wrap
msgid "user options, how to define"
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:299
msgid ""
"@dfn{Customizable variables}, also called @dfn{user options}, are global "
"Lisp variables whose values can be set through the Customize interface.  "
"Unlike other global variables, which are defined with @code{defvar} "
"(@pxref{Defining Variables}), customizable variables are defined using the "
"@code{defcustom} macro.  In addition to calling @code{defvar} as a "
"subroutine, @code{defcustom} states how the variable should be displayed in "
"the Customize interface, the values it is allowed to take, etc."
msgstr ""

#. type: defmac
#: original_texis/customize.texi:300
#, no-wrap
msgid "defcustom option standard doc [keyword value]@dots{}"
msgstr ""

#. type: defmac
#: original_texis/customize.texi:303
msgid ""
"This macro declares @var{option} as a user option (i.e., a customizable "
"variable).  You should not quote @var{option}."
msgstr ""

#. type: defmac
#: original_texis/customize.texi:312
msgid ""
"The argument @var{standard} is an expression that specifies the standard "
"value for @var{option}.  Evaluating the @code{defcustom} form evaluates "
"@var{standard}, but does not necessarily bind the option to that value.  If "
"@var{option} already has a default value, it is left unchanged.  If the user "
"has already saved a customization for @var{option}, the user's customized "
"value is installed as the default value.  Otherwise, the result of "
"evaluating @var{standard} is installed as the default value."
msgstr ""

#. type: defmac
#: original_texis/customize.texi:317
msgid ""
"Like @code{defvar}, this macro marks @code{option} as a special variable, "
"meaning that it should always be dynamically bound.  If @var{option} is "
"already lexically bound, that lexical binding remains in effect until the "
"binding construct exits.  @xref{Variable Scoping}."
msgstr ""

#. type: defmac
#: original_texis/customize.texi:322
msgid ""
"The expression @var{standard} can be evaluated at various other times, "
"too---whenever the customization facility needs to know @var{option}'s "
"standard value.  So be sure to use an expression which is harmless to "
"evaluate at any time."
msgstr ""

#. type: defmac
#: original_texis/customize.texi:325
msgid "The argument @var{doc} specifies the documentation string for the variable."
msgstr ""

#. type: defmac
#: original_texis/customize.texi:329
msgid ""
"If a @code{defcustom} does not specify any @code{:group}, the last group "
"defined with @code{defgroup} in the same file will be used.  This way, most "
"@code{defcustom} do not need an explicit @code{:group}."
msgstr ""

#. type: cindex
#: original_texis/customize.texi:330
#, no-wrap
msgid "@code{eval-defun}, and @code{defcustom} forms"
msgstr ""

#. type: defmac
#: original_texis/customize.texi:338
msgid ""
"When you evaluate a @code{defcustom} form with @kbd{C-M-x} in Emacs Lisp "
"mode (@code{eval-defun}), a special feature of @code{eval-defun} arranges to "
"set the variable unconditionally, without testing whether its value is "
"void.  (The same feature applies to @code{defvar}, @pxref{Defining "
"Variables}.)  Using @code{eval-defun} on a defcustom that is already defined "
"calls the @code{:set} function (see below), if there is one."
msgstr ""

#. type: defmac
#: original_texis/customize.texi:345
msgid ""
"If you put a @code{defcustom} in a pre-loaded Emacs Lisp file "
"(@pxref{Building Emacs}), the standard value installed at dump time might be "
"incorrect, e.g., because another variable that it depends on has not been "
"assigned the right value yet.  In that case, use "
"@code{custom-reevaluate-setting}, described below, to re-evaluate the "
"standard value after Emacs starts up."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:349
msgid ""
"In addition to the keywords listed in @ref{Common Keywords}, this macro "
"accepts the following keywords:"
msgstr ""

#. type: item
#: original_texis/customize.texi:351
#, no-wrap
msgid ":type @var{type}"
msgstr ""

#. type: table
#: original_texis/customize.texi:356
msgid ""
"Use @var{type} as the data type for this option.  It specifies which values "
"are legitimate, and how to display the value (@pxref{Customization Types}).  "
"Every @code{defcustom} should specify a value for this keyword."
msgstr ""

#. type: item
#: original_texis/customize.texi:357
#, no-wrap
msgid ":options @var{value-list}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:358
#, no-wrap
msgid "options@r{, @code{defcustom} keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:362
msgid ""
"Specify the list of reasonable values for use in this option.  The user is "
"not restricted to using only these values, but they are offered as "
"convenient alternatives."
msgstr ""

#. type: table
#: original_texis/customize.texi:366
msgid ""
"This is meaningful only for certain types, currently including @code{hook}, "
"@code{plist} and @code{alist}.  See the definition of the individual types "
"for a description of how to use @code{:options}."
msgstr ""

#. type: table
#: original_texis/customize.texi:370
msgid ""
"Re-evaluating a @code{defcustom} form with a different @code{:options} value "
"does not clear the values added by previous evaluations, or added by calls "
"to @code{custom-add-frequent-value} (see below)."
msgstr ""

#. type: item
#: original_texis/customize.texi:371
#, no-wrap
msgid ":set @var{setfunction}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:372
#, no-wrap
msgid "set@r{, @code{defcustom} keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:381
msgid ""
"Specify @var{setfunction} as the way to change the value of this option when "
"using the Customize interface.  The function @var{setfunction} should take "
"two arguments, a symbol (the option name) and the new value, and should do "
"whatever is necessary to update the value properly for this option (which "
"may not mean simply setting the option as a Lisp variable); preferably, "
"though, it should not modify its value argument destructively.  The default "
"for @var{setfunction} is @code{set-default-toplevel-value}."
msgstr ""

#. type: table
#: original_texis/customize.texi:386
msgid ""
"If defined, @var{setfunction} will also be called when evaluating a "
"@code{defcustom} form with @kbd{C-M-x} in Emacs Lisp mode and when the "
"@var{option}'s value is changed via the @code{setopt} macro (@pxref{Setting "
"Variables, setopt})."
msgstr ""

#. type: table
#: original_texis/customize.texi:391
msgid ""
"If you specify this keyword, the variable's documentation string should "
"describe how to do the same job in hand-written Lisp code, either by "
"invoking @var{setfunction} directly or by using @code{setopt}."
msgstr ""

#. type: item
#: original_texis/customize.texi:392
#, no-wrap
msgid ":get @var{getfunction}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:393
#, no-wrap
msgid "get@r{, @code{defcustom} keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:399
msgid ""
"Specify @var{getfunction} as the way to extract the value of this option.  "
"The function @var{getfunction} should take one argument, a symbol, and "
"should return whatever customize should use as the current value for that "
"symbol (which need not be the symbol's Lisp value).  The default is "
"@code{default-toplevel-value}."
msgstr ""

#. type: table
#: original_texis/customize.texi:405
msgid ""
"You have to really understand the workings of Custom to use @code{:get} "
"correctly.  It is meant for values that are treated in Custom as variables "
"but are not actually stored in Lisp variables.  It is almost surely a "
"mistake to specify @var{getfunction} for a value that really is stored in a "
"Lisp variable."
msgstr ""

#. type: item
#: original_texis/customize.texi:406
#, no-wrap
msgid ":initialize @var{function}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:407
#, no-wrap
msgid "initialize@r{, @code{defcustom} keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:412
msgid ""
"@var{function} should be a function used to initialize the variable when the "
"@code{defcustom} is evaluated.  It should take two arguments, the option "
"name (a symbol) and the value.  Here are some predefined functions meant for "
"use in this way:"
msgstr ""

#. type: item
#: original_texis/customize.texi:414
#, no-wrap
msgid "custom-initialize-set"
msgstr ""

#. type: table
#: original_texis/customize.texi:417
msgid ""
"Use the variable's @code{:set} function to initialize the variable, but do "
"not reinitialize it if it is already non-void."
msgstr ""

#. type: item
#: original_texis/customize.texi:418
#, no-wrap
msgid "custom-initialize-default"
msgstr ""

#. type: table
#: original_texis/customize.texi:425
msgid ""
"Like @code{custom-initialize-set}, but use the function "
"@code{set-default-toplevel-value} to set the variable, instead of the "
"variable's @code{:set} function.  This is the usual choice for a variable "
"whose @code{:set} function enables or disables a minor mode; with this "
"choice, defining the variable will not call the minor mode function, but "
"customizing the variable will do so."
msgstr ""

#. type: item
#: original_texis/customize.texi:426
#, no-wrap
msgid "custom-initialize-reset"
msgstr ""

#. type: table
#: original_texis/customize.texi:431
msgid ""
"Always use the @code{:set} function to initialize the variable.  If the "
"variable is already non-void, reset it by calling the @code{:set} function "
"using the current value (returned by the @code{:get} method).  This is the "
"default @code{:initialize} function."
msgstr ""

#. type: item
#: original_texis/customize.texi:432
#, no-wrap
msgid "custom-initialize-changed"
msgstr ""

#. type: table
#: original_texis/customize.texi:436
msgid ""
"Use the @code{:set} function to initialize the variable, if it is already "
"set or has been customized; otherwise, just use "
"@code{set-default-toplevel-value}."
msgstr ""

#. type: item
#: original_texis/customize.texi:437
#, no-wrap
msgid "custom-initialize-delay"
msgstr ""

#. type: table
#: original_texis/customize.texi:445
msgid ""
"This function behaves like @code{custom-initialize-set}, but it delays the "
"actual initialization to the next Emacs start.  This should be used in files "
"that are preloaded (or for autoloaded variables), so that the initialization "
"is done in the run-time context rather than the build-time context.  This "
"also has the side-effect that the (delayed) initialization is performed with "
"the @code{:set} function.  @xref{Building Emacs}."
msgstr ""

#. type: item
#: original_texis/customize.texi:447
#, no-wrap
msgid ":local @var{value}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:448
#, no-wrap
msgid "local@r{, @code{defcustom} keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:452
msgid ""
"If the @var{value} is @code{t}, mark @var{option} as automatically "
"buffer-local; if the value is @code{permanent}, also set @var{option}s "
"@code{permanent-local} property to @code{t}.  @xref{Creating Buffer-Local}."
msgstr ""

#. type: item
#: original_texis/customize.texi:453
#, no-wrap
msgid ":risky @var{value}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:454
#, no-wrap
msgid "risky@r{, @code{defcustom} keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:457
msgid ""
"Set the variable's @code{risky-local-variable} property to @var{value} "
"(@pxref{File Local Variables})."
msgstr ""

#. type: item
#: original_texis/customize.texi:458
#, no-wrap
msgid ":safe @var{function}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:459
#, no-wrap
msgid "safe@r{, @code{defcustom} keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:462
msgid ""
"Set the variable's @code{safe-local-variable} property to @var{function} "
"(@pxref{File Local Variables})."
msgstr ""

#. type: item
#: original_texis/customize.texi:463
#, no-wrap
msgid ":set-after @var{variables}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:464
#, no-wrap
msgid "set-after@r{, @code{defcustom} keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:470
msgid ""
"When setting variables according to saved customizations, make sure to set "
"the variables @var{variables} before this one; i.e., delay setting this "
"variable until after those others have been handled.  Use @code{:set-after} "
"if setting this variable won't work properly unless those other variables "
"already have their intended values."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:476
msgid ""
"It is useful to specify the @code{:require} keyword for an option that turns "
"on a certain feature.  This causes Emacs to load the feature, if it is not "
"already loaded, whenever the option is set.  @xref{Common Keywords}.  Here "
"is an example:"
msgstr ""

#. type: example
#: original_texis/customize.texi:483
#, no-wrap
msgid ""
"(defcustom frobnicate-automatically nil\n"
"  \"Non-nil means automatically frobnicate all buffers.\"\n"
"  :type 'boolean\n"
"  :require 'frobnicate-mode\n"
"  :group 'frobnicate)\n"
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:493
msgid ""
"If a customization item has a type such as @code{hook} or @code{alist}, "
"which supports @code{:options}, you can add additional values to the list "
"from outside the @code{defcustom} declaration by calling "
"@code{custom-add-frequent-value}.  For example, if you define a function "
"@code{my-lisp-mode-initialization} intended to be called from "
"@code{emacs-lisp-mode-hook}, you might want to add that to the list of "
"reasonable values for @code{emacs-lisp-mode-hook}, but not by editing its "
"definition.  You can do it thus:"
msgstr ""

#. type: example
#: original_texis/customize.texi:497
#, no-wrap
msgid ""
"(custom-add-frequent-value 'emacs-lisp-mode-hook\n"
"   'my-lisp-mode-initialization)\n"
msgstr ""

#. type: defun
#: original_texis/customize.texi:499
#, no-wrap
msgid "custom-add-frequent-value symbol value"
msgstr ""

#. type: defun
#: original_texis/customize.texi:502
msgid ""
"For the customization option @var{symbol}, add @var{value} to the list of "
"reasonable values."
msgstr ""

#. type: defun
#: original_texis/customize.texi:505
msgid ""
"The precise effect of adding a value depends on the customization type of "
"@var{symbol}."
msgstr ""

#. type: defun
#: original_texis/customize.texi:509
msgid ""
"Since evaluating a @code{defcustom} form does not clear values added "
"previously, Lisp programs can use this function to add values for user "
"options not yet defined."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:520
msgid ""
"Internally, @code{defcustom} uses the symbol property @code{standard-value} "
"to record the expression for the standard value, @code{saved-value} to "
"record the value saved by the user with the customization buffer, and "
"@code{customized-value} to record the value set by the user with the "
"customization buffer, but not saved.  @xref{Symbol Properties}.  In "
"addition, there's @code{themed-value}, which is used to record the value set "
"by a theme (@pxref{Custom Themes}).  These properties are lists, the car of "
"which is an expression that evaluates to the value."
msgstr ""

#. type: defun
#: original_texis/customize.texi:521
#, no-wrap
msgid "custom-reevaluate-setting symbol"
msgstr ""

#. type: defun
#: original_texis/customize.texi:527
msgid ""
"This function re-evaluates the standard value of @var{symbol}, which should "
"be a user option declared via @code{defcustom}.  If the variable was "
"customized, this function re-evaluates the saved value instead.  Then it "
"sets the user option to that value (using the option's @code{:set} property "
"if that is defined)."
msgstr ""

#. type: defun
#: original_texis/customize.texi:533
msgid ""
"This is useful for customizable options that are defined before their value "
"could be computed correctly.  For example, during startup Emacs calls this "
"function for some user options that were defined in pre-loaded Emacs Lisp "
"files, but whose initial values depend on information available only at "
"run-time."
msgstr ""

#. type: defun
#: original_texis/customize.texi:535
#, no-wrap
msgid "custom-variable-p arg"
msgstr ""

#. type: defun
#: original_texis/customize.texi:541
msgid ""
"This function returns non-@code{nil} if @var{arg} is a customizable "
"variable.  A customizable variable is either a variable that has a "
"@code{standard-value} or @code{custom-autoload} property (usually meaning it "
"was declared with @code{defcustom}), or an alias for another customizable "
"variable."
msgstr ""

#. type: cindex
#: original_texis/customize.texi:546
#, no-wrap
msgid "customization types"
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:551
msgid ""
"When you define a user option with @code{defcustom}, you must specify its "
"@dfn{customization type}.  That is a Lisp object which describes (1)  which "
"values are legitimate and (2) how to display the value in the customization "
"buffer for editing."
msgstr ""

#. type: kindex
#: original_texis/customize.texi:552
#, no-wrap
msgid "type@r{, @code{defcustom} keyword}"
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:558
msgid ""
"You specify the customization type in @code{defcustom} with the @code{:type} "
"keyword.  The argument of @code{:type} is evaluated, but only once when the "
"@code{defcustom} is executed, so it isn't useful for the value to vary.  "
"Normally we use a quoted constant.  For example:"
msgstr ""

#. type: example
#: original_texis/customize.texi:564
#, no-wrap
msgid ""
"(defcustom diff-command \"diff\"\n"
"  \"The command to use to run diff.\"\n"
"  :type '(string)\n"
"  :group 'diff)\n"
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:571
msgid ""
"In general, a customization type is a list whose first element is a symbol, "
"one of the customization type names defined in the following sections.  "
"After this symbol come a number of arguments, depending on the symbol.  "
"Between the type symbol and its arguments, you can optionally write "
"keyword-value pairs (@pxref{Type Keywords})."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:577
msgid ""
"Some type symbols do not use any arguments; those are called @dfn{simple "
"types}.  For a simple type, if you do not use any keyword-value pairs, you "
"can omit the parentheses around the type symbol.  For example just "
"@code{string} as a customization type is equivalent to @code{(string)}."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:580
msgid ""
"All customization types are implemented as widgets; see @ref{Top, , "
"Introduction, widget, The Emacs Widget Library}, for details."
msgstr ""

#. type: subsection
#: original_texis/customize.texi:587 original_texis/customize.texi:589 original_texis/customize.texi:590
#, no-wrap
msgid "Simple Types"
msgstr ""

#. type: menuentry
#: original_texis/customize.texi:587
msgid "Simple customization types: sexp, integer, etc."
msgstr ""

#. type: subsection
#: original_texis/customize.texi:587 original_texis/customize.texi:689 original_texis/customize.texi:690
#, no-wrap
msgid "Composite Types"
msgstr ""

#. type: menuentry
#: original_texis/customize.texi:587
msgid "Build new types from other types or data."
msgstr ""

#. type: subsection
#: original_texis/customize.texi:587 original_texis/customize.texi:1040 original_texis/customize.texi:1041
#, no-wrap
msgid "Splicing into Lists"
msgstr ""

#. type: menuentry
#: original_texis/customize.texi:587
msgid "Splice elements into list with @code{:inline}."
msgstr ""

#. type: subsection
#: original_texis/customize.texi:587 original_texis/customize.texi:1091 original_texis/customize.texi:1092
#, no-wrap
msgid "Type Keywords"
msgstr ""

#. type: menuentry
#: original_texis/customize.texi:587
msgid "Keyword-argument pairs in a customization type."
msgstr ""

#. type: subsection
#: original_texis/customize.texi:587 original_texis/customize.texi:1294 original_texis/customize.texi:1295
#, no-wrap
msgid "Defining New Types"
msgstr ""

#. type: menuentry
#: original_texis/customize.texi:587
msgid "Give your type a name."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:595
msgid ""
"This section describes all the simple customization types.  For several of "
"these customization types, the customization widget provides inline "
"completion with @kbd{C-M-i} or @kbd{M-@key{TAB}}."
msgstr ""

#. type: item
#: original_texis/customize.texi:597
#, no-wrap
msgid "sexp"
msgstr ""

#. type: table
#: original_texis/customize.texi:601
msgid ""
"The value may be any Lisp object that can be printed and read back.  You can "
"use @code{sexp} as a fall-back for any option, if you don't want to take the "
"time to work out a more specific type to use."
msgstr ""

#. type: item
#: original_texis/customize.texi:602
#, no-wrap
msgid "integer"
msgstr ""

#. type: table
#: original_texis/customize.texi:604
msgid "The value must be an integer."
msgstr ""

#. type: item
#: original_texis/customize.texi:605
#, no-wrap
msgid "natnum"
msgstr ""

#. type: table
#: original_texis/customize.texi:607
msgid "The value must be a nonnegative integer."
msgstr ""

#. type: item
#: original_texis/customize.texi:608
#, no-wrap
msgid "number"
msgstr ""

#. type: table
#: original_texis/customize.texi:610
msgid "The value must be a number (floating point or integer)."
msgstr ""

#. type: item
#: original_texis/customize.texi:611
#, no-wrap
msgid "float"
msgstr ""

#. type: table
#: original_texis/customize.texi:613
msgid "The value must be floating point."
msgstr ""

#. type: item
#: original_texis/customize.texi:614
#, no-wrap
msgid "string"
msgstr ""

#. type: table
#: original_texis/customize.texi:617
msgid ""
"The value must be a string.  The customization buffer shows the string "
"without delimiting @samp{\"} characters or @samp{\\} quotes."
msgstr ""

#. type: item
#: original_texis/customize.texi:618
#, no-wrap
msgid "regexp"
msgstr ""

#. type: table
#: original_texis/customize.texi:621
msgid ""
"Like @code{string} except that the string must be a valid regular "
"expression."
msgstr ""

#. type: item
#: original_texis/customize.texi:622
#, no-wrap
msgid "character"
msgstr ""

#. type: table
#: original_texis/customize.texi:626
msgid ""
"The value must be a character code.  A character code is actually an "
"integer, but this type shows the value by inserting the character in the "
"buffer, rather than by showing the number."
msgstr ""

#. type: item
#: original_texis/customize.texi:627
#, no-wrap
msgid "file"
msgstr ""

#. type: table
#: original_texis/customize.texi:629
msgid "The value must be a file name.  The widget provides completion."
msgstr ""

#. type: item
#: original_texis/customize.texi:630
#, no-wrap
msgid "(file :must-match t)"
msgstr ""

#. type: table
#: original_texis/customize.texi:633
msgid ""
"The value must be a file name for an existing file.  The widget provides "
"completion."
msgstr ""

#. type: item
#: original_texis/customize.texi:634
#, no-wrap
msgid "directory"
msgstr ""

#. type: table
#: original_texis/customize.texi:636
msgid "The value must be a directory.  The widget provides completion."
msgstr ""

#. type: item
#: original_texis/customize.texi:637
#, no-wrap
msgid "hook"
msgstr ""

#. type: table
#: original_texis/customize.texi:642
msgid ""
"The value must be a list of functions.  This customization type is used for "
"hook variables.  You can use the @code{:options} keyword in a hook "
"variable's @code{defcustom} to specify a list of functions recommended for "
"use in the hook; @xref{Variable Definitions}."
msgstr ""

#. type: item
#: original_texis/customize.texi:643
#, no-wrap
msgid "symbol"
msgstr ""

#. type: table
#: original_texis/customize.texi:646
msgid ""
"The value must be a symbol.  It appears in the customization buffer as the "
"symbol name.  The widget provides completion."
msgstr ""

#. type: item
#: original_texis/customize.texi:647
#, no-wrap
msgid "function"
msgstr ""

#. type: table
#: original_texis/customize.texi:650
msgid ""
"The value must be either a lambda expression or a function name.  The widget "
"provides completion for function names."
msgstr ""

#. type: item
#: original_texis/customize.texi:651
#, no-wrap
msgid "variable"
msgstr ""

#. type: table
#: original_texis/customize.texi:653
msgid "The value must be a variable name.  The widget provides completion."
msgstr ""

#. type: item
#: original_texis/customize.texi:654
#, no-wrap
msgid "face"
msgstr ""

#. type: table
#: original_texis/customize.texi:657
msgid ""
"The value must be a symbol which is a face name.  The widget provides "
"completion."
msgstr ""

#. type: item
#: original_texis/customize.texi:658
#, no-wrap
msgid "boolean"
msgstr ""

#. type: table
#: original_texis/customize.texi:664
msgid ""
"The value is boolean---either @code{nil} or @code{t}.  Note that by using "
"@code{choice} and @code{const} together (see the next section), you can "
"specify that the value must be @code{nil} or @code{t}, but also specify the "
"text to describe each value in a way that fits the specific meaning of the "
"alternative."
msgstr ""

#. type: item
#: original_texis/customize.texi:665
#, no-wrap
msgid "key"
msgstr ""

#. type: table
#: original_texis/customize.texi:668
msgid ""
"The value is a valid key according to @kbd{key-valid-p}, and suitable for "
"use with, for example @code{keymap-set}."
msgstr ""

#. type: item
#: original_texis/customize.texi:669
#, no-wrap
msgid "key-sequence"
msgstr ""

#. type: table
#: original_texis/customize.texi:673
msgid ""
"The value is a key sequence.  The customization buffer shows the key "
"sequence using the same syntax as the @kbd{kbd} function.  @xref{Key "
"Sequences}.  This is a legacy type; use @code{key} instead."
msgstr ""

#. type: item
#: original_texis/customize.texi:674
#, no-wrap
msgid "coding-system"
msgstr ""

#. type: table
#: original_texis/customize.texi:677
msgid ""
"The value must be a coding-system name, and you can do completion with "
"@kbd{M-@key{TAB}}."
msgstr ""

#. type: item
#: original_texis/customize.texi:678
#, no-wrap
msgid "color"
msgstr ""

#. type: table
#: original_texis/customize.texi:683
msgid ""
"The value must be a valid color name.  The widget provides completion for "
"color names, as well as a sample and a button for selecting a color name "
"from a list of color names shown in a @file{*Colors*} buffer."
msgstr ""

#. type: item
#: original_texis/customize.texi:684
#, no-wrap
msgid "fringe-bitmap"
msgstr ""

#. type: table
#: original_texis/customize.texi:687
msgid ""
"The value must be a valid fringe bitmap name.  The widget provides "
"completion."
msgstr ""

#. type: cindex
#: original_texis/customize.texi:691
#, no-wrap
msgid "composite types (customization)"
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:697
msgid ""
"When none of the simple types is appropriate, you can use composite types, "
"which build new types from other types or from specified data.  The "
"specified types or data are called the @dfn{arguments} of the composite "
"type.  The composite type normally looks like this:"
msgstr ""

#. type: example
#: original_texis/customize.texi:700
#, no-wrap
msgid "(@var{constructor} @var{arguments}@dots{})\n"
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:705
msgid "but you can also add keyword-value pairs before the arguments, like this:"
msgstr ""

#. type: example
#: original_texis/customize.texi:708
#, no-wrap
msgid ""
"(@var{constructor} @r{@{}@var{keyword} @var{value}@r{@}}@dots{} "
"@var{arguments}@dots{})\n"
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:712
msgid ""
"Here is a table of constructors and how to use them to write composite "
"types:"
msgstr ""

#. type: item
#: original_texis/customize.texi:714
#, no-wrap
msgid "(cons @var{car-type} @var{cdr-type})"
msgstr ""

#. type: table
#: original_texis/customize.texi:719
msgid ""
"The value must be a cons cell, its @sc{car} must fit @var{car-type}, and its "
"@sc{cdr} must fit @var{cdr-type}.  For example, @code{(cons string symbol)} "
"is a customization type which matches values such as @code{(\"foo\" . foo)}."
msgstr ""

#. type: table
#: original_texis/customize.texi:722
msgid ""
"In the customization buffer, the @sc{car} and @sc{cdr} are displayed and "
"edited separately, each according to their specified type."
msgstr ""

#. type: item
#: original_texis/customize.texi:723
#, no-wrap
msgid "(list @var{element-types}@dots{})"
msgstr ""

#. type: table
#: original_texis/customize.texi:727
msgid ""
"The value must be a list with exactly as many elements as the "
"@var{element-types} given; and each element must fit the corresponding "
"@var{element-type}."
msgstr ""

#. type: table
#: original_texis/customize.texi:731
msgid ""
"For example, @code{(list integer string function)} describes a list of three "
"elements; the first element must be an integer, the second a string, and the "
"third a function."
msgstr ""

#. type: table
#: original_texis/customize.texi:734
msgid ""
"In the customization buffer, each element is displayed and edited "
"separately, according to the type specified for it."
msgstr ""

#. type: item
#: original_texis/customize.texi:735
#, no-wrap
msgid "(group @var{element-types}@dots{})"
msgstr ""

#. type: table
#: original_texis/customize.texi:739
msgid ""
"This works like @code{list} except for the formatting of text in the Custom "
"buffer.  @code{list} labels each element value with its tag; @code{group} "
"does not."
msgstr ""

#. type: item
#: original_texis/customize.texi:740
#, no-wrap
msgid "(vector @var{element-types}@dots{})"
msgstr ""

#. type: table
#: original_texis/customize.texi:743
msgid ""
"Like @code{list} except that the value must be a vector instead of a list.  "
"The elements work the same as in @code{list}."
msgstr ""

#. type: item
#: original_texis/customize.texi:744
#, no-wrap
msgid "(alist :key-type @var{key-type} :value-type @var{value-type})"
msgstr ""

#. type: table
#: original_texis/customize.texi:750
msgid ""
"The value must be a list of cons-cells, the @sc{car} of each cell "
"representing a key of customization type @var{key-type}, and the @sc{cdr} of "
"the same cell representing a value of customization type @var{value-type}.  "
"The user can add and delete key/value pairs, and edit both the key and the "
"value of each pair."
msgstr ""

#. type: table
#: original_texis/customize.texi:753
msgid "If omitted, @var{key-type} and @var{value-type} default to @code{sexp}."
msgstr ""

#. type: table
#: original_texis/customize.texi:761
msgid ""
"The user can add any key matching the specified key type, but you can give "
"some keys a preferential treatment by specifying them with the "
"@code{:options} (@pxref{Variable Definitions}).  The specified keys will "
"always be shown in the customize buffer (together with a suitable value), "
"with a checkbox to include or exclude or disable the key/value pair from the "
"alist.  The user will not be able to edit the keys specified by the "
"@code{:options} keyword argument."
msgstr ""

#. type: table
#: original_texis/customize.texi:765
msgid ""
"The argument to the @code{:options} keywords should be a list of "
"specifications for reasonable keys in the alist.  Ordinarily, they are "
"simply atoms, which stand for themselves.  For example:"
msgstr ""

#. type: example
#: original_texis/customize.texi:768
#, no-wrap
msgid ":options '(\"foo\" \"bar\" \"baz\")\n"
msgstr ""

#. type: table
#: original_texis/customize.texi:773
msgid ""
"specifies that there are three known keys, namely @code{\"foo\"}, "
"@code{\"bar\"} and @code{\"baz\"}, which will always be shown first."
msgstr ""

#. type: table
#: original_texis/customize.texi:779
msgid ""
"You may want to restrict the value type for specific keys, for example, the "
"value associated with the @code{\"bar\"} key can only be an integer.  You "
"can specify this by using a list instead of an atom in the list.  The first "
"element will specify the key, like before, while the second element will "
"specify the value type.  For example:"
msgstr ""

#. type: example
#: original_texis/customize.texi:782
#, no-wrap
msgid ":options '(\"foo\" (\"bar\" integer) \"baz\")\n"
msgstr ""

#. type: table
#: original_texis/customize.texi:791
msgid ""
"Finally, you may want to change how the key is presented.  By default, the "
"key is simply shown as a @code{const}, since the user cannot change the "
"special keys specified with the @code{:options} keyword.  However, you may "
"want to use a more specialized type for presenting the key, like "
"@code{function-item} if you know it is a symbol with a function binding.  "
"This is done by using a customization type specification instead of a symbol "
"for the key."
msgstr ""

#. type: example
#: original_texis/customize.texi:796
#, no-wrap
msgid ""
":options '(\"foo\"\n"
"           ((function-item some-function) integer)\n"
"           \"baz\")\n"
msgstr ""

#. type: table
#: original_texis/customize.texi:800
msgid ""
"Many alists use lists with two elements, instead of cons cells.  For "
"example,"
msgstr ""

#. type: example
#: original_texis/customize.texi:805
#, no-wrap
msgid ""
"(defcustom list-alist\n"
"  '((\"foo\" 1) (\"bar\" 2) (\"baz\" 3))\n"
"  \"Each element is a list of the form (KEY VALUE).\")\n"
msgstr ""

#. type: table
#: original_texis/customize.texi:809
msgid "instead of"
msgstr ""

#. type: example
#: original_texis/customize.texi:814
#, no-wrap
msgid ""
"(defcustom cons-alist\n"
"  '((\"foo\" . 1) (\"bar\" . 2) (\"baz\" . 3))\n"
"  \"Each element is a cons-cell (KEY . VALUE).\")\n"
msgstr ""

#. type: table
#: original_texis/customize.texi:820
msgid ""
"Because of the way lists are implemented on top of cons cells, you can treat "
"@code{list-alist} in the example above as a cons cell alist, where the value "
"type is a list with a single element containing the real value."
msgstr ""

#. type: example
#: original_texis/customize.texi:825
#, no-wrap
msgid ""
"(defcustom list-alist '((\"foo\" 1) (\"bar\" 2) (\"baz\" 3))\n"
"  \"Each element is a list of the form (KEY VALUE).\"\n"
"  :type '(alist :value-type (group integer)))\n"
msgstr ""

#. type: table
#: original_texis/customize.texi:829
msgid ""
"The @code{group} widget is used here instead of @code{list} only because the "
"formatting is better suited for the purpose."
msgstr ""

#. type: table
#: original_texis/customize.texi:832
msgid ""
"Similarly, you can have alists with more values associated with each key, "
"using variations of this trick:"
msgstr ""

#. type: example
#: original_texis/customize.texi:840
#, no-wrap
msgid ""
"(defcustom person-data '((\"brian\"  50 t)\n"
"                         (\"dorith\" 55 nil)\n"
"                         (\"ken\"    52 t))\n"
"  \"Alist of basic info about people.\n"
"Each element has the form (NAME AGE MALE-FLAG).\"\n"
"  :type '(alist :value-type (group integer boolean)))\n"
msgstr ""

#. type: item
#: original_texis/customize.texi:842
#, no-wrap
msgid "(plist :key-type @var{key-type} :value-type @var{value-type})"
msgstr ""

#. type: table
#: original_texis/customize.texi:847
msgid ""
"This customization type is similar to @code{alist} (see above), except that "
"(i) the information is stored as a property list, (@pxref{Property Lists}), "
"and (ii) @var{key-type}, if omitted, defaults to @code{symbol} rather than "
"@code{sexp}."
msgstr ""

#. type: item
#: original_texis/customize.texi:848
#, no-wrap
msgid "(choice @var{alternative-types}@dots{})"
msgstr ""

#. type: table
#: original_texis/customize.texi:851
msgid ""
"The value must fit one of @var{alternative-types}.  For example, "
"@code{(choice integer string)} allows either an integer or a string."
msgstr ""

#. type: table
#: original_texis/customize.texi:855
msgid ""
"In the customization buffer, the user selects an alternative using a menu, "
"and can then edit the value in the usual way for that alternative."
msgstr ""

#. type: table
#: original_texis/customize.texi:861
msgid ""
"Normally the strings in this menu are determined automatically from the "
"choices; however, you can specify different strings for the menu by "
"including the @code{:tag} keyword in the alternatives.  For example, if an "
"integer stands for a number of spaces, while a string is text to use "
"verbatim, you might write the customization type this way,"
msgstr ""

#. type: example
#: original_texis/customize.texi:865
#, no-wrap
msgid ""
"(choice (integer :tag \"Number of spaces\")\n"
"        (string :tag \"Literal text\"))\n"
msgstr ""

#. type: table
#: original_texis/customize.texi:869
msgid "so that the menu offers @samp{Number of spaces} and @samp{Literal text}."
msgstr ""

#. type: table
#: original_texis/customize.texi:873
msgid ""
"In any alternative for which @code{nil} is not a valid value, other than a "
"@code{const}, you should specify a valid default for that alternative using "
"the @code{:value} keyword.  @xref{Type Keywords}."
msgstr ""

#. type: table
#: original_texis/customize.texi:878
msgid ""
"If some values are covered by more than one of the alternatives, customize "
"will choose the first alternative that the value fits.  This means you "
"should always list the most specific types first, and the most general "
"last.  Here's an example of proper usage:"
msgstr ""

#. type: example
#: original_texis/customize.texi:882
#, no-wrap
msgid ""
"(choice (const :tag \"Off\" nil)\n"
"        symbol (sexp :tag \"Other\"))\n"
msgstr ""

#. type: table
#: original_texis/customize.texi:887
msgid ""
"This way, the special value @code{nil} is not treated like other symbols, "
"and symbols are not treated like other Lisp expressions."
msgstr ""

#. type: cindex
#: original_texis/customize.texi:888
#, no-wrap
msgid "radio, customization types"
msgstr ""

#. type: item
#: original_texis/customize.texi:889
#, no-wrap
msgid "(radio @var{element-types}@dots{})"
msgstr ""

#. type: table
#: original_texis/customize.texi:895
msgid ""
"This is similar to @code{choice}, except that the choices are displayed "
"using radio buttons rather than a menu.  This has the advantage of "
"displaying documentation for the choices when applicable and so is often a "
"good choice for a choice between constant functions (@code{function-item} "
"customization types)."
msgstr ""

#. type: item
#: original_texis/customize.texi:896
#, no-wrap
msgid "(const @var{value})"
msgstr ""

#. type: table
#: original_texis/customize.texi:898
msgid "The value must be @var{value}---nothing else is allowed."
msgstr ""

#. type: table
#: original_texis/customize.texi:902
msgid ""
"The main use of @code{const} is inside of @code{choice}.  For example, "
"@code{(choice integer (const nil))} allows either an integer or @code{nil}."
msgstr ""

#. type: table
#: original_texis/customize.texi:905
msgid ""
"@code{:tag} is often used with @code{const}, inside of @code{choice}.  For "
"example,"
msgstr ""

#. type: example
#: original_texis/customize.texi:910
#, no-wrap
msgid ""
"(choice (const :tag \"Yes\" t)\n"
"        (const :tag \"No\" nil)\n"
"        (const :tag \"Ask\" foo))\n"
msgstr ""

#. type: table
#: original_texis/customize.texi:915
msgid ""
"describes a variable for which @code{t} means yes, @code{nil} means no, and "
"@code{foo} means ``ask''."
msgstr ""

#. type: item
#: original_texis/customize.texi:916
#, no-wrap
msgid "(other @var{value})"
msgstr ""

#. type: table
#: original_texis/customize.texi:919
msgid ""
"This alternative can match any Lisp value, but if the user chooses this "
"alternative, that selects the value @var{value}."
msgstr ""

#. type: table
#: original_texis/customize.texi:922
msgid ""
"The main use of @code{other} is as the last element of @code{choice}.  For "
"example,"
msgstr ""

#. type: example
#: original_texis/customize.texi:927
#, no-wrap
msgid ""
"(choice (const :tag \"Yes\" t)\n"
"        (const :tag \"No\" nil)\n"
"        (other :tag \"Ask\" foo))\n"
msgstr ""

#. type: table
#: original_texis/customize.texi:935
msgid ""
"describes a variable for which @code{t} means yes, @code{nil} means no, and "
"anything else means ``ask''.  If the user chooses @samp{Ask} from the menu "
"of alternatives, that specifies the value @code{foo}; but any other value "
"(not @code{t}, @code{nil} or @code{foo}) displays as @samp{Ask}, just like "
"@code{foo}."
msgstr ""

#. type: item
#: original_texis/customize.texi:936
#, no-wrap
msgid "(function-item @var{function})"
msgstr ""

#. type: table
#: original_texis/customize.texi:941
msgid ""
"Like @code{const}, but used for values which are functions.  This displays "
"the documentation string as well as the function name.  The documentation "
"string is either the one you specify with @code{:doc}, or @var{function}'s "
"own documentation string."
msgstr ""

#. type: item
#: original_texis/customize.texi:942
#, no-wrap
msgid "(variable-item @var{variable})"
msgstr ""

#. type: table
#: original_texis/customize.texi:947
msgid ""
"Like @code{const}, but used for values which are variable names.  This "
"displays the documentation string as well as the variable name.  The "
"documentation string is either the one you specify with @code{:doc}, or "
"@var{variable}'s own documentation string."
msgstr ""

#. type: item
#: original_texis/customize.texi:948
#, no-wrap
msgid "(set @var{types}@dots{})"
msgstr ""

#. type: table
#: original_texis/customize.texi:951
msgid ""
"The value must be a list, and each element of the list must match one of the "
"@var{types} specified."
msgstr ""

#. type: table
#: original_texis/customize.texi:959
msgid ""
"This appears in the customization buffer as a checklist, so that each of "
"@var{types} may have either one corresponding element or none.  It is not "
"possible to specify two different elements that match the same one of "
"@var{types}.  For example, @code{(set integer symbol)} allows one integer "
"and/or one symbol in the list; it does not allow multiple integers or "
"multiple symbols.  As a result, it is rare to use nonspecific types such as "
"@code{integer} in a @code{set}."
msgstr ""

#. type: table
#: original_texis/customize.texi:962
msgid ""
"Most often, the @var{types} in a @code{set} are @code{const} types, as shown "
"here:"
msgstr ""

#. type: example
#: original_texis/customize.texi:965
#, no-wrap
msgid "(set (const :bold) (const :italic))\n"
msgstr ""

#. type: table
#: original_texis/customize.texi:968
msgid "Sometimes they describe possible elements in an alist:"
msgstr ""

#. type: example
#: original_texis/customize.texi:972
#, no-wrap
msgid ""
"(set (cons :tag \"Height\" (const height) integer)\n"
"     (cons :tag \"Width\" (const width) integer))\n"
msgstr ""

#. type: table
#: original_texis/customize.texi:977
msgid ""
"That lets the user specify a height value optionally and a width value "
"optionally."
msgstr ""

#. type: item
#: original_texis/customize.texi:978
#, no-wrap
msgid "(repeat @var{element-type})"
msgstr ""

#. type: table
#: original_texis/customize.texi:983
msgid ""
"The value must be a list and each element of the list must fit the type "
"@var{element-type}.  This appears in the customization buffer as a list of "
"elements, with @samp{[INS]} and @samp{[DEL]} buttons for adding more "
"elements or removing elements."
msgstr ""

#. type: cindex
#: original_texis/customize.texi:984
#, no-wrap
msgid "restricted-sexp, customization types"
msgstr ""

#. type: item
#: original_texis/customize.texi:985
#, no-wrap
msgid "(restricted-sexp :match-alternatives @var{criteria})"
msgstr ""

#. type: table
#: original_texis/customize.texi:990
msgid ""
"This is the most general composite type construct.  The value may be any "
"Lisp object that satisfies one of @var{criteria}.  @var{criteria} should be "
"a list, and each element should be one of these possibilities:"
msgstr ""

#. type: itemize
#: original_texis/customize.texi:997
msgid ""
"A predicate---that is, a function of one argument that returns either "
"@code{nil} or non-@code{nil} according to the argument.  Using a predicate "
"in the list says that objects for which the predicate returns non-@code{nil} "
"are acceptable."
msgstr ""

#. type: itemize
#: original_texis/customize.texi:1001
msgid ""
"A quoted constant---that is, @code{'@var{object}}.  This sort of element in "
"the list says that @var{object} itself is an acceptable value."
msgstr ""

#. type: table
#: original_texis/customize.texi:1004
msgid "For example,"
msgstr ""

#. type: example
#: original_texis/customize.texi:1008
#, no-wrap
msgid ""
"(restricted-sexp :match-alternatives\n"
"                 (integerp 't 'nil))\n"
msgstr ""

#. type: table
#: original_texis/customize.texi:1012
msgid "allows integers, @code{t} and @code{nil} as legitimate values."
msgstr ""

#. type: table
#: original_texis/customize.texi:1015
msgid ""
"The customization buffer shows all legitimate values using their read "
"syntax, and the user edits them textually."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:1019
msgid ""
"Here is a table of the keywords you can use in keyword-value pairs in a "
"composite type:"
msgstr ""

#. type: item
#: original_texis/customize.texi:1021 original_texis/customize.texi:1178
#, no-wrap
msgid ":tag @var{tag}"
msgstr ""

#. type: table
#: original_texis/customize.texi:1025
msgid ""
"Use @var{tag} as the name of this alternative, for user communication "
"purposes.  This is useful for a type that appears inside of a @code{choice}."
msgstr ""

#. type: item
#: original_texis/customize.texi:1026
#, no-wrap
msgid ":match-alternatives @var{criteria}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:1027
#, no-wrap
msgid "match-alternatives@r{, customization keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:1030
msgid ""
"Use @var{criteria} to match possible values.  This is used only in "
"@code{restricted-sexp}."
msgstr ""

#. type: item
#: original_texis/customize.texi:1031
#, no-wrap
msgid ":args @var{argument-list}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:1032
#, no-wrap
msgid "args@r{, customization keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:1038
msgid ""
"Use the elements of @var{argument-list} as the arguments of the type "
"construct.  For instance, @code{(const :args (foo))} is equivalent to "
"@code{(const foo)}.  You rarely need to write @code{:args} explicitly, "
"because normally the arguments are recognized automatically as whatever "
"follows the last keyword-value pair."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:1048
msgid ""
"The @code{:inline} feature lets you splice a variable number of elements "
"into the middle of a @code{list} or @code{vector} customization type.  You "
"use it by adding @code{:inline t} to a type specification which is contained "
"in a @code{list} or @code{vector} specification."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:1056
msgid ""
"Normally, each entry in a @code{list} or @code{vector} type specification "
"describes a single element type.  But when an entry contains @code{:inline "
"t}, the value it matches is merged directly into the containing sequence.  "
"For example, if the entry matches a list with three elements, those become "
"three elements of the overall sequence.  This is analogous to @samp{,@@} in "
"a backquote construct (@pxref{Backquote})."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:1060
msgid ""
"For example, to specify a list whose first element must be @code{baz} and "
"whose remaining arguments should be zero or more of @code{foo} and "
"@code{bar}, use this customization type:"
msgstr ""

#. type: example
#: original_texis/customize.texi:1063
#, no-wrap
msgid "(list (const baz) (set :inline t (const foo) (const bar)))\n"
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:1068
msgid ""
"This matches values such as @code{(baz)}, @code{(baz foo)}, @code{(baz bar)} "
"and @code{(baz foo bar)}."
msgstr ""

#. type: cindex
#: original_texis/customize.texi:1069
#, no-wrap
msgid "choice, customization types"
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:1075
msgid ""
"When the element-type is a @code{choice}, you use @code{:inline} not in the "
"@code{choice} itself, but in (some of) the alternatives of the "
"@code{choice}.  For example, to match a list which must start with a file "
"name, followed either by the symbol @code{t} or two strings, use this "
"customization type:"
msgstr ""

#. type: example
#: original_texis/customize.texi:1080
#, no-wrap
msgid ""
"(list file\n"
"      (choice (const t)\n"
"              (list :inline t string string)))\n"
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:1087
msgid ""
"If the user chooses the first alternative in the choice, then the overall "
"list has two elements and the second element is @code{t}.  If the user "
"chooses the second alternative, then the overall list has three elements and "
"the second and third must be strings."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:1090
msgid ""
"The widgets can specify predicates to say whether an inline value matches "
"the widget with the @code{:match-inline} element."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:1097
msgid ""
"You can specify keyword-argument pairs in a customization type after the "
"type name symbol.  Here are the keywords you can use, and their meanings:"
msgstr ""

#. type: item
#: original_texis/customize.texi:1099
#, no-wrap
msgid ":value @var{default}"
msgstr ""

#. type: table
#: original_texis/customize.texi:1101
msgid "Provide a default value."
msgstr ""

#. type: table
#: original_texis/customize.texi:1104
msgid ""
"If @code{nil} is not a valid value for the alternative, then it is essential "
"to specify a valid default with @code{:value}."
msgstr ""

#. type: table
#: original_texis/customize.texi:1109
msgid ""
"If you use this for a type that appears as an alternative inside of "
"@code{choice}; it specifies the default value to use, at first, if and when "
"the user selects this alternative with the menu in the customization buffer."
msgstr ""

#. type: table
#: original_texis/customize.texi:1112
msgid ""
"Of course, if the actual value of the option fits this alternative, it will "
"appear showing the actual value, not @var{default}."
msgstr ""

#. type: item
#: original_texis/customize.texi:1113
#, no-wrap
msgid ":format @var{format-string}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:1114
#, no-wrap
msgid "format@r{, customization keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:1118
msgid ""
"This string will be inserted in the buffer to represent the value "
"corresponding to the type.  The following @samp{%} escapes are available for "
"use in @var{format-string}:"
msgstr ""

#. type: item
#: original_texis/customize.texi:1120
#, no-wrap
msgid "%[@var{button}%]"
msgstr ""

#. type: table
#: original_texis/customize.texi:1125
msgid ""
"Display the text @var{button} marked as a button.  The @code{:action} "
"attribute specifies what the button will do if the user invokes it; its "
"value is a function which takes two arguments---the widget which the button "
"appears in, and the event."
msgstr ""

#. type: table
#: original_texis/customize.texi:1128
msgid "There is no way to specify two different buttons with different actions."
msgstr ""

#. type: item
#: original_texis/customize.texi:1129
#, no-wrap
msgid "%@{@var{sample}%@}"
msgstr ""

#. type: table
#: original_texis/customize.texi:1131
msgid "Show @var{sample} in a special face specified by @code{:sample-face}."
msgstr ""

#. type: item
#: original_texis/customize.texi:1132
#, no-wrap
msgid "%v"
msgstr ""

#. type: table
#: original_texis/customize.texi:1135
msgid ""
"Substitute the item's value.  How the value is represented depends on the "
"kind of item, and (for variables) on the customization type."
msgstr ""

#. type: item
#: original_texis/customize.texi:1136
#, no-wrap
msgid "%d"
msgstr ""

#. type: table
#: original_texis/customize.texi:1138
msgid "Substitute the item's documentation string."
msgstr ""

#. type: item
#: original_texis/customize.texi:1139
#, no-wrap
msgid "%h"
msgstr ""

#. type: table
#: original_texis/customize.texi:1142
msgid ""
"Like @samp{%d}, but if the documentation string is more than one line, add a "
"button to control whether to show all of it or just the first line."
msgstr ""

#. type: item
#: original_texis/customize.texi:1143
#, no-wrap
msgid "%t"
msgstr ""

#. type: table
#: original_texis/customize.texi:1146
msgid "Substitute the tag here.  You specify the tag with the @code{:tag} keyword."
msgstr ""

#. type: item
#: original_texis/customize.texi:1147
#, no-wrap
msgid "%%"
msgstr ""

#. type: table
#: original_texis/customize.texi:1149
msgid "Display a literal @samp{%}."
msgstr ""

#. type: item
#: original_texis/customize.texi:1151
#, no-wrap
msgid ":action @var{action}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:1152
#, no-wrap
msgid "action@r{, customization keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:1154
msgid "Perform @var{action} if the user clicks on a button."
msgstr ""

#. type: item
#: original_texis/customize.texi:1155
#, no-wrap
msgid ":button-face @var{face}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:1156
#, no-wrap
msgid "button-face@r{, customization keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:1159
msgid ""
"Use the face @var{face} (a face name or a list of face names) for button "
"text displayed with @samp{%[@dots{}%]}."
msgstr ""

#. type: item
#: original_texis/customize.texi:1160
#, no-wrap
msgid ":button-prefix @var{prefix}"
msgstr ""

#. type: itemx
#: original_texis/customize.texi:1161
#, no-wrap
msgid ":button-suffix @var{suffix}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:1162
#, no-wrap
msgid "button-prefix@r{, customization keyword}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:1163
#, no-wrap
msgid "button-suffix@r{, customization keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:1166
msgid "These specify the text to display before and after a button.  Each can be:"
msgstr ""

#. type: code{#1}
#: original_texis/customize.texi:1168
#, no-wrap
msgid "nil"
msgstr ""

#. type: table
#: original_texis/customize.texi:1170
msgid "No text is inserted."
msgstr ""

#. type: item
#: original_texis/customize.texi:1171
#, no-wrap
msgid "a string"
msgstr ""

#. type: table
#: original_texis/customize.texi:1173
msgid "The string is inserted literally."
msgstr ""

#. type: item
#: original_texis/customize.texi:1174
#, no-wrap
msgid "a symbol"
msgstr ""

#. type: table
#: original_texis/customize.texi:1176
msgid "The symbol's value is used."
msgstr ""

#. type: table
#: original_texis/customize.texi:1181
msgid ""
"Use @var{tag} (a string) as the tag for the value (or part of the value)  "
"that corresponds to this type."
msgstr ""

#. type: item
#: original_texis/customize.texi:1182
#, no-wrap
msgid ":doc @var{doc}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:1183
#, no-wrap
msgid "doc@r{, customization keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:1188
msgid ""
"Use @var{doc} as the documentation string for this value (or part of the "
"value) that corresponds to this type.  In order for this to work, you must "
"specify a value for @code{:format}, and use @samp{%d} or @samp{%h} in that "
"value."
msgstr ""

#. type: table
#: original_texis/customize.texi:1192
msgid ""
"The usual reason to specify a documentation string for a type is to provide "
"more information about the meanings of alternatives inside a @code{choice} "
"type or the parts of some other composite type."
msgstr ""

#. type: item
#: original_texis/customize.texi:1193
#, no-wrap
msgid ":help-echo @var{motion-doc}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:1194
#, no-wrap
msgid "help-echo@r{, customization keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:1201
msgid ""
"When you move to this item with @code{widget-forward} or "
"@code{widget-backward}, it will display the string @var{motion-doc} in the "
"echo area.  In addition, @var{motion-doc} is used as the mouse "
"@code{help-echo} string and may actually be a function or form evaluated to "
"yield a help string.  If it is a function, it is called with one argument, "
"the widget."
msgstr ""

#. type: item
#: original_texis/customize.texi:1202
#, no-wrap
msgid ":match @var{function}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:1203
#, no-wrap
msgid "match@r{, customization keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:1208
msgid ""
"Specify how to decide whether a value matches the type.  The corresponding "
"value, @var{function}, should be a function that accepts two arguments, a "
"widget and a value; it should return non-@code{nil} if the value is "
"acceptable."
msgstr ""

#. type: item
#: original_texis/customize.texi:1209
#, no-wrap
msgid ":match-inline @var{function}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:1210
#, no-wrap
msgid "match-inline@r{, customization keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:1216
msgid ""
"Specify how to decide whether an inline value matches the type.  The "
"corresponding value, @var{function}, should be a function that accepts two "
"arguments, a widget and an inline value; it should return non-@code{nil} if "
"the value is acceptable.  See @ref{Splicing into Lists} for more information "
"about inline values."
msgstr ""

#. type: item
#: original_texis/customize.texi:1217
#, no-wrap
msgid ":validate @var{function}"
msgstr ""

#. type: table
#: original_texis/customize.texi:1223
msgid ""
"Specify a validation function for input.  @var{function} takes a widget as "
"an argument, and should return @code{nil} if the widget's current value is "
"valid for the widget.  Otherwise, it should return the widget containing the "
"invalid data, and set that widget's @code{:error} property to a string "
"explaining the error."
msgstr ""

#. type: item
#: original_texis/customize.texi:1224
#, no-wrap
msgid ":type-error @var{string}"
msgstr ""

#. type: kindex
#: original_texis/customize.texi:1225
#, no-wrap
msgid "type-error@r{, customization keyword}"
msgstr ""

#. type: table
#: original_texis/customize.texi:1230
msgid ""
"@var{string} should be a string that describes why a value doesn't match the "
"type, as determined by the @code{:match} function.  When the @code{:match} "
"function returns @code{nil}, the widget's @code{:error} property will be set "
"to @var{string}."
msgstr ""

#. type: item
#: original_texis/customize.texi:1232
#, no-wrap
msgid ":indent @var{columns}"
msgstr ""

#. type: item
#: original_texis/customize.texi:1238
#, no-wrap
msgid ":offset @var{extra}"
msgstr ""

#. type: item
#: original_texis/customize.texi:1243
#, no-wrap
msgid ":extra-offset @var{n}"
msgstr ""

#. type: item
#: original_texis/customize.texi:1247
#, no-wrap
msgid ":notify @var{function}"
msgstr ""

#. type: item
#: original_texis/customize.texi:1253
#, no-wrap
msgid ":menu-tag @var{tag-string}"
msgstr ""

#. type: item
#: original_texis/customize.texi:1257
#, no-wrap
msgid ":menu-tag-get"
msgstr ""

#. type: item
#: original_texis/customize.texi:1263
#, no-wrap
msgid ":tab-order"
msgstr ""

#. type: enumerate
#: original_texis/customize.texi:1271
#, no-wrap
msgid ""
"Widgets with tabbing order @code{-1} are ignored.\n"
"\n"
msgstr ""

#. type: enumerate
#: original_texis/customize.texi:1276
#, no-wrap
msgid ""
"(Unimplemented) When on a widget with tabbing order @var{n}, go to the\n"
"next widget in the buffer with tabbing order @var{n+1} or @code{nil},\n"
"whichever comes first.\n"
"\n"
msgstr ""

#. type: enumerate
#: original_texis/customize.texi:1280
#, no-wrap
msgid ""
"When on a widget with no tabbing order specified, go to the next widget\n"
"in the buffer with a positive tabbing order, or @code{nil}\n"
msgstr ""

#. type: item
#: original_texis/customize.texi:1282
#, no-wrap
msgid ":parent"
msgstr ""

#. type: item
#: original_texis/customize.texi:1286
#, no-wrap
msgid ":sibling-args"
msgstr ""

#. type: cindex
#: original_texis/customize.texi:1296
#, no-wrap
msgid "customization types, define new"
msgstr ""

#. type: cindex
#: original_texis/customize.texi:1297
#, no-wrap
msgid "define new customization types"
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:1307
msgid ""
"In the previous sections we have described how to construct elaborate type "
"specifications for @code{defcustom}.  In some cases you may want to give "
"such a type specification a name.  The obvious case is when you are using "
"the same type for many user options: rather than repeat the specification "
"for each option, you can give the type specification a name, and use that "
"name each @code{defcustom}.  The other case is when a user option's value is "
"a recursive data structure.  To make it possible for a datatype to refer to "
"itself, it needs to have a name."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:1314
msgid ""
"Since custom types are implemented as widgets, the way to define a new "
"customize type is to define a new widget.  We are not going to describe the "
"widget interface here in details, see @ref{Top, , Introduction, widget, The "
"Emacs Widget Library}, for that.  Instead we are going to demonstrate the "
"minimal functionality needed for defining new customize types by a simple "
"example."
msgstr ""

#. type: example
#: original_texis/customize.texi:1325
#, no-wrap
msgid ""
"(define-widget 'binary-tree-of-string 'lazy\n"
"  \"A binary tree made of cons-cells and strings.\"\n"
"  :offset 4\n"
"  :tag \"Node\"\n"
"  :type '(choice (string :tag \"Leaf\" :value \"\")\n"
"                 (cons :tag \"Interior\"\n"
"                       :value (\"\" . \"\")\n"
"                       binary-tree-of-string\n"
"                       binary-tree-of-string)))\n"
"\n"
msgstr ""

#. type: example
#: original_texis/customize.texi:1329
#, no-wrap
msgid ""
"(defcustom foo-bar \"\"\n"
"  \"Sample variable holding a binary tree of strings.\"\n"
"  :type 'binary-tree-of-string)\n"
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:1342
msgid ""
"The function to define a new widget is called @code{define-widget}.  The "
"first argument is the symbol we want to make a new widget type.  The second "
"argument is a symbol representing an existing widget, the new widget is "
"going to be defined in terms of difference from the existing widget.  For "
"the purpose of defining new customization types, the @code{lazy} widget is "
"perfect, because it accepts a @code{:type} keyword argument with the same "
"syntax as the keyword argument to @code{defcustom} with the same name.  The "
"third argument is a documentation string for the new widget.  You will be "
"able to see that string with the @kbd{M-x widget-browse @key{RET} "
"binary-tree-of-string @key{RET}} command."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:1353
msgid ""
"After these mandatory arguments follow the keyword arguments.  The most "
"important is @code{:type}, which describes the data type we want to match "
"with this widget.  Here a @code{binary-tree-of-string} is described as being "
"either a string, or a cons-cell whose car and cdr are themselves both "
"@code{binary-tree-of-string}.  Note the reference to the widget type we are "
"currently in the process of defining.  The @code{:tag} attribute is a string "
"to name the widget in the user interface, and the @code{:offset} argument is "
"there to ensure that child nodes are indented four spaces relative to the "
"parent node, making the tree structure apparent in the customization buffer."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:1356
msgid ""
"The @code{defcustom} shows how the new widget can be used as an ordinary "
"customization type."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:1364
msgid ""
"The reason for the name @code{lazy} is that the other composite widgets "
"convert their inferior widgets to internal form when the widget is "
"instantiated in a buffer.  This conversion is recursive, so the inferior "
"widgets will convert @emph{their} inferior widgets.  If the data structure "
"is itself recursive, this conversion is an infinite recursion.  The "
"@code{lazy} widget prevents the recursion: it convert its @code{:type} "
"argument only when needed."
msgstr ""

#. type: cindex
#: original_texis/customize.texi:1367
#, no-wrap
msgid "applying customizations"
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:1375
msgid ""
"The following functions are responsible for installing the user's "
"customization settings for variables and faces, respectively.  When the user "
"invokes @samp{Save for future sessions} in the Customize interface, that "
"takes effect by writing a @code{custom-set-variables} and/or a "
"@code{custom-set-faces} form into the custom file, to be evaluated the next "
"time Emacs starts."
msgstr ""

#. type: defun
#: original_texis/customize.texi:1376
#, no-wrap
msgid "custom-set-variables &rest args"
msgstr ""

#. type: defun
#: original_texis/customize.texi:1379
msgid ""
"This function installs the variable customizations specified by @var{args}.  "
"Each argument in @var{args} should have the form"
msgstr ""

#. type: example
#: original_texis/customize.texi:1382 original_texis/customize.texi:1489
#, no-wrap
msgid "(@var{var} @var{expression} [@var{now} [@var{request} [@var{comment}]]])\n"
msgstr ""

#. type: defun
#: original_texis/customize.texi:1387
msgid ""
"@var{var} is a variable name (a symbol), and @var{expression} is an "
"expression which evaluates to the desired customized value."
msgstr ""

#. type: defun
#: original_texis/customize.texi:1395
msgid ""
"If the @code{defcustom} form for @var{var} has been evaluated prior to this "
"@code{custom-set-variables} call, @var{expression} is immediately evaluated, "
"and the variable's value is set to the result.  Otherwise, @var{expression} "
"is stored into the variable's @code{saved-value} property, to be evaluated "
"when the relevant @code{defcustom} is called (usually when the library "
"defining that variable is loaded into Emacs)."
msgstr ""

#. type: defun
#: original_texis/customize.texi:1402
msgid ""
"The @var{now}, @var{request}, and @var{comment} entries are for internal use "
"only, and may be omitted.  @var{now}, if non-@code{nil}, means to set the "
"variable's value now, even if the variable's @code{defcustom} form has not "
"been evaluated.  @var{request} is a list of features to be loaded "
"immediately (@pxref{Named Features}).  @var{comment} is a string describing "
"the customization."
msgstr ""

#. type: defun
#: original_texis/customize.texi:1404
#, no-wrap
msgid "custom-set-faces &rest args"
msgstr ""

#. type: defun
#: original_texis/customize.texi:1407
msgid ""
"This function installs the face customizations specified by @var{args}.  "
"Each argument in @var{args} should have the form"
msgstr ""

#. type: example
#: original_texis/customize.texi:1410 original_texis/customize.texi:1503
#, no-wrap
msgid "(@var{face} @var{spec} [@var{now} [@var{comment}]])\n"
msgstr ""

#. type: defun
#: original_texis/customize.texi:1415
msgid ""
"@var{face} is a face name (a symbol), and @var{spec} is the customized face "
"specification for that face (@pxref{Defining Faces})."
msgstr ""

#. type: defun
#: original_texis/customize.texi:1420
msgid ""
"The @var{now} and @var{comment} entries are for internal use only, and may "
"be omitted.  @var{now}, if non-@code{nil}, means to install the face "
"specification now, even if the @code{defface} form has not been evaluated.  "
"@var{comment} is a string describing the customization."
msgstr ""

#. type: cindex
#: original_texis/customize.texi:1425
#, no-wrap
msgid "custom themes"
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:1433
msgid ""
"@dfn{Custom themes} are collections of settings that can be enabled or "
"disabled as a unit.  @xref{Custom Themes,,, emacs, The GNU Emacs Manual}.  "
"Each Custom theme is defined by an Emacs Lisp source file, which should "
"follow the conventions described in this section.  (Instead of writing a "
"Custom theme by hand, you can also create one using a Customize-like "
"interface; @pxref{Creating Custom Themes,,, emacs, The GNU Emacs Manual}.)"
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:1438
msgid ""
"A Custom theme file should be named @file{@var{foo}-theme.el}, where "
"@var{foo} is the theme name.  The first Lisp form in the file should be a "
"call to @code{deftheme}, and the last form should be a call to "
"@code{provide-theme}."
msgstr ""

#. type: defmac
#: original_texis/customize.texi:1439
#, no-wrap
msgid "deftheme theme &optional doc &rest properties"
msgstr ""

#. type: defmac
#: original_texis/customize.texi:1446
msgid ""
"This macro declares @var{theme} (a symbol) as the name of a Custom theme.  "
"The optional argument @var{doc} should be a string describing the theme; "
"this is the description shown when the user invokes the "
"@code{describe-theme} command or types @kbd{?} in the @samp{*Custom Themes*} "
"buffer.  The remaining arguments @var{properties} are used pass a property "
"list with theme attributes."
msgstr ""

#. type: defmac
#: original_texis/customize.texi:1448
msgid "The following attributes are supported:"
msgstr ""

#. type: item
#: original_texis/customize.texi:1450
#, no-wrap
msgid ":family"
msgstr ""

#. type: table
#: original_texis/customize.texi:1455
msgid ""
"A symbol designating what ``family'' a theme belongs to.  A @dfn{family} of "
"themes is a set of similar themes that differ by minor aspects, such as face "
"colors that are meant for the light vs dark background of the frame."
msgstr ""

#. type: item
#: original_texis/customize.texi:1455
#, no-wrap
msgid ":kind"
msgstr ""

#. type: table
#: original_texis/customize.texi:1461
msgid ""
"A symbol.  If a theme is enabled and this property has the value "
"@code{color-scheme}, then the @code{theme-choose-variant} command will look "
"for other available themes that belong to the same family in order to switch "
"the themes.  Other values are currently unspecified and should not be used."
msgstr ""

#. type: item
#: original_texis/customize.texi:1461
#, no-wrap
msgid ":background-mode"
msgstr ""

#. type: table
#: original_texis/customize.texi:1464
msgid ""
"A symbol, either @code{light} or @code{dark}.  This attribute is currently "
"unused, but should still be specified."
msgstr ""

#. type: defmac
#: original_texis/customize.texi:1470
msgid ""
"Two special theme names are disallowed (using them causes an error): "
"@code{user} is a dummy theme that stores the user's direct customization "
"settings, and @code{changed} is a dummy theme that stores changes made "
"outside of the Customize system."
msgstr ""

#. type: defmac
#: original_texis/customize.texi:1472
#, no-wrap
msgid "provide-theme theme"
msgstr ""

#. type: defmac
#: original_texis/customize.texi:1475
msgid ""
"This macro declares that the theme named @var{theme} has been fully "
"specified."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:1481
msgid ""
"In between @code{deftheme} and @code{provide-theme} are Lisp forms "
"specifying the theme settings: usually a call to "
"@code{custom-theme-set-variables} and/or a call to "
"@code{custom-theme-set-faces}."
msgstr ""

#. type: defun
#: original_texis/customize.texi:1482
#, no-wrap
msgid "custom-theme-set-variables theme &rest args"
msgstr ""

#. type: defun
#: original_texis/customize.texi:1486
msgid ""
"This function specifies the Custom theme @var{theme}'s variable settings.  "
"@var{theme} should be a symbol.  Each argument in @var{args} should be a "
"list of the form"
msgstr ""

#. type: defun
#: original_texis/customize.texi:1494
msgid ""
"where the list entries have the same meanings as in "
"@code{custom-set-variables}.  @xref{Applying Customizations}."
msgstr ""

#. type: defun
#: original_texis/customize.texi:1496
#, no-wrap
msgid "custom-theme-set-faces theme &rest args"
msgstr ""

#. type: defun
#: original_texis/customize.texi:1500
msgid ""
"This function specifies the Custom theme @var{theme}'s face settings.  "
"@var{theme} should be a symbol.  Each argument in @var{args} should be a "
"list of the form"
msgstr ""

#. type: defun
#: original_texis/customize.texi:1508
msgid ""
"where the list entries have the same meanings as in "
"@code{custom-set-faces}.  @xref{Applying Customizations}."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:1517
msgid ""
"In theory, a theme file can also contain other Lisp forms, which would be "
"evaluated when loading the theme, but that is bad form.  To protect against "
"loading themes containing malicious code, Emacs displays the source file and "
"asks for confirmation from the user before loading any non-built-in theme "
"for the first time.  As such, themes are not ordinarily byte-compiled, and "
"source files usually take precedence when Emacs is looking for a theme to "
"load."
msgstr ""

#. type: Plain text
#: original_texis/customize.texi:1520
msgid ""
"The following functions are useful for programmatically enabling and "
"disabling themes:"
msgstr ""

#. type: defun
#: original_texis/customize.texi:1521
#, no-wrap
msgid "custom-theme-p theme"
msgstr ""

#. type: defun
#: original_texis/customize.texi:1526
msgid ""
"This function return a non-@code{nil} value if @var{theme} (a symbol)  is "
"the name of a Custom theme (i.e., a Custom theme which has been loaded into "
"Emacs, whether or not the theme is enabled).  Otherwise, it returns "
"@code{nil}."
msgstr ""

#. type: defvar
#: original_texis/customize.texi:1528
#, no-wrap
msgid "custom-known-themes"
msgstr ""

#. type: defvar
#: original_texis/customize.texi:1537
msgid ""
"The value of this variable is a list of themes loaded into Emacs.  Each "
"theme is represented by a Lisp symbol (the theme name).  The default value "
"of this variable is a list containing two dummy themes: @code{(user "
"changed)}.  The @code{changed} theme stores settings made before any Custom "
"themes are applied (e.g., variables set outside of Customize).  The "
"@code{user} theme stores settings the user has customized and saved.  Any "
"additional themes declared with the @code{deftheme} macro are added to the "
"front of this list."
msgstr ""

#. type: deffn
#: original_texis/customize.texi:1539
#, no-wrap
msgid "Command load-theme theme &optional no-confirm no-enable"
msgstr ""

#. type: deffn
#: original_texis/customize.texi:1548
msgid ""
"This function loads the Custom theme named @var{theme} from its source file, "
"looking for the source file in the directories specified by the variable "
"@code{custom-theme-load-path}.  @xref{Custom Themes,,, emacs, The GNU Emacs "
"Manual}.  It also @dfn{enables} the theme (unless the optional argument "
"@var{no-enable} is non-@code{nil}), causing its variable and face settings "
"to take effect.  It prompts the user for confirmation before loading the "
"theme, unless the optional argument @var{no-confirm} is non-@code{nil}."
msgstr ""

#. type: defun
#: original_texis/customize.texi:1550
#, no-wrap
msgid "require-theme feature &optional noerror"
msgstr ""

#. type: defun
#: original_texis/customize.texi:1558
msgid ""
"This function searches @code{custom-theme-load-path} for a file that "
"provides @var{feature} and then loads it.  This is like the function "
"@code{require} (@pxref{Named Features}), except it searches "
"@code{custom-theme-load-path} instead of @code{load-path} (@pxref{Library "
"Search}).  This can be useful in Custom themes that need to load supporting "
"Lisp files when @code{require} is unsuitable for that."
msgstr ""

#. type: defun
#: original_texis/customize.texi:1564
msgid ""
"If @var{feature}, which should be a symbol, is not already present in the "
"current Emacs session according to @code{featurep}, then "
"@code{require-theme} searches for a file named @var{feature} with an added "
"@samp{.elc} or @samp{.el} suffix, in that order, in the directories "
"specified by @code{custom-theme-load-path}."
msgstr ""

#. type: defun
#: original_texis/customize.texi:1572
msgid ""
"If a file providing @var{feature} is successfully found and loaded, then "
"@code{require-theme} returns @var{feature}.  The optional argument "
"@var{noerror} determines what happens if the search or loading fails.  If it "
"is @code{nil}, the function signals an error; otherwise, it returns "
"@code{nil}.  If the file loads successfully but does not provide "
"@var{feature}, then @code{require-theme} signals an error; this cannot be "
"suppressed."
msgstr ""

#. type: deffn
#: original_texis/customize.texi:1574
#, no-wrap
msgid "Command enable-theme theme"
msgstr ""

#. type: deffn
#: original_texis/customize.texi:1577
msgid ""
"This function enables the Custom theme named @var{theme}.  It signals an "
"error if no such theme has been loaded."
msgstr ""

#. type: deffn
#: original_texis/customize.texi:1579
#, no-wrap
msgid "Command disable-theme theme"
msgstr ""

#. type: deffn
#: original_texis/customize.texi:1583
msgid ""
"This function disables the Custom theme named @var{theme}.  The theme "
"remains loaded, so that a subsequent call to @code{enable-theme} will "
"re-enable it."
msgstr ""
