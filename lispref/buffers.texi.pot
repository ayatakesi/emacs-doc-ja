# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2024-06-30 14:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: original_texis/buffers.texi:6 original_texis/buffers.texi:7
#, no-wrap
msgid "Buffers"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:8
#, no-wrap
msgid "buffer"
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:17
msgid ""
"A @dfn{buffer} is a Lisp object containing text to be edited.  Buffers are "
"used to hold the contents of files that are being visited; there may also be "
"buffers that are not visiting files.  While several buffers may exist at one "
"time, only one buffer is designated the @dfn{current buffer} at any time.  "
"Most editing commands act on the contents of the current buffer.  Each "
"buffer, including the current buffer, may or may not be displayed in any "
"windows."
msgstr ""

#. type: section
#: original_texis/buffers.texi:34 original_texis/buffers.texi:36
#: original_texis/buffers.texi:37
#, no-wrap
msgid "Buffer Basics"
msgstr ""

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "What is a buffer?"
msgstr ""

#. type: node
#: original_texis/buffers.texi:34 original_texis/buffers.texi:80
#, no-wrap
msgid "Current Buffer"
msgstr ""

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "Designating a buffer as current so that primitives will access its contents."
msgstr ""

#. type: section
#: original_texis/buffers.texi:34 original_texis/buffers.texi:257
#: original_texis/buffers.texi:258
#, no-wrap
msgid "Buffer Names"
msgstr ""

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "Accessing and changing buffer names."
msgstr ""

#. type: section
#: original_texis/buffers.texi:34 original_texis/buffers.texi:374
#: original_texis/buffers.texi:375
#, no-wrap
msgid "Buffer File Name"
msgstr ""

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "The buffer file name indicates which file is visited."
msgstr ""

#. type: section
#: original_texis/buffers.texi:34 original_texis/buffers.texi:522
#: original_texis/buffers.texi:523
#, no-wrap
msgid "Buffer Modification"
msgstr ""

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "A buffer is @dfn{modified} if it needs to be saved."
msgstr ""

#. type: node
#: original_texis/buffers.texi:34 original_texis/buffers.texi:615
#, no-wrap
msgid "Modification Time"
msgstr ""

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "Determining whether the visited file was changed behind Emacs's back."
msgstr ""

#. type: node
#: original_texis/buffers.texi:34 original_texis/buffers.texi:712
#, no-wrap
msgid "Read Only Buffers"
msgstr ""

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "Modifying text is not allowed in a read-only buffer."
msgstr ""

#. type: node
#: original_texis/buffers.texi:34 original_texis/buffers.texi:792
#, no-wrap
msgid "Buffer List"
msgstr ""

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "How to look at all the existing buffers."
msgstr ""

#. type: section
#: original_texis/buffers.texi:34 original_texis/buffers.texi:1017
#: original_texis/buffers.texi:1018
#, no-wrap
msgid "Creating Buffers"
msgstr ""

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "Functions that create buffers."
msgstr ""

#. type: section
#: original_texis/buffers.texi:34 original_texis/buffers.texi:1095
#: original_texis/buffers.texi:1096
#, no-wrap
msgid "Killing Buffers"
msgstr ""

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "Buffers exist until explicitly killed."
msgstr ""

#. type: section
#: original_texis/buffers.texi:34 original_texis/buffers.texi:1219
#: original_texis/buffers.texi:1220
#, no-wrap
msgid "Indirect Buffers"
msgstr ""

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "An indirect buffer shares text with some other buffer."
msgstr ""

#. type: node
#: original_texis/buffers.texi:34 original_texis/buffers.texi:1288
#, no-wrap
msgid "Swapping Text"
msgstr ""

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "Swapping text between two buffers."
msgstr ""

#. type: node
#: original_texis/buffers.texi:34 original_texis/buffers.texi:1339
#, no-wrap
msgid "Buffer Gap"
msgstr ""

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "The gap in the buffer."
msgstr ""

#. type: ifnottex
#: original_texis/buffers.texi:47
msgid ""
"A @dfn{buffer} is a Lisp object containing text to be edited.  Buffers are "
"used to hold the contents of files that are being visited; there may also be "
"buffers that are not visiting files.  Although several buffers normally "
"exist, only one buffer is designated the @dfn{current buffer} at any time.  "
"Most editing commands act on the contents of the current buffer.  Each "
"buffer, including the current buffer, may or may not be displayed in any "
"windows."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:54
msgid ""
"Buffers in Emacs editing are objects that have distinct names and hold text "
"that can be edited.  Buffers appear to Lisp programs as a special data "
"type.  You can think of the contents of a buffer as a string that you can "
"extend; insertions and deletions may occur in any part of the buffer.  "
"@xref{Text}."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:61
msgid ""
"A Lisp buffer object contains numerous pieces of information.  Some of this "
"information is directly accessible to the programmer through variables, "
"while other information is accessible only through special-purpose "
"functions.  For example, the visited file name is directly accessible "
"through a variable, while the value of point is accessible only through a "
"primitive function."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:69
msgid ""
"Buffer-specific information that is directly accessible is stored in "
"@dfn{buffer-local} variable bindings, which are variable values that are "
"effective only in a particular buffer.  This feature allows each buffer to "
"override the values of certain variables.  Most major modes override "
"variables such as @code{fill-column} or @code{comment-column} in this way.  "
"For more information about buffer-local variables and functions related to "
"them, see @ref{Buffer-Local Variables}."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:74
msgid ""
"For functions and variables related to visiting files in buffers, see "
"@ref{Visiting Files} and @ref{Saving Buffers}.  For functions and variables "
"related to the display of buffers in windows, see @ref{Buffers and Windows}."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:75
#, no-wrap
msgid "bufferp object"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:78
msgid ""
"This function returns @code{t} if @var{object} is a buffer, @code{nil} "
"otherwise."
msgstr ""

#. type: section
#: original_texis/buffers.texi:81
#, no-wrap
msgid "The Current Buffer"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:82
#, no-wrap
msgid "selecting a buffer"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:83
#, no-wrap
msgid "changing to another buffer"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:84
#, no-wrap
msgid "current buffer"
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:91
msgid ""
"There are, in general, many buffers in an Emacs session.  At any time, one "
"of them is designated the @dfn{current buffer}---the buffer in which most "
"editing takes place.  Most of the primitives for examining or changing text "
"operate implicitly on the current buffer (@pxref{Text})."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:98
msgid ""
"Normally, the buffer displayed in the selected window (@pxref{Selecting "
"Windows}) is the current buffer, but this is not always so: a Lisp program "
"can temporarily designate any buffer as current in order to operate on its "
"contents, without changing what is displayed on the screen.  The most basic "
"function for designating a current buffer is @code{set-buffer}."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:99
#, no-wrap
msgid "current-buffer"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:101
msgid "This function returns the current buffer."
msgstr ""

#. type: group
#: original_texis/buffers.texi:106
#, no-wrap
msgid ""
"(current-buffer)\n"
"     @result{} #<buffer buffers.texi>\n"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:110
#, no-wrap
msgid "set-buffer buffer-or-name"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:114
msgid ""
"This function makes @var{buffer-or-name} the current buffer.  "
"@var{buffer-or-name} must be an existing buffer or the name of an existing "
"buffer.  The return value is the buffer made current."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:118
msgid ""
"This function does not display the buffer in any window, so the user cannot "
"necessarily see the buffer.  But Lisp programs will now operate on it."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:128
msgid ""
"When an editing command returns to the editor command loop, Emacs "
"automatically calls @code{set-buffer} on the buffer shown in the selected "
"window (@pxref{Selecting Windows}).  This is to prevent confusion: it "
"ensures that the buffer that the cursor is in, when Emacs reads a command, "
"is the buffer to which that command applies (@pxref{Command Loop}).  Thus, "
"you should not use @code{set-buffer} to switch visibly to a different "
"buffer; for that, use the functions described in @ref{Switching Buffers}."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:135
msgid ""
"When writing a Lisp function, do @emph{not} rely on this behavior of the "
"command loop to restore the current buffer after an operation.  Editing "
"commands can also be called as Lisp functions by other programs, not just "
"from the command loop; it is convenient for the caller if the subroutine "
"does not change which buffer is current (unless, of course, that is the "
"subroutine's purpose)."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:139
msgid ""
"To operate temporarily on another buffer, put the @code{set-buffer} within a "
"@code{save-current-buffer} form.  Here, as an example, is a simplified "
"version of the command @code{append-to-buffer}:"
msgstr ""

#. type: group
#: original_texis/buffers.texi:149
#, no-wrap
msgid ""
"(defun append-to-buffer (buffer start end)\n"
"  \"Append the text of the region to BUFFER.\"\n"
"  (interactive \"BAppend to buffer: \\nr\")\n"
"  (let ((oldbuf (current-buffer)))\n"
"    (save-current-buffer\n"
"      (set-buffer (get-buffer-create buffer))\n"
"      (insert-buffer-substring oldbuf start end))))\n"
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:158
msgid ""
"Here, we bind a local variable to record the current buffer, and then "
"@code{save-current-buffer} arranges to make it current again later.  Next, "
"@code{set-buffer} makes the specified buffer current, and "
"@code{insert-buffer-substring} copies the string from the original buffer to "
"the specified (and now current) buffer."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:160
msgid "Alternatively, we can use the @code{with-current-buffer} macro:"
msgstr ""

#. type: group
#: original_texis/buffers.texi:169
#, no-wrap
msgid ""
"(defun append-to-buffer (buffer start end)\n"
"  \"Append the text of the region to BUFFER.\"\n"
"  (interactive \"BAppend to buffer: \\nr\")\n"
"  (let ((oldbuf (current-buffer)))\n"
"    (with-current-buffer (get-buffer-create buffer)\n"
"      (insert-buffer-substring oldbuf start end))))\n"
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:177
msgid ""
"In either case, if the buffer appended to happens to be displayed in some "
"window, the next redisplay will show how its text has changed.  If it is not "
"displayed in any window, you will not see the change immediately on the "
"screen.  The command causes the buffer to become current temporarily, but "
"does not cause it to be displayed."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:183
msgid ""
"If you make local bindings (with @code{let} or function arguments)  for a "
"variable that may also have buffer-local bindings, make sure that the same "
"buffer is current at the beginning and at the end of the local binding's "
"scope.  Otherwise you might bind it in one buffer and unbind it in another!"
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:188
msgid ""
"Do not rely on using @code{set-buffer} to change the current buffer back, "
"because that won't do the job if a quit happens while the wrong buffer is "
"current.  For instance, in the previous example, it would have been wrong to "
"do this:"
msgstr ""

#. type: group
#: original_texis/buffers.texi:195
#, no-wrap
msgid ""
"  (let ((oldbuf (current-buffer)))\n"
"    (set-buffer (get-buffer-create buffer))\n"
"    (insert-buffer-substring oldbuf start end)\n"
"    (set-buffer oldbuf))\n"
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:202
msgid ""
"Using @code{save-current-buffer} or @code{with-current-buffer}, as we did, "
"correctly handles quitting, errors, and @code{throw}, as well as ordinary "
"evaluation."
msgstr ""

#. type: defspec
#: original_texis/buffers.texi:203
#, no-wrap
msgid "save-current-buffer body@dots{}"
msgstr ""

#. type: defspec
#: original_texis/buffers.texi:209
msgid ""
"The @code{save-current-buffer} special form saves the identity of the "
"current buffer, evaluates the @var{body} forms, and finally restores that "
"buffer as current.  The return value is the value of the last form in "
"@var{body}.  The current buffer is restored even in case of an abnormal exit "
"via @code{throw} or error (@pxref{Nonlocal Exits})."
msgstr ""

#. type: defspec
#: original_texis/buffers.texi:214
msgid ""
"If the buffer that used to be current has been killed by the time of exit "
"from @code{save-current-buffer}, then it is not made current again, of "
"course.  Instead, whichever buffer was current just before exit remains "
"current."
msgstr ""

#. type: defmac
#: original_texis/buffers.texi:216
#, no-wrap
msgid "with-current-buffer buffer-or-name body@dots{}"
msgstr ""

#. type: defmac
#: original_texis/buffers.texi:221
msgid ""
"The @code{with-current-buffer} macro saves the identity of the current "
"buffer, makes @var{buffer-or-name} current, evaluates the @var{body} forms, "
"and finally restores the current buffer.  @var{buffer-or-name} must specify "
"an existing buffer or the name of an existing buffer."
msgstr ""

#. type: defmac
#: original_texis/buffers.texi:225
msgid ""
"The return value is the value of the last form in @var{body}.  The current "
"buffer is restored even in case of an abnormal exit via @code{throw} or "
"error (@pxref{Nonlocal Exits})."
msgstr ""

#. type: defmac
#: original_texis/buffers.texi:227
#, no-wrap
msgid "with-temp-buffer body@dots{}"
msgstr ""

#. type: anchor{#1}
#: original_texis/buffers.texi:234
msgid "Definition of with-temp-buffer"
msgstr ""

#. type: defmac
#: original_texis/buffers.texi:234
msgid ""
"The @code{with-temp-buffer} macro evaluates the @var{body} forms with a "
"temporary buffer as the current buffer.  It saves the identity of the "
"current buffer, creates a temporary buffer and makes it current, evaluates "
"the @var{body} forms, and finally restores the previous current buffer while "
"killing the temporary buffer."
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:235
#, no-wrap
msgid "undo in temporary buffers"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:236
#, no-wrap
msgid "@code{kill-buffer-hook} in temporary buffers"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:237
#, no-wrap
msgid "@code{kill-buffer-query-functions} in temporary buffers"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:238
#, no-wrap
msgid "@code{buffer-list-update-hook} in temporary buffers"
msgstr ""

#. type: defmac
#: original_texis/buffers.texi:245
msgid ""
"By default, undo information (@pxref{Undo}) is not recorded in the buffer "
"created by this macro (but @var{body} can enable that, if needed).  The "
"temporary buffer also does not run the hooks @code{kill-buffer-hook}, "
"@code{kill-buffer-query-functions} (@pxref{Killing Buffers}), and "
"@code{buffer-list-update-hook} (@pxref{Buffer List})."
msgstr ""

#. type: defmac
#: original_texis/buffers.texi:249
msgid ""
"The return value is the value of the last form in @var{body}.  You can "
"return the contents of the temporary buffer by using @code{(buffer-string)} "
"as the last form."
msgstr ""

#. type: defmac
#: original_texis/buffers.texi:252
msgid ""
"The current buffer is restored even in case of an abnormal exit via "
"@code{throw} or error (@pxref{Nonlocal Exits})."
msgstr ""

#. type: defmac
#: original_texis/buffers.texi:255
msgid ""
"See also @code{with-temp-file} in @ref{Definition of with-temp-file,, "
"Writing to Files}."
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:259
#, no-wrap
msgid "buffer names"
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:267
msgid ""
"Each buffer has a unique name, which is a string.  Many of the functions "
"that work on buffers accept either a buffer or a buffer name as an "
"argument.  Any argument called @var{buffer-or-name} is of this sort, and an "
"error is signaled if it is neither a string nor a buffer.  Any argument "
"called @var{buffer} must be an actual buffer object, not a name."
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:268
#, no-wrap
msgid "hidden buffers"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:269
#, no-wrap
msgid "buffers without undo information"
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:276
msgid ""
"Buffers that are ephemeral and generally uninteresting to the user have "
"names starting with a space, so that the @code{list-buffers} and "
"@code{buffer-menu} commands don't mention them (but if such a buffer visits "
"a file, it @strong{is} mentioned).  A name starting with space also "
"initially disables recording undo information; see @ref{Undo}."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:277
#, no-wrap
msgid "buffer-name &optional buffer"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:280
msgid ""
"This function returns the name of @var{buffer} as a string.  @var{buffer} "
"defaults to the current buffer."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:283
msgid ""
"If @code{buffer-name} returns @code{nil}, it means that @var{buffer} has "
"been killed.  @xref{Killing Buffers}."
msgstr ""

#. type: group
#: original_texis/buffers.texi:288
#, no-wrap
msgid ""
"(buffer-name)\n"
"     @result{} \"buffers.texi\"\n"
msgstr ""

#. type: group
#: original_texis/buffers.texi:293
#, no-wrap
msgid ""
"(setq foo (get-buffer \"temp\"))\n"
"     @result{} #<buffer temp>\n"
msgstr ""

#. type: group
#: original_texis/buffers.texi:297
#, no-wrap
msgid ""
"(kill-buffer foo)\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/buffers.texi:301
#, no-wrap
msgid ""
"(buffer-name foo)\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/buffers.texi:305
#, no-wrap
msgid ""
"foo\n"
"     @result{} #<killed buffer>\n"
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:309
#, no-wrap
msgid "Command rename-buffer newname &optional unique"
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:312
msgid ""
"This function renames the current buffer to @var{newname}.  An error is "
"signaled if @var{newname} is not a string."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:318
msgid ""
"Ordinarily, @code{rename-buffer} signals an error if @var{newname} is "
"already in use.  However, if @var{unique} is non-@code{nil}, it modifies "
"@var{newname} to make a name that is not in use.  Interactively, you can "
"make @var{unique} non-@code{nil} with a numeric prefix argument.  (This is "
"how the command @code{rename-uniquely} is implemented.)"
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:320
msgid "This function returns the name actually given to the buffer."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:322
#, no-wrap
msgid "get-buffer buffer-or-name"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:328
msgid ""
"This function returns the buffer specified by @var{buffer-or-name}.  If "
"@var{buffer-or-name} is a string and there is no buffer with that name, the "
"value is @code{nil}.  If @var{buffer-or-name} is a buffer, it is returned as "
"given; that is not very useful, so the argument is usually a name.  For "
"example:"
msgstr ""

#. type: group
#: original_texis/buffers.texi:333
#, no-wrap
msgid ""
"(setq b (get-buffer \"lewis\"))\n"
"     @result{} #<buffer lewis>\n"
msgstr ""

#. type: group
#: original_texis/buffers.texi:337
#, no-wrap
msgid ""
"(get-buffer b)\n"
"     @result{} #<buffer lewis>\n"
msgstr ""

#. type: group
#: original_texis/buffers.texi:341
#, no-wrap
msgid ""
"(get-buffer \"Frazzle-nots\")\n"
"     @result{} nil\n"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:345
msgid "See also the function @code{get-buffer-create} in @ref{Creating Buffers}."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:347
#, no-wrap
msgid "generate-new-buffer-name starting-name &optional ignore"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:353
msgid ""
"This function returns a name that would be unique for a new buffer---but "
"does not create the buffer.  It starts with @var{starting-name}, and "
"produces a name not currently in use for any buffer by appending a number "
"inside of @samp{<@dots{}>}.  It starts at 2 and keeps incrementing the "
"number until it is not the name of an existing buffer."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:360
msgid ""
"If the optional second argument @var{ignore} is non-@code{nil}, it should be "
"a string, a potential buffer name.  It means to consider that potential "
"buffer acceptable, if it is tried, even if it is the name of an existing "
"buffer (which would normally be rejected).  Thus, if buffers named "
"@samp{foo}, @samp{foo<2>}, @samp{foo<3>} and @samp{foo<4>} exist,"
msgstr ""

#. type: example
#: original_texis/buffers.texi:368
#, no-wrap
msgid ""
"(generate-new-buffer-name \"foo\")\n"
"     @result{} \"foo<5>\"\n"
"(generate-new-buffer-name \"foo\" \"foo<3>\")\n"
"     @result{} \"foo<3>\"\n"
"(generate-new-buffer-name \"foo\" \"foo<6>\")\n"
"     @result{} \"foo<5>\"\n"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:372
msgid ""
"See the related function @code{generate-new-buffer} in @ref{Creating "
"Buffers}."
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:376
#, no-wrap
msgid "visited file"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:377
#, no-wrap
msgid "buffer file name"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:378
#, no-wrap
msgid "file name of buffer"
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:386
msgid ""
"The @dfn{buffer file name} is the name of the file that is visited in that "
"buffer.  When a buffer is not visiting a file, its buffer file name is "
"@code{nil}.  Most of the time, the buffer name is the same as the "
"nondirectory part of the buffer file name, but the buffer file name and the "
"buffer name are distinct and can be set independently.  @xref{Visiting "
"Files}."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:387
#, no-wrap
msgid "buffer-file-name &optional buffer"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:392
msgid ""
"This function returns the absolute file name of the file that @var{buffer} "
"is visiting.  If @var{buffer} is not visiting any file, "
"@code{buffer-file-name} returns @code{nil}.  If @var{buffer} is not "
"supplied, it defaults to the current buffer."
msgstr ""

#. type: group
#: original_texis/buffers.texi:397
#, no-wrap
msgid ""
"(buffer-file-name (other-buffer))\n"
"     @result{} \"/usr/user/lewis/manual/files.texi\"\n"
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:401
#, no-wrap
msgid "buffer-file-name"
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:406
msgid ""
"This buffer-local variable contains the name of the file being visited in "
"the current buffer, or @code{nil} if it is not visiting a file.  It is a "
"permanent local variable, unaffected by @code{kill-all-local-variables}."
msgstr ""

#. type: group
#: original_texis/buffers.texi:411
#, no-wrap
msgid ""
"buffer-file-name\n"
"     @result{} \"/usr/user/lewis/manual/buffers.texi\"\n"
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:419
msgid ""
"It is risky to change this variable's value without doing various other "
"things.  Normally it is better to use @code{set-visited-file-name} (see "
"below); some of the things done there, such as changing the buffer name, are "
"not strictly necessary, but others are essential to avoid confusing Emacs."
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:421
#, no-wrap
msgid "buffer-file-truename"
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:427
msgid ""
"This buffer-local variable holds the abbreviated truename of the file "
"visited in the current buffer, or @code{nil} if no file is visited.  It is a "
"permanent local, unaffected by @code{kill-all-local-variables}.  "
"@xref{Truenames}, and @ref{abbreviate-file-name}."
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:429
#, no-wrap
msgid "buffer-file-number"
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:434
msgid ""
"This buffer-local variable holds the inode number and device identifier of "
"the file visited in the current buffer, or @code{nil} if no file or a "
"nonexistent file is visited.  It is a permanent local, unaffected by "
"@code{kill-all-local-variables}."
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:440
msgid ""
"The value is normally a list of the form @code{(@var{inodenum} "
"@var{device})}.  This tuple uniquely identifies the file among all files "
"accessible on the system.  See the function @code{file-attributes}, in "
"@ref{File Attributes}, for more information about them."
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:443
msgid ""
"If @code{buffer-file-name} is the name of a symbolic link, then both "
"@var{inodenum} and @var{device} refer to the recursive target of the link."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:445
#, no-wrap
msgid "get-file-buffer filename"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:453
msgid ""
"This function returns the buffer visiting file @var{filename}.  If there is "
"no such buffer, it returns @code{nil}.  The argument @var{filename}, which "
"must be a string, is expanded (@pxref{File Name Expansion}), then compared "
"against the visited file names of all live buffers.  Note that the buffer's "
"@code{buffer-file-name} must match the expansion of @var{filename} exactly.  "
"This function will not recognize other names for the same file."
msgstr ""

#. type: group
#: original_texis/buffers.texi:458
#, no-wrap
msgid ""
"(get-file-buffer \"buffers.texi\")\n"
"    @result{} #<buffer buffers.texi>\n"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:464
msgid ""
"In unusual circumstances, there can be more than one buffer visiting the "
"same file name.  In such cases, this function returns the first such buffer "
"in the buffer list."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:466
#, no-wrap
msgid "find-buffer-visiting filename &optional predicate"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:476
msgid ""
"This is like @code{get-file-buffer}, except that it can return any buffer "
"visiting the file @emph{possibly under a different name}.  That is, the "
"buffer's @code{buffer-file-name} does not need to match the expansion of "
"@var{filename} exactly, it only needs to refer to the same file.  If "
"@var{predicate} is non-@code{nil}, it should be a function of one argument, "
"a buffer visiting @var{filename}.  The buffer is only considered a suitable "
"return value if @var{predicate} returns non-@code{nil}.  If it can not find "
"a suitable buffer to return, @code{find-buffer-visiting} returns @code{nil}."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:478
#, no-wrap
msgid "Command set-visited-file-name filename &optional no-query along-with-file"
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:483
msgid ""
"If @var{filename} is a non-empty string, this function changes the name of "
"the file visited in the current buffer to @var{filename}.  (If the buffer "
"had no visited file, this gives it one.)  The @emph{next time} the buffer is "
"saved it will go in the newly-specified file."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:489
msgid ""
"This command marks the buffer as modified, since it does not (as far as "
"Emacs knows) match the contents of @var{filename}, even if it matched the "
"former visited file.  It also renames the buffer to correspond to the new "
"file name, unless the new name is already in use."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:494
msgid ""
"If @var{filename} is @code{nil} or the empty string, that stands for ``no "
"visited file''.  In this case, @code{set-visited-file-name} marks the buffer "
"as having no visited file, without changing the buffer's modified flag."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:502
msgid ""
"Normally, this function asks the user for confirmation if there already is a "
"buffer visiting @var{filename}.  If @var{no-query} is non-@code{nil}, that "
"prevents asking this question.  If there already is a buffer visiting "
"@var{filename}, and the user confirms or @var{no-query} is non-@code{nil}, "
"this function makes the new buffer name unique by appending a number inside "
"of @samp{<@dots{}>} to @var{filename}."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:511
msgid ""
"If @var{along-with-file} is non-@code{nil}, that means to assume that the "
"former visited file has been renamed to @var{filename}.  In this case, the "
"command does not change the buffer's modified flag, nor the buffer's "
"recorded last file modification time as reported by "
"@code{visited-file-modtime} (@pxref{Modification Time}).  If "
"@var{along-with-file} is @code{nil}, this function clears the recorded last "
"file modification time, after which @code{visited-file-modtime} returns "
"zero."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:514
msgid ""
"When the function @code{set-visited-file-name} is called interactively, it "
"prompts for @var{filename} in the minibuffer."
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:516
#, no-wrap
msgid "list-buffers-directory"
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:520
msgid ""
"This buffer-local variable specifies a string to display in a buffer listing "
"where the visited file name would go, for buffers that don't have a visited "
"file name.  Dired buffers use this variable."
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:524
#, no-wrap
msgid "buffer modification"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:525
#, no-wrap
msgid "modification flag (of buffer)"
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:534
msgid ""
"Emacs keeps a flag called the @dfn{modified flag} for each buffer, to record "
"whether you have changed the text of the buffer.  This flag is set to "
"@code{t} whenever you alter the contents of the buffer, and cleared to "
"@code{nil} when you save it.  Thus, the flag shows whether there are unsaved "
"changes.  The flag value is normally shown in the mode line (@pxref{Mode "
"Line Variables}), and controls saving (@pxref{Saving Buffers}) and "
"auto-saving (@pxref{Auto-Saving})."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:539
msgid ""
"Some Lisp programs set the flag explicitly.  For example, the function "
"@code{set-visited-file-name} sets the flag to @code{t}, because the text "
"does not match the newly-visited file, even if it is unchanged from the file "
"formerly visited."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:542
msgid ""
"The functions that modify the contents of buffers are described in "
"@ref{Text}."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:543
#, no-wrap
msgid "buffer-modified-p &optional buffer"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:550
msgid ""
"This function returns non-@code{nil} if @var{buffer} has been modified since "
"it was last read in from a file or saved, or @code{nil} otherwise.  If "
"@var{buffer} has been auto-saved since the time it was last modified, this "
"function returns the symbol @code{autosaved}.  If @var{buffer} is @code{nil} "
"or omitted, it defaults to the current buffer."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:552
#, no-wrap
msgid "set-buffer-modified-p flag"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:555
msgid ""
"This function marks the current buffer as modified if @var{flag} is "
"non-@code{nil}, or as unmodified if the flag is @code{nil}."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:559
msgid ""
"Another effect of calling this function is to cause unconditional redisplay "
"of the mode line for the current buffer.  In fact, the function "
"@code{force-mode-line-update} works by doing this:"
msgstr ""

#. type: group
#: original_texis/buffers.texi:563
#, no-wrap
msgid "(set-buffer-modified-p (buffer-modified-p))\n"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:567
#, no-wrap
msgid "restore-buffer-modified-p flag"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:572
msgid ""
"Like @code{set-buffer-modified-p}, but does not force redisplay of mode "
"lines.  This function also allows @var{flag}'s value to be the symbol "
"@code{autosaved}, which marks the buffer as modified and auto-saved after "
"the last modification."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:574
#, no-wrap
msgid "Command not-modified &optional arg"
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:579
msgid ""
"This command marks the current buffer as unmodified, and not needing to be "
"saved.  If @var{arg} is non-@code{nil}, it marks the buffer as modified, so "
"that it will be saved at the next suitable occasion.  Interactively, "
"@var{arg} is the prefix argument."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:582
msgid ""
"Don't use this function in programs, since it prints a message in the echo "
"area; use @code{set-buffer-modified-p} (above) instead."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:584
#, no-wrap
msgid "buffer-modified-tick &optional buffer"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:588
msgid ""
"This function returns @var{buffer}'s modification-count.  This is a counter "
"that increments every time the buffer is modified.  If @var{buffer} is "
"@code{nil} (or omitted), the current buffer is used."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:590
#, no-wrap
msgid "buffer-chars-modified-tick &optional buffer"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:599
msgid ""
"This function returns @var{buffer}'s character-change modification-count.  "
"Changes to text properties leave this counter unchanged; however, each time "
"text is inserted or removed from the buffer, the counter is reset to the "
"value that would be returned by @code{buffer-modified-tick}.  By comparing "
"the values returned by two @code{buffer-chars-modified-tick} calls, you can "
"tell whether a character change occurred in that buffer in between the "
"calls.  If @var{buffer} is @code{nil} (or omitted), the current buffer is "
"used."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:606
msgid ""
"Sometimes there's a need for modifying buffer in a way that doesn't really "
"change its text, like if only its text properties are changed.  If your "
"program needs to modify a buffer without triggering any hooks and features "
"that react to buffer modifications, use the @code{with-silent-modifications} "
"macro."
msgstr ""

#. type: defmac
#: original_texis/buffers.texi:607
#, no-wrap
msgid "with-silent-modifications body@dots{}"
msgstr ""

#. type: defmac
#: original_texis/buffers.texi:613
msgid ""
"Execute @var{body} pretending it does not modify the buffer.  This includes "
"checking whether the buffer's file is locked (@pxref{File Locks}), running "
"buffer modification hooks (@pxref{Change Hooks}), etc.  Note that if "
"@var{body} actually modifies the buffer text (as opposed to its text "
"properties), its undo data may become corrupted."
msgstr ""

#. type: section
#: original_texis/buffers.texi:616
#, no-wrap
msgid "Buffer Modification Time"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:617
#, no-wrap
msgid "comparing file modification time"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:618
#, no-wrap
msgid "modification time of buffer"
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:627
msgid ""
"Suppose that you visit a file and make changes in its buffer, and meanwhile "
"the file itself is changed on disk.  At this point, saving the buffer would "
"overwrite the changes in the file.  Occasionally this may be what you want, "
"but usually it would lose valuable information.  Emacs therefore checks the "
"file's modification time using the functions described below before saving "
"the file.  (@xref{File Attributes}, for how to examine a file's modification "
"time.)"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:628
#, no-wrap
msgid "verify-visited-file-modtime &optional buffer"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:634
msgid ""
"This function compares what @var{buffer} (by default, the current-buffer) "
"has recorded for the modification time of its visited file against the "
"actual modification time of the file as recorded by the operating system.  "
"The two should be the same unless some other process has written the file "
"since Emacs visited or saved it."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:640
msgid ""
"The function returns @code{t} if the last actual modification time and "
"Emacs's recorded modification time are the same, @code{nil} otherwise.  It "
"also returns @code{t} if the buffer has no recorded last modification time, "
"that is if @code{visited-file-modtime} would return zero."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:647
msgid ""
"It always returns @code{t} for buffers that are not visiting a file, even if "
"@code{visited-file-modtime} returns a non-zero value.  For instance, it "
"always returns @code{t} for dired buffers.  It returns @code{t} for buffers "
"that are visiting a file that does not exist and never existed, but "
"@code{nil} for file-visiting buffers whose file has been deleted."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:649
#, no-wrap
msgid "clear-visited-file-modtime"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:654
msgid ""
"This function clears out the record of the last modification time of the "
"file being visited by the current buffer.  As a result, the next attempt to "
"save this buffer will not complain of a discrepancy in file modification "
"times."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:658
msgid ""
"This function is called in @code{set-visited-file-name} and other "
"exceptional places where the usual test to avoid overwriting a changed file "
"should not be done."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:660
#, no-wrap
msgid "visited-file-modtime"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:663
msgid ""
"This function returns the current buffer's recorded last file modification "
"time, as a Lisp timestamp (@pxref{Time of Day})."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:671
msgid ""
"If the buffer has no recorded last modification time, this function returns "
"zero.  This case occurs, for instance, if the buffer is not visiting a file "
"or if the time has been explicitly cleared by "
"@code{clear-visited-file-modtime}.  Note, however, that "
"@code{visited-file-modtime} returns a timestamp for some non-file buffers "
"too.  For instance, in a Dired buffer listing a directory, it returns the "
"last modification time of that directory, as recorded by Dired."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:674
msgid ""
"If the buffer is visiting a file that doesn't exist, this function returns "
"@minus{}1."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:676
#, no-wrap
msgid "set-visited-file-modtime &optional time"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:681
msgid ""
"This function updates the buffer's record of the last modification time of "
"the visited file, to the value specified by @var{time} if @var{time} is not "
"@code{nil}, and otherwise to the last modification time of the visited file."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:685
msgid ""
"If @var{time} is neither @code{nil} nor an integer flag returned by "
"@code{visited-file-modtime}, it should be a Lisp time value (@pxref{Time of "
"Day})."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:689
msgid ""
"This function is useful if the buffer was not read from the file normally, "
"or if the file itself has been changed for some known benign reason."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:691
#, no-wrap
msgid "ask-user-about-supersession-threat filename"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:698
msgid ""
"This function is used to ask a user how to proceed after an attempt to "
"modify a buffer visiting file @var{filename} when the file is newer than the "
"buffer text.  Emacs detects this because the modification time of the file "
"on disk is newer than the last save-time and its contents have changed.  "
"This means some other program has probably altered the file."
msgstr ""

#. type: kindex
#: original_texis/buffers.texi:699
#, no-wrap
msgid "file-supersession"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:704
msgid ""
"Depending on the user's answer, the function may return normally, in which "
"case the modification of the buffer proceeds, or it may signal a "
"@code{file-supersession} error with data @code{(@var{filename})}, in which "
"case the proposed buffer modification is not allowed."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:708
msgid ""
"This function is called automatically by Emacs on the proper occasions.  It "
"exists so you can customize Emacs by redefining it.  See the file "
"@file{userlock.el} for the standard definition."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:710
msgid "See also the file locking mechanism in @ref{File Locks}."
msgstr ""

#. type: section
#: original_texis/buffers.texi:713
#, no-wrap
msgid "Read-Only Buffers"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:714
#, no-wrap
msgid "read-only buffer"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:715
#, no-wrap
msgid "buffer, read-only"
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:720
msgid ""
"If a buffer is @dfn{read-only}, then you cannot change its contents, "
"although you may change your view of the contents by scrolling and "
"narrowing."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:722
msgid "Read-only buffers are used in two kinds of situations:"
msgstr ""

#. type: itemize
#: original_texis/buffers.texi:726
msgid "A buffer visiting a write-protected file is normally read-only."
msgstr ""

#. type: itemize
#: original_texis/buffers.texi:731
msgid ""
"Here, the purpose is to inform the user that editing the buffer with the aim "
"of saving it in the file may be futile or undesirable.  The user who wants "
"to change the buffer text despite this can do so after clearing the "
"read-only flag with @kbd{C-x C-q}."
msgstr ""

#. type: itemize
#: original_texis/buffers.texi:735
msgid ""
"Modes such as Dired and Rmail make buffers read-only when altering the "
"contents with the usual editing commands would probably be a mistake."
msgstr ""

#. type: itemize
#: original_texis/buffers.texi:739
msgid ""
"The special commands of these modes bind @code{buffer-read-only} to "
"@code{nil} (with @code{let}) or bind @code{inhibit-read-only} to @code{t} "
"around the places where they themselves change the text."
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:741
#, no-wrap
msgid "buffer-read-only"
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:746
msgid ""
"This buffer-local variable specifies whether the buffer is read-only.  The "
"buffer is read-only if this variable is non-@code{nil}.  However, characters "
"that have the @code{inhibit-read-only} text property can still be modified.  "
"@xref{Special Properties, inhibit-read-only}."
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:748
#, no-wrap
msgid "inhibit-read-only"
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:754
msgid ""
"If this variable is non-@code{nil}, then read-only buffers and, depending on "
"the actual value, some or all read-only characters may be modified.  "
"Read-only characters in a buffer are those that have a non-@code{nil} "
"@code{read-only} text property.  @xref{Special Properties}, for more "
"information about text properties."
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:759
msgid ""
"If @code{inhibit-read-only} is @code{t}, all @code{read-only} character "
"properties have no effect.  If @code{inhibit-read-only} is a list, then "
"@code{read-only} character properties have no effect if they are members of "
"the list (comparison is done with @code{eq})."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:761
#, no-wrap
msgid "Command read-only-mode &optional arg"
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:767
msgid ""
"This is the mode command for Read Only minor mode, a buffer-local minor "
"mode.  When the mode is enabled, @code{buffer-read-only} is non-@code{nil} "
"in the buffer; when disabled, @code{buffer-read-only} is @code{nil} in the "
"buffer.  The calling convention is the same as for other minor mode commands "
"(@pxref{Minor Mode Conventions})."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:774
msgid ""
"This minor mode mainly serves as a wrapper for @code{buffer-read-only}; "
"unlike most minor modes, there is no separate @code{read-only-mode} "
"variable.  Even when Read Only mode is disabled, characters with "
"non-@code{nil} @code{read-only} text properties remain read-only.  To "
"temporarily ignore all read-only states, bind @code{inhibit-read-only}, as "
"described above."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:780
msgid ""
"When enabling Read Only mode, this mode command also enables View mode if "
"the option @code{view-read-only} is non-@code{nil}.  @xref{Misc "
"Buffer,,Miscellaneous Buffer Operations, emacs, The GNU Emacs Manual}.  When "
"disabling Read Only mode, it disables View mode if View mode was enabled."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:782
#, no-wrap
msgid "barf-if-buffer-read-only &optional position"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:787
msgid ""
"This function signals a @code{buffer-read-only} error if the current buffer "
"is read-only.  If the text at @var{position} (which defaults to point) has "
"the @code{inhibit-read-only} text property set, the error will not be "
"raised."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:790
msgid ""
"@xref{Using Interactive}, for another way to signal an error if the current "
"buffer is read-only."
msgstr ""

#. type: section
#: original_texis/buffers.texi:793
#, no-wrap
msgid "The Buffer List"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:794
#, no-wrap
msgid "buffer list"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:795
#, no-wrap
msgid "listing all buffers"
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:802
msgid ""
"The @dfn{buffer list} is a list of all live buffers.  The order of the "
"buffers in this list is based primarily on how recently each buffer has been "
"displayed in a window.  Several functions, notably @code{other-buffer}, use "
"this ordering.  A buffer list displayed for the user also follows this "
"order."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:811
msgid ""
"Creating a buffer adds it to the end of the buffer list, and killing a "
"buffer removes it from that list.  A buffer moves to the front of this list "
"whenever it is chosen for display in a window (@pxref{Switching Buffers}) or "
"a window displaying it is selected (@pxref{Selecting Windows}).  A buffer "
"moves to the end of the list when it is buried (see @code{bury-buffer}, "
"below).  There are no functions available to the Lisp programmer which "
"directly manipulate the buffer list."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:819
msgid ""
"In addition to the fundamental buffer list just described, Emacs maintains a "
"local buffer list for each frame, in which the buffers that have been "
"displayed (or had their windows selected) in that frame come first.  (This "
"order is recorded in the frame's @code{buffer-list} frame parameter; see "
"@ref{Buffer Parameters}.)  Buffers never displayed in that frame come "
"afterward, ordered according to the fundamental buffer list."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:820
#, no-wrap
msgid "buffer-list &optional frame"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:824
msgid ""
"This function returns the buffer list, including all buffers, even those "
"whose names begin with a space.  The elements are actual buffers, not their "
"names."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:829
msgid ""
"If @var{frame} is a frame, this returns @var{frame}'s local buffer list.  If "
"@var{frame} is @code{nil} or omitted, the fundamental buffer list is used: "
"the buffers appear in order of most recent display or selection, regardless "
"of which frames they were displayed on."
msgstr ""

#. type: group
#: original_texis/buffers.texi:836
#, no-wrap
msgid ""
"(buffer-list)\n"
"     @result{} (#<buffer buffers.texi>\n"
"         #<buffer  *Minibuf-1*> #<buffer buffer.c>\n"
"         #<buffer *Help*> #<buffer TAGS>)\n"
msgstr ""

#. type: group
#: original_texis/buffers.texi:844
#, no-wrap
msgid ""
";; @r{Note that the name of the minibuffer}\n"
";;   @r{begins with a space!}\n"
"(mapcar #'buffer-name (buffer-list))\n"
"    @result{} (\"buffers.texi\" \" *Minibuf-1*\"\n"
"        \"buffer.c\" \"*Help*\" \"TAGS\")\n"
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:852
msgid ""
"The list returned by @code{buffer-list} is constructed specifically; it is "
"not an internal Emacs data structure, and modifying it has no effect on the "
"order of buffers.  If you want to change the order of buffers in the "
"fundamental buffer list, here is an easy way:"
msgstr ""

#. type: example
#: original_texis/buffers.texi:858
#, no-wrap
msgid ""
"(defun reorder-buffer-list (new-list)\n"
"  (while new-list\n"
"    (bury-buffer (car new-list))\n"
"    (setq new-list (cdr new-list))))\n"
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:863
msgid ""
"With this method, you can specify any order for the list, but there is no "
"danger of losing a buffer or adding something that is not a valid live "
"buffer."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:867
msgid ""
"To change the order or value of a specific frame's buffer list, set that "
"frame's @code{buffer-list} parameter with @code{modify-frame-parameters} "
"(@pxref{Parameter Access})."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:868
#, no-wrap
msgid "other-buffer &optional buffer visible-ok frame"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:874
msgid ""
"This function returns the first buffer in the buffer list other than "
"@var{buffer}.  Usually, this is the buffer appearing in the most recently "
"selected window (in frame @var{frame} or else the selected frame, "
"@pxref{Input Focus}), aside from @var{buffer}.  Buffers whose names start "
"with a space are not considered at all."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:879
msgid ""
"If @var{buffer} is not supplied (or if it is not a live buffer), then "
"@code{other-buffer} returns the first buffer in the selected frame's local "
"buffer list.  (If @var{frame} is non-@code{nil}, it returns the first buffer "
"in @var{frame}'s local buffer list instead.)"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:884
msgid ""
"If @var{frame} has a non-@code{nil} @code{buffer-predicate} parameter, then "
"@code{other-buffer} uses that predicate to decide which buffers to "
"consider.  It calls the predicate once for each buffer, and if the value is "
"@code{nil}, that buffer is ignored.  @xref{Buffer Parameters}."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:889
msgid ""
"If @var{visible-ok} is @code{nil}, @code{other-buffer} avoids returning a "
"buffer visible in any window on any visible frame, except as a last resort.  "
"If @var{visible-ok} is non-@code{nil}, then it does not matter whether a "
"buffer is displayed somewhere or not."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:892
msgid ""
"If no suitable buffer exists, the buffer @file{*scratch*} is returned (and "
"created, if necessary)."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:894
#, no-wrap
msgid "last-buffer &optional buffer visible-ok frame"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:898
msgid ""
"This function returns the last buffer in @var{frame}'s buffer list other "
"than @var{buffer}.  If @var{frame} is omitted or @code{nil}, it uses the "
"selected frame's buffer list."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:902
msgid ""
"The argument @var{visible-ok} is handled as with @code{other-buffer}, see "
"above.  If no suitable buffer can be found, the buffer @file{*scratch*} is "
"returned."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:904
#, no-wrap
msgid "Command bury-buffer &optional buffer-or-name"
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:910
msgid ""
"This command puts @var{buffer-or-name} at the end of the buffer list, "
"without changing the order of any of the other buffers on the list.  This "
"buffer therefore becomes the least desirable candidate for "
"@code{other-buffer} to return.  The argument can be either a buffer itself "
"or the name of one."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:917
msgid ""
"This function operates on each frame's @code{buffer-list} parameter as well "
"as the fundamental buffer list; therefore, the buffer that you bury will "
"come last in the value of @code{(buffer-list @var{frame})} and in the value "
"of @code{(buffer-list)}.  In addition, it also puts the buffer at the end of "
"the list of buffers of the selected window (@pxref{Window History}) provided "
"it is shown in that window."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:931
msgid ""
"If @var{buffer-or-name} is @code{nil} or omitted, this means to bury the "
"current buffer.  In addition, if the current buffer is displayed in the "
"selected window (@pxref{Selecting Windows}), this makes sure that the window "
"is either deleted or another buffer is shown in it.  More precisely, if the "
"selected window is dedicated (@pxref{Dedicated Windows}) and there are other "
"windows on its frame, the window is deleted.  If it is the only window on "
"its frame and that frame is not the only frame on its terminal, the frame is "
"dismissed by calling the function specified by "
"@code{frame-auto-hide-function} (@pxref{Quitting Windows}).  Otherwise, it "
"calls @code{switch-to-prev-buffer} (@pxref{Window History}) to show another "
"buffer in that window.  If @var{buffer-or-name} is displayed in some other "
"window, it remains displayed there."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:934
msgid ""
"To replace a buffer in all the windows that display it, use "
"@code{replace-buffer-in-windows}, @xref{Buffers and Windows}."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:936
#, no-wrap
msgid "Command unbury-buffer"
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:942
msgid ""
"This command switches to the last buffer in the local buffer list of the "
"selected frame.  More precisely, it calls the function "
"@code{switch-to-buffer} (@pxref{Switching Buffers}), to display the buffer "
"returned by @code{last-buffer} (see above), in the selected window."
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:944
#, no-wrap
msgid "buffer-list-update-hook"
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:954
msgid ""
"This is a normal hook run whenever the buffer list changes.  Functions "
"(implicitly) running this hook are @code{get-buffer-create} (@pxref{Creating "
"Buffers}), @code{rename-buffer} (@pxref{Buffer Names}), @code{kill-buffer} "
"(@pxref{Killing Buffers}), @code{bury-buffer} (see above), and "
"@code{select-window} (@pxref{Selecting Windows}).  This hook is not run for "
"internal or temporary buffers created by @code{get-buffer-create} or "
"@code{generate-new-buffer} with a non-@code{nil} argument "
"@var{inhibit-buffer-hooks}."
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:958
msgid ""
"Functions run by this hook should avoid calling @code{select-window} with a "
"@code{nil} @var{norecord} argument since this may lead to infinite "
"recursion."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:960
#, no-wrap
msgid "buffer-match-p condition buffer-or-name &optional arg"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:965
msgid ""
"This function checks if a buffer designated by @code{buffer-or-name} "
"satisfies the specified @var{condition}.  Optional third argument @var{arg} "
"is passed to the predicate function in @var{condition}.  A valid "
"@var{condition} can be one of the following:"
msgstr ""

#. type: itemize
#: original_texis/buffers.texi:970
msgid ""
"A string, interpreted as a regular expression.  The buffer satisfies the "
"condition if the regular expression matches the buffer name."
msgstr ""

#. type: itemize
#: original_texis/buffers.texi:976
msgid ""
"A predicate function, which should return non-@code{nil} if the buffer "
"matches.  If the function expects one argument, it is called with "
"@var{buffer-or-name} as the argument; if it expects 2 arguments, the first "
"argument is @var{buffer-or-name} and the second is @var{arg} (or @code{nil} "
"if @var{arg} is omitted)."
msgstr ""

#. type: itemize
#: original_texis/buffers.texi:979
msgid "A cons-cell @code{(@var{oper} . @var{expr})} where @var{oper} is one of"
msgstr ""

#. type: item
#: original_texis/buffers.texi:980
#, no-wrap
msgid "(not @var{cond})"
msgstr ""

#. type: table
#: original_texis/buffers.texi:983
msgid ""
"Satisfied if @var{cond} doesn't satisfy @code{buffer-match-p} with the same "
"buffer and @code{arg}."
msgstr ""

#. type: item
#: original_texis/buffers.texi:983
#, no-wrap
msgid "(or @var{conds}@dots{})"
msgstr ""

#. type: table
#: original_texis/buffers.texi:986
msgid ""
"Satisfied if @emph{any} condition in @var{conds} satisfies "
"@code{buffer-match-p}, with the same buffer and @code{arg}."
msgstr ""

#. type: item
#: original_texis/buffers.texi:986
#, no-wrap
msgid "(and @var{conds}@dots{})"
msgstr ""

#. type: table
#: original_texis/buffers.texi:989
msgid ""
"Satisfied if @emph{all} the conditions in @var{conds} satisfy "
"@code{buffer-match-p}, with the same buffer and @code{arg}."
msgstr ""

#. type: item
#: original_texis/buffers.texi:989
#, no-wrap
msgid "derived-mode"
msgstr ""

#. type: table
#: original_texis/buffers.texi:994
msgid ""
"Satisfied if the buffer's major mode derives from @var{expr}.  Note that "
"this condition might fail to report a match if @code{buffer-match-p} is "
"invoked before the major mode of the buffer has been established."
msgstr ""

#. type: item
#: original_texis/buffers.texi:994
#, no-wrap
msgid "major-mode"
msgstr ""

#. type: table
#: original_texis/buffers.texi:999
msgid ""
"Satisfied if the buffer's major mode is equal to @var{expr}.  Prefer using "
"@code{derived-mode} instead, when both can work.  Note that this condition "
"might fail to report a match if @code{buffer-match-p} is invoked before the "
"major mode of the buffer has been established."
msgstr ""

#. type: item
#: original_texis/buffers.texi:1000
#, no-wrap
msgid "t"
msgstr ""

#. type: itemize
#: original_texis/buffers.texi:1003
msgid ""
"Satisfied by any buffer.  A convenient alternative to @code{\"\"} (empty "
"string) or @code{(and)} (empty conjunction)."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:1006
#, no-wrap
msgid "match-buffers condition &optional buffer-list arg"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:1015
msgid ""
"This function returns a list of all buffers that satisfy the "
"@var{condition}.  If no buffers match, the function returns @code{nil}.  The "
"argument @var{condition} is as defined in @code{buffer-match-p} above.  By "
"default, all the buffers are considered, but this can be restricted via the "
"optional argument @code{buffer-list}, which should be a list of buffers to "
"consider.  Optional third argument @var{arg} will be passed to "
"@var{condition} in the same way as @code{buffer-match-p} does."
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:1019
#, no-wrap
msgid "creating buffers"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:1020
#, no-wrap
msgid "buffers, creating"
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:1026
msgid ""
"This section describes the two primitives for creating buffers.  "
"@code{get-buffer-create} creates a buffer if it finds no existing buffer "
"with the specified name; @code{generate-new-buffer} always creates a new "
"buffer and gives it a unique name."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:1034
msgid ""
"Both functions accept an optional argument @var{inhibit-buffer-hooks}.  If "
"it is non-@code{nil}, the buffer they create does not run the hooks "
"@code{kill-buffer-hook}, @code{kill-buffer-query-functions} (@pxref{Killing "
"Buffers}), and @code{buffer-list-update-hook} (@pxref{Buffer List}).  This "
"avoids slowing down internal or temporary buffers that are never presented "
"to users or passed on to other applications."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:1039
msgid ""
"Other functions you can use to create buffers include "
"@code{with-output-to-temp-buffer} (@pxref{Temporary Displays}) and "
"@code{create-file-buffer} (@pxref{Visiting Files}).  Starting a subprocess "
"can also create a buffer (@pxref{Processes})."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:1040
#, no-wrap
msgid "get-buffer-create buffer-or-name &optional inhibit-buffer-hooks"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:1044
msgid ""
"This function returns a buffer named @var{buffer-or-name}.  The buffer "
"returned does not become the current buffer---this function does not change "
"which buffer is current."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:1050
msgid ""
"@var{buffer-or-name} must be either a string or an existing buffer.  If it "
"is a string and a live buffer with that name already exists, "
"@code{get-buffer-create} returns that buffer.  If no such buffer exists, it "
"creates a new buffer.  If @var{buffer-or-name} is a buffer instead of a "
"string, it is returned as given, even if it is dead."
msgstr ""

#. type: group
#: original_texis/buffers.texi:1055
#, no-wrap
msgid ""
"(get-buffer-create \"foo\")\n"
"     @result{} #<buffer foo>\n"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:1062
msgid ""
"The major mode for a newly created buffer is set to Fundamental mode.  (The "
"default value of the variable @code{major-mode} is handled at a higher "
"level; see @ref{Auto Major Mode}.)  If the name begins with a space, the "
"buffer initially disables undo information recording (@pxref{Undo})."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:1064
#, no-wrap
msgid "generate-new-buffer name &optional inhibit-buffer-hooks"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:1072
msgid ""
"This function returns a newly created, empty buffer, but does not make it "
"current.  The name of the buffer is generated by passing @var{name} to the "
"function @code{generate-new-buffer-name} (@pxref{Buffer Names}).  Thus, if "
"there is no buffer named @var{name}, then that is the name of the new "
"buffer; if that name is in use, a suffix of the form @samp{<@var{n}>}, where "
"@var{n} is an integer, is appended to @var{name}."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:1074
msgid "An error is signaled if @var{name} is not a string."
msgstr ""

#. type: group
#: original_texis/buffers.texi:1079
#, no-wrap
msgid ""
"(generate-new-buffer \"bar\")\n"
"     @result{} #<buffer bar>\n"
msgstr ""

#. type: group
#: original_texis/buffers.texi:1083
#, no-wrap
msgid ""
"(generate-new-buffer \"bar\")\n"
"     @result{} #<buffer bar<2>>\n"
msgstr ""

#. type: group
#: original_texis/buffers.texi:1087
#, no-wrap
msgid ""
"(generate-new-buffer \"bar\")\n"
"     @result{} #<buffer bar<3>>\n"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:1093
msgid ""
"The major mode for the new buffer is set to Fundamental mode.  The default "
"value of the variable @code{major-mode} is handled at a higher level.  "
"@xref{Auto Major Mode}."
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:1097
#, no-wrap
msgid "killing buffers"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:1098
#, no-wrap
msgid "buffers, killing"
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:1102
msgid ""
"@dfn{Killing a buffer} makes its name unknown to Emacs and makes the memory "
"space it occupied available for other use."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:1108
msgid ""
"The buffer object for the buffer that has been killed remains in existence "
"as long as anything refers to it, but it is specially marked so that you "
"cannot make it current or display it.  Killed buffers retain their identity, "
"however; if you kill two distinct buffers, they remain distinct according to "
"@code{eq} although both are dead."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:1115
msgid ""
"If you kill a buffer that is current or displayed in a window, Emacs "
"automatically selects or displays some other buffer instead.  This means "
"that killing a buffer can change the current buffer.  Therefore, when you "
"kill a buffer, you should also take the precautions associated with changing "
"the current buffer (unless you happen to know that the buffer being killed "
"isn't current).  @xref{Current Buffer}."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:1117
msgid "If you kill a buffer that is the base buffer of one or more indirect"
msgstr ""

#. type: iftex
#: original_texis/buffers.texi:1119
msgid "buffers,"
msgstr ""

#. type: ifnottex
#: original_texis/buffers.texi:1122
msgid "buffers (@pxref{Indirect Buffers}),"
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:1124
msgid "the indirect buffers are automatically killed as well."
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:1125
#, no-wrap
msgid "live buffer"
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:1130
msgid ""
"The @code{buffer-name} of a buffer is @code{nil} if, and only if, the buffer "
"is killed.  A buffer that has not been killed is called a @dfn{live} "
"buffer.  To test whether a buffer is live or killed, use the function "
"@code{buffer-live-p} (see below)."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:1131
#, no-wrap
msgid "Command kill-buffer &optional buffer-or-name"
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:1136
msgid ""
"This function kills the buffer @var{buffer-or-name}, freeing all its memory "
"for other uses or to be returned to the operating system.  If "
"@var{buffer-or-name} is @code{nil} or omitted, it kills the current buffer."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:1140
msgid ""
"Any processes that have this buffer as the @code{process-buffer} are sent "
"the @code{SIGHUP} (hangup) signal, which normally causes them to terminate.  "
"@xref{Signals to Processes}."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:1146
msgid ""
"If the buffer is visiting a file and contains unsaved changes, "
"@code{kill-buffer} asks the user to confirm before the buffer is killed.  It "
"does this even if not called interactively.  To prevent the request for "
"confirmation, clear the modified flag before calling @code{kill-buffer}.  "
"@xref{Buffer Modification}."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:1149
msgid ""
"This function calls @code{replace-buffer-in-windows} for cleaning up all "
"windows currently displaying the buffer to be killed."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:1151
msgid "Killing a buffer that is already dead has no effect."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:1155
msgid ""
"This function returns @code{t} if it actually killed the buffer.  It returns "
"@code{nil} if the user refuses to confirm or if @var{buffer-or-name} was "
"already dead."
msgstr ""

#. type: smallexample
#: original_texis/buffers.texi:1160
#, no-wrap
msgid ""
"(kill-buffer \"foo.unchanged\")\n"
"     @result{} t\n"
"(kill-buffer \"foo.changed\")\n"
"\n"
msgstr ""

#. type: smallexample
#: original_texis/buffers.texi:1164
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"Buffer foo.changed modified; kill anyway? (yes or no) @kbd{yes}\n"
"---------- Buffer: Minibuffer ----------\n"
"\n"
msgstr ""

#. type: smallexample
#: original_texis/buffers.texi:1166
#, no-wrap
msgid "     @result{} t\n"
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:1169
#, no-wrap
msgid "kill-buffer-query-functions"
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:1176
msgid ""
"Before confirming unsaved changes, @code{kill-buffer} calls the functions in "
"the list @code{kill-buffer-query-functions}, in order of appearance, with no "
"arguments.  The buffer being killed is the current buffer when they are "
"called.  The idea of this feature is that these functions will ask for "
"confirmation from the user.  If any of them returns @code{nil}, "
"@code{kill-buffer} spares the buffer's life."
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:1180 original_texis/buffers.texi:1192
msgid ""
"This hook is not run for internal or temporary buffers created by "
"@code{get-buffer-create} or @code{generate-new-buffer} with a non-@code{nil} "
"argument @var{inhibit-buffer-hooks}."
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:1182
#, no-wrap
msgid "kill-buffer-hook"
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:1188
msgid ""
"This is a normal hook run by @code{kill-buffer} after asking all the "
"questions it is going to ask, just before actually killing the buffer.  The "
"buffer to be killed is current when the hook functions run.  @xref{Hooks}.  "
"This variable is a permanent local, so its local binding is not cleared by "
"changing major modes."
msgstr ""

#. type: defopt
#: original_texis/buffers.texi:1194
#, no-wrap
msgid "buffer-offer-save"
msgstr ""

#. type: defopt
#: original_texis/buffers.texi:1205
msgid ""
"This variable, if non-@code{nil} in a particular buffer, tells "
"@code{save-buffers-kill-emacs} to offer to save that buffer, just as it "
"offers to save file-visiting buffers.  If @code{save-some-buffers} is called "
"with the second optional argument set to @code{t}, it will also offer to "
"save the buffer.  Lastly, if this variable is set to the symbol "
"@code{always}, both @code{save-buffers-kill-emacs} and "
"@code{save-some-buffers} will always offer to save.  @xref{Definition of "
"save-some-buffers}.  The variable @code{buffer-offer-save} automatically "
"becomes buffer-local when set for any reason.  @xref{Buffer-Local "
"Variables}."
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:1207
#, no-wrap
msgid "buffer-save-without-query"
msgstr ""

#. type: defvar
#: original_texis/buffers.texi:1212
msgid ""
"This variable, if non-@code{nil} in a particular buffer, tells "
"@code{save-buffers-kill-emacs} and @code{save-some-buffers} to save this "
"buffer (if it's modified) without asking the user.  The variable "
"automatically becomes buffer-local when set for any reason."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:1214
#, no-wrap
msgid "buffer-live-p object"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:1217
msgid ""
"This function returns @code{t} if @var{object} is a live buffer (a buffer "
"which has not been killed), @code{nil} otherwise."
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:1221
#, no-wrap
msgid "indirect buffers"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:1222
#, no-wrap
msgid "base buffer"
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:1228
msgid ""
"An @dfn{indirect buffer} shares the text of some other buffer, which is "
"called the @dfn{base buffer} of the indirect buffer.  In some ways it is the "
"analogue, for buffers, of a symbolic link among files.  The base buffer may "
"not itself be an indirect buffer."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:1233
msgid ""
"The text of the indirect buffer is always identical to the text of its base "
"buffer; changes made by editing either one are visible immediately in the "
"other.  This includes the text properties as well as the characters "
"themselves."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:1240
msgid ""
"In all other respects, the indirect buffer and its base buffer are "
"completely separate.  They have different names, independent values of "
"point, independent narrowing, independent markers and overlays (though "
"inserting or deleting text in either buffer relocates the markers and "
"overlays for both), independent major modes, and independent buffer-local "
"variable bindings."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:1244
msgid ""
"An indirect buffer cannot visit a file, but its base buffer can.  If you try "
"to save the indirect buffer, that actually saves the base buffer."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:1248
msgid ""
"Killing an indirect buffer has no effect on its base buffer.  Killing the "
"base buffer effectively kills the indirect buffer in that it cannot ever "
"again be the current buffer."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:1249
#, no-wrap
msgid ""
"Command make-indirect-buffer base-buffer name &optional clone "
"inhibit-buffer-hooks"
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:1254
msgid ""
"This creates and returns an indirect buffer named @var{name} whose base "
"buffer is @var{base-buffer}.  The argument @var{base-buffer} may be a live "
"buffer or the name (a string) of an existing buffer.  If @var{name} is the "
"name of an existing buffer, an error is signaled."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:1260
msgid ""
"If @var{clone} is non-@code{nil}, then the indirect buffer originally shares "
"the state of @var{base-buffer} such as major mode, minor modes, buffer local "
"variables and so on.  If @var{clone} is omitted or @code{nil} the indirect "
"buffer's state is set to the default state for new buffers."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:1265
msgid ""
"If @var{base-buffer} is an indirect buffer, its base buffer is used as the "
"base for the new buffer.  If, in addition, @var{clone} is non-@code{nil}, "
"the initial state is copied from the actual base buffer, not from "
"@var{base-buffer}."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:1267
msgid "@xref{Creating Buffers}, for the meaning of @var{inhibit-buffer-hooks}."
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:1269
#, no-wrap
msgid "Command clone-indirect-buffer newname display-flag &optional norecord"
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:1274
msgid ""
"This function creates and returns a new indirect buffer that shares the "
"current buffer's base buffer and copies the rest of the current buffer's "
"attributes.  (If the current buffer is not indirect, it is used as the base "
"buffer.)"
msgstr ""

#. type: deffn
#: original_texis/buffers.texi:1279
msgid ""
"If @var{display-flag} is non-@code{nil}, as it always is in interactive "
"calls, that means to display the new buffer by calling "
"@code{pop-to-buffer}.  If @var{norecord} is non-@code{nil}, that means not "
"to put the new buffer to the front of the buffer list."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:1281
#, no-wrap
msgid "buffer-base-buffer &optional buffer"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:1286
msgid ""
"This function returns the base buffer of @var{buffer}, which defaults to the "
"current buffer.  If @var{buffer} is not indirect, the value is @code{nil}.  "
"Otherwise, the value is another buffer, which is never an indirect buffer."
msgstr ""

#. type: section
#: original_texis/buffers.texi:1289
#, no-wrap
msgid "Swapping Text Between Two Buffers"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:1290
#, no-wrap
msgid "swap text between buffers"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:1291
#, no-wrap
msgid "virtual buffers"
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:1297
msgid ""
"Specialized modes sometimes need to let the user access from the same buffer "
"several vastly different types of text.  For example, you may need to "
"display a summary of the buffer text, in addition to letting the user access "
"the text itself."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:1304
msgid ""
"This could be implemented with multiple buffers (kept in sync when the user "
"edits the text), or with narrowing (@pxref{Narrowing}).  But these "
"alternatives might sometimes become tedious or prohibitively expensive, "
"especially if each type of text requires expensive buffer-global operations "
"in order to provide correct display and editing commands."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:1312
msgid ""
"Emacs provides another facility for such modes: you can quickly swap buffer "
"text between two buffers with @code{buffer-swap-text}.  This function is "
"very fast because it doesn't move any text, it only changes the internal "
"data structures of the buffer object to point to a different chunk of text.  "
"Using it, you can pretend that a group of two or more buffers are actually a "
"single virtual buffer that holds the contents of all the individual buffers "
"together."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:1313
#, no-wrap
msgid "buffer-swap-text buffer"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:1318
msgid ""
"This function swaps the text of the current buffer and that of its argument "
"@var{buffer}.  It signals an error if one of the two buffers is an indirect "
"buffer (@pxref{Indirect Buffers}) or is a base buffer of an indirect buffer."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:1324
msgid ""
"All the buffer properties that are related to the buffer text are swapped as "
"well: the positions of point and mark, all the markers, the overlays, the "
"text properties, the undo list, the value of the "
"@code{enable-multibyte-characters} flag (@pxref{Text Representations, "
"enable-multibyte-characters}), etc."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:1330
msgid ""
"@strong{Warning:} If this function is called from within a "
"@code{save-excursion} form, the current buffer will be set to @var{buffer} "
"upon leaving the form, since the marker used by @code{save-excursion} to "
"save the position and buffer will be swapped as well."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:1338
msgid ""
"If you use @code{buffer-swap-text} on a file-visiting buffer, you should set "
"up a hook to save the buffer's original text rather than what it was swapped "
"with.  @code{write-region-annotate-functions} works for this purpose.  You "
"should probably set @code{buffer-saved-size} to @minus{}2 in the buffer, so "
"that changes in the text it is swapped with will not interfere with "
"auto-saving."
msgstr ""

#. type: section
#: original_texis/buffers.texi:1340
#, no-wrap
msgid "The Buffer Gap"
msgstr ""

#. type: cindex
#: original_texis/buffers.texi:1341
#, no-wrap
msgid "buffer gap"
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:1351
msgid ""
"Emacs buffers are implemented using an invisible @dfn{gap} to make insertion "
"and deletion faster.  Insertion works by filling in part of the gap, and "
"deletion adds to the gap.  Of course, this means that the gap must first be "
"moved to the locus of the insertion or deletion.  Emacs moves the gap only "
"when you try to insert or delete.  This is why your first editing command in "
"one part of a large buffer, after previously editing in another far-away "
"part, sometimes involves a noticeable delay."
msgstr ""

#. type: Plain text
#: original_texis/buffers.texi:1355
msgid ""
"This mechanism works invisibly, and Lisp code should never be affected by "
"the gap's current location, but these functions are available for getting "
"information about the gap status."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:1356
#, no-wrap
msgid "gap-position"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:1358
msgid "This function returns the current gap position in the current buffer."
msgstr ""

#. type: defun
#: original_texis/buffers.texi:1360
#, no-wrap
msgid "gap-size"
msgstr ""

#. type: defun
#: original_texis/buffers.texi:1362
msgid "This function returns the current gap size of the current buffer."
msgstr ""
