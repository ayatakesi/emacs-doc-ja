# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2024-06-30 14:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: node
#: original_texis/display.texi:5
#, no-wrap
msgid "Display"
msgstr ""

#. type: chapter
#: original_texis/display.texi:6
#, no-wrap
msgid "Emacs Display"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:10
msgid ""
"This chapter describes a number of features related to the display that "
"Emacs presents to the user."
msgstr ""

#. type: node
#: original_texis/display.texi:41 original_texis/display.texi:43
#, no-wrap
msgid "Refresh Screen"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Clearing the screen and redrawing everything on it."
msgstr ""

#. type: section
#: original_texis/display.texi:41 original_texis/display.texi:82
#: original_texis/display.texi:83
#, no-wrap
msgid "Forcing Redisplay"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Forcing redisplay."
msgstr ""

#. type: section
#: original_texis/display.texi:41 original_texis/display.texi:132
#: original_texis/display.texi:133
#, no-wrap
msgid "Truncation"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Folding or wrapping long text lines."
msgstr ""

#. type: section
#: original_texis/display.texi:41 original_texis/display.texi:232
#: original_texis/display.texi:233
#, no-wrap
msgid "The Echo Area"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Displaying messages at the bottom of the screen."
msgstr ""

#. type: node
#: original_texis/display.texi:41 original_texis/display.texi:751
#, no-wrap
msgid "Warnings"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Displaying warning messages for the user."
msgstr ""

#. type: section
#: original_texis/display.texi:41 original_texis/display.texi:1048
#: original_texis/display.texi:1049
#, no-wrap
msgid "Invisible Text"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Hiding part of the buffer text."
msgstr ""

#. type: section
#: original_texis/display.texi:41 original_texis/display.texi:1211
#: original_texis/display.texi:1212
#, no-wrap
msgid "Selective Display"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Hiding part of the buffer text (the old way)."
msgstr ""

#. type: section
#: original_texis/display.texi:41 original_texis/display.texi:1329
#: original_texis/display.texi:1330
#, no-wrap
msgid "Temporary Displays"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Displays that go away automatically."
msgstr ""

#. type: section
#: original_texis/display.texi:41 original_texis/display.texi:1553
#: original_texis/display.texi:1554
#, no-wrap
msgid "Overlays"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Use overlays to highlight parts of the buffer."
msgstr ""

#. type: section
#: original_texis/display.texi:41 original_texis/display.texi:2095
#: original_texis/display.texi:2096
#, no-wrap
msgid "Size of Displayed Text"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "How large displayed text is."
msgstr ""

#. type: section
#: original_texis/display.texi:41 original_texis/display.texi:2412
#: original_texis/display.texi:2413
#, no-wrap
msgid "Line Height"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Controlling the height of lines."
msgstr ""

#. type: section
#: original_texis/display.texi:41 original_texis/display.texi:2519
#: original_texis/display.texi:2520
#, no-wrap
msgid "Faces"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "A face defines a graphics style for text characters: font, colors, etc."
msgstr ""

#. type: section
#: original_texis/display.texi:41 original_texis/display.texi:4436
#: original_texis/display.texi:4437
#, no-wrap
msgid "Fringes"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Controlling window fringes."
msgstr ""

#. type: section
#: original_texis/display.texi:41 original_texis/display.texi:4889
#: original_texis/display.texi:4890
#, no-wrap
msgid "Scroll Bars"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Controlling scroll bars."
msgstr ""

#. type: section
#: original_texis/display.texi:41 original_texis/display.texi:5081
#: original_texis/display.texi:5082
#, no-wrap
msgid "Window Dividers"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Separating windows visually."
msgstr ""

#. type: node
#: original_texis/display.texi:41 original_texis/display.texi:5145
#, no-wrap
msgid "Display Property"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Images, margins, text size, etc."
msgstr ""

#. type: section
#: original_texis/display.texi:41 original_texis/display.texi:5721
#: original_texis/display.texi:5722
#, no-wrap
msgid "Images"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Displaying images in Emacs buffers."
msgstr ""

#. type: section
#: original_texis/display.texi:41 original_texis/display.texi:7222
#: original_texis/display.texi:7223
#, no-wrap
msgid "Icons"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Displaying icons in Emacs buffers."
msgstr ""

#. type: node
#: original_texis/display.texi:41 original_texis/display.texi:7387
#, no-wrap
msgid "Xwidgets"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Displaying native widgets in Emacs buffers."
msgstr ""

#. type: section
#: original_texis/display.texi:41 original_texis/display.texi:7651
#: original_texis/display.texi:7652
#, no-wrap
msgid "Buttons"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Adding clickable buttons to Emacs buffers."
msgstr ""

#. type: section
#: original_texis/display.texi:41 original_texis/display.texi:7997
#: original_texis/display.texi:7998
#, no-wrap
msgid "Abstract Display"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Emacs's Widget for Object Collections."
msgstr ""

#. type: node
#: original_texis/display.texi:41 original_texis/display.texi:8335
#, no-wrap
msgid "Blinking"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "How Emacs shows the matching open parenthesis."
msgstr ""

#. type: section
#: original_texis/display.texi:41 original_texis/display.texi:8393
#: original_texis/display.texi:8394
#, no-wrap
msgid "Character Display"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "How Emacs displays individual characters."
msgstr ""

#. type: section
#: original_texis/display.texi:41 original_texis/display.texi:8861
#: original_texis/display.texi:8862
#, no-wrap
msgid "Beeping"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Audible signal to the user."
msgstr ""

#. type: section
#: original_texis/display.texi:41 original_texis/display.texi:8897
#: original_texis/display.texi:8898
#, no-wrap
msgid "Window Systems"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Which window system is being used."
msgstr ""

#. type: section
#: original_texis/display.texi:41 original_texis/display.texi:8953
#: original_texis/display.texi:8954
#, no-wrap
msgid "Tooltips"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Tooltip display in Emacs."
msgstr ""

#. type: section
#: original_texis/display.texi:41 original_texis/display.texi:9032
#: original_texis/display.texi:9033
#, no-wrap
msgid "Bidirectional Display"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:41
msgid "Display of bidirectional scripts, such as Arabic and Farsi."
msgstr ""

#. type: section
#: original_texis/display.texi:44
#, no-wrap
msgid "Refreshing the Screen"
msgstr ""

#. type: cindex
#: original_texis/display.texi:45
#, no-wrap
msgid "refresh the screen"
msgstr ""

#. type: cindex
#: original_texis/display.texi:46
#, no-wrap
msgid "screen refresh"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:51
msgid ""
"The function @code{redraw-frame} clears and redisplays the entire contents "
"of a given frame (@pxref{Frames}).  This is useful if the screen is "
"corrupted."
msgstr ""

#. type: defun
#: original_texis/display.texi:52
#, no-wrap
msgid "redraw-frame &optional frame"
msgstr ""

#. type: defun
#: original_texis/display.texi:55
msgid ""
"This function clears and redisplays frame @var{frame}.  If @var{frame} is "
"omitted or @code{nil}, it redraws the selected frame."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:58
msgid "Even more powerful is @code{redraw-display}:"
msgstr ""

#. type: deffn
#: original_texis/display.texi:59
#, no-wrap
msgid "Command redraw-display"
msgstr ""

#. type: deffn
#: original_texis/display.texi:61
msgid "This function clears and redisplays all visible frames."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:67
msgid ""
"In Emacs, processing user input takes priority over redisplay.  If you call "
"these functions when input is available, they don't redisplay immediately, "
"but the requested redisplay does happen eventually---after all the input has "
"been processed."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:73
msgid ""
"On text terminals, suspending and resuming Emacs normally also refreshes the "
"screen.  Some terminal emulators record separate contents for "
"display-oriented programs such as Emacs and for ordinary sequential "
"display.  If you are using such a terminal, you might want to inhibit the "
"redisplay on resumption."
msgstr ""

#. type: defopt
#: original_texis/display.texi:74
#, no-wrap
msgid "no-redraw-on-reenter"
msgstr ""

#. type: cindex
#: original_texis/display.texi:75
#, no-wrap
msgid "suspend (cf. @code{no-redraw-on-reenter})"
msgstr ""

#. type: cindex
#: original_texis/display.texi:76
#, no-wrap
msgid "resume (cf. @code{no-redraw-on-reenter})"
msgstr ""

#. type: defopt
#: original_texis/display.texi:80
msgid ""
"This variable controls whether Emacs redraws the entire screen after it has "
"been suspended and resumed.  Non-@code{nil} means there is no need to "
"redraw, @code{nil} means redrawing is needed.  The default is @code{nil}."
msgstr ""

#. type: cindex
#: original_texis/display.texi:84
#, no-wrap
msgid "forcing redisplay"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:90
msgid ""
"Emacs normally tries to redisplay the screen whenever it waits for input.  "
"With the following function, you can request an immediate attempt to "
"redisplay, in the middle of Lisp code, without actually waiting for input."
msgstr ""

#. type: defun
#: original_texis/display.texi:91
#, no-wrap
msgid "redisplay &optional force"
msgstr ""

#. type: defun
#: original_texis/display.texi:95
msgid ""
"This function tries immediately to redisplay.  The optional argument "
"@var{force}, if non-@code{nil}, forces the redisplay to be performed, "
"instead of being preempted if input is pending."
msgstr ""

#. type: defun
#: original_texis/display.texi:100
msgid ""
"The function returns @code{t} if it actually tried to redisplay, and "
"@code{nil} otherwise.  A value of @code{t} does not mean that redisplay "
"proceeded to completion; it could have been preempted by newly arriving "
"input."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:107
msgid ""
"Although @code{redisplay} tries immediately to redisplay, it does not change "
"how Emacs decides which parts of its frame(s) to redisplay.  By contrast, "
"the following function adds certain windows to the pending redisplay work "
"(as if their contents had completely changed), but does not immediately try "
"to perform redisplay."
msgstr ""

#. type: defun
#: original_texis/display.texi:108
#, no-wrap
msgid "force-window-update &optional object"
msgstr ""

#. type: defun
#: original_texis/display.texi:114
msgid ""
"This function forces some or all windows to be updated the next time Emacs "
"does a redisplay.  If @var{object} is a window, that window is to be "
"updated.  If @var{object} is a buffer or buffer name, all windows displaying "
"that buffer are to be updated.  If @var{object} is @code{nil} (or omitted), "
"all windows are to be updated."
msgstr ""

#. type: defun
#: original_texis/display.texi:117
msgid ""
"This function does not do a redisplay immediately; Emacs does that as it "
"waits for input, or when the function @code{redisplay} is called."
msgstr ""

#. type: defvar
#: original_texis/display.texi:119
#, no-wrap
msgid "pre-redisplay-function"
msgstr ""

#. type: defvar
#: original_texis/display.texi:124
msgid ""
"A function run just before redisplay.  It is called with one argument, the "
"set of windows to be redisplayed.  The set can be @code{nil}, meaning only "
"the selected window, or @code{t}, meaning all the windows."
msgstr ""

#. type: defvar
#: original_texis/display.texi:126
#, no-wrap
msgid "pre-redisplay-functions"
msgstr ""

#. type: defvar
#: original_texis/display.texi:130
msgid ""
"This hook is run just before redisplay.  It is called once in each window "
"that is about to be redisplayed, with @code{current-buffer} set to the "
"buffer displayed in that window."
msgstr ""

#. type: cindex
#: original_texis/display.texi:134
#, no-wrap
msgid "line wrapping"
msgstr ""

#. type: cindex
#: original_texis/display.texi:135
#, no-wrap
msgid "line truncation"
msgstr ""

#. type: cindex
#: original_texis/display.texi:136
#, no-wrap
msgid "continuation lines"
msgstr ""

#. type: cindex
#: original_texis/display.texi:137
#, no-wrap
msgid "@samp{$} in display"
msgstr ""

#. type: cindex
#: original_texis/display.texi:138
#, no-wrap
msgid "@samp{\\} in display"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:148
msgid ""
"When a line of text extends beyond the right edge of a window, Emacs can "
"@dfn{continue} the line (make it wrap to the next screen line), or "
"@dfn{truncate} the line (limit it to one screen line).  The additional "
"screen lines used to display a long text line are called @dfn{continuation} "
"lines.  Continuation is not the same as filling; continuation happens on the "
"screen only, not in the buffer contents, and it breaks a line precisely at "
"the right margin, not at a word boundary.  @xref{Filling}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:156
msgid ""
"On a graphical display, tiny arrow images in the window fringes indicate "
"truncated and continued lines (@pxref{Fringes}).  On a text terminal, and on "
"a graphical display when @code{fringe-mode} was turned off, a @samp{$} in "
"the rightmost column of the window indicates truncation; a @samp{\\} on the "
"rightmost column indicates a line that wraps.  (The display table can "
"specify alternate characters to use for this; @pxref{Display Tables})."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:159
msgid ""
"Since wrapping and truncation of text contradict each other, Emacs turns off "
"line truncation when wrapping is requested, and vice versa."
msgstr ""

#. type: defopt
#: original_texis/display.texi:160
#, no-wrap
msgid "truncate-lines"
msgstr ""

#. type: defopt
#: original_texis/display.texi:167
msgid ""
"If this buffer-local variable is non-@code{nil}, lines that extend beyond "
"the right edge of the window are truncated; otherwise, they are continued.  "
"As a special exception, the variable @code{truncate-partial-width-windows} "
"takes precedence in @dfn{partial-width} windows (i.e., windows that do not "
"occupy the entire frame width)."
msgstr ""

#. type: defopt
#: original_texis/display.texi:169
#, no-wrap
msgid "truncate-partial-width-windows"
msgstr ""

#. type: cindex
#: original_texis/display.texi:170
#, no-wrap
msgid "partial-width windows"
msgstr ""

#. type: defopt
#: original_texis/display.texi:182
msgid ""
"This variable controls line truncation in @dfn{partial-width} windows.  A "
"partial-width window is one that does not occupy the entire frame width "
"(@pxref{Splitting Windows}).  If the value is @code{nil}, line truncation is "
"determined by the variable @code{truncate-lines} (see above).  If the value "
"is an integer @var{n}, lines are truncated if the partial-width window has "
"fewer than @var{n} columns, regardless of the value of "
"@code{truncate-lines}; if the partial-width window has @var{n} or more "
"columns, line truncation is determined by @code{truncate-lines}.  For any "
"other non-@code{nil} value, lines are truncated in every partial-width "
"window, regardless of the value of @code{truncate-lines}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:186
msgid ""
"When horizontal scrolling (@pxref{Horizontal Scrolling}) is in use in a "
"window, that forces truncation."
msgstr ""

#. type: item
#: original_texis/display.texi:187 original_texis/display.texi:1987
#, no-wrap
msgid "wrap-prefix"
msgstr ""

#. type: defvar
#: original_texis/display.texi:196
msgid ""
"If this buffer-local variable is non-@code{nil}, it defines a @dfn{wrap "
"prefix} which Emacs displays at the start of every continuation line.  (If "
"lines are truncated, @code{wrap-prefix} is never used.)  Its value may be a "
"string or an image (@pxref{Other Display Specs}), or a stretch of whitespace "
"such as specified by the @code{:width} or @code{:align-to} display "
"properties (@pxref{Specified Space}).  The value is interpreted in the same "
"way as a @code{display} text property.  @xref{Display Property}."
msgstr ""

#. type: defvar
#: original_texis/display.texi:200
msgid ""
"A wrap prefix may also be specified for regions of text, using the "
"@code{wrap-prefix} text or overlay property.  This takes precedence over the "
"@code{wrap-prefix} variable.  @xref{Special Properties}."
msgstr ""

#. type: item
#: original_texis/display.texi:202 original_texis/display.texi:1983
#, no-wrap
msgid "line-prefix"
msgstr ""

#. type: defvar
#: original_texis/display.texi:210
msgid ""
"If this buffer-local variable is non-@code{nil}, it defines a @dfn{line "
"prefix} which Emacs displays at the start of every non-continuation line.  "
"Its value may be a string or an image (@pxref{Other Display Specs}), or a "
"stretch of whitespace such as specified by the @code{:width} or "
"@code{:align-to} display properties (@pxref{Specified Space}).  The value is "
"interpreted in the same way as a @code{display} text property.  "
"@xref{Display Property}."
msgstr ""

#. type: defvar
#: original_texis/display.texi:214
msgid ""
"A line prefix may also be specified for regions of text using the "
"@code{line-prefix} text or overlay property.  This takes precedence over the "
"@code{line-prefix} variable.  @xref{Special Properties}."
msgstr ""

#. type: defvar
#: original_texis/display.texi:220
#, no-wrap
msgid "cache-long-scans"
msgstr ""

#. type: defvar
#: original_texis/display.texi:225
#, no-wrap
msgid ""
"If this variable is non-@code{nil} (the default), various indentation\n"
"and motion functions, and Emacs redisplay, cache the results of\n"
"scanning the buffer, and consult the cache to avoid rescanning regions\n"
"of the buffer unless they are modified.\n"
"\n"
msgstr ""

#. type: defvar
#: original_texis/display.texi:227
#, no-wrap
msgid ""
"Turning off the cache speeds up processing of short lines somewhat.\n"
"\n"
msgstr ""

#. type: defvar
#: original_texis/display.texi:229
#, no-wrap
msgid "This variable is automatically buffer-local in every buffer.\n"
msgstr ""

#. type: cindex
#: original_texis/display.texi:234
#, no-wrap
msgid "error display"
msgstr ""

#. type: cindex
#: original_texis/display.texi:235
#, no-wrap
msgid "echo area"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:244
msgid ""
"The @dfn{echo area} is used for displaying error messages (@pxref{Errors}), "
"for messages made with the @code{message} primitive, and for echoing "
"keystrokes.  It is not the same as the minibuffer, despite the fact that the "
"minibuffer appears (when active) in the same place on the screen as the echo "
"area.  @xref{Minibuffer,, The Minibuffer, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:248
msgid ""
"Apart from the functions documented in this section, you can print Lisp "
"objects to the echo area by specifying @code{t} as the output stream.  "
"@xref{Output Streams}."
msgstr ""

#. type: node
#: original_texis/display.texi:254 original_texis/display.texi:256
#, no-wrap
msgid "Displaying Messages"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:254
msgid "Explicitly displaying text in the echo area."
msgstr ""

#. type: node
#: original_texis/display.texi:254 original_texis/display.texi:464
#, no-wrap
msgid "Progress"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:254
msgid "Informing user about progress of a long operation."
msgstr ""

#. type: node
#: original_texis/display.texi:254 original_texis/display.texi:643
#, no-wrap
msgid "Logging Messages"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:254
msgid "Echo area messages are logged for the user."
msgstr ""

#. type: subsection
#: original_texis/display.texi:254 original_texis/display.texi:706
#: original_texis/display.texi:707
#, no-wrap
msgid "Echo Area Customization"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:254
msgid "Controlling the echo area."
msgstr ""

#. type: subsection
#: original_texis/display.texi:257
#, no-wrap
msgid "Displaying Messages in the Echo Area"
msgstr ""

#. type: cindex
#: original_texis/display.texi:258
#, no-wrap
msgid "display message in echo area"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:262
msgid ""
"This section describes the standard functions for displaying messages in the "
"echo area."
msgstr ""

#. type: defun
#: original_texis/display.texi:263
#, no-wrap
msgid "message format-string &rest arguments"
msgstr ""

#. type: defun
#: original_texis/display.texi:272
msgid ""
"This function displays a message in the echo area.  @var{format-string} is a "
"format string, and @var{arguments} are the objects for its format "
"specifications, like in the @code{format-message} function "
"(@pxref{Formatting Strings}).  The resulting formatted string is displayed "
"in the echo area; if it contains @code{face} text properties, it is "
"displayed with the specified faces (@pxref{Faces}).  The string is also "
"added to the @file{*Messages*} buffer, but without text properties "
"(@pxref{Logging Messages})."
msgstr ""

#. type: defun
#: original_texis/display.texi:277
msgid ""
"Typically grave accent and apostrophe in the format translate to matching "
"curved quotes, e.g., @t{\"Missing `%s'\"} might result in @t{\"Missing "
"‘foo’\"}.  @xref{Text Quoting Style}, for how to influence or inhibit this "
"translation."
msgstr ""

#. type: defun
#: original_texis/display.texi:280
msgid ""
"In batch mode, the message is printed to the standard error stream, followed "
"by a newline."
msgstr ""

#. type: defun
#: original_texis/display.texi:283
msgid ""
"When @code{inhibit-message} is non-@code{nil}, no message will be displayed "
"in the echo area, it will only be logged to @samp{*Messages*}."
msgstr ""

#. type: defun
#: original_texis/display.texi:289
msgid ""
"If @var{format-string} is @code{nil} or the empty string, @code{message} "
"clears the echo area; if the echo area has been expanded automatically, this "
"brings it back to its normal size.  If the minibuffer is active, this brings "
"the minibuffer contents back onto the screen immediately."
msgstr ""

#. type: group
#: original_texis/display.texi:295
#, no-wrap
msgid ""
"(message \"Reverting `%s'...\" (buffer-name))\n"
" @print{} Reverting ‘subr.el’...\n"
"@result{} \"Reverting ‘subr.el’...\"\n"
msgstr ""

#. type: group
#: original_texis/display.texi:301
#, no-wrap
msgid ""
"---------- Echo Area ----------\n"
"Reverting ‘subr.el’...\n"
"---------- Echo Area ----------\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:306
msgid ""
"To automatically display a message in the echo area or in a pop-buffer, "
"depending on its size, use @code{display-message-or-buffer} (see below)."
msgstr ""

#. type: defun
#: original_texis/display.texi:312
msgid ""
"@strong{Warning:} If you want to use your own string as a message verbatim, "
"don't just write @code{(message @var{string})}.  If @var{string} contains "
"@samp{%}, @samp{`}, or @samp{'} it may be reformatted, with undesirable "
"results.  Instead, use @code{(message \"%s\" @var{string})}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:316
msgid ""
"The following facilities allow users and Lisp programs to control how "
"echo-area messages are displayed."
msgstr ""

#. type: defvar
#: original_texis/display.texi:317
#, no-wrap
msgid "set-message-function"
msgstr ""

#. type: defvar
#: original_texis/display.texi:327
msgid ""
"If this variable is non-@code{nil}, it should be a function of one argument, "
"the text of a message to display in the echo area.  That function will be "
"called by @code{message} and related functions.  If the function returns "
"@code{nil}, the message is displayed in the echo area as usual.  If the "
"function returns a string, that string is displayed in the echo area "
"@emph{instead} of the original message.  If the function returns any other "
"non-@code{nil} value, that means the message was already handled, so "
"@code{message} will not display anything in the echo area."
msgstr ""

#. type: defvar
#: original_texis/display.texi:330
msgid "The default value calls @code{set-minibuffer-message}, described below."
msgstr ""

#. type: defvar
#: original_texis/display.texi:332
#, no-wrap
msgid "clear-message-function"
msgstr ""

#. type: defvar
#: original_texis/display.texi:337
msgid ""
"If this variable is non-@code{nil}, it should be a function of no arguments; "
"@code{message} and related functions call it when their argument message is "
"@code{nil} or the empty string, to clear the echo area."
msgstr ""

#. type: defvar
#: original_texis/display.texi:345
msgid ""
"Usually this function is called when the next input event arrives after "
"displaying an echo-area message.  The function is expected to clear the "
"message displayed by its counterpart function specified by "
"@code{set-message-function}, but doesn't have to.  If the function wants the "
"echo area to remain uncleared, it should return the symbol "
"@code{dont-clear-message}; any other value will result in the echo area "
"being cleared."
msgstr ""

#. type: defvar
#: original_texis/display.texi:348
msgid ""
"The default value is the function that clears the message displayed in an "
"active minibuffer."
msgstr ""

#. type: defopt
#: original_texis/display.texi:350
#, no-wrap
msgid "set-message-functions"
msgstr ""

#. type: defopt
#: original_texis/display.texi:362
msgid ""
"The value of this user option is a list of functions to be called for "
"handling display of echo-area messages.  Each function is called with one "
"argument, the text of the message to display.  If the function returns a "
"string, that string replaces the original message, and the next function in "
"the list is called with the new message text.  If the function returns "
"@code{nil}, the next function in the list is called with the same text; if "
"the last function in the list returns @code{nil}, the message text is "
"displayed in the echo area.  If the function returns a non-@code{nil} value "
"that is not a string, the message is considered to be handled, and no "
"further functions in the list are called."
msgstr ""

#. type: defopt
#: original_texis/display.texi:365
msgid ""
"The three useful functions to be put in the list that is the value of this "
"option are described below."
msgstr ""

#. type: defun
#: original_texis/display.texi:367
#, no-wrap
msgid "set-minibuffer-message message"
msgstr ""

#. type: defun
#: original_texis/display.texi:374
msgid ""
"This function displays @var{message} in the echo-area when the minibuffer is "
"not active, and at the end of the minibuffer when the minibuffer is active.  "
"However, if the text shown in the active minibuffer has the "
"@code{minibuffer-message} text property (@pxref{Special Properties}) on some "
"character, the message will be displayed before the first character having "
"that property."
msgstr ""

#. type: defun
#: original_texis/display.texi:377
msgid ""
"This function is by default the only member of the list in "
"@code{set-message-functions}."
msgstr ""

#. type: vindex
#: original_texis/display.texi:379
#, no-wrap
msgid "inhibit-message-regexps"
msgstr ""

#. type: defun
#: original_texis/display.texi:380
#, no-wrap
msgid "inhibit-message message"
msgstr ""

#. type: defun
#: original_texis/display.texi:390
msgid ""
"If an echo-area @var{message} matches any regexp in the list that is the "
"value of the user option @code{inhibit-message-regexps}, this function "
"suppresses the display of that message and returns a non-@code{nil} value "
"that is not a string.  Thus, if this function is in the list "
"@code{set-message-functions}, the rest of the functions in the list will not "
"be called when @var{message} matches the regexps in "
"@code{inhibit-message-regexps}.  To ensure a matching @var{message} will "
"never be displayed, make this function be the first element of the list in "
"@code{set-message-functions}."
msgstr ""

#. type: vindex
#: original_texis/display.texi:392
#, no-wrap
msgid "multi-message-max"
msgstr ""

#. type: vindex
#: original_texis/display.texi:393
#, no-wrap
msgid "multi-message-timeout"
msgstr ""

#. type: defun
#: original_texis/display.texi:394
#, no-wrap
msgid "set-multi-message message"
msgstr ""

#. type: defun
#: original_texis/display.texi:401
msgid ""
"This function accumulates several echo-area messages emitted one after "
"another, and returns them as a single string in which individual messages "
"are separated by newlines.  Up to @code{multi-message-max} recent messages "
"can be accumulated.  The accumulated messages are discarded when more than "
"@code{multi-message-timeout} seconds have elapsed since the time the first "
"message was emitted."
msgstr ""

#. type: defvar
#: original_texis/display.texi:403
#, no-wrap
msgid "inhibit-message"
msgstr ""

#. type: defvar
#: original_texis/display.texi:407
msgid ""
"When this variable is non-@code{nil}, @code{message} and related functions "
"will not display any messages in the Echo Area.  Echo-area messages are "
"still logged in the @file{*Messages*} buffer, though."
msgstr ""

#. type: defmac
#: original_texis/display.texi:409
#, no-wrap
msgid "with-temp-message message &rest body"
msgstr ""

#. type: defmac
#: original_texis/display.texi:414
msgid ""
"This construct displays a message in the echo area temporarily, during the "
"execution of @var{body}.  It displays @var{message}, executes @var{body}, "
"then returns the value of the last body form while restoring the previous "
"echo area contents."
msgstr ""

#. type: defun
#: original_texis/display.texi:416
#, no-wrap
msgid "message-or-box format-string &rest arguments"
msgstr ""

#. type: defun
#: original_texis/display.texi:425
msgid ""
"This function displays a message like @code{message}, but may display it in "
"a dialog box instead of the echo area.  If this function is called in a "
"command that was invoked using the mouse---more precisely, if "
"@code{last-nonmenu-event} (@pxref{Command Loop Info}) is either @code{nil} "
"or a list---then it uses a dialog box or pop-up menu to display the "
"message.  Otherwise, it uses the echo area.  (This is the same criterion "
"that @code{y-or-n-p} uses to make a similar decision; see @ref{Yes-or-No "
"Queries}.)"
msgstr ""

#. type: defun
#: original_texis/display.texi:428
msgid ""
"You can force use of the mouse or of the echo area by binding "
"@code{last-nonmenu-event} to a suitable value around the call."
msgstr ""

#. type: defun
#: original_texis/display.texi:430
#, no-wrap
msgid "message-box format-string &rest arguments"
msgstr ""

#. type: anchor{#1}
#: original_texis/display.texi:437
msgid "message-box"
msgstr ""

#. type: defun
#: original_texis/display.texi:437
msgid ""
"This function displays a message like @code{message}, but uses a dialog box "
"(or a pop-up menu) whenever that is possible.  If it is impossible to use a "
"dialog box or pop-up menu, because the terminal does not support them, then "
"@code{message-box} uses the echo area, like @code{message}."
msgstr ""

#. type: defun
#: original_texis/display.texi:439
#, no-wrap
msgid "display-message-or-buffer message &optional buffer-name action frame"
msgstr ""

#. type: defun
#: original_texis/display.texi:445
msgid ""
"This function displays the message @var{message}, which may be either a "
"string or a buffer.  If it is shorter than the maximum height of the echo "
"area, as defined by @code{max-mini-window-height}, it is displayed in the "
"echo area, using @code{message}.  Otherwise, @code{display-buffer} is used "
"to show it in a pop-up buffer."
msgstr ""

#. type: defun
#: original_texis/display.texi:448
msgid ""
"Returns either the string shown in the echo area, or when a pop-up buffer is "
"used, the window used to display it."
msgstr ""

#. type: defun
#: original_texis/display.texi:454
msgid ""
"If @var{message} is a string, then the optional argument @var{buffer-name} "
"is the name of the buffer used to display it when a pop-up buffer is used, "
"defaulting to @file{*Message*}.  In the case where @var{message} is a string "
"and displayed in the echo area, it is not specified whether the contents are "
"inserted into the buffer anyway."
msgstr ""

#. type: defun
#: original_texis/display.texi:457
msgid ""
"The optional arguments @var{action} and @var{frame} are as for "
"@code{display-buffer}, and only used if a buffer is displayed."
msgstr ""

#. type: defun
#: original_texis/display.texi:459
#, no-wrap
msgid "current-message"
msgstr ""

#. type: defun
#: original_texis/display.texi:462
msgid ""
"This function returns the message currently being displayed in the echo "
"area, or @code{nil} if there is none."
msgstr ""

#. type: subsection
#: original_texis/display.texi:465
#, no-wrap
msgid "Reporting Operation Progress"
msgstr ""

#. type: cindex
#: original_texis/display.texi:466
#, no-wrap
msgid "progress reporting"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:472
msgid ""
"When an operation can take a while to finish, you should inform the user "
"about the progress it makes.  This way the user can estimate remaining time "
"and clearly see that Emacs is busy working, not hung.  A convenient way to "
"do this is to use a @dfn{progress reporter}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:474
msgid "Here is a working example that does nothing useful:"
msgstr ""

#. type: smallexample
#: original_texis/display.texi:483
#, no-wrap
msgid ""
"(let ((progress-reporter\n"
"       (make-progress-reporter \"Collecting mana for Emacs...\"\n"
"                               0  500)))\n"
"  (dotimes (k 500)\n"
"    (sit-for 0.01)\n"
"    (progress-reporter-update progress-reporter k))\n"
"  (progress-reporter-done progress-reporter))\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:485
#, no-wrap
msgid ""
"make-progress-reporter message &optional min-value max-value current-value "
"min-change min-time"
msgstr ""

#. type: defun
#: original_texis/display.texi:490
msgid ""
"This function creates and returns a progress reporter object, which you will "
"use as an argument for the other functions listed below.  The idea is to "
"precompute as much data as possible to make progress reporting very fast."
msgstr ""

#. type: defun
#: original_texis/display.texi:496
msgid ""
"When this progress reporter is subsequently used, it will display "
"@var{message} in the echo area, followed by progress percentage.  "
"@var{message} is treated as a simple string.  If you need it to depend on a "
"filename, for instance, use @code{format-message} before calling this "
"function."
msgstr ""

#. type: defun
#: original_texis/display.texi:502
msgid ""
"The arguments @var{min-value} and @var{max-value} should be numbers standing "
"for the starting and final states of the operation.  For instance, an "
"operation that scans a buffer should set these to the results of "
"@code{point-min} and @code{point-max} correspondingly.  @var{max-value} "
"should be greater than @var{min-value}."
msgstr ""

#. type: defun
#: original_texis/display.texi:507
msgid ""
"Alternatively, you can set @var{min-value} and @var{max-value} to "
"@code{nil}.  In that case, the progress reporter does not report process "
"percentages; it instead displays a ``spinner'' that rotates a notch each "
"time you update the progress reporter."
msgstr ""

#. type: defun
#: original_texis/display.texi:511
msgid ""
"If @var{min-value} and @var{max-value} are numbers, you can give the "
"argument @var{current-value} a numerical value specifying the initial "
"progress; if omitted, this defaults to @var{min-value}."
msgstr ""

#. type: defun
#: original_texis/display.texi:519
msgid ""
"The remaining arguments control the rate of echo area updates.  The progress "
"reporter will wait for at least @var{min-change} more percents of the "
"operation to be completed before printing next message; the default is one "
"percent.  @var{min-time} specifies the minimum time in seconds to pass "
"between successive prints; the default is 0.2 seconds.  (On some operating "
"systems, the progress reporter may handle fractions of seconds with varying "
"precision)."
msgstr ""

#. type: defun
#: original_texis/display.texi:522
msgid ""
"This function calls @code{progress-reporter-update}, so the first message is "
"printed immediately."
msgstr ""

#. type: defun
#: original_texis/display.texi:524
#, no-wrap
msgid "progress-reporter-update reporter &optional value suffix"
msgstr ""

#. type: defun
#: original_texis/display.texi:530
msgid ""
"This function does the main work of reporting progress of your operation.  "
"It displays the message of @var{reporter}, followed by progress percentage "
"determined by @var{value}.  If percentage is zero, or close enough according "
"to the @var{min-change} and @var{min-time} arguments, then it is omitted "
"from the output."
msgstr ""

#. type: defun
#: original_texis/display.texi:537
msgid ""
"@var{reporter} must be the result of a call to "
"@code{make-progress-reporter}.  @var{value} specifies the current state of "
"your operation and must be between @var{min-value} and @var{max-value} "
"(inclusive) as passed to @code{make-progress-reporter}.  For instance, if "
"you scan a buffer, then @var{value} should be the result of a call to "
"@code{point}."
msgstr ""

#. type: defun
#: original_texis/display.texi:542
msgid ""
"Optional argument @var{suffix} is a string to be displayed after "
"@var{reporter}'s main message and progress text.  If @var{reporter} is a "
"non-numerical reporter, then @var{value} should be @code{nil}, or a string "
"to use instead of @var{suffix}."
msgstr ""

#. type: defun
#: original_texis/display.texi:548
msgid ""
"This function respects @var{min-change} and @var{min-time} as passed to "
"@code{make-progress-reporter} and so does not output new messages on every "
"invocation.  It is thus very fast and normally you should not try to reduce "
"the number of calls to it: resulting overhead will most likely negate your "
"effort."
msgstr ""

#. type: defun
#: original_texis/display.texi:550
#, no-wrap
msgid "progress-reporter-force-update reporter &optional value new-message suffix"
msgstr ""

#. type: defun
#: original_texis/display.texi:553
msgid ""
"This function is similar to @code{progress-reporter-update} except that it "
"prints a message in the echo area unconditionally."
msgstr ""

#. type: defun
#: original_texis/display.texi:559
msgid ""
"@var{reporter}, @var{value}, and @var{suffix} have the same meaning as for "
"@code{progress-reporter-update}.  Optional @var{new-message} allows you to "
"change the message of the @var{reporter}.  Since this function always "
"updates the echo area, such a change will be immediately presented to the "
"user."
msgstr ""

#. type: defun
#: original_texis/display.texi:561
#, no-wrap
msgid "progress-reporter-done reporter"
msgstr ""

#. type: defun
#: original_texis/display.texi:565
msgid ""
"This function should be called when the operation is finished.  It prints "
"the message of @var{reporter} followed by word @samp{done} in the echo area."
msgstr ""

#. type: defun
#: original_texis/display.texi:570
msgid ""
"You should always call this function and not hope for "
"@code{progress-reporter-update} to print @samp{100%}.  Firstly, it may never "
"print it, there are many good reasons for this not to happen.  Secondly, "
"@samp{done} is more explicit."
msgstr ""

#. type: defmac
#: original_texis/display.texi:572
#, no-wrap
msgid ""
"dotimes-with-progress-reporter (var count [result]) reporter-or-message "
"body@dots{}"
msgstr ""

#. type: defmac
#: original_texis/display.texi:578
msgid ""
"This is a convenience macro that works the same way as @code{dotimes} does, "
"but also reports loop progress using the functions described above.  It "
"allows you to save some typing.  The argument @var{reporter-or-message} can "
"be either a string or a progress reporter object."
msgstr ""

#. type: defmac
#: original_texis/display.texi:581
msgid ""
"You can rewrite the example in the beginning of this subsection using this "
"macro as follows:"
msgstr ""

#. type: group
#: original_texis/display.texi:588
#, no-wrap
msgid ""
"(dotimes-with-progress-reporter\n"
"    (k 500)\n"
"    \"Collecting some mana for Emacs...\"\n"
"  (sit-for 0.01))\n"
msgstr ""

#. type: defmac
#: original_texis/display.texi:595
msgid ""
"Using a reporter object as the @var{reporter-or-message} argument is useful "
"if you want to specify the optional arguments in "
"@var{make-progress-reporter}.  For instance, you can write the previous "
"example as follows:"
msgstr ""

#. type: group
#: original_texis/display.texi:602
#, no-wrap
msgid ""
"(dotimes-with-progress-reporter\n"
"    (k 500)\n"
"    (make-progress-reporter \"Collecting some mana for Emacs...\" 0 500 0 1 "
"1.5)\n"
"  (sit-for 0.01))\n"
msgstr ""

#. type: defmac
#: original_texis/display.texi:606
#, no-wrap
msgid ""
"dolist-with-progress-reporter (var list [result]) reporter-or-message "
"body@dots{}"
msgstr ""

#. type: defmac
#: original_texis/display.texi:612
msgid ""
"This is another convenience macro that works the same way as @code{dolist} "
"does, but also reports loop progress using the functions described above.  "
"As in @code{dotimes-with-progress-reporter}, @code{reporter-or-message} can "
"be a progress reporter or a string.  You can rewrite the previous example "
"with this macro as follows:"
msgstr ""

#. type: group
#: original_texis/display.texi:619
#, no-wrap
msgid ""
"(dolist-with-progress-reporter\n"
"    (k (number-sequence 0 500))\n"
"    \"Collecting some mana for Emacs...\"\n"
"  (sit-for 0.01))\n"
msgstr ""

#. type: defmac
#: original_texis/display.texi:623
#, no-wrap
msgid "with-delayed-message (timeout message) body@dots{}"
msgstr ""

#. type: defmac
#: original_texis/display.texi:627
msgid ""
"Sometimes it's unclear whether an operation will take a long time to execute "
"or not, or it can be inconvenient to implement a progress reporter.  This "
"macro can be used in those situations."
msgstr ""

#. type: lisp
#: original_texis/display.texi:631
#, no-wrap
msgid ""
"(with-delayed-message (2 (format \"Gathering data for %s\" entry))\n"
"  (setq data (gather-data entry)))\n"
msgstr ""

#. type: defmac
#: original_texis/display.texi:638
msgid ""
"In this example, if the body takes more than two seconds to execute, the "
"message will be displayed.  If it takes a shorter time than that, the "
"message won't be displayed.  In either case, the body is evaluated as "
"normally, and the return value of the final element in the body is the "
"return value of the macro."
msgstr ""

#. type: defmac
#: original_texis/display.texi:641
msgid ""
"The @var{message} element is evaluated before @var{body}, and is always "
"evaluated, whether the message is displayed or not."
msgstr ""

#. type: subsection
#: original_texis/display.texi:644
#, no-wrap
msgid "Logging Messages in @file{*Messages*}"
msgstr ""

#. type: cindex
#: original_texis/display.texi:645
#, no-wrap
msgid "logging echo-area messages"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:656
msgid ""
"Almost all the messages displayed in the echo area are also recorded in the "
"@file{*Messages*} buffer so that the user can refer back to them.  This "
"includes all the messages that are output with @code{message}.  By default, "
"this buffer is read-only and uses the major mode "
"@code{messages-buffer-mode}.  Nothing prevents the user from killing the "
"@file{*Messages*} buffer, but the next display of a message recreates it.  "
"Any Lisp code that needs to access the @file{*Messages*} buffer directly and "
"wants to ensure that it exists should use the function "
"@code{messages-buffer}."
msgstr ""

#. type: defun
#: original_texis/display.texi:657
#, no-wrap
msgid "messages-buffer"
msgstr ""

#. type: defun
#: original_texis/display.texi:660
msgid ""
"This function returns the @file{*Messages*} buffer.  If it does not exist, "
"it creates it, and switches it to @code{messages-buffer-mode}."
msgstr ""

#. type: defopt
#: original_texis/display.texi:662
#, no-wrap
msgid "message-log-max"
msgstr ""

#. type: defopt
#: original_texis/display.texi:667
msgid ""
"This variable specifies how many lines to keep in the @file{*Messages*} "
"buffer.  The value @code{t} means there is no limit on how many lines to "
"keep.  The value @code{nil} disables message logging entirely.  Here's how "
"to display a message and prevent it from being logged:"
msgstr ""

#. type: example
#: original_texis/display.texi:671
#, no-wrap
msgid ""
"(let (message-log-max)\n"
"  (message @dots{}))\n"
msgstr ""

#. type: defvar
#: original_texis/display.texi:674
#, no-wrap
msgid "messages-buffer-name"
msgstr ""

#. type: defvar
#: original_texis/display.texi:682
msgid ""
"This variable has the name of the buffer where messages should be logged to, "
"and defaults to @file{*Messages*}.  Some packages may find it useful to "
"temporarily redirect the output to a different buffer (perhaps to write the "
"buffer out to a log file later), and they can bind this variable to a "
"different buffer name.  (Note that this buffer (if it doesn't exist "
"already), will be created and put into @code{messages-buffer-mode}.)"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:688
msgid ""
"To make @file{*Messages*} more convenient for the user, the logging facility "
"combines successive identical messages.  It also combines successive related "
"messages for the sake of two cases: question followed by answer, and a "
"series of progress messages."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:694
msgid ""
"A question followed by an answer has two messages like the ones produced by "
"@code{y-or-n-p}: the first is @samp{@var{question}}, and the second is "
"@samp{@var{question}...@var{answer}}.  The first message conveys no "
"additional information beyond what's in the second, so logging the second "
"message discards the first from the log."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:700
msgid ""
"A series of progress messages has successive messages like those produced by "
"@code{make-progress-reporter}.  They have the form "
"@samp{@var{base}...@var{how-far}}, where @var{base} is the same each time, "
"while @var{how-far} varies.  Logging each message in the series discards the "
"previous one, provided they are consecutive."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:705
msgid ""
"The functions @code{make-progress-reporter} and @code{y-or-n-p} don't have "
"to do anything special to activate the message log combination feature.  It "
"operates whenever two consecutive messages are logged that share a common "
"prefix ending in @samp{...}."
msgstr ""

#. type: cindex
#: original_texis/display.texi:708
#, no-wrap
msgid "echo area customization"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:711
msgid "These variables control details of how the echo area works."
msgstr ""

#. type: defvar
#: original_texis/display.texi:712
#, no-wrap
msgid "cursor-in-echo-area"
msgstr ""

#. type: defvar
#: original_texis/display.texi:717
msgid ""
"This variable controls where the cursor appears when a message is displayed "
"in the echo area.  If it is non-@code{nil}, then the cursor appears at the "
"end of the message.  Otherwise, the cursor appears at point---not in the "
"echo area at all."
msgstr ""

#. type: defvar
#: original_texis/display.texi:720
msgid ""
"The value is normally @code{nil}; Lisp programs bind it to @code{t} for "
"brief periods of time."
msgstr ""

#. type: defvar
#: original_texis/display.texi:722
#, no-wrap
msgid "echo-area-clear-hook"
msgstr ""

#. type: defvar
#: original_texis/display.texi:725
msgid ""
"This normal hook is run whenever the echo area is cleared---either by "
"@code{(message nil)} or for any other reason."
msgstr ""

#. type: defopt
#: original_texis/display.texi:727
#, no-wrap
msgid "echo-keystrokes"
msgstr ""

#. type: defopt
#: original_texis/display.texi:735
msgid ""
"This variable determines how much time should elapse before command "
"characters echo.  Its value must be a number, and specifies the number of "
"seconds to wait before echoing.  If the user types a prefix key (such as "
"@kbd{C-x}) and then delays this many seconds before continuing, the prefix "
"key is echoed in the echo area.  (Once echoing begins in a key sequence, all "
"subsequent characters in the same key sequence are echoed immediately.)"
msgstr ""

#. type: defopt
#: original_texis/display.texi:737
msgid "If the value is zero, then command input is not echoed."
msgstr ""

#. type: defvar
#: original_texis/display.texi:739
#, no-wrap
msgid "message-truncate-lines"
msgstr ""

#. type: defvar
#: original_texis/display.texi:744
msgid ""
"Normally, displaying a long message resizes the echo area to display the "
"entire message, wrapping long line as needed.  But if the variable "
"@code{message-truncate-lines} is non-@code{nil}, long lines of echo-area "
"message are instead truncated to fit the mini-window width."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:750
msgid ""
"The variable @code{max-mini-window-height}, which specifies the maximum "
"height for resizing minibuffer windows, also applies to the echo area (which "
"is really a special use of the minibuffer window; @pxref{Minibuffer "
"Windows})."
msgstr ""

#. type: section
#: original_texis/display.texi:752
#, no-wrap
msgid "Reporting Warnings"
msgstr ""

#. type: cindex
#: original_texis/display.texi:753
#, no-wrap
msgid "warnings"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:758
msgid ""
"@dfn{Warnings} are a facility for a program to inform the user of a possible "
"problem, but continue running (as opposed to signaling an error, "
"@pxref{Errors})."
msgstr ""

#. type: subsection
#: original_texis/display.texi:764 original_texis/display.texi:766
#: original_texis/display.texi:767
#, no-wrap
msgid "Warning Basics"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:764
msgid "Warnings concepts and functions to report them."
msgstr ""

#. type: subsection
#: original_texis/display.texi:764 original_texis/display.texi:840
#: original_texis/display.texi:841
#, no-wrap
msgid "Warning Variables"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:764
msgid "Variables programs bind to customize their warnings."
msgstr ""

#. type: subsection
#: original_texis/display.texi:764 original_texis/display.texi:925
#: original_texis/display.texi:926
#, no-wrap
msgid "Warning Options"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:764
msgid "Variables users set to control display of warnings."
msgstr ""

#. type: subsection
#: original_texis/display.texi:764 original_texis/display.texi:989
#: original_texis/display.texi:990
#, no-wrap
msgid "Delayed Warnings"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:764
msgid "Deferring a warning until the end of a command."
msgstr ""

#. type: cindex
#: original_texis/display.texi:768
#, no-wrap
msgid "severity level"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:774
msgid ""
"Every warning is a textual message, which explains the problem for the user, "
"with the associated @dfn{severity level} which is a symbol.  Here are the "
"supported severity levels, in order of decreasing severity, and their "
"meanings:"
msgstr ""

#. type: item
#: original_texis/display.texi:776
#, no-wrap
msgid ":emergency"
msgstr ""

#. type: table
#: original_texis/display.texi:779
msgid ""
"A problem that will seriously impair Emacs operation soon if the user does "
"not attend to it promptly."
msgstr ""

#. type: item
#: original_texis/display.texi:779
#, no-wrap
msgid ":error"
msgstr ""

#. type: table
#: original_texis/display.texi:781
msgid "A report about data or circumstances that are inherently wrong."
msgstr ""

#. type: item
#: original_texis/display.texi:781
#, no-wrap
msgid ":warning"
msgstr ""

#. type: table
#: original_texis/display.texi:784
msgid ""
"A report about data or circumstances that are not inherently wrong, but "
"raise suspicion of a possible problem."
msgstr ""

#. type: item
#: original_texis/display.texi:784
#, no-wrap
msgid ":debug"
msgstr ""

#. type: table
#: original_texis/display.texi:787
msgid ""
"A report of information that may be useful if the user is currently "
"debugging the Lisp program which issues the warning."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:802
msgid ""
"When your program encounters invalid input data, it can either signal a Lisp "
"error by calling @code{error} or @code{signal} (@pxref{Signaling Errors}) or "
"report a warning with severity @code{:error}.  Signaling a Lisp error is the "
"easiest thing to do, but it means the signaling program cannot continue "
"execution.  If you want to take the trouble of implementing a way to "
"continue processing despite the invalid data, then reporting a warning of "
"severity @code{:error} is the right way of informing the user of the "
"problem.  For instance, the Emacs Lisp byte compiler can report an error "
"that way and continue compiling other functions.  (If the program signals a "
"Lisp error and then handles it with @code{condition-case}, the user won't "
"see the error message; reporting that as a warning instead avoids that "
"problem.)"
msgstr ""

#. type: cindex
#: original_texis/display.texi:803
#, no-wrap
msgid "warning type"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:814
msgid ""
"In addition to severity level, each warning has a @dfn{warning type} to "
"classify it.  The warning type is either a symbol or a list of symbols.  If "
"it is a symbol, it should be the custom group that you use for the program's "
"user options; if it is a list, the first element of the list should be that "
"custom group.  For example, byte compiler warnings use the warning type "
"@code{(bytecomp)}.  If the warning type is a list, the elements of the list "
"after the first one, which should be arbitrary symbols, represent "
"subcategories of the warning: they will be displayed to the user to better "
"explain the nature of the warning."
msgstr ""

#. type: defun
#: original_texis/display.texi:815
#, no-wrap
msgid "display-warning type message &optional level buffer-name"
msgstr ""

#. type: defun
#: original_texis/display.texi:820
msgid ""
"This function reports a warning, using the string @var{message} as the "
"warning text and @var{type} as the warning type.  @var{level} should be the "
"severity level, and defaults to @code{:warning} if omitted or @code{nil}."
msgstr ""

#. type: defun
#: original_texis/display.texi:823
msgid ""
"@var{buffer-name}, if non-@code{nil}, specifies the name of the buffer for "
"logging the warning message.  By default, it is @file{*Warnings*}."
msgstr ""

#. type: defun
#: original_texis/display.texi:825
#, no-wrap
msgid "lwarn type level message &rest args"
msgstr ""

#. type: defun
#: original_texis/display.texi:830
msgid ""
"This function reports a warning using the value returned by "
"@w{@code{(format-message @var{message} @var{args}@dots{})}} as the message "
"text in the @file{*Warnings*} buffer.  In other respects it is equivalent to "
"@code{display-warning}."
msgstr ""

#. type: defun
#: original_texis/display.texi:832
#, no-wrap
msgid "warn message &rest args"
msgstr ""

#. type: defun
#: original_texis/display.texi:838
msgid ""
"This function reports a warning using the value returned by "
"@w{@code{(format-message @var{message} @var{args}@dots{})}} as the message "
"text, @code{emacs} as the warning type, and @code{:warning} as the severity "
"level.  It exists for compatibility only; we recommend not using it, because "
"you should specify a specific warning type."
msgstr ""

#. type: cindex
#: original_texis/display.texi:842
#, no-wrap
msgid "warning variables"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:846
msgid ""
"Programs can customize how their warnings appear by binding the variables "
"described in this section."
msgstr ""

#. type: defvar
#: original_texis/display.texi:847
#, no-wrap
msgid "warning-levels"
msgstr ""

#. type: defvar
#: original_texis/display.texi:851
msgid ""
"This list defines the meaning and severity order of the warning severity "
"levels.  Each element defines one severity level, and they are arranged in "
"order of decreasing severity."
msgstr ""

#. type: defvar
#: original_texis/display.texi:858
msgid ""
"Each element has the form @w{@code{(@var{level} @var{string} "
"[@var{function}])}}, where @var{level} is the severity level it defines.  "
"@var{string} specifies the textual description of this level.  @var{string} "
"should use @samp{%s} to specify where to put the warning type information, "
"or it can omit the @samp{%s} so as not to include that information."
msgstr ""

#. type: defvar
#: original_texis/display.texi:862
msgid ""
"The optional @var{function}, if non-@code{nil}, is a function to call with "
"no arguments, to get the user's attention.  A notable example is @code{ding} "
"(@pxref{Beeping})."
msgstr ""

#. type: defvar
#: original_texis/display.texi:864
msgid "Normally you should not change the value of this variable."
msgstr ""

#. type: defvar
#: original_texis/display.texi:866
#, no-wrap
msgid "warning-prefix-function"
msgstr ""

#. type: defvar
#: original_texis/display.texi:872
msgid ""
"If non-@code{nil}, the value is a function to generate prefix text for "
"warnings.  Programs can bind the variable to a suitable function.  "
"@code{display-warning} calls this function with the warnings buffer the "
"current buffer, and the function can insert text into it.  That text becomes "
"the beginning of the warning message."
msgstr ""

#. type: defvar
#: original_texis/display.texi:879
msgid ""
"The function is called with two arguments, the severity level and its entry "
"in @code{warning-levels}.  It should return a list to use @emph{instead} of "
"that entry (the value need not be an actual member of @code{warning-levels}, "
"but it must have the same structure).  By constructing this value, the "
"function can change the severity of the warning, or specify different "
"handling for a given severity level."
msgstr ""

#. type: defvar
#: original_texis/display.texi:883
msgid ""
"If the variable's value is @code{nil}, there's no prefix text, before the "
"warning is displayed, starting with the @var{string} part of the entry in "
"@code{warning-levels} corresponding to the warning's level."
msgstr ""

#. type: defvar
#: original_texis/display.texi:885
#, no-wrap
msgid "warning-series"
msgstr ""

#. type: defvar
#: original_texis/display.texi:892
msgid ""
"Programs can bind this variable to @code{t} to say that the next warning "
"should begin a series.  When several warnings form a series, that means to "
"leave point on the first warning of the series, rather than keep moving it "
"for each warning so that it appears on the last one.  The series ends when "
"the local binding of this variable is unbound and @code{warning-series} "
"becomes @code{nil} again."
msgstr ""

#. type: defvar
#: original_texis/display.texi:898
msgid ""
"The value can also be a symbol with a function definition.  That is "
"equivalent to @code{t}, except that the next warning will also call the "
"function with no arguments with the warnings buffer the current buffer.  The "
"function can, for example, insert text which will serve as a header for the "
"series of warnings."
msgstr ""

#. type: defvar
#: original_texis/display.texi:902
msgid ""
"Once a series has begun, the value of this variable is a marker which points "
"to the buffer position in the warnings buffer of the start of the series."
msgstr ""

#. type: defvar
#: original_texis/display.texi:905
msgid ""
"The variable's normal value is @code{nil}, which means to handle each "
"warning separately."
msgstr ""

#. type: defvar
#: original_texis/display.texi:907
#, no-wrap
msgid "warning-fill-prefix"
msgstr ""

#. type: defvar
#: original_texis/display.texi:910
msgid ""
"When this variable is non-@code{nil}, it specifies a fill prefix to use for "
"filling the text of each warning."
msgstr ""

#. type: defvar
#: original_texis/display.texi:912
#, no-wrap
msgid "warning-fill-column"
msgstr ""

#. type: defvar
#: original_texis/display.texi:914
msgid "The column at which to fill warnings."
msgstr ""

#. type: defvar
#: original_texis/display.texi:916
#, no-wrap
msgid "warning-type-format"
msgstr ""

#. type: defvar
#: original_texis/display.texi:923
msgid ""
"This variable specifies the format for displaying the warning type in the "
"warning text.  The result of formatting the type this way gets included in "
"the message under the control of the string in the entry in "
"@code{warning-levels}.  The default value is @code{\" (%s)\"}.  If you bind "
"it to the empty string @code{\"\"} then the warning type won't appear at "
"all."
msgstr ""

#. type: cindex
#: original_texis/display.texi:927
#, no-wrap
msgid "warning options"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:931
msgid ""
"These variables are used by users to control what happens when a Lisp "
"program reports a warning."
msgstr ""

#. type: defopt
#: original_texis/display.texi:932
#, no-wrap
msgid "warning-minimum-level"
msgstr ""

#. type: defopt
#: original_texis/display.texi:939
msgid ""
"This user option specifies the minimum severity level that should be shown "
"immediately to the user, by popping the warnings buffer in some window.  The "
"default is @code{:warning}, which means to show the warning buffer for any "
"warning severity except @code{:debug}.  The warnings of lower severity "
"levels will still be written into the warnings buffer, but the buffer will "
"not be forced onto display."
msgstr ""

#. type: defopt
#: original_texis/display.texi:941
#, no-wrap
msgid "warning-minimum-log-level"
msgstr ""

#. type: defopt
#: original_texis/display.texi:947
msgid ""
"This user option specifies the minimum severity level that should be logged "
"in the warnings buffer.  Warnings of lower severity will be completely "
"ignored: not written to the warnings buffer and not displayed.  The default "
"is @code{:warning}, which means to log warnings of any severity except "
"@code{:debug}."
msgstr ""

#. type: defopt
#: original_texis/display.texi:949
#, no-wrap
msgid "warning-suppress-types"
msgstr ""

#. type: defopt
#: original_texis/display.texi:956
msgid ""
"This list specifies which warning types should not be displayed immediately "
"when they occur.  Each element of the list should be a list of symbols.  If "
"an element of this list has the same elements as the first elements in a "
"warning type, then the warning of that type will not be shown on display by "
"popping the warnings buffer in some window (the warning will still be logged "
"in the warnings buffer)."
msgstr ""

#. type: defopt
#: original_texis/display.texi:958
msgid "For example, if the value of this variable is a list like this:"
msgstr ""

#. type: lisp
#: original_texis/display.texi:961
#, no-wrap
msgid "((foo) (bar subtype))\n"
msgstr ""

#. type: defopt
#: original_texis/display.texi:967
msgid ""
"then warnings whose types are @code{foo} or @code{(foo)} or @w{@code{(foo "
"something)}} or @w{@code{(bar subtype other)}} will not be shown to the "
"user."
msgstr ""

#. type: defopt
#: original_texis/display.texi:969
#, no-wrap
msgid "warning-suppress-log-types"
msgstr ""

#. type: defopt
#: original_texis/display.texi:974
msgid ""
"This list specifies which warning types should be ignored: not logged in the "
"warnings buffer and not shown to the user.  The structure and the matching "
"of warning types are the same as for @code{warning-suppress-types} above."
msgstr ""

#. type: cindex
#: original_texis/display.texi:976
#, no-wrap
msgid "warnings, suppressing during startup"
msgstr ""

#. type: cindex
#: original_texis/display.texi:977
#, no-wrap
msgid "prevent warnings in init files"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:988
msgid ""
"During startup, Emacs delays showing any warnings until after it loads and "
"processes the site-wide and user's init files (@pxref{Startup Summary}).  "
"Let-binding (@pxref{Local Variables}) the values of these options around "
"some code in your init files which might emit a warning will therefore not "
"work, because it will not be in effect by the time the warning is actually "
"processed.  Thus, if you want to suppress some warnings during startup, "
"change the values of the above options in your init file early enough, or "
"put those let-binding forms in your @code{after-init-hook} or "
"@code{emacs-startup-hook} functions.  @xref{Init File}."
msgstr ""

#. type: cindex
#: original_texis/display.texi:991
#, no-wrap
msgid "delayed warnings"
msgstr ""

#. type: cindex
#: original_texis/display.texi:992
#, no-wrap
msgid "warnings, delayed"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:999
msgid ""
"Sometimes, you may wish to avoid showing a warning while a command is "
"running, and only show it only after the end of the command.  You can use "
"the function @code{delay-warning} for this.  Emacs automatically delays any "
"warnings emitted during the early stages of startup, and shows them only "
"after the init files are processed."
msgstr ""

#. type: defun
#: original_texis/display.texi:1000
#, no-wrap
msgid "delay-warning type message &optional level buffer-name"
msgstr ""

#. type: defun
#: original_texis/display.texi:1004
msgid ""
"This function is the delayed counterpart to @code{display-warning} "
"(@pxref{Warning Basics}), and it is called with the same arguments.  The "
"warning message is queued into @code{delayed-warnings-list}."
msgstr ""

#. type: defvar
#: original_texis/display.texi:1006
#, no-wrap
msgid "delayed-warnings-list"
msgstr ""

#. type: defvar
#: original_texis/display.texi:1009
msgid ""
"The value of this variable is a list of warnings to be displayed after the "
"current command has finished.  Each element must be a list"
msgstr ""

#. type: smallexample
#: original_texis/display.texi:1012
#, no-wrap
msgid "(@var{type} @var{message} [@var{level} [@var{buffer-name}]])\n"
msgstr ""

#. type: defvar
#: original_texis/display.texi:1020
msgid ""
"with the same form, and the same meanings, as the argument list of "
"@code{display-warning}.  Immediately after running @code{post-command-hook} "
"(@pxref{Command Overview}), the Emacs command loop displays all the warnings "
"specified by this variable, then resets the variable to @code{nil}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1024
msgid ""
"Programs which need to further customize the delayed warnings mechanism can "
"change the variable @code{delayed-warnings-hook}:"
msgstr ""

#. type: defvar
#: original_texis/display.texi:1025
#, no-wrap
msgid "delayed-warnings-hook"
msgstr ""

#. type: defvar
#: original_texis/display.texi:1031
msgid ""
"This is a normal hook which is run by the Emacs command loop, after "
"@code{post-command-hook}, in order to process and display delayed warnings.  "
"Emacs also runs this hook during startup, after loading the site-start and "
"user init files (@pxref{Startup Summary}), because warnings emitted before "
"that are automatically delayed."
msgstr ""

#. type: defvar
#: original_texis/display.texi:1033
msgid "Its default value is a list of two functions:"
msgstr ""

#. type: smallexample
#: original_texis/display.texi:1036
#, no-wrap
msgid "(collapse-delayed-warnings display-delayed-warnings)\n"
msgstr ""

#. type: findex
#: original_texis/display.texi:1038
#, no-wrap
msgid "collapse-delayed-warnings"
msgstr ""

#. type: findex
#: original_texis/display.texi:1039
#, no-wrap
msgid "display-delayed-warnings"
msgstr ""

#. type: defvar
#: original_texis/display.texi:1046
msgid ""
"The function @code{collapse-delayed-warnings} removes repeated entries from "
"@code{delayed-warnings-list}.  The function @code{display-delayed-warnings} "
"calls @code{display-warning} on each of the entries in "
"@code{delayed-warnings-list}, in turn, and then sets "
"@code{delayed-warnings-list} to @code{nil}."
msgstr ""

#. type: cindex
#: original_texis/display.texi:1051
#, no-wrap
msgid "invisible text"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1059
msgid ""
"You can make characters @dfn{invisible}, so that they do not appear on the "
"screen, with the @code{invisible} property.  This can be either a text "
"property (@pxref{Text Properties}) or an overlay property "
"(@pxref{Overlays}).  Cursor motion also partly ignores these characters; if "
"the command loop finds that point is inside a range of invisible text after "
"a command, it relocates point to the other side of the text."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1066
msgid ""
"In the simplest case, any non-@code{nil} @code{invisible} property makes a "
"character invisible.  This is the default case---if you don't alter the "
"default value of @code{buffer-invisibility-spec}, this is how the "
"@code{invisible} property works.  You should normally use @code{t} as the "
"value of the @code{invisible} property if you don't plan to set "
"@code{buffer-invisibility-spec} yourself."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1073
msgid ""
"More generally, you can use the variable @code{buffer-invisibility-spec} to "
"control which values of the @code{invisible} property make text invisible.  "
"This permits you to classify the text into different subsets in advance, by "
"giving them different @code{invisible} values, and subsequently make various "
"subsets visible or invisible by changing the value of "
"@code{buffer-invisibility-spec}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1080
msgid ""
"Controlling visibility with @code{buffer-invisibility-spec} is especially "
"useful in a program to display the list of entries in a database.  It "
"permits the implementation of convenient filtering commands to view just a "
"part of the entries in the database.  Setting this variable is very fast, "
"much faster than scanning all the text in the buffer looking for properties "
"to change."
msgstr ""

#. type: defvar
#: original_texis/display.texi:1081
#, no-wrap
msgid "buffer-invisibility-spec"
msgstr ""

#. type: defvar
#: original_texis/display.texi:1085
msgid ""
"This variable specifies which kinds of @code{invisible} properties actually "
"make a character invisible.  Setting this variable makes it buffer-local."
msgstr ""

#. type: code{#1}
#: original_texis/display.texi:1087 original_texis/display.texi:2439
#: original_texis/display.texi:2679 original_texis/display.texi:2720
#: original_texis/display.texi:2934
#, no-wrap
msgid "t"
msgstr ""

#. type: table
#: original_texis/display.texi:1090
msgid ""
"A character is invisible if its @code{invisible} property is "
"non-@code{nil}.  This is the default."
msgstr ""

#. type: item
#: original_texis/display.texi:1091 original_texis/display.texi:2939
#, no-wrap
msgid "a list"
msgstr ""

#. type: table
#: original_texis/display.texi:1095
msgid ""
"Each element of the list specifies a criterion for invisibility; if a "
"character's @code{invisible} property fits any one of these criteria, the "
"character is invisible.  The list can have two kinds of elements:"
msgstr ""

#. type: var{#1}
#: original_texis/display.texi:1097
#, no-wrap
msgid "atom"
msgstr ""

#. type: table
#: original_texis/display.texi:1101
msgid ""
"A character is invisible if its @code{invisible} property value is "
"@var{atom} or if it is a list with @var{atom} as a member; comparison is "
"done with @code{eq}."
msgstr ""

#. type: item
#: original_texis/display.texi:1102
#, no-wrap
msgid "(@var{atom} . t)"
msgstr ""

#. type: table
#: original_texis/display.texi:1107
msgid ""
"A character is invisible if its @code{invisible} property value is "
"@var{atom} or if it is a list with @var{atom} as a member; comparison is "
"done with @code{eq}.  Moreover, a sequence of such characters displays as an "
"ellipsis."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1113
msgid ""
"Two functions are specifically provided for adding elements to "
"@code{buffer-invisibility-spec} and removing elements from it."
msgstr ""

#. type: defun
#: original_texis/display.texi:1114
#, no-wrap
msgid "add-to-invisibility-spec element"
msgstr ""

#. type: defun
#: original_texis/display.texi:1119
msgid ""
"This function adds the element @var{element} to "
"@code{buffer-invisibility-spec}.  If @code{buffer-invisibility-spec} was "
"@code{t}, it changes to a list, @code{(t)}, so that text whose "
"@code{invisible} property is @code{t} remains invisible."
msgstr ""

#. type: defun
#: original_texis/display.texi:1121
#, no-wrap
msgid "remove-from-invisibility-spec element"
msgstr ""

#. type: defun
#: original_texis/display.texi:1125
msgid ""
"This removes the element @var{element} from "
"@code{buffer-invisibility-spec}.  This does nothing if @var{element} is not "
"in the list."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1131
msgid ""
"A convention for use of @code{buffer-invisibility-spec} is that a major mode "
"should use the mode's own name as an element of "
"@code{buffer-invisibility-spec} and as the value of the @code{invisible} "
"property:"
msgstr ""

#. type: example
#: original_texis/display.texi:1137
#, no-wrap
msgid ""
";; @r{If you want to display an ellipsis:}\n"
"(add-to-invisibility-spec '(my-symbol . t))\n"
";; @r{If you don't want ellipsis:}\n"
"(add-to-invisibility-spec 'my-symbol)\n"
"\n"
msgstr ""

#. type: example
#: original_texis/display.texi:1140
#, no-wrap
msgid ""
"(overlay-put (make-overlay beginning end)\n"
"             'invisible 'my-symbol)\n"
"\n"
msgstr ""

#. type: example
#: original_texis/display.texi:1145
#, no-wrap
msgid ""
";; @r{When done with the invisibility:}\n"
"(remove-from-invisibility-spec '(my-symbol . t))\n"
";; @r{Or respectively:}\n"
"(remove-from-invisibility-spec 'my-symbol)\n"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1148
msgid "You can check for invisibility using the following function:"
msgstr ""

#. type: defun
#: original_texis/display.texi:1149
#, no-wrap
msgid "invisible-p pos-or-prop"
msgstr ""

#. type: defun
#: original_texis/display.texi:1153
msgid ""
"If @var{pos-or-prop} is a marker or number, this function returns a "
"non-@code{nil} value if the text at that position is currently invisible."
msgstr ""

#. type: defun
#: original_texis/display.texi:1159
msgid ""
"If @var{pos-or-prop} is any other kind of Lisp object, that is taken to mean "
"a possible value of the @code{invisible} text or overlay property.  In that "
"case, this function returns a non-@code{nil} value if that value would cause "
"text to become invisible, based on the current value of "
"@code{buffer-invisibility-spec}."
msgstr ""

#. type: defun
#: original_texis/display.texi:1163
msgid ""
"The return value of this function is @code{t} if the text would be "
"completely hidden on display, or a non-@code{nil}, non-@code{t} value if the "
"text would be replaced by an ellipsis."
msgstr ""

#. type: vindex
#: original_texis/display.texi:1165
#, no-wrap
msgid "line-move-ignore-invisible"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1173
msgid ""
"Ordinarily, functions that operate on text or move point do not care whether "
"the text is invisible, they process invisible characters and visible "
"characters alike.  The user-level line motion commands, such as "
"@code{next-line}, @code{previous-line}, ignore invisible newlines if "
"@code{line-move-ignore-invisible} is non-@code{nil} (the default), i.e., "
"behave like these invisible newlines didn't exist in the buffer, but only "
"because they are explicitly programmed to do so."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1184
msgid ""
"If a command ends with point inside or at the boundary of invisible text, "
"the main editing loop relocates point to one of the two ends of the "
"invisible text.  Emacs chooses the direction of relocation so that it is the "
"same as the overall movement direction of the command; if in doubt, it "
"prefers a position where an inserted char would not inherit the "
"@code{invisible} property.  Additionally, if the text is not replaced by an "
"ellipsis and the command only moved within the invisible text, then point is "
"moved one extra character so as to try and reflect the command's movement by "
"a visible movement of the cursor."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1190
msgid ""
"Thus, if the command moved point back to an invisible range (with the usual "
"stickiness), Emacs moves point back to the beginning of that range.  If the "
"command moved point forward into an invisible range, Emacs moves point "
"forward to the first visible character that follows the invisible text and "
"then forward one more character."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1194
msgid ""
"These @dfn{adjustments} of point that ended up in the middle of invisible "
"text can be disabled by setting @code{disable-point-adjustment} to a "
"non-@code{nil} value.  @xref{Adjusting Point}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1202
msgid ""
"Incremental search can make invisible overlays visible temporarily and/or "
"permanently when a match includes invisible text.  To enable this, the "
"overlay should have a non-@code{nil} @code{isearch-open-invisible} "
"property.  The property value should be a function to be called with the "
"overlay as an argument.  This function should make the overlay visible "
"permanently; it is used when the match overlaps the overlay on exit from the "
"search."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1210
msgid ""
"During the search, such overlays are made temporarily visible by temporarily "
"modifying their invisible and intangible properties.  If you want this to be "
"done differently for a certain overlay, give it an "
"@code{isearch-open-invisible-temporary} property which is a function.  The "
"function is called with two arguments: the first is the overlay, and the "
"second is @code{nil} to make the overlay visible, or @code{t} to make it "
"invisible again."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1217
msgid ""
"@dfn{Selective display} refers to a pair of related features for hiding "
"certain lines on the screen."
msgstr ""

#. type: cindex
#: original_texis/display.texi:1218
#, no-wrap
msgid "explicit selective display"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1223
msgid ""
"The first variant, explicit selective display, was designed for use in a "
"Lisp program: it controls which lines are hidden by altering the text.  This "
"kind of hiding is now obsolete and deprecated; instead you should use the "
"@code{invisible} property (@pxref{Invisible Text}) to get the same effect."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1227
msgid ""
"In the second variant, the choice of lines to hide is made automatically "
"based on indentation.  This variant is designed to be a user-level feature."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1233
msgid ""
"The way you control explicit selective display is by replacing a newline "
"(control-j) with a carriage return (control-m).  The text that was formerly "
"a line following that newline is now hidden.  Strictly speaking, it is "
"temporarily no longer a line at all, since only newlines can separate lines; "
"it is now part of the previous line."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1242
msgid ""
"Selective display does not directly affect editing commands.  For example, "
"@kbd{C-f} (@code{forward-char}) moves point unhesitatingly into hidden "
"text.  However, the replacement of newline characters with carriage return "
"characters affects some editing commands.  For example, @code{next-line} "
"skips hidden lines, since it searches only for newlines.  Modes that use "
"selective display can also define commands that take account of the "
"newlines, or that control which parts of the text are hidden."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1247
msgid ""
"When you write a selectively displayed buffer into a file, all the "
"control-m's are output as newlines.  This means that when you next read in "
"the file, it looks OK, with nothing hidden.  The selective display effect is "
"seen only within Emacs."
msgstr ""

#. type: defvar
#: original_texis/display.texi:1248
#, no-wrap
msgid "selective-display"
msgstr ""

#. type: defvar
#: original_texis/display.texi:1251
msgid ""
"This buffer-local variable enables selective display.  This means that "
"lines, or portions of lines, may be made hidden."
msgstr ""

#. type: itemize
#: original_texis/display.texi:1258
msgid ""
"If the value of @code{selective-display} is @code{t}, then the character "
"control-m marks the start of hidden text; the control-m, and the rest of the "
"line following it, are not displayed.  This is explicit selective display."
msgstr ""

#. type: itemize
#: original_texis/display.texi:1263
msgid ""
"If the value of @code{selective-display} is a positive integer, then lines "
"that start with more than that many columns of indentation are not "
"displayed."
msgstr ""

#. type: defvar
#: original_texis/display.texi:1271
msgid ""
"When some portion of a buffer is hidden, the vertical movement commands "
"operate as if that portion did not exist, allowing a single @code{next-line} "
"command to skip any number of hidden lines.  However, character movement "
"commands (such as @code{forward-char}) do not skip the hidden portion, and "
"it is possible (if tricky) to insert or delete text in a hidden portion."
msgstr ""

#. type: defvar
#: original_texis/display.texi:1276
msgid ""
"In the examples below, we show the @emph{display appearance} of the buffer "
"@code{foo}, which changes with the value of @code{selective-display}.  The "
"@emph{contents} of the buffer do not change."
msgstr ""

#. type: group
#: original_texis/display.texi:1281
#, no-wrap
msgid ""
"(setq selective-display nil)\n"
"     @result{} nil\n"
"\n"
msgstr ""

#. type: group
#: original_texis/display.texi:1290
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"1 on this column\n"
" 2on this column\n"
"  3n this column\n"
"  3n this column\n"
" 2on this column\n"
"1 on this column\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: original_texis/display.texi:1295
#, no-wrap
msgid ""
"(setq selective-display 2)\n"
"     @result{} 2\n"
"\n"
msgstr ""

#. type: group
#: original_texis/display.texi:1302
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"1 on this column\n"
" 2on this column\n"
" 2on this column\n"
"1 on this column\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: defopt
#: original_texis/display.texi:1306
#, no-wrap
msgid "selective-display-ellipses"
msgstr ""

#. type: defopt
#: original_texis/display.texi:1310
msgid ""
"If this buffer-local variable is non-@code{nil}, then Emacs displays "
"@samp{@dots{}} at the end of a line that is followed by hidden text.  This "
"example is a continuation of the previous one."
msgstr ""

#. type: group
#: original_texis/display.texi:1315
#, no-wrap
msgid ""
"(setq selective-display-ellipses t)\n"
"     @result{} t\n"
"\n"
msgstr ""

#. type: group
#: original_texis/display.texi:1322
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"1 on this column\n"
" 2on this column ...\n"
" 2on this column\n"
"1 on this column\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: defopt
#: original_texis/display.texi:1327
msgid ""
"You can use a display table to substitute other text for the ellipsis "
"(@samp{@dots{}}).  @xref{Display Tables}."
msgstr ""

#. type: cindex
#: original_texis/display.texi:1331
#, no-wrap
msgid "temporary display"
msgstr ""

#. type: cindex
#: original_texis/display.texi:1332
#, no-wrap
msgid "temporary buffer display"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1337
msgid ""
"Temporary displays are used by Lisp programs to put output into a buffer and "
"then present it to the user for perusal rather than for editing.  Many help "
"commands use this feature."
msgstr ""

#. type: defmac
#: original_texis/display.texi:1338
#, no-wrap
msgid "with-output-to-temp-buffer buffer-name body@dots{}"
msgstr ""

#. type: defmac
#: original_texis/display.texi:1344
msgid ""
"This function executes the forms in @var{body} while arranging to insert any "
"output they print into the buffer named @var{buffer-name}, which is first "
"created if necessary, and put into Help mode.  (See the similar form "
"@code{with-temp-buffer-window} below.)  Finally, the buffer is displayed in "
"some window, but that window is not selected."
msgstr ""

#. type: defmac
#: original_texis/display.texi:1352
msgid ""
"If the forms in @var{body} do not change the major mode in the output "
"buffer, so that it is still Help mode at the end of their execution, then "
"@code{with-output-to-temp-buffer} makes this buffer read-only at the end, "
"and also scans it for function and variable names to make them into "
"clickable cross-references.  @xref{Docstring hyperlinks, , Tips for "
"Documentation Strings}, in particular the item on hyperlinks in "
"documentation strings, for more details."
msgstr ""

#. type: defmac
#: original_texis/display.texi:1357
msgid ""
"The string @var{buffer-name} specifies the temporary buffer, which need not "
"already exist.  The argument must be a string, not a buffer.  The buffer is "
"erased initially (with no questions asked), and it is marked as unmodified "
"after @code{with-output-to-temp-buffer} exits."
msgstr ""

#. type: defmac
#: original_texis/display.texi:1364
msgid ""
"@code{with-output-to-temp-buffer} binds @code{standard-output} to the "
"temporary buffer, then it evaluates the forms in @var{body}.  Output using "
"the Lisp output functions within @var{body} goes by default to that buffer "
"(but screen display and messages in the echo area, although they are "
"``output'' in the general sense of the word, are not affected).  "
"@xref{Output Functions}."
msgstr ""

#. type: defmac
#: original_texis/display.texi:1367
msgid ""
"Several hooks are available for customizing the behavior of this construct; "
"they are listed below."
msgstr ""

#. type: defmac
#: original_texis/display.texi:1369
msgid "The value of the last form in @var{body} is returned."
msgstr ""

#. type: group
#: original_texis/display.texi:1375
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
" This is the contents of foo.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: original_texis/display.texi:1382
#, no-wrap
msgid ""
"(with-output-to-temp-buffer \"foo\"\n"
"    (print 20)\n"
"    (print standard-output))\n"
"@result{} #<buffer foo>\n"
"\n"
msgstr ""

#. type: group
#: original_texis/display.texi:1384
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"\n"
msgstr ""

#. type: group
#: original_texis/display.texi:1386
#, no-wrap
msgid ""
"20\n"
"\n"
msgstr ""

#. type: group
#: original_texis/display.texi:1388
#, no-wrap
msgid ""
"#<buffer foo>\n"
"\n"
msgstr ""

#. type: group
#: original_texis/display.texi:1390
#, no-wrap
msgid "---------- Buffer: foo ----------\n"
msgstr ""

#. type: defopt
#: original_texis/display.texi:1394
#, no-wrap
msgid "temp-buffer-show-function"
msgstr ""

#. type: defopt
#: original_texis/display.texi:1398
msgid ""
"If this variable is non-@code{nil}, @code{with-output-to-temp-buffer} calls "
"it as a function to do the job of displaying a help buffer.  The function "
"gets one argument, which is the buffer it should display."
msgstr ""

#. type: defopt
#: original_texis/display.texi:1403
msgid ""
"It is a good idea for this function to run @code{temp-buffer-show-hook} just "
"as @code{with-output-to-temp-buffer} normally would, inside of "
"@code{save-selected-window} and with the chosen window and buffer selected."
msgstr ""

#. type: defvar
#: original_texis/display.texi:1405
#, no-wrap
msgid "temp-buffer-setup-hook"
msgstr ""

#. type: defvar
#: original_texis/display.texi:1410
msgid ""
"This normal hook is run by @code{with-output-to-temp-buffer} before "
"evaluating @var{body}.  When the hook runs, the temporary buffer is "
"current.  This hook is normally set up with a function to put the buffer in "
"Help mode."
msgstr ""

#. type: defvar
#: original_texis/display.texi:1412
#, no-wrap
msgid "temp-buffer-show-hook"
msgstr ""

#. type: defvar
#: original_texis/display.texi:1416
msgid ""
"This normal hook is run by @code{with-output-to-temp-buffer} after "
"displaying the temporary buffer.  When the hook runs, the temporary buffer "
"is current, and the window it was displayed in is selected."
msgstr ""

#. type: defmac
#: original_texis/display.texi:1418
#, no-wrap
msgid "with-temp-buffer-window buffer-or-name action quit-function body@dots{}"
msgstr ""

#. type: defmac
#: original_texis/display.texi:1424
msgid ""
"This macro is similar to @code{with-output-to-temp-buffer}.  Like that "
"construct, it executes @var{body} while arranging to insert any output it "
"prints into the buffer named @var{buffer-or-name} and displays that buffer "
"in some window.  Unlike @code{with-output-to-temp-buffer}, however, it does "
"not automatically switch that buffer to Help mode."
msgstr ""

#. type: defmac
#: original_texis/display.texi:1430
msgid ""
"The argument @var{buffer-or-name} specifies the temporary buffer.  It can be "
"either a buffer, which must already exist, or a string, in which case a "
"buffer of that name is created, if necessary.  The buffer is marked as "
"unmodified and read-only when @code{with-temp-buffer-window} exits."
msgstr ""

#. type: defmac
#: original_texis/display.texi:1434
msgid ""
"This macro does not call @code{temp-buffer-show-function}.  Rather, it "
"passes the @var{action} argument to @code{display-buffer} (@pxref{Choosing "
"Window}) in order to display the buffer."
msgstr ""

#. type: defmac
#: original_texis/display.texi:1440
msgid ""
"The value of the last form in @var{body} is returned, unless the argument "
"@var{quit-function} is specified.  In that case, it is called with two "
"arguments: the window showing the buffer and the result of @var{body}.  The "
"final return value is then whatever @var{quit-function} returns."
msgstr ""

#. type: vindex
#: original_texis/display.texi:1441
#, no-wrap
msgid "temp-buffer-window-setup-hook"
msgstr ""

#. type: vindex
#: original_texis/display.texi:1442
#, no-wrap
msgid "temp-buffer-window-show-hook"
msgstr ""

#. type: defmac
#: original_texis/display.texi:1446
msgid ""
"This macro uses the normal hooks @code{temp-buffer-window-setup-hook} and "
"@code{temp-buffer-window-show-hook} in place of the analogous hooks run by "
"@code{with-output-to-temp-buffer}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1450
msgid ""
"The two constructs described next are mostly identical to "
"@code{with-temp-buffer-window} but differ from it as specified:"
msgstr ""

#. type: defmac
#: original_texis/display.texi:1451
#, no-wrap
msgid "with-current-buffer-window buffer-or-name action quit-function &rest body"
msgstr ""

#. type: defmac
#: original_texis/display.texi:1455
msgid ""
"This macro is like @code{with-temp-buffer-window} but unlike that makes the "
"buffer specified by @var{buffer-or-name} current for running @var{body}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1459
msgid ""
"A window showing a temporary buffer can be fitted to the size of that buffer "
"using the following mode:"
msgstr ""

#. type: defopt
#: original_texis/display.texi:1460
#, no-wrap
msgid "temp-buffer-resize-mode"
msgstr ""

#. type: defopt
#: original_texis/display.texi:1463
msgid ""
"When this minor mode is enabled, windows showing a temporary buffer are "
"automatically resized to fit their buffer's contents."
msgstr ""

#. type: defopt
#: original_texis/display.texi:1470
msgid ""
"A window is resized if and only if it has been specially created for the "
"buffer.  In particular, windows that have shown another buffer before are "
"not resized.  By default, this mode uses @code{fit-window-to-buffer} "
"(@pxref{Resizing Windows}) for resizing.  You can specify a different "
"function by customizing the options @code{temp-buffer-max-height} and "
"@code{temp-buffer-max-width} below."
msgstr ""

#. type: defopt
#: original_texis/display.texi:1475
msgid ""
"The effect of this option can be overridden by providing a suitable "
"@code{window-height}, @code{window-width} or @code{window-size} action alist "
"entry for @code{display-buffer} (@pxref{Buffer Display Action Alists})."
msgstr ""

#. type: defopt
#: original_texis/display.texi:1477
#, no-wrap
msgid "temp-buffer-max-height"
msgstr ""

#. type: defopt
#: original_texis/display.texi:1484
msgid ""
"This option specifies the maximum height (in lines) of a window displaying a "
"temporary buffer when @code{temp-buffer-resize-mode} is enabled.  It can "
"also be a function to be called to choose the height for such a buffer.  It "
"gets one argument, the buffer, and should return a positive integer.  At the "
"time the function is called, the window to be resized is selected."
msgstr ""

#. type: defopt
#: original_texis/display.texi:1486
#, no-wrap
msgid "temp-buffer-max-width"
msgstr ""

#. type: defopt
#: original_texis/display.texi:1493
msgid ""
"This option specifies the maximum width of a window (in columns)  displaying "
"a temporary buffer when @code{temp-buffer-resize-mode} is enabled.  It can "
"also be a function to be called to choose the width for such a buffer.  It "
"gets one argument, the buffer, and should return a positive integer.  At the "
"time the function is called, the window to be resized is selected."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1496
msgid "The following function uses the current buffer for temporary display:"
msgstr ""

#. type: defun
#: original_texis/display.texi:1497
#, no-wrap
msgid "momentary-string-display string position &optional char message"
msgstr ""

#. type: defun
#: original_texis/display.texi:1501
msgid ""
"This function momentarily displays @var{string} in the current buffer at "
"@var{position}.  It has no effect on the undo list or on the buffer's "
"modification status."
msgstr ""

#. type: defun
#: original_texis/display.texi:1509
msgid ""
"The momentary display remains until the next input event.  If the next input "
"event is @var{char}, @code{momentary-string-display} ignores it and "
"returns.  Otherwise, that event remains buffered for subsequent use as "
"input.  Thus, typing @var{char} will simply remove the string from the "
"display, while typing (say) @kbd{C-f} will remove the string from the "
"display and later (presumably) move point forward.  The argument @var{char} "
"is a space by default."
msgstr ""

#. type: defun
#: original_texis/display.texi:1511
msgid "The return value of @code{momentary-string-display} is not meaningful."
msgstr ""

#. type: defun
#: original_texis/display.texi:1516
msgid ""
"If the string @var{string} does not contain control characters, you can do "
"the same job in a more general way by creating (and then subsequently "
"deleting) an overlay with a @code{before-string} property.  @xref{Overlay "
"Properties}."
msgstr ""

#. type: defun
#: original_texis/display.texi:1520
msgid ""
"If @var{message} is non-@code{nil}, it is displayed in the echo area while "
"@var{string} is displayed in the buffer.  If it is @code{nil}, a default "
"message says to type @var{char} to continue."
msgstr ""

#. type: defun
#: original_texis/display.texi:1523
msgid ""
"In this example, point is initially located at the beginning of the second "
"line:"
msgstr ""

#. type: group
#: original_texis/display.texi:1530
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of foo.\n"
"@point{}Second line.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: original_texis/display.texi:1538
#, no-wrap
msgid ""
"(momentary-string-display\n"
"  \"**** Important Message! ****\"\n"
"  (point) ?\\r\n"
"  \"Type RET when done reading\")\n"
"@result{} t\n"
msgstr ""

#. type: group
#: original_texis/display.texi:1545
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of foo.\n"
"**** Important Message! ****Second line.\n"
"---------- Buffer: foo ----------\n"
"\n"
msgstr ""

#. type: group
#: original_texis/display.texi:1549
#, no-wrap
msgid ""
"---------- Echo Area ----------\n"
"Type RET when done reading\n"
"---------- Echo Area ----------\n"
msgstr ""

#. type: cindex
#: original_texis/display.texi:1555
#, no-wrap
msgid "overlays"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1564
msgid ""
"You can use @dfn{overlays} to alter the appearance of a buffer's text on the "
"screen, for the sake of presentation features.  An overlay is an object that "
"belongs to a particular buffer, and has a specified beginning and end.  It "
"also has properties that you can examine and set; these affect the display "
"of the text within the overlaid portion of the buffer."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1569
msgid ""
"Editing the text of the buffer adjusts the beginning and end of each overlay "
"so that it stays with the text.  When you create the overlay, you can "
"specify whether text inserted at the beginning should be inside the overlay "
"or outside, and likewise for the end of the overlay."
msgstr ""

#. type: subsection
#: original_texis/display.texi:1575 original_texis/display.texi:1577
#: original_texis/display.texi:1578
#, no-wrap
msgid "Managing Overlays"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:1575
msgid "Creating and moving overlays."
msgstr ""

#. type: subsection
#: original_texis/display.texi:1575 original_texis/display.texi:1745
#: original_texis/display.texi:1746
#, no-wrap
msgid "Overlay Properties"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:1575
msgid "How to read and set properties.  What properties do to the screen display."
msgstr ""

#. type: node
#: original_texis/display.texi:1575 original_texis/display.texi:2026
#, no-wrap
msgid "Finding Overlays"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:1575
msgid "Searching for overlays."
msgstr ""

#. type: cindex
#: original_texis/display.texi:1579
#, no-wrap
msgid "managing overlays"
msgstr ""

#. type: cindex
#: original_texis/display.texi:1580
#, no-wrap
msgid "overlays, managing"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1586
msgid ""
"This section describes the functions to create, delete and move overlays, "
"and to examine their contents.  Overlay changes are not recorded in the "
"buffer's undo list, since the overlays are not considered part of the "
"buffer's contents."
msgstr ""

#. type: defun
#: original_texis/display.texi:1587
#, no-wrap
msgid "overlayp object"
msgstr ""

#. type: defun
#: original_texis/display.texi:1589
msgid "This function returns @code{t} if @var{object} is an overlay."
msgstr ""

#. type: defun
#: original_texis/display.texi:1591
#, no-wrap
msgid "make-overlay start end &optional buffer front-advance rear-advance"
msgstr ""

#. type: defun
#: original_texis/display.texi:1597
msgid ""
"This function creates and returns an overlay that belongs to @var{buffer} "
"and ranges from @var{start} to @var{end}.  Both @var{start} and @var{end} "
"must specify buffer positions; they may be integers or markers.  If "
"@var{buffer} is omitted, the overlay is created in the current buffer."
msgstr ""

#. type: cindex
#: original_texis/display.texi:1598
#, no-wrap
msgid "empty overlay"
msgstr ""

#. type: cindex
#: original_texis/display.texi:1599
#, no-wrap
msgid "overlay, empty"
msgstr ""

#. type: defun
#: original_texis/display.texi:1606
msgid ""
"An overlay whose @var{start} and @var{end} specify the same buffer position "
"is known as @dfn{empty}.  A non-empty overlay can become empty if the text "
"between its @var{start} and @var{end} is deleted.  When that happens, the "
"overlay is by default not deleted, but you can cause it to be deleted by "
"giving it the @samp{evaporate} property (@pxref{Overlay Properties, "
"evaporate property})."
msgstr ""

#. type: defun
#: original_texis/display.texi:1615
msgid ""
"The arguments @var{front-advance} and @var{rear-advance} specify what "
"happens when text is inserted at the beginning (i.e., before @var{start}) "
"and at the end.  If they are both @code{nil}, the default, then the overlay "
"extends to include any text inserted at the beginning, but not text inserted "
"at the end.  If @var{front-advance} is non-@code{nil}, text inserted at the "
"beginning of the overlay is excluded from the overlay.  If "
"@var{rear-advance} is non-@code{nil}, text inserted at the end of the "
"overlay is included in the overlay."
msgstr ""

#. type: defun
#: original_texis/display.texi:1617
#, no-wrap
msgid "overlay-start overlay"
msgstr ""

#. type: defun
#: original_texis/display.texi:1620
msgid ""
"This function returns the position at which @var{overlay} starts, as an "
"integer."
msgstr ""

#. type: defun
#: original_texis/display.texi:1622
#, no-wrap
msgid "overlay-end overlay"
msgstr ""

#. type: defun
#: original_texis/display.texi:1625
msgid ""
"This function returns the position at which @var{overlay} ends, as an "
"integer."
msgstr ""

#. type: defun
#: original_texis/display.texi:1627
#, no-wrap
msgid "overlay-buffer overlay"
msgstr ""

#. type: defun
#: original_texis/display.texi:1630
msgid ""
"This function returns the buffer that @var{overlay} belongs to.  It returns "
"@code{nil} if @var{overlay} has been deleted."
msgstr ""

#. type: defun
#: original_texis/display.texi:1632
#, no-wrap
msgid "delete-overlay overlay"
msgstr ""

#. type: defun
#: original_texis/display.texi:1637
msgid ""
"This function deletes the specified @var{overlay}.  The overlay continues to "
"exist as a Lisp object, and its property list is unchanged, but it ceases to "
"be attached to the buffer it belonged to, and ceases to have any effect on "
"display."
msgstr ""

#. type: defun
#: original_texis/display.texi:1640
msgid ""
"A deleted overlay is not permanently disconnected.  You can give it a "
"position in a buffer again by calling @code{move-overlay}."
msgstr ""

#. type: defun
#: original_texis/display.texi:1642
#, no-wrap
msgid "move-overlay overlay start end &optional buffer"
msgstr ""

#. type: defun
#: original_texis/display.texi:1647
msgid ""
"This function moves @var{overlay} to @var{buffer}, and places its bounds at "
"@var{start} and @var{end} in that buffer.  Both arguments @var{start} and "
"@var{end} must specify buffer positions; they may be integers or markers."
msgstr ""

#. type: defun
#: original_texis/display.texi:1652
msgid ""
"If @var{buffer} is omitted, @var{overlay} stays in the same buffer it was "
"already associated with; if @var{overlay} was previously deleted (and thus "
"isn't associated with any buffer), it goes into the current buffer."
msgstr ""

#. type: defun
#: original_texis/display.texi:1654
msgid "The return value is @var{overlay}."
msgstr ""

#. type: defun
#: original_texis/display.texi:1657
msgid "This function is the only valid way to change the endpoints of an overlay."
msgstr ""

#. type: defun
#: original_texis/display.texi:1659
#, no-wrap
msgid "remove-overlays &optional start end name value"
msgstr ""

#. type: defun
#: original_texis/display.texi:1663
msgid ""
"This function removes all the overlays between @var{start} and @var{end} "
"whose property @var{name} has the specified @var{value}.  It can move the "
"endpoints of the overlays in the region, or split them."
msgstr ""

#. type: defun
#: original_texis/display.texi:1669
msgid ""
"If @var{name} is omitted or @code{nil}, it means to delete all overlays in "
"the specified region.  If @var{start} and/or @var{end} are omitted or "
"@code{nil}, that means the beginning and end of the buffer respectively.  "
"Therefore, @code{(remove-overlays)} removes all the overlays in the current "
"buffer."
msgstr ""

#. type: defun
#: original_texis/display.texi:1671
#, no-wrap
msgid "copy-overlay overlay"
msgstr ""

#. type: defun
#: original_texis/display.texi:1676
msgid ""
"This function returns a copy of @var{overlay}.  The copy has the same "
"endpoints and properties as @var{overlay}.  However, the text insertion type "
"for the start of the overlay and for the end of the overlay are set to their "
"default values."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1679
msgid "Here are some examples:"
msgstr ""

#. type: group
#: original_texis/display.texi:1685
#, no-wrap
msgid ""
";; @r{Create an overlay.}\n"
"(setq foo (make-overlay 1 10))\n"
"     @result{} #<overlay from 1 to 10 in display.texi>\n"
msgstr ""

#. type: group
#: original_texis/display.texi:1689
#, no-wrap
msgid ""
"(overlay-start foo)\n"
"     @result{} 1\n"
msgstr ""

#. type: group
#: original_texis/display.texi:1701
#, no-wrap
msgid ""
"(overlay-end foo)\n"
"     @result{} 10\n"
"(overlay-buffer foo)\n"
"     @result{} #<buffer display.texi>\n"
";; @r{Give it a property we can check later.}\n"
"(overlay-put foo 'happy t)\n"
"     @result{} t\n"
";; @r{Verify the property is present.}\n"
"(overlay-get foo 'happy)\n"
"     @result{} t\n"
msgstr ""

#. type: group
#: original_texis/display.texi:1710
#, no-wrap
msgid ""
";; @r{Move the overlay.}\n"
"(move-overlay foo 5 20)\n"
"     @result{} #<overlay from 5 to 20 in display.texi>\n"
"(overlay-start foo)\n"
"     @result{} 5\n"
"(overlay-end foo)\n"
"     @result{} 20\n"
msgstr ""

#. type: group
#: original_texis/display.texi:1725
#, no-wrap
msgid ""
";; @r{Delete the overlay.}\n"
"(delete-overlay foo)\n"
"     @result{} nil\n"
";; @r{Verify it is deleted.}\n"
"foo\n"
"     @result{} #<overlay in no buffer>\n"
";; @r{A deleted overlay has no position.}\n"
"(overlay-start foo)\n"
"     @result{} nil\n"
"(overlay-end foo)\n"
"     @result{} nil\n"
"(overlay-buffer foo)\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/display.texi:1737
#, no-wrap
msgid ""
";; @r{Undelete the overlay.}\n"
"(move-overlay foo 1 20)\n"
"     @result{} #<overlay from 1 to 20 in display.texi>\n"
";; @r{Verify the results.}\n"
"(overlay-start foo)\n"
"     @result{} 1\n"
"(overlay-end foo)\n"
"     @result{} 20\n"
"(overlay-buffer foo)\n"
"     @result{} #<buffer display.texi>\n"
msgstr ""

#. type: group
#: original_texis/display.texi:1742
#, no-wrap
msgid ""
";; @r{Moving and deleting the overlay does not change its properties.}\n"
"(overlay-get foo 'happy)\n"
"     @result{} t\n"
msgstr ""

#. type: cindex
#: original_texis/display.texi:1747
#, no-wrap
msgid "overlay properties"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1752
msgid ""
"Overlay properties are like text properties in that the properties that "
"alter how a character is displayed can come from either source.  But in most "
"respects they are different.  @xref{Text Properties}, for comparison."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1761
msgid ""
"Text properties are considered a part of the text; overlays and their "
"properties are specifically considered not to be part of the text.  Thus, "
"copying text between various buffers and strings preserves text properties, "
"but does not try to preserve overlays.  Changing a buffer's text properties "
"marks the buffer as modified, while moving an overlay or changing its "
"properties does not.  Unlike text property changes, overlay property changes "
"are not recorded in the buffer's undo list."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1766
msgid ""
"Since more than one overlay can specify a property value for the same "
"character, Emacs lets you specify a priority value of each overlay.  The "
"priority value is used to decide which of the overlapping overlays will "
"``win''."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1768
msgid "These functions read and set the properties of an overlay:"
msgstr ""

#. type: defun
#: original_texis/display.texi:1769
#, no-wrap
msgid "overlay-get overlay prop"
msgstr ""

#. type: defun
#: original_texis/display.texi:1775
msgid ""
"This function returns the value of property @var{prop} recorded in "
"@var{overlay}, if any.  If @var{overlay} does not record any value for that "
"property, but it does have a @code{category} property which is a symbol, "
"that symbol's @var{prop} property is used.  Otherwise, the value is "
"@code{nil}."
msgstr ""

#. type: defun
#: original_texis/display.texi:1777
#, no-wrap
msgid "overlay-put overlay prop value"
msgstr ""

#. type: defun
#: original_texis/display.texi:1780
msgid ""
"This function sets the value of property @var{prop} recorded in "
"@var{overlay} to @var{value}.  It returns @var{value}."
msgstr ""

#. type: defun
#: original_texis/display.texi:1782
#, no-wrap
msgid "overlay-properties overlay"
msgstr ""

#. type: defun
#: original_texis/display.texi:1784
msgid "This returns a copy of the property list of @var{overlay}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1789
msgid ""
"See also the function @code{get-char-property} which checks both overlay "
"properties and text properties for a given character.  @xref{Examining "
"Properties}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:1792
msgid "Many overlay properties have special meanings; here is a table of them:"
msgstr ""

#. type: item
#: original_texis/display.texi:1794
#, no-wrap
msgid "priority"
msgstr ""

#. type: kindex
#: original_texis/display.texi:1795
#, no-wrap
msgid "priority @r{(overlay property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:1800
msgid ""
"This property's value determines the priority of the overlay.  If you want "
"to specify a priority value, use either @code{nil} (or zero), or a positive "
"integer, or a cons of two values.  Any other value triggers undefined "
"behavior."
msgstr ""

#. type: table
#: original_texis/display.texi:1812
msgid ""
"The priority matters when two or more overlays cover the same character and "
"both specify the same property with different values; the one whose "
"@code{priority} value is higher overrides the other.  (For the @code{face} "
"property, the higher priority overlay's value does not completely override "
"the other value; instead, its individual face attributes override the "
"corresponding face attributes of the @code{face} property whose priority is "
"lower.)  If two overlays have the same priority value, and one is ``nested'' "
"in the other (i.e., covers fewer buffer or string positions), then the inner "
"one will prevail over the outer one.  If neither is nested in the other then "
"you should not make assumptions about which overlay will prevail."
msgstr ""

#. type: table
#: original_texis/display.texi:1828
msgid ""
"When a Lisp program puts overlays with defined priorities on text that might "
"have overlays without priorities, this could cause undesirable results, "
"because any overlay with a positive priority value will override all the "
"overlays without a priority.  Since most Emacs features that use overlays "
"don't specify priorities for their overlays, integer priorities should be "
"used with care.  Instead of using integer priorities and risk overriding "
"other overlays, you can use priority values of the form "
"@w{@code{(@var{primary} . @var{secondary})}}, where the @var{primary} value "
"is used as described above, and @var{secondary} is the fallback value used "
"when @var{primary} and the nesting considerations fail to resolve the "
"precedence between overlays.  In particular, priority value @w{@code{(nil "
". @var{n})}}, with @var{n} a positive integer, allows to have the overlays "
"ordered by priority when necessary without completely overriding other "
"overlays."
msgstr ""

#. type: table
#: original_texis/display.texi:1830
msgid "Currently, all overlays take priority over text properties."
msgstr ""

#. type: table
#: original_texis/display.texi:1833
msgid ""
"If you need to put overlays in priority order, use the @var{sorted} argument "
"of @code{overlays-at}.  @xref{Finding Overlays}."
msgstr ""

#. type: item
#: original_texis/display.texi:1834
#, no-wrap
msgid "window"
msgstr ""

#. type: kindex
#: original_texis/display.texi:1835
#, no-wrap
msgid "window @r{(overlay property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:1838
msgid ""
"If the @code{window} property is non-@code{nil}, then the overlay applies "
"only on that window."
msgstr ""

#. type: item
#: original_texis/display.texi:1839
#, no-wrap
msgid "category"
msgstr ""

#. type: kindex
#: original_texis/display.texi:1840
#, no-wrap
msgid "category @r{(overlay property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:1844
msgid ""
"If an overlay has a @code{category} property, we call it the @dfn{category} "
"of the overlay.  It should be a symbol.  The properties of the symbol serve "
"as defaults for the properties of the overlay."
msgstr ""

#. type: item
#: original_texis/display.texi:1845 original_texis/display.texi:7706
#, no-wrap
msgid "face"
msgstr ""

#. type: kindex
#: original_texis/display.texi:1846
#, no-wrap
msgid "face @r{(overlay property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:1849
msgid ""
"This property controls the appearance of the text (@pxref{Faces}).  The "
"value of the property can be the following:"
msgstr ""

#. type: itemize
#: original_texis/display.texi:1853
msgid "A face name (a symbol or string)."
msgstr ""

#. type: itemize
#: original_texis/display.texi:1858
msgid ""
"An anonymous face: a property list of the form @code{(@var{keyword} "
"@var{value} @dots{})}, where each @var{keyword} is a face attribute name and "
"@var{value} is a value for that attribute."
msgstr ""

#. type: itemize
#: original_texis/display.texi:1864
msgid ""
"A list of faces.  Each list element should be either a face name or an "
"anonymous face.  This specifies a face which is an aggregate of the "
"attributes of each of the listed faces.  Faces occurring earlier in the list "
"have higher priority."
msgstr ""

#. type: itemize
#: original_texis/display.texi:1872
msgid ""
"A cons cell of the form @code{(foreground-color . @var{color-name})} or "
"@code{(background-color . @var{color-name})}.  This specifies the foreground "
"or background color, similar to @code{(:foreground @var{color-name})} or "
"@code{(:background @var{color-name})}.  This form is supported for backward "
"compatibility only, and should be avoided."
msgstr ""

#. type: item
#: original_texis/display.texi:1874 original_texis/display.texi:7711
#, no-wrap
msgid "mouse-face"
msgstr ""

#. type: kindex
#: original_texis/display.texi:1875
#, no-wrap
msgid "mouse-face @r{(overlay property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:1881
msgid ""
"This property is used instead of @code{face} when the mouse is within the "
"range of the overlay.  However, Emacs ignores all face attributes from this "
"property that alter the text size (e.g., @code{:height}, @code{:weight}, and "
"@code{:slant}); those attributes are always the same as in the unhighlighted "
"text."
msgstr ""

#. type: item
#: original_texis/display.texi:1882
#, no-wrap
msgid "display"
msgstr ""

#. type: kindex
#: original_texis/display.texi:1883
#, no-wrap
msgid "display @r{(overlay property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:1888
msgid ""
"This property activates various features that change the way text is "
"displayed.  For example, it can make text appear taller or shorter, higher "
"or lower, wider or narrower, or replaced with an image.  @xref{Display "
"Property}."
msgstr ""

#. type: item
#: original_texis/display.texi:1889 original_texis/display.texi:7729
#, no-wrap
msgid "help-echo"
msgstr ""

#. type: kindex
#: original_texis/display.texi:1890
#, no-wrap
msgid "help-echo @r{(overlay property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:1894
msgid ""
"If an overlay has a @code{help-echo} property, then when you move the mouse "
"onto the text in the overlay, Emacs displays a help string in the echo area, "
"or as a tooltip.  For details see @ref{Text help-echo}."
msgstr ""

#. type: item
#: original_texis/display.texi:1895
#, no-wrap
msgid "field"
msgstr ""

#. type: kindex
#: original_texis/display.texi:1896
#, no-wrap
msgid "field @r{(overlay property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:1902
msgid ""
"Consecutive characters with the same @code{field} property constitute a "
"@emph{field}.  Some motion functions including @code{forward-word} and "
"@code{beginning-of-line} stop moving at a field boundary.  @xref{Fields}."
msgstr ""

#. type: item
#: original_texis/display.texi:1903
#, no-wrap
msgid "modification-hooks"
msgstr ""

#. type: kindex
#: original_texis/display.texi:1904
#, no-wrap
msgid "modification-hooks @r{(overlay property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:1908
msgid ""
"This property's value is a list of functions to be called if any character "
"within the overlay is changed or if text is inserted strictly within the "
"overlay."
msgstr ""

#. type: table
#: original_texis/display.texi:1913
msgid ""
"The hook functions are called both before and after each change.  If the "
"functions save the information they receive, and compare notes between "
"calls, they can determine exactly what change has been made in the buffer "
"text."
msgstr ""

#. type: table
#: original_texis/display.texi:1917
msgid ""
"When called before a change, each function receives four arguments: the "
"overlay, @code{nil}, and the beginning and end of the text range to be "
"modified."
msgstr ""

#. type: table
#: original_texis/display.texi:1924
msgid ""
"When called after a change, each function receives five arguments: the "
"overlay, @code{t}, the beginning and end of the text range just modified, "
"and the length of the pre-change text replaced by that range.  (For an "
"insertion, the pre-change length is zero; for a deletion, that length is the "
"number of characters deleted, and the post-change beginning and end are "
"equal.)"
msgstr ""

#. type: table
#: original_texis/display.texi:1931
msgid ""
"When these functions are called, @code{inhibit-modification-hooks} is bound "
"to non-@code{nil}.  If the functions modify the buffer, you might want to "
"bind @code{inhibit-modification-hooks} to @code{nil}, so as to cause the "
"change hooks to run for these modifications.  However, doing this may call "
"your own change hook recursively, so be sure to prepare for that.  "
"@xref{Change Hooks}."
msgstr ""

#. type: table
#: original_texis/display.texi:1934
msgid ""
"Text properties also support the @code{modification-hooks} property, but the "
"details are somewhat different (@pxref{Special Properties})."
msgstr ""

#. type: item
#: original_texis/display.texi:1935
#, no-wrap
msgid "insert-in-front-hooks"
msgstr ""

#. type: kindex
#: original_texis/display.texi:1936
#, no-wrap
msgid "insert-in-front-hooks @r{(overlay property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:1940
msgid ""
"This property's value is a list of functions to be called before and after "
"inserting text right at the beginning of the overlay.  The calling "
"conventions are the same as for the @code{modification-hooks} functions."
msgstr ""

#. type: item
#: original_texis/display.texi:1941
#, no-wrap
msgid "insert-behind-hooks"
msgstr ""

#. type: kindex
#: original_texis/display.texi:1942
#, no-wrap
msgid "insert-behind-hooks @r{(overlay property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:1946
msgid ""
"This property's value is a list of functions to be called before and after "
"inserting text right at the end of the overlay.  The calling conventions are "
"the same as for the @code{modification-hooks} functions."
msgstr ""

#. type: item
#: original_texis/display.texi:1947
#, no-wrap
msgid "invisible"
msgstr ""

#. type: kindex
#: original_texis/display.texi:1948
#, no-wrap
msgid "invisible @r{(overlay property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:1952
msgid ""
"The @code{invisible} property can make the text in the overlay invisible, "
"which means that it does not appear on the screen.  @xref{Invisible Text}, "
"for details."
msgstr ""

#. type: item
#: original_texis/display.texi:1953
#, no-wrap
msgid "intangible"
msgstr ""

#. type: kindex
#: original_texis/display.texi:1954
#, no-wrap
msgid "intangible @r{(overlay property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:1958
msgid ""
"The @code{intangible} property on an overlay works just like the "
"@code{intangible} text property.  It is obsolete.  @xref{Special "
"Properties}, for details."
msgstr ""

#. type: item
#: original_texis/display.texi:1959
#, no-wrap
msgid "isearch-open-invisible"
msgstr ""

#. type: table
#: original_texis/display.texi:1964
msgid ""
"This property tells incremental search (@pxref{Incremental Search,,, emacs, "
"The GNU Emacs Manual}) how to make an invisible overlay visible, "
"permanently, if the final match overlaps it.  @xref{Invisible Text}."
msgstr ""

#. type: item
#: original_texis/display.texi:1965
#, no-wrap
msgid "isearch-open-invisible-temporary"
msgstr ""

#. type: table
#: original_texis/display.texi:1968
msgid ""
"This property tells incremental search how to make an invisible overlay "
"visible, temporarily, during the search.  @xref{Invisible Text}."
msgstr ""

#. type: item
#: original_texis/display.texi:1969
#, no-wrap
msgid "before-string"
msgstr ""

#. type: kindex
#: original_texis/display.texi:1970
#, no-wrap
msgid "before-string @r{(overlay property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:1975
msgid ""
"This property's value is a string to add to the display at the beginning of "
"the overlay.  The string does not appear in the buffer in any sense---only "
"on the screen.  Note that if the text at the beginning of the overlay is "
"made invisible, the string will not be displayed."
msgstr ""

#. type: item
#: original_texis/display.texi:1976
#, no-wrap
msgid "after-string"
msgstr ""

#. type: kindex
#: original_texis/display.texi:1977
#, no-wrap
msgid "after-string @r{(overlay property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:1982
msgid ""
"This property's value is a string to add to the display at the end of the "
"overlay.  The string does not appear in the buffer in any sense---only on "
"the screen.  Note that if the text at the end of the overlay is made "
"invisible, the string will not be displayed."
msgstr ""

#. type: table
#: original_texis/display.texi:1986
msgid ""
"This property specifies a display spec to prepend to each non-continuation "
"line at display-time.  @xref{Truncation}."
msgstr ""

#. type: table
#: original_texis/display.texi:1990
msgid ""
"This property specifies a display spec to prepend to each continuation line "
"at display-time.  @xref{Truncation}."
msgstr ""

#. type: item
#: original_texis/display.texi:1991
#, no-wrap
msgid "evaporate"
msgstr ""

#. type: kindex
#: original_texis/display.texi:1992
#, no-wrap
msgid "evaporate @r{(overlay property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:2000
msgid ""
"If this property is non-@code{nil}, the overlay is deleted automatically if "
"it becomes empty (i.e., if its length becomes zero).  If you give an empty "
"overlay (@pxref{Managing Overlays, empty overlay}) a non-@code{nil} "
"@code{evaporate} property, that deletes it immediately.  Note that, unless "
"an overlay has this property, it will not be deleted when the text between "
"its starting and ending positions is deleted from the buffer."
msgstr ""

#. type: item
#: original_texis/display.texi:2001 original_texis/display.texi:7717
#, no-wrap
msgid "keymap"
msgstr ""

#. type: cindex
#: original_texis/display.texi:2002
#, no-wrap
msgid "keymap of character (and overlays)"
msgstr ""

#. type: kindex
#: original_texis/display.texi:2003
#, no-wrap
msgid "keymap @r{(overlay property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:2010
msgid ""
"If this property is non-@code{nil}, it specifies a keymap for a portion of "
"the text.  This keymap takes precedence over most other keymaps "
"(@pxref{Active Keymaps}), and it is used when point is within the overlay, "
"where the front- and rear-advance properties define whether the boundaries "
"are considered as being @emph{within} or not."
msgstr ""

#. type: item
#: original_texis/display.texi:2011
#, no-wrap
msgid "local-map"
msgstr ""

#. type: kindex
#: original_texis/display.texi:2012
#, no-wrap
msgid "local-map @r{(overlay property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:2016
msgid ""
"The @code{local-map} property is similar to @code{keymap} but replaces the "
"buffer's local map rather than augmenting existing keymaps.  This also means "
"it has lower precedence than minor mode keymaps."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2025
msgid ""
"The @code{keymap} and @code{local-map} properties do not affect a string "
"displayed by the @code{before-string}, @code{after-string}, or "
"@code{display} properties.  This is only relevant for mouse clicks and other "
"mouse events that fall on the string, since point is never on the string.  "
"To bind special mouse events for the string, assign it a @code{keymap} or "
"@code{local-map} text property.  @xref{Special Properties}."
msgstr ""

#. type: subsection
#: original_texis/display.texi:2027
#, no-wrap
msgid "Searching for Overlays"
msgstr ""

#. type: cindex
#: original_texis/display.texi:2028
#, no-wrap
msgid "searching for overlays"
msgstr ""

#. type: cindex
#: original_texis/display.texi:2029
#, no-wrap
msgid "overlays, searching for"
msgstr ""

#. type: defun
#: original_texis/display.texi:2031
#, no-wrap
msgid "overlays-at pos &optional sorted"
msgstr ""

#. type: defun
#: original_texis/display.texi:2037
msgid ""
"This function returns a list of all the overlays that cover the character at "
"position @var{pos} in the current buffer.  If @var{sorted} is "
"non-@code{nil}, the list is in decreasing order of priority, otherwise it is "
"in no particular order.  An overlay contains position @var{pos} if it begins "
"at or before @var{pos}, and ends after @var{pos}."
msgstr ""

#. type: defun
#: original_texis/display.texi:2040
msgid ""
"To illustrate usage, here is a Lisp function that returns a list of the "
"overlays that specify property @var{prop} for the character at point:"
msgstr ""

#. type: smallexample
#: original_texis/display.texi:2051
#, no-wrap
msgid ""
"(defun find-overlays-specifying (prop)\n"
"  (let ((overlays (overlays-at (point)))\n"
"        found)\n"
"    (while overlays\n"
"      (let ((overlay (car overlays)))\n"
"        (if (overlay-get overlay prop)\n"
"            (setq found (cons overlay found))))\n"
"      (setq overlays (cdr overlays)))\n"
"    found))\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:2054
#, no-wrap
msgid "overlays-in beg end"
msgstr ""

#. type: defun
#: original_texis/display.texi:2062
msgid ""
"This function returns a list of the overlays that overlap the region "
"@var{beg} through @var{end}.  An overlay overlaps with a region if it "
"contains one or more characters in the region; empty overlays "
"(@pxref{Managing Overlays, empty overlay}) overlap if they are at @var{beg}, "
"strictly between @var{beg} and @var{end}, or at @var{end} when @var{end} "
"denotes the position at the end of the accessible part of the buffer."
msgstr ""

#. type: defun
#: original_texis/display.texi:2064
#, no-wrap
msgid "next-overlay-change pos"
msgstr ""

#. type: defun
#: original_texis/display.texi:2068
msgid ""
"This function returns the buffer position of the next beginning or end of an "
"overlay, after @var{pos}.  If there is none, it returns @code{(point-max)}."
msgstr ""

#. type: defun
#: original_texis/display.texi:2070
#, no-wrap
msgid "previous-overlay-change pos"
msgstr ""

#. type: defun
#: original_texis/display.texi:2074
msgid ""
"This function returns the buffer position of the previous beginning or end "
"of an overlay, before @var{pos}.  If there is none, it returns "
"@code{(point-min)}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2082
msgid ""
"As an example, here's a simplified (and inefficient) version of the "
"primitive function @code{next-single-char-property-change} (@pxref{Property "
"Search}).  It searches forward from position @var{pos} for the next position "
"where the value of a given property @code{prop}, as obtained from either "
"overlays or text properties, changes."
msgstr ""

#. type: smallexample
#: original_texis/display.texi:2093
#, no-wrap
msgid ""
"(defun next-single-char-property-change (position prop)\n"
"  (save-excursion\n"
"    (goto-char position)\n"
"    (let ((propval (get-char-property (point) prop)))\n"
"      (while (and (not (eobp))\n"
"                  (eq (get-char-property (point) prop) propval))\n"
"        (goto-char (min (next-overlay-change (point))\n"
"                        (next-single-property-change (point) prop)))))\n"
"    (point)))\n"
msgstr ""

#. type: cindex
#: original_texis/display.texi:2097
#, no-wrap
msgid "size of text on display"
msgstr ""

#. type: cindex
#: original_texis/display.texi:2098
#, no-wrap
msgid "character width on display"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2103
msgid ""
"Since not all characters have the same width, these functions let you check "
"the width of a character.  @xref{Primitive Indent}, and @ref{Screen Lines}, "
"for related functions."
msgstr ""

#. type: defun
#: original_texis/display.texi:2104
#, no-wrap
msgid "char-width char"
msgstr ""

#. type: defun
#: original_texis/display.texi:2110
msgid ""
"This function returns the width in columns of the character @var{char}, if "
"it were displayed in the current buffer (i.e., taking into account the "
"buffer's display table, if any; @pxref{Display Tables}).  The width of a tab "
"character is usually @code{tab-width} (@pxref{Usual Display})."
msgstr ""

#. type: defun
#: original_texis/display.texi:2112
#, no-wrap
msgid "char-uppercase-p char"
msgstr ""

#. type: defun
#: original_texis/display.texi:2115
msgid ""
"Return non-@code{nil} if @var{char} is an uppercase character according to "
"Unicode."
msgstr ""

#. type: defun
#: original_texis/display.texi:2117
#, no-wrap
msgid "string-width string &optional from to"
msgstr ""

#. type: defun
#: original_texis/display.texi:2123
msgid ""
"This function returns the width in columns of the string @var{string}, if it "
"were displayed in the current buffer and the selected window.  Optional "
"arguments @var{from} and @var{to} specify the substring of @var{string} to "
"consider, and are interpreted as in @code{substring} (@pxref{Creating "
"Strings})."
msgstr ""

#. type: defun
#: original_texis/display.texi:2130
msgid ""
"The return value is an approximation: it only considers the values returned "
"by @code{char-width} for the constituent characters, always takes a tab "
"character as taking @code{tab-width} columns, ignores display properties and "
"fonts, etc.  For these reasons, we recommend using "
"@code{window-text-pixel-size} or @code{string-pixel-width}, described below, "
"instead."
msgstr ""

#. type: defun
#: original_texis/display.texi:2132
#, no-wrap
msgid ""
"truncate-string-to-width string width &optional start-column padding "
"ellipsis ellipsis-text-property"
msgstr ""

#. type: defun
#: original_texis/display.texi:2135
msgid ""
"This function returns a new string that is a truncation of @var{string} "
"which fits within @var{width} columns on display."
msgstr ""

#. type: defun
#: original_texis/display.texi:2142
msgid ""
"If @var{string} is narrower than @var{width}, the result is equal to "
"@var{string}; otherwise excess characters are omitted from the result.  If a "
"multi-column character in @var{string} exceeds the goal @var{width}, that "
"character is omitted from the result.  Thus, the result can sometimes fall "
"short of @var{width}, but cannot go beyond it."
msgstr ""

#. type: defun
#: original_texis/display.texi:2148
msgid ""
"The optional argument @var{start-column} specifies the starting column; it "
"defaults to zero.  If this is non-@code{nil}, then the first "
"@var{start-column} columns of the string are omitted from the result.  If "
"one multi-column character in @var{string} extends across the column "
"@var{start-column}, that character is omitted."
msgstr ""

#. type: defun
#: original_texis/display.texi:2156
msgid ""
"The optional argument @var{padding}, if non-@code{nil}, is a padding "
"character added at the beginning and end of the result string, to extend it "
"to exactly @var{width} columns.  The padding character is appended at the "
"end of the result if it falls short of @var{width}, as many times as needed "
"to reach @var{width}.  It is also prepended at the beginning of the result "
"if a multi-column character in @var{string} extends across the column "
"@var{start-column}."
msgstr ""

#. type: defun
#: original_texis/display.texi:2166
msgid ""
"If @var{ellipsis} is non-@code{nil}, it should be a string which will "
"replace the end of @var{string} when it is truncated.  In this case, more "
"characters will be removed from @var{string} to free enough space for "
"@var{ellipsis} to fit within @var{width} columns.  However, if the display "
"width of @var{string} is less than the display width of @var{ellipsis}, "
"@var{ellipsis} will not be appended to the result.  If @var{ellipsis} is "
"non-@code{nil} and not a string, it stands for the value returned by the "
"function @code{truncate-string-ellipsis}, described below."
msgstr ""

#. type: defun
#: original_texis/display.texi:2171
msgid ""
"The optional argument @var{ellipsis-text-property}, if non-@code{nil}, means "
"hide the excess parts of @var{string} with a @code{display} text property "
"(@pxref{Display Property}) showing the ellipsis, instead of actually "
"truncating the string."
msgstr ""

#. type: group
#: original_texis/display.texi:2178
#, no-wrap
msgid ""
"(truncate-string-to-width \"\\tab\\t\" 12 4)\n"
"     @result{} \"ab\"\n"
"(truncate-string-to-width \"\\tab\\t\" 12 4 ?\\s)\n"
"     @result{} \"    ab  \"\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:2188
msgid ""
"This function uses @code{string-width} and @code{char-width} to find the "
"suitable truncation point when @var{string} is too wide, so it suffers from "
"the same basic issues as @code{string-width} does.  In particular, when "
"character composition happens within @var{string}, the display width of a "
"string could be smaller than the sum of widths of the constituent "
"characters, and this function might return inaccurate results."
msgstr ""

#. type: defun
#: original_texis/display.texi:2190
#, no-wrap
msgid "truncate-string-ellipsis"
msgstr ""

#. type: defun
#: original_texis/display.texi:2197
msgid ""
"This function returns the string to be used as an ellipses in "
"@code{truncate-string-to-width} and other similar contexts.  The value is "
"that of the variable @code{truncate-string-ellipsis}, if it's "
"non-@code{nil}, the string with the single character @sc{U+2026 HORIZONTAL "
"ELLIPSIS} if that character can be displayed on the selected frame, and the "
"string @samp{...} otherwise."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2205
msgid ""
"The following function returns the size in pixels of text as if it were "
"displayed in a given window.  This function is used by "
"@code{fit-window-to-buffer} and @code{fit-frame-to-buffer} (@pxref{Resizing "
"Windows}) to make a window exactly as large as the text it contains."
msgstr ""

#. type: defun
#: original_texis/display.texi:2206
#, no-wrap
msgid ""
"window-text-pixel-size &optional window from to x-limit y-limit mode-lines "
"ignore-line-at-end"
msgstr ""

#. type: defun
#: original_texis/display.texi:2214
msgid ""
"This function returns the size of the text of @var{window}'s buffer in "
"pixels.  @var{window} must be a live window and defaults to the selected "
"one.  The return value is a cons of the maximum pixel-width of any text line "
"and the maximum pixel-height of all text lines.  This function exists to "
"allow Lisp programs to adjust the dimensions of @var{window} to the buffer "
"text it needs to display, and for other similar situations."
msgstr ""

#. type: defun
#: original_texis/display.texi:2217
msgid ""
"The return value can also optionally (see below) include the buffer position "
"of the first line whose dimensions were measured."
msgstr ""

#. type: defun
#: original_texis/display.texi:2233
msgid ""
"The optional argument @var{from}, if non-@code{nil}, specifies the first "
"text position to consider, and defaults to the minimum accessible position "
"of the buffer.  If @var{from} is @code{t}, it stands for the minimum "
"accessible position that is not a newline character.  If @var{from} is a "
"cons, its @code{car} specifies a buffer position, and its @code{cdr} "
"specifies the vertical offset in pixels from that position to the first "
"screen line whose text is to be measured.  (The measurement will start from "
"the visual beginning of that screen line.)  In that case, the return value "
"will instead be a list of the pixel-width, pixel-height, and the buffer "
"position of the first line that was measured.  The optional argument "
"@var{to}, if non-@code{nil}, specifies the last text position to consider, "
"and defaults to the maximum accessible position of the buffer.  If @var{to} "
"is @code{t}, it stands for the maximum accessible position that is not a "
"newline character."
msgstr ""

#. type: defun
#: original_texis/display.texi:2248
msgid ""
"The optional argument @var{x-limit}, if non-@code{nil}, specifies the "
"maximum X coordinate beyond which text should be ignored; it is therefore "
"also the largest value of pixel-width that the function can return.  If "
"@var{x-limit} @code{nil} or omitted, it means to use the pixel-width of "
"@var{window}'s body (@pxref{Window Sizes}); this default means that text of "
"truncated lines wider than the window will be ignored.  This default is "
"useful when the caller does not intend to change the width of @var{window}.  "
"Otherwise, the caller should specify here the maximum width @var{window}'s "
"body may assume; in particular, if truncated lines are expected and their "
"text needs to be accounted for, @var{x-limit} should be set to a large "
"value.  Since calculating the width of long lines can take some time, it's "
"always a good idea to make this argument as small as needed; in particular, "
"if the buffer might contain long lines that will be truncated anyway."
msgstr ""

#. type: defun
#: original_texis/display.texi:2257
msgid ""
"The optional argument @var{y-limit}, if non-@code{nil}, specifies the "
"maximum Y coordinate beyond which text is to be ignored; it is therefore "
"also the maximum pixel-height that the function can return.  If "
"@var{y-limit} is @code{nil} or omitted, it means to consider all the lines "
"of text till the buffer position specified by @var{to}.  Since calculating "
"the pixel-height of a large buffer can take some time, it makes sense to "
"specify this argument; in particular, if the caller does not know the size "
"of the buffer."
msgstr ""

#. type: defun
#: original_texis/display.texi:2264
msgid ""
"The optional argument @var{mode-lines} @code{nil} or omitted means to not "
"include the height of the mode-, tab- or header-line of @var{window} in the "
"return value.  If it is either the symbol @code{mode-line}, @code{tab-line} "
"or @code{header-line}, include only the height of that line, if present, in "
"the return value.  If it is @code{t}, include the height of all of these "
"lines, if present, in the return value."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2271
msgid ""
"The optional argument @var{ignore-line-at-end} controls whether or not to "
"count the height of text in @var{to}'s screen line as part of the returned "
"pixel-height.  This is useful if your Lisp program is only interested in the "
"dimensions of text up to and excluding the visual beginning of @var{to}'s "
"screen line."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2275
msgid ""
"@code{window-text-pixel-size} treats the text displayed in a window as a "
"whole and does not care about the size of individual lines.  The following "
"function does."
msgstr ""

#. type: defun
#: original_texis/display.texi:2276
#, no-wrap
msgid "window-lines-pixel-dimensions &optional window first last body inverse left"
msgstr ""

#. type: defun
#: original_texis/display.texi:2286
msgid ""
"This function calculates the pixel dimensions of each line displayed in the "
"specified @var{window}.  It does so by walking @var{window}'s current glyph "
"matrix---a matrix storing the glyph (@pxref{Glyphs}) of each buffer "
"character currently displayed in @var{window}.  If successful, it returns a "
"list of cons pairs representing the x- and y-coordinates of the lower right "
"corner of the last character of each line.  Coordinates are measured in "
"pixels from an origin (0, 0) at the top-left corner of @var{window}.  "
"@var{window} must be a live window and defaults to the selected one."
msgstr ""

#. type: defun
#: original_texis/display.texi:2296
msgid ""
"If the optional argument @var{first} is an integer, it denotes the index "
"(starting with 0) of the first line of @var{window}'s glyph matrix to be "
"returned.  Note that if @var{window} has a header line, the line with index "
"0 is that header line.  If @var{first} is @code{nil}, the first line to be "
"considered is determined by the value of the optional argument @var{body}: "
"If @var{body} is non-@code{nil}, this means to start with the first line of "
"@var{window}'s body, skipping any header line, if present.  Otherwise, this "
"function will start with the first line of @var{window}'s glyph matrix, "
"possibly the header line."
msgstr ""

#. type: defun
#: original_texis/display.texi:2304
msgid ""
"If the optional argument @var{last} is an integer, it denotes the index of "
"the last line of @var{window}'s glyph matrix that shall be returned.  If "
"@var{last} is @code{nil}, the last line to be considered is determined by "
"the value of @var{body}: If @var{body} is non-@code{nil}, this means to use "
"the last line of @var{window}'s body, omitting @var{window}'s mode line, if "
"present.  Otherwise, this means to use the last line of @var{window} which "
"may be the mode line."
msgstr ""

#. type: defun
#: original_texis/display.texi:2314
msgid ""
"The optional argument @var{inverse}, if @code{nil}, means that the y-pixel "
"value returned for any line specifies the distance in pixels from the left "
"edge (body edge if @var{body} is non-@code{nil}) of @var{window} to the "
"right edge of the last glyph of that line.  @var{inverse} non-@code{nil} "
"means that the y-pixel value returned for any line specifies the distance in "
"pixels from the right edge of the last glyph of that line to the right edge "
"(body edge if @var{body} is non-@code{nil}) of @var{window}.  This is useful "
"for determining the amount of slack space at the end of each line."
msgstr ""

#. type: defun
#: original_texis/display.texi:2319
msgid ""
"The optional argument @var{left}, if non-@code{nil} means to return the x- "
"and y-coordinates of the lower left corner of the leftmost character on each "
"line.  This is the value that should be used for windows that mostly display "
"text from right to left."
msgstr ""

#. type: defun
#: original_texis/display.texi:2329
msgid ""
"If @var{left} is non-@code{nil} and @var{inverse} is @code{nil}, this means "
"that the y-pixel value returned for any line specifies the distance in "
"pixels from the left edge of the last (leftmost) glyph of that line to the "
"right edge (body edge if @var{body} is non-@code{nil})  of @var{window}.  If "
"@var{left} and @var{inverse} are both non-@code{nil}, the y-pixel value "
"returned for any line specifies the distance in pixels from the left edge "
"(body edge if @var{body} is non-@code{nil}) of @var{window} to the left edge "
"of the last (leftmost)  glyph of that line."
msgstr ""

#. type: defun
#: original_texis/display.texi:2335
msgid ""
"This function returns @code{nil} if the current glyph matrix of @var{window} "
"is not up-to-date which usually happens when Emacs is busy, for example, "
"when processing a command.  The value should be retrievable though when this "
"function is run from an idle timer with a delay of zero seconds."
msgstr ""

#. type: defun
#: original_texis/display.texi:2337
#, no-wrap
msgid ""
"buffer-text-pixel-size &optional buffer-or-name window from to x-limit "
"y-limit"
msgstr ""

#. type: defun
#: original_texis/display.texi:2341
msgid ""
"This is much like @code{window-text-pixel-size}, but can be used when the "
"buffer isn't shown in a window.  (@code{window-text-pixel-size} is faster "
"when it is, so this function shouldn't be used in that case.)"
msgstr ""

#. type: defun
#: original_texis/display.texi:2349
msgid ""
"@var{buffer-or-name} must specify a live buffer or the name of a live buffer "
"and defaults to the current buffer.  @var{window} must be a live window and "
"defaults to the selected one; the function will compute the text dimensions "
"as if @var{buffer} is displayed in @var{window}.  The return value is a cons "
"of the maximum pixel-width of any text line and the pixel-height of all the "
"text lines of the buffer specified by @var{buffer-or-name}."
msgstr ""

#. type: defun
#: original_texis/display.texi:2352
msgid ""
"The optional arguments @var{x-limit} and @var{y-limit} have the same meaning "
"as with @code{window-text-pixel-size}."
msgstr ""

#. type: defun
#: original_texis/display.texi:2354
#, no-wrap
msgid "string-pixel-width string"
msgstr ""

#. type: defun
#: original_texis/display.texi:2357
msgid ""
"This is a convenience function that uses @code{window-text-pixel-size} to "
"compute the width of @var{string} (in pixels)."
msgstr ""

#. type: defun
#: original_texis/display.texi:2359
#, no-wrap
msgid "line-pixel-height"
msgstr ""

#. type: defun
#: original_texis/display.texi:2363
msgid ""
"This function returns the height in pixels of the line at point in the "
"selected window.  The value includes the line spacing of the line "
"(@pxref{Line Height})."
msgstr ""

#. type: cindex
#: original_texis/display.texi:2365
#, no-wrap
msgid "grapheme cluster"
msgstr ""

#. type: defun
#: original_texis/display.texi:2366
#, no-wrap
msgid "string-glyph-split string"
msgstr ""

#. type: defun
#: original_texis/display.texi:2381
msgid ""
"When character compositions are in effect, sequence of characters can be "
"composed for display to form @dfn{grapheme clusters}, for example to display "
"accented characters, or ligatures, or Emoji, or when complex text shaping "
"requires that for some scripts.  When that happens, characters no longer map "
"in a simple way to display columns, and display layout decisions with such "
"strings, such as truncating too wide strings, can be a complex job.  This "
"function helps in performing such jobs: it splits up its argument "
"@var{string} into a list of substrings, where each substring produces a "
"single grapheme cluster that should be displayed as a unit.  Lisp programs "
"can then use this list to construct visually-valid substrings of "
"@var{string} which will look correctly on display, or compute the width of "
"any substring of @var{string} by adding the width of its constituents in the "
"returned list, etc."
msgstr ""

#. type: defun
#: original_texis/display.texi:2384
msgid ""
"For instance, if you want to display a string without the first glyph, you "
"can say:"
msgstr ""

#. type: example
#: original_texis/display.texi:2387
#, no-wrap
msgid "(apply #'insert (cdr (string-glyph-split string))))\n"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2395
msgid ""
"When a buffer is displayed with line numbers (@pxref{Display Custom,,, "
"emacs, The GNU Emacs Manual}), it is sometimes useful to know the width "
"taken for displaying the line numbers.  The following function is for Lisp "
"programs which need this information for layout calculations."
msgstr ""

#. type: defun
#: original_texis/display.texi:2396
#, no-wrap
msgid "line-number-display-width &optional pixelwise"
msgstr ""

#. type: defun
#: original_texis/display.texi:2409
msgid ""
"This function returns the width used for displaying the line numbers in the "
"selected window.  If the optional argument @var{pixelwise} is the symbol "
"@code{columns}, the return value is a float number of the frame's canonical "
"columns; if @var{pixelwise} is @code{t} or any other non-@code{nil} value, "
"the value is an integer and is measured in pixels.  If @var{pixelwise} is "
"omitted or @code{nil}, the value is the integer number of columns of the "
"font defined for the @code{line-number} face, and doesn't include the 2 "
"columns used to pad the numbers on display.  If line numbers are not "
"displayed in the selected window, the value is zero regardless of the value "
"of @var{pixelwise}.  Use @code{with-selected-window} (@pxref{Selecting "
"Windows}) if you need this information about another window."
msgstr ""

#. type: cindex
#: original_texis/display.texi:2414
#, no-wrap
msgid "line height"
msgstr ""

#. type: cindex
#: original_texis/display.texi:2415
#, no-wrap
msgid "height of a line"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2420
msgid ""
"The total height of each display line consists of the height of the contents "
"of the line, plus optional additional vertical line spacing above or below "
"the display line."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2427
msgid ""
"The height of the line contents is the maximum height of any character or "
"image on that display line, including the final newline if there is one.  (A "
"display line that is continued doesn't include a final newline.)  That is "
"the default line height, if you do nothing to specify a greater height.  (In "
"the most common case, this equals the height of the corresponding frame's "
"default font, see @ref{Frame Font}.)"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2432
msgid ""
"There are several ways to explicitly specify a larger line height, either by "
"specifying an absolute height for the display line, or by specifying "
"vertical space.  However, no matter what you specify, the actual line height "
"can never be less than the default."
msgstr ""

#. type: kindex
#: original_texis/display.texi:2433
#, no-wrap
msgid "line-height @r{(text property)}"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2437
msgid ""
"A newline can have a @code{line-height} text or overlay property that "
"controls the total height of the display line ending in that newline.  The "
"property value can be one of several forms:"
msgstr ""

#. type: table
#: original_texis/display.texi:2446
msgid ""
"If the property value is @code{t}, the newline character has no effect on "
"the displayed height of the line---the visible contents alone determine the "
"height.  The @code{line-spacing} property of the newline, described below, "
"is also ignored in this case.  This is useful for tiling small images (or "
"image slices) without adding blank areas between the images."
msgstr ""

#. type: item
#: original_texis/display.texi:2447
#, no-wrap
msgid "(@var{height} @var{total})"
msgstr ""

#. type: table
#: original_texis/display.texi:2454
msgid ""
"If the property value is a list of the form shown, that adds extra space "
"@emph{below} the display line.  First Emacs uses @var{height} as a height "
"spec to control extra space @emph{above} the line; then it adds enough space "
"@emph{below} the line to bring the total line height up to @var{total}.  In "
"this case, any value of @code{line-spacing} property for the newline is "
"ignored."
msgstr ""

#. type: cindex
#: original_texis/display.texi:2456
#, no-wrap
msgid "height spec"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2460
msgid ""
"Any other kind of property value is a height spec, which translates into a "
"number---the specified line height.  There are several ways to write a "
"height spec; here's how each of them translates into a number:"
msgstr ""

#. type: var{#1}
#: original_texis/display.texi:2462
#, no-wrap
msgid "integer"
msgstr ""

#. type: table
#: original_texis/display.texi:2464
msgid "If the height spec is a positive integer, the height value is that integer."
msgstr ""

#. type: var{#1}
#: original_texis/display.texi:2464
#, no-wrap
msgid "float"
msgstr ""

#. type: table
#: original_texis/display.texi:2467
msgid ""
"If the height spec is a float, @var{float}, the numeric height value is "
"@var{float} times the frame's default line height."
msgstr ""

#. type: item
#: original_texis/display.texi:2467
#, no-wrap
msgid "(@var{face} . @var{ratio})"
msgstr ""

#. type: table
#: original_texis/display.texi:2472
msgid ""
"If the height spec is a cons of the format shown, the numeric height is "
"@var{ratio} times the height of face @var{face}.  @var{ratio} can be any "
"type of number, or @code{nil} which means a ratio of 1.  If @var{face} is "
"@code{t}, it refers to the current face."
msgstr ""

#. type: item
#: original_texis/display.texi:2472
#, no-wrap
msgid "(nil . @var{ratio})"
msgstr ""

#. type: table
#: original_texis/display.texi:2475
msgid ""
"If the height spec is a cons of the format shown, the numeric height is "
"@var{ratio} times the height of the contents of the line."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2481
msgid ""
"Thus, any valid height spec determines the height in pixels, one way or "
"another.  If the line contents' height is less than that, Emacs adds extra "
"vertical space above the line to achieve the specified total height."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2486
msgid ""
"If you don't specify the @code{line-height} property, the line's height "
"consists of the contents' height plus the line spacing.  There are several "
"ways to specify the line spacing for different parts of Emacs text."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2494
msgid ""
"On graphical terminals, you can specify the line spacing for all lines in a "
"frame, using the @code{line-spacing} frame parameter (@pxref{Layout "
"Parameters}).  However, if the default value of @code{line-spacing} is "
"non-@code{nil}, it overrides the frame's @code{line-spacing} parameter.  An "
"integer specifies the number of pixels put below lines.  A floating-point "
"number specifies the spacing relative to the frame's default line height."
msgstr ""

#. type: vindex
#: original_texis/display.texi:2495
#, no-wrap
msgid "line-spacing"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2501
msgid ""
"You can specify the line spacing for all lines in a buffer via the "
"buffer-local @code{line-spacing} variable.  An integer specifies the number "
"of pixels put below lines.  A floating-point number specifies the spacing "
"relative to the default frame line height.  This overrides line spacings "
"specified for the frame."
msgstr ""

#. type: kindex
#: original_texis/display.texi:2502
#, no-wrap
msgid "line-spacing @r{(text property)}"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2510
msgid ""
"Finally, a newline can have a @code{line-spacing} text or overlay property "
"that can enlarge the default frame line spacing and the buffer local "
"@code{line-spacing} variable: if its value is larger than the buffer or "
"frame defaults, that larger value is used instead, for the display line "
"ending in that newline (unless the newline also has the @code{line-height} "
"property whose value is one of the special values which cause "
"@code{line-spacing} to be ignored, see above)."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2516
msgid ""
"One way or another, these mechanisms specify a Lisp value for the spacing of "
"each line.  The value is a height spec, and it translates into a Lisp value "
"as described above.  However, in this case the numeric height value "
"specifies the line spacing, rather than the line height."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2518
msgid "On text terminals, the line spacing cannot be altered."
msgstr ""

#. type: cindex
#: original_texis/display.texi:2521
#, no-wrap
msgid "faces"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2527
msgid ""
"A @dfn{face} is a collection of graphical attributes for displaying text: "
"font, foreground color, background color, optional underlining, etc.  Faces "
"control how Emacs displays text in buffers, as well as other parts of the "
"frame such as the mode line."
msgstr ""

#. type: cindex
#: original_texis/display.texi:2528
#, no-wrap
msgid "anonymous face"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2535
msgid ""
"One way to represent a face is as a property list of attributes, like "
"@code{(:foreground \"red\" :weight bold)}.  Such a list is called an "
"@dfn{anonymous face}.  For example, you can assign an anonymous face as the "
"value of the @code{face} text property, and Emacs will display the "
"underlying text with the specified attributes.  @xref{Special Properties}."
msgstr ""

#. type: cindex
#: original_texis/display.texi:2536
#, no-wrap
msgid "face name"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2543
msgid ""
"More commonly, a face is referred to via a @dfn{face name}: a Lisp symbol "
"associated with a set of face attributes@footnote{For backward "
"compatibility, you can also use a string to specify a face name; that is "
"equivalent to a Lisp symbol with the same name.}.  Named faces are defined "
"using the @code{defface} macro (@pxref{Defining Faces}).  Emacs comes with "
"several standard named faces (@pxref{Basic Faces})."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2547
msgid ""
"Some parts of Emacs require named faces (e.g., the functions documented in "
"@ref{Attribute Functions}).  Unless otherwise stated, we will use the term "
"@dfn{face} to refer only to named faces."
msgstr ""

#. type: defun
#: original_texis/display.texi:2548
#, no-wrap
msgid "facep object"
msgstr ""

#. type: defun
#: original_texis/display.texi:2552
msgid ""
"This function returns a non-@code{nil} value if @var{object} is a named "
"face: a Lisp symbol or string which serves as a face name.  Otherwise, it "
"returns @code{nil}."
msgstr ""

#. type: subsection
#: original_texis/display.texi:2569 original_texis/display.texi:2571
#: original_texis/display.texi:2572
#, no-wrap
msgid "Face Attributes"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:2569
msgid "What is in a face?"
msgstr ""

#. type: subsection
#: original_texis/display.texi:2569 original_texis/display.texi:2857
#: original_texis/display.texi:2858
#, no-wrap
msgid "Defining Faces"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:2569
msgid "How to define a face."
msgstr ""

#. type: node
#: original_texis/display.texi:2569 original_texis/display.texi:3050
#, no-wrap
msgid "Attribute Functions"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:2569
msgid "Functions to examine and set face attributes."
msgstr ""

#. type: subsection
#: original_texis/display.texi:2569 original_texis/display.texi:3317
#: original_texis/display.texi:3318
#, no-wrap
msgid "Displaying Faces"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:2569
msgid "How Emacs combines the faces specified for a character."
msgstr ""

#. type: subsection
#: original_texis/display.texi:2569 original_texis/display.texi:3386
#: original_texis/display.texi:3387
#, no-wrap
msgid "Face Remapping"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:2569
msgid "Remapping faces to alternative definitions."
msgstr ""

#. type: node
#: original_texis/display.texi:2569 original_texis/display.texi:3516
#, no-wrap
msgid "Face Functions"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:2569
msgid "How to define and examine faces."
msgstr ""

#. type: node
#: original_texis/display.texi:2569 original_texis/display.texi:3572
#, no-wrap
msgid "Auto Faces"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:2569
msgid "Hook for automatic face assignment."
msgstr ""

#. type: subsection
#: original_texis/display.texi:2569 original_texis/display.texi:3613
#: original_texis/display.texi:3614
#, no-wrap
msgid "Basic Faces"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:2569
msgid "Faces that are defined by default."
msgstr ""

#. type: subsection
#: original_texis/display.texi:2569 original_texis/display.texi:3697
#: original_texis/display.texi:3698
#, no-wrap
msgid "Font Selection"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:2569
msgid "Finding the best available font for a face."
msgstr ""

#. type: node
#: original_texis/display.texi:2569 original_texis/display.texi:3807
#, no-wrap
msgid "Font Lookup"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:2569
msgid "Looking up the names of available fonts and information about them."
msgstr ""

#. type: subsection
#: original_texis/display.texi:2569 original_texis/display.texi:3866
#: original_texis/display.texi:3867
#, no-wrap
msgid "Fontsets"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:2569
msgid "A fontset is a collection of fonts that handle a range of character sets."
msgstr ""

#. type: node
#: original_texis/display.texi:2569 original_texis/display.texi:4047
#, no-wrap
msgid "Low-Level Font"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:2569
msgid "Lisp representation for character display fonts."
msgstr ""

#. type: cindex
#: original_texis/display.texi:2573
#, no-wrap
msgid "face attributes"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2578
msgid ""
"@dfn{Face attributes} determine the visual appearance of a face.  The "
"following table lists all the face attributes, their possible values, and "
"their effects."
msgstr ""

#. type: cindex
#: original_texis/display.texi:2579
#, no-wrap
msgid "unspecified, face attribute value"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2587
msgid ""
"Apart from the values given below, each face attribute can have the value "
"@code{unspecified}.  This special value means that the face doesn't specify "
"that attribute directly.  An @code{unspecified} attribute tells Emacs to "
"refer instead to a parent face (see the description @code{:inherit} "
"attribute below); or, failing that, to an underlying face (@pxref{Displaying "
"Faces}).  (However, @code{unspecified} is not a valid value in "
"@code{defface}.)"
msgstr ""

#. type: cindex
#: original_texis/display.texi:2588
#, no-wrap
msgid "reset, face attribute value"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2592
msgid ""
"A face attribute can also have the value @code{reset}.  This special value "
"stands for the value of the corresponding attribute of the @code{default} "
"face."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2595
msgid ""
"The @code{default} face must explicitly specify all attributes, and cannot "
"use the special value @code{reset}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2599
msgid ""
"Some of these attributes are meaningful only on certain kinds of displays.  "
"If your display cannot handle a certain attribute, the attribute is ignored."
msgstr ""

#. type: item
#: original_texis/display.texi:2601 original_texis/display.texi:4097
#, no-wrap
msgid ":family"
msgstr ""

#. type: table
#: original_texis/display.texi:2606
msgid ""
"Font family name (a string).  @xref{Fonts,,, emacs, The GNU Emacs Manual}, "
"for more information about font families.  The function "
"@code{font-family-list} (see below) returns a list of available family "
"names."
msgstr ""

#. type: itemx
#: original_texis/display.texi:2607 original_texis/display.texi:4098
#, no-wrap
msgid ":foundry"
msgstr ""

#. type: table
#: original_texis/display.texi:2611
msgid ""
"The name of the @dfn{font foundry} for the font family specified by the "
"@code{:family} attribute (a string).  @xref{Fonts,,, emacs, The GNU Emacs "
"Manual}."
msgstr ""

#. type: item
#: original_texis/display.texi:2612 original_texis/display.texi:4101
#: original_texis/display.texi:7333
#, no-wrap
msgid ":width"
msgstr ""

#. type: table
#: original_texis/display.texi:2618
msgid ""
"Relative character width.  This should be one of the symbols "
"@code{ultra-condensed}, @code{extra-condensed}, @code{condensed}, "
"@code{semi-condensed}, @code{normal}, @code{regular}, @code{medium}, "
"@code{semi-expanded}, @code{expanded}, @code{extra-expanded}, or "
"@code{ultra-expanded}."
msgstr ""

#. type: item
#: original_texis/display.texi:2619 original_texis/display.texi:7327
#, no-wrap
msgid ":height"
msgstr ""

#. type: table
#: original_texis/display.texi:2622
msgid ""
"The height of the font.  In the simplest case, this is an integer in units "
"of 1/10 point."
msgstr ""

#. type: table
#: original_texis/display.texi:2631
msgid ""
"The value can also be floating point or a function, which specifies the "
"height relative to an @dfn{underlying face} (@pxref{Displaying Faces}).  A "
"floating-point value specifies the amount by which to scale the height of "
"the underlying face.  A function value is called with one argument, the "
"height of the underlying face, and returns the height of the new face.  If "
"the function is passed an integer argument, it must return an integer."
msgstr ""

#. type: table
#: original_texis/display.texi:2634
msgid ""
"The height of the default face must be specified using an integer; floating "
"point and function values are not allowed."
msgstr ""

#. type: itemx
#: original_texis/display.texi:2635 original_texis/display.texi:4099
#, no-wrap
msgid ":weight"
msgstr ""

#. type: table
#: original_texis/display.texi:2643
msgid ""
"Font weight---one of the symbols (from densest to faintest)  "
"@code{ultra-bold}, @code{extra-bold}, @code{bold}, @code{semi-bold}, "
"@code{normal}, @code{semi-light}, @code{light}, @code{extra-light}, or "
"@code{ultra-light}.  On text terminals which support variable-brightness "
"text, any weight greater than normal is displayed as extra bright, and any "
"weight less than normal is displayed as half-bright."
msgstr ""

#. type: cindex
#: original_texis/display.texi:2644
#, no-wrap
msgid "italic text"
msgstr ""

#. type: itemx
#: original_texis/display.texi:2645 original_texis/display.texi:4100
#, no-wrap
msgid ":slant"
msgstr ""

#. type: table
#: original_texis/display.texi:2650
msgid ""
"Font slant---one of the symbols @code{italic}, @code{oblique}, "
"@code{normal}, @code{reverse-italic}, or @code{reverse-oblique}.  On text "
"terminals that support variable-brightness text, slanted text is displayed "
"as half-bright."
msgstr ""

#. type: item
#: original_texis/display.texi:2651
#, no-wrap
msgid ":foreground"
msgstr ""

#. type: table
#: original_texis/display.texi:2656
msgid ""
"Foreground color, a string.  The value can be a system-defined color name, "
"or a hexadecimal color specification.  @xref{Color Names}.  On "
"black-and-white displays, certain shades of gray are implemented by stipple "
"patterns."
msgstr ""

#. type: item
#: original_texis/display.texi:2657
#, no-wrap
msgid ":distant-foreground"
msgstr ""

#. type: table
#: original_texis/display.texi:2665
msgid ""
"Alternative foreground color, a string.  This is like @code{:foreground} but "
"the color is only used as a foreground when the background color is near to "
"the foreground that would have been used.  This is useful for example when "
"marking text (i.e., the region face).  If the text has a foreground that is "
"visible with the region face, that foreground is used.  If the foreground is "
"near the region face background, @code{:distant-foreground} is used instead "
"so the text is readable."
msgstr ""

#. type: item
#: original_texis/display.texi:2666
#, no-wrap
msgid ":background"
msgstr ""

#. type: table
#: original_texis/display.texi:2669
msgid ""
"Background color, a string.  The value can be a system-defined color name, "
"or a hexadecimal color specification.  @xref{Color Names}."
msgstr ""

#. type: cindex
#: original_texis/display.texi:2670
#, no-wrap
msgid "underlined text"
msgstr ""

#. type: item
#: original_texis/display.texi:2671
#, no-wrap
msgid ":underline"
msgstr ""

#. type: table
#: original_texis/display.texi:2674
msgid ""
"Whether or not characters should be underlined, and in what way.  The "
"possible values of the @code{:underline} attribute are:"
msgstr ""

#. type: item
#: original_texis/display.texi:2676 original_texis/display.texi:2717
#: original_texis/display.texi:4553 original_texis/display.texi:8713
#: original_texis/display.texi:8753 original_texis/display.texi:8924
#, no-wrap
msgid "nil"
msgstr ""

#. type: table
#: original_texis/display.texi:2678
msgid "Don't underline."
msgstr ""

#. type: table
#: original_texis/display.texi:2681
msgid "Underline with the foreground color of the face."
msgstr ""

#. type: var{#1}
#: original_texis/display.texi:2682 original_texis/display.texi:2723
#, no-wrap
msgid "color"
msgstr ""

#. type: table
#: original_texis/display.texi:2684
msgid "Underline in color @var{color}, a string specifying a color."
msgstr ""

#. type: code{#1}
#: original_texis/display.texi:2685
#, no-wrap
msgid "(:color @var{color} :style @var{style} :position @var{position})"
msgstr ""

#. type: table
#: original_texis/display.texi:2695
msgid ""
"@var{color} is either a string, or the symbol @code{foreground-color}, "
"meaning the foreground color of the face.  Omitting the attribute "
"@code{:color} means to use the foreground color of the face.  @var{style} "
"should be a symbol @code{line} or @code{wave}, meaning to use a straight or "
"wavy line.  Omitting the attribute @code{:style} means to use a straight "
"line.  @var{position}, if non-@code{nil}, means to display the underline at "
"the descent of the text, instead of at the baseline level.  If it is a "
"number, then it specifies the amount of pixels above the descent to display "
"the underline."
msgstr ""

#. type: cindex
#: original_texis/display.texi:2697
#, no-wrap
msgid "overlined text"
msgstr ""

#. type: item
#: original_texis/display.texi:2698
#, no-wrap
msgid ":overline"
msgstr ""

#. type: table
#: original_texis/display.texi:2703
msgid ""
"Whether or not characters should be overlined, and in what color.  If the "
"value is @code{t}, overlining uses the foreground color of the face.  If the "
"value is a string, overlining uses that color.  The value @code{nil} means "
"do not overline."
msgstr ""

#. type: cindex
#: original_texis/display.texi:2704
#, no-wrap
msgid "strike-through text"
msgstr ""

#. type: item
#: original_texis/display.texi:2705
#, no-wrap
msgid ":strike-through"
msgstr ""

#. type: table
#: original_texis/display.texi:2708
msgid ""
"Whether or not characters should be strike-through, and in what color.  The "
"value is used like that of @code{:overline}."
msgstr ""

#. type: cindex
#: original_texis/display.texi:2709
#, no-wrap
msgid "2D box"
msgstr ""

#. type: cindex
#: original_texis/display.texi:2710
#, no-wrap
msgid "3D box"
msgstr ""

#. type: item
#: original_texis/display.texi:2711
#, no-wrap
msgid ":box"
msgstr ""

#. type: table
#: original_texis/display.texi:2715
msgid ""
"Whether or not a box should be drawn around characters, its color, the width "
"of the box lines, and 3D appearance.  Here are the possible values of the "
"@code{:box} attribute, and what they mean:"
msgstr ""

#. type: table
#: original_texis/display.texi:2719
msgid "Don't draw a box."
msgstr ""

#. type: table
#: original_texis/display.texi:2722
msgid "Draw a box with lines of width 1, in the foreground color."
msgstr ""

#. type: table
#: original_texis/display.texi:2725
msgid "Draw a box with lines of width 1, in color @var{color}."
msgstr ""

#. type: code{#1}
#: original_texis/display.texi:2726
#, no-wrap
msgid ""
"(:line-width (@var{vwidth} . @var{hwidth}) :color @var{color} :style "
"@var{style})"
msgstr ""

#. type: table
#: original_texis/display.texi:2729
msgid ""
"You can explicitly specify all aspects of the box with a plist on this "
"form.  Any element in this plist can be omitted."
msgstr ""

#. type: table
#: original_texis/display.texi:2738
msgid ""
"The values of @var{vwidth} and @var{hwidth} specify respectively the width "
"of the vertical and horizontal lines to draw; they default to (1 . 1).  A "
"negative horizontal or vertical width @minus{}@var{n} means to draw a line "
"of width @var{n} that occupies the space of the underlying text, thus "
"avoiding any increase in the character height or width. For simplification "
"the width could be specified with only a single number @var{n} instead of a "
"list, such case is equivalent to @code{((abs @var{n}) . @var{n})}."
msgstr ""

#. type: table
#: original_texis/display.texi:2743
msgid ""
"The value of @var{color} specifies the color to draw with.  The default is "
"the background color of the face for 3D boxes and @code{flat-button}, and "
"the foreground color of the face for other boxes."
msgstr ""

#. type: table
#: original_texis/display.texi:2749
msgid ""
"The value of @var{style} specifies whether to draw a 3D box.  If it is "
"@code{released-button}, the box looks like a 3D button that is not being "
"pressed.  If it is @code{pressed-button}, the box looks like a 3D button "
"that is being pressed.  If it is @code{nil}, @code{flat-button} or omitted, "
"a plain 2D box is used."
msgstr ""

#. type: table
#: original_texis/display.texi:2755
msgid ""
"If you use the @code{:box} face attribute on strings displayed instead of "
"buffer text via the @code{display} text property, special considerations "
"might apply if the surrounding buffer text also has the @code{:box} face "
"attribute.  @xref{Replacing Specs}."
msgstr ""

#. type: item
#: original_texis/display.texi:2756
#, no-wrap
msgid ":inverse-video"
msgstr ""

#. type: table
#: original_texis/display.texi:2759
msgid ""
"Whether or not characters should be displayed in inverse video.  The value "
"should be @code{t} (yes) or @code{nil} (no)."
msgstr ""

#. type: item
#: original_texis/display.texi:2760
#, no-wrap
msgid ":stipple"
msgstr ""

#. type: table
#: original_texis/display.texi:2762
msgid "The background stipple, a bitmap."
msgstr ""

#. type: table
#: original_texis/display.texi:2766
msgid ""
"The value can be a string; that should be the name of a file containing "
"external-format X bitmap data.  The file is found in the directories listed "
"in the variable @code{x-bitmap-file-path}."
msgstr ""

#. type: table
#: original_texis/display.texi:2774
msgid ""
"Alternatively, the value can specify the bitmap directly, with a list of the "
"form @code{(@var{width} @var{height} @var{data})}.  Here, @var{width} and "
"@var{height} specify the size in pixels, and @var{data} is a string "
"containing the raw bits of the bitmap, row by row.  Each row occupies "
"@math{(@var{width} + 7) / 8} consecutive bytes in the string (which should "
"be a unibyte string for best results).  This means that each row always "
"occupies at least one whole byte."
msgstr ""

#. type: table
#: original_texis/display.texi:2776
msgid "If the value is @code{nil}, that means use no stipple pattern."
msgstr ""

#. type: table
#: original_texis/display.texi:2779
msgid ""
"Normally you do not need to set the stipple attribute, because it is used "
"automatically to handle certain shades of gray."
msgstr ""

#. type: item
#: original_texis/display.texi:2780
#, no-wrap
msgid ":font"
msgstr ""

#. type: table
#: original_texis/display.texi:2786
msgid ""
"The font used to display the face.  Its value should be a font object or a "
"fontset.  If it is a font object, it specifies the font to be used by the "
"face for displaying ASCII characters.  @xref{Low-Level Font}, for "
"information about font objects, font specs, and font entities.  "
"@xref{Fontsets}, for information about fontsets."
msgstr ""

#. type: anchor{#1}
#: original_texis/display.texi:2799
msgid "face-font-attribute"
msgstr ""

#. type: table
#: original_texis/display.texi:2799
msgid ""
"When specifying this attribute using @code{set-face-attribute} or "
"@code{set-face-font} (@pxref{Attribute Functions}), you may also supply a "
"font spec, a font entity, or a string.  Emacs converts such values to an "
"appropriate font object, and stores that font object as the actual attribute "
"value.  If you specify a string, the contents of the string should be a font "
"name (@pxref{Fonts,,, emacs, The GNU Emacs Manual}); if the font name is an "
"XLFD containing wildcards, Emacs chooses the first font matching those "
"wildcards.  Specifying this attribute also changes the values of the "
"@code{:family}, @code{:foundry}, @code{:width}, @code{:height}, "
"@code{:weight}, and @code{:slant} attributes."
msgstr ""

#. type: cindex
#: original_texis/display.texi:2800
#, no-wrap
msgid "inheritance, for faces"
msgstr ""

#. type: item
#: original_texis/display.texi:2801
#, no-wrap
msgid ":inherit"
msgstr ""

#. type: table
#: original_texis/display.texi:2810
msgid ""
"The name of a face from which to inherit attributes, or a list of face "
"names.  Attributes from inherited faces are merged into the face like an "
"underlying face would be, with higher priority than underlying faces "
"(@pxref{Displaying Faces}).  If the face to inherit from is "
"@code{unspecified}, it is treated the same as @code{nil}, since Emacs never "
"merges @code{:inherit} attributes.  If a list of faces is used, attributes "
"from faces earlier in the list override those from later faces."
msgstr ""

#. type: item
#: original_texis/display.texi:2811
#, no-wrap
msgid ":extend"
msgstr ""

#. type: table
#: original_texis/display.texi:2825
msgid ""
"Whether or not this face will be extended beyond end of line and will affect "
"the display of the empty space between the end of line and the edge of the "
"window.  The value should be @code{t} to display the empty space between end "
"of line and edge of the window using this face, or @code{nil} to not use "
"this face for the space between the end of the line and the edge of the "
"window.  When Emacs merges several faces for displaying the empty space "
"beyond end of line, only those faces with @code{:extend} non-@code{nil} will "
"be merged.  By default, only a small number of faces, notably, "
"@code{region}, have this attribute set.  This attribute is different from "
"the others in that when a theme doesn't specify an explicit value for a "
"face, the value from the original face definition by @code{defface} is "
"inherited (@pxref{Defining Faces})."
msgstr ""

#. type: table
#: original_texis/display.texi:2833
msgid ""
"Some modes, like @code{hl-line-mode}, use a face with an @code{:extend} "
"property to mark the entire current line.  Note, however, that Emacs will "
"always allow you to move point after the final character in a buffer, and if "
"the buffer ends with a newline character, point can be placed on what is "
"seemingly a line at the end of the buffer---but Emacs can't highlight that "
"``line'', because it doesn't really exist."
msgstr ""

#. type: defun
#: original_texis/display.texi:2835
#, no-wrap
msgid "font-family-list &optional frame"
msgstr ""

#. type: defun
#: original_texis/display.texi:2839
msgid ""
"This function returns a list of available font family names.  The optional "
"argument @var{frame} specifies the frame on which the text is to be "
"displayed; if it is @code{nil}, the selected frame is used."
msgstr ""

#. type: defopt
#: original_texis/display.texi:2841
#, no-wrap
msgid "underline-minimum-offset"
msgstr ""

#. type: defopt
#: original_texis/display.texi:2844
msgid ""
"This variable specifies the minimum distance between the baseline and the "
"underline, in pixels, when displaying underlined text."
msgstr ""

#. type: defopt
#: original_texis/display.texi:2846
#, no-wrap
msgid "x-bitmap-file-path"
msgstr ""

#. type: defopt
#: original_texis/display.texi:2849
msgid ""
"This variable specifies a list of directories for searching for bitmap "
"files, for the @code{:stipple} attribute."
msgstr ""

#. type: defun
#: original_texis/display.texi:2851
#, no-wrap
msgid "bitmap-spec-p object"
msgstr ""

#. type: defun
#: original_texis/display.texi:2855
msgid ""
"This returns @code{t} if @var{object} is a valid bitmap specification, "
"suitable for use with @code{:stipple} (see above).  It returns @code{nil} "
"otherwise."
msgstr ""

#. type: cindex
#: original_texis/display.texi:2859
#, no-wrap
msgid "defining faces"
msgstr ""

#. type: cindex
#: original_texis/display.texi:2861
#, no-wrap
msgid "face spec"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2868
msgid ""
"The usual way to define a face is through the @code{defface} macro.  This "
"macro associates a face name (a symbol) with a default @dfn{face spec}.  A "
"face spec is a construct which specifies what attributes a face should have "
"on any given terminal; for example, a face spec might specify one foreground "
"color on high-color terminals, and a different foreground color on low-color "
"terminals."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2873
msgid ""
"People are sometimes tempted to create a variable whose value is a face "
"name.  In the vast majority of cases, this is not necessary; the usual "
"procedure is to define a face with @code{defface}, and then use its name "
"directly."
msgstr ""

#. type: cindex
#: original_texis/display.texi:2874
#, no-wrap
msgid "face (non-removability of)"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2878
msgid ""
"Note that once you have defined a face (usually with @code{defface}), you "
"cannot later undefine this face safely, except by restarting Emacs."
msgstr ""

#. type: defmac
#: original_texis/display.texi:2879
#, no-wrap
msgid "defface face spec doc [keyword value]@dots{}"
msgstr ""

#. type: defmac
#: original_texis/display.texi:2886
msgid ""
"This macro declares @var{face} as a named face whose default face spec is "
"given by @var{spec}.  You should not quote the symbol @var{face}, and it "
"should not end in @samp{-face} (that would be redundant).  The argument "
"@var{doc} is a documentation string for the face.  The additional "
"@var{keyword} arguments have the same meanings as in @code{defgroup} and "
"@code{defcustom} (@pxref{Common Keywords})."
msgstr ""

#. type: defmac
#: original_texis/display.texi:2889
msgid "If @var{face} already has a default face spec, this macro does nothing."
msgstr ""

#. type: defmac
#: original_texis/display.texi:2898
msgid ""
"The default face spec determines @var{face}'s appearance when no "
"customizations are in effect (@pxref{Customization}).  If @var{face} has "
"already been customized (via Custom themes or via customizations read from "
"the init file), its appearance is determined by the custom face spec(s), "
"which override the default face spec @var{spec}.  However, if the "
"customizations are subsequently removed, the appearance of @var{face} will "
"again be determined by its default face spec."
msgstr ""

#. type: cindex
#: original_texis/display.texi:2899
#, no-wrap
msgid "@code{eval-defun}, and @code{defface} forms"
msgstr ""

#. type: cindex
#: original_texis/display.texi:2900
#, no-wrap
msgid "@code{eval-last-sexp}, and @code{defface} forms"
msgstr ""

#. type: defmac
#: original_texis/display.texi:2906
msgid ""
"As an exception, if you evaluate a @code{defface} form with @kbd{C-M-x} "
"(@code{eval-defun}) or with @kbd{C-x C-e} (@code{eval-last-sexp}) in Emacs "
"Lisp mode, a special feature of these commands overrides any custom face "
"specs on the face, causing the face to reflect exactly what the "
"@code{defface} says."
msgstr ""

#. type: defmac
#: original_texis/display.texi:2910
msgid ""
"The @var{spec} argument is a @dfn{face spec}, which states how the face "
"should appear on different kinds of terminals.  It should be an alist whose "
"elements each have the form"
msgstr ""

#. type: example
#: original_texis/display.texi:2913
#, no-wrap
msgid "(@var{display} . @var{plist})\n"
msgstr ""

#. type: defmac
#: original_texis/display.texi:2920
msgid ""
"@var{display} specifies a class of terminals (see below).  @var{plist} is a "
"property list of face attributes and their values, specifying how the face "
"appears on such terminals.  For backward compatibility, you can also write "
"an element as @code{(@var{display} @var{plist})}."
msgstr ""

#. type: defmac
#: original_texis/display.texi:2926
msgid ""
"The @var{display} part of an element of @var{spec} determines which "
"terminals the element matches.  If more than one element of @var{spec} "
"matches a given terminal, the first element that matches is the one used for "
"that terminal.  There are three possibilities for @var{display}:"
msgstr ""

#. type: item
#: original_texis/display.texi:2928 original_texis/display.texi:3630
#, no-wrap
msgid "default"
msgstr ""

#. type: table
#: original_texis/display.texi:2933
msgid ""
"This element of @var{spec} doesn't match any terminal; instead, it specifies "
"defaults that apply to all terminals.  This element, if used, must be the "
"first element of @var{spec}.  Each of the following elements can override "
"any or all of these defaults."
msgstr ""

#. type: table
#: original_texis/display.texi:2938
msgid ""
"This element of @var{spec} matches all terminals.  Therefore, any subsequent "
"elements of @var{spec} are never used.  Normally @code{t} is used in the "
"last (or only) element of @var{spec}."
msgstr ""

#. type: table
#: original_texis/display.texi:2945
msgid ""
"If @var{display} is a list, each element should have the form "
"@code{(@var{characteristic} @var{value}@dots{})}.  Here @var{characteristic} "
"specifies a way of classifying terminals, and the @var{value}s are possible "
"classifications which @var{display} should apply to.  Here are the possible "
"values of @var{characteristic}:"
msgstr ""

#. type: item
#: original_texis/display.texi:2947 original_texis/display.texi:7725
#, no-wrap
msgid "type"
msgstr ""

#. type: table
#: original_texis/display.texi:2953
msgid ""
"The kind of window system the terminal uses---either @code{graphic} (any "
"graphics-capable display), @code{x}, @code{pc} (for the MS-DOS console), "
"@code{w32} (for MS Windows 9X/NT/2K/XP), @code{haiku} (for Haiku), "
"@code{pgtk} (for pure GTK), or @code{tty} (a non-graphics-capable display).  "
"@xref{Window Systems, window-system}."
msgstr ""

#. type: item
#: original_texis/display.texi:2954
#, no-wrap
msgid "class"
msgstr ""

#. type: table
#: original_texis/display.texi:2957
msgid ""
"What kinds of colors the terminal supports---either @code{color}, "
"@code{grayscale}, or @code{mono}."
msgstr ""

#. type: item
#: original_texis/display.texi:2958
#, no-wrap
msgid "background"
msgstr ""

#. type: table
#: original_texis/display.texi:2960
msgid "The kind of background---either @code{light} or @code{dark}."
msgstr ""

#. type: item
#: original_texis/display.texi:2961
#, no-wrap
msgid "min-colors"
msgstr ""

#. type: table
#: original_texis/display.texi:2965
msgid ""
"An integer that represents the minimum number of colors the terminal should "
"support.  This matches a terminal if its @code{display-color-cells} value is "
"at least the specified integer."
msgstr ""

#. type: item
#: original_texis/display.texi:2966
#, no-wrap
msgid "supports"
msgstr ""

#. type: table
#: original_texis/display.texi:2971
msgid ""
"Whether or not the terminal can display the face attributes given in "
"@var{value}@dots{} (@pxref{Face Attributes}).  @xref{Display Face Attribute "
"Testing}, for more information on exactly how this testing is done."
msgstr ""

#. type: table
#: original_texis/display.texi:2979
msgid ""
"If an element of @var{display} specifies more than one @var{value} for a "
"given @var{characteristic}, any of those values is acceptable.  If "
"@var{display} has more than one element, each element should specify a "
"different @var{characteristic}; then @emph{each} characteristic of the "
"terminal must match one of the @var{value}s specified for it in "
"@var{display}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:2984
msgid "For example, here's the definition of the standard face @code{highlight}:"
msgstr ""

#. type: example
#: original_texis/display.texi:3000
#, no-wrap
msgid ""
"(defface highlight\n"
"  '((((class color) (min-colors 88) (background light))\n"
"     :background \"darkseagreen2\")\n"
"    (((class color) (min-colors 88) (background dark))\n"
"     :background \"darkolivegreen\")\n"
"    (((class color) (min-colors 16) (background light))\n"
"     :background \"darkseagreen2\")\n"
"    (((class color) (min-colors 16) (background dark))\n"
"     :background \"darkolivegreen\")\n"
"    (((class color) (min-colors 8))\n"
"     :background \"green\" :foreground \"black\")\n"
"    (t :inverse-video t))\n"
"  \"Basic face for highlighting.\"\n"
"  :group 'basic-faces)\n"
msgstr ""

#. type: kindex
#: original_texis/display.texi:3002
#, no-wrap
msgid "face-defface-spec @r{(face symbol property)}"
msgstr ""

#. type: kindex
#: original_texis/display.texi:3003
#, no-wrap
msgid "saved-face @r{(face symbol property)}"
msgstr ""

#. type: kindex
#: original_texis/display.texi:3004
#, no-wrap
msgid "customized-face @r{(face symbol property)}"
msgstr ""

#. type: kindex
#: original_texis/display.texi:3005
#, no-wrap
msgid "theme-face @r{(face symbol property)}"
msgstr ""

#. type: kindex
#: original_texis/display.texi:3006
#, no-wrap
msgid "face-documentation @r{(face symbol property)}"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3016
msgid ""
"Internally, Emacs stores each face's default spec in its "
"@code{face-defface-spec} symbol property (@pxref{Symbol Properties}).  The "
"@code{saved-face} property stores any face spec saved by the user using the "
"customization buffer; the @code{customized-face} property stores the face "
"spec customized for the current session, but not saved; and the "
"@code{theme-face} property stores an alist associating the active "
"customization settings and Custom themes with the face specs for that face.  "
"The face's documentation string is stored in the @code{face-documentation} "
"property."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3024
msgid ""
"Normally, a face is declared just once, using @code{defface}, and any "
"further changes to its appearance are applied using the Customize framework "
"(e.g., via the Customize user interface or via the @code{custom-set-faces} "
"function; @pxref{Applying Customizations}), or by face remapping "
"(@pxref{Face Remapping}).  In the rare event that you need to change a face "
"spec directly from Lisp, you can use the @code{face-spec-set} function."
msgstr ""

#. type: defun
#: original_texis/display.texi:3025
#, no-wrap
msgid "face-spec-set face spec &optional spec-type"
msgstr ""

#. type: defun
#: original_texis/display.texi:3029
msgid ""
"This function applies @var{spec} as a face spec for @code{face}.  @var{spec} "
"should be a face spec, as described in the above documentation for "
"@code{defface}."
msgstr ""

#. type: defun
#: original_texis/display.texi:3032
msgid ""
"This function also defines @var{face} as a valid face name if it is not "
"already one, and (re)calculates its attributes on existing frames."
msgstr ""

#. type: cindex
#: original_texis/display.texi:3033
#, no-wrap
msgid "override spec @r{(for a face)}"
msgstr ""

#. type: defun
#: original_texis/display.texi:3048
msgid ""
"The optional argument @var{spec-type} determines which spec to set.  If it "
"is omitted or @code{nil} or @code{face-override-spec}, this function sets "
"the @dfn{override spec}, which overrides face specs on @var{face} of all the "
"other types mentioned below.  This is useful when calling this function "
"outside of Custom code.  If @var{spec-type} is @code{customized-face} or "
"@code{saved-face}, this function sets the customized spec or the saved "
"custom spec, respectively.  If it is @code{face-defface-spec}, this function "
"sets the default face spec (the same one set by @code{defface}).  If it is "
"@code{reset}, this function clears out all customization specs and override "
"specs from @var{face} (in this case, the value of @var{spec} is ignored).  "
"The effect of any other value of @var{spec-type} on the face specs is "
"reserved for internal use, but the function will still define @var{face} "
"itself and recalculate its attributes, as described above."
msgstr ""

#. type: subsection
#: original_texis/display.texi:3051
#, no-wrap
msgid "Face Attribute Functions"
msgstr ""

#. type: cindex
#: original_texis/display.texi:3052
#, no-wrap
msgid "face attributes, access and modification"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3056
msgid ""
"This section describes functions for directly accessing and modifying the "
"attributes of a named face."
msgstr ""

#. type: defun
#: original_texis/display.texi:3057
#, no-wrap
msgid "face-attribute face attribute &optional frame inherit"
msgstr ""

#. type: defun
#: original_texis/display.texi:3061
msgid ""
"This function returns the value of the @var{attribute} attribute for "
"@var{face} on @var{frame}.  @xref{Face Attributes}, for the supported "
"attributes."
msgstr ""

#. type: defun
#: original_texis/display.texi:3070
msgid ""
"If @var{frame} is omitted or @code{nil}, that means the selected frame "
"(@pxref{Input Focus}).  If @var{frame} is @code{t}, this function returns "
"the value of the specified attribute for newly-created frames, i.e.@: the "
"value of the attribute before applying the face spec in the face's "
"@code{defface} definition (@pxref{Defining Faces}) or the spec set by "
"@code{face-spec-set}.  This default value of @var{attribute} is normally "
"@code{unspecified}, unless you have specified some other value using "
"@code{set-face-attribute}; see below."
msgstr ""

#. type: defun
#: original_texis/display.texi:3080
msgid ""
"If @var{inherit} is @code{nil}, only attributes directly defined by "
"@var{face} are considered, so the return value may be @code{unspecified}, or "
"a relative value.  If @var{inherit} is non-@code{nil}, @var{face}'s "
"definition of @var{attribute} is merged with the faces specified by its "
"@code{:inherit} attribute; however the return value may still be "
"@code{unspecified} or relative.  If @var{inherit} is a face or a list of "
"faces, then the result is further merged with that face (or faces), until it "
"becomes specified and absolute."
msgstr ""

#. type: defun
#: original_texis/display.texi:3085
msgid ""
"To ensure that the return value is always specified and absolute, use a "
"value of @code{default} for @var{inherit}; this will resolve any unspecified "
"or relative values by merging with the @code{default} face (which is always "
"completely specified)."
msgstr ""

#. type: defun
#: original_texis/display.texi:3087
msgid "For example,"
msgstr ""

#. type: example
#: original_texis/display.texi:3091
#, no-wrap
msgid ""
"(face-attribute 'bold :weight)\n"
"     @result{} bold\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:3095
#, no-wrap
msgid "face-attribute-relative-p attribute value"
msgstr ""

#. type: defun
#: original_texis/display.texi:3101
msgid ""
"This function returns non-@code{nil} if @var{value}, when used as the value "
"of the face attribute @var{attribute}, is relative.  This means it would "
"modify, rather than completely override, any value that comes from a "
"subsequent face in the face list or that is inherited from another face."
msgstr ""

#. type: defun
#: original_texis/display.texi:3104
msgid ""
"@code{unspecified} is a relative value for all attributes.  For "
"@code{:height}, floating point and function values are also relative."
msgstr ""

#. type: defun
#: original_texis/display.texi:3106
msgid "For example:"
msgstr ""

#. type: example
#: original_texis/display.texi:3110
#, no-wrap
msgid ""
"(face-attribute-relative-p :height 2.0)\n"
"     @result{} t\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:3113
#, no-wrap
msgid "face-all-attributes face &optional frame"
msgstr ""

#. type: defun
#: original_texis/display.texi:3125
msgid ""
"This function returns an alist of attributes of @var{face}.  The elements of "
"the result are name-value pairs of the form @w{@code{(@var{attr-name} "
". @var{attr-value})}}.  Optional argument @var{frame} specifies the frame "
"whose definition of @var{face} to return; if omitted or @code{nil}, the "
"returned value describes the default attributes of @var{face} for newly "
"created frames, i.e.@: the values these attributes have before applying the "
"face spec in the face's @code{defface} definition or the spec set by "
"@code{face-spec-set}.  These default values of the attributes are normally "
"@code{unspecified}, unless you have specified some other value using "
"@code{set-face-attribute}; see below."
msgstr ""

#. type: defun
#: original_texis/display.texi:3127
#, no-wrap
msgid "merge-face-attribute attribute value1 value2"
msgstr ""

#. type: defun
#: original_texis/display.texi:3132
msgid ""
"If @var{value1} is a relative value for the face attribute @var{attribute}, "
"returns it merged with the underlying value @var{value2}; otherwise, if "
"@var{value1} is an absolute value for the face attribute @var{attribute}, "
"returns @var{value1} unchanged."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3139
msgid ""
"Normally, Emacs uses the face specs of each face to automatically calculate "
"its attributes on each frame (@pxref{Defining Faces}).  The function "
"@code{set-face-attribute} can override this calculation by directly "
"assigning attributes to a face, either on a specific frame or for all "
"frames.  This function is mostly intended for internal usage."
msgstr ""

#. type: defun
#: original_texis/display.texi:3140
#, no-wrap
msgid "set-face-attribute face frame &rest arguments"
msgstr ""

#. type: defun
#: original_texis/display.texi:3145
msgid ""
"This function sets one or more attributes of @var{face} for @var{frame}.  "
"The attributes specified in this way override the face spec(s) belonging to "
"@var{face}.  @xref{Face Attributes}, for the supported attributes."
msgstr ""

#. type: defun
#: original_texis/display.texi:3149
msgid ""
"The extra arguments @var{arguments} specify the attributes to set, and the "
"values for them.  They should consist of alternating attribute names (such "
"as @code{:family} or @code{:underline}) and values.  Thus,"
msgstr ""

#. type: example
#: original_texis/display.texi:3152
#, no-wrap
msgid "(set-face-attribute 'foo nil :weight 'bold :slant 'italic)\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:3157
msgid ""
"sets the attribute @code{:weight} to @code{bold} and the attribute "
"@code{:slant} to @code{italic}."
msgstr ""

#. type: defun
#: original_texis/display.texi:3163
msgid ""
"If @var{frame} is @code{t}, this function sets the default attributes for "
"newly created frames; they will effectively override the attribute values "
"specified by @code{defface}.  If @var{frame} is @code{nil}, this function "
"sets the attributes for all existing frames, as well as for newly created "
"frames."
msgstr ""

#. type: defun
#: original_texis/display.texi:3174
msgid ""
"To @emph{reset} the value of an attribute, that is, to indicate that the "
"face doesn't by itself specify a value for the attribute, use the special "
"value @code{unspecified} (@emph{not} @code{nil}!@:) for the attribute, and "
"set the @var{frame} argument to @code{t}, in addition to the call with "
"@var{frame} set to @code{nil}.  This is because the default attributes for "
"newly created frames are merged with the face's spec in @code{defface} when "
"a new frame is created, and so having @code{unspecified} in the default "
"attributes for new frames will be unable to override @code{defface}; the "
"special call to this function as described above will arrange for "
"@code{defface} to be overridden."
msgstr ""

#. type: defun
#: original_texis/display.texi:3186
msgid ""
"Note that the attribute-value pairs are evaluated in the order they are "
"specified, with the exception of the @code{:family} and @code{:foundry} "
"attributes, which are evaluated first.  This means that if a certain "
"attribute is specified more than once, only the last value will be used.  It "
"also means that in some cases a different order of attributes will produce "
"different results.  For example, when @code{:weight} is placed before "
"@code{:font}, the weight value is applied to the current font of the face, "
"and might be rounded to the closest available weight of that font, whereas "
"when @code{:font} is placed before @code{:weight} the weight value is "
"applied to the specified font."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3194
msgid ""
"The following commands and functions mostly provide compatibility with old "
"versions of Emacs.  They work by calling @code{set-face-attribute}.  Values "
"of @code{t} and @code{nil} (or omitted) for their @var{frame} argument are "
"handled just like @code{set-face-attribute} and @code{face-attribute}.  The "
"commands read their arguments using the minibuffer, if called interactively."
msgstr ""

#. type: deffn
#: original_texis/display.texi:3195
#, no-wrap
msgid "Command set-face-foreground face color &optional frame"
msgstr ""

#. type: deffnx
#: original_texis/display.texi:3196
#, no-wrap
msgid "Command set-face-background face color &optional frame"
msgstr ""

#. type: deffn
#: original_texis/display.texi:3199
msgid ""
"These set the @code{:foreground} attribute (or @code{:background} attribute, "
"respectively) of @var{face} to @var{color}."
msgstr ""

#. type: deffn
#: original_texis/display.texi:3201
#, no-wrap
msgid "Command set-face-stipple face pattern &optional frame"
msgstr ""

#. type: deffn
#: original_texis/display.texi:3204
msgid "This sets the @code{:stipple} attribute of @var{face} to @var{pattern}."
msgstr ""

#. type: deffn
#: original_texis/display.texi:3206
#, no-wrap
msgid "Command set-face-font face font &optional frame"
msgstr ""

#. type: deffn
#: original_texis/display.texi:3215
msgid ""
"Change the font-related attributes of @var{face} to those of @var{font} (a "
"string or a font object).  @xref{face-font-attribute}, for the supported "
"formats of the @var{font} argument.  This function sets the attribute "
"@code{:font} of the face, and indirectly also the @code{:family}, "
"@code{:foundry}, @code{:width}, @code{:height}, @code{:weight}, and "
"@code{:slant} attributes, as defined by the font.  If @var{frame} is "
"non-@code{nil}, only change the attributes on the specified frame."
msgstr ""

#. type: defun
#: original_texis/display.texi:3217
#, no-wrap
msgid "set-face-bold face bold-p &optional frame"
msgstr ""

#. type: defun
#: original_texis/display.texi:3220
msgid ""
"This sets the @code{:weight} attribute of @var{face} to @var{normal} if "
"@var{bold-p} is @code{nil}, and to @var{bold} otherwise."
msgstr ""

#. type: defun
#: original_texis/display.texi:3222
#, no-wrap
msgid "set-face-italic face italic-p &optional frame"
msgstr ""

#. type: defun
#: original_texis/display.texi:3225
msgid ""
"This sets the @code{:slant} attribute of @var{face} to @var{normal} if "
"@var{italic-p} is @code{nil}, and to @var{italic} otherwise."
msgstr ""

#. type: deffn
#: original_texis/display.texi:3227
#, no-wrap
msgid "Command set-face-underline face underline &optional frame"
msgstr ""

#. type: deffn
#: original_texis/display.texi:3230
msgid "This sets the @code{:underline} attribute of @var{face} to @var{underline}."
msgstr ""

#. type: deffn
#: original_texis/display.texi:3232
#, no-wrap
msgid "Command set-face-inverse-video face inverse-video-p &optional frame"
msgstr ""

#. type: deffn
#: original_texis/display.texi:3235
msgid ""
"This sets the @code{:inverse-video} attribute of @var{face} to "
"@var{inverse-video-p}."
msgstr ""

#. type: deffn
#: original_texis/display.texi:3237
#, no-wrap
msgid "Command invert-face face &optional frame"
msgstr ""

#. type: deffn
#: original_texis/display.texi:3239
msgid "This swaps the foreground and background colors of face @var{face}."
msgstr ""

#. type: deffn
#: original_texis/display.texi:3241
#, no-wrap
msgid "Command set-face-extend face extend &optional frame"
msgstr ""

#. type: deffn
#: original_texis/display.texi:3244
msgid "This sets the @code{:extend} attribute of @var{face} to @var{extend}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3258
msgid ""
"The following functions examine the attributes of a face.  They mostly "
"provide compatibility with old versions of Emacs.  If you don't specify "
"@var{frame}, they refer to the selected frame; @code{t} refers to the "
"default data for new frames.  They return @code{unspecified} if the face "
"doesn't define any value for that attribute.  If @var{inherit} is "
"@code{nil}, only an attribute directly defined by the face is returned.  If "
"@var{inherit} is non-@code{nil}, any faces specified by its @code{:inherit} "
"attribute are considered as well, and if @var{inherit} is a face or a list "
"of faces, then they are also considered, until a specified attribute is "
"found.  To ensure that the return value is always specified, use a value of "
"@code{default} for @var{inherit}."
msgstr ""

#. type: defun
#: original_texis/display.texi:3259
#, no-wrap
msgid "face-font face &optional frame character"
msgstr ""

#. type: defun
#: original_texis/display.texi:3262
msgid "This function returns the name of the font used by the specified @var{face}."
msgstr ""

#. type: defun
#: original_texis/display.texi:3268
msgid ""
"If the optional argument @var{frame} is specified, it returns the name of "
"the font of @var{face} for that frame; @var{frame} defaults to the selected "
"frame if it is @code{nil} or omitted.  If @var{frame} is @code{t}, the "
"function reports on the font defaults for @var{face} to be used for new "
"frames."
msgstr ""

#. type: defun
#: original_texis/display.texi:3273
msgid ""
"By default, the returned font is for displaying ASCII characters, but if "
"@var{frame} is anything but @code{t}, and the optional third argument "
"@var{character} is supplied, the function returns the font name used by "
"@var{face} for that character."
msgstr ""

#. type: defun
#: original_texis/display.texi:3275
#, no-wrap
msgid "face-foreground face &optional frame inherit"
msgstr ""

#. type: defunx
#: original_texis/display.texi:3276
#, no-wrap
msgid "face-background face &optional frame inherit"
msgstr ""

#. type: defun
#: original_texis/display.texi:3280
msgid ""
"These functions return the foreground color (or background color, "
"respectively) of face @var{face}, as a string.  If the color is unspecified, "
"they return @code{nil}."
msgstr ""

#. type: defun
#: original_texis/display.texi:3282
#, no-wrap
msgid "face-stipple face &optional frame inherit"
msgstr ""

#. type: defun
#: original_texis/display.texi:3285
msgid ""
"This function returns the name of the background stipple pattern of face "
"@var{face}, or @code{nil} if it doesn't have one."
msgstr ""

#. type: defun
#: original_texis/display.texi:3287
#, no-wrap
msgid "face-bold-p face &optional frame inherit"
msgstr ""

#. type: defun
#: original_texis/display.texi:3292
msgid ""
"This function returns a non-@code{nil} value if the @code{:weight} attribute "
"of @var{face} is bolder than normal (i.e., one of @code{semi-bold}, "
"@code{bold}, @code{extra-bold}, or @code{ultra-bold}).  Otherwise, it "
"returns @code{nil}."
msgstr ""

#. type: defun
#: original_texis/display.texi:3294
#, no-wrap
msgid "face-italic-p face &optional frame inherit"
msgstr ""

#. type: defun
#: original_texis/display.texi:3298
msgid ""
"This function returns a non-@code{nil} value if the @code{:slant} attribute "
"of @var{face} is @code{italic} or @code{oblique}, and @code{nil} otherwise."
msgstr ""

#. type: defun
#: original_texis/display.texi:3300
#, no-wrap
msgid "face-underline-p face &optional frame inherit"
msgstr ""

#. type: defun
#: original_texis/display.texi:3303
msgid ""
"This function returns non-@code{nil} if face @var{face} specifies a "
"non-@code{nil} @code{:underline} attribute."
msgstr ""

#. type: defun
#: original_texis/display.texi:3305
#, no-wrap
msgid "face-inverse-video-p face &optional frame inherit"
msgstr ""

#. type: defun
#: original_texis/display.texi:3308
msgid ""
"This function returns non-@code{nil} if face @var{face} specifies a "
"non-@code{nil} @code{:inverse-video} attribute."
msgstr ""

#. type: defun
#: original_texis/display.texi:3310
#, no-wrap
msgid "face-extend-p face &optional frame inherit"
msgstr ""

#. type: defun
#: original_texis/display.texi:3314
msgid ""
"This function returns non-@code{nil} if face @var{face} specifies a "
"non-@code{nil} @code{:extend} attribute.  The @var{inherit} argument is "
"passed to @code{face-attribute}."
msgstr ""

#. type: cindex
#: original_texis/display.texi:3319
#, no-wrap
msgid "displaying faces"
msgstr ""

#. type: cindex
#: original_texis/display.texi:3320
#, no-wrap
msgid "face merging"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3328
msgid ""
"When Emacs displays a given piece of text, the visual appearance of the text "
"may be determined by faces drawn from different sources.  If these various "
"sources together specify more than one face for a particular character, "
"Emacs merges the attributes of the various faces.  Here is the order in "
"which Emacs merges the faces, from highest to lowest priority:"
msgstr ""

#. type: itemize
#: original_texis/display.texi:3333
msgid ""
"If the text consists of a special glyph, the glyph can specify a particular "
"face.  @xref{Glyphs}."
msgstr ""

#. type: itemize
#: original_texis/display.texi:3338
msgid ""
"If the text lies within an active region, Emacs highlights it using the "
"@code{region} face.  @xref{Standard Faces,,, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: itemize
#: original_texis/display.texi:3346
msgid ""
"If the text lies within an overlay with a non-@code{nil} @code{face} "
"property, Emacs applies the face(s) specified by that property.  If the "
"overlay has a @code{mouse-face} property and the mouse is near enough to the "
"overlay, Emacs applies the face or face attributes specified by the "
"@code{mouse-face} property instead.  @xref{Overlay Properties}."
msgstr ""

#. type: itemize
#: original_texis/display.texi:3349
msgid ""
"When multiple overlays cover the same character, an overlay with higher "
"priority overrides those with lower priority.  @xref{Overlays}."
msgstr ""

#. type: itemize
#: original_texis/display.texi:3355
msgid ""
"If the text contains a @code{face} or @code{mouse-face} property, Emacs "
"applies the specified faces and face attributes.  @xref{Special "
"Properties}.  (This is how Font Lock mode faces are applied.  @xref{Font "
"Lock Mode}.)"
msgstr ""

#. type: itemize
#: original_texis/display.texi:3362
msgid ""
"If the text lies within the mode line of the selected window, Emacs applies "
"the @code{mode-line} face.  For the mode line of a non-selected window, "
"Emacs applies the @code{mode-line-inactive} face.  For a header line, Emacs "
"applies the @code{header-line} face.  For a tab line, Emacs applies the "
"@code{tab-line} face."
msgstr ""

#. type: itemize
#: original_texis/display.texi:3373
msgid ""
"If the text comes from an overlay string via @code{before-string} or "
"@code{after-string} properties (@pxref{Overlay Properties}), or from a "
"display string (@pxref{Other Display Specs}), and the string doesn't contain "
"a @code{face} or @code{mouse-face} property, or these properties leave some "
"face attributes undefined, but the buffer text affected by the "
"overlay/display property does define a face or those attributes, Emacs "
"applies the face attributes of the ``underlying'' buffer text.  Note that "
"this is so even if the overlay or display string is displayed in the display "
"margins (@pxref{Display Margins})."
msgstr ""

#. type: itemize
#: original_texis/display.texi:3377
msgid ""
"If any given attribute has not been specified during the preceding steps, "
"Emacs applies the attribute of the @code{default} face."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3385
msgid ""
"At each stage, if a face has a valid @code{:inherit} attribute, Emacs treats "
"any attribute with an @code{unspecified} value as having the corresponding "
"value drawn from the parent face(s).  @pxref{Face Attributes}.  Note that "
"the parent face(s) may also leave the attribute unspecified; in that case, "
"the attribute remains unspecified at the next level of face merging."
msgstr ""

#. type: cindex
#: original_texis/display.texi:3388
#, no-wrap
msgid "face remapping"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3394
msgid ""
"The variable @code{face-remapping-alist} is used for buffer-local or global "
"changes in the appearance of a face.  For instance, it is used to implement "
"the @code{text-scale-adjust} command (@pxref{Text Scale,,, emacs, The GNU "
"Emacs Manual})."
msgstr ""

#. type: defvar
#: original_texis/display.texi:3395
#, no-wrap
msgid "face-remapping-alist"
msgstr ""

#. type: defvar
#: original_texis/display.texi:3400
msgid ""
"The value of this variable is an alist whose elements have the form "
"@code{(@var{face} . @var{remapping})}.  This causes Emacs to display any "
"text having the face @var{face} with @var{remapping}, rather than the "
"ordinary definition of @var{face}."
msgstr ""

#. type: defvar
#: original_texis/display.texi:3408
msgid ""
"@var{remapping} may be any face spec suitable for a @code{face} text "
"property: either a face (i.e., a face name or a property list of "
"attribute/value pairs), or a list of faces.  For details, see the "
"description of the @code{face} text property in @ref{Special Properties}.  "
"@var{remapping} serves as the complete specification for the remapped "
"face---it replaces the normal definition of @var{face}, instead of modifying "
"it."
msgstr ""

#. type: defvar
#: original_texis/display.texi:3417
msgid ""
"If @code{face-remapping-alist} is buffer-local, its local value takes effect "
"only within that buffer.  If @code{face-remapping-alist} includes faces "
"applicable only to certain windows, by using the @w{@code{(:filtered "
"(:window @var{param} @var{val}) @var{spec})}}, that face takes effect only "
"in windows that match the filter conditions (@pxref{Special Properties}).  "
"To turn off face filtering temporarily, bind "
"@code{face-filters-always-match} to a non-@code{nil} value, then all face "
"filters will match any window."
msgstr ""

#. type: defvar
#: original_texis/display.texi:3424
msgid ""
"Note: face remapping is non-recursive.  If @var{remapping} references the "
"same face name @var{face}, either directly or via the @code{:inherit} "
"attribute of some other face in @var{remapping}, that reference uses the "
"normal definition of @var{face}.  For instance, if the @code{mode-line} face "
"is remapped using this entry in @code{face-remapping-alist}:"
msgstr ""

#. type: example
#: original_texis/display.texi:3427
#, no-wrap
msgid "(mode-line italic mode-line)\n"
msgstr ""

#. type: defvar
#: original_texis/display.texi:3433
msgid ""
"then the new definition of the @code{mode-line} face inherits from the "
"@code{italic} face, and the @emph{normal} (non-remapped) definition of "
"@code{mode-line} face."
msgstr ""

#. type: cindex
#: original_texis/display.texi:3435
#, no-wrap
msgid "relative remapping, faces"
msgstr ""

#. type: cindex
#: original_texis/display.texi:3436
#, no-wrap
msgid "base remapping, faces"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3444
msgid ""
"The following functions implement a higher-level interface to "
"@code{face-remapping-alist}.  Most Lisp code should use these functions "
"instead of setting @code{face-remapping-alist} directly, to avoid trampling "
"on remappings applied elsewhere.  These functions are intended for "
"buffer-local remappings, so they all make @code{face-remapping-alist} "
"buffer-local as a side-effect.  They manage @code{face-remapping-alist} "
"entries of the form"
msgstr ""

#. type: example
#: original_texis/display.texi:3447
#, no-wrap
msgid ""
"  (@var{face} @var{relative-spec-1} @var{relative-spec-2} @var{...} "
"@var{base-spec})\n"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3460
msgid ""
"where, as explained above, each of the @var{relative-spec-N} and "
"@var{base-spec} is either a face name, or a property list of attribute/value "
"pairs.  Each of the @dfn{relative remapping} entries, @var{relative-spec-N}, "
"is managed by the @code{face-remap-add-relative} and "
"@code{face-remap-remove-relative} functions; these are intended for simple "
"modifications like changing the text size.  The @dfn{base remapping} entry, "
"@var{base-spec}, has the lowest priority and is managed by the "
"@code{face-remap-set-base} and @code{face-remap-reset-base} functions; it is "
"intended for major modes to remap faces in the buffers they control."
msgstr ""

#. type: defun
#: original_texis/display.texi:3461
#, no-wrap
msgid "face-remap-add-relative face &rest specs"
msgstr ""

#. type: defun
#: original_texis/display.texi:3466
msgid ""
"This function adds @var{specs} as relative remappings for face @var{face} in "
"the current buffer.  @var{specs} should be a list where each element is "
"either a face name, or a property list of attribute/value pairs."
msgstr ""

#. type: defun
#: original_texis/display.texi:3470
msgid ""
"The return value is a Lisp object that serves as a cookie; you can pass this "
"object as an argument to @code{face-remap-remove-relative} if you need to "
"remove the remapping later."
msgstr ""

#. type: example
#: original_texis/display.texi:3475
#, no-wrap
msgid ""
";; Remap the 'escape-glyph' face into a combination\n"
";; of the 'highlight' and 'italic' faces:\n"
"(face-remap-add-relative 'escape-glyph 'highlight 'italic)\n"
"\n"
msgstr ""

#. type: example
#: original_texis/display.texi:3478
#, no-wrap
msgid ""
";; Increase the size of the 'default' face by 50%:\n"
"(face-remap-add-relative 'default :height 1.5)\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:3489
msgid ""
"Note that buffer-local face remapping does not work reliably for parent "
"faces of basic faces (@pxref{Basic Faces}).  (These are the faces that are "
"used in mode lines, header lines, and other basic decorations of windows and "
"frames.)  For instance, @code{mode-line-inactive} inherits from "
"@code{mode-line}, but remapping @code{mode-line} won't normally have the "
"desired effect on @code{mode-line-inactive}, especially if done locally for "
"some buffers.  Instead you have to remap @code{mode-line-inactive} directly."
msgstr ""

#. type: defun
#: original_texis/display.texi:3491
#, no-wrap
msgid "face-remap-remove-relative cookie"
msgstr ""

#. type: defun
#: original_texis/display.texi:3496
msgid ""
"This function removes a relative remapping previously added by "
"@code{face-remap-add-relative}.  @var{cookie} should be the Lisp object "
"returned by @code{face-remap-add-relative} when the remapping was added."
msgstr ""

#. type: defun
#: original_texis/display.texi:3498
#, no-wrap
msgid "face-remap-set-base face &rest specs"
msgstr ""

#. type: defun
#: original_texis/display.texi:3505
msgid ""
"This function sets the base remapping of @var{face} in the current buffer to "
"@var{specs}.  If @var{specs} is empty, the default base remapping is "
"restored, similar to calling @code{face-remap-reset-base} (see below); note "
"that this is different from @var{specs} containing a single value "
"@code{nil}, which has the opposite result (the global definition of "
"@var{face} is ignored)."
msgstr ""

#. type: defun
#: original_texis/display.texi:3509
msgid ""
"This overwrites the default @var{base-spec}, which inherits the global face "
"definition, so it is up to the caller to add such inheritance if so desired."
msgstr ""

#. type: defun
#: original_texis/display.texi:3511
#, no-wrap
msgid "face-remap-reset-base face"
msgstr ""

#. type: defun
#: original_texis/display.texi:3514
msgid ""
"This function sets the base remapping of @var{face} to its default value, "
"which inherits from @var{face}'s global definition."
msgstr ""

#. type: subsection
#: original_texis/display.texi:3517
#, no-wrap
msgid "Functions for Working with Faces"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3520
msgid "Here are additional functions for creating and working with faces."
msgstr ""

#. type: defun
#: original_texis/display.texi:3521
#, no-wrap
msgid "face-list"
msgstr ""

#. type: defun
#: original_texis/display.texi:3523
msgid "This function returns a list of all defined face names."
msgstr ""

#. type: cindex
#: original_texis/display.texi:3525
#, no-wrap
msgid "face number"
msgstr ""

#. type: cindex
#: original_texis/display.texi:3526
#, no-wrap
msgid "face property of face symbols"
msgstr ""

#. type: defun
#: original_texis/display.texi:3527
#, no-wrap
msgid "face-id face"
msgstr ""

#. type: defun
#: original_texis/display.texi:3536
msgid ""
"This function returns the @dfn{face number} of face @var{face}.  This is a "
"number that uniquely identifies a face at low levels within Emacs.  It is "
"seldom necessary to refer to a face by its face number.  However, functions "
"that manipulate glyphs, such as @code{make-glyph-code} and @code{glyph-face} "
"(@pxref{Glyphs}) access the face numbers internally.  Note that the face "
"number is stored as the value of the @code{face} property of the face "
"symbol, so we recommend not to set that property of a face to any value of "
"your own."
msgstr ""

#. type: defun
#: original_texis/display.texi:3538
#, no-wrap
msgid "face-documentation face"
msgstr ""

#. type: defun
#: original_texis/display.texi:3541
msgid ""
"This function returns the documentation string of face @var{face}, or "
"@code{nil} if none was specified for it."
msgstr ""

#. type: defun
#: original_texis/display.texi:3543
#, no-wrap
msgid "face-equal face1 face2 &optional frame"
msgstr ""

#. type: defun
#: original_texis/display.texi:3546
msgid ""
"This returns @code{t} if the faces @var{face1} and @var{face2} have the same "
"attributes for display."
msgstr ""

#. type: defun
#: original_texis/display.texi:3548
#, no-wrap
msgid "face-differs-from-default-p face &optional frame"
msgstr ""

#. type: defun
#: original_texis/display.texi:3551
msgid ""
"This returns non-@code{nil} if the face @var{face} displays differently from "
"the default face."
msgstr ""

#. type: cindex
#: original_texis/display.texi:3553
#, no-wrap
msgid "face alias"
msgstr ""

#. type: cindex
#: original_texis/display.texi:3554
#, no-wrap
msgid "alias, for faces"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3559
msgid ""
"A @dfn{face alias} provides an equivalent name for a face.  You can define a "
"face alias by giving the alias symbol the @code{face-alias} property, with a "
"value of the target face name.  The following example makes @code{modeline} "
"an alias for the @code{mode-line} face."
msgstr ""

#. type: example
#: original_texis/display.texi:3562
#, no-wrap
msgid "(put 'modeline 'face-alias 'mode-line)\n"
msgstr ""

#. type: defmac
#: original_texis/display.texi:3564
#, no-wrap
msgid "define-obsolete-face-alias obsolete-face current-face when"
msgstr ""

#. type: defmac
#: original_texis/display.texi:3570
msgid ""
"This macro defines @code{obsolete-face} as an alias for @var{current-face}, "
"and also marks it as obsolete, indicating that it may be removed in future.  "
"@var{when} should be a string indicating when @code{obsolete-face} was made "
"obsolete (usually a version number string)."
msgstr ""

#. type: subsection
#: original_texis/display.texi:3573
#, no-wrap
msgid "Automatic Face Assignment"
msgstr ""

#. type: cindex
#: original_texis/display.texi:3574
#, no-wrap
msgid "automatic face assignment"
msgstr ""

#. type: cindex
#: original_texis/display.texi:3575
#, no-wrap
msgid "faces, automatic choice"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3580
msgid ""
"This hook is used for automatically assigning faces to text in the buffer.  "
"It is part of the implementation of Jit-Lock mode, used by Font-Lock."
msgstr ""

#. type: defvar
#: original_texis/display.texi:3581
#, no-wrap
msgid "fontification-functions"
msgstr ""

#. type: defvar
#: original_texis/display.texi:3586
msgid ""
"This variable holds a list of functions that are called by Emacs redisplay "
"as needed, just before doing redisplay.  They are called even when Font Lock "
"Mode isn't enabled.  When Font Lock Mode is enabled, this variable usually "
"holds just one function, @code{jit-lock-function}."
msgstr ""

#. type: defvar
#: original_texis/display.texi:3590
msgid ""
"The functions are called in the order listed, with one argument, a buffer "
"position @var{pos}.  Collectively they should attempt to assign faces to the "
"text in the current buffer starting at @var{pos}."
msgstr ""

#. type: defvar
#: original_texis/display.texi:3596
msgid ""
"The functions should record the faces they assign by setting the @code{face} "
"property.  They should also add a non-@code{nil} @code{fontified} property "
"to all the text they have assigned faces to.  That property tells redisplay "
"that faces have been assigned to that text already."
msgstr ""

#. type: defvar
#: original_texis/display.texi:3602
msgid ""
"It is probably a good idea for the functions to do nothing if the character "
"after @var{pos} already has a non-@code{nil} @code{fontified} property, but "
"this is not required.  If one function overrides the assignments made by a "
"previous one, the properties after the last function finishes are the ones "
"that really matter."
msgstr ""

#. type: defvar
#: original_texis/display.texi:3605
msgid ""
"For efficiency, we recommend writing these functions so that they usually "
"assign faces to around 400 to 600 characters at each call."
msgstr ""

#. type: defvar
#: original_texis/display.texi:3611
msgid ""
"Note that, when the buffer text includes very long lines, these functions "
"are called as if they were in a @code{with-restriction} form "
"(@pxref{Narrowing}), with a "
"@code{long-line-optimizations-in-fontification-functions} label and with the "
"buffer narrowed to a portion around @var{pos}."
msgstr ""

#. type: cindex
#: original_texis/display.texi:3615
#, no-wrap
msgid "basic faces"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3622
msgid ""
"If your Emacs Lisp program needs to assign some faces to text, it is often a "
"good idea to use certain existing faces or inherit from them, rather than "
"defining entirely new faces.  This way, if other users have customized those "
"existing faces to give Emacs a certain look, your program will fit in "
"without additional customization."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3628
msgid ""
"Some of the @dfn{basic faces} defined in Emacs are listed below.  In "
"addition to these, you might want to make use of the Font Lock faces for "
"syntactic highlighting, if highlighting is not already handled by Font Lock "
"mode, or if some Font Lock faces are not in use.  @xref{Faces for Font "
"Lock}."
msgstr ""

#. type: table
#: original_texis/display.texi:3634
msgid ""
"The default face, whose attributes are all specified.  All other faces "
"implicitly inherit from it: any unspecified attribute defaults to the "
"attribute on this face (@pxref{Face Attributes})."
msgstr ""

#. type: item
#: original_texis/display.texi:3635
#, no-wrap
msgid "mode-line-active"
msgstr ""

#. type: itemx
#: original_texis/display.texi:3636
#, no-wrap
msgid "mode-line-inactive"
msgstr ""

#. type: itemx
#: original_texis/display.texi:3637
#, no-wrap
msgid "header-line"
msgstr ""

#. type: itemx
#: original_texis/display.texi:3638
#, no-wrap
msgid "tab-line"
msgstr ""

#. type: table
#: original_texis/display.texi:3640
msgid "Basic faces used for the mode line, header line, and tab line."
msgstr ""

#. type: item
#: original_texis/display.texi:3641
#, no-wrap
msgid "tool-bar"
msgstr ""

#. type: itemx
#: original_texis/display.texi:3642
#, no-wrap
msgid "tab-bar"
msgstr ""

#. type: itemx
#: original_texis/display.texi:3643
#, no-wrap
msgid "fringe"
msgstr ""

#. type: itemx
#: original_texis/display.texi:3644
#, no-wrap
msgid "scroll-bar"
msgstr ""

#. type: item
#: original_texis/display.texi:3645 original_texis/display.texi:5112
#, no-wrap
msgid "window-divider"
msgstr ""

#. type: itemx
#: original_texis/display.texi:3646
#, no-wrap
msgid "border"
msgstr ""

#. type: itemx
#: original_texis/display.texi:3647
#, no-wrap
msgid "child-frame-border"
msgstr ""

#. type: table
#: original_texis/display.texi:3649
msgid "Basic faces used for the corresponding decorations of GUI frames."
msgstr ""

#. type: item
#: original_texis/display.texi:3650
#, no-wrap
msgid "cursor"
msgstr ""

#. type: table
#: original_texis/display.texi:3652
msgid "The basic face used for the text cursor."
msgstr ""

#. type: item
#: original_texis/display.texi:3653
#, no-wrap
msgid "mouse"
msgstr ""

#. type: table
#: original_texis/display.texi:3656
msgid ""
"The basic face used for displaying mouse-sensitive text when the mouse "
"pointer is on that text."
msgstr ""

#. type: item
#: original_texis/display.texi:3657
#, no-wrap
msgid "bold"
msgstr ""

#. type: itemx
#: original_texis/display.texi:3658
#, no-wrap
msgid "italic"
msgstr ""

#. type: itemx
#: original_texis/display.texi:3659
#, no-wrap
msgid "bold-italic"
msgstr ""

#. type: itemx
#: original_texis/display.texi:3660
#, no-wrap
msgid "underline"
msgstr ""

#. type: itemx
#: original_texis/display.texi:3661
#, no-wrap
msgid "fixed-pitch"
msgstr ""

#. type: itemx
#: original_texis/display.texi:3662
#, no-wrap
msgid "fixed-pitch-serif"
msgstr ""

#. type: itemx
#: original_texis/display.texi:3663
#, no-wrap
msgid "variable-pitch"
msgstr ""

#. type: table
#: original_texis/display.texi:3667
msgid ""
"These have the attributes indicated by their names (e.g., @code{bold} has a "
"bold @code{:weight} attribute), with all other attributes unspecified (and "
"so given by @code{default})."
msgstr ""

#. type: item
#: original_texis/display.texi:3668
#, no-wrap
msgid "shadow"
msgstr ""

#. type: table
#: original_texis/display.texi:3672
msgid ""
"For dimmed-out text.  For example, it is used for the ignored part of a "
"filename in the minibuffer (@pxref{Minibuffer File,, Minibuffers for File "
"Names, emacs, The GNU Emacs Manual})."
msgstr ""

#. type: item
#: original_texis/display.texi:3673
#, no-wrap
msgid "link"
msgstr ""

#. type: itemx
#: original_texis/display.texi:3674
#, no-wrap
msgid "link-visited"
msgstr ""

#. type: table
#: original_texis/display.texi:3677
msgid ""
"For clickable text buttons that send the user to a different buffer or "
"location."
msgstr ""

#. type: item
#: original_texis/display.texi:3678
#, no-wrap
msgid "highlight"
msgstr ""

#. type: table
#: original_texis/display.texi:3682
msgid ""
"For stretches of text that should temporarily stand out.  For example, it is "
"commonly assigned to the @code{mouse-face} property for cursor highlighting "
"(@pxref{Special Properties})."
msgstr ""

#. type: item
#: original_texis/display.texi:3683
#, no-wrap
msgid "match"
msgstr ""

#. type: itemx
#: original_texis/display.texi:3684
#, no-wrap
msgid "isearch"
msgstr ""

#. type: itemx
#: original_texis/display.texi:3685
#, no-wrap
msgid "lazy-highlight"
msgstr ""

#. type: table
#: original_texis/display.texi:3689
msgid ""
"For text matching (respectively) permanent search matches, interactive "
"search matches, and lazy highlighting other matches than the current "
"interactive one."
msgstr ""

#. type: item
#: original_texis/display.texi:3690
#, no-wrap
msgid "error"
msgstr ""

#. type: itemx
#: original_texis/display.texi:3691
#, no-wrap
msgid "warning"
msgstr ""

#. type: itemx
#: original_texis/display.texi:3692
#, no-wrap
msgid "success"
msgstr ""

#. type: table
#: original_texis/display.texi:3695
msgid ""
"For text concerning errors, warnings, or successes.  For example, these are "
"used for messages in @file{*Compilation*} buffers."
msgstr ""

#. type: cindex
#: original_texis/display.texi:3699
#, no-wrap
msgid "font selection"
msgstr ""

#. type: cindex
#: original_texis/display.texi:3700
#, no-wrap
msgid "selecting a font"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3714
msgid ""
"Before Emacs can draw a character on a graphical display, it must select a "
"@dfn{font} for that character@footnote{In this context, the term @dfn{font} "
"has nothing to do with Font Lock (@pxref{Font Lock Mode}).}.  @xref{Fonts,,, "
"emacs, The GNU Emacs Manual}.  Normally, Emacs automatically chooses a font "
"based on the faces assigned to that character---specifically, the face "
"attributes @code{:family}, @code{:weight}, @code{:slant}, and @code{:width} "
"(@pxref{Face Attributes}).  The choice of font also depends on the character "
"to be displayed; some fonts can only display a limited set of characters.  "
"If no available font exactly fits the requirements, Emacs looks for the "
"@dfn{closest matching font}.  The variables in this section control how "
"Emacs makes this selection."
msgstr ""

#. type: defopt
#: original_texis/display.texi:3715
#, no-wrap
msgid "face-font-family-alternatives"
msgstr ""

#. type: defopt
#: original_texis/display.texi:3719
msgid ""
"If a given family is specified but does not exist, this variable specifies "
"alternative font families to try.  Each element should have this form:"
msgstr ""

#. type: example
#: original_texis/display.texi:3722
#, no-wrap
msgid "(@var{family} @var{alternate-families}@dots{})\n"
msgstr ""

#. type: defopt
#: original_texis/display.texi:3727
msgid ""
"If @var{family} is specified but not available, Emacs will try the other "
"families given in @var{alternate-families}, one by one, until it finds a "
"family that does exist."
msgstr ""

#. type: defopt
#: original_texis/display.texi:3729
#, no-wrap
msgid "face-font-selection-order"
msgstr ""

#. type: defopt
#: original_texis/display.texi:3737
msgid ""
"If there is no font that exactly matches all desired face attributes "
"(@code{:width}, @code{:height}, @code{:weight}, and @code{:slant}), this "
"variable specifies the order in which these attributes should be considered "
"when selecting the closest matching font.  The value should be a list "
"containing those four attribute symbols, in order of decreasing importance.  "
"The default is @code{(:width :height :weight :slant)}."
msgstr ""

#. type: defopt
#: original_texis/display.texi:3742
msgid ""
"Font selection first finds the best available matches for the first "
"attribute in the list; then, among the fonts which are best in that way, it "
"searches for the best matches in the second attribute, and so on."
msgstr ""

#. type: defopt
#: original_texis/display.texi:3748
msgid ""
"The attributes @code{:weight} and @code{:width} have symbolic values in a "
"range centered around @code{normal}.  Matches that are more extreme (farther "
"from @code{normal}) are somewhat preferred to matches that are less extreme "
"(closer to @code{normal}); this is designed to ensure that non-normal faces "
"contrast with normal ones, whenever possible."
msgstr ""

#. type: defopt
#: original_texis/display.texi:3755
msgid ""
"One example of a case where this variable makes a difference is when the "
"default font has no italic equivalent.  With the default ordering, the "
"@code{italic} face will use a non-italic font that is similar to the default "
"one.  But if you put @code{:slant} before @code{:height}, the @code{italic} "
"face will use an italic font, even if its height is not quite right."
msgstr ""

#. type: defopt
#: original_texis/display.texi:3757
#, no-wrap
msgid "face-font-registry-alternatives"
msgstr ""

#. type: defopt
#: original_texis/display.texi:3761
msgid ""
"This variable lets you specify alternative font registries to try, if a "
"given registry is specified and doesn't exist.  Each element should have "
"this form:"
msgstr ""

#. type: example
#: original_texis/display.texi:3764
#, no-wrap
msgid "(@var{registry} @var{alternate-registries}@dots{})\n"
msgstr ""

#. type: defopt
#: original_texis/display.texi:3769
msgid ""
"If @var{registry} is specified but not available, Emacs will try the other "
"registries given in @var{alternate-registries}, one by one, until it finds a "
"registry that does exist."
msgstr ""

#. type: cindex
#: original_texis/display.texi:3771
#, no-wrap
msgid "scalable fonts"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3774
msgid "Emacs can make use of scalable fonts, but by default it does not use them."
msgstr ""

#. type: defopt
#: original_texis/display.texi:3775
#, no-wrap
msgid "scalable-fonts-allowed"
msgstr ""

#. type: defopt
#: original_texis/display.texi:3779
msgid ""
"This variable controls which scalable fonts to use.  A value of @code{nil}, "
"the default, means do not use scalable fonts.  @code{t} means to use any "
"scalable font that seems appropriate for the text."
msgstr ""

#. type: defopt
#: original_texis/display.texi:3783
msgid ""
"Otherwise, the value must be a list of regular expressions.  Then a scalable "
"font is enabled for use if its name matches any regular expression in the "
"list.  For example,"
msgstr ""

#. type: example
#: original_texis/display.texi:3786
#, no-wrap
msgid "(setq scalable-fonts-allowed '(\"iso10646-1$\"))\n"
msgstr ""

#. type: defopt
#: original_texis/display.texi:3790
msgid "allows the use of scalable fonts with registry @code{iso10646-1}."
msgstr ""

#. type: defvar
#: original_texis/display.texi:3792
#, no-wrap
msgid "face-font-rescale-alist"
msgstr ""

#. type: defvar
#: original_texis/display.texi:3795
msgid ""
"This variable specifies scaling for certain faces.  Its value should be a "
"list of elements of the form"
msgstr ""

#. type: example
#: original_texis/display.texi:3798
#, no-wrap
msgid "(@var{fontname-regexp} . @var{scale-factor})\n"
msgstr ""

#. type: defvar
#: original_texis/display.texi:3805
msgid ""
"If @var{fontname-regexp} matches the font name that is about to be used, "
"this says to choose a larger similar font according to the factor "
"@var{scale-factor}.  You would use this feature to normalize the font size "
"if certain fonts are bigger or smaller than their nominal heights and widths "
"would suggest."
msgstr ""

#. type: subsection
#: original_texis/display.texi:3808
#, no-wrap
msgid "Looking Up Fonts"
msgstr ""

#. type: cindex
#: original_texis/display.texi:3809
#, no-wrap
msgid "font lookup"
msgstr ""

#. type: cindex
#: original_texis/display.texi:3810
#, no-wrap
msgid "looking up fonts"
msgstr ""

#. type: defun
#: original_texis/display.texi:3812
#, no-wrap
msgid "x-list-fonts name &optional reference-face frame maximum width"
msgstr ""

#. type: defun
#: original_texis/display.texi:3820
msgid ""
"This function returns a list of available font names that match @var{name}.  "
"@var{name} should be a string containing a font name in either the "
"Fontconfig, GTK+, or XLFD format (@pxref{Fonts,,, emacs, The GNU Emacs "
"Manual}).  Within an XLFD string, wildcard characters may be used: the "
"@samp{*} character matches any substring, and the @samp{?} character matches "
"any single character.  Case is ignored when matching font names."
msgstr ""

#. type: defun
#: original_texis/display.texi:3825
msgid ""
"If the optional arguments @var{reference-face} and @var{frame} are "
"specified, the returned list includes only fonts that are the same size as "
"@var{reference-face} (a face name) currently is on the frame @var{frame}."
msgstr ""

#. type: defun
#: original_texis/display.texi:3831
msgid ""
"The optional argument @var{maximum} sets a limit on how many fonts to "
"return.  If it is non-@code{nil}, then the return value is truncated after "
"the first @var{maximum} matching fonts.  Specifying a small value for "
"@var{maximum} can make this function much faster, in cases where many fonts "
"match the pattern."
msgstr ""

#. type: defun
#: original_texis/display.texi:3836
msgid ""
"The optional argument @var{width} specifies a desired font width.  If it is "
"non-@code{nil}, the function only returns those fonts whose characters are "
"(on average) @var{width} times as wide as @var{reference-face}."
msgstr ""

#. type: defun
#: original_texis/display.texi:3838
#, no-wrap
msgid "x-family-fonts &optional family frame"
msgstr ""

#. type: defun
#: original_texis/display.texi:3844
msgid ""
"This function returns a list describing the available fonts for family "
"@var{family} on @var{frame}.  If @var{family} is omitted or @code{nil}, this "
"list applies to all families, and therefore, it contains all available "
"fonts.  Otherwise, @var{family} must be a string; it may contain the "
"wildcards @samp{?} and @samp{*}."
msgstr ""

#. type: defun
#: original_texis/display.texi:3848
msgid ""
"The list describes the display that @var{frame} is on; if @var{frame} is "
"omitted or @code{nil}, it applies to the selected frame's display "
"(@pxref{Input Focus})."
msgstr ""

#. type: defun
#: original_texis/display.texi:3850
msgid "Each element in the list is a vector of the following form:"
msgstr ""

#. type: example
#: original_texis/display.texi:3854
#, no-wrap
msgid ""
"[@var{family} @var{width} @var{point-size} @var{weight} @var{slant}\n"
" @var{fixed-p} @var{full} @var{registry-and-encoding}]\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:3858
msgid ""
"The first five elements correspond to face attributes; if you specify these "
"attributes for a face, it will use this font."
msgstr ""

#. type: defun
#: original_texis/display.texi:3864
msgid ""
"The last three elements give additional information about the font.  "
"@var{fixed-p} is non-@code{nil} if the font is fixed-pitch.  @var{full} is "
"the full name of the font, and @var{registry-and-encoding} is a string "
"giving the registry and encoding of the font."
msgstr ""

#. type: cindex
#: original_texis/display.texi:3868
#, no-wrap
msgid "fontset"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3876
msgid ""
"A @dfn{fontset} is a list of fonts, each assigned to a range of character "
"codes.  An individual font cannot display the whole range of characters that "
"Emacs supports, but a fontset can.  Fontsets have names, just as fonts do, "
"and you can use a fontset name in place of a font name when you specify the "
"font for a frame or a face.  Here is information about defining a fontset "
"under Lisp program control."
msgstr ""

#. type: defun
#: original_texis/display.texi:3877
#, no-wrap
msgid ""
"create-fontset-from-fontset-spec fontset-spec &optional style-variant-p "
"noerror"
msgstr ""

#. type: defun
#: original_texis/display.texi:3880
msgid ""
"This function defines a new fontset according to the specification string "
"@var{fontset-spec}.  The string should have this format:"
msgstr ""

#. type: smallexample
#: original_texis/display.texi:3883
#, no-wrap
msgid "@var{fontpattern}, @r{[}@var{charset}:@var{font}@r{]@dots{}}\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:3887
msgid "Whitespace characters before and after the commas are ignored."
msgstr ""

#. type: defun
#: original_texis/display.texi:3891
msgid ""
"The first part of the string, @var{fontpattern}, should have the form of a "
"standard X font name, except that the last two fields should be "
"@samp{fontset-@var{alias}}."
msgstr ""

#. type: defun
#: original_texis/display.texi:3898
msgid ""
"The new fontset has two names, one long and one short.  The long name is "
"@var{fontpattern} in its entirety.  The short name is "
"@samp{fontset-@var{alias}}.  You can refer to the fontset by either name.  "
"If a fontset with the same name already exists, an error is signaled, unless "
"@var{noerror} is non-@code{nil}, in which case this function does nothing."
msgstr ""

#. type: defun
#: original_texis/display.texi:3904
msgid ""
"If optional argument @var{style-variant-p} is non-@code{nil}, that says to "
"create bold, italic and bold-italic variants of the fontset as well.  These "
"variant fontsets do not have a short name, only a long one, which is made by "
"altering @var{fontpattern} to indicate the bold and/or italic status."
msgstr ""

#. type: defun
#: original_texis/display.texi:3907
msgid ""
"The specification string also says which fonts to use in the fontset.  See "
"below for the details."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3914
msgid ""
"The construct @samp{@var{charset}:@var{font}} specifies which font to use "
"(in this fontset) for one particular character set.  Here, @var{charset} is "
"the name of a character set, and @var{font} is the font to use for that "
"character set.  You can use this construct any number of times in the "
"specification string."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3920
msgid ""
"For the remaining character sets, those that you don't specify explicitly, "
"Emacs chooses a font based on @var{fontpattern}: it replaces "
"@samp{fontset-@var{alias}} with a value that names one character set.  For "
"the @acronym{ASCII} character set, @samp{fontset-@var{alias}} is replaced "
"with @samp{ISO8859-1}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3926
msgid ""
"In addition, when several consecutive fields are wildcards, Emacs collapses "
"them into a single wildcard.  This is to prevent use of auto-scaled fonts.  "
"Fonts made by scaling larger fonts are not usable for editing, and scaling a "
"smaller font is not useful because it is better to use the smaller font in "
"its own size, which Emacs does."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3928
msgid "Thus if @var{fontpattern} is this,"
msgstr ""

#. type: example
#: original_texis/display.texi:3931
#, no-wrap
msgid "-*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24\n"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3935
msgid "the font specification for @acronym{ASCII} characters would be this:"
msgstr ""

#. type: example
#: original_texis/display.texi:3938
#, no-wrap
msgid "-*-fixed-medium-r-normal-*-24-*-ISO8859-1\n"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3942
msgid "and the font specification for Chinese GB2312 characters would be this:"
msgstr ""

#. type: example
#: original_texis/display.texi:3945
#, no-wrap
msgid "-*-fixed-medium-r-normal-*-24-*-gb2312*-*\n"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3951
msgid ""
"You may not have any Chinese font matching the above font specification.  "
"Most X distributions include only Chinese fonts that have @samp{song ti} or "
"@samp{fangsong ti} in the @var{family} field.  In such a case, "
"@samp{Fontset-@var{n}} can be specified as below:"
msgstr ""

#. type: smallexample
#: original_texis/display.texi:3955
#, no-wrap
msgid ""
"Emacs.Fontset-0: -*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24,\\\n"
"        chinese-gb2312:-*-*-medium-r-normal-*-24-*-gb2312*-*\n"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:3962
msgid ""
"Then, the font specifications for all but Chinese GB2312 characters have "
"@samp{fixed} in the @var{family} field, and the font specification for "
"Chinese GB2312 characters has a wild card @samp{*} in the @var{family} "
"field."
msgstr ""

#. type: defun
#: original_texis/display.texi:3963
#, no-wrap
msgid "set-fontset-font fontset characters font-spec &optional frame add"
msgstr ""

#. type: defun
#: original_texis/display.texi:3967
msgid ""
"This function modifies the existing @var{fontset} to use the font specified "
"by @var{font-spec} for displaying the specified @var{characters}."
msgstr ""

#. type: defun
#: original_texis/display.texi:3971
msgid ""
"If @var{fontset} is @code{nil}, this function modifies the fontset of the "
"selected frame or that of @var{frame} if @var{frame} is not @code{nil}."
msgstr ""

#. type: defun
#: original_texis/display.texi:3974
msgid ""
"If @var{fontset} is @code{t}, this function modifies the default fontset, "
"whose short name as a string is @samp{fontset-default}."
msgstr ""

#. type: defun
#: original_texis/display.texi:3980
msgid ""
"The @var{characters} argument can be a single character which should be "
"displayed using @var{font-spec}.  It can also be a cons cell "
"@w{@code{(@var{from} . @var{to})}}, where @var{from} and @var{to} are "
"characters.  In that case, use @var{font-spec} for all the characters in the "
"range @var{from} and @var{to} (inclusive)."
msgstr ""

#. type: defun
#: original_texis/display.texi:3983
msgid ""
"@var{characters} may be a charset symbol (@pxref{Character Sets}).  In that "
"case, use @var{font-spec} for all the characters in the charset."
msgstr ""

#. type: defun
#: original_texis/display.texi:3987
msgid ""
"@var{characters} may be a script symbol (@pxref{Character Properties, "
"char-script-table}).  In that case, use @var{font-spec} for all the "
"characters belonging to the script."
msgstr ""

#. type: defun
#: original_texis/display.texi:3991
msgid ""
"@var{characters} may be @code{nil}, which means to use @var{font-spec} for "
"any character in @var{fontset} for which no font-spec is specified."
msgstr ""

#. type: defun
#: original_texis/display.texi:3994
msgid ""
"@var{font-spec} may be a font-spec object created by the function "
"@code{font-spec} (@pxref{Low-Level Font})."
msgstr ""

#. type: defun
#: original_texis/display.texi:4000
msgid ""
"@var{font-spec} may be a cons cell @w{@code{(@var{family} "
". @var{registry})}}, where @var{family} is a family name of a font (possibly "
"including a foundry name at the head), and @var{registry} is a registry name "
"of a font (possibly including an encoding name at the tail)."
msgstr ""

#. type: defun
#: original_texis/display.texi:4002
msgid "@var{font-spec} may be a font name, a string."
msgstr ""

#. type: defun
#: original_texis/display.texi:4008
msgid ""
"@var{font-spec} may be @code{nil}, which explicitly specifies that there's "
"no font for the specified @var{characters}.  This is useful, for example, to "
"avoid expensive system-wide search for fonts for characters that have no "
"glyphs, like those from the Unicode Private Use Area (PUA)."
msgstr ""

#. type: defun
#: original_texis/display.texi:4015
msgid ""
"The optional argument @var{add}, if non-@code{nil}, specifies how to add "
"@var{font-spec} to the font specifications previously set for "
"@var{characters}.  If it is @code{prepend}, @var{font-spec} is prepended to "
"the existing specs.  If it is @code{append}, @var{font-spec} is appended.  "
"By default, @var{font-spec} overwrites the previously set font specs."
msgstr ""

#. type: defun
#: original_texis/display.texi:4019
msgid ""
"For instance, this changes the default fontset to use a font whose family "
"name is @samp{Kochi Gothic} for all characters belonging to the charset "
"@code{japanese-jisx0208}:"
msgstr ""

#. type: smallexample
#: original_texis/display.texi:4023
#, no-wrap
msgid ""
"(set-fontset-font t 'japanese-jisx0208\n"
"                  (font-spec :family \"Kochi Gothic\"))\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:4032
msgid ""
"Note that this function should generally be called from the user's init "
"files, and more generally before any of @var{characters} were displayed in "
"the current Emacs session.  That's because for some scripts, Emacs caches "
"the way they are displayed, and the cached information includes the font "
"used for them -- once these characters are displayed once, the cached font "
"will continue to be used regardless of changes in the fontsets."
msgstr ""

#. type: defun
#: original_texis/display.texi:4034
#, no-wrap
msgid "char-displayable-p char"
msgstr ""

#. type: defun
#: original_texis/display.texi:4038
msgid ""
"This function returns non-@code{nil} if Emacs ought to be able to display "
"@var{char}.  Or more precisely, if the selected frame's fontset has a font "
"to display the character set that @var{char} belongs to."
msgstr ""

#. type: defun
#: original_texis/display.texi:4041
msgid ""
"Fontsets can specify a font on a per-character basis; when the fontset does "
"that, this function's value may not be accurate."
msgstr ""

#. type: defun
#: original_texis/display.texi:4045
msgid ""
"This function may return non-@code{nil} even when there is no font "
"available, since it also checks whether the coding system for the text "
"terminal can encode the character (@pxref{Terminal I/O Encoding})."
msgstr ""

#. type: subsection
#: original_texis/display.texi:4048
#, no-wrap
msgid "Low-Level Font Representation"
msgstr ""

#. type: cindex
#: original_texis/display.texi:4049
#, no-wrap
msgid "font property"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4053
msgid ""
"Normally, it is not necessary to manipulate fonts directly.  In case you "
"need to do so, this section explains how."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4057
msgid ""
"In Emacs Lisp, fonts are represented using three different Lisp object "
"types: @dfn{font objects}, @dfn{font specs}, and @dfn{font entities}."
msgstr ""

#. type: defun
#: original_texis/display.texi:4058
#, no-wrap
msgid "fontp object &optional type"
msgstr ""

#. type: defun
#: original_texis/display.texi:4061
msgid ""
"Return @code{t} if @var{object} is a font object, font spec, or font "
"entity.  Otherwise, return @code{nil}."
msgstr ""

#. type: defun
#: original_texis/display.texi:4066
msgid ""
"The optional argument @var{type}, if non-@code{nil}, determines the exact "
"type of Lisp object to check for.  In that case, @var{type} should be one of "
"@code{font-object}, @code{font-spec}, or @code{font-entity}."
msgstr ""

#. type: cindex
#: original_texis/display.texi:4068
#, no-wrap
msgid "font object"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4072
msgid ""
"A font object is a Lisp object that represents a font that Emacs has "
"@dfn{opened}.  Font objects cannot be modified in Lisp, but they can be "
"inspected."
msgstr ""

#. type: defun
#: original_texis/display.texi:4073
#, no-wrap
msgid "font-at position &optional window string"
msgstr ""

#. type: defun
#: original_texis/display.texi:4080
msgid ""
"Return the font object that is being used to display the character at "
"position @var{position} in the window @var{window}.  If @var{window} is "
"@code{nil}, it defaults to the selected window.  If @var{string} is "
"@code{nil}, @var{position} specifies a position in the current buffer; "
"otherwise, @var{string} should be a string, and @var{position} specifies a "
"position in that string."
msgstr ""

#. type: cindex
#: original_texis/display.texi:4082
#, no-wrap
msgid "font spec"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4086
msgid ""
"A font spec is a Lisp object that contains a set of specifications that can "
"be used to find a font.  More than one font may match the specifications in "
"a font spec."
msgstr ""

#. type: defun
#: original_texis/display.texi:4087
#, no-wrap
msgid "font-spec &rest arguments"
msgstr ""

#. type: defun
#: original_texis/display.texi:4091
msgid ""
"Return a new font spec using the specifications in @var{arguments}, which "
"should come in @code{property}-@code{value} pairs.  The possible "
"specifications are as follows:"
msgstr ""

#. type: item
#: original_texis/display.texi:4093
#, no-wrap
msgid ":name"
msgstr ""

#. type: table
#: original_texis/display.texi:4096
msgid ""
"The font name (a string), in either XLFD, Fontconfig, or GTK+ format.  "
"@xref{Fonts,,, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: table
#: original_texis/display.texi:4107
msgid ""
"These have the same meanings as the face attributes of the same name.  "
"@xref{Face Attributes}.  @code{:family} and @code{:foundry} are strings, "
"while the other three are symbols.  As example values, @code{:slant} may be "
"@code{italic}, @code{:weight} may be @code{bold} and @code{:width} may be "
"@code{normal}."
msgstr ""

#. type: item
#: original_texis/display.texi:4108
#, no-wrap
msgid ":size"
msgstr ""

#. type: table
#: original_texis/display.texi:4111
msgid ""
"The font size---either a non-negative integer that specifies the pixel size, "
"or a floating-point number that specifies the point size."
msgstr ""

#. type: item
#: original_texis/display.texi:4112
#, no-wrap
msgid ":adstyle"
msgstr ""

#. type: table
#: original_texis/display.texi:4115
msgid ""
"Additional typographic style information for the font, such as @samp{sans}.  "
"The value should be a string or a symbol."
msgstr ""

#. type: cindex
#: original_texis/display.texi:4116
#, no-wrap
msgid "font registry"
msgstr ""

#. type: item
#: original_texis/display.texi:4117
#, no-wrap
msgid ":registry"
msgstr ""

#. type: table
#: original_texis/display.texi:4120
msgid ""
"The charset registry and encoding of the font, such as @samp{iso8859-1}.  "
"The value should be a string or a symbol."
msgstr ""

#. type: item
#: original_texis/display.texi:4121
#, no-wrap
msgid ":dpi"
msgstr ""

#. type: table
#: original_texis/display.texi:4124
msgid ""
"The resolution in dots per inch for which the font is designed.  The value "
"must be a non-negative number."
msgstr ""

#. type: item
#: original_texis/display.texi:4125
#, no-wrap
msgid ":spacing"
msgstr ""

#. type: table
#: original_texis/display.texi:4130
msgid ""
"The spacing of the font: proportional, dual, mono, or charcell.  The value "
"should be either an integer (0 for proportional, 90 for dual, 100 for mono, "
"110 for charcell) or a one-letter symbol (one of @code{P}, @code{D}, "
"@code{M}, or @code{C})."
msgstr ""

#. type: item
#: original_texis/display.texi:4131
#, no-wrap
msgid ":avgwidth"
msgstr ""

#. type: table
#: original_texis/display.texi:4134
msgid ""
"The average width of the font in 1/10 pixel units.  The value should be a "
"non-negative number."
msgstr ""

#. type: item
#: original_texis/display.texi:4135
#, no-wrap
msgid ":script"
msgstr ""

#. type: table
#: original_texis/display.texi:4137
msgid "The script that the font must support (a symbol)."
msgstr ""

#. type: item
#: original_texis/display.texi:4138
#, no-wrap
msgid ":lang"
msgstr ""

#. type: table
#: original_texis/display.texi:4146
msgid ""
"The language that the font should support.  The value should be a symbol "
"whose name is a two-letter ISO-639 language name.  On X, the value is "
"matched against the ``Additional Style'' field of the XLFD name of a font, "
"if it is non-empty.  On MS-Windows, fonts matching the spec are required to "
"support codepages needed for the language.  Currently, only a small set of "
"CJK languages is supported with this property: @samp{ja}, @samp{ko}, and "
"@samp{zh}."
msgstr ""

#. type: item
#: original_texis/display.texi:4147
#, no-wrap
msgid ":otf"
msgstr ""

#. type: cindex
#: original_texis/display.texi:4148
#, no-wrap
msgid "OpenType font"
msgstr ""

#. type: table
#: original_texis/display.texi:4153
msgid ""
"The font must be an OpenType font that supports these OpenType features, "
"provided Emacs is compiled with a library, such as @samp{libotf} on "
"GNU/Linux, that supports complex text layout for scripts which need that.  "
"The value must be a list of the form"
msgstr ""

#. type: smallexample
#: original_texis/display.texi:4156
#, no-wrap
msgid "@code{(@var{script-tag} @var{langsys-tag} @var{gsub} @var{gpos})}\n"
msgstr ""

#. type: table
#: original_texis/display.texi:4170
msgid ""
"where @var{script-tag} is the OpenType script tag symbol; @var{langsys-tag} "
"is the OpenType language system tag symbol, or @code{nil} to use the default "
"language system; @code{gsub} is a list of OpenType GSUB feature tag symbols, "
"or @code{nil} if none is required; and @code{gpos} is a list of OpenType "
"GPOS feature tag symbols, or @code{nil} if none is required.  If @code{gsub} "
"or @code{gpos} is a list, a @code{nil} element in that list means that the "
"font must not match any of the remaining tag symbols.  The @code{gpos} "
"element may be omitted.  For the list of OpenType script, language, and "
"feature tags, see "
"@uref{https://docs.microsoft.com/en-us/typography/opentype/spec/ttoreg, the "
"list of registered OTF tags}."
msgstr ""

#. type: item
#: original_texis/display.texi:4171
#, no-wrap
msgid ":type"
msgstr ""

#. type: cindex
#: original_texis/display.texi:4172
#, no-wrap
msgid "font backend"
msgstr ""

#. type: table
#: original_texis/display.texi:4179
msgid ""
"The symbol that specifies the @dfn{font backend} used to draw the "
"characters.  The possible values depend on the platform and on how Emacs was "
"configured at build time.  Typical values include @code{ftcrhb} and "
"@code{xfthb} on X, @code{harfbuzz} on MS-Windows, @code{ns} on GNUstep, "
"etc.  It can also be @code{nil} if left unspecified, typically in a "
"font-spec."
msgstr ""

#. type: defun
#: original_texis/display.texi:4182
#, no-wrap
msgid "font-put font-spec property value"
msgstr ""

#. type: defun
#: original_texis/display.texi:4186
msgid ""
"Set the font property @var{property} in the font-spec @var{font-spec} to "
"@var{value}.  The @var{property} can any of the ones described above."
msgstr ""

#. type: cindex
#: original_texis/display.texi:4188
#, no-wrap
msgid "font entity"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4196
msgid ""
"A font entity is a reference to a font that need not be open.  Its "
"properties are intermediate between a font object and a font spec: like a "
"font object, and unlike a font spec, it refers to a single, specific font.  "
"Unlike a font object, creating a font entity does not load the contents of "
"that font into computer memory.  Emacs may open multiple font objects of "
"different sizes from a single font entity referring to a scalable font."
msgstr ""

#. type: defun
#: original_texis/display.texi:4197
#, no-wrap
msgid "find-font font-spec &optional frame"
msgstr ""

#. type: defun
#: original_texis/display.texi:4201
msgid ""
"This function returns a font entity that best matches the font spec "
"@var{font-spec} on frame @var{frame}.  If @var{frame} is @code{nil}, it "
"defaults to the selected frame."
msgstr ""

#. type: defun
#: original_texis/display.texi:4203
#, no-wrap
msgid "list-fonts font-spec &optional frame num prefer"
msgstr ""

#. type: defun
#: original_texis/display.texi:4206
msgid ""
"This function returns a list of all font entities that match the font spec "
"@var{font-spec}."
msgstr ""

#. type: defun
#: original_texis/display.texi:4215
msgid ""
"The optional argument @var{frame}, if non-@code{nil}, specifies the frame on "
"which the fonts are to be displayed.  The optional argument @var{num}, if "
"non-@code{nil}, should be an integer that specifies the maximum length of "
"the returned list.  The optional argument @var{prefer}, if non-@code{nil}, "
"should be another font spec, which is used to control the order of the "
"returned list; the returned font entities are sorted in order of decreasing "
"closeness to that font spec."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4222
msgid ""
"If you call @code{set-face-attribute} and pass a font spec, font entity, or "
"font name string as the value of the @code{:font} attribute, Emacs opens the "
"best matching font that is available for display.  It then stores the "
"corresponding font object as the actual value of the @code{:font} attribute "
"for that face."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4226
msgid ""
"The following functions can be used to obtain information about a font.  For "
"these functions, the @var{font} argument can be a font object, a font "
"entity, or a font spec."
msgstr ""

#. type: defun
#: original_texis/display.texi:4227
#, no-wrap
msgid "font-get font property"
msgstr ""

#. type: defun
#: original_texis/display.texi:4231
msgid ""
"This function returns the value of the font property @var{property} for "
"@var{font}.  The @var{property} can any of the ones that @code{font-spec} "
"supports."
msgstr ""

#. type: defun
#: original_texis/display.texi:4239
msgid ""
"If @var{font} is a font spec and the font spec does not specify "
"@var{property}, the return value is @code{nil}.  If @var{font} is a font "
"object or font entity, the value for the @var{:script} property may be a "
"list of scripts supported by the font, and the value of the @code{:otf} "
"property is a cons of the form @w{@code{(@var{gsub} . @var{gpos})}}, where "
"@var{gsub} and @var{gpos} are lists representing OpenType features supported "
"by the font, of the form"
msgstr ""

#. type: smallexample
#: original_texis/display.texi:4242
#, no-wrap
msgid ""
"((@var{script-tag} (@var{langsys-tag} @var{feature}@dots{}) @dots{}) "
"@dots{})\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:4246
msgid "are symbols representing OpenType layout tags."
msgstr ""

#. type: defun
#: original_texis/display.texi:4251
msgid ""
"If @var{font} is a font object, the special property "
"@code{:combining-capability} is non-@code{nil} if the font backend of "
"@var{font} supports rendering of combining characters for non-OpenType "
"fonts."
msgstr ""

#. type: defun
#: original_texis/display.texi:4253
#, no-wrap
msgid "font-face-attributes font &optional frame"
msgstr ""

#. type: defun
#: original_texis/display.texi:4258
msgid ""
"This function returns a list of face attributes corresponding to "
"@var{font}.  The optional argument @var{frame} specifies the frame on which "
"the font is to be displayed.  If it is @code{nil}, the selected frame is "
"used.  The return value has the form"
msgstr ""

#. type: smallexample
#: original_texis/display.texi:4262
#, no-wrap
msgid ""
"(:family @var{family} :height @var{height} :weight @var{weight}\n"
"   :slant @var{slant} :width @var{width})\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:4268
msgid ""
"where the values of @var{family}, @var{height}, @var{weight}, @var{slant}, "
"and @var{width} are face attribute values.  Some of these key-attribute "
"pairs may be omitted from the list if they are not specified by @var{font}."
msgstr ""

#. type: defun
#: original_texis/display.texi:4270
#, no-wrap
msgid "font-xlfd-name font &optional fold-wildcards"
msgstr ""

#. type: defun
#: original_texis/display.texi:4275
msgid ""
"This function returns the XLFD (X Logical Font Descriptor), a string, "
"matching @var{font}.  @xref{Fonts,,, emacs, The GNU Emacs Manual}, for "
"information about XLFDs.  If the name is too long for an XLFD (which can "
"contain at most 255 characters), the function returns @code{nil}."
msgstr ""

#. type: defun
#: original_texis/display.texi:4278
msgid ""
"If the optional argument @var{fold-wildcards} is non-@code{nil}, consecutive "
"wildcards in the XLFD are folded into one."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4281
msgid "The following two functions return important information about a font."
msgstr ""

#. type: defun
#: original_texis/display.texi:4282
#, no-wrap
msgid "font-info name &optional frame"
msgstr ""

#. type: defun
#: original_texis/display.texi:4286
msgid ""
"This function returns information about a font specified by its @var{name}, "
"a string, as it is used on @var{frame}.  If @var{frame} is omitted or "
"@code{nil}, it defaults to the selected frame."
msgstr ""

#. type: defun
#: original_texis/display.texi:4293
msgid ""
"The value returned by the function is a vector of the form "
"@code{[@var{opened-name} @var{full-name} @var{size} @var{height} "
"@var{baseline-offset} @var{relative-compose} @var{default-ascent} "
"@var{max-width} @var{ascent} @var{descent} @var{space-width} "
"@var{average-width} @var{filename} @var{capability}]}.  Here's the "
"description of each components of this vector:"
msgstr ""

#. type: item
#: original_texis/display.texi:4295
#, no-wrap
msgid "opened-name"
msgstr ""

#. type: table
#: original_texis/display.texi:4297
msgid "The name used to open the font, a string."
msgstr ""

#. type: item
#: original_texis/display.texi:4298
#, no-wrap
msgid "full-name"
msgstr ""

#. type: table
#: original_texis/display.texi:4300
msgid "The full name of the font, a string."
msgstr ""

#. type: item
#: original_texis/display.texi:4301
#, no-wrap
msgid "size"
msgstr ""

#. type: table
#: original_texis/display.texi:4303
msgid "The pixel size of the font."
msgstr ""

#. type: item
#: original_texis/display.texi:4304
#, no-wrap
msgid "height"
msgstr ""

#. type: table
#: original_texis/display.texi:4306
msgid "The height of the font in pixels."
msgstr ""

#. type: item
#: original_texis/display.texi:4307
#, no-wrap
msgid "baseline-offset"
msgstr ""

#. type: table
#: original_texis/display.texi:4310
msgid "The offset in pixels from the @acronym{ASCII} baseline, positive upward."
msgstr ""

#. type: item
#: original_texis/display.texi:4311
#, no-wrap
msgid "relative-compose"
msgstr ""

#. type: itemx
#: original_texis/display.texi:4312
#, no-wrap
msgid "default-ascent"
msgstr ""

#. type: table
#: original_texis/display.texi:4314
msgid "Numbers controlling how to compose characters."
msgstr ""

#. type: item
#: original_texis/display.texi:4315 original_texis/display.texi:4371
#, no-wrap
msgid "max-width"
msgstr ""

#. type: table
#: original_texis/display.texi:4317 original_texis/display.texi:4373
msgid "The maximum advance width of the font."
msgstr ""

#. type: item
#: original_texis/display.texi:4318 original_texis/display.texi:4374
#, no-wrap
msgid "ascent"
msgstr ""

#. type: itemx
#: original_texis/display.texi:4319 original_texis/display.texi:4375
#, no-wrap
msgid "descent"
msgstr ""

#. type: table
#: original_texis/display.texi:4322
msgid ""
"The ascent and descent of this font.  The sum of these two numbers should be "
"equal to the value of @var{height} above."
msgstr ""

#. type: item
#: original_texis/display.texi:4323 original_texis/display.texi:4379
#, no-wrap
msgid "space-width"
msgstr ""

#. type: table
#: original_texis/display.texi:4325 original_texis/display.texi:4381
msgid "The width, in pixels, of the font's space character."
msgstr ""

#. type: item
#: original_texis/display.texi:4326 original_texis/display.texi:4382
#, no-wrap
msgid "average-width"
msgstr ""

#. type: table
#: original_texis/display.texi:4330 original_texis/display.texi:4386
msgid ""
"The average width of the font characters.  If this is zero, Emacs uses the "
"value of @var{space-width} instead, when it calculates text layout on "
"display."
msgstr ""

#. type: item
#: original_texis/display.texi:4331 original_texis/display.texi:4364
#, no-wrap
msgid "filename"
msgstr ""

#. type: table
#: original_texis/display.texi:4334 original_texis/display.texi:4367
msgid ""
"The file name of the font as a string.  This can be @code{nil} if the font "
"back-end does not provide a way to find out the font's file name."
msgstr ""

#. type: item
#: original_texis/display.texi:4335 original_texis/display.texi:4387
#, no-wrap
msgid "capability"
msgstr ""

#. type: table
#: original_texis/display.texi:4346 original_texis/display.texi:4398
msgid ""
"A list whose first element is a symbol representing the font type, one of "
"@code{x}, @code{opentype}, @code{truetype}, @code{type1}, @code{pcf}, or "
"@code{bdf}.  For OpenType fonts, the list includes 2 additional elements "
"describing the @sc{gsub} and @sc{gpos} features supported by the font.  Each "
"of these elements is a list of the form @code{((@var{script} (@var{langsys} "
"@var{feature} @dots{}) @dots{})  @dots{})}, where @var{script} is a symbol "
"representing an OpenType script tag, @var{langsys} is a symbol representing "
"an OpenType langsys tag (or @code{nil}, which stands for the default "
"langsys), and each @var{feature} is a symbol representing an OpenType "
"feature tag."
msgstr ""

#. type: defun
#: original_texis/display.texi:4349
#, no-wrap
msgid "query-font font-object"
msgstr ""

#. type: defun
#: original_texis/display.texi:4353
msgid ""
"This function returns information about a @var{font-object}.  (This is in "
"contrast to @code{font-info}, which takes the font name, a string, as its "
"argument.)"
msgstr ""

#. type: defun
#: original_texis/display.texi:4359
msgid ""
"The value returned by the function is a vector of the form @code{[@var{name} "
"@var{filename} @var{pixel-size} @var{max-width} @var{ascent} @var{descent} "
"@var{space-width} @var{average-width} @var{capability}]}.  Here's the "
"description of each components of this vector:"
msgstr ""

#. type: item
#: original_texis/display.texi:4361
#, no-wrap
msgid "name"
msgstr ""

#. type: table
#: original_texis/display.texi:4363
msgid "The font name, a string."
msgstr ""

#. type: item
#: original_texis/display.texi:4368
#, no-wrap
msgid "pixel-size"
msgstr ""

#. type: table
#: original_texis/display.texi:4370
msgid "The pixel size of the font used to open the font."
msgstr ""

#. type: table
#: original_texis/display.texi:4378
msgid ""
"The ascent and descent of this font.  The sum of these two numbers gives the "
"font height."
msgstr ""

#. type: cindex
#: original_texis/display.texi:4401
#, no-wrap
msgid "font information for layout"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4407
msgid ""
"The following four functions return size information about fonts used by "
"various faces, allowing various layout considerations in Lisp programs.  "
"These functions take face remapping into consideration, returning "
"information about the remapped face, if the face in question was remapped.  "
"@xref{Face Remapping}."
msgstr ""

#. type: defun
#: original_texis/display.texi:4408
#, no-wrap
msgid "default-font-width"
msgstr ""

#. type: defun
#: original_texis/display.texi:4412
msgid ""
"This function returns the average width in pixels of the font used by the "
"current buffer's default face, as that face is defined for the selected "
"frame."
msgstr ""

#. type: defun
#: original_texis/display.texi:4414
#, no-wrap
msgid "default-font-height"
msgstr ""

#. type: defun
#: original_texis/display.texi:4418
msgid ""
"This function returns the height in pixels of the font used by the current "
"buffer's default face, as that face is defined for the selected frame."
msgstr ""

#. type: defun
#: original_texis/display.texi:4420
#, no-wrap
msgid "window-font-width &optional window face"
msgstr ""

#. type: defun
#: original_texis/display.texi:4426
msgid ""
"This function returns the average width in pixels for the font used by "
"@var{face} in @var{window}.  The specified @var{window} must be a live "
"window.  If @code{nil} or omitted, @var{window} defaults to the selected "
"window, and @var{face} defaults to the default face in @var{window}."
msgstr ""

#. type: defun
#: original_texis/display.texi:4428
#, no-wrap
msgid "window-font-height &optional window face"
msgstr ""

#. type: defun
#: original_texis/display.texi:4434
msgid ""
"This function returns the height in pixels for the font used by @var{face} "
"in @var{window}.  The specified @var{window} must be a live window.  If "
"@code{nil} or omitted, @var{window} defaults to the selected window, and "
"@var{face} defaults to the default face in @var{window}."
msgstr ""

#. type: cindex
#: original_texis/display.texi:4438
#, no-wrap
msgid "fringes"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4443
msgid ""
"On graphical displays, Emacs draws @dfn{fringes} next to each window: thin "
"vertical strips down the sides which can display bitmaps indicating "
"truncation, continuation, horizontal scrolling, and so on."
msgstr ""

#. type: node
#: original_texis/display.texi:4451 original_texis/display.texi:4453
#, no-wrap
msgid "Fringe Size/Pos"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:4451
msgid "Specifying where to put the window fringes."
msgstr ""

#. type: subsection
#: original_texis/display.texi:4451 original_texis/display.texi:4521
#: original_texis/display.texi:4522
#, no-wrap
msgid "Fringe Indicators"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:4451
msgid "Displaying indicator icons in the window fringes."
msgstr ""

#. type: subsection
#: original_texis/display.texi:4451 original_texis/display.texi:4629
#: original_texis/display.texi:4630
#, no-wrap
msgid "Fringe Cursors"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:4451
msgid "Displaying cursors in the right fringe."
msgstr ""

#. type: subsection
#: original_texis/display.texi:4451 original_texis/display.texi:4676
#: original_texis/display.texi:4677
#, no-wrap
msgid "Fringe Bitmaps"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:4451
msgid "Specifying bitmaps for fringe indicators."
msgstr ""

#. type: node
#: original_texis/display.texi:4451 original_texis/display.texi:4780
#, no-wrap
msgid "Customizing Bitmaps"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:4451
msgid "Specifying your own bitmaps to use in the fringes."
msgstr ""

#. type: node
#: original_texis/display.texi:4451 original_texis/display.texi:4828
#, no-wrap
msgid "Overlay Arrow"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:4451
msgid "Display of an arrow to indicate position."
msgstr ""

#. type: subsection
#: original_texis/display.texi:4454
#, no-wrap
msgid "Fringe Size and Position"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4458
msgid ""
"The following buffer-local variables control the position and width of "
"fringes in windows showing that buffer."
msgstr ""

#. type: defvar
#: original_texis/display.texi:4459
#, no-wrap
msgid "fringes-outside-margins"
msgstr ""

#. type: defvar
#: original_texis/display.texi:4463
msgid ""
"The fringes normally appear between the display margins and the window "
"text.  If the value is non-@code{nil}, they appear outside the display "
"margins.  @xref{Display Margins}."
msgstr ""

#. type: defvar
#: original_texis/display.texi:4465
#, no-wrap
msgid "left-fringe-width"
msgstr ""

#. type: defvar
#: original_texis/display.texi:4469
msgid ""
"This variable, if non-@code{nil}, specifies the width of the left fringe in "
"pixels.  A value of @code{nil} means to use the left fringe width from the "
"window's frame."
msgstr ""

#. type: defvar
#: original_texis/display.texi:4471
#, no-wrap
msgid "right-fringe-width"
msgstr ""

#. type: defvar
#: original_texis/display.texi:4475
msgid ""
"This variable, if non-@code{nil}, specifies the width of the right fringe in "
"pixels.  A value of @code{nil} means to use the right fringe width from the "
"window's frame."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4480
msgid ""
"Any buffer which does not specify values for these variables uses the values "
"specified by the @code{left-fringe} and @code{right-fringe} frame parameters "
"(@pxref{Layout Parameters})."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4488
msgid ""
"The above variables actually take effect via the function "
"@code{set-window-buffer} (@pxref{Buffers and Windows}), which calls "
"@code{set-window-fringes} as a subroutine.  If you change one of these "
"variables, the fringe display is not updated in existing windows showing the "
"buffer, unless you call @code{set-window-buffer} again in each affected "
"window.  You can also use @code{set-window-fringes} to control the fringe "
"display in individual windows."
msgstr ""

#. type: defun
#: original_texis/display.texi:4489
#, no-wrap
msgid "set-window-fringes window left &optional right outside-margins persistent"
msgstr ""

#. type: defun
#: original_texis/display.texi:4492
msgid ""
"This function sets the fringe widths of window @var{window}.  If "
"@var{window} is @code{nil}, the selected window is used."
msgstr ""

#. type: defun
#: original_texis/display.texi:4498
msgid ""
"The argument @var{left} specifies the width in pixels of the left fringe, "
"and likewise @var{right} for the right fringe.  A value of @code{nil} for "
"either one stands for the default width.  If @var{outside-margins} is "
"non-@code{nil}, that specifies that fringes should appear outside of the "
"display margins."
msgstr ""

#. type: defun
#: original_texis/display.texi:4501
msgid ""
"If @var{window} is not large enough to accommodate fringes of the desired "
"width, this leaves the fringes of @var{window} unchanged."
msgstr ""

#. type: defun
#: original_texis/display.texi:4511
msgid ""
"The values specified here may be later overridden by invoking "
"@code{set-window-buffer} (@pxref{Buffers and Windows}) on @var{window} with "
"its @var{keep-margins} argument @code{nil} or omitted.  However, if the "
"optional fifth argument @var{persistent} is non-@code{nil} and the other "
"arguments are processed successfully, the values specified here "
"unconditionally survive subsequent invocations of @code{set-window-buffer}.  "
"This can be used to permanently turn off fringes in the minibuffer window, "
"consult the description of @code{set-window-scroll-bars} for an example "
"(@pxref{Scroll Bars})."
msgstr ""

#. type: defun
#: original_texis/display.texi:4513
#, no-wrap
msgid "window-fringes &optional window"
msgstr ""

#. type: defun
#: original_texis/display.texi:4518
msgid ""
"This function returns information about the fringes of a window "
"@var{window}.  If @var{window} is omitted or @code{nil}, the selected window "
"is used.  The value has the form @code{(@var{left-width} @var{right-width} "
"@var{outside-margins} @var{persistent})}."
msgstr ""

#. type: cindex
#: original_texis/display.texi:4523
#, no-wrap
msgid "fringe indicators"
msgstr ""

#. type: cindex
#: original_texis/display.texi:4524
#, no-wrap
msgid "indicators, fringe"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4529
msgid ""
"@dfn{Fringe indicators} are tiny icons displayed in the window fringe to "
"indicate truncated or continued lines, buffer boundaries, etc."
msgstr ""

#. type: defopt
#: original_texis/display.texi:4530
#, no-wrap
msgid "indicate-empty-lines"
msgstr ""

#. type: cindex
#: original_texis/display.texi:4531
#, no-wrap
msgid "fringes, and empty line indication"
msgstr ""

#. type: cindex
#: original_texis/display.texi:4532
#, no-wrap
msgid "empty lines, indicating"
msgstr ""

#. type: defopt
#: original_texis/display.texi:4537
msgid ""
"When this is non-@code{nil}, Emacs displays a special glyph in the fringe of "
"each empty line at the end of the buffer, on graphical displays.  "
"@xref{Fringes}.  This variable is automatically buffer-local in every "
"buffer."
msgstr ""

#. type: defopt
#: original_texis/display.texi:4539
#, no-wrap
msgid "indicate-buffer-boundaries"
msgstr ""

#. type: cindex
#: original_texis/display.texi:4540
#, no-wrap
msgid "buffer boundaries, indicating"
msgstr ""

#. type: defopt
#: original_texis/display.texi:4543
msgid ""
"This buffer-local variable controls how the buffer boundaries and window "
"scrolling are indicated in the window fringes."
msgstr ""

#. type: defopt
#: original_texis/display.texi:4549
msgid ""
"Emacs can indicate the buffer boundaries---that is, the first and last line "
"in the buffer---with angle icons when they appear on the screen.  In "
"addition, Emacs can display an up-arrow in the fringe to show that there is "
"text above the screen, and a down-arrow to show there is text below the "
"screen."
msgstr ""

#. type: defopt
#: original_texis/display.texi:4551
msgid "There are three kinds of basic values:"
msgstr ""

#. type: table
#: original_texis/display.texi:4555
msgid "Don't display any of these fringe icons."
msgstr ""

#. type: code{#1}
#: original_texis/display.texi:4555
#, no-wrap
msgid "left"
msgstr ""

#. type: table
#: original_texis/display.texi:4557
msgid "Display the angle icons and arrows in the left fringe."
msgstr ""

#. type: code{#1}
#: original_texis/display.texi:4557
#, no-wrap
msgid "right"
msgstr ""

#. type: table
#: original_texis/display.texi:4559
msgid "Display the angle icons and arrows in the right fringe."
msgstr ""

#. type: item
#: original_texis/display.texi:4559
#, no-wrap
msgid "any non-alist"
msgstr ""

#. type: table
#: original_texis/display.texi:4562
msgid "Display the angle icons in the left fringe and don't display the arrows."
msgstr ""

#. type: defopt
#: original_texis/display.texi:4571
msgid ""
"Otherwise the value should be an alist that specifies which fringe "
"indicators to display and where.  Each element of the alist should have the "
"form @code{(@var{indicator} . @var{position})}.  Here, @var{indicator} is "
"one of @code{top}, @code{bottom}, @code{up}, @code{down}, and @code{t} "
"(which covers all the icons not yet specified), while @var{position} is one "
"of @code{left}, @code{right} and @code{nil}."
msgstr ""

#. type: defopt
#: original_texis/display.texi:4576
msgid ""
"For example, @code{((top . left) (t . right))} places the top angle bitmap "
"in left fringe, and the bottom angle bitmap as well as both arrow bitmaps in "
"right fringe.  To show the angle bitmaps in the left fringe, and no arrow "
"bitmaps, use @code{((top .  left) (bottom . left))}."
msgstr ""

#. type: defvar
#: original_texis/display.texi:4578
#, no-wrap
msgid "fringe-indicator-alist"
msgstr ""

#. type: defvar
#: original_texis/display.texi:4585
msgid ""
"This buffer-local variable specifies the mapping from logical fringe "
"indicators to the actual bitmaps displayed in the window fringes.  The value "
"is an alist of elements @code{(@var{indicator} . @var{bitmaps})}, where "
"@var{indicator} specifies a logical indicator type and @var{bitmaps} "
"specifies the fringe bitmaps to use for that indicator."
msgstr ""

#. type: defvar
#: original_texis/display.texi:4587
msgid "Each @var{indicator} should be one of the following symbols:"
msgstr ""

#. type: item
#: original_texis/display.texi:4589
#, no-wrap
msgid "@code{truncation}, @code{continuation}."
msgstr ""

#. type: table
#: original_texis/display.texi:4591
msgid "Used for truncation and continuation lines."
msgstr ""

#. type: item
#: original_texis/display.texi:4592
#, no-wrap
msgid "@code{up}, @code{down}, @code{top}, @code{bottom}, @code{top-bottom}"
msgstr ""

#. type: table
#: original_texis/display.texi:4598
msgid ""
"Used when @code{indicate-buffer-boundaries} is non-@code{nil}: @code{up} and "
"@code{down} indicate a buffer boundary lying above or below the window edge; "
"@code{top} and @code{bottom} indicate the topmost and bottommost buffer text "
"line; and @code{top-bottom} indicates where there is just one line of text "
"in the buffer."
msgstr ""

#. type: code{#1}
#: original_texis/display.texi:4599 original_texis/display.texi:4750
#, no-wrap
msgid "empty-line"
msgstr ""

#. type: table
#: original_texis/display.texi:4602
msgid ""
"Used to indicate empty lines after the buffer end when "
"@code{indicate-empty-lines} is non-@code{nil}."
msgstr ""

#. type: code{#1}
#: original_texis/display.texi:4603
#, no-wrap
msgid "overlay-arrow"
msgstr ""

#. type: table
#: original_texis/display.texi:4608
msgid "Used for overlay arrows (@pxref{Overlay Arrow})."
msgstr ""

#. type: defvar
#: original_texis/display.texi:4618
msgid ""
"Each @var{bitmaps} value may be a list of symbols @code{(@var{left} "
"@var{right} [@var{left1} @var{right1}])}.  The @var{left} and @var{right} "
"symbols specify the bitmaps shown in the left and/or right fringe, for the "
"specific indicator.  @var{left1} and @var{right1} are specific to the "
"@code{bottom} and @code{top-bottom} indicators, and are used to indicate "
"that the last text line has no final newline.  Alternatively, @var{bitmaps} "
"may be a single symbol which is used in both left and right fringes."
msgstr ""

#. type: defvar
#: original_texis/display.texi:4622
msgid ""
"@xref{Fringe Bitmaps}, for a list of standard bitmap symbols and how to "
"define your own.  In addition, @code{nil} represents the empty bitmap (i.e., "
"an indicator that is not shown)."
msgstr ""

#. type: defvar
#: original_texis/display.texi:4627
msgid ""
"When @code{fringe-indicator-alist} has a buffer-local value, and there is no "
"bitmap defined for a logical indicator, or the bitmap is @code{t}, the "
"corresponding value from the default value of @code{fringe-indicator-alist} "
"is used."
msgstr ""

#. type: cindex
#: original_texis/display.texi:4631
#, no-wrap
msgid "fringe cursors"
msgstr ""

#. type: cindex
#: original_texis/display.texi:4632
#, no-wrap
msgid "cursor, fringe"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4638
msgid ""
"When a line is exactly as wide as the window, Emacs displays the cursor in "
"the right fringe instead of using two lines.  Different bitmaps are used to "
"represent the cursor in the fringe depending on the current buffer's cursor "
"type."
msgstr ""

#. type: defopt
#: original_texis/display.texi:4639
#, no-wrap
msgid "overflow-newline-into-fringe"
msgstr ""

#. type: defopt
#: original_texis/display.texi:4644
msgid ""
"If this is non-@code{nil}, lines exactly as wide as the window (not counting "
"the final newline character) are not continued.  Instead, when point is at "
"the end of the line, the cursor appears in the right fringe."
msgstr ""

#. type: defvar
#: original_texis/display.texi:4646
#, no-wrap
msgid "fringe-cursor-alist"
msgstr ""

#. type: defvar
#: original_texis/display.texi:4652
msgid ""
"This variable specifies the mapping from logical cursor type to the actual "
"fringe bitmaps displayed in the right fringe.  The value is an alist where "
"each element has the form @code{(@var{cursor-type} . @var{bitmap})}, which "
"means to use the fringe bitmap @var{bitmap} to display cursors of type "
"@var{cursor-type}."
msgstr ""

#. type: defvar
#: original_texis/display.texi:4659
msgid ""
"Each @var{cursor-type} should be one of @code{box}, @code{hollow}, "
"@code{bar}, @code{hbar}, or @code{hollow-small}.  The first four have the "
"same meanings as in the @code{cursor-type} frame parameter (@pxref{Cursor "
"Parameters}).  The @code{hollow-small} type is used instead of @code{hollow} "
"when the normal @code{hollow-rectangle} bitmap is too tall to fit on a "
"specific display line."
msgstr ""

#. type: defvar
#: original_texis/display.texi:4662
msgid ""
"Each @var{bitmap} should be a symbol specifying the fringe bitmap to be "
"displayed for that logical cursor type."
msgstr ""

#. type: iftex
#: original_texis/display.texi:4664
msgid "See the next subsection for details."
msgstr ""

#. type: ifnottex
#: original_texis/display.texi:4667
msgid "@xref{Fringe Bitmaps}."
msgstr ""

#. type: defvar
#: original_texis/display.texi:4674
msgid ""
"When @code{fringe-cursor-alist} has a buffer-local value, and there is no "
"bitmap defined for a cursor type, the corresponding value from the default "
"value of @code{fringes-indicator-alist} is used."
msgstr ""

#. type: cindex
#: original_texis/display.texi:4678
#, no-wrap
msgid "fringe bitmaps"
msgstr ""

#. type: cindex
#: original_texis/display.texi:4679
#, no-wrap
msgid "bitmaps, fringe"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4685
msgid ""
"The @dfn{fringe bitmaps} are the actual bitmaps which represent the logical "
"fringe indicators for truncated or continued lines, buffer boundaries, "
"overlay arrows, etc.  Each bitmap is represented by a symbol."
msgstr ""

#. type: iftex
#: original_texis/display.texi:4689
msgid ""
"These symbols are referred to by the variables @code{fringe-indicator-alist} "
"and @code{fringe-cursor-alist}, described in the previous subsections."
msgstr ""

#. type: ifnottex
#: original_texis/display.texi:4696
msgid ""
"These symbols are referred to by the variable @code{fringe-indicator-alist}, "
"which maps fringe indicators to bitmaps (@pxref{Fringe Indicators}), and the "
"variable @code{fringe-cursor-alist}, which maps fringe cursors to bitmaps "
"(@pxref{Fringe Cursors})."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4702
msgid ""
"Lisp programs can also directly display a bitmap in the left or right "
"fringe, by using a @code{display} property for one of the characters "
"appearing in the line (@pxref{Other Display Specs}).  Such a display "
"specification has the form"
msgstr ""

#. type: example
#: original_texis/display.texi:4705
#, no-wrap
msgid "(@var{fringe} @var{bitmap} [@var{face}])\n"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4720
msgid ""
"@var{fringe} is either the symbol @code{left-fringe} or "
"@code{right-fringe}.  @var{bitmap} is a symbol identifying the bitmap to "
"display.  The optional @var{face} names a face whose foreground and "
"background colors are to be used to display the bitmap, using the attributes "
"of the @code{fringe} face for colors that @var{face} didn't specify.  If "
"@var{face} is omitted, that means to use the attributes of the "
"@code{default} face for the colors which the @code{fringe} face didn't "
"specify.  For predictable results that don't depend on the attributes of the "
"@code{default} and @code{fringe} faces, we recommend you never omit "
"@var{face}, but always provide a specific face.  In particular, if you want "
"the bitmap to be always displayed in the @code{fringe} face, use "
"@code{fringe} as @var{face}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4723
msgid ""
"For instance, to display an arrow in the left fringe, using the "
"@code{warning} face, you could say something like:"
msgstr ""

#. type: lisp
#: original_texis/display.texi:4730
#, no-wrap
msgid ""
"(overlay-put\n"
" (make-overlay (point) (point))\n"
" 'before-string (propertize\n"
"                 \"x\" 'display\n"
"                 `(left-fringe right-arrow warning)))\n"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4735
msgid ""
"Here is a list of the standard fringe bitmaps defined in Emacs, and how they "
"are currently used in Emacs (via @code{fringe-indicator-alist} and "
"@code{fringe-cursor-alist}):"
msgstr ""

#. type: item
#: original_texis/display.texi:4737
#, no-wrap
msgid "@code{left-arrow}, @code{right-arrow}"
msgstr ""

#. type: table
#: original_texis/display.texi:4739
msgid "Used to indicate truncated lines."
msgstr ""

#. type: item
#: original_texis/display.texi:4740
#, no-wrap
msgid "@code{left-curly-arrow}, @code{right-curly-arrow}"
msgstr ""

#. type: table
#: original_texis/display.texi:4742
msgid "Used to indicate continued lines."
msgstr ""

#. type: item
#: original_texis/display.texi:4743
#, no-wrap
msgid "@code{right-triangle}, @code{left-triangle}"
msgstr ""

#. type: table
#: original_texis/display.texi:4745
msgid "The former is used by overlay arrows.  The latter is unused."
msgstr ""

#. type: item
#: original_texis/display.texi:4746
#, no-wrap
msgid "@code{up-arrow}, @code{down-arrow}"
msgstr ""

#. type: itemx
#: original_texis/display.texi:4747
#, no-wrap
msgid "@code{bottom-left-angle}, @code{bottom-right-angle}"
msgstr ""

#. type: itemx
#: original_texis/display.texi:4748
#, no-wrap
msgid "@code{top-left-angle}, @code{top-right-angle}"
msgstr ""

#. type: itemx
#: original_texis/display.texi:4749
#, no-wrap
msgid "@code{left-bracket}, @code{right-bracket}"
msgstr ""

#. type: table
#: original_texis/display.texi:4752
msgid "Used to indicate buffer boundaries."
msgstr ""

#. type: item
#: original_texis/display.texi:4753
#, no-wrap
msgid "@code{filled-rectangle}, @code{hollow-rectangle}"
msgstr ""

#. type: itemx
#: original_texis/display.texi:4754
#, no-wrap
msgid "@code{filled-square}, @code{hollow-square}"
msgstr ""

#. type: itemx
#: original_texis/display.texi:4755
#, no-wrap
msgid "@code{vertical-bar}, @code{horizontal-bar}"
msgstr ""

#. type: table
#: original_texis/display.texi:4757
msgid "Used for different types of fringe cursors."
msgstr ""

#. type: item
#: original_texis/display.texi:4758
#, no-wrap
msgid "@code{exclamation-mark}, @code{question-mark}"
msgstr ""

#. type: code{#1}
#: original_texis/display.texi:4759
#, no-wrap
msgid "large-circle"
msgstr ""

#. type: table
#: original_texis/display.texi:4761
msgid "Not used by core Emacs features."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4765
msgid "The next subsection describes how to define your own fringe bitmaps."
msgstr ""

#. type: defun
#: original_texis/display.texi:4766
#, no-wrap
msgid "fringe-bitmaps-at-pos &optional pos window"
msgstr ""

#. type: defun
#: original_texis/display.texi:4773
msgid ""
"This function returns the fringe bitmaps of the display line containing "
"position @var{pos} in window @var{window}.  The return value has the form "
"@code{(@var{left} @var{right} @var{ov})}, where @var{left} is the symbol for "
"the fringe bitmap in the left fringe (or @code{nil} if no bitmap), "
"@var{right} is similar for the right fringe, and @var{ov} is non-@code{nil} "
"if there is an overlay arrow in the left fringe."
msgstr ""

#. type: defun
#: original_texis/display.texi:4778
msgid ""
"The value is @code{nil} if @var{pos} is not visible in @var{window}.  If "
"@var{window} is @code{nil}, that stands for the selected window.  If "
"@var{pos} is @code{nil}, that stands for the value of point in @var{window}."
msgstr ""

#. type: subsection
#: original_texis/display.texi:4781
#, no-wrap
msgid "Customizing Fringe Bitmaps"
msgstr ""

#. type: cindex
#: original_texis/display.texi:4782
#, no-wrap
msgid "fringe bitmaps, customizing"
msgstr ""

#. type: defun
#: original_texis/display.texi:4784
#, no-wrap
msgid "define-fringe-bitmap bitmap bits &optional height width align"
msgstr ""

#. type: defun
#: original_texis/display.texi:4787
msgid ""
"This function defines the symbol @var{bitmap} as a new fringe bitmap, or "
"replaces an existing bitmap with that name."
msgstr ""

#. type: defun
#: original_texis/display.texi:4794
msgid ""
"The argument @var{bits} specifies the image to use.  It should be either a "
"string or a vector of integers, where each element (an integer) corresponds "
"to one row of the bitmap.  Each bit of an integer corresponds to one pixel "
"of the bitmap, where the low bit corresponds to the rightmost pixel of the "
"bitmap.  (Note that this order of bits is opposite of the order in XBM "
"images; @pxref{XBM Images}.)"
msgstr ""

#. type: defun
#: original_texis/display.texi:4799
msgid ""
"The height is normally the length of @var{bits}.  However, you can specify a "
"different height with non-@code{nil} @var{height}.  The width is normally 8, "
"but you can specify a different width with non-@code{nil} @var{width}.  The "
"width must be an integer between 1 and 16."
msgstr ""

#. type: defun
#: original_texis/display.texi:4804
msgid ""
"The argument @var{align} specifies the positioning of the bitmap relative to "
"the range of rows where it is used; the default is to center the bitmap.  "
"The allowed values are @code{top}, @code{center}, or @code{bottom}."
msgstr ""

#. type: defun
#: original_texis/display.texi:4810
msgid ""
"The @var{align} argument may also be a list @code{(@var{align} "
"@var{periodic})} where @var{align} is interpreted as described above.  If "
"@var{periodic} is non-@code{nil}, it specifies that the rows in @code{bits} "
"should be repeated enough times to reach the specified height."
msgstr ""

#. type: defun
#: original_texis/display.texi:4812
#, no-wrap
msgid "destroy-fringe-bitmap bitmap"
msgstr ""

#. type: defun
#: original_texis/display.texi:4817
msgid ""
"This function destroys the fringe bitmap identified by @var{bitmap}.  If "
"@var{bitmap} identifies a standard fringe bitmap, it actually restores the "
"standard definition of that bitmap, instead of eliminating it entirely."
msgstr ""

#. type: defun
#: original_texis/display.texi:4819
#, no-wrap
msgid "set-fringe-bitmap-face bitmap &optional face"
msgstr ""

#. type: defun
#: original_texis/display.texi:4823
msgid ""
"This sets the face for the fringe bitmap @var{bitmap} to @var{face}.  If "
"@var{face} is @code{nil}, it selects the @code{fringe} face.  The bitmap's "
"face controls the color to draw it in."
msgstr ""

#. type: defun
#: original_texis/display.texi:4826
msgid ""
"@var{face} is merged with the @code{fringe} face, so normally @var{face} "
"should specify only the foreground color."
msgstr ""

#. type: subsection
#: original_texis/display.texi:4829
#, no-wrap
msgid "The Overlay Arrow"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4837
msgid ""
"The @dfn{overlay arrow} is useful for directing the user's attention to a "
"particular line in a buffer.  For example, in the modes used for interface "
"to debuggers, the overlay arrow indicates the line of code about to be "
"executed.  This feature has nothing to do with @dfn{overlays} "
"(@pxref{Overlays})."
msgstr ""

#. type: defvar
#: original_texis/display.texi:4838
#, no-wrap
msgid "overlay-arrow-string"
msgstr ""

#. type: defvar
#: original_texis/display.texi:4844
msgid ""
"This variable holds the string to display to call attention to a particular "
"line, or @code{nil} if the arrow feature is not in use.  On a graphical "
"display the contents of the string are ignored if the left fringe is shown; "
"instead a glyph is displayed in the fringe area to the left of the display "
"area."
msgstr ""

#. type: defvar
#: original_texis/display.texi:4846
#, no-wrap
msgid "overlay-arrow-position"
msgstr ""

#. type: defvar
#: original_texis/display.texi:4854
msgid ""
"This variable holds a marker that indicates where to display the overlay "
"arrow.  It should point at the beginning of a line.  On a non-graphical "
"display, or when the left fringe is not shown, the arrow text appears at the "
"beginning of that line, overlaying any text that would otherwise appear.  "
"Since the arrow is usually short, and the line usually begins with "
"indentation, normally nothing significant is overwritten."
msgstr ""

#. type: defvar
#: original_texis/display.texi:4864
msgid ""
"The overlay-arrow string is displayed in any given buffer if the value of "
"@code{overlay-arrow-position} in that buffer points into that buffer.  Thus, "
"it is possible to display multiple overlay arrow strings by creating "
"buffer-local bindings of @code{overlay-arrow-position}.  However, it is "
"usually cleaner to use @code{overlay-arrow-variable-list} to achieve this "
"result."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4868
msgid ""
"You can do a similar job by creating an overlay with a @code{before-string} "
"property.  @xref{Overlay Properties}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4871
msgid ""
"You can define multiple overlay arrows via the variable "
"@code{overlay-arrow-variable-list}."
msgstr ""

#. type: defvar
#: original_texis/display.texi:4872
#, no-wrap
msgid "overlay-arrow-variable-list"
msgstr ""

#. type: defvar
#: original_texis/display.texi:4877
msgid ""
"This variable's value is a list of variables, each of which specifies the "
"position of an overlay arrow.  The variable @code{overlay-arrow-position} "
"has its normal meaning because it is on this list."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4887
msgid ""
"Each variable on this list can have properties @code{overlay-arrow-string} "
"and @code{overlay-arrow-bitmap} that specify an overlay arrow string (for "
"text terminals or graphical terminals without the left fringe shown) or "
"fringe bitmap (for graphical terminals with a left fringe) to display at the "
"corresponding overlay arrow position.  If either property is not set, the "
"default @code{overlay-arrow-string} or @code{overlay-arrow} fringe indicator "
"is used."
msgstr ""

#. type: cindex
#: original_texis/display.texi:4891
#, no-wrap
msgid "scroll bars"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4898
msgid ""
"Normally the frame parameter @code{vertical-scroll-bars} controls whether "
"the windows in the frame have vertical scroll bars, and whether they are on "
"the left or right.  The frame parameter @code{scroll-bar-width} specifies "
"how wide they are (@code{nil} meaning the default)."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4903
msgid ""
"The frame parameter @code{horizontal-scroll-bars} controls whether the "
"windows in the frame have horizontal scroll bars.  The frame parameter "
"@code{scroll-bar-height} specifies how high they are (@code{nil} meaning the "
"default).  @xref{Layout Parameters}."
msgstr ""

#. type: vindex
#: original_texis/display.texi:4904
#, no-wrap
msgid "horizontal-scroll-bars-available-p"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4908
msgid ""
"Horizontal scroll bars are not available on all platforms.  The function "
"@code{horizontal-scroll-bars-available-p} which takes no argument returns "
"non-@code{nil} if they are available on your system."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4911
msgid ""
"The following three functions take as argument a live frame which defaults "
"to the selected one."
msgstr ""

#. type: defun
#: original_texis/display.texi:4912
#, no-wrap
msgid "frame-current-scroll-bars &optional frame"
msgstr ""

#. type: defun
#: original_texis/display.texi:4919
msgid ""
"This function reports the scroll bar types for frame @var{frame}.  The value "
"is a cons cell @code{(@var{vertical-type} .@: @var{horizontal-type})}, where "
"@var{vertical-type} is either @code{left}, @code{right}, or @code{nil} "
"(which means no vertical scroll bar.)  @var{horizontal-type} is either "
"@code{bottom} or @code{nil} (which means no horizontal scroll bar)."
msgstr ""

#. type: defun
#: original_texis/display.texi:4921
#, no-wrap
msgid "frame-scroll-bar-width &optional frame"
msgstr ""

#. type: defun
#: original_texis/display.texi:4924
msgid ""
"This function returns the width of vertical scroll bars of @var{frame} in "
"pixels."
msgstr ""

#. type: defun
#: original_texis/display.texi:4926
#, no-wrap
msgid "frame-scroll-bar-height &optional frame"
msgstr ""

#. type: defun
#: original_texis/display.texi:4929
msgid ""
"This function returns the height of horizontal scroll bars of @var{frame} in "
"pixels."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4933
msgid ""
"You can override the frame specific settings for individual windows by using "
"the following function:"
msgstr ""

#. type: defun
#: original_texis/display.texi:4934
#, no-wrap
msgid ""
"set-window-scroll-bars window &optional width vertical-type height "
"horizontal-type persistent"
msgstr ""

#. type: defun
#: original_texis/display.texi:4938
msgid ""
"This function sets the width and/or height and the types of scroll bars for "
"window @var{window}.  If @var{window} is @code{nil}, the selected window is "
"used."
msgstr ""

#. type: defun
#: original_texis/display.texi:4945
msgid ""
"@var{width} specifies the width of the vertical scroll bar in pixels "
"(@code{nil} means use the width specified for the frame).  "
"@var{vertical-type} specifies whether to have a vertical scroll bar and, if "
"so, where.  The possible values are @code{left}, @code{right}, @code{t}, "
"which means to use the frame's default, and @code{nil} for no vertical "
"scroll bar."
msgstr ""

#. type: defun
#: original_texis/display.texi:4955
msgid ""
"@var{height} specifies the height of the horizontal scroll bar in pixels "
"(@code{nil} means use the height specified for the frame).  "
"@var{horizontal-type} specifies whether to have a horizontal scroll bar.  "
"The possible values are @code{bottom}, @code{t}, which means to use the "
"frame's default, and @code{nil} for no horizontal scroll bar.  Note that for "
"a mini window the value @code{t} has the same meaning as @code{nil}, namely "
"to not show a horizontal scroll bar.  You have to explicitly specify "
"@code{bottom} in order to show a horizontal scroll bar in a mini window."
msgstr ""

#. type: defun
#: original_texis/display.texi:4958
msgid ""
"If @var{window} is not large enough to accommodate a scroll bar of the "
"desired dimension, this leaves the corresponding scroll bar unchanged."
msgstr ""

#. type: defun
#: original_texis/display.texi:4966
msgid ""
"The values specified here may be later overridden by invoking "
"@code{set-window-buffer} (@pxref{Buffers and Windows}) on @var{window} with "
"its @var{keep-margins} argument @code{nil} or omitted.  However, if the "
"optional fifth argument @var{persistent} is non-@code{nil} and the other "
"arguments are processed successfully, the values specified here "
"unconditionally survive subsequent invocations of @code{set-window-buffer}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4973
msgid ""
"Using the @var{persistent} argument of @code{set-window-scroll-bars} and "
"@code{set-window-fringes} (@pxref{Fringe Size/Pos}) you can reliably and "
"permanently turn off scroll bars and/or fringes in any minibuffer window by "
"adding the following snippet to your early init file (@pxref{Init File})."
msgstr ""

#. type: group
#: original_texis/display.texi:4982
#, no-wrap
msgid ""
"(add-hook 'after-make-frame-functions\n"
"          (lambda (frame)\n"
"            (set-window-scroll-bars\n"
"             (minibuffer-window frame) 0 nil 0 nil t)\n"
"            (set-window-fringes\n"
"             (minibuffer-window frame) 0 0 nil t)))\n"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:4987
msgid ""
"The following four functions take as argument a live window which defaults "
"to the selected one."
msgstr ""

#. type: defun
#: original_texis/display.texi:4988
#, no-wrap
msgid "window-scroll-bars &optional window"
msgstr ""

#. type: defun
#: original_texis/display.texi:4992
msgid ""
"This function returns a list of the form @code{(@var{width} @var{columns} "
"@var{vertical-type} @var{height} @var{lines} @var{horizontal-type} "
"@var{persistent})}."
msgstr ""

#. type: defun
#: original_texis/display.texi:4997
msgid ""
"The value @var{width} is the value that was specified for the width of the "
"vertical scroll bar (which may be @code{nil}); @var{columns} is the "
"(possibly rounded) number of columns that the vertical scroll bar actually "
"occupies."
msgstr ""

#. type: defun
#: original_texis/display.texi:5002
msgid ""
"The value @var{height} is the value that was specified for the height of the "
"horizontal scroll bar (which may be @code{nil}); @var{lines} is the "
"(possibly rounded) number of lines that the horizontally scroll bar actually "
"occupies."
msgstr ""

#. type: defun
#: original_texis/display.texi:5006
msgid ""
"The value of @var{persistent} is the value specified for @var{window} with "
"the last successful invocation of @code{set-window-scroll-bars}, @code{nil} "
"if there never was one."
msgstr ""

#. type: defun
#: original_texis/display.texi:5008
#, no-wrap
msgid "window-current-scroll-bars &optional window"
msgstr ""

#. type: defun
#: original_texis/display.texi:5014
msgid ""
"This function reports the scroll bar type for window @var{window}.  The "
"value is a cons cell @code{(@var{vertical-type} .@: "
"@var{horizontal-type})}.  Unlike @code{window-scroll-bars}, this reports the "
"scroll bar type actually used, once frame defaults and "
"@code{scroll-bar-mode} are taken into account."
msgstr ""

#. type: defun
#: original_texis/display.texi:5016
#, no-wrap
msgid "window-scroll-bar-width &optional window"
msgstr ""

#. type: defun
#: original_texis/display.texi:5019
msgid ""
"This function returns the width in pixels of @var{window}'s vertical "
"scrollbar."
msgstr ""

#. type: defun
#: original_texis/display.texi:5021
#, no-wrap
msgid "window-scroll-bar-height &optional window"
msgstr ""

#. type: defun
#: original_texis/display.texi:5024
msgid ""
"This function returns the height in pixels of @var{window}'s horizontal "
"scrollbar."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5035
msgid ""
"If you do not specify a window's scroll bar settings via "
"@code{set-window-scroll-bars}, the buffer-local variables "
"@code{vertical-scroll-bar}, @code{horizontal-scroll-bar}, "
"@code{scroll-bar-width} and @code{scroll-bar-height} in the buffer being "
"displayed control the window's scroll bars.  The function "
"@code{set-window-buffer} examines these variables.  If you change them in a "
"buffer that is already visible in a window, you can make the window take "
"note of the new values by calling @code{set-window-buffer} specifying the "
"same buffer that is already displayed."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5039
msgid ""
"You can control the appearance of scroll bars for a particular buffer by "
"setting the following variables which automatically become buffer-local when "
"set."
msgstr ""

#. type: defvar
#: original_texis/display.texi:5040
#, no-wrap
msgid "vertical-scroll-bar"
msgstr ""

#. type: defvar
#: original_texis/display.texi:5044
msgid ""
"This variable specifies the location of the vertical scroll bar.  The "
"possible values are @code{left}, @code{right}, @code{t}, which means to use "
"the frame's default, and @code{nil} for no scroll bar."
msgstr ""

#. type: defvar
#: original_texis/display.texi:5046
#, no-wrap
msgid "horizontal-scroll-bar"
msgstr ""

#. type: defvar
#: original_texis/display.texi:5050
msgid ""
"This variable specifies the location of the horizontal scroll bar.  The "
"possible values are @code{bottom}, @code{t}, which means to use the frame's "
"default, and @code{nil} for no scroll bar."
msgstr ""

#. type: defvar
#: original_texis/display.texi:5052
#, no-wrap
msgid "scroll-bar-width"
msgstr ""

#. type: defvar
#: original_texis/display.texi:5056
msgid ""
"This variable specifies the width of the buffer's vertical scroll bars, "
"measured in pixels.  A value of @code{nil} means to use the value specified "
"by the frame."
msgstr ""

#. type: defvar
#: original_texis/display.texi:5058
#, no-wrap
msgid "scroll-bar-height"
msgstr ""

#. type: defvar
#: original_texis/display.texi:5062
msgid ""
"This variable specifies the height of the buffer's horizontal scroll bar, "
"measured in pixels.  A value of @code{nil} means to use the value specified "
"by the frame."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5067
msgid ""
"Finally you can toggle the display of scroll bars on all frames by "
"customizing the variables @code{scroll-bar-mode} and "
"@code{horizontal-scroll-bar-mode}."
msgstr ""

#. type: defopt
#: original_texis/display.texi:5068
#, no-wrap
msgid "scroll-bar-mode"
msgstr ""

#. type: defopt
#: original_texis/display.texi:5073
msgid ""
"This variable controls whether and where to put vertical scroll bars in all "
"frames.  The possible values are @code{nil} for no scroll bars, @code{left} "
"to put scroll bars on the left and @code{right} to put scroll bars on the "
"right."
msgstr ""

#. type: defopt
#: original_texis/display.texi:5075
#, no-wrap
msgid "horizontal-scroll-bar-mode"
msgstr ""

#. type: defopt
#: original_texis/display.texi:5078
msgid ""
"This variable controls whether to display horizontal scroll bars on all "
"frames."
msgstr ""

#. type: cindex
#: original_texis/display.texi:5083
#, no-wrap
msgid "window dividers"
msgstr ""

#. type: cindex
#: original_texis/display.texi:5084
#, no-wrap
msgid "right dividers"
msgstr ""

#. type: cindex
#: original_texis/display.texi:5085
#, no-wrap
msgid "bottom dividers"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5095
msgid ""
"Window dividers are bars drawn between a frame's windows.  A right divider "
"is drawn between a window and any adjacent windows on the right.  Its width "
"(thickness) is specified by the frame parameter @code{right-divider-width}.  "
"A bottom divider is drawn between a window and adjacent windows on the "
"bottom or the echo area.  Its width is specified by the frame parameter "
"@code{bottom-divider-width}.  In either case, specifying a width of zero "
"means to not draw such dividers.  @xref{Layout Parameters}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5104
msgid ""
"Technically, a right divider belongs to the window on its left, which means "
"that its width contributes to the total width of that window.  A bottom "
"divider belongs to the window above it, which means that its width "
"contributes to the total height of that window.  @xref{Window Sizes}.  When "
"a window has both, a right and a bottom divider, the bottom divider "
"prevails.  This means that a bottom divider is drawn over the full total "
"width of its window while the right divider ends above the bottom divider."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5110
msgid ""
"Dividers can be dragged with the mouse and are therefore useful for "
"adjusting the sizes of adjacent windows with the mouse.  They also serve to "
"visually set apart adjacent windows when no scroll bars or mode lines are "
"present.  The following three faces allow the customization of the "
"appearance of dividers:"
msgstr ""

#. type: table
#: original_texis/display.texi:5116
msgid ""
"When a divider is less than three pixels wide, it is drawn solidly with the "
"foreground of this face.  For larger dividers this face is used for the "
"inner part only, excluding the first and last pixel."
msgstr ""

#. type: item
#: original_texis/display.texi:5117
#, no-wrap
msgid "window-divider-first-pixel"
msgstr ""

#. type: table
#: original_texis/display.texi:5121
msgid ""
"This is the face used for drawing the first pixel of a divider that is at "
"least three pixels wide.  To obtain a solid appearance, set this to the same "
"value used for the @code{window-divider} face."
msgstr ""

#. type: item
#: original_texis/display.texi:5122
#, no-wrap
msgid "window-divider-last-pixel"
msgstr ""

#. type: table
#: original_texis/display.texi:5126
msgid ""
"This is the face used for drawing the last pixel of a divider that is at "
"least three pixels wide.  To obtain a solid appearance, set this to the same "
"value used for the @code{window-divider} face."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5130
msgid ""
"You can get the sizes of the dividers of a specific window with the "
"following two functions."
msgstr ""

#. type: defun
#: original_texis/display.texi:5131
#, no-wrap
msgid "window-right-divider-width &optional window"
msgstr ""

#. type: defun
#: original_texis/display.texi:5135
msgid ""
"Return the width (thickness) in pixels of @var{window}'s right divider.  "
"@var{window} must be a live window and defaults to the selected one.  The "
"return value is always zero for a rightmost window."
msgstr ""

#. type: defun
#: original_texis/display.texi:5137
#, no-wrap
msgid "window-bottom-divider-width &optional window"
msgstr ""

#. type: defun
#: original_texis/display.texi:5142
msgid ""
"Return the width (thickness) in pixels of @var{window}'s bottom divider.  "
"@var{window} must be a live window and defaults to the selected one.  The "
"return value is zero for the minibuffer window or a bottommost window on a "
"minibuffer-less frame."
msgstr ""

#. type: section
#: original_texis/display.texi:5146
#, no-wrap
msgid "The @code{display} Property"
msgstr ""

#. type: cindex
#: original_texis/display.texi:5147
#, no-wrap
msgid "display specification"
msgstr ""

#. type: cindex
#: original_texis/display.texi:5148
#, no-wrap
msgid "display property"
msgstr ""

#. type: kindex
#: original_texis/display.texi:5149
#, no-wrap
msgid "display @r{(text property)}"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5155
msgid ""
"The @code{display} text property (or overlay property) is used to insert "
"images into text, and to control other aspects of how text displays.  "
"Display specifications in the same @code{display} property value generally "
"apply in parallel to the text they cover."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5160
msgid ""
"If several sources (overlays and/or a text property) specify values for the "
"@code{display} property, only one of the values takes effect, following the "
"rules of @code{get-char-property}.  @xref{Examining Properties}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5164
msgid ""
"The value of the @code{display} property should be a display specification, "
"or a list or vector containing several display specifications."
msgstr ""

#. type: defun
#: original_texis/display.texi:5165
#, no-wrap
msgid "get-display-property position prop &optional object properties"
msgstr ""

#. type: defun
#: original_texis/display.texi:5171
msgid ""
"This convenience function can be used to get a specific display property, no "
"matter whether the @code{display} property is a vector, a list or a simple "
"property.  This is like @code{get-text-property} (@pxref{Examining "
"Properties}), but works on the @code{display} property only."
msgstr ""

#. type: defun
#: original_texis/display.texi:5181
msgid ""
"@var{position} is the position in the buffer or string to examine, and "
"@var{prop} is the @code{display} property to return.  The optional "
"@var{object} argument should be either a string or a buffer, and defaults to "
"the current buffer.  If the optional @var{properties} argument is "
"non-@code{nil}, it should be a @code{display} property, and in that case, "
"@var{position} and @var{object} are ignored.  (This can be useful if you've "
"already gotten the @code{display} property with @code{get-char-property}, "
"for instance (@pxref{Examining Properties})."
msgstr ""

#. type: defun
#: original_texis/display.texi:5183
#, no-wrap
msgid "add-display-text-property start end prop value &optional object"
msgstr ""

#. type: defun
#: original_texis/display.texi:5186
msgid ""
"Add @code{display} property @var{prop} of @var{value} to the text from "
"@var{start} to @var{end}."
msgstr ""

#. type: defun
#: original_texis/display.texi:5189
msgid ""
"If any text in the region has a non-@code{nil} @code{display} property, "
"those properties are retained.  For instance:"
msgstr ""

#. type: lisp
#: original_texis/display.texi:5193
#, no-wrap
msgid ""
"(add-display-text-property 4 8 'height 2.0)\n"
"(add-display-text-property 2 12 'raise 0.5)\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:5200
msgid ""
"After doing this, the region from 2 to 4 will have the @code{raise} "
"@code{display} property, the region from 4 to 8 will have both the "
"@code{raise} and @code{height} @code{display} properties, and finally the "
"region from 8 to 12 will only have the @code{raise} @code{display} property."
msgstr ""

#. type: defun
#: original_texis/display.texi:5203
msgid ""
"If @var{object} is non-@code{nil}, it should be a string or a buffer.  If "
"@code{nil}, this defaults to the current buffer."
msgstr ""

#. type: cindex
#: original_texis/display.texi:5205
#, no-wrap
msgid "display property, unsafe evaluation"
msgstr ""

#. type: cindex
#: original_texis/display.texi:5206
#, no-wrap
msgid "security, and display specifications"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5215
msgid ""
"Some of the display specifications allow inclusion of Lisp forms, which are "
"evaluated at display time.  This could be unsafe in certain situations, "
"e.g., when the display specification was generated by some external "
"program/agent.  Wrapping a display specification in a list that begins with "
"the special symbol @code{disable-eval}, as in @w{@code{(disable-eval "
"@var{spec})}}, will disable evaluation of any Lisp in @var{spec}, while "
"still supporting all the other display property features."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5218
msgid ""
"The rest of this section describes several kinds of display specifications "
"and what they mean."
msgstr ""

#. type: node
#: original_texis/display.texi:5226 original_texis/display.texi:5228
#, no-wrap
msgid "Replacing Specs"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:5226
msgid "Display specs that replace the text."
msgstr ""

#. type: node
#: original_texis/display.texi:5226 original_texis/display.texi:5303
#, no-wrap
msgid "Specified Space"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:5226
msgid "Displaying one space with a specified width."
msgstr ""

#. type: node
#: original_texis/display.texi:5226 original_texis/display.texi:5380
#, no-wrap
msgid "Pixel Specification"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:5226
msgid "Specifying space width or height in pixels."
msgstr ""

#. type: node
#: original_texis/display.texi:5226 original_texis/display.texi:5496
#, no-wrap
msgid "Other Display Specs"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:5226
msgid ""
"Displaying an image; adjusting the height, spacing, and other properties of "
"text."
msgstr ""

#. type: node
#: original_texis/display.texi:5226 original_texis/display.texi:5638
#, no-wrap
msgid "Display Margins"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:5226
msgid "Displaying text or images to the side of the main text."
msgstr ""

#. type: subsection
#: original_texis/display.texi:5229
#, no-wrap
msgid "Display Specs That Replace The Text"
msgstr ""

#. type: cindex
#: original_texis/display.texi:5230
#, no-wrap
msgid "replacing display specs"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5237
msgid ""
"Some kinds of display specifications specify something to display instead of "
"the text that has the property.  These are called @dfn{replacing} display "
"specifications.  Emacs does not allow the user to interactively move point "
"into the middle of buffer text that is replaced in this way."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5242
msgid ""
"If a list of display specifications includes more than one replacing display "
"specification, the first overrides the rest.  Replacing display "
"specifications make most other display specifications irrelevant, since "
"those don't apply to the replacement."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5249
msgid ""
"For replacing display specifications, @dfn{the text that has the property} "
"means all the consecutive characters that have the same Lisp object as their "
"@code{display} property; these characters are replaced as a single unit.  If "
"two characters have different Lisp objects as their @code{display} "
"properties (i.e., objects which are not @code{eq}), they are handled "
"separately."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5254
msgid ""
"Here is an example which illustrates this point.  A string serves as a "
"replacing display specification, which replaces the text that has the "
"property with the specified string (@pxref{Other Display Specs}).  Consider "
"the following function:"
msgstr ""

#. type: smallexample
#: original_texis/display.texi:5262
#, no-wrap
msgid ""
"(defun foo ()\n"
"  (dotimes (i 5)\n"
"    (let ((string (concat \"A\"))\n"
"          (start (+ i i (point-min))))\n"
"      (put-text-property start (1+ start) 'display string)\n"
"      (put-text-property start (+ 2 start) 'display string))))\n"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5274
msgid ""
"This function gives each of the first ten characters in the buffer a "
"@code{display} property which is a string @code{\"A\"}, but they don't all "
"get the same string object.  The first two characters get the same string "
"object, so they are replaced with one @samp{A}; the fact that the display "
"property was assigned in two separate calls to @code{put-text-property} is "
"irrelevant.  Similarly, the next two characters get a second string "
"(@code{concat} creates a new string object), so they are replaced with one "
"@samp{A}; and so on.  Thus, the ten characters appear as five A's."
msgstr ""

#. type: cindex
#: original_texis/display.texi:5275
#, no-wrap
msgid "box face attribute, and @code{display} properties"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5283
msgid ""
"Note: Using @code{:box} face attribute (@pxref{Face Attributes}) on a "
"replacing @code{display} string that is adjacent to normal text with the "
"same @code{:box} style can lead to display artifacts when moving the cursor "
"across the text with this face attribute.  These can be avoided by applying "
"the @code{:box} attribute directly to the text being replaced, rather than "
"(or in addition to) the @code{display} string itself.  Here's an example:"
msgstr ""

#. type: group
#: original_texis/display.texi:5291
#, no-wrap
msgid ""
";; Causes display artifacts when moving the cursor across text\n"
"(progn\n"
"  (put-text-property 1 2 'display (propertize \"  [\" 'face '(:box t)))\n"
"  (put-text-property 2 3 'face '(:box t))\n"
"  (put-text-property 3 4 'display (propertize \"]  \" 'face '(:box t))))\n"
msgstr ""

#. type: group
#: original_texis/display.texi:5299
#, no-wrap
msgid ""
";; No display artifacts due to `:box'\n"
"(progn\n"
"  (add-text-properties 1 2 '(face (:box t) display \"  [\"))\n"
"  (put-text-property 2 3 'face '(:box t))\n"
"  (add-text-properties 3 4 '(face (:box t) display \"]  \")))\n"
msgstr ""

#. type: subsection
#: original_texis/display.texi:5304
#, no-wrap
msgid "Specified Spaces"
msgstr ""

#. type: cindex
#: original_texis/display.texi:5305
#, no-wrap
msgid "spaces, specified height or width"
msgstr ""

#. type: cindex
#: original_texis/display.texi:5306
#, no-wrap
msgid "variable-width spaces"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5315
msgid ""
"To display a space of specified width and/or height, use a display "
"specification of the form @code{(space . @var{props})}, where @var{props} is "
"a property list (a list of alternating properties and values).  You can put "
"this property on one or more consecutive characters; a space of the "
"specified height and width is displayed in place of @emph{all} of those "
"characters.  These are the properties you can use in @var{props} to specify "
"the weight of the space:"
msgstr ""

#. type: item
#: original_texis/display.texi:5317
#, no-wrap
msgid ":width @var{width}"
msgstr ""

#. type: table
#: original_texis/display.texi:5322
msgid ""
"If @var{width} is a number, it specifies that the space width should be "
"@var{width} times the normal character width.  @var{width} can also be a "
"@dfn{pixel width} specification (@pxref{Pixel Specification})."
msgstr ""

#. type: item
#: original_texis/display.texi:5323
#, no-wrap
msgid ":relative-width @var{factor}"
msgstr ""

#. type: table
#: original_texis/display.texi:5330
msgid ""
"Specifies that the width of the stretch should be computed from the first "
"character in the group of consecutive characters that have the same "
"@code{display} property.  The space width is the pixel width of that "
"character, multiplied by @var{factor}.  (On text-mode terminals, the ``pixel "
"width'' of a character is usually 1, but it could be more for TABs and "
"double-width CJK characters.)"
msgstr ""

#. type: item
#: original_texis/display.texi:5331
#, no-wrap
msgid ":align-to @var{hpos}"
msgstr ""

#. type: table
#: original_texis/display.texi:5344
msgid ""
"Specifies that the space should be wide enough to reach the column "
"@var{hpos}.  If @var{hpos} is a number, it is a column number, and is "
"measured in units of the canonical character width (@pxref{Frame Font}).  "
"@var{hpos} can also be a @dfn{pixel width} specification (@pxref{Pixel "
"Specification}).  When the current line is wider than the window, and is "
"either displayed by one or more continuation lines, or is truncated and "
"possibly scrolled horizontally (@pxref{Horizontal Scrolling}), @var{hpos} is "
"measured from the beginning of the logical line, not from the visual "
"beginning of the screen line.  This way, alignment produced by "
"@code{:align-to} is consistent with functions that count columns, such as "
"@code{current-column} and @code{move-to-column} (@pxref{Columns})."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5348
msgid ""
"You should use one and only one of the above properties.  You can also "
"specify the height of the space, with these properties:"
msgstr ""

#. type: item
#: original_texis/display.texi:5350
#, no-wrap
msgid ":height @var{height}"
msgstr ""

#. type: table
#: original_texis/display.texi:5356
msgid ""
"Specifies the height of the space.  If @var{height} is a number, it "
"specifies that the space height should be @var{height} times the normal "
"character height.  The @var{height} may also be a @dfn{pixel height} "
"specification (@pxref{Pixel Specification})."
msgstr ""

#. type: item
#: original_texis/display.texi:5357
#, no-wrap
msgid ":relative-height @var{factor}"
msgstr ""

#. type: table
#: original_texis/display.texi:5360
msgid ""
"Specifies the height of the space, multiplying the ordinary height of the "
"text having this display specification by @var{factor}."
msgstr ""

#. type: item
#: original_texis/display.texi:5361 original_texis/display.texi:5865
#, no-wrap
msgid ":ascent @var{ascent}"
msgstr ""

#. type: table
#: original_texis/display.texi:5367
msgid ""
"If the value of @var{ascent} is a non-negative number no greater than 100, "
"it specifies that @var{ascent} percent of the height of the space should be "
"considered as the ascent of the space---that is, the part above the "
"baseline.  The ascent may also be specified in pixel units with a @dfn{pixel "
"ascent} specification (@pxref{Pixel Specification})."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5371
msgid "Don't use both @code{:height} and @code{:relative-height} together."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5375
msgid ""
"The @code{:width} and @code{:align-to} properties are supported on "
"non-graphic terminals, but the other space properties in this section are "
"not."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5379
msgid ""
"Note that space properties are treated as paragraph separators for the "
"purposes of reordering bidirectional text for display.  @xref{Bidirectional "
"Display}, for the details."
msgstr ""

#. type: subsection
#: original_texis/display.texi:5381
#, no-wrap
msgid "Pixel Specification for Spaces"
msgstr ""

#. type: cindex
#: original_texis/display.texi:5382
#, no-wrap
msgid "spaces, pixel specification"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5388
msgid ""
"The value of the @code{:width}, @code{:align-to}, @code{:height}, and "
"@code{:ascent} properties can be a special kind of expression that is "
"evaluated during redisplay.  The result of the evaluation is used as an "
"absolute number of pixels."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5390
msgid "The following expressions are supported:"
msgstr ""

#. type: group
#: original_texis/display.texi:5396
#, no-wrap
msgid ""
"  @var{expr} ::= @var{num} | (@var{num}) | @var{unit} | @var{elem} | "
"@var{pos} | @var{image} | @var{xwidget} | @var{form}\n"
"  @var{num}  ::= @var{integer} | @var{float} | @var{symbol}\n"
"  @var{unit} ::= in | mm | cm | width | height\n"
msgstr ""

#. type: group
#: original_texis/display.texi:5403
#, no-wrap
msgid ""
"  @var{elem} ::= left-fringe | right-fringe | left-margin | right-margin\n"
"        |  scroll-bar | text\n"
"  @var{pos}  ::= left | center | right\n"
"  @var{form} ::= (@var{num} . @var{expr}) | (@var{op} @var{expr} ...)\n"
"  @var{op}   ::= + | -\n"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5413
msgid ""
"The form @var{num} specifies a fraction of the default frame font height or "
"width.  The form @code{(@var{num})} specifies an absolute number of pixels.  "
"If @var{num} is a symbol, @var{symbol}, its buffer-local variable binding is "
"used; that binding can be either a number or a cons cell of the forms shown "
"above (including yet another cons cell whose @code{car} is a symbol that has "
"a buffer-local binding)."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5423
msgid ""
"The @code{in}, @code{mm}, and @code{cm} units specify the number of pixels "
"per inch, millimeter, and centimeter, respectively.  The @code{width} and "
"@code{height} units correspond to the default width and height of the "
"current face.  An image specification of the form @w{@code{(image "
". @var{props})}} (@pxref{Image Descriptors})  corresponds to the width or "
"height of the specified image.  Similarly, an xwidget specification of the "
"form @w{@code{(xwidget . @var{props})}} stands for the width or height of "
"the specified xwidget.  @xref{Xwidgets}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5430
msgid ""
"The elements @code{left-fringe}, @code{right-fringe}, @code{left-margin}, "
"@code{right-margin}, @code{scroll-bar}, and @code{text} specify the width of "
"the corresponding area of the window.  When the window displays line numbers "
"(@pxref{Size of Displayed Text}), the width of the @code{text} area is "
"decreased by the screen space taken by the line-number display."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5438
msgid ""
"The @code{left}, @code{center}, and @code{right} positions can be used with "
"@code{:align-to} to specify a position relative to the left edge, center, or "
"right edge of the text area.  When the window displays line numbers, and "
"@code{:align-to} is used in display properties of buffer text (as opposed to "
"header line, see below), the @code{left} and the @code{center} positions are "
"offset to account for the screen space taken by the line-number display."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5446
msgid ""
"Any of the above window elements (except @code{text}) can also be used with "
"@code{:align-to} to specify that the position is relative to the left edge "
"of the given area.  Once the base offset for a relative position has been "
"set (by the first occurrence of one of these symbols), further occurrences "
"of these symbols are interpreted as the width of the specified area.  For "
"example, to align to the center of the left-margin, use"
msgstr ""

#. type: example
#: original_texis/display.texi:5449
#, no-wrap
msgid ":align-to (+ left-margin (0.5 . left-margin))\n"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5456
msgid ""
"If no specific base offset is set for alignment, it is always relative to "
"the left edge of the text area.  For example, @samp{:align-to 0} aligns with "
"the first text column in the text area.  When the window displays line "
"numbers, the text is considered to start where the space used for "
"line-number display ends."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5462
msgid ""
"A value of the form @code{(@var{num} . @var{expr})} stands for the product "
"of the values of @var{num} and @var{expr}.  For example, @code{(2 . in)} "
"specifies a width of 2 inches, while @code{(0.5 .  @var{image})} specifies "
"half the width (or height) of the specified @var{image} (which should be "
"given by its image spec)."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5466
msgid ""
"The form @code{(+ @var{expr} ...)} adds up the value of the expressions.  "
"The form @code{(- @var{expr} ...)} negates or subtracts the value of the "
"expressions."
msgstr ""

#. type: vindex
#: original_texis/display.texi:5467
#, no-wrap
msgid "header-line-format@r{, and } :align-to"
msgstr ""

#. type: cindex
#: original_texis/display.texi:5468
#, no-wrap
msgid "aligning header line, when line numbers are displayed"
msgstr ""

#. type: cindex
#: original_texis/display.texi:5469
#, no-wrap
msgid "header line alignment when line numbers are displayed"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5480
msgid ""
"Text shown in the header line that uses @code{:align-to} display "
"specifications is not automatically realigned when "
"@code{display-line-numbers-mode} is turned on and off, or when the width of "
"line numbers on display changes.  To arrange for the header-line text "
"alignment to be updated, thus keeping the header-line text aligned with the "
"buffer text, turn on the @code{header-line-indent-mode} in the buffer and "
"use its two variables, @code{header-line-indent} and "
"@code{header-line-indent-width}, in the display specification.  @xref{Header "
"Lines}.  Here's a simple example:"
msgstr ""

#. type: lisp
#: original_texis/display.texi:5488
#, no-wrap
msgid ""
"(setq header-line-format\n"
"      (concat (propertize \" \"\n"
"                          'display\n"
"                          '(space :align-to\n"
"                                  (+ header-line-indent-width 10)))\n"
"              \"Column\"))\n"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5495
msgid ""
"This will keep the text @samp{Column} on the header line aligned with column "
"10 of buffer text, regardless of whether @code{display-line-numbers-mode} is "
"on or off, and also when line-number display changes its width."
msgstr ""

#. type: subsection
#: original_texis/display.texi:5497
#, no-wrap
msgid "Other Display Specifications"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5501
msgid ""
"Here are the other sorts of display specifications that you can use in the "
"@code{display} text property."
msgstr ""

#. type: var{#1}
#: original_texis/display.texi:5503
#, no-wrap
msgid "string"
msgstr ""

#. type: table
#: original_texis/display.texi:5505
msgid "Display @var{string} instead of the text that has this property."
msgstr ""

#. type: table
#: original_texis/display.texi:5508
msgid ""
"Recursive display specifications are not supported---@var{string}'s "
"@code{display} properties, if any, are not used."
msgstr ""

#. type: item
#: original_texis/display.texi:5509
#, no-wrap
msgid "(image . @var{image-props})"
msgstr ""

#. type: table
#: original_texis/display.texi:5513
msgid ""
"This kind of display specification is an image descriptor (@pxref{Image "
"Descriptors}).  When used as a display specification, it means to display "
"the image instead of the text that has the display specification."
msgstr ""

#. type: item
#: original_texis/display.texi:5514
#, no-wrap
msgid "(slice @var{x} @var{y} @var{width} @var{height})"
msgstr ""

#. type: table
#: original_texis/display.texi:5522
msgid ""
"This specification together with @code{image} specifies a @dfn{slice} (a "
"partial area) of the image to display.  The elements @var{y} and @var{x} "
"specify the top left corner of the slice, within the image; @var{width} and "
"@var{height} specify the width and height of the slice.  Integers are "
"numbers of pixels.  A floating-point number in the range 0.0--1.0 stands for "
"that fraction of the width or height of the entire image."
msgstr ""

#. type: item
#: original_texis/display.texi:5523
#, no-wrap
msgid "((margin nil) @var{string})"
msgstr ""

#. type: table
#: original_texis/display.texi:5529
msgid ""
"A display specification of this form means to display @var{string} instead "
"of the text that has the display specification, at the same position as that "
"text.  It is equivalent to using just @var{string}, but it is done as a "
"special case of marginal display (@pxref{Display Margins})."
msgstr ""

#. type: item
#: original_texis/display.texi:5530
#, no-wrap
msgid "(left-fringe @var{bitmap} @r{[}@var{face}@r{]})"
msgstr ""

#. type: itemx
#: original_texis/display.texi:5531
#, no-wrap
msgid "(right-fringe @var{bitmap} @r{[}@var{face}@r{]})"
msgstr ""

#. type: table
#: original_texis/display.texi:5538
msgid ""
"This display specification on any character of a line of text causes the "
"specified @var{bitmap} be displayed in the left or right fringes for that "
"line, instead of the characters that have the display specification.  The "
"optional @var{face} specifies the face whose colors are to be used for the "
"bitmap display.  @xref{Fringe Bitmaps}, for the details."
msgstr ""

#. type: item
#: original_texis/display.texi:5539
#, no-wrap
msgid "(space-width @var{factor})"
msgstr ""

#. type: table
#: original_texis/display.texi:5545
msgid ""
"This display specification affects all the space characters within the text "
"that has the specification.  It displays all of these spaces @var{factor} "
"times as wide as normal.  The element @var{factor} should be an integer or "
"float.  Characters other than spaces are not affected at all; in particular, "
"this has no effect on tab characters."
msgstr ""

#. type: item
#: original_texis/display.texi:5546
#, no-wrap
msgid "(min-width (@var{width}))"
msgstr ""

#. type: table
#: original_texis/display.texi:5552
msgid ""
"This display specification ensures the text that has it takes at least "
"@var{width} space on display, by adding a stretch of white space to the end "
"of the text if the text is shorter than @var{width}.  The text is "
"partitioned using the identity of the parameter, which is why the parameter "
"is a list with one element.  For instance:"
msgstr ""

#. type: lisp
#: original_texis/display.texi:5555
#, no-wrap
msgid "(insert (propertize \"foo\" 'display '(min-width (6.0))))\n"
msgstr ""

#. type: table
#: original_texis/display.texi:5563
msgid ""
"This will add padding after @samp{foo} bringing the total width up to the "
"width of six normal characters.  Note that the affected characters are "
"identified by the @code{(6.0)} list in the display property, compared with "
"@code{eq}.  The element @var{width} can be either an integer or a float "
"specifying the required minimum width of the text (@pxref{Pixel "
"Specification})."
msgstr ""

#. type: item
#: original_texis/display.texi:5564
#, no-wrap
msgid "(height @var{height})"
msgstr ""

#. type: table
#: original_texis/display.texi:5567
msgid ""
"This display specification makes the text taller or shorter.  Here are the "
"possibilities for @var{height}:"
msgstr ""

#. type: code{#1}
#: original_texis/display.texi:5569
#, no-wrap
msgid "(+ @var{n})"
msgstr ""

#. type: table
#: original_texis/display.texi:5576
msgid ""
"This means to use a font that is @var{n} steps larger.  A @dfn{step} is "
"defined by the set of available fonts---specifically, those that match what "
"was otherwise specified for this text, in all attributes except height.  "
"Each size for which a suitable font is available counts as another step.  "
"@var{n} should be an integer."
msgstr ""

#. type: code{#1}
#: original_texis/display.texi:5577
#, no-wrap
msgid "(- @var{n})"
msgstr ""

#. type: table
#: original_texis/display.texi:5579
msgid "This means to use a font that is @var{n} steps smaller."
msgstr ""

#. type: item
#: original_texis/display.texi:5580
#, no-wrap
msgid "a number, @var{factor}"
msgstr ""

#. type: table
#: original_texis/display.texi:5583
msgid ""
"A number, @var{factor}, means to use a font that is @var{factor} times as "
"tall as the default font."
msgstr ""

#. type: item
#: original_texis/display.texi:5584
#, no-wrap
msgid "a symbol, @var{function}"
msgstr ""

#. type: table
#: original_texis/display.texi:5587
msgid ""
"A symbol is a function to compute the height.  It is called with the current "
"height as argument, and should return the new height to use."
msgstr ""

#. type: item
#: original_texis/display.texi:5588
#, no-wrap
msgid "anything else, @var{form}"
msgstr ""

#. type: table
#: original_texis/display.texi:5592
msgid ""
"If the @var{height} value doesn't fit the previous possibilities, it is a "
"form.  Emacs evaluates it to get the new height, with the symbol "
"@code{height} bound to the current specified font height."
msgstr ""

#. type: item
#: original_texis/display.texi:5594
#, no-wrap
msgid "(raise @var{factor})"
msgstr ""

#. type: table
#: original_texis/display.texi:5598
msgid ""
"This kind of display specification raises or lowers the text it applies to, "
"relative to the baseline of the line.  It is mainly meant to support display "
"of subscripts and superscripts."
msgstr ""

#. type: table
#: original_texis/display.texi:5603
msgid ""
"The @var{factor} must be a number, which is interpreted as a multiple of the "
"height of the affected text.  If it is positive, that means to display the "
"characters raised.  If it is negative, that means to display them lower "
"down."
msgstr ""

#. type: table
#: original_texis/display.texi:5611
msgid ""
"Note that if the text also has a @code{height} display specification, which "
"was specified before (i.e.@: to the left of) @code{raise}, the latter will "
"affect the amount of raising or lowering in pixels, because that is based on "
"the height of the text being raised.  Therefore, if you want to display a "
"sub- or superscript that is smaller than the normal text height, consider "
"specifying @code{raise} before @code{height}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5627
msgid ""
"You can make any display specification conditional.  To do that, package it "
"in another list of the form @code{(when @var{condition} . @var{spec})}.  "
"Then the specification @var{spec} applies only when @var{condition} "
"evaluates to a non-@code{nil} value.  During the evaluation, @code{object} "
"is bound to the string or buffer having the conditional @code{display} "
"property.  @code{position} and @code{buffer-position} are bound to the "
"position within @code{object} and the buffer position where the "
"@code{display} property was found, respectively.  Both positions can be "
"different when @code{object} is a string."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5637
msgid ""
"Note that @var{condition} will only be evaluated when redisplay examines the "
"text where this display spec is located, so this feature is best suited for "
"conditions that are relatively stable, i.e.@: yield, for each particular "
"buffer position, the same results on every evaluation.  If the results "
"change for the same text location, e.g., if the result depends on the "
"position of point, then the conditional specification might not do what you "
"want, because redisplay examines only those parts of buffer text where it "
"has reasons to assume that something changed since the last display cycle."
msgstr ""

#. type: subsection
#: original_texis/display.texi:5639
#, no-wrap
msgid "Displaying in the Margins"
msgstr ""

#. type: cindex
#: original_texis/display.texi:5640
#, no-wrap
msgid "display margins"
msgstr ""

#. type: cindex
#: original_texis/display.texi:5641
#, no-wrap
msgid "margins, display"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5648
msgid ""
"A buffer can have blank areas called @dfn{display margins} on the left and "
"on the right.  Ordinary text never appears in these areas, but you can put "
"things into the display margins using the @code{display} property.  There is "
"currently no way to make text or images in the margin mouse-sensitive."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5654
msgid ""
"The way to display something in the margins is to specify it in a margin "
"display specification in the @code{display} property of some text.  This is "
"a replacing display specification, meaning that the text you put it on does "
"not get displayed; the margin display appears, but that text does not."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5660
msgid ""
"A margin display specification looks like @code{((margin right-margin) "
"@var{spec})} or @code{((margin left-margin) @var{spec})}.  Here, @var{spec} "
"is another display specification that says what to display in the margin.  "
"Typically it is a string of text to display, or an image descriptor."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5666
msgid ""
"To display something in the margin @emph{in association with} certain buffer "
"text, without altering or preventing the display of that text, put on that "
"text an overlay with a @code{before-string} property, and put the margin "
"display specification on the contents of the before-string."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5673
msgid ""
"Note that if the string to be displayed in the margin doesn't specify a "
"face, its face is determined using the same rules and priorities as it is "
"for strings displayed in the text area (@pxref{Displaying Faces}).  If this "
"results in undesirable ``leaking'' of faces into the margin, make sure the "
"string has an explicit face specified for it."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5677
msgid ""
"Before the display margins can display anything, you must give them a "
"nonzero width.  The usual way to do that is to set these variables:"
msgstr ""

#. type: defvar
#: original_texis/display.texi:5678
#, no-wrap
msgid "left-margin-width"
msgstr ""

#. type: defvar
#: original_texis/display.texi:5682
msgid ""
"This variable specifies the width of the left margin, in character cell "
"(a.k.a.@: ``column'') units.  It is buffer-local in all buffers.  A value of "
"@code{nil} means no left marginal area."
msgstr ""

#. type: defvar
#: original_texis/display.texi:5684
#, no-wrap
msgid "right-margin-width"
msgstr ""

#. type: defvar
#: original_texis/display.texi:5688
msgid ""
"This variable specifies the width of the right margin, in character cell "
"units.  It is buffer-local in all buffers.  A value of @code{nil} means no "
"right marginal area."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5696
msgid ""
"Setting these variables does not immediately affect the window.  These "
"variables are checked when a new buffer is displayed in the window.  Thus, "
"you can make changes take effect by calling @code{set-window-buffer}.  Do "
"not use these variables to try to determine the current width of the left or "
"right margin.  Instead, use the function @code{window-margins}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5698
msgid "You can also set the margin widths immediately."
msgstr ""

#. type: defun
#: original_texis/display.texi:5699
#, no-wrap
msgid "set-window-margins window left &optional right"
msgstr ""

#. type: defun
#: original_texis/display.texi:5703
msgid ""
"This function specifies the margin widths for window @var{window}, in "
"character cell units.  The argument @var{left} controls the left margin, and "
"@var{right} controls the right margin (default @code{0})."
msgstr ""

#. type: defun
#: original_texis/display.texi:5706
msgid ""
"If @var{window} is not large enough to accommodate margins of the desired "
"width, this leaves the margins of @var{window} unchanged."
msgstr ""

#. type: defun
#: original_texis/display.texi:5710
msgid ""
"The values specified here may be later overridden by invoking "
"@code{set-window-buffer} (@pxref{Buffers and Windows}) on @var{window} with "
"its @var{keep-margins} argument @code{nil} or omitted."
msgstr ""

#. type: defun
#: original_texis/display.texi:5712
#, no-wrap
msgid "window-margins &optional window"
msgstr ""

#. type: defun
#: original_texis/display.texi:5719
msgid ""
"This function returns the width of the left and right margins of "
"@var{window} as a cons cell of the form @w{@code{(@var{left} "
". @var{right})}}.  If one of the two marginal areas does not exist, its "
"width is returned as @code{nil}; if neither of the two margins exist, the "
"function returns @code{(nil)}.  If @var{window} is @code{nil}, the selected "
"window is used."
msgstr ""

#. type: cindex
#: original_texis/display.texi:5723
#, no-wrap
msgid "images in buffers"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5728
msgid ""
"To display an image in an Emacs buffer, you must first create an image "
"descriptor, then use it as a display specifier in the @code{display} "
"property of text that is displayed (@pxref{Display Property})."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5735
msgid ""
"Emacs is usually able to display images when it is run on a graphical "
"terminal.  Images cannot be displayed in a text terminal, on certain "
"graphical terminals that lack the support for this, or if Emacs is compiled "
"without image support.  You can use the function @code{display-images-p} to "
"determine if images can in principle be displayed (@pxref{Display Feature "
"Testing})."
msgstr ""

#. type: subsection
#: original_texis/display.texi:5748 original_texis/display.texi:5750
#: original_texis/display.texi:5751
#, no-wrap
msgid "Image Formats"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:5748
msgid "Supported image formats."
msgstr ""

#. type: subsection
#: original_texis/display.texi:5748 original_texis/display.texi:5804
#: original_texis/display.texi:5805
#, no-wrap
msgid "Image Descriptors"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:5748
msgid "How to specify an image for use in @code{:display}."
msgstr ""

#. type: subsection
#: original_texis/display.texi:5748 original_texis/display.texi:6124
#: original_texis/display.texi:6125
#, no-wrap
msgid "XBM Images"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:5748
msgid "Special features for XBM format."
msgstr ""

#. type: subsection
#: original_texis/display.texi:5748 original_texis/display.texi:6180
#: original_texis/display.texi:6181
#, no-wrap
msgid "XPM Images"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:5748
msgid "Special features for XPM format."
msgstr ""

#. type: subsection
#: original_texis/display.texi:5748 original_texis/display.texi:6196
#: original_texis/display.texi:6197
#, no-wrap
msgid "ImageMagick Images"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:5748
msgid "Special features available through ImageMagick."
msgstr ""

#. type: subsection
#: original_texis/display.texi:5748 original_texis/display.texi:6282
#: original_texis/display.texi:6283
#, no-wrap
msgid "SVG Images"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:5748
msgid "Creating and manipulating SVG images."
msgstr ""

#. type: subsection
#: original_texis/display.texi:5748 original_texis/display.texi:6738
#: original_texis/display.texi:6739
#, no-wrap
msgid "Other Image Types"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:5748
msgid "Various other formats are supported."
msgstr ""

#. type: subsection
#: original_texis/display.texi:5748 original_texis/display.texi:6782
#: original_texis/display.texi:6783
#, no-wrap
msgid "Defining Images"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:5748
msgid "Convenient ways to define an image for later use."
msgstr ""

#. type: subsection
#: original_texis/display.texi:5748 original_texis/display.texi:6929
#: original_texis/display.texi:6930
#, no-wrap
msgid "Showing Images"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:5748
msgid "Convenient ways to display an image once it is defined."
msgstr ""

#. type: subsection
#: original_texis/display.texi:5748 original_texis/display.texi:7089
#: original_texis/display.texi:7090
#, no-wrap
msgid "Multi-Frame Images"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:5748
msgid "Some images contain more than one frame."
msgstr ""

#. type: subsection
#: original_texis/display.texi:5748 original_texis/display.texi:7152
#: original_texis/display.texi:7153
#, no-wrap
msgid "Image Cache"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:5748
msgid "Internal mechanisms of image display."
msgstr ""

#. type: cindex
#: original_texis/display.texi:5752
#, no-wrap
msgid "image formats"
msgstr ""

#. type: cindex
#: original_texis/display.texi:5753
#, no-wrap
msgid "image types"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5761
msgid ""
"Emacs can display a number of different image formats.  Some of these image "
"formats are supported only if particular support libraries are installed.  "
"On some platforms, Emacs can load support libraries on demand; if so, the "
"variable @code{dynamic-library-alist} can be used to modify the set of known "
"names for these dynamic libraries.  @xref{Dynamic Libraries}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5767
msgid ""
"Supported image formats (and the required support libraries) include PBM and "
"XBM (which do not depend on support libraries and are always available), XPM "
"(@code{libXpm}), GIF (@code{libgif} or @code{libungif}), JPEG "
"(@code{libjpeg}), TIFF (@code{libtiff}), PNG (@code{libpng}), SVG "
"(@code{librsvg}), and WebP (@code{libwebp})."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5772
msgid ""
"Each of these image formats is associated with an @dfn{image type symbol}.  "
"The symbols for the above formats are, respectively, @code{pbm}, @code{xbm}, "
"@code{xpm}, @code{gif}, @code{jpeg}, @code{tiff}, @code{png}, @code{svg}, "
"and @code{webp}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5778
msgid ""
"On some platforms, the built-in image support that doesn't require any "
"optional libraries includes BMP images.@footnote{ On MS-Windows, this "
"requires @code{w32-use-native-image-API} to be set non-@code{nil}.  }"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5783
msgid ""
"Furthermore, if you build Emacs with ImageMagick (@code{libMagickWand}) "
"support, Emacs can display any image format that ImageMagick can.  "
"@xref{ImageMagick Images}.  All images displayed via ImageMagick have type "
"symbol @code{imagemagick}."
msgstr ""

#. type: defvar
#: original_texis/display.texi:5784
#, no-wrap
msgid "image-types"
msgstr ""

#. type: defvar
#: original_texis/display.texi:5787
msgid ""
"This variable contains a list of type symbols for image formats which are "
"potentially supported in the current configuration."
msgstr ""

#. type: defvar
#: original_texis/display.texi:5792
msgid ""
"``Potentially'' means that Emacs knows about the image types, not "
"necessarily that they can be used (for example, they could depend on "
"unavailable dynamic libraries).  To know which image types are really "
"available, use @code{image-type-available-p}."
msgstr ""

#. type: defun
#: original_texis/display.texi:5794
#, no-wrap
msgid "image-type-available-p type"
msgstr ""

#. type: defun
#: original_texis/display.texi:5797
msgid ""
"This function returns non-@code{nil} if images of type @var{type} can be "
"loaded and displayed.  @var{type} must be an image type symbol."
msgstr ""

#. type: defun
#: original_texis/display.texi:5802
msgid ""
"For image types whose support libraries are statically linked, this function "
"always returns @code{t}.  For image types whose support libraries are "
"dynamically loaded, it returns @code{t} if the library could be loaded and "
"@code{nil} otherwise."
msgstr ""

#. type: cindex
#: original_texis/display.texi:5806
#, no-wrap
msgid "image descriptor"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5813
msgid ""
"An @dfn{image descriptor} is a list which specifies the underlying data for "
"an image, and how to display it.  It is typically used as the value of a "
"@code{display} overlay or text property (@pxref{Other Display Specs}); but "
"@xref{Showing Images}, for convenient helper functions to insert images into "
"buffers."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5818
msgid ""
"Each image descriptor has the form @code{(image . @var{props})}, where "
"@var{props} is a property list of alternating keyword symbols and values, "
"including at least the pair @code{:type @var{type}} that specifies the image "
"type."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5828
msgid ""
"Image descriptors which define image dimensions, @code{:width}, "
"@code{:height}, @code{:max-width} and @code{:max-height}, may take either an "
"integer, which represents the dimension in pixels, or a pair "
"@code{(@var{value} . em)}, where @var{value} is the dimension's length in "
"@dfn{ems}@footnote{In typography an em is a distance equivalent to the "
"height of the type.  For example when using 12 point type 1 em is equal to "
"12 points.  Its use ensures distances and type remain proportional.}.  One "
"em is equivalent to the height of the font and @var{value} may be an integer "
"or a float."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:5832
msgid ""
"The following is a list of properties that are meaningful for all image "
"types (there are also properties which are meaningful only for certain image "
"types, as documented in the following subsections):"
msgstr ""

#. type: item
#: original_texis/display.texi:5834
#, no-wrap
msgid ":type @var{type}"
msgstr ""

#. type: table
#: original_texis/display.texi:5836
msgid "The image type."
msgstr ""

#. type: ifnottex
#: original_texis/display.texi:5838
msgid "@xref{Image Formats}."
msgstr ""

#. type: table
#: original_texis/display.texi:5840
msgid "Every image descriptor must include this property."
msgstr ""

#. type: item
#: original_texis/display.texi:5841
#, no-wrap
msgid ":file @var{file}"
msgstr ""

#. type: table
#: original_texis/display.texi:5846
msgid ""
"This says to load the image from file @var{file}.  If @var{file} is not an "
"absolute file name, it is expanded relative to each of the directories "
"mentioned by @code{image-load-path} (@pxref{Defining Images})."
msgstr ""

#. type: item
#: original_texis/display.texi:5847 original_texis/display.texi:6152
#, no-wrap
msgid ":data @var{data}"
msgstr ""

#. type: table
#: original_texis/display.texi:5850
msgid ""
"This specifies the raw image data.  Each image descriptor must have either "
"@code{:data} or @code{:file}, but not both."
msgstr ""

#. type: table
#: original_texis/display.texi:5856
msgid ""
"For most image types, the value of a @code{:data} property should be a "
"string containing the image data.  Some image types do not support "
"@code{:data}; for some others, @code{:data} alone is not enough, so you need "
"to use other image properties along with @code{:data}.  See the following "
"subsections for details."
msgstr ""

#. type: item
#: original_texis/display.texi:5857
#, no-wrap
msgid ":margin @var{margin}"
msgstr ""

#. type: table
#: original_texis/display.texi:5864
msgid ""
"This specifies how many pixels to add as an extra margin around the image.  "
"The value, @var{margin}, must be a non-negative number, or a pair "
"@code{(@var{x} . @var{y})} of such numbers.  If it is a pair, @var{x} "
"specifies how many pixels to add horizontally, and @var{y} specifies how "
"many pixels to add vertically.  If @code{:margin} is not specified, the "
"default is zero."
msgstr ""

#. type: table
#: original_texis/display.texi:5870
msgid ""
"This specifies the amount of the image's height to use for its ascent---that "
"is, the part above the baseline.  The value, @var{ascent}, must be a number "
"in the range 0 to 100, or the symbol @code{center}."
msgstr ""

#. type: table
#: original_texis/display.texi:5873
msgid ""
"If @var{ascent} is a number, that percentage of the image's height is used "
"for its ascent."
msgstr ""

#. type: table
#: original_texis/display.texi:5878
msgid ""
"If @var{ascent} is @code{center}, the image is vertically centered around a "
"centerline which would be the vertical centerline of text drawn at the "
"position of the image, in the manner specified by the text properties and "
"overlays that apply to the image."
msgstr ""

#. type: table
#: original_texis/display.texi:5880
msgid "If this property is omitted, it defaults to 50."
msgstr ""

#. type: item
#: original_texis/display.texi:5881
#, no-wrap
msgid ":relief @var{relief}"
msgstr ""

#. type: table
#: original_texis/display.texi:5886
msgid ""
"This adds a shadow rectangle around the image.  The value, @var{relief}, "
"specifies the width of the shadow lines, in pixels.  If @var{relief} is "
"negative, shadows are drawn so that the image appears as a pressed button; "
"otherwise, it appears as an unpressed button."
msgstr ""

#. type: item
#: original_texis/display.texi:5887
#, no-wrap
msgid ":width @var{width}, :height @var{height}"
msgstr ""

#. type: table
#: original_texis/display.texi:5892
msgid ""
"The @code{:width} and @code{:height} keywords are used for scaling the "
"image.  If only one of them is specified, the other one will be calculated "
"so as to preserve the aspect ratio.  If both are specified, aspect ratio may "
"not be preserved."
msgstr ""

#. type: item
#: original_texis/display.texi:5893
#, no-wrap
msgid ":max-width @var{max-width}, :max-height @var{max-height}"
msgstr ""

#. type: table
#: original_texis/display.texi:5900
msgid ""
"The @code{:max-width} and @code{:max-height} keywords are used for scaling "
"if the size of the image exceeds these values.  If @code{:width} is set, it "
"will have precedence over @code{max-width}, and if @code{:height} is set, it "
"will have precedence over @code{max-height}, but you can otherwise mix these "
"keywords as you wish."
msgstr ""

#. type: table
#: original_texis/display.texi:5913
msgid ""
"If both @code{:max-width} and @code{:height} are specified, but "
"@code{:width} is not, preserving the aspect ratio might require that width "
"exceeds @code{:max-width}.  If this happens, scaling will use a smaller "
"value for the height so as to preserve the aspect ratio while not exceeding "
"@code{:max-width}.  Similarly when both @code{:max-height} and @code{:width} "
"are specified, but @code{:height} is not.  For example, if you have a "
"200x100 image and specify that @code{:width} should be 400 and "
"@code{:max-height} should be 150, you'll end up with an image that is "
"300x150: Preserving the aspect ratio and not exceeding the ``max'' setting.  "
"This combination of parameters is a useful way of saying ``display this "
"image as large as possible, but no larger than the available display area''."
msgstr ""

#. type: item
#: original_texis/display.texi:5914
#, no-wrap
msgid ":scale @var{scale}"
msgstr ""

#. type: table
#: original_texis/display.texi:5924
msgid ""
"This should be a number, where values higher than 1 means to increase the "
"size, and lower means to decrease the size, by multiplying both the width "
"and height.  For instance, a value of 0.25 will make the image a quarter "
"size of what it originally was.  If the scaling makes the image larger than "
"specified by @code{:max-width} or @code{:max-height}, the resulting size "
"will not exceed those two values.  If both @code{:scale} and "
"@code{:height}/@code{:width} are specified, the height/width will be "
"adjusted by the specified scaling factor."
msgstr ""

#. type: item
#: original_texis/display.texi:5925
#, no-wrap
msgid ":rotation @var{angle}"
msgstr ""

#. type: table
#: original_texis/display.texi:5930
msgid ""
"Specifies a rotation angle in degrees.  Only multiples of 90 degrees are "
"supported, unless the image type is @code{imagemagick}.  Positive values "
"rotate clockwise, negative values counter-clockwise.  Rotation is performed "
"after scaling and cropping."
msgstr ""

#. type: item
#: original_texis/display.texi:5931
#, no-wrap
msgid ":flip @var{flip}"
msgstr ""

#. type: table
#: original_texis/display.texi:5936
msgid ""
"If this is @code{t}, the image will be horizontally flipped.  Currently it "
"has no effect if the image type is @code{imagemagick}.  Vertical flipping "
"can be achieved by rotating the image 180 degrees and toggling this value."
msgstr ""

#. type: item
#: original_texis/display.texi:5937
#, no-wrap
msgid ":transform-smoothing @var{smooth}"
msgstr ""

#. type: table
#: original_texis/display.texi:5943
msgid ""
"If this is @code{t}, any image transform will have smoothing applied; if "
"@code{nil}, no smoothing will be applied.  The exact algorithm used is "
"platform dependent, but should be equivalent to bilinear filtering.  "
"Disabling smoothing will use the nearest neighbor algorithm."
msgstr ""

#. type: table
#: original_texis/display.texi:5951
msgid ""
"If this property is not specified, @code{create-image} will use the "
"@code{image-transform-smoothing} user option to say whether scaling should "
"be done or not.  This option can be @code{nil} (no smoothing), @code{t} (use "
"smoothing) or a predicate function that's called with the image object as "
"the only parameter, and should return either @code{nil} or @code{t}.  The "
"default is for down-scaling to apply smoothing, and for large up-scaling to "
"not apply smoothing."
msgstr ""

#. type: item
#: original_texis/display.texi:5952
#, no-wrap
msgid ":index @var{frame}"
msgstr ""

#. type: table
#: original_texis/display.texi:5954
msgid "@xref{Multi-Frame Images}."
msgstr ""

#. type: item
#: original_texis/display.texi:5955
#, no-wrap
msgid ":conversion @var{algorithm}"
msgstr ""

#. type: table
#: original_texis/display.texi:5959
msgid ""
"This specifies a conversion algorithm that should be applied to the image "
"before it is displayed; the value, @var{algorithm}, specifies which "
"algorithm."
msgstr ""

#. type: item
#: original_texis/display.texi:5961
#, no-wrap
msgid "laplace"
msgstr ""

#. type: itemx
#: original_texis/display.texi:5962
#, no-wrap
msgid "emboss"
msgstr ""

#. type: table
#: original_texis/display.texi:5967
msgid ""
"Specifies the Laplace edge detection algorithm, which blurs out small "
"differences in color while highlighting larger differences.  People "
"sometimes consider this useful for displaying the image for a disabled "
"button."
msgstr ""

#. type: item
#: original_texis/display.texi:5968
#, no-wrap
msgid "(edge-detection :matrix @var{matrix} :color-adjust @var{adjust})"
msgstr ""

#. type: cindex
#: original_texis/display.texi:5969
#, no-wrap
msgid "edge detection, images"
msgstr ""

#. type: table
#: original_texis/display.texi:5978
msgid ""
"Specifies a general edge-detection algorithm.  @var{matrix} must be either a "
"nine-element list or a nine-element vector of numbers.  A pixel at position "
"@math{x/y} in the transformed image is computed from original pixels around "
"that position.  @var{matrix} specifies, for each pixel in the neighborhood "
"of @math{x/y}, a factor with which that pixel will influence the transformed "
"pixel; element @math{0} specifies the factor for the pixel at "
"@math{x-1/y-1}, element @math{1} the factor for the pixel at @math{x/y-1} "
"etc., as shown below:"
msgstr ""

#. type: tex
#: original_texis/display.texi:5983
#, no-wrap
msgid ""
"$$\\pmatrix{x-1/y-1 & x/y-1  & x+1/y-1 \\cr\n"
"   x-1/y  &   x/y &    x+1/y \\cr\n"
"   x-1/y+1&   x/y+1 &  x+1/y+1 \\cr}$$\n"
msgstr ""

#. type: display
#: original_texis/display.texi:5990
#, no-wrap
msgid ""
"  (x-1/y-1  x/y-1  x+1/y-1\n"
"   x-1/y    x/y    x+1/y\n"
"   x-1/y+1  x/y+1  x+1/y+1)\n"
msgstr ""

#. type: table
#: original_texis/display.texi:5997
msgid ""
"The resulting pixel is computed from the color intensity of the color "
"resulting from summing up the RGB values of surrounding pixels, multiplied "
"by the specified factors, and dividing that sum by the sum of the factors' "
"absolute values."
msgstr ""

#. type: table
#: original_texis/display.texi:5999
msgid "Laplace edge-detection currently uses a matrix of"
msgstr ""

#. type: tex
#: original_texis/display.texi:6004
#, no-wrap
msgid ""
"$$\\pmatrix{1 & 0 & 0 \\cr\n"
"   0&  0 &  0 \\cr\n"
"   0 & 0 & -1 \\cr}$$\n"
msgstr ""

#. type: display
#: original_texis/display.texi:6011
#, no-wrap
msgid ""
"  (1  0  0\n"
"   0  0  0\n"
"   0  0 -1)\n"
msgstr ""

#. type: table
#: original_texis/display.texi:6015
msgid "Emboss edge-detection uses a matrix of"
msgstr ""

#. type: tex
#: original_texis/display.texi:6020
#, no-wrap
msgid ""
"$$\\pmatrix{ 2 & -1 &  0 \\cr\n"
"   -1 &  0 &  1 \\cr\n"
"    0  & 1 & -2 \\cr}$$\n"
msgstr ""

#. type: display
#: original_texis/display.texi:6027
#, no-wrap
msgid ""
"  ( 2 -1  0\n"
"   -1  0  1\n"
"    0  1 -2)\n"
msgstr ""

#. type: item
#: original_texis/display.texi:6030
#, no-wrap
msgid "disabled"
msgstr ""

#. type: table
#: original_texis/display.texi:6032
msgid "Specifies transforming the image so that it looks disabled."
msgstr ""

#. type: item
#: original_texis/display.texi:6034
#, no-wrap
msgid ":mask @var{mask}"
msgstr ""

#. type: table
#: original_texis/display.texi:6043
msgid ""
"If @var{mask} is @code{heuristic} or @code{(heuristic @var{bg})}, build a "
"clipping mask for the image, so that the background of a frame is visible "
"behind the image.  If @var{bg} is not specified, or if @var{bg} is @code{t}, "
"determine the background color of the image by looking at the four corners "
"of the image, assuming the most frequently occurring color from the corners "
"is the background color of the image.  Otherwise, @var{bg} must be a list "
"@code{(@var{red} @var{green} @var{blue})} specifying the color to assume for "
"the background of the image."
msgstr ""

#. type: table
#: original_texis/display.texi:6047
msgid ""
"If @var{mask} is @code{nil}, remove a mask from the image, if it has one.  "
"Images in some formats include a mask which can be removed by specifying "
"@code{:mask nil}."
msgstr ""

#. type: item
#: original_texis/display.texi:6048
#, no-wrap
msgid ":pointer @var{shape}"
msgstr ""

#. type: table
#: original_texis/display.texi:6051
msgid ""
"This specifies the pointer shape when the mouse pointer is over this image.  "
"@xref{Pointer Shape}, for available pointer shapes."
msgstr ""

#. type: item
#: original_texis/display.texi:6052
#, no-wrap
msgid ":map @var{map}"
msgstr ""

#. type: cindex
#: original_texis/display.texi:6053
#, no-wrap
msgid "image maps"
msgstr ""

#. type: table
#: original_texis/display.texi:6055
msgid "This associates an image map of @dfn{hot spots} with this image."
msgstr ""

#. type: table
#: original_texis/display.texi:6059
msgid ""
"An image map is an alist where each element has the format @code{(@var{area} "
"@var{id} @var{plist})}.  An @var{area} is specified as either a rectangle, a "
"circle, or a polygon."
msgstr ""

#. type: table
#: original_texis/display.texi:6064
msgid ""
"A rectangle is a cons @code{(rect . ((@var{x0} . @var{y0}) . (@var{x1} "
". @var{y1})))} which specifies the pixel coordinates of the upper left and "
"bottom right corners of the rectangle area."
msgstr ""

#. type: table
#: original_texis/display.texi:6069
msgid ""
"A circle is a cons @code{(circle . ((@var{x0} . @var{y0}) . @var{r}))} which "
"specifies the center and the radius of the circle; @var{r} may be a float or "
"integer."
msgstr ""

#. type: table
#: original_texis/display.texi:6073
msgid ""
"A polygon is a cons @code{(poly . [@var{x0} @var{y0} @var{x1} @var{y1} "
"...])} where each pair in the vector describes one corner in the polygon."
msgstr ""

#. type: table
#: original_texis/display.texi:6080
msgid ""
"When the mouse pointer lies on a hot-spot area of an image, the @var{plist} "
"of that hot-spot is consulted; if it contains a @code{help-echo} property, "
"that defines a tool-tip for the hot-spot, and if it contains a "
"@code{pointer} property, that defines the shape of the mouse cursor when it "
"is on the hot-spot.  @xref{Pointer Shape}, for available pointer shapes."
msgstr ""

#. type: table
#: original_texis/display.texi:6085
msgid ""
"When you click the mouse when the mouse pointer is over a hot-spot, an event "
"is composed by combining the @var{id} of the hot-spot with the mouse event; "
"for instance, @code{[area4 mouse-1]} if the hot-spot's @var{id} is "
"@code{area4}."
msgstr ""

#. type: findex
#: original_texis/display.texi:6086
#, no-wrap
msgid "image-compute-scaling-factor"
msgstr ""

#. type: table
#: original_texis/display.texi:6094
msgid ""
"Note that the map's coordinates should reflect the displayed image after all "
"transforms have been done (rotation, scaling and so on), and also note that "
"Emacs (by default) performs auto-scaling of images, so to make things match "
"up, you should either specify @code{:scale 1.0} when creating the image, or "
"use the result of @code{image-compute-scaling-factor} to compute the "
"elements of the map."
msgstr ""

#. type: defun
#: original_texis/display.texi:6096
#, no-wrap
msgid "image-mask-p spec &optional frame"
msgstr ""

#. type: defun
#: original_texis/display.texi:6101
msgid ""
"This function returns @code{t} if image @var{spec} has a mask bitmap.  "
"@var{frame} is the frame on which the image will be displayed.  @var{frame} "
"@code{nil} or omitted means to use the selected frame (@pxref{Input Focus})."
msgstr ""

#. type: defun
#: original_texis/display.texi:6103
#, no-wrap
msgid "image-transforms-p &optional frame"
msgstr ""

#. type: defun
#: original_texis/display.texi:6108
msgid ""
"This function returns non-@code{nil} if @var{frame} supports image scaling "
"and rotation.  @var{frame} @code{nil} or omitted means to use the selected "
"frame (@pxref{Input Focus}).  The returned list includes symbols that "
"indicate which image transform operations are supported:"
msgstr ""

#. type: item
#: original_texis/display.texi:6110
#, no-wrap
msgid "scale"
msgstr ""

#. type: table
#: original_texis/display.texi:6114
msgid ""
"Image scaling is supported by @var{frame} via the @code{:scale}, "
"@code{:width}, @code{:height}, @code{:max-width}, and @code{:max-height} "
"properties."
msgstr ""

#. type: item
#: original_texis/display.texi:6114
#, no-wrap
msgid "rotate90"
msgstr ""

#. type: table
#: original_texis/display.texi:6117
msgid ""
"Image rotation is supported by @var{frame} if the rotation angle is an "
"integral multiple of 90 degrees."
msgstr ""

#. type: defun
#: original_texis/display.texi:6123
msgid ""
"If image transforms are not supported, @code{:rotation}, @code{:crop}, "
"@code{:width}, @code{:height}, @code{:scale}, @code{:max-width} and "
"@code{:max-height} will only be usable through ImageMagick, if available "
"(@pxref{ImageMagick Images})."
msgstr ""

#. type: cindex
#: original_texis/display.texi:6126
#, no-wrap
msgid "XBM"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:6131
msgid ""
"To use XBM format, specify @code{xbm} as the image type.  This image format "
"doesn't require an external library, so images of this type are always "
"supported."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:6133
msgid "Additional image properties supported for the @code{xbm} image type are:"
msgstr ""

#. type: item
#: original_texis/display.texi:6135 original_texis/display.texi:6291
#: original_texis/display.texi:6747
#, no-wrap
msgid ":foreground @var{foreground}"
msgstr ""

#. type: table
#: original_texis/display.texi:6140
msgid ""
"The value, @var{foreground}, should be a string specifying the image "
"foreground color, or @code{nil} for the default color.  This color is used "
"for each pixel in the XBM that is 1.  The default is the frame's foreground "
"color."
msgstr ""

#. type: item
#: original_texis/display.texi:6141 original_texis/display.texi:6251
#: original_texis/display.texi:6296 original_texis/display.texi:6753
#, no-wrap
msgid ":background @var{background}"
msgstr ""

#. type: table
#: original_texis/display.texi:6146
msgid ""
"The value, @var{background}, should be a string specifying the image "
"background color, or @code{nil} for the default color.  This color is used "
"for each pixel in the XBM that is 0.  The default is the frame's background "
"color."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:6150
msgid ""
"If you specify an XBM image using data within Emacs instead of an external "
"file, use the following three properties:"
msgstr ""

#. type: table
#: original_texis/display.texi:6155
msgid ""
"The value, @var{data}, specifies the contents of the image.  There are three "
"formats you can use for @var{data}:"
msgstr ""

#. type: itemize
#: original_texis/display.texi:6160
msgid ""
"A vector of strings or bool-vectors, each specifying one line of the image.  "
"Do specify @code{:data-height} and @code{:data-width}."
msgstr ""

#. type: itemize
#: original_texis/display.texi:6163
msgid "A string containing the same byte sequence as an XBM file would contain."
msgstr ""

#. type: itemize
#: original_texis/display.texi:6173
msgid ""
"A string or a bool-vector containing the bits of the image (plus perhaps "
"some extra bits at the end that will not be used).  It should contain at "
"least @w{@code{@var{stride} * @var{height}}} bits, where @var{stride} is the "
"smallest multiple of 8 greater than or equal to the width of the image.  In "
"this case, you should specify @code{:data-height}, @code{:data-width} and "
"@code{:stride}, both to indicate that the string contains just the bits "
"rather than a whole XBM file, and to specify the size of the image."
msgstr ""

#. type: item
#: original_texis/display.texi:6175
#, no-wrap
msgid ":stride @var{stride}"
msgstr ""

#. type: table
#: original_texis/display.texi:6178
msgid ""
"The number of bool vector entries stored for each row; the smallest multiple "
"of 8 greater than or equal to @var{width}."
msgstr ""

#. type: cindex
#: original_texis/display.texi:6182
#, no-wrap
msgid "XPM"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:6187
msgid ""
"To use XPM format, specify @code{xpm} as the image type.  The additional "
"image property @code{:color-symbols} is also meaningful with the @code{xpm} "
"image type:"
msgstr ""

#. type: item
#: original_texis/display.texi:6189
#, no-wrap
msgid ":color-symbols @var{symbols}"
msgstr ""

#. type: table
#: original_texis/display.texi:6194
msgid ""
"The value, @var{symbols}, should be an alist whose elements have the form "
"@code{(@var{name} . @var{color})}.  In each element, @var{name} is the name "
"of a color as it appears in the image file, and @var{color} specifies the "
"actual color to use for displaying that name."
msgstr ""

#. type: cindex
#: original_texis/display.texi:6198
#, no-wrap
msgid "ImageMagick images"
msgstr ""

#. type: cindex
#: original_texis/display.texi:6199
#, no-wrap
msgid "images, support for more formats"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:6206
msgid ""
"If your Emacs build has ImageMagick support, you can use the ImageMagick "
"library to load many image formats (@pxref{File Conveniences,,, emacs, The "
"GNU Emacs Manual}).  The image type symbol for images loaded via ImageMagick "
"is @code{imagemagick}, regardless of the actual underlying image format."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:6208
msgid "To check for ImageMagick support, use the following:"
msgstr ""

#. type: lisp
#: original_texis/display.texi:6211
#, no-wrap
msgid "(image-type-available-p 'imagemagick)\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:6213
#, no-wrap
msgid "imagemagick-types"
msgstr ""

#. type: defun
#: original_texis/display.texi:6218
msgid ""
"This function returns a list of image file extensions supported by the "
"current ImageMagick installation.  Each list element is a symbol "
"representing an internal ImageMagick name for an image type, such as "
"@code{BMP} for @file{.bmp} images."
msgstr ""

#. type: defopt
#: original_texis/display.texi:6220
#, no-wrap
msgid "imagemagick-enabled-types"
msgstr ""

#. type: defopt
#: original_texis/display.texi:6228
msgid ""
"The value of this variable is a list of ImageMagick image types which Emacs "
"may attempt to render using ImageMagick.  Each list element should be one of "
"the symbols in the list returned by @code{imagemagick-types}, or an "
"equivalent string.  Alternatively, a value of @code{t} enables ImageMagick "
"for all possible image types.  Regardless of the value of this variable, "
"@code{imagemagick-types-inhibit} (see below) takes precedence."
msgstr ""

#. type: defopt
#: original_texis/display.texi:6230
#, no-wrap
msgid "imagemagick-types-inhibit"
msgstr ""

#. type: defopt
#: original_texis/display.texi:6235
msgid ""
"The value of this variable lists the ImageMagick image types which should "
"never be rendered using ImageMagick, regardless of the value of "
"@code{imagemagick-enabled-types}.  A value of @code{t} disables ImageMagick "
"entirely."
msgstr ""

#. type: defvar
#: original_texis/display.texi:6237
#, no-wrap
msgid "image-format-suffixes"
msgstr ""

#. type: defvar
#: original_texis/display.texi:6245
msgid ""
"This variable is an alist mapping image types to file name extensions.  "
"Emacs uses this in conjunction with the @code{:format} image property (see "
"below) to give a hint to the ImageMagick library as to the type of an "
"image.  Each element has the form @code{(@var{type} @var{extension})}, where "
"@var{type} is a symbol specifying an image content-type, and @var{extension} "
"is a string that specifies the associated file name extension."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:6249
msgid ""
"Images loaded with ImageMagick support the following additional image "
"descriptor properties:"
msgstr ""

#. type: table
#: original_texis/display.texi:6256
msgid ""
"@var{background}, if non-@code{nil}, should be a string specifying a color, "
"which is used as the image's background color if the image supports "
"transparency.  If the value is @code{nil}, it defaults to the frame's "
"background color."
msgstr ""

#. type: item
#: original_texis/display.texi:6257
#, no-wrap
msgid ":format @var{type}"
msgstr ""

#. type: table
#: original_texis/display.texi:6262
msgid ""
"The value, @var{type}, should be a symbol specifying the type of the image "
"data, as found in @code{image-format-suffixes}.  This is used when the image "
"does not have an associated file name, to provide a hint to ImageMagick to "
"help it detect the image type."
msgstr ""

#. type: item
#: original_texis/display.texi:6263
#, no-wrap
msgid ":crop @var{geometry}"
msgstr ""

#. type: table
#: original_texis/display.texi:6273
msgid ""
"The value of @var{geometry} should be a list of the form @code{(@var{width} "
"@var{height} @var{x} @var{y})}.  @var{width} and @var{height} specify the "
"width and height of the cropped image.  If @var{x} is a positive number it "
"specifies the offset of the cropped area from the left of the original "
"image, and if negative the offset from the right.  If @var{y} is a positive "
"number it specifies the offset from the top of the original image, and if "
"negative from the bottom.  If @var{x} or @var{y} are @code{nil} or "
"unspecified the crop area will be centered on the original image."
msgstr ""

#. type: table
#: original_texis/display.texi:6278
msgid ""
"If the crop area is outside or overlaps the edge of the image it will be "
"reduced to exclude any areas outside of the image.  This means it is not "
"possible to use @code{:crop} to increase the size of the image by entering "
"large @var{width} or @var{height} values."
msgstr ""

#. type: table
#: original_texis/display.texi:6280
msgid "Cropping is performed after scaling but before rotation."
msgstr ""

#. type: cindex
#: original_texis/display.texi:6284
#, no-wrap
msgid "SVG images"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:6289
msgid ""
"SVG (Scalable Vector Graphics) is an XML format for specifying images.  SVG "
"images support the following additional image descriptor properties:"
msgstr ""

#. type: table
#: original_texis/display.texi:6295
msgid ""
"@var{foreground}, if non-@code{nil}, should be a string specifying a color, "
"which is used as the image's foreground color.  If the value is @code{nil}, "
"it defaults to the current face's foreground color."
msgstr ""

#. type: table
#: original_texis/display.texi:6301
msgid ""
"@var{background}, if non-@code{nil}, should be a string specifying a color, "
"which is used as the image's background color if the image supports "
"transparency.  If the value is @code{nil}, it defaults to the current face's "
"background color."
msgstr ""

#. type: item
#: original_texis/display.texi:6302
#, no-wrap
msgid ":css @var{css}"
msgstr ""

#. type: table
#: original_texis/display.texi:6305
msgid ""
"@var{css}, if non-@code{nil}, should be a string specifying the CSS to "
"override the default CSS used when generating the image."
msgstr ""

#. type: subsubheading
#: original_texis/display.texi:6307
#, no-wrap
msgid "SVG library"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:6312
msgid ""
"If your Emacs build has SVG support, you can create and manipulate these "
"images with the following functions from the @file{svg.el} library."
msgstr ""

#. type: defun
#: original_texis/display.texi:6313
#, no-wrap
msgid "svg-create width height &rest args"
msgstr ""

#. type: defun
#: original_texis/display.texi:6316
msgid ""
"Create a new, empty SVG image with the specified dimensions.  @var{args} is "
"an argument plist with you can specify following:"
msgstr ""

#. type: item
#: original_texis/display.texi:6318 original_texis/display.texi:6354
#, no-wrap
msgid ":stroke-width"
msgstr ""

#. type: table
#: original_texis/display.texi:6320
msgid "The default width (in pixels) of any lines created."
msgstr ""

#. type: item
#: original_texis/display.texi:6321
#, no-wrap
msgid ":stroke"
msgstr ""

#. type: table
#: original_texis/display.texi:6323
msgid "The default stroke color on any lines created."
msgstr ""

#. type: cindex
#: original_texis/display.texi:6325
#, no-wrap
msgid "SVG object"
msgstr ""

#. type: defun
#: original_texis/display.texi:6330
msgid ""
"This function returns an @dfn{SVG object}, a Lisp data structure that "
"specifies an SVG image, and all the following functions work on that "
"structure.  The argument @var{svg} in the following functions specifies such "
"an SVG object."
msgstr ""

#. type: defun
#: original_texis/display.texi:6332
#, no-wrap
msgid "svg-gradient svg id type stops"
msgstr ""

#. type: defun
#: original_texis/display.texi:6336
msgid ""
"Create a gradient in @var{svg} with identifier @var{id}.  @var{type} "
"specifies the gradient type, and can be either @code{linear} or "
"@code{radial}.  @var{stops} is a list of percentage/color pairs."
msgstr ""

#. type: defun
#: original_texis/display.texi:6339
msgid ""
"The following will create a linear gradient that goes from red at the start, "
"to green 25% of the way, to blue at the end:"
msgstr ""

#. type: lisp
#: original_texis/display.texi:6343
#, no-wrap
msgid ""
"(svg-gradient svg \"gradient1\" 'linear\n"
"              '((0 . \"red\") (25 . \"green\") (100 . \"blue\")))\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:6347
msgid ""
"The gradient created (and inserted into the SVG object) can later be used by "
"all functions that create shapes."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:6352
msgid ""
"All the following functions take an optional list of keyword parameters that "
"alter the various attributes from their default values.  Valid attributes "
"include:"
msgstr ""

#. type: table
#: original_texis/display.texi:6357
msgid "The width (in pixels) of lines drawn, and outlines around solid shapes."
msgstr ""

#. type: item
#: original_texis/display.texi:6358
#, no-wrap
msgid ":stroke-color"
msgstr ""

#. type: table
#: original_texis/display.texi:6360
msgid "The color of lines drawn, and outlines around solid shapes."
msgstr ""

#. type: item
#: original_texis/display.texi:6361
#, no-wrap
msgid ":fill-color"
msgstr ""

#. type: table
#: original_texis/display.texi:6363
msgid "The color used for solid shapes."
msgstr ""

#. type: item
#: original_texis/display.texi:6364
#, no-wrap
msgid ":id"
msgstr ""

#. type: table
#: original_texis/display.texi:6366
msgid "The identified of the shape."
msgstr ""

#. type: item
#: original_texis/display.texi:6367
#, no-wrap
msgid ":gradient"
msgstr ""

#. type: table
#: original_texis/display.texi:6370
msgid ""
"If given, this should be the identifier of a previously defined gradient "
"object."
msgstr ""

#. type: item
#: original_texis/display.texi:6371
#, no-wrap
msgid ":clip-path"
msgstr ""

#. type: table
#: original_texis/display.texi:6373
msgid "Identifier of a clip path."
msgstr ""

#. type: defun
#: original_texis/display.texi:6375
#, no-wrap
msgid "svg-rectangle svg x y width height &rest args"
msgstr ""

#. type: defun
#: original_texis/display.texi:6378
msgid ""
"Add to @var{svg} a rectangle whose upper left corner is at position "
"@var{x}/@var{y} and whose size is @var{width}/@var{height}."
msgstr ""

#. type: lisp
#: original_texis/display.texi:6381
#, no-wrap
msgid "(svg-rectangle svg 100 100 500 500 :gradient \"gradient1\")\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:6384
#, no-wrap
msgid "svg-circle svg x y radius &rest args"
msgstr ""

#. type: defun
#: original_texis/display.texi:6387
msgid ""
"Add to @var{svg} a circle whose center is at @var{x}/@var{y} and whose "
"radius is @var{radius}."
msgstr ""

#. type: defun
#: original_texis/display.texi:6389
#, no-wrap
msgid "svg-ellipse svg x y x-radius y-radius &rest args"
msgstr ""

#. type: defun
#: original_texis/display.texi:6393
msgid ""
"Add to @var{svg} an ellipse whose center is at @var{x}/@var{y}, and whose "
"horizontal radius is @var{x-radius} and the vertical radius is "
"@var{y-radius}."
msgstr ""

#. type: defun
#: original_texis/display.texi:6395
#, no-wrap
msgid "svg-line svg x1 y1 x2 y2 &rest args"
msgstr ""

#. type: defun
#: original_texis/display.texi:6398
msgid ""
"Add to @var{svg} a line that starts at @var{x1}/@var{y1} and extends to "
"@var{x2}/@var{y2}."
msgstr ""

#. type: defun
#: original_texis/display.texi:6400
#, no-wrap
msgid "svg-polyline svg points &rest args"
msgstr ""

#. type: defun
#: original_texis/display.texi:6403
msgid ""
"Add to @var{svg} a multiple-segment line (a.k.a.@: ``polyline'') that goes "
"through @var{points}, which is a list of X/Y position pairs."
msgstr ""

#. type: lisp
#: original_texis/display.texi:6407
#, no-wrap
msgid ""
"(svg-polyline svg '((200 . 100) (500 . 450) (80 . 100))\n"
"              :stroke-color \"green\")\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:6410
#, no-wrap
msgid "svg-polygon svg points &rest args"
msgstr ""

#. type: defun
#: original_texis/display.texi:6413
msgid ""
"Add a polygon to @var{svg} where @var{points} is a list of X/Y pairs that "
"describe the outer circumference of the polygon."
msgstr ""

#. type: lisp
#: original_texis/display.texi:6417
#, no-wrap
msgid ""
"(svg-polygon svg '((100 . 100) (200 . 150) (150 . 90))\n"
"             :stroke-color \"blue\" :fill-color \"red\")\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:6420
#, no-wrap
msgid "svg-path svg commands &rest args"
msgstr ""

#. type: defun
#: original_texis/display.texi:6423
msgid ""
"Add the outline of a shape to @var{svg} according to @var{commands}, see "
"@ref{SVG Path Commands}."
msgstr ""

#. type: defun
#: original_texis/display.texi:6431
msgid ""
"Coordinates by default are absolute.  To use coordinates relative to the "
"last position, or -- initially -- to the origin, set the attribute "
"@var{:relative} to @code{t}.  This attribute can be specified for the "
"function or for individual commands.  If specified for the function, then "
"all commands use relative coordinates by default.  To make an individual "
"command use absolute coordinates, set @var{:relative} to @code{nil}."
msgstr ""

#. type: lisp
#: original_texis/display.texi:6440
#, no-wrap
msgid ""
"(svg-path svg\n"
"\t  '((moveto ((100 . 100)))\n"
"\t    (lineto ((200 . 0) (0 . 200) (-200 . 0)))\n"
"\t    (lineto ((100 . 100)) :relative nil))\n"
"\t  :stroke-color \"blue\"\n"
"\t  :fill-color \"lightblue\"\n"
"\t  :relative t)\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:6443
#, no-wrap
msgid "svg-text svg text &rest args"
msgstr ""

#. type: defun
#: original_texis/display.texi:6445
msgid "Add the specified @var{text} to @var{svg}."
msgstr ""

#. type: lisp
#: original_texis/display.texi:6458
#, no-wrap
msgid ""
"(svg-text\n"
" svg \"This is a text\"\n"
" :font-size \"40\"\n"
" :font-weight \"bold\"\n"
" :stroke \"black\"\n"
" :fill \"white\"\n"
" :font-family \"impact\"\n"
" :letter-spacing \"4pt\"\n"
" :x 300\n"
" :y 400\n"
" :stroke-width 1)\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:6461
#, no-wrap
msgid "svg-embed svg image image-type datap &rest args"
msgstr ""

#. type: defun
#: original_texis/display.texi:6466
msgid ""
"Add an embedded (raster) image to @var{svg}.  If @var{datap} is @code{nil}, "
"@var{image} should be a file name; otherwise it should be a string "
"containing the image data as raw bytes.  @var{image-type} should be a "
"@acronym{MIME} image type, for instance @code{\"image/jpeg\"}."
msgstr ""

#. type: lisp
#: original_texis/display.texi:6471
#, no-wrap
msgid ""
"(svg-embed svg \"~/rms.jpg\" \"image/jpeg\" nil\n"
"           :width \"100px\" :height \"100px\"\n"
"           :x \"50px\" :y \"75px\")\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:6474
#, no-wrap
msgid "svg-embed-base-uri-image svg relative-filename &rest args"
msgstr ""

#. type: defun
#: original_texis/display.texi:6485
msgid ""
"To @var{svg} add an embedded (raster) image placed at "
"@var{relative-filename}.  @var{relative-filename} is searched inside "
"@code{file-name-directory} of the @code{:base-uri} svg image property.  "
"@code{:base-uri} specifies a (possibly non-existing) file name of the svg "
"image to be created, thus all the embedded files are searched relatively to "
"the @code{:base-uri} filename's directory.  If @code{:base-uri} is omitted, "
"then filename from where svg image is loaded is used.  Using "
"@code{:base-uri} improves the performance of embedding large images, "
"comparing to @code{svg-embed}, because all the work is done directly by "
"librsvg."
msgstr ""

#. type: lisp
#: original_texis/display.texi:6497
#, no-wrap
msgid ""
";; Embedding /tmp/subdir/rms.jpg and /tmp/another/rms.jpg\n"
"(svg-embed-base-uri-image svg \"subdir/rms.jpg\"\n"
"           :width \"100px\" :height \"100px\"\n"
"           :x \"50px\" :y \"75px\")\n"
"(svg-embed-base-uri-image svg \"another/rms.jpg\"\n"
"           :width \"100px\" :height \"100px\"\n"
"           :x \"75px\" :y \"50px\")\n"
"(svg-image svg :scale 1.0\n"
"           :base-uri \"/tmp/dummy\"\n"
"           :width 175 :height 175)\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:6500
#, no-wrap
msgid "svg-clip-path svg &rest args"
msgstr ""

#. type: defun
#: original_texis/display.texi:6504
msgid ""
"Add a clipping path to @var{svg}.  If applied to a shape via the "
"@var{:clip-path} property, parts of that shape which lie outside of the "
"clipping path are not drawn."
msgstr ""

#. type: lisp
#: original_texis/display.texi:6511
#, no-wrap
msgid ""
"(let ((clip-path (svg-clip-path svg :id \"foo\")))\n"
"  (svg-circle clip-path 200 200 175))\n"
"(svg-rectangle svg 50 50 300 300\n"
"               :fill-color \"red\"\n"
"               :clip-path \"url(#foo)\")\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:6514
#, no-wrap
msgid "svg-node svg tag &rest args"
msgstr ""

#. type: defun
#: original_texis/display.texi:6516
msgid "Add the custom node @var{tag} to @var{svg}."
msgstr ""

#. type: lisp
#: original_texis/display.texi:6521
#, no-wrap
msgid ""
"(svg-node svg\n"
"          'rect\n"
"          :width 300 :height 200 :x 50 :y 100 :fill-color \"green\")\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:6524
#, no-wrap
msgid "svg-remove svg id"
msgstr ""

#. type: defun
#: original_texis/display.texi:6526
msgid "Remove the element with identifier @code{id} from the @code{svg}."
msgstr ""

#. type: defun
#: original_texis/display.texi:6528
#, no-wrap
msgid "svg-image svg"
msgstr ""

#. type: defun
#: original_texis/display.texi:6532
msgid ""
"Finally, the @code{svg-image} takes an SVG object as its argument and "
"returns an image object suitable for use in functions like "
"@code{insert-image}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:6536
msgid "Here's a complete example that creates and inserts an image with a circle:"
msgstr ""

#. type: lisp
#: original_texis/display.texi:6543
#, no-wrap
msgid ""
"(let ((svg (svg-create 400 400 :stroke-width 10)))\n"
"  (svg-gradient svg \"gradient1\" 'linear '((0 . \"red\") (100 "
". \"blue\")))\n"
"  (svg-circle svg 200 200 100 :gradient \"gradient1\"\n"
"                  :stroke-color \"green\")\n"
"  (insert-image (svg-image svg)))\n"
msgstr ""

#. type: anchor{#1}
#: original_texis/display.texi:6546 original_texis/display.texi:6553
#, no-wrap
msgid "SVG Path Commands"
msgstr ""

#. type: cindex
#: original_texis/display.texi:6548
#, no-wrap
msgid "svg path commands"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:6553
msgid ""
"@dfn{SVG paths} allow creation of complex images by combining lines, curves, "
"arcs, and other basic shapes.  The functions described below allow invoking "
"SVG path commands from a Lisp program."
msgstr ""

#. type: deffn
#: original_texis/display.texi:6554
#, no-wrap
msgid "Command moveto points"
msgstr ""

#. type: deffn
#: original_texis/display.texi:6559
msgid ""
"Move the pen to the first point in @var{points}.  Additional points are "
"connected with lines.  @var{points} is a list of X/Y coordinate pairs.  "
"Subsequent @command{moveto} commands represent the start of a new "
"@dfn{subpath}."
msgstr ""

#. type: lisp
#: original_texis/display.texi:6563
#, no-wrap
msgid ""
"(svg-path svg '((moveto ((200 . 100) (100 . 200) (0 . 100))))\n"
"          :fill \"white\" :stroke \"black\")\n"
msgstr ""

#. type: deffn
#: original_texis/display.texi:6566
#, no-wrap
msgid "Command closepath"
msgstr ""

#. type: deffn
#: original_texis/display.texi:6569
msgid ""
"End the current subpath by connecting it back to its initial point.  A line "
"is drawn along the connection."
msgstr ""

#. type: lisp
#: original_texis/display.texi:6576
#, no-wrap
msgid ""
"(svg-path svg '((moveto ((200 . 100) (100 . 200) (0 . 100)))\n"
"                (closepath)\n"
"                (moveto ((75 . 125) (100 . 150) (125 . 125)))\n"
"                (closepath))\n"
"          :fill \"red\" :stroke \"black\")\n"
msgstr ""

#. type: deffn
#: original_texis/display.texi:6579
#, no-wrap
msgid "Command lineto points"
msgstr ""

#. type: deffn
#: original_texis/display.texi:6583
msgid ""
"Draw a line from the current point to the first element in @var{points}, a "
"list of X/Y position pairs.  If more than one point is specified, draw a "
"polyline."
msgstr ""

#. type: lisp
#: original_texis/display.texi:6587
#, no-wrap
msgid ""
"(svg-path svg '((moveto ((200 . 100)))\n"
"                (lineto ((100 . 200) (0 . 100))))\n"
"          :fill \"yellow\" :stroke \"red\")\n"
msgstr ""

#. type: deffn
#: original_texis/display.texi:6590
#, no-wrap
msgid "Command horizontal-lineto x-coordinates"
msgstr ""

#. type: deffn
#: original_texis/display.texi:6594
msgid ""
"Draw a horizontal line from the current point to the first element in "
"@var{x-coordinates}.  Specifying multiple coordinates is possible, although "
"this usually doesn't make sense."
msgstr ""

#. type: lisp
#: original_texis/display.texi:6599
#, no-wrap
msgid ""
"(svg-path svg '((moveto ((100 . 200)))\n"
"                (horizontal-lineto (300)))\n"
"          :stroke \"green\")\n"
msgstr ""

#. type: deffn
#: original_texis/display.texi:6602
#, no-wrap
msgid "Command vertical-lineto y-coordinates"
msgstr ""

#. type: deffn
#: original_texis/display.texi:6604
msgid "Draw vertical lines."
msgstr ""

#. type: lisp
#: original_texis/display.texi:6609
#, no-wrap
msgid ""
"(svg-path svg '((moveto ((200 . 100)))\n"
"                (vertical-lineto (300)))\n"
"          :stroke \"green\")\n"
msgstr ""

#. type: deffn
#: original_texis/display.texi:6612
#, no-wrap
msgid "Command curveto coordinate-sets"
msgstr ""

#. type: deffn
#: original_texis/display.texi:6620
msgid ""
"Using the first element in @var{coordinate-sets}, draw a cubic Bézier curve "
"from the current point.  If there are multiple coordinate sets, draw a "
"polybezier.  Each coordinate set is a list of the form @code{(@var{x1} "
"@var{y1} @var{x2} @var{y2} @var{x} @var{y})}, where @w{(@var{x}, @var{y})} "
"is the curve's end point.  @w{(@var{x1}, @var{y1})} and @w{(@var{x2}, "
"@var{y2})} are control points at the beginning and at the end, respectively."
msgstr ""

#. type: lisp
#: original_texis/display.texi:6626
#, no-wrap
msgid ""
"(svg-path svg '((moveto ((100 . 100)))\n"
"                (curveto ((200 100 100 200 200 200)\n"
"                          (300 200 0 100 100 100))))\n"
"          :fill \"transparent\" :stroke \"red\")\n"
msgstr ""

#. type: deffn
#: original_texis/display.texi:6629
#, no-wrap
msgid "Command smooth-curveto coordinate-sets"
msgstr ""

#. type: deffn
#: original_texis/display.texi:6640
msgid ""
"Using the first element in @var{coordinate-sets}, draw a cubic Bézier curve "
"from the current point.  If there are multiple coordinate sets, draw a "
"polybezier.  Each coordinate set is a list of the form @code{(@var{x2} "
"@var{y2} @var{x} @var{y})}, where @w{(@var{x}, @var{y})} is the curve's end "
"point and @w{(@var{x2}, @var{y2})} is the corresponding control point.  The "
"first control point is the reflection of the second control point of the "
"previous command relative to the current point, if that command was "
"@command{curveto} or @command{smooth-curveto}.  Otherwise the first control "
"point coincides with the current point."
msgstr ""

#. type: lisp
#: original_texis/display.texi:6646
#, no-wrap
msgid ""
"(svg-path svg '((moveto ((100 . 100)))\n"
"                (curveto ((200 100 100 200 200 200)))\n"
"                (smooth-curveto ((0 100 100 100))))\n"
"          :fill \"transparent\" :stroke \"blue\")\n"
msgstr ""

#. type: deffn
#: original_texis/display.texi:6649
#, no-wrap
msgid "Command quadratic-bezier-curveto coordinate-sets"
msgstr ""

#. type: deffn
#: original_texis/display.texi:6656
msgid ""
"Using the first element in @var{coordinate-sets}, draw a quadratic Bézier "
"curve from the current point.  If there are multiple coordinate sets, draw a "
"polybezier.  Each coordinate set is a list of the form @code{(@var{x1} "
"@var{y1} @var{x} @var{y})}, where @w{(@var{x}, @var{y})} is the curve's end "
"point and @w{(@var{x1}, @var{y1})} is the control point."
msgstr ""

#. type: lisp
#: original_texis/display.texi:6664
#, no-wrap
msgid ""
"(svg-path svg '((moveto ((200 . 100)))\n"
"                (quadratic-bezier-curveto ((300 100 300 200)))\n"
"                (quadratic-bezier-curveto ((300 300 200 300)))\n"
"                (quadratic-bezier-curveto ((100 300 100 200)))\n"
"                (quadratic-bezier-curveto ((100 100 200 100))))\n"
"          :fill \"transparent\" :stroke \"pink\")\n"
msgstr ""

#. type: deffn
#: original_texis/display.texi:6667
#, no-wrap
msgid "Command smooth-quadratic-bezier-curveto coordinate-sets"
msgstr ""

#. type: deffn
#: original_texis/display.texi:6677
msgid ""
"Using the first element in @var{coordinate-sets}, draw a quadratic Bézier "
"curve from the current point.  If there are multiple coordinate sets, draw a "
"polybezier.  Each coordinate set is a list of the form @code{(@var{x} "
"@var{y})}, where @w{(@var{x}, @var{y})} is the curve's end point.  The "
"control point is the reflection of the control point of the previous command "
"relative to the current point, if that command was "
"@command{quadratic-bezier-curveto} or "
"@command{smooth-quadratic-bezier-curveto}.  Otherwise the control point "
"coincides with the current point."
msgstr ""

#. type: lisp
#: original_texis/display.texi:6685
#, no-wrap
msgid ""
"(svg-path svg '((moveto ((200 . 100)))\n"
"                (quadratic-bezier-curveto ((300 100 300 200)))\n"
"                (smooth-quadratic-bezier-curveto ((200 300)))\n"
"                (smooth-quadratic-bezier-curveto ((100 200)))\n"
"                (smooth-quadratic-bezier-curveto ((200 100))))\n"
"          :fill \"transparent\" :stroke \"lightblue\")\n"
msgstr ""

#. type: deffn
#: original_texis/display.texi:6688
#, no-wrap
msgid "Command elliptical-arc coordinate-sets"
msgstr ""

#. type: deffn
#: original_texis/display.texi:6696
msgid ""
"Using the first element in @var{coordinate-sets}, draw an elliptical arc "
"from the current point.  If there are multiple coordinate sets, draw a "
"sequence of elliptical arcs.  Each coordinate set is a list of the form "
"@code{(@var{rx} @var{ry} @var{x} @var{y})}, where @w{(@var{x}, @var{y})} is "
"the end point of the ellipse, and @w{(@var{rx}, @var{ry})} are its radii.  "
"Attributes may be appended to the list:"
msgstr ""

#. type: item
#: original_texis/display.texi:6698
#, no-wrap
msgid ":x-axis-rotation"
msgstr ""

#. type: table
#: original_texis/display.texi:6701
msgid ""
"The angle in degrees by which the x-axis of the ellipse is rotated relative "
"to the x-axis of the current coordinate system."
msgstr ""

#. type: item
#: original_texis/display.texi:6702
#, no-wrap
msgid ":large-arc"
msgstr ""

#. type: table
#: original_texis/display.texi:6706
msgid ""
"If set to @code{t}, draw an arc sweep greater than or equal to 180 degrees.  "
"Otherwise, draw an arc sweep smaller than or equal to 180 degrees."
msgstr ""

#. type: item
#: original_texis/display.texi:6707
#, no-wrap
msgid ":sweep"
msgstr ""

#. type: table
#: original_texis/display.texi:6710
msgid ""
"If set to @code{t}, draw an arc in @dfn{positive angle direction}.  "
"Otherwise, draw it in @dfn{negative angle direction}."
msgstr ""

#. type: lisp
#: original_texis/display.texi:6734
#, no-wrap
msgid ""
"(svg-path svg '((moveto ((200 . 250)))\n"
"                (elliptical-arc ((75 75 200 350))))\n"
"          :fill \"transparent\" :stroke \"red\")\n"
"(svg-path svg '((moveto ((200 . 250)))\n"
"                (elliptical-arc ((75 75 200 350 :large-arc t))))\n"
"          :fill \"transparent\" :stroke \"green\")\n"
"(svg-path svg '((moveto ((200 . 250)))\n"
"                (elliptical-arc ((75 75 200 350 :sweep t))))\n"
"          :fill \"transparent\" :stroke \"blue\")\n"
"(svg-path svg '((moveto ((200 . 250)))\n"
"                (elliptical-arc ((75 75 200 350 :large-arc t\n"
"                                     :sweep t))))\n"
"          :fill \"transparent\" :stroke \"gray\")\n"
"(svg-path svg '((moveto ((160 . 100)))\n"
"                (elliptical-arc ((40 100 80 0)))\n"
"                (elliptical-arc ((40 100 -40 -70\n"
"                                     :x-axis-rotation -120)))\n"
"                (elliptical-arc ((40 100 -40 70\n"
"                                     :x-axis-rotation -240))))\n"
"          :stroke \"pink\" :fill \"lightblue\"\n"
"          :relative t)\n"
msgstr ""

#. type: cindex
#: original_texis/display.texi:6740
#, no-wrap
msgid "PBM"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:6745
msgid ""
"For PBM images, specify image type @code{pbm}.  Color, gray-scale and "
"monochromatic images are supported.  For mono PBM images, two additional "
"image properties are supported."
msgstr ""

#. type: table
#: original_texis/display.texi:6752
msgid ""
"The value, @var{foreground}, should be a string specifying the image "
"foreground color, or @code{nil} for the default color.  This color is used "
"for each pixel in the PBM that is 1.  The default is the frame's foreground "
"color."
msgstr ""

#. type: table
#: original_texis/display.texi:6758
msgid ""
"The value, @var{background}, should be a string specifying the image "
"background color, or @code{nil} for the default color.  This color is used "
"for each pixel in the PBM that is 0.  The default is the frame's background "
"color."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:6762
msgid "The remaining image types that Emacs can support are:"
msgstr ""

#. type: item
#: original_texis/display.texi:6764
#, no-wrap
msgid "GIF"
msgstr ""

#. type: table
#: original_texis/display.texi:6767
msgid ""
"Image type @code{gif}.  Supports the @code{:index} property.  "
"@xref{Multi-Frame Images}."
msgstr ""

#. type: item
#: original_texis/display.texi:6768
#, no-wrap
msgid "JPEG"
msgstr ""

#. type: table
#: original_texis/display.texi:6770
msgid "Image type @code{jpeg}."
msgstr ""

#. type: item
#: original_texis/display.texi:6771
#, no-wrap
msgid "PNG"
msgstr ""

#. type: table
#: original_texis/display.texi:6773
msgid "Image type @code{png}."
msgstr ""

#. type: item
#: original_texis/display.texi:6774
#, no-wrap
msgid "TIFF"
msgstr ""

#. type: table
#: original_texis/display.texi:6777
msgid ""
"Image type @code{tiff}.  Supports the @code{:index} property.  "
"@xref{Multi-Frame Images}."
msgstr ""

#. type: item
#: original_texis/display.texi:6778
#, no-wrap
msgid "WebP"
msgstr ""

#. type: table
#: original_texis/display.texi:6780
msgid "Image type @code{webp}."
msgstr ""

#. type: cindex
#: original_texis/display.texi:6784
#, no-wrap
msgid "define image"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:6788
msgid ""
"The functions @code{create-image}, @code{defimage} and @code{find-image} "
"provide convenient ways to create image descriptors."
msgstr ""

#. type: defun
#: original_texis/display.texi:6789
#, no-wrap
msgid "create-image file-or-data &optional type data-p &rest props"
msgstr ""

#. type: defun
#: original_texis/display.texi:6796
msgid ""
"This function creates and returns an image descriptor which uses the data in "
"@var{file-or-data}.  @var{file-or-data} can be a file name or a string "
"containing the image data; @var{data-p} should be @code{nil} for the former "
"case, non-@code{nil} for the latter case.  If @var{file-or-data} is a "
"relative file name, the function will search for it in directories mentioned "
"in @code{image-load-path}."
msgstr ""

#. type: defun
#: original_texis/display.texi:6801
msgid ""
"The optional argument @var{type} is a symbol specifying the image type.  If "
"@var{type} is omitted or @code{nil}, @code{create-image} tries to determine "
"the image type from the file's first few bytes, or else from the file's "
"name."
msgstr ""

#. type: defun
#: original_texis/display.texi:6804
msgid ""
"The remaining arguments, @var{props}, specify additional image "
"properties---for example,"
msgstr ""

#. type: example
#: original_texis/display.texi:6807
#, no-wrap
msgid "(create-image \"foo.xpm\" 'xpm nil :mask 'heuristic)\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:6813
msgid ""
"@xref{Image Descriptors}, for the list of supported properties.  Some "
"properties are specific to certain image types, and are described in "
"subsections specific to those types."
msgstr ""

#. type: defun
#: original_texis/display.texi:6816
msgid ""
"The function returns @code{nil} if images of this type are not supported.  "
"Otherwise it returns an image descriptor."
msgstr ""

#. type: defmac
#: original_texis/display.texi:6818
#, no-wrap
msgid "defimage symbol specs &optional doc"
msgstr ""

#. type: defmac
#: original_texis/display.texi:6822
msgid ""
"This macro defines @var{symbol} as an image name.  The arguments @var{specs} "
"is a list which specifies how to display the image.  The third argument, "
"@var{doc}, is an optional documentation string."
msgstr ""

#. type: defmac
#: original_texis/display.texi:6830
msgid ""
"Each argument in @var{specs} has the form of a property list, and each one "
"should specify at least the @code{:type} property and either the "
"@code{:file} or the @code{:data} property.  The value of @code{:type} should "
"be a symbol specifying the image type, the value of @code{:file} is the file "
"to load the image from, and the value of @code{:data} is a string containing "
"the actual image data.  Here is an example:"
msgstr ""

#. type: example
#: original_texis/display.texi:6835
#, no-wrap
msgid ""
"(defimage test-image\n"
"  ((:type xpm :file \"~/test1.xpm\")\n"
"   (:type xbm :file \"~/test1.xbm\")))\n"
msgstr ""

#. type: defmac
#: original_texis/display.texi:6841
msgid ""
"@code{defimage} tests each argument, one by one, to see if it is "
"usable---that is, if the type is supported and the file exists.  The first "
"usable argument is used to make an image descriptor which is stored in "
"@var{symbol}."
msgstr ""

#. type: defmac
#: original_texis/display.texi:6844
msgid ""
"If none of the alternatives will work, then @var{symbol} is defined as "
"@code{nil}."
msgstr ""

#. type: defun
#: original_texis/display.texi:6846
#, no-wrap
msgid "image-property image property"
msgstr ""

#. type: defun
#: original_texis/display.texi:6850
msgid ""
"Return the value of @var{property} in @var{image}.  Properties can be set by "
"using @code{setf}.  Setting a property to @code{nil} will remove the "
"property from the image."
msgstr ""

#. type: defun
#: original_texis/display.texi:6852
#, no-wrap
msgid "find-image specs"
msgstr ""

#. type: defun
#: original_texis/display.texi:6855
msgid ""
"This function provides a convenient way to find an image satisfying one of a "
"list of image specifications @var{specs}."
msgstr ""

#. type: defun
#: original_texis/display.texi:6865
msgid ""
"Each specification in @var{specs} is a property list with contents depending "
"on image type.  All specifications must at least contain the properties "
"@code{:type @var{type}} and either @w{@code{:file @var{file}}} or "
"@w{@code{:data @var{data}}}, where @var{type} is a symbol specifying the "
"image type, e.g., @code{xbm}, @var{file} is the file to load the image from, "
"and @var{data} is a string containing the actual image data.  The first "
"specification in the list whose @var{type} is supported, and @var{file} "
"exists, is used to construct the image specification to be returned.  If no "
"specification is satisfied, @code{nil} is returned."
msgstr ""

#. type: defun
#: original_texis/display.texi:6867
msgid "The image is looked for in @code{image-load-path}."
msgstr ""

#. type: defopt
#: original_texis/display.texi:6869
#, no-wrap
msgid "image-load-path"
msgstr ""

#. type: defopt
#: original_texis/display.texi:6875
msgid ""
"This variable's value is a list of locations in which to search for image "
"files.  If an element is a string or a variable symbol whose value is a "
"string, the string is taken to be the name of a directory to search.  If an "
"element is a variable symbol whose value is a list, that is taken to be a "
"list of directories to search."
msgstr ""

#. type: defopt
#: original_texis/display.texi:6884
msgid ""
"The default is to search in the @file{images} subdirectory of the directory "
"specified by @code{data-directory}, then the directory specified by "
"@code{data-directory}, and finally in the directories in @code{load-path}.  "
"Subdirectories are not automatically included in the search, so if you put "
"an image file in a subdirectory, you have to supply the subdirectory "
"explicitly.  For example, to find the image @file{images/foo/bar.xpm} within "
"@code{data-directory}, you should specify the image as follows:"
msgstr ""

#. type: example
#: original_texis/display.texi:6887
#, no-wrap
msgid "(defimage foo-image '((:type xpm :file \"foo/bar.xpm\")))\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:6890
#, no-wrap
msgid "image-load-path-for-library library image &optional path no-error"
msgstr ""

#. type: defun
#: original_texis/display.texi:6893
msgid ""
"This function returns a suitable search path for images used by the Lisp "
"package @var{library}."
msgstr ""

#. type: defun
#: original_texis/display.texi:6900
msgid ""
"The function searches for @var{image} first using @code{image-load-path}, "
"excluding @file{@code{data-directory}/images}, and then in @code{load-path}, "
"followed by a path suitable for @var{library}, which includes "
"@file{../../etc/images} and @file{../etc/images} relative to the library "
"file itself, and finally in @file{@code{data-directory}/images}."
msgstr ""

#. type: defun
#: original_texis/display.texi:6905
msgid ""
"Then this function returns a list of directories which contains first the "
"directory in which @var{image} was found, followed by the value of "
"@code{load-path}.  If @var{path} is given, it is used instead of "
"@code{load-path}."
msgstr ""

#. type: defun
#: original_texis/display.texi:6909
msgid ""
"If @var{no-error} is non-@code{nil} and a suitable path can't be found, "
"don't signal an error.  Instead, return a list of directories as before, "
"except that @code{nil} appears in place of the image directory."
msgstr ""

#. type: defun
#: original_texis/display.texi:6911
msgid "Here is an example of using @code{image-load-path-for-library}:"
msgstr ""

#. type: example
#: original_texis/display.texi:6919
#, no-wrap
msgid ""
"(defvar image-load-path) ; shush compiler\n"
"(let* ((load-path (image-load-path-for-library\n"
"                    \"mh-e\" \"mh-logo.xpm\"))\n"
"       (image-load-path (cons (car load-path)\n"
"                              image-load-path)))\n"
"  (mh-tool-bar-folder-buttons-init))\n"
msgstr ""

#. type: vindex
#: original_texis/display.texi:6922
#, no-wrap
msgid "image-scaling-factor"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:6928
msgid ""
"Images are automatically scaled when created based on the "
"@code{image-scaling-factor} variable.  The value is either a floating point "
"number (where numbers higher than 1 means to increase the size and lower "
"means to shrink the size), or the symbol @code{auto}, which will compute a "
"scaling factor based on the font pixel size."
msgstr ""

#. type: cindex
#: original_texis/display.texi:6931
#, no-wrap
msgid "show image"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:6936
msgid ""
"You can use an image descriptor by setting up the @code{display} property "
"yourself, but it is easier to use the functions in this section."
msgstr ""

#. type: defun
#: original_texis/display.texi:6937
#, no-wrap
msgid "insert-image image &optional string area slice inhibit-isearch"
msgstr ""

#. type: defun
#: original_texis/display.texi:6944
msgid ""
"This function inserts @var{image} in the current buffer at point.  The value "
"@var{image} should be an image descriptor; it could be a value returned by "
"@code{create-image}, or the value of a symbol defined with @code{defimage}.  "
"The argument @var{string} specifies the text to put in the buffer to hold "
"the image.  If it is omitted or @code{nil}, @code{insert-image} uses "
"@code{\" \"} by default."
msgstr ""

#. type: defun
#: original_texis/display.texi:6950 original_texis/display.texi:6997
msgid ""
"The argument @var{area} specifies whether to put the image in a margin.  If "
"it is @code{left-margin}, the image appears in the left margin; "
"@code{right-margin} specifies the right margin.  If @var{area} is @code{nil} "
"or omitted, the image is displayed at point within the buffer's text."
msgstr ""

#. type: defun
#: original_texis/display.texi:6961
msgid ""
"The argument @var{slice} specifies a slice of the image to insert.  If "
"@var{slice} is @code{nil} or omitted the whole image is inserted.  (However, "
"note that images are chopped on display at the window's right edge, because "
"wrapping images is not supported.)  Otherwise, @var{slice} is a list "
"@code{(@var{x} @var{y} @var{width} @var{height})} which specifies the "
"@var{x} and @var{y} positions and @var{width} and @var{height} of the image "
"area to insert.  Integer values are in units of pixels.  A floating-point "
"number in the range 0.0--1.0 stands for that fraction of the width or height "
"of the entire image."
msgstr ""

#. type: defun
#: original_texis/display.texi:6967
msgid ""
"Internally, this function inserts @var{string} in the buffer, and gives it a "
"@code{display} property which specifies @var{image}.  @xref{Display "
"Property}.  By default, doing interactive searches in the buffer will "
"consider @var{string} when searching.  If @var{inhibit-isearch} is "
"non-@code{nil}, this is inhibited."
msgstr ""

#. type: cindex
#: original_texis/display.texi:6969
#, no-wrap
msgid "slice, image"
msgstr ""

#. type: cindex
#: original_texis/display.texi:6970
#, no-wrap
msgid "image slice"
msgstr ""

#. type: defun
#: original_texis/display.texi:6971
#, no-wrap
msgid "insert-sliced-image image &optional string area rows cols"
msgstr ""

#. type: defun
#: original_texis/display.texi:6975
msgid ""
"This function inserts @var{image} in the current buffer at point, like "
"@code{insert-image}, but splits the image into @var{rows}x@var{cols} equally "
"sized slices."
msgstr ""

#. type: defun
#: original_texis/display.texi:6980
msgid ""
"Emacs displays each slice as a separate image, and allows more intuitive "
"scrolling up/down, instead of jumping up/down the entire image when paging "
"through a buffer that displays (large) images."
msgstr ""

#. type: defun
#: original_texis/display.texi:6982
#, no-wrap
msgid "put-image image pos &optional string area"
msgstr ""

#. type: defun
#: original_texis/display.texi:6988
msgid ""
"This function puts image @var{image} in front of @var{pos} in the current "
"buffer.  The argument @var{pos} should be an integer or a marker.  It "
"specifies the buffer position where the image should appear.  The argument "
"@var{string} specifies the text that should hold the image as an alternative "
"to the default @samp{x}."
msgstr ""

#. type: defun
#: original_texis/display.texi:6991
msgid ""
"The argument @var{image} must be an image descriptor, perhaps returned by "
"@code{create-image} or stored by @code{defimage}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7001
msgid ""
"Internally, this function creates an overlay, and gives it a "
"@code{before-string} property containing text that has a @code{display} "
"property whose value is the image.  (Whew! that was a mouthful@dots{})"
msgstr ""

#. type: defun
#: original_texis/display.texi:7003
#, no-wrap
msgid "remove-images start end &optional buffer"
msgstr ""

#. type: defun
#: original_texis/display.texi:7007
msgid ""
"This function removes images in @var{buffer} between positions @var{start} "
"and @var{end}.  If @var{buffer} is omitted or @code{nil}, images are removed "
"from the current buffer."
msgstr ""

#. type: defun
#: original_texis/display.texi:7011
msgid ""
"This removes only images that were put into @var{buffer} the way "
"@code{put-image} does it, not images that were inserted with "
"@code{insert-image} or in other ways."
msgstr ""

#. type: defun
#: original_texis/display.texi:7013
#, no-wrap
msgid "image-size spec &optional pixels frame"
msgstr ""

#. type: cindex
#: original_texis/display.texi:7014
#, no-wrap
msgid "size of image"
msgstr ""

#. type: defun
#: original_texis/display.texi:7022
msgid ""
"This function returns the size of an image as a pair @w{@code{(@var{width} "
". @var{height})}}.  @var{spec} is an image specification.  @var{pixels} "
"non-@code{nil} means return sizes measured in pixels, otherwise return sizes "
"measured in the default character size of @var{frame} (@pxref{Frame Font}).  "
"@var{frame} is the frame on which the image will be displayed.  @var{frame} "
"@code{nil} or omitted means use the selected frame (@pxref{Input Focus})."
msgstr ""

#. type: defvar
#: original_texis/display.texi:7024
#, no-wrap
msgid "max-image-size"
msgstr ""

#. type: defvar
#: original_texis/display.texi:7028
msgid ""
"This variable is used to define the maximum size of image that Emacs will "
"load.  Emacs will refuse to load (and display) any image that is larger than "
"this limit."
msgstr ""

#. type: defvar
#: original_texis/display.texi:7034
msgid ""
"If the value is an integer, it directly specifies the maximum image height "
"and width, measured in pixels.  If it is floating point, it specifies the "
"maximum image height and width as a ratio to the frame height and width.  If "
"the value is non-numeric, there is no explicit limit on the size of images."
msgstr ""

#. type: defvar
#: original_texis/display.texi:7040
msgid ""
"The purpose of this variable is to prevent unreasonably large images from "
"accidentally being loaded into Emacs.  It only takes effect the first time "
"an image is loaded.  Once an image is placed in the image cache, it can "
"always be displayed, even if the value of @code{max-image-size} is "
"subsequently changed (@pxref{Image Cache})."
msgstr ""

#. type: defun
#: original_texis/display.texi:7042
#, no-wrap
msgid "image-at-point-p"
msgstr ""

#. type: defun
#: original_texis/display.texi:7045
msgid ""
"This function returns @code{t} if point is on an image, and @code{nil} "
"otherwise."
msgstr ""

#. type: cindex
#: original_texis/display.texi:7047
#, no-wrap
msgid "operations on images"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7051
msgid ""
"Images inserted with the insertion functions above also get a local keymap "
"installed in the text properties (or overlays) that span the displayed "
"image.  This keymap defines the following commands:"
msgstr ""

#. type: findex
#: original_texis/display.texi:7053
#, no-wrap
msgid "image-increase-size"
msgstr ""

#. type: item
#: original_texis/display.texi:7054
#, no-wrap
msgid "i +"
msgstr ""

#. type: table
#: original_texis/display.texi:7056
msgid "Increase the image size (@code{image-increase-size})"
msgstr ""

#. type: findex
#: original_texis/display.texi:7057
#, no-wrap
msgid "image-decrease-size"
msgstr ""

#. type: item
#: original_texis/display.texi:7058
#, no-wrap
msgid "i -"
msgstr ""

#. type: table
#: original_texis/display.texi:7060
msgid "Decrease the image size (@code{image-decrease-size})."
msgstr ""

#. type: findex
#: original_texis/display.texi:7061
#, no-wrap
msgid "image-rotate"
msgstr ""

#. type: item
#: original_texis/display.texi:7062
#, no-wrap
msgid "i r"
msgstr ""

#. type: table
#: original_texis/display.texi:7064
msgid "Rotate the image (@code{image-rotate})."
msgstr ""

#. type: findex
#: original_texis/display.texi:7065
#, no-wrap
msgid "image-flip-horizontally"
msgstr ""

#. type: item
#: original_texis/display.texi:7066
#, no-wrap
msgid "i h"
msgstr ""

#. type: table
#: original_texis/display.texi:7068
msgid "Flip the image horizontally (@code{image-flip-horizontally})."
msgstr ""

#. type: findex
#: original_texis/display.texi:7069
#, no-wrap
msgid "image-flip-vertically"
msgstr ""

#. type: item
#: original_texis/display.texi:7070
#, no-wrap
msgid "i v"
msgstr ""

#. type: table
#: original_texis/display.texi:7072
msgid "Flip the image vertically (@code{image-flip-vertically})."
msgstr ""

#. type: findex
#: original_texis/display.texi:7073
#, no-wrap
msgid "image-save"
msgstr ""

#. type: item
#: original_texis/display.texi:7074
#, no-wrap
msgid "i o"
msgstr ""

#. type: table
#: original_texis/display.texi:7076
msgid "Save the image to a file (@code{image-save})."
msgstr ""

#. type: findex
#: original_texis/display.texi:7077
#, no-wrap
msgid "image-crop"
msgstr ""

#. type: item
#: original_texis/display.texi:7078
#, no-wrap
msgid "i c"
msgstr ""

#. type: table
#: original_texis/display.texi:7080
msgid "Interactively crop the image (@code{image-crop})."
msgstr ""

#. type: findex
#: original_texis/display.texi:7081
#, no-wrap
msgid "image-cut"
msgstr ""

#. type: item
#: original_texis/display.texi:7082
#, no-wrap
msgid "i x"
msgstr ""

#. type: table
#: original_texis/display.texi:7084
msgid "Interactively cut a rectangle from the image (@code{image-cut})."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7088
msgid ""
"@xref{Image Mode,,, emacs, The GNU Emacs Manual}, for more details about "
"these image-specific key bindings."
msgstr ""

#. type: cindex
#: original_texis/display.texi:7091
#, no-wrap
msgid "multi-frame images"
msgstr ""

#. type: cindex
#: original_texis/display.texi:7093
#, no-wrap
msgid "animation"
msgstr ""

#. type: cindex
#: original_texis/display.texi:7094
#, no-wrap
msgid "image animation"
msgstr ""

#. type: cindex
#: original_texis/display.texi:7095
#, no-wrap
msgid "image frames"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7100
msgid ""
"Some image files can contain more than one image.  We say that there are "
"multiple ``frames'' in the image.  At present, Emacs supports multiple "
"frames for GIF, TIFF, and certain ImageMagick formats such as DJVM@."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7104
msgid ""
"The frames can be used either to represent multiple pages (this is usually "
"the case with multi-frame TIFF files, for example), or to create animation "
"(usually the case with multi-frame GIF files)."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7107
msgid ""
"A multi-frame image has a property @code{:index}, whose value is an integer "
"(counting from 0) that specifies which frame is being displayed."
msgstr ""

#. type: defun
#: original_texis/display.texi:7108
#, no-wrap
msgid "image-multi-frame-p image"
msgstr ""

#. type: defun
#: original_texis/display.texi:7116
msgid ""
"This function returns non-@code{nil} if @var{image} contains more than one "
"frame.  The actual return value is a cons @code{(@var{nimages} "
". @var{delay})}, where @var{nimages} is the number of frames and @var{delay} "
"is the delay in seconds between them, or @code{nil} if the image does not "
"specify a delay.  Images that are intended to be animated usually specify a "
"frame delay, whereas ones that are intended to be treated as multiple pages "
"do not."
msgstr ""

#. type: defun
#: original_texis/display.texi:7118
#, no-wrap
msgid "image-current-frame image"
msgstr ""

#. type: defun
#: original_texis/display.texi:7121
msgid ""
"This function returns the index of the current frame number for @var{image}, "
"counting from 0."
msgstr ""

#. type: defun
#: original_texis/display.texi:7123
#, no-wrap
msgid "image-show-frame image n &optional nocheck"
msgstr ""

#. type: defun
#: original_texis/display.texi:7129
msgid ""
"This function switches @var{image} to frame number @var{n}.  It replaces a "
"frame number outside the valid range with that of the end of the range, "
"unless @var{nocheck} is non-@code{nil}.  If @var{image} does not contain a "
"frame with the specified number, the image displays as a hollow box."
msgstr ""

#. type: defun
#: original_texis/display.texi:7131
#, no-wrap
msgid "image-animate image &optional index limit"
msgstr ""

#. type: defun
#: original_texis/display.texi:7137
msgid ""
"This function animates @var{image}.  The optional integer @var{index} "
"specifies the frame from which to start (default 0).  The optional argument "
"@var{limit} controls the length of the animation.  If omitted or @code{nil}, "
"the image animates once only; if @code{t} it loops forever; if a number "
"animation stops after that many seconds."
msgstr ""

#. type: vindex
#: original_texis/display.texi:7139
#, no-wrap
msgid "image-minimum-frame-delay"
msgstr ""

#. type: vindex
#: original_texis/display.texi:7140
#, no-wrap
msgid "image-default-frame-delay"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7145
msgid ""
"minimum frame delay of 0.01 (@code{image-minimum-frame-delay}) seconds.  If "
"the image itself does not specify a delay, Emacs uses "
"@code{image-default-frame-delay}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7146
#, no-wrap
msgid "image-animate-timer image"
msgstr ""

#. type: defun
#: original_texis/display.texi:7149
msgid ""
"This function returns the timer responsible for animating @var{image}, if "
"there is one."
msgstr ""

#. type: cindex
#: original_texis/display.texi:7154
#, no-wrap
msgid "image cache"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7161
msgid ""
"Emacs caches images so that it can display them again more efficiently.  "
"When Emacs displays an image, it searches the image cache for an existing "
"image specification @code{equal} to the desired specification.  If a match "
"is found, the image is displayed from the cache.  Otherwise, Emacs loads the "
"image normally."
msgstr ""

#. type: defun
#: original_texis/display.texi:7162
#, no-wrap
msgid "image-flush spec &optional frame"
msgstr ""

#. type: defun
#: original_texis/display.texi:7168
msgid ""
"This function removes the image with specification @var{spec} from the image "
"cache of frame @var{frame}.  Image specifications are compared using "
"@code{equal}.  If @var{frame} is @code{nil}, it defaults to the selected "
"frame.  If @var{frame} is @code{t}, the image is flushed on all existing "
"frames."
msgstr ""

#. type: defun
#: original_texis/display.texi:7173
msgid ""
"In Emacs's current implementation, each graphical terminal possesses an "
"image cache, which is shared by all the frames on that terminal "
"(@pxref{Multiple Terminals}).  Thus, refreshing an image in one frame also "
"refreshes it in all other frames on the same terminal."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7182
msgid ""
"One use for @code{image-flush} is to tell Emacs about a change in an image "
"file.  If an image specification contains a @code{:file} property, the image "
"is cached based on the file's contents when the image is first displayed.  "
"Even if the file subsequently changes, Emacs continues displaying the old "
"version of the image.  Calling @code{image-flush} flushes the image from the "
"cache, forcing Emacs to re-read the file the next time it needs to display "
"that image."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7188
msgid ""
"Another use for @code{image-flush} is for memory conservation.  If your Lisp "
"program creates a large number of temporary images over a period much "
"shorter than @code{image-cache-eviction-delay} (see below), you can opt to "
"flush unused images yourself, instead of waiting for Emacs to do it "
"automatically."
msgstr ""

#. type: defun
#: original_texis/display.texi:7189
#, no-wrap
msgid "clear-image-cache &optional filter"
msgstr ""

#. type: defun
#: original_texis/display.texi:7197
msgid ""
"This function clears an image cache, removing all the images stored in it.  "
"If @var{filter} is omitted or @code{nil}, it clears the cache for the "
"selected frame.  If @var{filter} is a frame, it clears the cache for that "
"frame.  If @var{filter} is @code{t}, all image caches are cleared.  "
"Otherwise, @var{filter} is taken to be a file name, and all images "
"associated with that file name are removed from all image caches."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7202
msgid ""
"If an image in the image cache has not been displayed for a specified period "
"of time, Emacs removes it from the cache and frees the associated memory."
msgstr ""

#. type: defvar
#: original_texis/display.texi:7203
#, no-wrap
msgid "image-cache-eviction-delay"
msgstr ""

#. type: defvar
#: original_texis/display.texi:7207
msgid ""
"This variable specifies the number of seconds an image can remain in the "
"cache without being displayed.  When an image is not displayed for this "
"length of time, Emacs removes it from the image cache."
msgstr ""

#. type: defvar
#: original_texis/display.texi:7210
msgid ""
"Under some circumstances, if the number of images in the cache grows too "
"large, the actual eviction delay may be shorter than this."
msgstr ""

#. type: defvar
#: original_texis/display.texi:7214
msgid ""
"If the value is @code{nil}, Emacs does not remove images from the cache "
"except when you explicitly clear it.  This mode can be useful for debugging."
msgstr ""

#. type: defun
#: original_texis/display.texi:7216
#, no-wrap
msgid "image-cache-size"
msgstr ""

#. type: defun
#: original_texis/display.texi:7220
msgid ""
"This function returns the total size of the current image cache, in bytes.  "
"An image of size 200x100 with 24 bits per color will have a cache size of "
"60000 bytes, for instance."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7231
msgid ""
"Emacs sometimes uses buttons (for clicking on) or small graphics (to "
"illustrate something).  Since Emacs is available on a wide variety of "
"systems with different capabilities, and users have different preferences, "
"Emacs provides a facility to handle this in a convenient way, allowing "
"customization, graceful degradation, accessibility, as well as themability: "
"@dfn{Icons}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7234
msgid "The central macro here is @code{define-icon}, and here's a simple example:"
msgstr ""

#. type: lisp
#: original_texis/display.texi:7244
#, no-wrap
msgid ""
"(define-icon outline-open button\n"
"  '((image \"right.svg\" \"open.xpm\" \"open.pbm\" :height line)\n"
"    (emoji \"▶️\")\n"
"    (symbol \"▶\" \"➤\")\n"
"    (text \"open\" :face icon-button))\n"
"  \"Icon used for buttons for opening a section in outline buffers.\"\n"
"  :version \"29.1\"\n"
"  :help-echo \"Open this section\")\n"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7250
msgid ""
"Which alternative will actually be displayed depends on the value of the "
"user option @code{icon-preference} (@pxref{Icons,,, emacs, The GNU Emacs "
"Manual}) and on the results of run-time checks for what the current frame's "
"terminal can actually display."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7257
msgid ""
"The macro in the example above defines @code{outline-open} as an icon, and "
"inherits properties from the icon called @code{button} (so this is meant as "
"a clickable button to be inserted in a buffer).  It is followed by a list of "
"@dfn{icon types} along with the actual icon shapes themselves.  In addition, "
"there's a doc string and various keywords that contain additional "
"information and properties."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7269
msgid ""
"To instantiate an icon, you use @code{icon-string}, which will consult the "
"current Customize theming, and the @code{icon-preference} user option, and "
"finally what the Emacs is able to actually display.  If "
"@code{icon-preference} is @code{(image emoji symbol text)} (i.e., allowing "
"all of these forms of icons), in this case, @code{icon-string} will first "
"check that Emacs is able to display images at all, and then whether it has "
"support for each of those different image formats.  If that fails, Emacs "
"will check whether Emacs can display emojis (in the current frame).  If that "
"fails, it'll check whether it can display the symbol in question.  If that "
"fails, it'll use the plain text version."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7272
msgid ""
"For instance, if @code{icon-preference} doesn't contain @code{image} or "
"@code{emoji}, it'll skip those entries."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7277
msgid ""
"Code can confidently call @code{icon-string} in all circumstances and be "
"sure that something readable will appear on the screen, no matter whether "
"the user is on a graphical terminal or a text terminal, and no matter which "
"features Emacs was built with."
msgstr ""

#. type: defmac
#: original_texis/display.texi:7278
#, no-wrap
msgid "define-icon name parent specs doc &rest keywords"
msgstr ""

#. type: defmac
#: original_texis/display.texi:7282
msgid ""
"Define an icon @var{name}, a symbol, with the display alternatives in "
"@var{spec}, that can be later instantiated using @code{icon-string}.  The "
"@var{name} is the name of the resulting keyword."
msgstr ""

#. type: defmac
#: original_texis/display.texi:7286
msgid ""
"The resulting icon will inherit specs from @var{parent}, and from their "
"parent's parents, and so on, and the lowest descendent element wins."
msgstr ""

#. type: defmac
#: original_texis/display.texi:7291
msgid ""
"@var{specs} is a list of icon specifications.  The first element of each "
"specification is the type, and the rest is something that can be used as an "
"icon of that type, and then optionally followed by a keyword list.  The "
"following icon types are available:"
msgstr ""

#. type: cindex
#: original_texis/display.texi:7292
#, no-wrap
msgid "icon types"
msgstr ""

#. type: item
#: original_texis/display.texi:7294
#, no-wrap
msgid "image"
msgstr ""

#. type: table
#: original_texis/display.texi:7300
msgid ""
"In this case, there may be many images listed as candidates.  Emacs will "
"choose the first one that the current Emacs instance can show.  If an image "
"is listed is an absolute file name, it's used as is, but it's otherwise "
"looked up in the list @code{image-load-path} (@pxref{Defining Images})."
msgstr ""

#. type: item
#: original_texis/display.texi:7301
#, no-wrap
msgid "emoji"
msgstr ""

#. type: table
#: original_texis/display.texi:7303
msgid "This should be a (possibly colorful) emoji."
msgstr ""

#. type: item
#: original_texis/display.texi:7304
#, no-wrap
msgid "symbol"
msgstr ""

#. type: table
#: original_texis/display.texi:7306
msgid "This should be a (monochrome) symbol character."
msgstr ""

#. type: item
#: original_texis/display.texi:7307
#, no-wrap
msgid "text"
msgstr ""

#. type: table
#: original_texis/display.texi:7311
msgid ""
"Icons should also have a textual fallback.  This can also be used for the "
"visually impaired: if @code{icon-preference} is just @code{(text)}, all "
"icons will be replaced by text."
msgstr ""

#. type: defmac
#: original_texis/display.texi:7315
msgid "Various keywords may follow the list of icon specifications.  For instance:"
msgstr ""

#. type: example
#: original_texis/display.texi:7318
#, no-wrap
msgid "(symbol \"▶\" \"➤\" :face icon-button)\n"
msgstr ""

#. type: defmac
#: original_texis/display.texi:7321
msgid "Unknown keywords are ignored.  The following keywords are allowed:"
msgstr ""

#. type: cindex
#: original_texis/display.texi:7322
#, no-wrap
msgid "icon keywords"
msgstr ""

#. type: item
#: original_texis/display.texi:7324
#, no-wrap
msgid ":face"
msgstr ""

#. type: table
#: original_texis/display.texi:7326
msgid "The face to be used for the icon."
msgstr ""

#. type: table
#: original_texis/display.texi:7332
msgid ""
"This is only valid for @code{image} icons, and can be either a number (which "
"specifies the height in pixels), or the symbol @code{line}, which will use "
"the default line height in the currently selected window."
msgstr ""

#. type: table
#: original_texis/display.texi:7338
msgid ""
"This is only valid for @code{image} icons, and can be either a number (which "
"specifies the width in pixels), or the symbol @code{font}, which will use "
"the width in pixels of the current buffer's default face font."
msgstr ""

#. type: defmac
#: original_texis/display.texi:7341
msgid "@var{doc} should be a doc string."
msgstr ""

#. type: defmac
#: original_texis/display.texi:7344
msgid ""
"@var{keywords} is a list of keyword/value pairs.  The following keywords are "
"allowed:"
msgstr ""

#. type: item
#: original_texis/display.texi:7346
#, no-wrap
msgid ":version"
msgstr ""

#. type: table
#: original_texis/display.texi:7349
msgid ""
"The (approximate) Emacs version this button first appeared.  (This keyword "
"is mandatory.)"
msgstr ""

#. type: item
#: original_texis/display.texi:7350
#, no-wrap
msgid ":group"
msgstr ""

#. type: table
#: original_texis/display.texi:7353
msgid ""
"The customization group this icon belongs in.  If not present, it is "
"inferred."
msgstr ""

#. type: item
#: original_texis/display.texi:7354
#, no-wrap
msgid ":help-echo"
msgstr ""

#. type: table
#: original_texis/display.texi:7357
msgid "The help string shown when hovering over the icon with the mouse pointer."
msgstr ""

#. type: defun
#: original_texis/display.texi:7360
#, no-wrap
msgid "icon-string icon"
msgstr ""

#. type: defun
#: original_texis/display.texi:7363
msgid ""
"This function returns a string suitable for display in the current buffer "
"for @var{icon}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7365
#, no-wrap
msgid "icon-elements icon"
msgstr ""

#. type: defun
#: original_texis/display.texi:7372
msgid ""
"Alternatively, you can get a ``deconstructed'' version of @var{icon} with "
"this function.  It returns a plist (@pxref{Property Lists}) where the keys "
"are @code{string}, @code{face} and @var{image}.  (The latter is only present "
"if the icon is represented by an image.)  This can be useful if the icon "
"isn't to be inserted directly in the buffer, but needs some sort of "
"pre-processing first."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7376
msgid ""
"Icons can be customized with @kbd{M-x customize-icon}.  Themes can specify "
"changes to icons with, for instance:"
msgstr ""

#. type: lisp
#: original_texis/display.texi:7384
#, no-wrap
msgid ""
"(custom-theme-set-icons\n"
"  'my-theme\n"
"  '(outline-open ((image :height 100)\n"
"                  (text \" OPEN \")))\n"
"  '(outline-close ((image :height 100)\n"
"                   (text \" CLOSE \" :face warning))))\n"
msgstr ""

#. type: section
#: original_texis/display.texi:7388
#, no-wrap
msgid "Embedded Native Widgets"
msgstr ""

#. type: cindex
#: original_texis/display.texi:7389
#, no-wrap
msgid "xwidget"
msgstr ""

#. type: cindex
#: original_texis/display.texi:7390
#, no-wrap
msgid "embedded widgets"
msgstr ""

#. type: cindex
#: original_texis/display.texi:7391
#, no-wrap
msgid "webkit browser widget"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7398
msgid ""
"Emacs is able to display native widgets, such as GTK+ WebKit widgets, in "
"Emacs buffers when it was built with the necessary support libraries and is "
"running on a graphical terminal.  To test whether Emacs supports display of "
"embedded widgets, check that the @code{xwidget-internal} feature is "
"available (@pxref{Named Features})."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7403
msgid ""
"To display an embedded widget in a buffer, you must first create an xwidget "
"object, and then use that object as the display specifier in a "
"@code{display} text or overlay property (@pxref{Display Property})."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7406
msgid ""
"Embedded widgets can send events notifying Lisp code about changes occurring "
"within them.  (@pxref{Xwidget Events})."
msgstr ""

#. type: defun
#: original_texis/display.texi:7407
#, no-wrap
msgid "make-xwidget type title width height arguments &optional buffer related"
msgstr ""

#. type: defun
#: original_texis/display.texi:7413
msgid ""
"This creates and returns an xwidget object.  If @var{buffer} is omitted or "
"@code{nil}, it defaults to the current buffer.  If @var{buffer} names a "
"buffer that doesn't exist, it will be created.  The @var{type} identifies "
"the type of the xwidget component, it can be one of the following:"
msgstr ""

#. type: item
#: original_texis/display.texi:7415
#, no-wrap
msgid "webkit"
msgstr ""

#. type: table
#: original_texis/display.texi:7417
msgid "The WebKit component."
msgstr ""

#. type: defun
#: original_texis/display.texi:7424
msgid ""
"The @var{width} and @var{height} arguments specify the widget size in "
"pixels, and @var{title}, a string, specifies its title.  @var{related} is "
"used internally by the WebKit widget, and specifies another WebKit widget "
"that the newly created widget should share settings and subprocesses with."
msgstr ""

#. type: defun
#: original_texis/display.texi:7431
msgid ""
"The xwidget that is returned will be killed alongside its buffer "
"(@pxref{Killing Buffers}).  You can also kill it using @code{kill-xwidget}.  "
"Once it is killed, the xwidget may continue to exist as a Lisp object and "
"act as a @code{display} property until all references to it are gone, but "
"most actions that can be performed on live xwidgets will no longer be "
"available."
msgstr ""

#. type: defun
#: original_texis/display.texi:7433
#, no-wrap
msgid "xwidgetp object"
msgstr ""

#. type: defun
#: original_texis/display.texi:7436
msgid ""
"This function returns @code{t} if @var{object} is an xwidget, @code{nil} "
"otherwise."
msgstr ""

#. type: defun
#: original_texis/display.texi:7438
#, no-wrap
msgid "xwidget-live-p object"
msgstr ""

#. type: defun
#: original_texis/display.texi:7441
msgid ""
"This function returns @code{t} if @var{object} is an xwidget that hasn't "
"been killed, and @code{nil} otherwise."
msgstr ""

#. type: defun
#: original_texis/display.texi:7443
#, no-wrap
msgid "kill-xwidget xwidget"
msgstr ""

#. type: defun
#: original_texis/display.texi:7446
msgid ""
"This function kills @var{xwidget}, by removing it from its buffer and "
"releasing window system resources it holds."
msgstr ""

#. type: cindex
#: original_texis/display.texi:7448
#, no-wrap
msgid "xwidget property list"
msgstr ""

#. type: defun
#: original_texis/display.texi:7449
#, no-wrap
msgid "xwidget-plist xwidget"
msgstr ""

#. type: defun
#: original_texis/display.texi:7451
msgid "This function returns the property list of @var{xwidget}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7453
#, no-wrap
msgid "set-xwidget-plist xwidget plist"
msgstr ""

#. type: defun
#: original_texis/display.texi:7456
msgid ""
"This function replaces the property list of @var{xwidget} with a new "
"property list given by @var{plist}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7458
#, no-wrap
msgid "xwidget-buffer xwidget"
msgstr ""

#. type: defun
#: original_texis/display.texi:7461
msgid ""
"This function returns the buffer of @var{xwidget}.  If @var{xwidget} has "
"been killed, it returns @code{nil}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7463
#, no-wrap
msgid "set-xwidget-buffer xwidget buffer"
msgstr ""

#. type: defun
#: original_texis/display.texi:7465
msgid "This function sets the buffer of @var{xwidget} to @var{buffer}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7467
#, no-wrap
msgid "get-buffer-xwidgets buffer"
msgstr ""

#. type: defun
#: original_texis/display.texi:7472
msgid ""
"This function returns a list of xwidget objects associated with the "
"@var{buffer}, which can be specified as a buffer object or a name of an "
"existing buffer, a string.  The value is @code{nil} if @var{buffer} contains "
"no xwidgets."
msgstr ""

#. type: defun
#: original_texis/display.texi:7474
#, no-wrap
msgid "xwidget-webkit-goto-uri xwidget uri"
msgstr ""

#.  FIXME: What else can a URI specify in this context?
#. type: defun
#: original_texis/display.texi:7478
msgid ""
"This function browses the specified @var{uri} in the given @var{xwidget}.  "
"The @var{uri} is a string that specifies the name of a file or a URL."
msgstr ""

#. type: defun
#: original_texis/display.texi:7480
#, no-wrap
msgid "xwidget-webkit-execute-script xwidget script"
msgstr ""

#. type: defun
#: original_texis/display.texi:7483
msgid ""
"This function causes the browser widget specified by @var{xwidget} to "
"execute the specified JavaScript @code{script}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7485
#, no-wrap
msgid "xwidget-webkit-execute-script-rv xwidget script &optional default"
msgstr ""

#. type: defun
#: original_texis/display.texi:7491
msgid ""
"This function executes the specified @var{script} like "
"@code{xwidget-webkit-execute-script} does, but it also returns the script's "
"return value as a string.  If @var{script} doesn't return a value, this "
"function returns @var{default}, or @code{nil} if @var{default} was omitted."
msgstr ""

#. type: defun
#: original_texis/display.texi:7493
#, no-wrap
msgid "xwidget-webkit-get-title xwidget"
msgstr ""

#. type: defun
#: original_texis/display.texi:7495
msgid "This function returns the title of @var{xwidget} as a string."
msgstr ""

#. type: defun
#: original_texis/display.texi:7497
#, no-wrap
msgid "xwidget-resize xwidget width height"
msgstr ""

#. type: defun
#: original_texis/display.texi:7500
msgid ""
"This function resizes the specified @var{xwidget} to the size "
"@var{width}x@var{height} pixels."
msgstr ""

#. type: defun
#: original_texis/display.texi:7502
#, no-wrap
msgid "xwidget-size-request xwidget"
msgstr ""

#. type: defun
#: original_texis/display.texi:7506
msgid ""
"This function returns the desired size of @var{xwidget} as a list of the "
"form @code{(@var{width} @var{height})}.  The dimensions are in pixels."
msgstr ""

#. type: defun
#: original_texis/display.texi:7508
#, no-wrap
msgid "xwidget-info xwidget"
msgstr ""

#. type: defun
#: original_texis/display.texi:7513
msgid ""
"This function returns the attributes of @var{xwidget} as a vector of the "
"form @code{[@var{type} @var{title} @var{width} @var{height}]}.  The "
"attributes are usually determined by @code{make-xwidget} when the xwidget is "
"created."
msgstr ""

#. type: defun
#: original_texis/display.texi:7515
#, no-wrap
msgid "set-xwidget-query-on-exit-flag xwidget flag"
msgstr ""

#. type: defun
#: original_texis/display.texi:7520
msgid ""
"This function allows you to arrange that Emacs will ask the user for "
"confirmation before exiting or before killing a buffer that has "
"@var{xwidget} associated with it.  If @var{flag} is non-@code{nil}, Emacs "
"will query the user, otherwise it will not."
msgstr ""

#. type: defun
#: original_texis/display.texi:7522
#, no-wrap
msgid "xwidget-query-on-exit-flag xwidget"
msgstr ""

#. type: defun
#: original_texis/display.texi:7525
msgid ""
"This function returns the current setting of @var{xwidget}s query-on-exit "
"flag, either @code{t} or @code{nil}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7527
#, no-wrap
msgid "xwidget-perform-lispy-event xwidget event frame"
msgstr ""

#. type: defun
#: original_texis/display.texi:7530
msgid ""
"Send an input event @var{event} to @var{xwidget}.  The precise action "
"performed is platform-specific.  @xref{Input Events}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7535
msgid ""
"You can optionally pass the frame on which the event was generated via "
"@var{frame}.  On X11, modifier keys in key events will not be considered if "
"@var{frame} is @code{nil}, and the selected frame is not an X-Windows frame."
msgstr ""

#. type: defun
#: original_texis/display.texi:7540
msgid ""
"On GTK, only keyboard and function key events are supported.  Mouse, motion, "
"and click events are dispatched to the xwidget without going through Lisp "
"code, and as such shouldn't require this function to be called."
msgstr ""

#. type: defun
#: original_texis/display.texi:7542
#, no-wrap
msgid ""
"xwidget-webkit-search query xwidget &optional case-insensitive backwards "
"wrap-around"
msgstr ""

#. type: defun
#: original_texis/display.texi:7549
msgid ""
"Start an incremental search on the WebKit widget @var{xwidget} with the "
"string @var{query} as the query.  @var{case-insensitive} denotes whether or "
"not the search is case-insensitive, @var{backwards} determines if the search "
"is performed backwards towards the start of the document, and "
"@var{wrap-around} determines whether or not the search terminates at the end "
"of the document."
msgstr ""

#. type: defun
#: original_texis/display.texi:7552
msgid ""
"If the function is called while a search query is already present, then the "
"query specified here will replace the existing query."
msgstr ""

#. type: defun
#: original_texis/display.texi:7554
msgid "To stop a search query, use @code{xwidget-webkit-finish-search}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7556
#, no-wrap
msgid "xwidget-webkit-next-result xwidget"
msgstr ""

#. type: defun
#: original_texis/display.texi:7560
msgid ""
"Display the next search result in @var{xwidget}.  This function will signal "
"an error if a search query has not been already started in @var{xwidget} "
"through @code{xwidget-webkit-search}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7564
msgid ""
"If @code{wrap-around} was non-@code{nil} when @code{xwidget-webkit-search} "
"was called, then the search will restart from the beginning of the document "
"when its end is reached."
msgstr ""

#. type: defun
#: original_texis/display.texi:7566
#, no-wrap
msgid "xwidget-webkit-previous-result xwidget"
msgstr ""

#. type: defun
#: original_texis/display.texi:7570
msgid ""
"Display the previous search result in @var{xwidget}.  This function signals "
"an error if a search query has not been already started in @var{xwidget} "
"through @code{xwidget-webkit-search}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7574
msgid ""
"If @code{wrap-around} was non-@code{nil} when @code{xwidget-webkit-search} "
"was called, then the search will restart from the end of the document when "
"its beginning is reached."
msgstr ""

#. type: defun
#: original_texis/display.texi:7576
#, no-wrap
msgid "xwidget-webkit-finish-search xwidget"
msgstr ""

#. type: defun
#: original_texis/display.texi:7580
msgid ""
"Finish a search operation started with @code{xwidget-webkit-search} in "
"@var{xwidget}.  If there is no query currently ongoing, this function "
"signals an error."
msgstr ""

#. type: defun
#: original_texis/display.texi:7582
#, no-wrap
msgid "xwidget-webkit-load-html xwidget text &optional base-uri"
msgstr ""

#. type: defun
#: original_texis/display.texi:7586
msgid ""
"Load @var{text}, a string, into @var{xwidget}, which should be a WebKit "
"xwidget.  Any HTML markup in @var{text} will be processed by @var{xwidget} "
"while rendering the text."
msgstr ""

#. type: defun
#: original_texis/display.texi:7590
msgid ""
"Optional argument @var{base-uri}, which should be a string, specifies the "
"absolute location of the web resources referenced by @var{text}, to be used "
"for resolving relative links in @var{text}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7592
#, no-wrap
msgid "xwidget-webkit-goto-history xwidget rel-pos"
msgstr ""

#. type: defun
#: original_texis/display.texi:7595
msgid ""
"Make @var{xwidget}, a WebKit widget, load the @var{rel-pos}th element in its "
"navigation history."
msgstr ""

#. type: defun
#: original_texis/display.texi:7597
msgid "If @var{rel-pos} is zero, the current page will be reloaded instead."
msgstr ""

#. type: defun
#: original_texis/display.texi:7599
#, no-wrap
msgid "xwidget-webkit-back-forward-list xwidget &optional limit"
msgstr ""

#. type: defun
#: original_texis/display.texi:7603
msgid ""
"Return the navigation history of @var{xwidget}, up to @var{limit} items in "
"each direction.  If not specified, @var{limit} defaults to 50."
msgstr ""

#. type: defun
#: original_texis/display.texi:7610
msgid ""
"The returned value is a list of the form @w{@code{(@var{back} @var{here} "
"@var{forward})}}, where @var{here} is the current navigation item, while "
"@var{back} is a list of items containing the items recorded by WebKit before "
"the current navigation item, and @var{forward} is a list of items recorded "
"after the current navigation item.  @var{back}, @var{here} and @var{forward} "
"can all be @code{nil}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7615
msgid ""
"When @var{here} is @code{nil}, it means that no items have been recorded "
"yet; if @var{back} or @var{forward} are @code{nil}, it means that there is "
"no history recorded before or after the current item respectively."
msgstr ""

#. type: defun
#: original_texis/display.texi:7623
msgid ""
"Navigation items are themselves lists of the form @w{@code{(@var{idx} "
"@var{title} @var{uri})}}.  In these lists, @var{idx} is an index that can be "
"passed to @code{xwidget-webkit-goto-history}, @var{title} is the "
"human-readable title of the item, and @var{uri} is the URI of the item.  The "
"user should normally have no reason to load @var{uri} manually to reach a "
"specific history item.  Instead, @var{idx} should be passed as an index to "
"@code{xwidget-webkit-goto-history}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7625
#, no-wrap
msgid "xwidget-webkit-estimated-load-progress xwidget"
msgstr ""

#. type: defun
#: original_texis/display.texi:7629
msgid ""
"Return an estimate of how much data is remaining to be transferred before "
"the page displayed by the WebKit widget @var{xwidget} is fully loaded."
msgstr ""

#. type: defun
#: original_texis/display.texi:7631
msgid "The value returned is a float ranging between 0.0 and 1.0."
msgstr ""

#. type: defun
#: original_texis/display.texi:7633
#, no-wrap
msgid "xwidget-webkit-set-cookie-storage-file xwidget file"
msgstr ""

#. type: defun
#: original_texis/display.texi:7635
msgid "Make the WebKit widget @var{xwidget} store cookies in @var{file}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7640
msgid ""
"@var{file} must be an absolute file name.  The new setting will also affect "
"any xwidget that was created with @var{xwidget} as the @code{related} "
"argument to @code{make-xwidget}, and widgets related to those as well."
msgstr ""

#. type: defun
#: original_texis/display.texi:7643
msgid ""
"If this function is not called at least once on @var{xwidget} or a related "
"widget, @var{xwidget} will not store cookies on disk at all."
msgstr ""

#. type: defun
#: original_texis/display.texi:7645
#, no-wrap
msgid "xwidget-webkit-stop-loading xwidget"
msgstr ""

#. type: defun
#: original_texis/display.texi:7649
msgid ""
"Terminate any data transfer still in progress in the WebKit widget "
"@var{xwidget} as part of a page-loading operation.  If a page is not being "
"loaded, this function does nothing."
msgstr ""

#. type: cindex
#: original_texis/display.texi:7653
#, no-wrap
msgid "buttons in buffers"
msgstr ""

#. type: cindex
#: original_texis/display.texi:7654
#, no-wrap
msgid "clickable buttons in buffers"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7660
msgid ""
"The Button package defines functions for inserting and manipulating "
"@dfn{buttons} that can be activated with the mouse or via keyboard "
"commands.  These buttons are typically used for various kinds of hyperlinks."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7668
msgid ""
"A button is essentially a set of text or overlay properties, attached to a "
"stretch of text in a buffer.  These properties are called @dfn{button "
"properties}.  One of these properties, the @dfn{action property}, specifies "
"a function which is called when the user invokes the button using the "
"keyboard or the mouse.  The action function may examine the button and use "
"its other properties as desired."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7674
msgid ""
"In some ways, the Button package duplicates the functionality in the Widget "
"package.  @xref{Top, , Introduction, widget, The Emacs Widget Library}.  The "
"advantage of the Button package is that it is faster, smaller, and simpler "
"to program.  From the point of view of the user, the interfaces produced by "
"the two packages are very similar."
msgstr ""

#. type: subsection
#: original_texis/display.texi:7681 original_texis/display.texi:7683
#: original_texis/display.texi:7684
#, no-wrap
msgid "Button Properties"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:7681
msgid "Button properties with special meanings."
msgstr ""

#. type: subsection
#: original_texis/display.texi:7681 original_texis/display.texi:7758
#: original_texis/display.texi:7759
#, no-wrap
msgid "Button Types"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:7681
msgid "Defining common properties for classes of buttons."
msgstr ""

#. type: subsection
#: original_texis/display.texi:7681 original_texis/display.texi:7788
#: original_texis/display.texi:7789
#, no-wrap
msgid "Making Buttons"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:7681
msgid "Adding buttons to Emacs buffers."
msgstr ""

#. type: subsection
#: original_texis/display.texi:7681 original_texis/display.texi:7855
#: original_texis/display.texi:7856
#, no-wrap
msgid "Manipulating Buttons"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:7681
msgid "Getting and setting properties of buttons."
msgstr ""

#. type: subsection
#: original_texis/display.texi:7681 original_texis/display.texi:7927
#: original_texis/display.texi:7928
#, no-wrap
msgid "Button Buffer Commands"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:7681
msgid "Buffer-wide commands and bindings for buttons."
msgstr ""

#. type: cindex
#: original_texis/display.texi:7685
#, no-wrap
msgid "button properties"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7691
msgid ""
"Each button has an associated list of properties defining its appearance and "
"behavior, and other arbitrary properties may be used for application "
"specific purposes.  The following properties have special meaning to the "
"Button package:"
msgstr ""

#. type: item
#: original_texis/display.texi:7693
#, no-wrap
msgid "action"
msgstr ""

#. type: kindex
#: original_texis/display.texi:7694
#, no-wrap
msgid "action @r{(button property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:7698
msgid ""
"The function to call when the user invokes the button, which is passed the "
"single argument @var{button}.  By default this is @code{ignore}, which does "
"nothing."
msgstr ""

#. type: item
#: original_texis/display.texi:7699
#, no-wrap
msgid "mouse-action"
msgstr ""

#. type: kindex
#: original_texis/display.texi:7700
#, no-wrap
msgid "mouse-action @r{(button property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:7705
msgid ""
"This is similar to @code{action}, and when present, will be used instead of "
"@code{action} for button invocations resulting from mouse-clicks (instead of "
"the user hitting @key{RET}).  If not present, mouse-clicks use @code{action} "
"instead."
msgstr ""

#. type: kindex
#: original_texis/display.texi:7707
#, no-wrap
msgid "face @r{(button property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:7710
msgid ""
"This is an Emacs face controlling how buttons of this type are displayed; by "
"default this is the @code{button} face."
msgstr ""

#. type: kindex
#: original_texis/display.texi:7712
#, no-wrap
msgid "mouse-face @r{(button property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:7716
msgid ""
"This is an additional face which controls appearance during mouse-overs "
"(merged with the usual button face); by default this is the usual Emacs "
"@code{highlight} face."
msgstr ""

#. type: kindex
#: original_texis/display.texi:7718
#, no-wrap
msgid "keymap @r{(button property)}"
msgstr ""

#. type: vindex
#: original_texis/display.texi:7719
#, no-wrap
msgid "button-map"
msgstr ""

#. type: table
#: original_texis/display.texi:7724
msgid ""
"The button's keymap, defining bindings active within the button region.  By "
"default this is the usual button region keymap, stored in the variable "
"@code{button-map}, which defines @key{RET} and @key{mouse-2} to invoke the "
"button."
msgstr ""

#. type: kindex
#: original_texis/display.texi:7726
#, no-wrap
msgid "type @r{(button property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:7728
msgid "The button type.  @xref{Button Types}."
msgstr ""

#. type: kindex
#: original_texis/display.texi:7730
#, no-wrap
msgid "help-echo @r{(button property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:7735
msgid ""
"A string displayed by the Emacs tooltip help system; by default, "
"@code{\"mouse-2, RET: Push this button\"}.  Alternatively, a function that "
"returns, or a form that evaluates to, a string to be displayed or "
"@code{nil}.  For details see @ref{Text help-echo}."
msgstr ""

#. type: table
#: original_texis/display.texi:7742
msgid ""
"The function is called with three arguments, @var{window}, @var{object}, and "
"@var{pos}.  The second argument, @var{object}, is either the overlay that "
"had the property (for overlay buttons), or the buffer containing the button "
"(for text property buttons).  The other arguments have the same meaning as "
"for the special text property @code{help-echo}."
msgstr ""

#. type: item
#: original_texis/display.texi:7743
#, no-wrap
msgid "follow-link"
msgstr ""

#. type: kindex
#: original_texis/display.texi:7744
#, no-wrap
msgid "follow-link @r{(button property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:7747
msgid ""
"The @code{follow-link} property, defining how a @key{mouse-1} click behaves "
"on this button, @xref{Clickable Text}."
msgstr ""

#. type: item
#: original_texis/display.texi:7748
#, no-wrap
msgid "button"
msgstr ""

#. type: kindex
#: original_texis/display.texi:7749
#, no-wrap
msgid "button @r{(button property)}"
msgstr ""

#. type: table
#: original_texis/display.texi:7753
msgid ""
"All buttons have a non-@code{nil} @code{button} property, which may be "
"useful in finding regions of text that comprise buttons (which is what the "
"standard button functions do)."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7757
msgid ""
"There are other properties defined for the regions of text in a button, but "
"these are not generally interesting for typical uses."
msgstr ""

#. type: cindex
#: original_texis/display.texi:7760
#, no-wrap
msgid "button types"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7767
msgid ""
"Every button has a @dfn{button type}, which defines default values for the "
"button's properties.  Button types are arranged in a hierarchy, with "
"specialized types inheriting from more general types, so that it's easy to "
"define special-purpose types of buttons for specific tasks."
msgstr ""

#. type: defun
#: original_texis/display.texi:7768
#, no-wrap
msgid "define-button-type name &rest properties"
msgstr ""

#. type: defun
#: original_texis/display.texi:7775
msgid ""
"Define a button type called @var{name} (a symbol).  The remaining arguments "
"form a sequence of @var{property value} pairs, specifying default property "
"values for buttons with this type (a button's type may be set by giving it a "
"@code{type} property when creating the button, using the @code{:type} "
"keyword argument)."
msgstr ""

#. type: defun
#: original_texis/display.texi:7781
msgid ""
"In addition, the keyword argument @code{:supertype} may be used to specify a "
"button-type from which @var{name} inherits its default property values.  "
"Note that this inheritance happens only when @var{name} is defined; "
"subsequent changes to a supertype are not reflected in its subtypes."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7787
msgid ""
"Using @code{define-button-type} to define default properties for buttons is "
"not necessary---buttons without any specified type use the built-in "
"button-type @code{button}---but it is encouraged, since doing so usually "
"makes the resulting code clearer and more efficient."
msgstr ""

#. type: cindex
#: original_texis/display.texi:7790
#, no-wrap
msgid "making buttons"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7799
msgid ""
"Buttons are associated with a region of text, using an overlay or text "
"properties to hold button-specific information, all of which are initialized "
"from the button's type (which defaults to the built-in button type "
"@code{button}).  Like all Emacs text, the appearance of the button is "
"governed by the @code{face} property; by default (via the @code{face} "
"property inherited from the @code{button} button-type)  this is a simple "
"underline, like a typical web-page link."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7804
msgid ""
"For convenience, there are two sorts of button-creation functions, those "
"that add button properties to an existing region of a buffer, called "
"@code{make-...button}, and those that also insert the button text, called "
"@code{insert-...button}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7813
msgid ""
"The button-creation functions all take the @code{&rest} argument "
"@var{properties}, which should be a sequence of @var{property value} pairs, "
"specifying properties to add to the button; see @ref{Button Properties}.  In "
"addition, the keyword argument @code{:type} may be used to specify a "
"button-type from which to inherit other properties; see @ref{Button Types}.  "
"Any properties not explicitly specified during creation will be inherited "
"from the button's type (if the type defines such a property)."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7816
msgid ""
"The following functions add a button using an overlay (@pxref{Overlays}) to "
"hold the button properties:"
msgstr ""

#. type: defun
#: original_texis/display.texi:7817
#, no-wrap
msgid "make-button beg end &rest properties"
msgstr ""

#. type: defun
#: original_texis/display.texi:7820
msgid ""
"This makes a button from @var{beg} to @var{end} in the current buffer, and "
"returns it."
msgstr ""

#. type: defun
#: original_texis/display.texi:7822
#, no-wrap
msgid "insert-button label &rest properties"
msgstr ""

#. type: defun
#: original_texis/display.texi:7825
msgid "This inserts a button with the label @var{label} at point, and returns it."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7834
msgid ""
"The following functions are similar, but using text properties (@pxref{Text "
"Properties}) to hold the button properties.  Such buttons do not add markers "
"to the buffer, so editing in the buffer does not slow down if there is an "
"extremely large numbers of buttons.  However, if there is an existing face "
"text property on the text (e.g., a face assigned by Font Lock mode), the "
"button face may not be visible.  Both of these functions return the starting "
"position of the new button."
msgstr ""

#. type: defun
#: original_texis/display.texi:7835
#, no-wrap
msgid "make-text-button beg end &rest properties"
msgstr ""

#. type: defun
#: original_texis/display.texi:7838
msgid ""
"This makes a button from @var{beg} to @var{end} in the current buffer, using "
"text properties."
msgstr ""

#. type: defun
#: original_texis/display.texi:7840
#, no-wrap
msgid "insert-text-button label &rest properties"
msgstr ""

#. type: defun
#: original_texis/display.texi:7843
msgid ""
"This inserts a button with the label @var{label} at point, using text "
"properties."
msgstr ""

#. type: defun
#: original_texis/display.texi:7845
#, no-wrap
msgid "buttonize string callback &optional data"
msgstr ""

#. type: defun
#: original_texis/display.texi:7853
msgid ""
"Sometimes it's more convenient to make a string into a button without "
"inserting it into a buffer immediately, for instance when creating data "
"structures that may then, later, be inserted into a buffer.  This function "
"makes @var{string} into such a string, and @var{callback} will be called "
"when the user clicks on the button.  The optional @var{data} parameter will "
"be used as the parameter when @var{callback} is called.  If @code{nil}, the "
"button is used as the parameter instead."
msgstr ""

#. type: cindex
#: original_texis/display.texi:7857
#, no-wrap
msgid "manipulating buttons"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7862
msgid ""
"These are functions for getting and setting properties of buttons.  Often "
"these are used by a button's invocation function to determine what to do."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7868
msgid ""
"Where a @var{button} parameter is specified, it means an object referring to "
"a specific button, either an overlay (for overlay buttons), or a "
"buffer-position or marker (for text property buttons).  Such an object is "
"passed as the first argument to a button's invocation function when it is "
"invoked."
msgstr ""

#. type: defun
#: original_texis/display.texi:7869
#, no-wrap
msgid "button-start button"
msgstr ""

#. type: defun
#: original_texis/display.texi:7871
msgid "Return the position at which @var{button} starts."
msgstr ""

#. type: defun
#: original_texis/display.texi:7873
#, no-wrap
msgid "button-end button"
msgstr ""

#. type: defun
#: original_texis/display.texi:7875
msgid "Return the position at which @var{button} ends."
msgstr ""

#. type: defun
#: original_texis/display.texi:7877
#, no-wrap
msgid "button-get button prop"
msgstr ""

#. type: defun
#: original_texis/display.texi:7879
msgid "Get the property of button @var{button} named @var{prop}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7881
#, no-wrap
msgid "button-put button prop val"
msgstr ""

#. type: defun
#: original_texis/display.texi:7883
msgid "Set @var{button}'s @var{prop} property to @var{val}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7885
#, no-wrap
msgid "button-activate button &optional use-mouse-action"
msgstr ""

#. type: defun
#: original_texis/display.texi:7894
msgid ""
"Call @var{button}'s @code{action} property (i.e., invoke the function that "
"is the value of that property, passing it the single argument "
"@var{button}).  If @var{use-mouse-action} is non-@code{nil}, try to invoke "
"the button's @code{mouse-action} property instead of @code{action}; if the "
"button has no @code{mouse-action} property, use @code{action} as normal.  If "
"the @code{button-data} property is present in @var{button}, use that as the "
"argument for the @code{action} function instead of @var{button}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7896
#, no-wrap
msgid "button-label button"
msgstr ""

#. type: defun
#: original_texis/display.texi:7898
msgid "Return @var{button}'s text label."
msgstr ""

#. type: defun
#: original_texis/display.texi:7900
#, no-wrap
msgid "button-type button"
msgstr ""

#. type: defun
#: original_texis/display.texi:7902
msgid "Return @var{button}'s button-type."
msgstr ""

#. type: defun
#: original_texis/display.texi:7904
#, no-wrap
msgid "button-has-type-p button type"
msgstr ""

#. type: defun
#: original_texis/display.texi:7907
msgid ""
"Return @code{t} if @var{button} has button-type @var{type}, or one of "
"@var{type}'s subtypes."
msgstr ""

#. type: defun
#: original_texis/display.texi:7909
#, no-wrap
msgid "button-at pos"
msgstr ""

#. type: defun
#: original_texis/display.texi:7913
msgid ""
"Return the button at position @var{pos} in the current buffer, or "
"@code{nil}.  If the button at @var{pos} is a text property button, the "
"return value is a marker pointing to @var{pos}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7915
#, no-wrap
msgid "button-type-put type prop val"
msgstr ""

#. type: defun
#: original_texis/display.texi:7917
msgid "Set the button-type @var{type}'s @var{prop} property to @var{val}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7919
#, no-wrap
msgid "button-type-get type prop"
msgstr ""

#. type: defun
#: original_texis/display.texi:7921
msgid "Get the property of button-type @var{type} named @var{prop}."
msgstr ""

#. type: defun
#: original_texis/display.texi:7923
#, no-wrap
msgid "button-type-subtype-p type supertype"
msgstr ""

#. type: defun
#: original_texis/display.texi:7925
msgid "Return @code{t} if button-type @var{type} is a subtype of @var{supertype}."
msgstr ""

#. type: cindex
#: original_texis/display.texi:7929
#, no-wrap
msgid "button buffer commands"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7933
msgid ""
"These are commands and functions for locating and operating on buttons in an "
"Emacs buffer."
msgstr ""

#. type: cindex
#: original_texis/display.texi:7934
#, no-wrap
msgid "buffer-button-map"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7946
msgid ""
"@code{push-button} is the command that a user uses to actually push a "
"button, and is bound by default in the button itself to @key{RET} and to "
"@key{mouse-2} using a local keymap in the button's overlay or text "
"properties.  Commands that are useful outside the buttons itself, such as "
"@code{forward-button} and @code{backward-button} are additionally available "
"in the keymap stored in @code{button-buffer-map}; a mode which uses buttons "
"may want to use @code{button-buffer-map} as a parent keymap for its keymap.  "
"Alternatively, the @code{button-mode} can be switched on for much the same "
"effect: It's a minor mode that does nothing else than install "
"@code{button-buffer-map} as a minor mode keymap."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:7951
msgid ""
"If the button has a non-@code{nil} @code{follow-link} property, and "
"@code{mouse-1-click-follows-link} is set, a quick @key{mouse-1} click will "
"also activate the @code{push-button} command.  @xref{Clickable Text}."
msgstr ""

#. type: deffn
#: original_texis/display.texi:7952
#, no-wrap
msgid "Command push-button &optional pos use-mouse-action"
msgstr ""

#. type: deffn
#: original_texis/display.texi:7963
msgid ""
"Perform the action specified by a button at location @var{pos}.  @var{pos} "
"may be either a buffer position or a mouse-event.  If @var{use-mouse-action} "
"is non-@code{nil}, or @var{pos} is a mouse-event (@pxref{Mouse Events}), try "
"to invoke the button's @code{mouse-action} property instead of "
"@code{action}; if the button has no @code{mouse-action} property, use "
"@code{action} as normal.  @var{pos} defaults to point, except when "
"@code{push-button} is invoked interactively as the result of a mouse-event, "
"in which case, the mouse event's position is used.  If there's no button at "
"@var{pos}, do nothing and return @code{nil}, otherwise return @code{t}."
msgstr ""

#. type: deffn
#: original_texis/display.texi:7965
#, no-wrap
msgid "Command forward-button n &optional wrap display-message no-error"
msgstr ""

#. type: deffn
#: original_texis/display.texi:7975
msgid ""
"Move to the @var{n}th next button, or @var{n}th previous button if @var{n} "
"is negative.  If @var{n} is zero, move to the start of any button at point.  "
"If @var{wrap} is non-@code{nil}, moving past either end of the buffer "
"continues from the other end.  If @var{display-message} is non-@code{nil}, "
"the button's help-echo string is displayed.  Any button with a "
"non-@code{nil} @code{skip} property is skipped over.  Returns the button "
"found, and signals an error if no buttons can be found.  If @var{no-error} "
"is non-@code{nil}, return @code{nil} instead of signaling the error."
msgstr ""

#. type: deffn
#: original_texis/display.texi:7977
#, no-wrap
msgid "Command backward-button n &optional wrap display-message no-error"
msgstr ""

#. type: deffn
#: original_texis/display.texi:7987
msgid ""
"Move to the @var{n}th previous button, or @var{n}th next button if @var{n} "
"is negative.  If @var{n} is zero, move to the start of any button at point.  "
"If @var{wrap} is non-@code{nil}, moving past either end of the buffer "
"continues from the other end.  If @var{display-message} is non-@code{nil}, "
"the button's help-echo string is displayed.  Any button with a "
"non-@code{nil} @code{skip} property is skipped over.  Returns the button "
"found, and signals an error if no buttons can be found.  If @var{no-error} "
"is non-@code{nil}, return @code{nil} instead of signaling the error."
msgstr ""

#. type: defun
#: original_texis/display.texi:7989
#, no-wrap
msgid "next-button pos &optional count-current"
msgstr ""

#. type: defunx
#: original_texis/display.texi:7990
#, no-wrap
msgid "previous-button pos &optional count-current"
msgstr ""

#. type: defun
#: original_texis/display.texi:7995
msgid ""
"Return the next button after (for @code{next-button}) or before (for "
"@code{previous-button}) position @var{pos} in the current buffer.  If "
"@var{count-current} is non-@code{nil}, count any button at @var{pos} in the "
"search, instead of starting at the next button."
msgstr ""

#. type: cindex
#: original_texis/display.texi:7999
#, no-wrap
msgid "ewoc"
msgstr ""

#. type: cindex
#: original_texis/display.texi:8000
#, no-wrap
msgid "display, abstract"
msgstr ""

#. type: cindex
#: original_texis/display.texi:8001
#, no-wrap
msgid "display, arbitrary objects"
msgstr ""

#. type: cindex
#: original_texis/display.texi:8002
#, no-wrap
msgid "model/view/controller"
msgstr ""

#. type: cindex
#: original_texis/display.texi:8003
#, no-wrap
msgid "view part, model/view/controller"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8010
msgid ""
"The Ewoc package constructs buffer text that represents a structure of Lisp "
"objects, and updates the text to follow changes in that structure.  This is "
"like the ``view'' component in the ``model--view--controller'' design "
"paradigm.  Ewoc means ``Emacs's Widget for Object Collections''."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8017
msgid ""
"An @dfn{ewoc} is a structure that organizes information required to "
"construct buffer text that represents certain Lisp data.  The buffer text of "
"the ewoc has three parts, in order: first, fixed @dfn{header} text; next, "
"textual descriptions of a series of data elements (Lisp objects that you "
"specify); and last, fixed @dfn{footer} text.  Specifically, an ewoc contains "
"information on:"
msgstr ""

#. type: itemize
#: original_texis/display.texi:8021
msgid "The buffer which its text is generated in."
msgstr ""

#. type: itemize
#: original_texis/display.texi:8024
msgid "The text's start position in the buffer."
msgstr ""

#. type: itemize
#: original_texis/display.texi:8027
msgid "The header and footer strings."
msgstr ""

#. type: cindex
#: original_texis/display.texi:8029
#, no-wrap
msgid "node, ewoc"
msgstr ""

#. type: itemize
#: original_texis/display.texi:8032
msgid "A doubly-linked chain of @dfn{nodes}, each of which contains:"
msgstr ""

#. type: itemize
#: original_texis/display.texi:8036
msgid "A @dfn{data element}, a single Lisp object."
msgstr ""

#. type: itemize
#: original_texis/display.texi:8039
msgid "Links to the preceding and following nodes in the chain."
msgstr ""

#. type: itemize
#: original_texis/display.texi:8045
msgid ""
"A @dfn{pretty-printer} function which is responsible for inserting the "
"textual representation of a data element value into the current buffer."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8054
msgid ""
"Typically, you define an ewoc with @code{ewoc-create}, and then pass the "
"resulting ewoc structure to other functions in the Ewoc package to build "
"nodes within it, and display it in the buffer.  Once it is displayed in the "
"buffer, other functions determine the correspondence between buffer "
"positions and nodes, move point from one node's textual representation to "
"another, and so forth.  @xref{Abstract Display Functions}."
msgstr ""

#. type: cindex
#: original_texis/display.texi:8055
#, no-wrap
msgid "encapsulation, ewoc"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8061
msgid ""
"A node @dfn{encapsulates} a data element much the way a variable holds a "
"value.  Normally, encapsulation occurs as a part of adding a node to the "
"ewoc.  You can retrieve the data element value and place a new value in its "
"place, like so:"
msgstr ""

#. type: lisp
#: original_texis/display.texi:8065
#, no-wrap
msgid ""
"(ewoc-data @var{node})\n"
"@result{} value\n"
"\n"
msgstr ""

#. type: lisp
#: original_texis/display.texi:8068
#, no-wrap
msgid ""
"(ewoc-set-data @var{node} @var{new-value})\n"
"@result{} @var{new-value}\n"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8075
msgid ""
"You can also use, as the data element value, a Lisp object (list or vector) "
"that is a container for the real value, or an index into some other "
"structure.  The example (@pxref{Abstract Display Example})  uses the latter "
"approach."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8083
msgid ""
"When the data changes, you will want to update the text in the buffer.  You "
"can update all nodes by calling @code{ewoc-refresh}, or just specific nodes "
"using @code{ewoc-invalidate}, or all nodes satisfying a predicate using "
"@code{ewoc-map}.  Alternatively, you can delete invalid nodes using "
"@code{ewoc-delete} or @code{ewoc-filter}, and add new nodes in their place.  "
"Deleting a node from an ewoc deletes its associated textual description from "
"buffer, as well."
msgstr ""

#. type: subsection
#: original_texis/display.texi:8087 original_texis/display.texi:8089
#: original_texis/display.texi:8090
#, no-wrap
msgid "Abstract Display Functions"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:8087
msgid "Functions in the Ewoc package."
msgstr ""

#. type: subsection
#: original_texis/display.texi:8087 original_texis/display.texi:8224
#: original_texis/display.texi:8225
#, no-wrap
msgid "Abstract Display Example"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:8087
msgid "Example of using Ewoc."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8095
msgid ""
"In this subsection, @var{ewoc} and @var{node} stand for the structures "
"described above (@pxref{Abstract Display}), while @var{data} stands for an "
"arbitrary Lisp object used as a data element."
msgstr ""

#. type: defun
#: original_texis/display.texi:8096
#, no-wrap
msgid "ewoc-create pretty-printer &optional header footer nosep"
msgstr ""

#. type: defun
#: original_texis/display.texi:8103
msgid ""
"This constructs and returns a new ewoc, with no nodes (and thus no data "
"elements).  @var{pretty-printer} should be a function that takes one "
"argument, a data element of the sort you plan to use in this ewoc, and "
"inserts its textual description at point using @code{insert} (and never "
"@code{insert-before-markers}, because that would interfere with the Ewoc "
"package's internal mechanisms)."
msgstr ""

#. type: defun
#: original_texis/display.texi:8110
msgid ""
"Normally, a newline is automatically inserted after the header, the footer "
"and every node's textual description.  If @var{nosep} is non-@code{nil}, no "
"newline is inserted.  This may be useful for displaying an entire ewoc on a "
"single line, for example, or for making nodes invisible by arranging for "
"@var{pretty-printer} to do nothing for those nodes."
msgstr ""

#. type: defun
#: original_texis/display.texi:8114
msgid ""
"An ewoc maintains its text in the buffer that is current when you create it, "
"so switch to the intended buffer before calling @code{ewoc-create}."
msgstr ""

#. type: defun
#: original_texis/display.texi:8116
#, no-wrap
msgid "ewoc-buffer ewoc"
msgstr ""

#. type: defun
#: original_texis/display.texi:8118
msgid "This returns the buffer where @var{ewoc} maintains its text."
msgstr ""

#. type: defun
#: original_texis/display.texi:8120
#, no-wrap
msgid "ewoc-get-hf ewoc"
msgstr ""

#. type: defun
#: original_texis/display.texi:8123
msgid ""
"This returns a cons cell @code{(@var{header} . @var{footer})} made from "
"@var{ewoc}'s header and footer."
msgstr ""

#. type: defun
#: original_texis/display.texi:8125
#, no-wrap
msgid "ewoc-set-hf ewoc header footer"
msgstr ""

#. type: defun
#: original_texis/display.texi:8128
msgid ""
"This sets the header and footer of @var{ewoc} to the strings @var{header} "
"and @var{footer}, respectively."
msgstr ""

#. type: defun
#: original_texis/display.texi:8130
#, no-wrap
msgid "ewoc-enter-first ewoc data"
msgstr ""

#. type: defunx
#: original_texis/display.texi:8131
#, no-wrap
msgid "ewoc-enter-last ewoc data"
msgstr ""

#. type: defun
#: original_texis/display.texi:8134
msgid ""
"These add a new node encapsulating @var{data}, putting it, respectively, at "
"the beginning or end of @var{ewoc}'s chain of nodes."
msgstr ""

#. type: defun
#: original_texis/display.texi:8136
#, no-wrap
msgid "ewoc-enter-before ewoc node data"
msgstr ""

#. type: defunx
#: original_texis/display.texi:8137
#, no-wrap
msgid "ewoc-enter-after ewoc node data"
msgstr ""

#. type: defun
#: original_texis/display.texi:8140
msgid ""
"These add a new node encapsulating @var{data}, adding it to @var{ewoc} "
"before or after @var{node}, respectively."
msgstr ""

#. type: defun
#: original_texis/display.texi:8142
#, no-wrap
msgid "ewoc-prev ewoc node"
msgstr ""

#. type: defunx
#: original_texis/display.texi:8143
#, no-wrap
msgid "ewoc-next ewoc node"
msgstr ""

#. type: defun
#: original_texis/display.texi:8146
msgid ""
"These return, respectively, the previous node and the next node of "
"@var{node} in @var{ewoc}."
msgstr ""

#. type: defun
#: original_texis/display.texi:8148
#, no-wrap
msgid "ewoc-nth ewoc n"
msgstr ""

#. type: defun
#: original_texis/display.texi:8152
msgid ""
"This returns the node in @var{ewoc} found at zero-based index @var{n}.  A "
"negative @var{n} means count from the end.  @code{ewoc-nth} returns "
"@code{nil} if @var{n} is out of range."
msgstr ""

#. type: defun
#: original_texis/display.texi:8154
#, no-wrap
msgid "ewoc-data node"
msgstr ""

#. type: defun
#: original_texis/display.texi:8156
msgid "This extracts the data encapsulated by @var{node} and returns it."
msgstr ""

#. type: defun
#: original_texis/display.texi:8158
#, no-wrap
msgid "ewoc-set-data node data"
msgstr ""

#. type: defun
#: original_texis/display.texi:8160
msgid "This sets the data encapsulated by @var{node} to @var{data}."
msgstr ""

#. type: defun
#: original_texis/display.texi:8162
#, no-wrap
msgid "ewoc-locate ewoc &optional pos guess"
msgstr ""

#. type: defun
#: original_texis/display.texi:8170
msgid ""
"This determines the node in @var{ewoc} which contains point (or @var{pos} if "
"specified), and returns that node.  If @var{ewoc} has no nodes, it returns "
"@code{nil}.  If @var{pos} is before the first node, it returns the first "
"node; if @var{pos} is after the last node, it returns the last node.  The "
"optional third arg @var{guess} should be a node that is likely to be near "
"@var{pos}; this doesn't alter the result, but makes the function run faster."
msgstr ""

#. type: defun
#: original_texis/display.texi:8172
#, no-wrap
msgid "ewoc-location node"
msgstr ""

#. type: defun
#: original_texis/display.texi:8174
msgid "This returns the start position of @var{node}."
msgstr ""

#. type: defun
#: original_texis/display.texi:8176
#, no-wrap
msgid "ewoc-goto-prev ewoc arg"
msgstr ""

#. type: defunx
#: original_texis/display.texi:8177
#, no-wrap
msgid "ewoc-goto-next ewoc arg"
msgstr ""

#. type: defun
#: original_texis/display.texi:8183
msgid ""
"These move point to the previous or next, respectively, @var{arg}th node in "
"@var{ewoc}.  @code{ewoc-goto-prev} does not move if it is already at the "
"first node or if @var{ewoc} is empty, whereas @code{ewoc-goto-next} moves "
"past the last node, returning @code{nil}.  Excepting this special case, "
"these functions return the node moved to."
msgstr ""

#. type: defun
#: original_texis/display.texi:8185
#, no-wrap
msgid "ewoc-goto-node ewoc node"
msgstr ""

#. type: defun
#: original_texis/display.texi:8187
msgid "This moves point to the start of @var{node} in @var{ewoc}."
msgstr ""

#. type: defun
#: original_texis/display.texi:8189
#, no-wrap
msgid "ewoc-refresh ewoc"
msgstr ""

#. type: defun
#: original_texis/display.texi:8194
msgid ""
"This function regenerates the text of @var{ewoc}.  It works by deleting the "
"text between the header and the footer, i.e., all the data elements' "
"representations, and then calling the pretty-printer function for each node, "
"one by one, in order."
msgstr ""

#. type: defun
#: original_texis/display.texi:8196
#, no-wrap
msgid "ewoc-invalidate ewoc &rest nodes"
msgstr ""

#. type: defun
#: original_texis/display.texi:8199
msgid ""
"This is similar to @code{ewoc-refresh}, except that only @var{nodes} in "
"@var{ewoc} are updated instead of the entire set."
msgstr ""

#. type: defun
#: original_texis/display.texi:8201
#, no-wrap
msgid "ewoc-delete ewoc &rest nodes"
msgstr ""

#. type: defun
#: original_texis/display.texi:8203
msgid "This deletes each node in @var{nodes} from @var{ewoc}."
msgstr ""

#. type: defun
#: original_texis/display.texi:8205
#, no-wrap
msgid "ewoc-filter ewoc predicate &rest args"
msgstr ""

#. type: defun
#: original_texis/display.texi:8209
msgid ""
"This calls @var{predicate} for each data element in @var{ewoc} and deletes "
"those nodes for which @var{predicate} returns @code{nil}.  Any @var{args} "
"are passed to @var{predicate}."
msgstr ""

#. type: defun
#: original_texis/display.texi:8211
#, no-wrap
msgid "ewoc-collect ewoc predicate &rest args"
msgstr ""

#. type: defun
#: original_texis/display.texi:8216
msgid ""
"This calls @var{predicate} for each data element in @var{ewoc} and returns a "
"list of those elements for which @var{predicate} returns non-@code{nil}.  "
"The elements in the list are ordered as in the buffer.  Any @var{args} are "
"passed to @var{predicate}."
msgstr ""

#. type: defun
#: original_texis/display.texi:8218
#, no-wrap
msgid "ewoc-map map-function ewoc &rest args"
msgstr ""

#. type: defun
#: original_texis/display.texi:8222
msgid ""
"This calls @var{map-function} for each data element in @var{ewoc} and "
"updates those nodes for which @var{map-function} returns non-@code{nil}.  "
"Any @var{args} are passed to @var{map-function}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8231
msgid ""
"Here is a simple example using functions of the ewoc package to implement a "
"@dfn{color components} display, an area in a buffer that represents a vector "
"of three integers (itself representing a 24-bit RGB value) in various ways."
msgstr ""

#. type: example
#: original_texis/display.texi:8237
#, no-wrap
msgid ""
"(setq colorcomp-ewoc nil\n"
"      colorcomp-data nil\n"
"      colorcomp-mode-map nil\n"
"      colorcomp-labels [\"Red\" \"Green\" \"Blue\"])\n"
"\n"
msgstr ""

#. type: example
#: original_texis/display.texi:8255
#, no-wrap
msgid ""
"(defun colorcomp-pp (data)\n"
"  (if data\n"
"      (let ((comp (aref colorcomp-data data)))\n"
"        (insert (aref colorcomp-labels data) \"\\t: #x\"\n"
"                (format \"%02X\" comp) \" \"\n"
"                (make-string (ash comp -2) ?#) \"\\n\"))\n"
"    (let ((cstr (format \"#%02X%02X%02X\"\n"
"                        (aref colorcomp-data 0)\n"
"                        (aref colorcomp-data 1)\n"
"                        (aref colorcomp-data 2)))\n"
"          (samp \" (sample text) \"))\n"
"      (insert \"Color\\t: \"\n"
"              (propertize samp 'face\n"
"                          `(foreground-color . ,cstr))\n"
"              (propertize samp 'face\n"
"                          `(background-color . ,cstr))\n"
"              \"\\n\"))))\n"
"\n"
msgstr ""

#. type: example
#: original_texis/display.texi:8284
#, no-wrap
msgid ""
"(defun colorcomp (color)\n"
"  \"Allow fiddling with COLOR in a new buffer.\n"
"The buffer is in Color Components mode.\"\n"
"  (interactive \"sColor (name or #RGB or #RRGGBB): \")\n"
"  (when (string= \"\" color)\n"
"    (setq color \"green\"))\n"
"  (unless (color-values color)\n"
"    (error \"No such color: %S\" color))\n"
"  (switch-to-buffer\n"
"   (generate-new-buffer (format \"originally: %s\" color)))\n"
"  (kill-all-local-variables)\n"
"  (setq major-mode 'colorcomp-mode\n"
"        mode-name \"Color Components\")\n"
"  (use-local-map colorcomp-mode-map)\n"
"  (erase-buffer)\n"
"  (buffer-disable-undo)\n"
"  (let ((data (apply 'vector (mapcar (lambda (n) (ash n -8))\n"
"                                     (color-values color))))\n"
"        (ewoc (ewoc-create 'colorcomp-pp\n"
"                           \"\\nColor Components\\n\\n\"\n"
"                           (substitute-command-keys\n"
"                            \"\\n\\\\@{colorcomp-mode-map@}\"))))\n"
"    (set (make-local-variable 'colorcomp-data) data)\n"
"    (set (make-local-variable 'colorcomp-ewoc) ewoc)\n"
"    (ewoc-enter-last ewoc 0)\n"
"    (ewoc-enter-last ewoc 1)\n"
"    (ewoc-enter-last ewoc 2)\n"
"    (ewoc-enter-last ewoc nil)))\n"
msgstr ""

#. type: cindex
#: original_texis/display.texi:8286
#, no-wrap
msgid "controller part, model/view/controller"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8292
msgid ""
"This example can be extended to be a color selection widget (in other words, "
"the ``controller'' part of the ``model--view--controller'' design paradigm) "
"by defining commands to modify @code{colorcomp-data} and to finish the "
"selection process, and a keymap to tie it all together conveniently."
msgstr ""

#. type: smallexample
#: original_texis/display.texi:8302
#, no-wrap
msgid ""
"(defun colorcomp-mod (index limit delta)\n"
"  (let ((cur (aref colorcomp-data index)))\n"
"    (unless (= limit cur)\n"
"      (aset colorcomp-data index (+ cur delta)))\n"
"    (ewoc-invalidate\n"
"     colorcomp-ewoc\n"
"     (ewoc-nth colorcomp-ewoc index)\n"
"     (ewoc-nth colorcomp-ewoc -1))))\n"
"\n"
msgstr ""

#. type: smallexample
#: original_texis/display.texi:8309
#, no-wrap
msgid ""
"(defun colorcomp-R-more () (interactive) (colorcomp-mod 0 255 1))\n"
"(defun colorcomp-G-more () (interactive) (colorcomp-mod 1 255 1))\n"
"(defun colorcomp-B-more () (interactive) (colorcomp-mod 2 255 1))\n"
"(defun colorcomp-R-less () (interactive) (colorcomp-mod 0 0 -1))\n"
"(defun colorcomp-G-less () (interactive) (colorcomp-mod 1 0 -1))\n"
"(defun colorcomp-B-less () (interactive) (colorcomp-mod 2 0 -1))\n"
"\n"
msgstr ""

#. type: smallexample
#: original_texis/display.texi:8319
#, no-wrap
msgid ""
"(defun colorcomp-copy-as-kill-and-exit ()\n"
"  \"Copy the color components into the kill ring and kill the buffer.\n"
"The string is formatted #RRGGBB (hash followed by six hex digits).\"\n"
"  (interactive)\n"
"  (kill-new (format \"#%02X%02X%02X\"\n"
"                    (aref colorcomp-data 0)\n"
"                    (aref colorcomp-data 1)\n"
"                    (aref colorcomp-data 2)))\n"
"  (kill-buffer nil))\n"
"\n"
msgstr ""

#. type: smallexample
#: original_texis/display.texi:8329
#, no-wrap
msgid ""
"(setq colorcomp-mode-map\n"
"      (define-keymap :suppress t\n"
"        \"i\" 'colorcomp-R-less\n"
"        \"o\" 'colorcomp-R-more\n"
"        \"k\" 'colorcomp-G-less\n"
"        \"l\" 'colorcomp-G-more\n"
"        \",\" 'colorcomp-B-less\n"
"        \".\" 'colorcomp-B-more\n"
"        \"SPC\" 'colorcomp-copy-as-kill-and-exit))\n"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8334
msgid ""
"Note that we never modify the data in each node, which is fixed when the "
"ewoc is created to be either @code{nil} or an index into the vector "
"@code{colorcomp-data}, the actual color components."
msgstr ""

#. type: section
#: original_texis/display.texi:8336
#, no-wrap
msgid "Blinking Parentheses"
msgstr ""

#. type: cindex
#: original_texis/display.texi:8337
#, no-wrap
msgid "parenthesis matching"
msgstr ""

#. type: cindex
#: original_texis/display.texi:8338
#, no-wrap
msgid "blinking parentheses"
msgstr ""

#. type: cindex
#: original_texis/display.texi:8339
#, no-wrap
msgid "balancing parentheses"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8343
msgid ""
"This section describes the mechanism by which Emacs shows a matching open "
"parenthesis when the user inserts a close parenthesis."
msgstr ""

#. type: defvar
#: original_texis/display.texi:8344
#, no-wrap
msgid "blink-paren-function"
msgstr ""

#. type: defvar
#: original_texis/display.texi:8349
msgid ""
"The value of this variable should be a function (of no arguments) to be "
"called whenever a character with close parenthesis syntax is inserted.  The "
"value of @code{blink-paren-function} may be @code{nil}, in which case "
"nothing is done."
msgstr ""

#. type: defopt
#: original_texis/display.texi:8351
#, no-wrap
msgid "blink-matching-paren"
msgstr ""

#. type: defopt
#: original_texis/display.texi:8354
msgid ""
"If this variable is @code{nil}, then @code{blink-matching-open} does "
"nothing."
msgstr ""

#. type: defopt
#: original_texis/display.texi:8356
#, no-wrap
msgid "blink-matching-paren-distance"
msgstr ""

#. type: defopt
#: original_texis/display.texi:8359
msgid ""
"This variable specifies the maximum distance to scan for a matching "
"parenthesis before giving up."
msgstr ""

#. type: defopt
#: original_texis/display.texi:8361
#, no-wrap
msgid "blink-matching-delay"
msgstr ""

#. type: defopt
#: original_texis/display.texi:8365
msgid ""
"This variable specifies the number of seconds to keep indicating the "
"matching parenthesis.  A fraction of a second often gives good results, but "
"the default is 1, which works on all systems."
msgstr ""

#. type: deffn
#: original_texis/display.texi:8367
#, no-wrap
msgid "Command blink-matching-open"
msgstr ""

#. type: deffn
#: original_texis/display.texi:8375
msgid ""
"This function is the default value of @code{blink-paren-function}.  It "
"assumes that point follows a character with close parenthesis syntax and "
"applies the appropriate effect momentarily to the matching opening "
"character.  If that character is not already on the screen, it displays the "
"character's context in the echo area.  To avoid long delays, this function "
"does not search farther than @code{blink-matching-paren-distance} "
"characters."
msgstr ""

#. type: deffn
#: original_texis/display.texi:8377
msgid "Here is an example of calling this function explicitly."
msgstr ""

#. type: group
#: original_texis/display.texi:8383
#, no-wrap
msgid ""
"(defun interactive-blink-matching-open ()\n"
"  \"Indicate momentarily the start of parenthesized sexp before point.\"\n"
"  (interactive)\n"
msgstr ""

#. type: group
#: original_texis/display.texi:8389
#, no-wrap
msgid ""
"  (let ((blink-matching-paren-distance\n"
"         (buffer-size))\n"
"        (blink-matching-paren t))\n"
"    (blink-matching-open)))\n"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8405
msgid ""
"This section describes how characters are actually displayed by Emacs.  "
"Typically, a character is displayed as a @dfn{glyph} (a graphical symbol "
"which occupies one character position on the screen), whose appearance "
"corresponds to the character itself.  For example, the character @samp{a} "
"(character code 97) is displayed as @samp{a}.  Some characters, however, are "
"displayed specially.  For example, the formfeed character (character code "
"12) is usually displayed as a sequence of two glyphs, @samp{^L}, while the "
"newline character (character code 10) starts a new screen line."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8409
msgid ""
"You can modify how each character is displayed by defining a @dfn{display "
"table}, which maps each character code into a sequence of glyphs.  "
"@xref{Display Tables}."
msgstr ""

#. type: node
#: original_texis/display.texi:8416 original_texis/display.texi:8418
#, no-wrap
msgid "Usual Display"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:8416
msgid "The usual conventions for displaying characters."
msgstr ""

#. type: subsection
#: original_texis/display.texi:8416 original_texis/display.texi:8514
#: original_texis/display.texi:8515
#, no-wrap
msgid "Display Tables"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:8416
msgid "What a display table consists of."
msgstr ""

#. type: subsection
#: original_texis/display.texi:8416 original_texis/display.texi:8623
#: original_texis/display.texi:8624
#, no-wrap
msgid "Active Display Table"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:8416
msgid "How Emacs selects a display table to use."
msgstr ""

#. type: subsection
#: original_texis/display.texi:8416 original_texis/display.texi:8670
#: original_texis/display.texi:8671
#, no-wrap
msgid "Glyphs"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:8416
msgid "How to define a glyph, and what glyphs mean."
msgstr ""

#. type: node
#: original_texis/display.texi:8416 original_texis/display.texi:8728
#, no-wrap
msgid "Glyphless Chars"
msgstr ""

#. type: menuentry
#: original_texis/display.texi:8416
msgid "How glyphless characters are drawn."
msgstr ""

#. type: subsection
#: original_texis/display.texi:8419
#, no-wrap
msgid "Usual Display Conventions"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8423
msgid ""
"Here are the conventions for displaying each character code (in the absence "
"of a display table, which can override these"
msgstr ""

#. type: iftex
#: original_texis/display.texi:8425
msgid "conventions)."
msgstr ""

#. type: ifnottex
#: original_texis/display.texi:8428
msgid "conventions; @pxref{Display Tables})."
msgstr ""

#. type: cindex
#: original_texis/display.texi:8430
#, no-wrap
msgid "printable ASCII characters"
msgstr ""

#. type: itemize
#: original_texis/display.texi:8436
msgid ""
"The @dfn{printable @acronym{ASCII} characters}, character codes 32 through "
"126 (consisting of numerals, English letters, and symbols like @samp{#}) are "
"displayed literally."
msgstr ""

#. type: itemize
#: original_texis/display.texi:8442
msgid ""
"The tab character (character code 9) displays as whitespace stretching up to "
"the next tab stop column.  @xref{Text Display,,, emacs, The GNU Emacs "
"Manual}.  The variable @code{tab-width} controls the number of spaces per "
"tab stop (see below)."
msgstr ""

#. type: itemize
#: original_texis/display.texi:8446
msgid ""
"The newline character (character code 10) has a special effect: it ends the "
"preceding line and starts a new line."
msgstr ""

#. type: cindex
#: original_texis/display.texi:8447
#, no-wrap
msgid "ASCII control characters"
msgstr ""

#. type: itemize
#: original_texis/display.texi:8457
msgid ""
"The non-printable @dfn{@acronym{ASCII} control characters}---character codes "
"0 through 31, as well as the @key{DEL} character (character code "
"127)---display in one of two ways according to the variable "
"@code{ctl-arrow}.  If this variable is non-@code{nil} (the default), these "
"characters are displayed as sequences of two glyphs, where the first glyph "
"is @samp{^} (a display table can specify a glyph to use instead of "
"@samp{^}); e.g., the @key{DEL} character is displayed as @samp{^?}."
msgstr ""

#. type: itemize
#: original_texis/display.texi:8460
msgid ""
"If @code{ctl-arrow} is @code{nil}, these characters are displayed as octal "
"escapes (see below)."
msgstr ""

#. type: itemize
#: original_texis/display.texi:8465
msgid ""
"This rule also applies to carriage return (character code 13), if that "
"character appears in the buffer.  But carriage returns usually do not appear "
"in buffer text; they are eliminated as part of end-of-line conversion "
"(@pxref{Coding System Basics})."
msgstr ""

#. type: cindex
#: original_texis/display.texi:8466
#, no-wrap
msgid "octal escapes"
msgstr ""

#. type: itemize
#: original_texis/display.texi:8474
msgid ""
"@dfn{Raw bytes} are non-@acronym{ASCII} characters with codes 128 through "
"255 (@pxref{Text Representations}).  These characters display as @dfn{octal "
"escapes}: sequences of four glyphs, where the first glyph is the "
"@acronym{ASCII} code for @samp{\\}, and the others are digit characters "
"representing the character code in octal.  (A display table can specify a "
"glyph to use instead of @samp{\\}.)"
msgstr ""

#. type: itemize
#: original_texis/display.texi:8483
msgid ""
"Each non-@acronym{ASCII} character with code above 255 is displayed "
"literally, if the terminal supports it.  If the terminal does not support "
"it, the character is said to be @dfn{glyphless}, and it is usually displayed "
"using a placeholder glyph.  For example, if a graphical terminal has no font "
"for a character, Emacs usually displays a box containing the character code "
"in hexadecimal.  @xref{Glyphless Chars}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8489
msgid ""
"The above display conventions apply even when there is a display table, for "
"any character whose entry in the active display table is @code{nil}.  Thus, "
"when you set up a display table, you need only specify the characters for "
"which you want special display behavior."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8496
msgid ""
"The following variables affect how certain characters are displayed on the "
"screen.  Since they change the number of columns the characters occupy, they "
"also affect the indentation functions.  They also affect how the mode line "
"is displayed; if you want to force redisplay of the mode line using the new "
"values, call the function @code{force-mode-line-update} (@pxref{Mode Line "
"Format})."
msgstr ""

#. type: defopt
#: original_texis/display.texi:8497
#, no-wrap
msgid "ctl-arrow"
msgstr ""

#. type: cindex
#: original_texis/display.texi:8498
#, no-wrap
msgid "control characters in display"
msgstr ""

#. type: defopt
#: original_texis/display.texi:8504
msgid ""
"This buffer-local variable controls how control characters are displayed.  "
"If it is non-@code{nil}, they are displayed as a caret followed by the "
"character: @samp{^A}.  If it is @code{nil}, they are displayed as octal "
"escapes: a backslash followed by three octal digits, as in @samp{\\001}."
msgstr ""

#. type: defopt
#: original_texis/display.texi:8506
#, no-wrap
msgid "tab-width"
msgstr ""

#. type: defopt
#: original_texis/display.texi:8512
msgid ""
"The value of this buffer-local variable is the spacing between tab stops "
"used for displaying tab characters in Emacs buffers.  The value is in units "
"of columns, and the default is 8.  Note that this feature is completely "
"independent of the user-settable tab stops used by the command "
"@code{tab-to-tab-stop}.  @xref{Indent Tabs}."
msgstr ""

#. type: cindex
#: original_texis/display.texi:8517
#, no-wrap
msgid "display table"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8524
msgid ""
"A display table is a special-purpose char-table (@pxref{Char-Tables}), with "
"@code{display-table} as its subtype, which is used to override the usual "
"character display conventions.  This section describes how to make, inspect, "
"and assign elements to a display table object.  The next section "
"(@pxref{Active Display Table})  describes the various standard display "
"tables and their precedence."
msgstr ""

#. type: defun
#: original_texis/display.texi:8525
#, no-wrap
msgid "make-display-table"
msgstr ""

#. type: defun
#: original_texis/display.texi:8528
msgid ""
"This creates and returns a display table.  The table initially has "
"@code{nil} in all elements."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8536
msgid ""
"The ordinary elements of the display table are indexed by character codes; "
"the element at index @var{c} says how to display the character code "
"@var{c}.  The value should be @code{nil} (which means to display the "
"character @var{c} according to the usual display conventions; @pxref{Usual "
"Display}), or a vector of glyph codes (which means to display the character "
"@var{c} as those glyphs; @pxref{Glyphs})."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8540
msgid ""
"@strong{Warning:} if you use the display table to change the display of "
"newline characters, the whole buffer will be displayed as one long line."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8544
msgid ""
"The display table also has six @dfn{extra slots} which serve special "
"purposes.  Here is a table of their meanings; @code{nil} in any slot means "
"to use the default for that slot, as stated below."
msgstr ""

#. type: item
#: original_texis/display.texi:8546
#, no-wrap
msgid "0"
msgstr ""

#. type: table
#: original_texis/display.texi:8552
msgid ""
"The glyph for the end of a truncated screen line (the default for this is "
"@samp{$}).  @xref{Glyphs}.  On graphical terminals, Emacs by default uses "
"arrows in the fringes to indicate truncation, so the display table has no "
"effect, unless you disable the fringes (@pxref{Fringes,, Window Fringes, "
"emacs, the GNU Emacs Manual})."
msgstr ""

#. type: item
#: original_texis/display.texi:8553
#, no-wrap
msgid "1"
msgstr ""

#. type: table
#: original_texis/display.texi:8558
msgid ""
"The glyph for the end of a continued line (the default is @samp{\\}).  On "
"graphical terminals, Emacs by default uses curved arrows in the fringes to "
"indicate continuation, so the display table has no effect, unless you "
"disable the fringes."
msgstr ""

#. type: item
#: original_texis/display.texi:8559
#, no-wrap
msgid "2"
msgstr ""

#. type: table
#: original_texis/display.texi:8562
msgid ""
"The glyph for indicating a character displayed as an octal character code "
"(the default is @samp{\\})."
msgstr ""

#. type: item
#: original_texis/display.texi:8563
#, no-wrap
msgid "3"
msgstr ""

#. type: table
#: original_texis/display.texi:8565
msgid "The glyph for indicating a control character (the default is @samp{^})."
msgstr ""

#. type: item
#: original_texis/display.texi:8566
#, no-wrap
msgid "4"
msgstr ""

#. type: table
#: original_texis/display.texi:8569
msgid ""
"A vector of glyphs for indicating the presence of invisible lines (the "
"default is @samp{...}).  @xref{Selective Display}."
msgstr ""

#. type: item
#: original_texis/display.texi:8570
#, no-wrap
msgid "5"
msgstr ""

#. type: table
#: original_texis/display.texi:8578
msgid ""
"The glyph used to draw the border between side-by-side windows (the default "
"is @samp{|}).  @xref{Splitting Windows}.  This currently has effect only on "
"text terminals; on graphical terminals, if vertical scroll bars are "
"supported and in use, a scroll bar separates the two windows, and if there "
"are no vertical scroll bars and no dividers (@pxref{Window Dividers}), Emacs "
"uses a thin line to indicate the border."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8583
msgid ""
"For example, here is how to construct a display table that mimics the effect "
"of setting @code{ctl-arrow} to a non-@code{nil} value (@pxref{Glyphs}, for "
"the function @code{make-glyph-code}):"
msgstr ""

#. type: example
#: original_texis/display.texi:8595
#, no-wrap
msgid ""
"(setq disptab (make-display-table))\n"
"(dotimes (i 32)\n"
"  (or (= i ?\\t)\n"
"      (= i ?\\n)\n"
"      (aset disptab i\n"
"            (vector (make-glyph-code ?^ 'escape-glyph)\n"
"                    (make-glyph-code (+ i 64) 'escape-glyph)))))\n"
"(aset disptab 127\n"
"      (vector (make-glyph-code ?^ 'escape-glyph)\n"
"              (make-glyph-code ?? 'escape-glyph)))\n"
msgstr ""

#. type: defun
#: original_texis/display.texi:8597
#, no-wrap
msgid "display-table-slot display-table slot"
msgstr ""

#. type: defun
#: original_texis/display.texi:8603
msgid ""
"This function returns the value of the extra slot @var{slot} of "
"@var{display-table}.  The argument @var{slot} may be a number from 0 to 5 "
"inclusive, or a slot name (symbol).  Valid symbols are @code{truncation}, "
"@code{wrap}, @code{escape}, @code{control}, @code{selective-display}, and "
"@code{vertical-border}."
msgstr ""

#. type: defun
#: original_texis/display.texi:8605
#, no-wrap
msgid "set-display-table-slot display-table slot value"
msgstr ""

#. type: defun
#: original_texis/display.texi:8611
msgid ""
"This function stores @var{value} in the extra slot @var{slot} of "
"@var{display-table}.  The argument @var{slot} may be a number from 0 to 5 "
"inclusive, or a slot name (symbol).  Valid symbols are @code{truncation}, "
"@code{wrap}, @code{escape}, @code{control}, @code{selective-display}, and "
"@code{vertical-border}."
msgstr ""

#. type: defun
#: original_texis/display.texi:8613
#, no-wrap
msgid "describe-display-table display-table"
msgstr ""

#. type: defun
#: original_texis/display.texi:8616
msgid ""
"This function displays a description of the display table "
"@var{display-table} in a help buffer."
msgstr ""

#. type: deffn
#: original_texis/display.texi:8618
#, no-wrap
msgid "Command describe-current-display-table"
msgstr ""

#. type: deffn
#: original_texis/display.texi:8621
msgid ""
"This command displays a description of the current display table in a help "
"buffer."
msgstr ""

#. type: cindex
#: original_texis/display.texi:8625
#, no-wrap
msgid "active display table"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8635
msgid ""
"Each window can specify a display table, and so can each buffer.  The "
"window's display table, if there is one, takes precedence over the buffer's "
"display table.  If neither exists, Emacs tries to use the standard display "
"table; if that is @code{nil}, Emacs uses the usual character display "
"conventions (@pxref{Usual Display}).  (Emacs does not ``merge'' display "
"tables: For instance, if the window has a display table, the buffer's "
"display table and the standard display table are completely ignored.)"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8639
msgid ""
"Note that display tables affect how the mode line is displayed, so if you "
"want to force redisplay of the mode line using a new display table, call "
"@code{force-mode-line-update} (@pxref{Mode Line Format})."
msgstr ""

#. type: defun
#: original_texis/display.texi:8640
#, no-wrap
msgid "window-display-table &optional window"
msgstr ""

#. type: defun
#: original_texis/display.texi:8643
msgid ""
"This function returns @var{window}'s display table, or @code{nil} if there "
"is none.  The default for @var{window} is the selected window."
msgstr ""

#. type: defun
#: original_texis/display.texi:8645
#, no-wrap
msgid "set-window-display-table window table"
msgstr ""

#. type: defun
#: original_texis/display.texi:8649
msgid ""
"This function sets the display table of @var{window} to @var{table}.  The "
"argument @var{table} should be either a display table or @code{nil}."
msgstr ""

#. type: defvar
#: original_texis/display.texi:8651
#, no-wrap
msgid "buffer-display-table"
msgstr ""

#. type: defvar
#: original_texis/display.texi:8655
msgid ""
"This variable is automatically buffer-local in all buffers; its value "
"specifies the buffer's display table.  If it is @code{nil}, there is no "
"buffer display table."
msgstr ""

#. type: defvar
#: original_texis/display.texi:8657
#, no-wrap
msgid "standard-display-table"
msgstr ""

#. type: defvar
#: original_texis/display.texi:8665
msgid ""
"The value of this variable is the standard display table, which is used when "
"Emacs is displaying a buffer in a window with neither a window display table "
"nor a buffer display table defined, or when Emacs is outputting text to the "
"standard output or error streams.  Although its default is typically "
"@code{nil}, in an interactive session if the terminal cannot display curved "
"quotes, its default maps curved quotes to ASCII approximations.  @xref{Text "
"Quoting Style}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8669
msgid ""
"The @file{disp-table} library defines several functions for changing the "
"standard display table."
msgstr ""

#. type: cindex
#: original_texis/display.texi:8672
#, no-wrap
msgid "glyph"
msgstr ""

#. type: cindex
#: original_texis/display.texi:8674
#, no-wrap
msgid "glyph code"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8681
msgid ""
"A @dfn{glyph} is a graphical symbol which occupies a single character "
"position on the screen.  Each glyph is represented in Lisp as a @dfn{glyph "
"code}, which specifies a character and optionally a face to display it in "
"(@pxref{Faces}).  The main use of glyph codes is as the entries of display "
"tables (@pxref{Display Tables}).  The following functions are used to "
"manipulate glyph codes:"
msgstr ""

#. type: defun
#: original_texis/display.texi:8682
#, no-wrap
msgid "make-glyph-code char &optional face"
msgstr ""

#. type: defun
#: original_texis/display.texi:8688
msgid ""
"This function returns a glyph code representing char @var{char} with face "
"@var{face}.  If @var{face} is omitted or @code{nil}, the glyph uses the "
"default face; in that case, the glyph code is an integer.  If @var{face} is "
"non-@code{nil}, the glyph code is not necessarily an integer object."
msgstr ""

#. type: defun
#: original_texis/display.texi:8690
#, no-wrap
msgid "glyph-char glyph"
msgstr ""

#. type: defun
#: original_texis/display.texi:8692
msgid "This function returns the character of glyph code @var{glyph}."
msgstr ""

#. type: defun
#: original_texis/display.texi:8694
#, no-wrap
msgid "glyph-face glyph"
msgstr ""

#. type: defun
#: original_texis/display.texi:8697
msgid ""
"This function returns face of glyph code @var{glyph}, or @code{nil} if "
"@var{glyph} uses the default face."
msgstr ""

#. type: ifnottex
#: original_texis/display.texi:8703
msgid ""
"You can set up a @dfn{glyph table} to change how glyph codes are actually "
"displayed on text terminals.  This feature is semi-obsolete; use "
"@code{glyphless-char-display} instead (@pxref{Glyphless Chars})."
msgstr ""

#. type: defvar
#: original_texis/display.texi:8704
#, no-wrap
msgid "glyph-table"
msgstr ""

#. type: defvar
#: original_texis/display.texi:8711
msgid ""
"The value of this variable, if non-@code{nil}, is the current glyph table.  "
"It takes effect only on character terminals; on graphical displays, all "
"glyphs are displayed literally.  The glyph table should be a vector whose "
"@var{g}th element specifies how to display glyph code @var{g}, where @var{g} "
"is the glyph code for a glyph whose face is unspecified.  Each element "
"should be one of the following:"
msgstr ""

#. type: table
#: original_texis/display.texi:8715
msgid "Display this glyph literally."
msgstr ""

#. type: item
#: original_texis/display.texi:8716
#, no-wrap
msgid "a string"
msgstr ""

#. type: table
#: original_texis/display.texi:8718
msgid "Display this glyph by sending the specified string to the terminal."
msgstr ""

#. type: item
#: original_texis/display.texi:8719
#, no-wrap
msgid "a glyph code"
msgstr ""

#. type: table
#: original_texis/display.texi:8721
msgid "Display the specified glyph code instead."
msgstr ""

#. type: defvar
#: original_texis/display.texi:8725
msgid ""
"Any integer glyph code greater than or equal to the length of the glyph "
"table is displayed literally."
msgstr ""

#. type: subsection
#: original_texis/display.texi:8729
#, no-wrap
msgid "Glyphless Character Display"
msgstr ""

#. type: cindex
#: original_texis/display.texi:8730
#, no-wrap
msgid "glyphless characters"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8739
msgid ""
"@dfn{Glyphless characters} are characters which are displayed in a special "
"way, e.g., as a box containing a hexadecimal code, instead of being "
"displayed literally.  These include characters which are explicitly defined "
"to be glyphless, as well as characters for which there is no available font "
"(on a graphical display), and characters which cannot be encoded by the "
"terminal's coding system (on a text terminal)."
msgstr ""

#. type: findex
#: original_texis/display.texi:8740
#, no-wrap
msgid "glyphless-display-mode"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8745
msgid ""
"The @code{glyphless-display-mode} minor mode can be used to toggle "
"displaying glyphless characters in a convenient manner in the current "
"buffer.  If this mode is enabled, all the glyphless characters are displayed "
"as boxes that display acronyms of their character names."
msgstr ""

#. type: defvar
#: original_texis/display.texi:8746
#, no-wrap
msgid "glyphless-char-display"
msgstr ""

#. type: defvar
#: original_texis/display.texi:8751
msgid ""
"For more fine-grained (and global) control, this variable can be used.  The "
"value of this variable is a char-table which defines glyphless characters "
"and how they are displayed.  Each entry must be one of the following display "
"methods:"
msgstr ""

#. type: table
#: original_texis/display.texi:8755
msgid "Display the character in the usual way."
msgstr ""

#. type: code{#1}
#: original_texis/display.texi:8756
#, no-wrap
msgid "zero-width"
msgstr ""

#. type: table
#: original_texis/display.texi:8758
msgid "Don't display the character."
msgstr ""

#. type: code{#1}
#: original_texis/display.texi:8759
#, no-wrap
msgid "thin-space"
msgstr ""

#. type: table
#: original_texis/display.texi:8762
msgid ""
"Display a thin space, 1-pixel wide on graphical displays, or 1-character "
"wide on text terminals."
msgstr ""

#. type: code{#1}
#: original_texis/display.texi:8763
#, no-wrap
msgid "empty-box"
msgstr ""

#. type: table
#: original_texis/display.texi:8765
msgid "Display an empty box."
msgstr ""

#. type: code{#1}
#: original_texis/display.texi:8766
#, no-wrap
msgid "hex-code"
msgstr ""

#. type: table
#: original_texis/display.texi:8769
msgid ""
"Display a box containing the Unicode codepoint of the character, in "
"hexadecimal notation."
msgstr ""

#. type: item
#: original_texis/display.texi:8770
#, no-wrap
msgid "an @acronym{ASCII} string"
msgstr ""

#. type: table
#: original_texis/display.texi:8777
msgid ""
"Display a box containing that string.  The string should contain at most 6 "
"@acronym{ASCII} characters.  As an exception, if the string includes just "
"one character, on text-mode terminals that character will be displayed "
"without a box; this allows to handle such ``acronyms'' as a replacement "
"character for characters that cannot be displayed by the terminal."
msgstr ""

#. type: item
#: original_texis/display.texi:8778
#, no-wrap
msgid "a cons cell @code{(@var{graphical} . @var{text})}"
msgstr ""

#. type: table
#: original_texis/display.texi:8782
msgid ""
"Display with @var{graphical} on graphical displays, and with @var{text} on "
"text terminals.  Both @var{graphical} and @var{text} must be one of the "
"display methods described above."
msgstr ""

#. type: vindex
#: original_texis/display.texi:8784
#, no-wrap
msgid "glyphless-char@r{ face}"
msgstr ""

#. type: defvar
#: original_texis/display.texi:8790
msgid ""
"The @code{thin-space}, @code{empty-box}, @code{hex-code}, and "
"@acronym{ASCII} string display methods are drawn with the "
"@code{glyphless-char} face.  On text terminals, a box is emulated by square "
"brackets, @samp{[]}."
msgstr ""

#. type: defvar
#: original_texis/display.texi:8795
msgid ""
"The char-table has one extra slot, which determines how to display any "
"character that cannot be displayed with any available font, or cannot be "
"encoded by the terminal's coding system.  Its value should be one of the "
"above display methods, except @code{zero-width}."
msgstr ""

#. type: defvar
#: original_texis/display.texi:8799
msgid ""
"If a character has a non-@code{nil} entry in an active display table, the "
"display table takes effect; in this case, Emacs does not consult "
"@code{glyphless-char-display} at all."
msgstr ""

#. type: defopt
#: original_texis/display.texi:8801
#, no-wrap
msgid "glyphless-char-display-control"
msgstr ""

#. type: defopt
#: original_texis/display.texi:8807
msgid ""
"This user option provides a convenient way to set "
"@code{glyphless-char-display} for groups of similar characters.  Do not set "
"its value directly from Lisp code; the value takes effect only via a custom "
"@code{:set} function (@pxref{Variable Definitions}), which updates "
"@code{glyphless-char-display}."
msgstr ""

#. type: defopt
#: original_texis/display.texi:8812
msgid ""
"Its value should be an alist of elements @code{(@var{group} "
". @var{method})}, where @var{group} is a symbol specifying a group of "
"characters, and @var{method} is a symbol specifying how to display them."
msgstr ""

#. type: defopt
#: original_texis/display.texi:8814
msgid "@var{group} should be one of the following:"
msgstr ""

#. type: item
#: original_texis/display.texi:8816
#, no-wrap
msgid "c0-control"
msgstr ""

#. type: table
#: original_texis/display.texi:8821
msgid ""
"@acronym{ASCII} control characters @code{U+0000} to @code{U+001F}, excluding "
"the newline and tab characters (normally displayed as escape sequences like "
"@samp{^A}; @pxref{Text Display,, How Text Is Displayed, emacs, The GNU Emacs "
"Manual})."
msgstr ""

#. type: item
#: original_texis/display.texi:8822
#, no-wrap
msgid "c1-control"
msgstr ""

#. type: table
#: original_texis/display.texi:8826
msgid ""
"Non-@acronym{ASCII}, non-printing characters @code{U+0080} to @code{U+009F} "
"(normally displayed as octal escape sequences like @samp{\\230})."
msgstr ""

#. type: item
#: original_texis/display.texi:8827
#, no-wrap
msgid "format-control"
msgstr ""

#. type: table
#: original_texis/display.texi:8831 original_texis/display.texi:8841
msgid ""
"Characters of Unicode General Category [Cf], such as U+200E "
"@sc{left-to-right mark}, but excluding characters that have graphic images, "
"such as U+00AD @sc{soft hyphen}."
msgstr ""

#. type: item
#: original_texis/display.texi:8832
#, no-wrap
msgid "bidi-control"
msgstr ""

#. type: table
#: original_texis/display.texi:8837
msgid ""
"This is a subset of @code{format-control}, but only includes characters that "
"are related to bidirectional formatting control, like U+2069 @sc{pop "
"directional isolate} and U+202A @sc{left-to-right embedding}.  "
"@xref{Bidirectional Display}."
msgstr ""

#. type: item
#: original_texis/display.texi:8842
#, no-wrap
msgid "variation-selectors"
msgstr ""

#. type: table
#: original_texis/display.texi:8846
msgid ""
"Unicode VS-1 through VS-256 (U+FE00 through U+FE0F and U+E0100 through "
"U+E01EF), which are used to select between different glyphs for the same "
"codepoints (typically emojis)."
msgstr ""

#. type: item
#: original_texis/display.texi:8847
#, no-wrap
msgid "no-font"
msgstr ""

#. type: table
#: original_texis/display.texi:8851
msgid ""
"Characters for which there is no suitable font, or which cannot be encoded "
"by the terminal's coding system, or those for which the text-mode terminal "
"has no glyphs."
msgstr ""

#. type: defopt
#: original_texis/display.texi:8859
msgid ""
"The @var{method} symbol should be one of @code{zero-width}, "
"@code{thin-space}, @code{empty-box}, or @code{hex-code}.  These have the "
"same meanings as in @code{glyphless-char-display}, above."
msgstr ""

#. type: cindex
#: original_texis/display.texi:8863
#, no-wrap
msgid "bell"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8870
msgid ""
"This section describes how to make Emacs ring the bell (or blink the screen) "
"to attract the user's attention.  Be conservative about how often you do "
"this; frequent bells can become irritating.  Also be careful not to use just "
"beeping when signaling an error is more appropriate (@pxref{Errors})."
msgstr ""

#. type: defun
#: original_texis/display.texi:8871
#, no-wrap
msgid "ding &optional do-not-terminate"
msgstr ""

#. type: cindex
#: original_texis/display.texi:8872
#, no-wrap
msgid "keyboard macro termination"
msgstr ""

#. type: defun
#: original_texis/display.texi:8876
msgid ""
"This function beeps, or flashes the screen (see @code{visible-bell} below).  "
"It also terminates any keyboard macro currently executing unless "
"@var{do-not-terminate} is non-@code{nil}."
msgstr ""

#. type: defun
#: original_texis/display.texi:8878
#, no-wrap
msgid "beep &optional do-not-terminate"
msgstr ""

#. type: defun
#: original_texis/display.texi:8880
msgid "This is a synonym for @code{ding}."
msgstr ""

#. type: defopt
#: original_texis/display.texi:8882
#, no-wrap
msgid "visible-bell"
msgstr ""

#. type: defopt
#: original_texis/display.texi:8888
msgid ""
"This variable determines whether Emacs should flash the screen to represent "
"a bell.  Non-@code{nil} means yes, @code{nil} means no.  This is effective "
"on graphical displays, and on text terminals provided the terminal's Termcap "
"entry defines the visible bell capability (@samp{vb})."
msgstr ""

#. type: defopt
#: original_texis/display.texi:8890
#, no-wrap
msgid "ring-bell-function"
msgstr ""

#. type: defopt
#: original_texis/display.texi:8895
msgid ""
"If this is non-@code{nil}, it specifies how Emacs should ring the bell.  Its "
"value should be a function of no arguments.  If this is non-@code{nil}, it "
"takes precedence over the @code{visible-bell} variable."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8904
msgid ""
"Emacs works with several window systems, most notably the X Window System.  "
"Both Emacs and X use the term ``window'', but use it differently.  An Emacs "
"frame is a single window as far as X is concerned; the individual Emacs "
"windows are not known to X at all."
msgstr ""

#. type: defvar
#: original_texis/display.texi:8905
#, no-wrap
msgid "window-system"
msgstr ""

#. type: defvar
#: original_texis/display.texi:8908
msgid ""
"This terminal-local variable tells Lisp programs what window system Emacs is "
"using for displaying the frame.  The possible values are"
msgstr ""

#. type: item
#: original_texis/display.texi:8910
#, no-wrap
msgid "x"
msgstr ""

#. type: cindex
#: original_texis/display.texi:8911
#, no-wrap
msgid "X Window System"
msgstr ""

#. type: table
#: original_texis/display.texi:8913
msgid "Emacs is displaying the frame using X."
msgstr ""

#. type: item
#: original_texis/display.texi:8913
#, no-wrap
msgid "w32"
msgstr ""

#. type: table
#: original_texis/display.texi:8915
msgid "Emacs is displaying the frame using native MS-Windows GUI."
msgstr ""

#. type: item
#: original_texis/display.texi:8915
#, no-wrap
msgid "ns"
msgstr ""

#. type: table
#: original_texis/display.texi:8918
msgid ""
"Emacs is displaying the frame using the Nextstep interface (used on GNUstep "
"and macOS)."
msgstr ""

#. type: item
#: original_texis/display.texi:8918
#, no-wrap
msgid "pc"
msgstr ""

#. type: table
#: original_texis/display.texi:8920
msgid "Emacs is displaying the frame using MS-DOS direct screen writes."
msgstr ""

#. type: item
#: original_texis/display.texi:8920
#, no-wrap
msgid "haiku"
msgstr ""

#. type: table
#: original_texis/display.texi:8922
msgid "Emacs is displaying the frame using the Application Kit on Haiku."
msgstr ""

#. type: item
#: original_texis/display.texi:8922
#, no-wrap
msgid "pgtk"
msgstr ""

#. type: table
#: original_texis/display.texi:8924
msgid "Emacs is displaying the frame using pure GTK facilities."
msgstr ""

#. type: table
#: original_texis/display.texi:8926
msgid "Emacs is displaying the frame on a character-based terminal."
msgstr ""

#. type: defvar
#: original_texis/display.texi:8929
#, no-wrap
msgid "initial-window-system"
msgstr ""

#. type: defvar
#: original_texis/display.texi:8936
msgid ""
"This variable holds the value of @code{window-system} used for the first "
"frame created by Emacs during startup.  (When Emacs is invoked as a daemon, "
"it does not create any initial frames, so @code{initial-window-system} is "
"@code{nil}, except on MS-Windows, where it is still @code{w32}.  "
"@xref{Initial Options, daemon,, emacs, The GNU Emacs Manual}.)"
msgstr ""

#. type: defun
#: original_texis/display.texi:8938
#, no-wrap
msgid "window-system &optional frame"
msgstr ""

#. type: defun
#: original_texis/display.texi:8943
msgid ""
"This function returns a symbol whose name tells what window system is used "
"for displaying @var{frame} (which defaults to the currently selected "
"frame).  The list of possible symbols it returns is the same one documented "
"for the variable @code{window-system} above."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8952
msgid ""
"Do @emph{not} use @code{window-system} and @code{initial-window-system} as "
"predicates or boolean flag variables, if you want to write code that works "
"differently on text terminals and graphic displays.  That is because "
"@code{window-system} is not a good indicator of Emacs capabilities on a "
"given display type.  Instead, use @code{display-graphic-p} or any of the "
"other @code{display-*-p} predicates described in @ref{Display Feature "
"Testing}."
msgstr ""

#. type: cindex
#: original_texis/display.texi:8955
#, no-wrap
msgid "tooltips"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8962
msgid ""
"@dfn{Tooltips} are special frames (@pxref{Frames}) that are used to display "
"helpful hints (a.k.a.@: ``tips'') related to the current position of the "
"mouse pointer.  Emacs uses tooltips to display help strings about active "
"portions of text (@pxref{Special Properties}) and about various UI elements, "
"such as menu items (@pxref{Extended Menu Items}) and tool-bar buttons "
"(@pxref{Tool Bar})."
msgstr ""

#. type: defun
#: original_texis/display.texi:8963
#, no-wrap
msgid "tooltip-mode"
msgstr ""

#. type: defun
#: original_texis/display.texi:8968
msgid ""
"Tooltip Mode is a minor mode that enables display of tooltips.  Turning off "
"this mode causes the tooltips be displayed in the echo area.  On text-mode "
"(a.k.a.@: ``TTY'') frames, tooltips are always displayed in the echo area."
msgstr ""

#. type: cindex
#: original_texis/display.texi:8970
#, no-wrap
msgid "system tooltips"
msgstr ""

#. type: vindex
#: original_texis/display.texi:8971
#, no-wrap
msgid "use-system-tooltips"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8979
msgid ""
"When Emacs is built with the GTK+ toolkit or Haiku windowing support, it by "
"default displays tooltips using toolkit functions, and the appearance of the "
"tooltips is then controlled by the toolkit's settings.  Toolkit-provided "
"tooltips can be disabled by changing the value of the variable "
"@code{use-system-tooltips} to @code{nil}.  The rest of this subsection "
"describes how to control non-toolkit tooltips, which are presented by Emacs "
"itself."
msgstr ""

#. type: cindex
#: original_texis/display.texi:8980
#, no-wrap
msgid "tooltip frames"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:8985
msgid ""
"Tooltips are displayed in special frames called tooltip frames, which have "
"their own frame parameters (@pxref{Frame Parameters}).  Unlike other frames, "
"the default parameters for tooltip frames are stored in a special variable."
msgstr ""

#. type: defopt
#: original_texis/display.texi:8986
#, no-wrap
msgid "tooltip-frame-parameters"
msgstr ""

#. type: defopt
#: original_texis/display.texi:8996
msgid ""
"This customizable option holds the default frame parameters used for "
"displaying tooltips.  Any font and color parameters are ignored, and the "
"corresponding attributes of the @code{tooltip} face are used instead.  If "
"@code{left} or @code{top} parameters are included, they are used as absolute "
"frame-relative coordinates where the tooltip should be shown.  "
"(Mouse-relative position of the tooltip can be customized using the "
"variables described in @ref{Tooltips,,, emacs, The GNU Emacs Manual}.)  Note "
"that the @code{left} and @code{top} parameters, if present, override the "
"values of mouse-relative offsets."
msgstr ""

#. type: vindex
#: original_texis/display.texi:8998
#, no-wrap
msgid "tooltip@r{ face}"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:9002
msgid ""
"The @code{tooltip} face determines the appearance of text shown in "
"tooltips.  It should generally use a variable-pitch font of size that is "
"preferably smaller than the default frame font."
msgstr ""

#. type: findex
#: original_texis/display.texi:9003
#, no-wrap
msgid "tooltip-help-tips"
msgstr ""

#. type: defvar
#: original_texis/display.texi:9004
#, no-wrap
msgid "tooltip-functions"
msgstr ""

#. type: defvar
#: original_texis/display.texi:9012
msgid ""
"This abnormal hook is a list of functions to call when Emacs needs to "
"display a tooltip.  Each function is called with a single argument "
"@var{event} which is a copy of the last mouse movement event.  If a function "
"on this list actually displays the tooltip, it should return non-@code{nil}, "
"and then the rest of the functions will not be called.  The default value of "
"this variable is a single function @code{tooltip-help-tips}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:9018
msgid ""
"If you write your own function to be put on the @code{tooltip-functions} "
"list, you may need to know the buffer of the mouse event that triggered the "
"tooltip display.  The following function provides that information."
msgstr ""

#. type: defun
#: original_texis/display.texi:9019
#, no-wrap
msgid "tooltip-event-buffer event"
msgstr ""

#. type: defun
#: original_texis/display.texi:9026
msgid ""
"This function returns the buffer over which @var{event} occurred.  Call it "
"with the argument of the function from @code{tooltip-functions} to obtain "
"the buffer whose text triggered the tooltip.  Note that the event might "
"occur not over a buffer (e.g., over the tool bar), in which case this "
"function will return @code{nil}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:9031
msgid ""
"Other aspects of tooltip display are controlled by several customizable "
"settings; see @ref{Tooltips,,, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: cindex
#: original_texis/display.texi:9034
#, no-wrap
msgid "bidirectional display"
msgstr ""

#. type: cindex
#: original_texis/display.texi:9035
#, no-wrap
msgid "right-to-left text"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:9047
msgid ""
"Emacs can display text written in scripts, such as Arabic, Farsi, and "
"Hebrew, whose natural ordering for horizontal text display runs from right "
"to left.  Furthermore, segments of Latin script and digits embedded in "
"right-to-left text are displayed left-to-right, while segments of "
"right-to-left script embedded in left-to-right text (e.g., Arabic or Hebrew "
"text in comments or strings in a program source file) are appropriately "
"displayed right-to-left.  We call such mixtures of left-to-right and "
"right-to-left text @dfn{bidirectional text}.  This section describes the "
"facilities and options for editing and displaying bidirectional text."
msgstr ""

#. type: cindex
#: original_texis/display.texi:9048
#, no-wrap
msgid "logical order"
msgstr ""

#. type: cindex
#: original_texis/display.texi:9049
#, no-wrap
msgid "reading order"
msgstr ""

#. type: cindex
#: original_texis/display.texi:9050
#, no-wrap
msgid "visual order"
msgstr ""

#. type: cindex
#: original_texis/display.texi:9051
#, no-wrap
msgid "unicode bidirectional algorithm"
msgstr ""

#. type: cindex
#: original_texis/display.texi:9052
#, no-wrap
msgid "UBA"
msgstr ""

#. type: cindex
#: original_texis/display.texi:9053
#, no-wrap
msgid "bidirectional reordering"
msgstr ""

#. type: cindex
#: original_texis/display.texi:9054
#, no-wrap
msgid "reordering, of bidirectional text"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:9071
msgid ""
"Text is stored in Emacs buffers and strings in @dfn{logical} (or "
"@dfn{reading}) order, i.e., the order in which a human would read each "
"character.  In right-to-left and bidirectional text, the order in which "
"characters are displayed on the screen (called @dfn{visual order}) is not "
"the same as logical order; the characters' screen positions do not increase "
"monotonically with string or buffer position.  In performing this "
"@dfn{bidirectional reordering}, Emacs follows the Unicode Bidirectional "
"Algorithm (a.k.a.@: @acronym{UBA}), which is described in Annex #9 of the "
"Unicode standard (@url{https://www.unicode.org/reports/tr9/}).  Emacs "
"provides a ``Full Bidirectionality'' class implementation of the "
"@acronym{UBA}, consistent with the requirements of the Unicode Standard "
"v9.0.  Note, however, that the way Emacs displays continuation lines when "
"text direction is opposite to the base paragraph direction deviates from the "
"UBA, which requires to perform line wrapping before reordering text for "
"display."
msgstr ""

#. type: defvar
#: original_texis/display.texi:9072
#, no-wrap
msgid "bidi-display-reordering"
msgstr ""

#. type: defvar
#: original_texis/display.texi:9080
msgid ""
"If the value of this buffer-local variable is non-@code{nil} (the default), "
"Emacs performs bidirectional reordering for display.  The reordering affects "
"buffer text, as well as display strings and overlay strings from text and "
"overlay properties in the buffer (@pxref{Overlay Properties}, and "
"@pxref{Display Property}).  If the value is @code{nil}, Emacs does not "
"perform bidirectional reordering in the buffer."
msgstr ""

#. type: defvar
#: original_texis/display.texi:9085
msgid ""
"The default value of @code{bidi-display-reordering} controls the reordering "
"of strings which are not directly supplied by a buffer, including the text "
"displayed in mode lines (@pxref{Mode Line Format})  and header lines "
"(@pxref{Header Lines})."
msgstr ""

#. type: cindex
#: original_texis/display.texi:9087
#, no-wrap
msgid "unibyte buffers, and bidi reordering"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:9095
msgid ""
"Emacs never reorders the text of a unibyte buffer, even if "
"@code{bidi-display-reordering} is non-@code{nil} in the buffer.  This is "
"because unibyte buffers contain raw bytes, not characters, and thus lack the "
"directionality properties required for reordering.  Therefore, to test "
"whether text in a buffer will be reordered for display, it is not enough to "
"test the value of @code{bidi-display-reordering} alone.  The correct test is "
"this:"
msgstr ""

#. type: example
#: original_texis/display.texi:9101
#, no-wrap
msgid ""
" (if (and enable-multibyte-characters\n"
"          bidi-display-reordering)\n"
"     ;; Buffer is being reordered for display\n"
"   )\n"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:9108
msgid ""
"However, unibyte display and overlay strings @emph{are} reordered if their "
"parent buffer is reordered.  This is because plain-@sc{ascii} strings are "
"stored by Emacs as unibyte strings.  If a unibyte display or overlay string "
"includes non-@sc{ascii} characters, these characters are assumed to have "
"left-to-right direction."
msgstr ""

#. type: cindex
#: original_texis/display.texi:9109
#, no-wrap
msgid "display properties, and bidi reordering of text"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:9123
msgid ""
"Text covered by @code{display} text properties, by overlays with "
"@code{display} properties whose value is a string, and by any other "
"properties that replace buffer text, is treated as a single unit when it is "
"reordered for display.  That is, the entire chunk of text covered by these "
"properties is reordered together.  Moreover, the bidirectional properties of "
"the characters in such a chunk of text are ignored, and Emacs reorders them "
"as if they were replaced with a single character @code{U+FFFC}, known as the "
"@dfn{Object Replacement Character}.  This means that placing a display "
"property over a portion of text may change the way that the surrounding text "
"is reordered for display.  To prevent this unexpected effect, always place "
"such properties on text whose directionality is identical with text that "
"surrounds it."
msgstr ""

#. type: cindex
#: original_texis/display.texi:9124
#, no-wrap
msgid "base direction of a paragraph"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:9131
msgid ""
"Each paragraph of bidirectional text has a @dfn{base direction}, either "
"right-to-left or left-to-right.  Left-to-right paragraphs are displayed "
"beginning at the left margin of the window, and are truncated or continued "
"when the text reaches the right margin.  Right-to-left paragraphs are "
"displayed beginning at the right margin, and are continued or truncated at "
"the left margin."
msgstr ""

#. type: cindex
#: original_texis/display.texi:9132
#, no-wrap
msgid "paragraph-start, and bidirectional display"
msgstr ""

#. type: cindex
#: original_texis/display.texi:9133
#, no-wrap
msgid "paragraph-separate, and bidirectional display"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:9141
msgid ""
"Where exactly paragraphs start and end, for the purpose of the Emacs "
"@acronym{UBA} implementation, is determined by the following two "
"buffer-local variables (note that @code{paragraph-start} and "
"@code{paragraph-separate} have no influence on this).  By default both of "
"these variables are @code{nil}, and paragraphs are bounded by empty lines, "
"i.e., lines that consist entirely of zero or more whitespace characters "
"followed by a newline."
msgstr ""

#. type: defvar
#: original_texis/display.texi:9142
#, no-wrap
msgid "bidi-paragraph-start-re"
msgstr ""

#. type: defvar
#: original_texis/display.texi:9147
msgid ""
"If non-@code{nil}, this variable's value should be a regular expression "
"matching a line that starts or separates two paragraphs.  The regular "
"expression is always matched after a newline, so it is best to anchor it, "
"i.e., begin it with a @code{\"^\"}."
msgstr ""

#. type: defvar
#: original_texis/display.texi:9149
#, no-wrap
msgid "bidi-paragraph-separate-re"
msgstr ""

#. type: defvar
#: original_texis/display.texi:9154
msgid ""
"If non-@code{nil}, this variable's value should be a regular expression "
"matching a line separates two paragraphs.  The regular expression is always "
"matched after a newline, so it is best to anchor it, i.e., begin it with a "
"@code{\"^\"}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:9160
msgid ""
"If you modify any of these two variables, you should normally modify both, "
"to make sure they describe paragraphs consistently.  For example, to have "
"each new line start a new paragraph for bidi-reordering purposes, set both "
"variables to @code{\"^\"}."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:9170
msgid ""
"By default, Emacs determines the base direction of each paragraph by looking "
"at the text at its beginning.  The precise method of determining the base "
"direction is specified by the @acronym{UBA}; in a nutshell, the first "
"character in a paragraph that has an explicit directionality determines the "
"base direction of the paragraph.  However, sometimes a buffer may need to "
"force a certain base direction for its paragraphs.  For example, buffers "
"containing program source code should force all paragraphs to be displayed "
"left-to-right.  You can use following variable to do this:"
msgstr ""

#. type: defopt
#: original_texis/display.texi:9171
#, no-wrap
msgid "bidi-paragraph-direction"
msgstr ""

#. type: defopt
#: original_texis/display.texi:9177
msgid ""
"If the value of this buffer-local variable is the symbol "
"@code{right-to-left} or @code{left-to-right}, all paragraphs in the buffer "
"are assumed to have that specified direction.  Any other value is equivalent "
"to @code{nil} (the default), which means to determine the base direction of "
"each paragraph from its contents."
msgstr ""

#. type: cindex
#: original_texis/display.texi:9178
#, no-wrap
msgid "@code{prog-mode}, and @code{bidi-paragraph-direction}"
msgstr ""

#. type: defopt
#: original_texis/display.texi:9182
msgid ""
"Modes for program source code should set this to @code{left-to-right}.  Prog "
"mode does this by default, so modes derived from Prog mode do not need to "
"set this explicitly (@pxref{Basic Major Modes})."
msgstr ""

#. type: defun
#: original_texis/display.texi:9184
#, no-wrap
msgid "current-bidi-paragraph-direction &optional buffer"
msgstr ""

#. type: defun
#: original_texis/display.texi:9195
msgid ""
"This function returns the paragraph direction at point in the named "
"@var{buffer}.  The returned value is a symbol, either @code{left-to-right} "
"or @code{right-to-left}.  If @var{buffer} is omitted or @code{nil}, it "
"defaults to the current buffer.  If the buffer-local value of the variable "
"@code{bidi-paragraph-direction} is non-@code{nil}, the returned value will "
"be identical to that value; otherwise, the returned value reflects the "
"paragraph direction determined dynamically by Emacs.  For buffers whose "
"value of @code{bidi-display-reordering} is @code{nil} as well as unibyte "
"buffers, this function always returns @code{left-to-right}."
msgstr ""

#. type: cindex
#: original_texis/display.texi:9197
#, no-wrap
msgid "visual-order cursor motion"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:9201
msgid ""
"Sometimes there's a need to move point in strict visual order, either to the "
"left or to the right of its current screen position.  Emacs provides a "
"primitive to do that."
msgstr ""

#. type: defun
#: original_texis/display.texi:9202
#, no-wrap
msgid "move-point-visually direction"
msgstr ""

#. type: defun
#: original_texis/display.texi:9213
msgid ""
"This function moves point of the currently selected window to the buffer "
"position that appears immediately to the right or to the left of point on "
"the screen.  If @var{direction} is positive, point will move one screen "
"position to the right, otherwise it will move one screen position to the "
"left.  Note that, depending on the surrounding bidirectional context, this "
"could potentially move point many buffer positions away.  If invoked at the "
"end of a screen line, the function moves point to the rightmost or leftmost "
"screen position of the next or previous screen line, as appropriate for the "
"value of @var{direction}."
msgstr ""

#. type: defun
#: original_texis/display.texi:9215
msgid "The function returns the new buffer position as its value."
msgstr ""

#. type: cindex
#: original_texis/display.texi:9217
#, no-wrap
msgid "layout on display, and bidirectional text"
msgstr ""

#. type: cindex
#: original_texis/display.texi:9218
#, no-wrap
msgid "jumbled display of bidirectional text"
msgstr ""

#. type: cindex
#: original_texis/display.texi:9219
#, no-wrap
msgid "concatenating bidirectional strings"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:9232
msgid ""
"Bidirectional reordering can have surprising and unpleasant effects when two "
"strings with bidirectional content are juxtaposed in a buffer, or otherwise "
"programmatically concatenated into a string of text.  A typical problematic "
"case is when a buffer consists of sequences of text fields separated by "
"whitespace or punctuation characters, like Buffer Menu mode or Rmail Summary "
"Mode.  Because the punctuation characters used as separators have @dfn{weak "
"directionality}, they take on the directionality of surrounding text.  As "
"result, a numeric field that follows a field with bidirectional content can "
"be displayed @emph{to the left} of the preceding field, messing up the "
"expected layout.  There are several ways to avoid this problem:"
msgstr ""

#. type: itemize
#: original_texis/display.texi:9242
msgid ""
"Append the special character U+200E @sc{left-to-right mark}, or "
"@acronym{LRM}, to the end of each field that may have bidirectional content, "
"or prepend it to the beginning of the following field.  The function "
"@code{bidi-string-mark-left-to-right}, described below, comes in handy for "
"this purpose.  (In a right-to-left paragraph, use U+200F @sc{right-to-left "
"mark}, or @acronym{RLM}, instead.)  This is one of the solutions recommended "
"by the UBA."
msgstr ""

#. type: itemize
#: original_texis/display.texi:9247
msgid ""
"Include the tab character in the field separator.  The tab character plays "
"the role of @dfn{segment separator} in bidirectional reordering, causing the "
"text on either side to be reordered separately."
msgstr ""

#. type: cindex
#: original_texis/display.texi:9248
#, no-wrap
msgid "@code{space} display spec, and bidirectional text"
msgstr ""

#. type: itemize
#: original_texis/display.texi:9254
msgid ""
"Separate fields with a @code{display} property or overlay with a property "
"value of the form @code{(space . PROPS)} (@pxref{Specified Space}).  Emacs "
"treats this display specification as a @dfn{paragraph separator}, and "
"reorders the text on either side separately."
msgstr ""

#. type: defun
#: original_texis/display.texi:9256
#, no-wrap
msgid "bidi-string-mark-left-to-right string"
msgstr ""

#. type: defun
#: original_texis/display.texi:9269
msgid ""
"This function returns its argument @var{string}, possibly modified, such "
"that the result can be safely concatenated with another string, or "
"juxtaposed with another string in a buffer, without disrupting the relative "
"layout of this string and the next one on display.  If the string returned "
"by this function is displayed as part of a left-to-right paragraph, it will "
"always appear on display to the left of the text that follows it.  The "
"function works by examining the characters of its argument, and if any of "
"those characters could cause reordering on display, the function appends the "
"@acronym{LRM} character to the string.  The appended @acronym{LRM} character "
"is made invisible by giving it an @code{invisible} text property of @code{t} "
"(@pxref{Invisible Text})."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:9279
msgid ""
"The reordering algorithm uses the bidirectional properties of the characters "
"stored as their @code{bidi-class} property (@pxref{Character Properties}).  "
"Lisp programs can change these properties by calling the "
"@code{put-char-code-property} function.  However, doing this requires a "
"thorough understanding of the @acronym{UBA}, and is therefore not "
"recommended.  Any changes to the bidirectional properties of a character "
"have global effect: they affect all Emacs frames and windows."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:9284
msgid ""
"Similarly, the @code{mirroring} property is used to display the appropriate "
"mirrored character in the reordered text.  Lisp programs can affect the "
"mirrored display by changing this property.  Again, any such changes affect "
"all of Emacs display."
msgstr ""

#. type: cindex
#: original_texis/display.texi:9285
#, no-wrap
msgid "overriding bidirectional properties"
msgstr ""

#. type: cindex
#: original_texis/display.texi:9286
#, no-wrap
msgid "directional overrides"
msgstr ""

#. type: cindex
#: original_texis/display.texi:9287
#, no-wrap
msgid "LRO"
msgstr ""

#. type: cindex
#: original_texis/display.texi:9288
#, no-wrap
msgid "RLO"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:9300
msgid ""
"The bidirectional properties of characters can be overridden by inserting "
"into the text special directional control characters, LEFT-TO-RIGHT OVERRIDE "
"(@acronym{LRO}) and RIGHT-TO-LEFT OVERRIDE (@acronym{RLO}).  Any characters "
"between a @acronym{RLO} and the following newline or POP DIRECTIONAL "
"FORMATTING (@acronym{PDF})  control character, whichever comes first, will "
"be displayed as if they were strong right-to-left characters, i.e.@: they "
"will be reversed on display.  Similarly, any characters between "
"@acronym{LRO} and @acronym{PDF} or newline will display as if they were "
"strong left-to-right, and will @emph{not} be reversed even if they are "
"strong right-to-left characters."
msgstr ""

#. type: cindex
#: original_texis/display.texi:9301
#, no-wrap
msgid "phishing using directional overrides"
msgstr ""

#. type: cindex
#: original_texis/display.texi:9302
#, no-wrap
msgid "malicious use of directional overrides"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:9311
msgid ""
"These overrides are useful when you want to make some text unaffected by the "
"reordering algorithm, and instead directly control the display order.  But "
"they can also be used for malicious purposes, known as @dfn{phishing}.  "
"Specifically, a URL on a Web page or a link in an email message can be "
"manipulated to make its visual appearance unrecognizable, or similar to some "
"popular benign location, while the real location, interpreted by a browser "
"in the logical order, is very different."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:9316
msgid ""
"Emacs provides a primitive that applications can use to detect instances of "
"text whose bidirectional properties were overridden so as to make a "
"left-to-right character display as if it were a right-to-left character, or "
"vice versa."
msgstr ""

#. type: defun
#: original_texis/display.texi:9317
#, no-wrap
msgid "bidi-find-overridden-directionality from to &optional object"
msgstr ""

#. type: defun
#: original_texis/display.texi:9325
msgid ""
"This function looks at the text of the specified @var{object} between "
"positions @var{from} (inclusive) and @var{to} (exclusive), and returns the "
"first position where it finds a strong left-to-right character whose "
"directional properties were forced to display the character as "
"right-to-left, or for a strong right-to-left character that was forced to "
"display as left-to-right.  If it finds no such characters in the specified "
"region of text, it returns @code{nil}."
msgstr ""

#. type: defun
#: original_texis/display.texi:9337
msgid ""
"The optional argument @var{object} specifies which text to search, and "
"defaults to the current buffer.  If @var{object} is non-@code{nil}, it can "
"be some other buffer, or it can be a string or a window.  If it is a string, "
"the function searches that string.  If it is a window, the function searches "
"the buffer displayed in that window.  If a buffer whose text you want to "
"examine is displayed in some window, we recommend to specify it by that "
"window, rather than pass the buffer to the function.  This is because "
"telling the function about the window allows it to correctly account for "
"window-specific overlays, which might change the result of the function if "
"some text in the buffer is covered by overlays."
msgstr ""

#. type: cindex
#: original_texis/display.texi:9339
#, no-wrap
msgid "copying bidirectional text, preserve visual order"
msgstr ""

#. type: cindex
#: original_texis/display.texi:9340
#, no-wrap
msgid "visual order, preserve when copying bidirectional text"
msgstr ""

#. type: Plain text
#: original_texis/display.texi:9348
msgid ""
"When text that includes mixed right-to-left and left-to-right characters and "
"bidirectional controls is copied into a different location, it can change "
"its visual appearance, and also can affect the visual appearance of the "
"surrounding text at destination.  This is because reordering of "
"bidirectional text specified by the @acronym{UBA} has non-trivial "
"context-dependent effects both on the copied text and on the text at copy "
"destination that will surround it."
msgstr ""

#. type: Plain text
#: original_texis/display.texi:9353
msgid ""
"Sometimes, a Lisp program may need to preserve the exact visual appearance "
"of the copied text at destination, and of the text that surrounds the copy.  "
"Lisp programs can use the following function to achieve that effect."
msgstr ""

#. type: defun
#: original_texis/display.texi:9354
#, no-wrap
msgid "buffer-substring-with-bidi-context start end &optional no-properties"
msgstr ""

#. type: defun
#: original_texis/display.texi:9361
msgid ""
"This function works similar to @code{buffer-substring} (@pxref{Buffer "
"Contents}), but it prepends and appends to the copied text bidi directional "
"control characters necessary to preserve the visual appearance of the text "
"when it is inserted at another place.  Optional argument "
"@var{no-properties}, if non-@code{nil}, means remove the text properties "
"from the copy of the text."
msgstr ""
