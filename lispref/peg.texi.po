# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Emacs-30.0.50\n"
"POT-Creation-Date: 2024-07-10 03:45+0000\n"
"PO-Revision-Date: 2024-05-22 11:12+0900\n"
"Last-Translator: ayatakesi\n"
"Language-Team: japanese\n"
"Language: JA\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: original_texis/peg.texi:6 original_texis/peg.texi:7
#, no-wrap
msgid "Parsing Expression Grammars"
msgstr "Parsing Expression Grammars"

#. type: cindex
#: original_texis/peg.texi:8
#, no-wrap
msgid "text parsing"
msgstr "text parsing"

#. type: cindex
#: original_texis/peg.texi:9
#, no-wrap
msgid "parsing expression grammar"
msgstr "parsing expression grammar"

#. type: cindex
#: original_texis/peg.texi:10
#, no-wrap
msgid "PEG"
msgstr "PEG"

#. type: Plain text
#: original_texis/peg.texi:19
#, fuzzy
#| msgid "Emacs Lisp provides several tools for parsing and matching text, from regular expressions (@pxref{Regular Expressions}) to full left-to-right (a.k.a.@: @acronym{LL}) grammar parsers (@pxref{Top,, Bovine parser development,bovine}).  @dfn{Parsing Expression Grammars} (@acronym{PEG}) are another approach to text parsing that offer more structure and composibility than regular expressions, but less complexity than context-free grammars."
msgid "Emacs Lisp provides several tools for parsing and matching text, from regular expressions (@pxref{Regular Expressions}) to full left-to-right (a.k.a.@: @acronym{LL}) grammar parsers (@pxref{Top,, Bovine parser development,bovine}).  @dfn{Parsing Expression Grammars} (@acronym{PEG}) are another approach to text parsing that offer more structure and composability than regular expressions, but less complexity than context-free grammars."
msgstr "Emacs Lispはテキストのパースとマッチングのために正規表現(@ref{Regular Expressions}を参照)から完全な@acronym{LR}グラマーパーサー(Left-to-Right grammar parsers: LR構文解析器; @ref{Top,, Bovine parser development,bovine}を参照)に至るツールを複数提供しています。@acronym{PEG} (@dfn{Parsing Expression Grammars: パース式グラマー、式解析構文)}とは正規表現と比べてより構造的かつ構成可能性をもち、文脈に依らない構文に比べて複雑度が少ないテキスト解析を提案する別のアプローチのことです。"

#. type: Plain text
#: original_texis/peg.texi:27
msgid "A Parsing Expression Grammar (@acronym{PEG}) describes a formal language in terms of a set of rules for recognizing strings in the language.  In Emacs, a @acronym{PEG} parser is defined as a list of named rules, each of which matches text patterns and/or contains references to other rules.  Parsing is initiated with the function @code{peg-run} or the macro @code{peg-parse} (see below), and parses text after point in the current buffer, using a given set of rules."
msgstr "@acronym{PEG} (Parsing Expression Grammar: パース式グラマー、解析式構文)は言語内の文字列を認識する一連のルールという観点から形式言語を記述します。Emacsでは@acronym{PEG}パーサーは名前つきルールとして定義されており、ルールはそれぞれテキストパターンにたいするマッチおよび/または他のルールへの参照を含んでいます。パースは関数@code{peg-run}またはマクロ@code{peg-parse} (以下参照)によって初期化されて、与えられた一連のルールを用いてカレントバッファーのポイントの後にあるテキストのパースを行います。"

#. type: cindex
#: original_texis/peg.texi:28
#, no-wrap
msgid "parsing expression"
msgstr "parsing expression"

#. type: cindex
#: original_texis/peg.texi:29
#, no-wrap
msgid "root, of parsing expression grammar"
msgstr "root, of parsing expression grammar"

#. type: cindex
#: original_texis/peg.texi:30
#, no-wrap
msgid "entry-point, of parsing expression grammar"
msgstr "entry-point, of parsing expression grammar"

#. type: Plain text
#: original_texis/peg.texi:38
#, fuzzy
#| msgid "Each rule in a @acronym{PEG} is referred to as a @dfn{parsing expression} (@acronym{PEX}), and can be specified a a literal string, a regexp-like character range or set, a peg-specific construct resembling an Emacs Lisp function call, a reference to another rule, or a combination of any of these.  A grammar is expressed as a tree of rules in which one rule is typically treated as a ``root'' or ``entry-point'' rule.  For instance:"
msgid "Each rule in a @acronym{PEG} is referred to as a @dfn{parsing expression} (@acronym{PEX}), and can be specified a literal string, a regexp-like character range or set, a peg-specific construct resembling an Emacs Lisp function call, a reference to another rule, or a combination of any of these.  A grammar is expressed as a tree of rules in which one rule is typically treated as a ``root'' or ``entry-point'' rule.  For instance:"
msgstr "@acronym{PEG}内のルールはそれぞれ@acronym{PEX} (@dfn{parsing expression: パース式、解析式})として参照されます。PEXはリテラル文字列、regexpに似た文字範囲や文字セット、Emacs Lisp関数の呼び出しに似たPEG固有の構文、他のルールへの参照、あるいはこれらの組み合わせとして指定できます。グラマーはルールのツリーとして表現され、通常は1つのルールは``ルート(root)''または``エントリーポイント(entry-point)''として扱われます。たとえば:"

#. type: group
#: original_texis/peg.texi:44
#, no-wrap
msgid ""
"((number sign digit (* digit))\n"
" (sign   (or \"+\" \"-\" \"\"))\n"
" (digit  [0-9]))\n"
msgstr ""
"((number sign digit (* digit))\n"
" (sign   (or \"+\" \"-\" \"\"))\n"
" (digit  [0-9]))\n"

#. type: Plain text
#: original_texis/peg.texi:50
msgid "Once defined, grammars can be used to parse text after point in the current buffer, in a number of ways.  The @code{peg-parse} macro is the simplest:"
msgstr "グラマーを一度定義してしまえば、それを使ってカレントバッファーのポイントの後にあるテキストさまざまな方法でパースできます。一番シンプルなのは@code{peg-parse}マクロでしょう:"

#. type: defmac
#: original_texis/peg.texi:51
#, no-wrap
msgid "peg-parse &rest pexs"
msgstr "peg-parse &rest pexs"

#. type: defmac
#: original_texis/peg.texi:53
msgid "Match @var{pexs} at point."
msgstr "ポイント位置で@var{pexs}をマッチする。"

#. type: group
#: original_texis/peg.texi:61
#, no-wrap
msgid ""
"(peg-parse\n"
"  (number sign digit (* digit))\n"
"  (sign   (or \"+\" \"-\" \"\"))\n"
"  (digit  [0-9]))\n"
msgstr ""
"(peg-parse\n"
"  (number sign digit (* digit))\n"
"  (sign   (or \"+\" \"-\" \"\"))\n"
"  (digit  [0-9]))\n"

#. type: Plain text
#: original_texis/peg.texi:67
msgid "While this macro is simple it is also inflexible, as the rules must be written directly into the source code.  More flexibility can be gained by using a combination of other functions and macros."
msgstr "このマクロはソースコード内にルールを直接記述しなければならないので、シンプルですが柔軟性があります。他の関数やマクロを組み合わせて使用すれば、さらなる柔軟性を獲得することができるでしょう。"

#. type: defmac
#: original_texis/peg.texi:68
#, no-wrap
msgid "with-peg-rules rules &rest body"
msgstr "with-peg-rules rules &rest body"

#. type: defmac
#: original_texis/peg.texi:72
msgid "Execute @var{body} with @var{rules}, a list of @acronym{PEX}s, in effect.  Within @var{BODY}, parsing is initiated with a call to @code{peg-run}."
msgstr "@var{rules} (@acronym{PEX}のリスト)の効力の下で@var{body}を実行する。@var{BODY}内では@code{peg-run}呼び出しによってパースが開始される。"

#. type: defun
#: original_texis/peg.texi:74
#, no-wrap
msgid "peg-run peg-matcher &optional failure-function success-function"
msgstr "peg-run peg-matcher &optional failure-function success-function"

#. type: defun
#: original_texis/peg.texi:78
msgid "This function accepts a single @var{peg-matcher}, which is the result of calling @code{peg} (see below) on a named rule, usually the entry-point of a larger grammar."
msgstr "この関数は、名前つきルールに@code{peg} (以下参照)を呼び出した結果(通常は大きなグラマーのエントリーポイント)である単一の@var{peg-matcher}を受け取る。"

#. type: defun
#: original_texis/peg.texi:88
msgid "At the end of parsing, one of @var{failure-function} or @var{success-function} is called, depending on whether the parsing succeeded or not.  If @var{success-function} is provided, it should be a function that receives as its only argument an anonymous function that runs all the actions collected on the stack during parsing.  By default this anonymous function is simply executed.  If parsing fails, a function provided as @var{failure-function} will be called with a list of @acronym{PEG} expressions that failed during parsing.  By default this list is discarded."
msgstr "パースの最後にパースの結果に応じて@var{failure-function}か@var{success-function}のいずれかが呼び出される。@var{success-function}が提供された場合には、唯一の引数としてパース中のスタック上のすべてのアクションを実行する無名関数を受け取る関数であること。デフォルトではこの関数は単にそのまま実行される。パースが失敗した場合には、パース中に失敗した@acronym{PEG}式のリストとともに@var{failure-function}として提供された関数が呼び出される。このリストはデフォルトでは破棄される。"

#. type: Plain text
#: original_texis/peg.texi:92
msgid "The @var{peg-matcher} passed to @code{peg-run} is produced by a call to @code{peg}:"
msgstr "@code{peg-run}に渡される@var{peg-matcher}は@code{peg}を呼び出すことによって生成されます:"

#. type: defmac
#: original_texis/peg.texi:93
#, no-wrap
msgid "peg &rest pexs"
msgstr "peg &rest pexs"

#. type: defmac
#: original_texis/peg.texi:96
msgid "Convert @var{pexs} into a single peg-matcher suitable for passing to @code{peg-run}."
msgstr "@var{pexs}を@code{peg-run}に渡すのに適した単一のpeg-matcherに変換する。"

#. type: Plain text
#: original_texis/peg.texi:100
msgid "The @code{peg-parse} example above expands to a set of calls to these functions, and could be written in full as:"
msgstr "上述した@code{peg-parse}の例はこれらの関数への一連の呼び出しを展開したものであり、以下のようにして完全に記述することができます:"

#. type: group
#: original_texis/peg.texi:108
#, no-wrap
msgid ""
"(with-peg-rules\n"
"    ((number sign digit (* digit))\n"
"     (sign   (or \"+\" \"-\" \"\"))\n"
"     (digit  [0-9]))\n"
"  (peg-run (peg number)))\n"
msgstr ""
"(with-peg-rules\n"
"    ((number sign digit (* digit))\n"
"     (sign   (or \"+\" \"-\" \"\"))\n"
"     (digit  [0-9]))\n"
"  (peg-run (peg number)))\n"

#. type: Plain text
#: original_texis/peg.texi:113
msgid "This approach allows more explicit control over the ``entry-point'' of parsing, and allows the combination of rules from different sources."
msgstr "このアプローチではパースの``エントリーポイント''にたいするより明白な制御、および異なるソースのルールを組み合わせることが可能になります。"

#. type: Plain text
#: original_texis/peg.texi:116
msgid "Individual rules can also be defined using a more @code{defun}-like syntax, using the macro @code{define-peg-rule}:"
msgstr "マクロ@code{define-peg-rule}を使用すれば、より@code{defun}に似た構文を用いて個別にルールを定義することもできます:"

#. type: defmac
#: original_texis/peg.texi:117
#, no-wrap
msgid "define-peg-rule name args &rest pexs"
msgstr "define-peg-rule name args &rest pexs"

#. type: defmac
#: original_texis/peg.texi:120
msgid "Define @var{name} as a PEG rule that accepts @var{args} and matches @var{pexs} at point."
msgstr "引数@var{args}を受け取りポイント位置に@var{pexs}をマッチするPEGルールとして@var{name}を定義する。"

#. type: Plain text
#: original_texis/peg.texi:123
msgid "For instance:"
msgstr "たとえば:"

#. type: group
#: original_texis/peg.texi:128
#, no-wrap
msgid ""
"(define-peg-rule digit ()\n"
"  [0-9])\n"
msgstr ""
"(define-peg-rule digit ()\n"
"  [0-9])\n"

#. type: Plain text
#: original_texis/peg.texi:133
msgid "Arguments can be supplied to rules by the @code{funcall} PEG rule (@pxref{PEX Definitions})."
msgstr "PEGルールにたいして@code{funcall}することにより、ルールに引数を提供できます(@ref{PEX Definitions}を参照)。"

#. type: Plain text
#: original_texis/peg.texi:136
msgid "Another possibility is to define a named set of rules with @code{define-peg-ruleset}:"
msgstr "別の可能性として挙げられるのは、@code{define-peg-ruleset}により名前つきルールセットを定義する方法です。"

#. type: defmac
#: original_texis/peg.texi:137
#, no-wrap
msgid "define-peg-ruleset name &rest rules"
msgstr "define-peg-ruleset name &rest rules"

#. type: defmac
#: original_texis/peg.texi:139
msgid "Define @var{name} as an identifier for @var{rules}."
msgstr "@var{rules}にたいする識別子として@var{name}を定義する。"

#. type: group
#: original_texis/peg.texi:147
#, no-wrap
msgid ""
"(define-peg-ruleset number-grammar\n"
"        '((number sign digit (* digit))\n"
"          digit  ;; A reference to the definition above.\n"
"          (sign (or \"+\" \"-\" \"\"))))\n"
msgstr ""
"(define-peg-ruleset number-grammar\n"
"        '((number sign digit (* digit))\n"
"          digit  ;; 上記定義への参照\n"
"          (sign (or \"+\" \"-\" \"\"))))\n"

#. type: Plain text
#: original_texis/peg.texi:152
msgid "Rules and rulesets defined this way can be referred to by name in later calls to @code{peg-run} or @code{with-peg-rules}:"
msgstr "この方法で定義したルールおよびルールセットは、後で@code{peg-run}や@code{with-peg-rules}での呼び出しにおいて名前で参照できます:"

#. type: group
#: original_texis/peg.texi:157
#, no-wrap
msgid ""
"(with-peg-rules number-grammar\n"
"  (peg-run (peg number)))\n"
msgstr ""
"(with-peg-rules number-grammar\n"
"  (peg-run (peg number)))\n"

#. type: Plain text
#: original_texis/peg.texi:164
msgid "By default, calls to @code{peg-run} or @code{peg-parse} produce no output: parsing simply moves point.  In order to return or otherwise act upon parsed strings, rules can include @dfn{actions}, see @ref{Parsing Actions}."
msgstr "デフォルトでは@code{peg-run}や@code{peg-parse}の呼び出しによって出力は生成されず、パースによって単にポイントが移動するだけです。パースした文字列をリターンしたりそれにもとづいたアクションを行う場合には、ルールに@dfn{(actions)}を含めることができます。@ref{Parsing Actions}を参照してください。"

#. type: section
#: original_texis/peg.texi:169 original_texis/peg.texi:171
#: original_texis/peg.texi:172
#, no-wrap
msgid "PEX Definitions"
msgstr "PEX Definitions"

#. type: menuentry
#: original_texis/peg.texi:169
msgid "The syntax of PEX rules."
msgstr "PEXルールの構文。"

#. type: section
#: original_texis/peg.texi:169 original_texis/peg.texi:279
#: original_texis/peg.texi:280
#, no-wrap
msgid "Parsing Actions"
msgstr "Parsing Actions"

#. type: menuentry
#: original_texis/peg.texi:169
msgid "Running actions upon successful parsing."
msgstr "成功したパースにたいするアクションの実行。"

#. type: section
#: original_texis/peg.texi:169 original_texis/peg.texi:369
#: original_texis/peg.texi:370
#, no-wrap
msgid "Writing PEG Rules"
msgstr "Writing PEG Rules"

#. type: menuentry
#: original_texis/peg.texi:169
msgid "Tips for writing parsing rules."
msgstr "パースルール記述のヒント。"

#. type: Plain text
#: original_texis/peg.texi:175
msgid "Parsing expressions can be defined using the following syntax:"
msgstr "以下の構文を使用してパース式を定義できます:"

#. type: item
#: original_texis/peg.texi:177
#, no-wrap
msgid "(and @var{e1} @var{e2}@dots{})"
msgstr "(and @var{e1} @var{e2}@dots{})"

#. type: table
#: original_texis/peg.texi:180
msgid "A sequence of @acronym{PEX}s that must all be matched.  The @code{and} form is optional and implicit."
msgstr "すべてマッチしなければならない@acronym{PEX}のシーケンス。@code{and}フォームはオプションであり暗黙。"

#. type: item
#: original_texis/peg.texi:181
#, no-wrap
msgid "(or @var{e1} @var{e2}@dots{})"
msgstr "(or @var{e1} @var{e2}@dots{})"

#. type: table
#: original_texis/peg.texi:186
msgid "Prioritized choices, meaning that, as in Elisp, the choices are tried in order, and the first successful match is used.  Note that this is distinct from context-free grammars, in which selection between multiple matches is indeterminate."
msgstr "順位付けされた選択肢、すなわちElispの場合と同じように順に試行されて最初に成功したマッチが使用される。これは複数マッチ間の選択が不定なコンテキストフリーグラマー(ontext-free grammar: 文脈自由文法)とは別物であることに注意。"

#. type: item
#: original_texis/peg.texi:187
#, no-wrap
msgid "(any)"
msgstr "(any)"

#. type: table
#: original_texis/peg.texi:189
msgid "Matches any single character, as the regexp ``.''."
msgstr "regexpにおける``.''のように任意の1文字にマッチ。"

#. type: var{#1}
#: original_texis/peg.texi:190
#, no-wrap
msgid "string"
msgstr "string"

#. type: table
#: original_texis/peg.texi:192
msgid "A literal string."
msgstr "リテラル文字列。"

#. type: item
#: original_texis/peg.texi:193
#, no-wrap
msgid "(char @var{c})"
msgstr "(char @var{c})"

#. type: table
#: original_texis/peg.texi:195
msgid "A single character @var{c}, as an Elisp character literal."
msgstr "Elispの文字リテラルのような単一の文字@var{c}。"

#. type: item
#: original_texis/peg.texi:196
#, no-wrap
msgid "(* @var{e})"
msgstr "(* @var{e})"

#. type: table
#: original_texis/peg.texi:199
msgid "Zero or more instances of expression @var{e}, as the regexp @samp{*}.  Matching is always ``greedy''."
msgstr "regexpにおける@samp{*}のように、式@var{e}の0個以上のインスタンス。常に``欲張り(greedy)''なマッチ。"

#. type: item
#: original_texis/peg.texi:200
#, no-wrap
msgid "(+ @var{e})"
msgstr "(+ @var{e})"

#. type: table
#: original_texis/peg.texi:203
msgid "One or more instances of expression @var{e}, as the regexp @samp{+}.  Matching is always ``greedy''."
msgstr "regexpにおける@samp{+}のように、式@var{e}の1個以上のインスタンス。常に``欲張り(greedy)''なマッチ。"

#. type: item
#: original_texis/peg.texi:204
#, no-wrap
msgid "(opt @var{e})"
msgstr "(opt @var{e})"

#. type: table
#: original_texis/peg.texi:206
msgid "Zero or one instance of expression @var{e}, as the regexp @samp{?}."
msgstr "regexpにおける@samp{?}のように、式@var{e}の0個または1個のインスタンス。"

#. type: var{#1}
#: original_texis/peg.texi:207
#, no-wrap
msgid "symbol"
msgstr "symbol"

#. type: table
#: original_texis/peg.texi:209
msgid "A symbol representing a previously-defined PEG rule."
msgstr "前に定義されたPEGルールを表すシンボル。"

#. type: item
#: original_texis/peg.texi:210
#, no-wrap
msgid "(range @var{ch1} @var{ch2})"
msgstr "(range @var{ch1} @var{ch2})"

#. type: table
#: original_texis/peg.texi:213
msgid "The character range between @var{ch1} and @var{ch2}, as the regexp @samp{[@var{ch1}-@var{ch2}]}."
msgstr "regexpにおける@samp{[@var{ch1}-@var{ch2}]}のように、@var{ch1}と@var{ch2}の間の文字範囲。"

#. type: item
#: original_texis/peg.texi:214
#, no-wrap
msgid "[@var{ch1}-@var{ch2} \"+*\" ?x]"
msgstr "[@var{ch1}-@var{ch2} \"+*\" ?x]"

#. type: table
#: original_texis/peg.texi:217
msgid "A character set, which can include ranges, character literals, or strings of characters."
msgstr "範囲、文字リテラル、文字列を含むことができる文字セット。"

#. type: item
#: original_texis/peg.texi:218
#, no-wrap
msgid "[ascii cntrl]"
msgstr "[ascii cntrl]"

#. type: table
#: original_texis/peg.texi:220
msgid "A list of named character classes."
msgstr "名前つき文字クラスのリスト。"

#. type: item
#: original_texis/peg.texi:221
#, no-wrap
msgid "(syntax-class @var{name})"
msgstr "(syntax-class @var{name})"

#. type: table
#: original_texis/peg.texi:223
msgid "A single syntax class."
msgstr "単一の文字クラス。"

#. type: item
#: original_texis/peg.texi:224
#, no-wrap
msgid "(funcall @var{e} @var{args}@dots{})"
msgstr "(funcall @var{e} @var{args}@dots{})"

#. type: table
#: original_texis/peg.texi:227
msgid "Call @acronym{PEX} @var{e} (previously defined with @code{define-peg-rule}) with arguments @var{args}."
msgstr "引数@var{args}で@acronym{PEX}の(前に@code{define-peg-rule}で定義された) @var{e}を呼び出す。"

#. type: item
#: original_texis/peg.texi:228
#, no-wrap
msgid "(null)"
msgstr "(null)"

#. type: table
#: original_texis/peg.texi:230
msgid "The empty string."
msgstr "空文字列。"

#. type: Plain text
#: original_texis/peg.texi:236
msgid "The following expressions are used as anchors or tests -- they do not move point, but return a boolean value which can be used to constrain matches as a way of controlling the parsing process (@pxref{Writing PEG Rules})."
msgstr "以下はアンカーやテストとして使用される式です。これらはポイントを移動しませんが、パース処理(@ref{Writing PEG Rules}を参照)を制御する手段として使用できる、制限つきのマッチを行うためのブーリアン値をリターンします。"

#. type: item
#: original_texis/peg.texi:238
#, no-wrap
msgid "(bob)"
msgstr "(bob)"

#. type: table
#: original_texis/peg.texi:240
msgid "Beginning of buffer."
msgstr "バッファー先頭。"

#. type: item
#: original_texis/peg.texi:241
#, no-wrap
msgid "(eob)"
msgstr "(eob)"

#. type: table
#: original_texis/peg.texi:243
msgid "End of buffer."
msgstr "バッファー終端。"

#. type: item
#: original_texis/peg.texi:244
#, no-wrap
msgid "(bol)"
msgstr "(bol)"

#. type: table
#: original_texis/peg.texi:246
msgid "Beginning of line."
msgstr "行頭。"

#. type: item
#: original_texis/peg.texi:247
#, no-wrap
msgid "(eol)"
msgstr "(eol)"

#. type: table
#: original_texis/peg.texi:249
msgid "End of line."
msgstr "行末。"

#. type: item
#: original_texis/peg.texi:250
#, no-wrap
msgid "(bow)"
msgstr "(bow)"

#. type: table
#: original_texis/peg.texi:252
msgid "Beginning of word."
msgstr "単語の先頭。"

#. type: item
#: original_texis/peg.texi:253
#, no-wrap
msgid "(eow)"
msgstr "(eow)"

#. type: table
#: original_texis/peg.texi:255
msgid "End of word."
msgstr "単語の終端。"

#. type: item
#: original_texis/peg.texi:256
#, no-wrap
msgid "(bos)"
msgstr "(bos)"

#. type: table
#: original_texis/peg.texi:258
msgid "Beginning of symbol."
msgstr "シンボルの先頭。"

#. type: item
#: original_texis/peg.texi:259
#, no-wrap
msgid "(eos)"
msgstr "(eos)"

#. type: table
#: original_texis/peg.texi:261
msgid "End of symbol."
msgstr "シンボルの終端。"

#. type: item
#: original_texis/peg.texi:262
#, no-wrap
msgid "(if @var{e})"
msgstr "(if @var{e})"

#. type: table
#: original_texis/peg.texi:265
msgid "Returns non-@code{nil} if parsing @acronym{PEX} @var{e} from point succeeds (point is not moved)."
msgstr "ポイント以降を@acronym{PEX}の@var{e}でパースして成功なら非@code{nil}をリターン(ポイントは移動しない)。"

#. type: item
#: original_texis/peg.texi:266
#, no-wrap
msgid "(not @var{e})"
msgstr "(not @var{e})"

#. type: table
#: original_texis/peg.texi:269
msgid "Returns non-@code{nil} if parsing @acronym{PEX} @var{e} from point fails (point is not moved)."
msgstr "ポイント以降を@acronym{PEX}の@var{e}でパースして失敗なら非@code{nil}をリターン(ポイントは移動しない)。"

#. type: item
#: original_texis/peg.texi:270
#, no-wrap
msgid "(guard @var{exp})"
msgstr "(guard @var{exp})"

#. type: table
#: original_texis/peg.texi:272
msgid "Treats the value of the Lisp expression @var{exp} as a boolean."
msgstr "Lisp式の@var{exp}の値をブーリアン値として扱う。"

#. type: vindex
#: original_texis/peg.texi:274
#, no-wrap
msgid "peg-char-classes"
msgstr "peg-char-classes"

#. type: Plain text
#: original_texis/peg.texi:278
msgid "Character-class matching can refer to the classes named in @code{peg-char-classes}, equivalent to character classes in regular expressions (@pxref{Top,, Character Classes,elisp})"
msgstr "文字クラスにマッチングは、正規表現における文字クラス(@ref{Top,, Character Classes,elisp}を参照)と等価な@code{peg-char-classes}の名前つきクラスを参照できます。"

#. type: cindex
#: original_texis/peg.texi:282
#, no-wrap
msgid "parsing actions"
msgstr "parsing actions"

#. type: cindex
#: original_texis/peg.texi:283
#, no-wrap
msgid "parsing stack"
msgstr "parsing stack"

#. type: Plain text
#: original_texis/peg.texi:293
msgid "By default the process of parsing simply moves point in the current buffer, ultimately returning @code{t} if the parsing succeeds, and @code{nil} if it doesn't.  It's also possible to define @dfn{parsing actions} that can run arbitrary Elisp at certain points in the parsed text.  These actions can optionally affect something called the @dfn{parsing stack}, which is a list of values returned by the parsing process.  These actions only run (and only return values) if the parsing process ultimately succeeds; if it fails the action code is not run at all."
msgstr "デフォルトではパース処理はカレントバッファーのポイントを単に移動して、最終的にはパースが成功すれば@code{t}、失敗すれば@code{nil}をリターンします。パースしたテキスト内の特定のポイントで任意のElispを実行できる@dfn{パースアクション(parsing actions)}を定義することも可能です。これらのアクションはオプションで、@dfn{パーススタック(parsing stack)}と呼ばれるパースプロセスによってリターンされる値リストに影響を与えることができます。これらのアクションはパースプロセスが最終的に成功した場合のみ実行(および値のリターン)されます。失敗した場合にはアクションのコードは何も実行されません。"

#. type: Plain text
#: original_texis/peg.texi:304
msgid "Actions can be added anywhere in the definition of a rule.  They are distinguished from parsing expressions by an initial backquote (@samp{`}), followed by a parenthetical form that must contain a pair of hyphens (@samp{--}) somewhere within it.  Symbols to the left of the hyphens are bound to values popped from the stack (they are somewhat analogous to the argument list of a lambda form).  Values produced by code to the right of the hyphens are pushed onto the stack (analogous to the return value of the lambda).  For instance, the previous grammar can be augmented with actions to return the parsed number as an actual integer:"
msgstr "アクションはルール定義のどこでも追加できます。アクションは先頭にバッククォートを記述することでパース式とは区別されます。バッククォートの後には2つのハイフン(@samp{--})をどこかに含んだカッコの括りが続きます。ハイフン左側のシンボルにはスタックからポップされた値にバインドされます(幾分ラムダ式の引数リストに似ている)。ハイフン右側のコードが生成した値はスタックへとプッシュされます(ラムダのリターン値と似ている)。たとえば前述したグラマーはパースした数値を実際の整数としてリターンするアクションに拡張できます:"

#. type: group
#: original_texis/peg.texi:315
#, no-wrap
msgid ""
"(with-peg-rules ((number sign digit (* digit\n"
"                                       `(a b -- (+ (* a 10) b)))\n"
"                         `(sign val -- (* sign val)))\n"
"                 (sign (or (and \"+\" `(-- 1))\n"
"                           (and \"-\" `(-- -1))\n"
"                           (and \"\"  `(-- 1))))\n"
"                 (digit [0-9] `(-- (- (char-before) ?0))))\n"
"  (peg-run (peg number)))\n"
msgstr ""
"(with-peg-rules ((number sign digit (* digit\n"
"                                       `(a b -- (+ (* a 10) b)))\n"
"                         `(sign val -- (* sign val)))\n"
"                 (sign (or (and \"+\" `(-- 1))\n"
"                           (and \"-\" `(-- -1))\n"
"                           (and \"\"  `(-- 1))))\n"
"                 (digit [0-9] `(-- (- (char-before) ?0))))\n"
"  (peg-run (peg number)))\n"

#. type: Plain text
#: original_texis/peg.texi:324
msgid "There must be values on the stack before they can be popped and returned -- if there aren't enough stack values to bind to an action's left-hand terms, they will be bound to @code{nil}.  An action with only right-hand terms will push values to the stack; an action with only left-hand terms will consume (and discard) values from the stack.  At the end of parsing, stack values are returned as a flat list."
msgstr "値をポップしてリターンする前に、スタックには値が存在しなければなりません。アクションの左項にバインドするスタック値が不足している場合には、不足している項にたいして@code{nil}がバインドされるでしょう。スタックに値をプッシュするのはアクションの右項だけです。左項しかないアクションはスタックの値を消費(と破棄)するだけです。パースの最後でスタック値はフラットなリストとしてリターンされます。"

#. type: Plain text
#: original_texis/peg.texi:327
msgid "To return the string matched by a @acronym{PEX} (instead of simply moving point over it), a grammar can use a rule like this:"
msgstr "(単にポイントを移動するのではなく)@acronym{PEX}がマッチした文字列をリターンさせるために、以下のようなルールを用いるグラマーを記述できます:"

#. type: group
#: original_texis/peg.texi:334
#, no-wrap
msgid ""
"(one-word\n"
"  `(-- (point))\n"
"  (+ [word])\n"
"  `(start -- (buffer-substring start (point))))\n"
msgstr ""
"(one-word\n"
"  `(-- (point))\n"
"  (+ [word])\n"
"  `(start -- (buffer-substring start (point))))\n"

#. type: Plain text
#: original_texis/peg.texi:345
msgid "The first action above pushes the initial value of point to the stack.  The intervening @acronym{PEX} moves point over the next word.  The second action pops the previous value from the stack (binding it to the variable @code{start}), then uses that value to extract a substring from the buffer and push it to the stack.  This pattern is so common that @acronym{PEG} provides a shorthand function that does exactly the above, along with a few other shorthands for common scenarios:"
msgstr "上記1つ目のアクションはポイントの初期値をスタックにプッシュしています。アクションの間に記述された@acronym{PEX}によって、ポイントが次の単語の上に移動します。2つ目のアクションにより、前の値をスタックからポップします(その値は変数@code{start}にバインドされてから、バッファーからの部分文字列抽出に使用されて、抽出された文字列はスタックにプッシュされる)。これははよくあるパターンなので上述の処理、および他の一般的なシナリオを正確こなす略記関数を@acronym{PEG}が提供しています。"

#. type: findex
#: original_texis/peg.texi:347
#, no-wrap
msgid "substring (a PEG shorthand)"
msgstr "substring (a PEG shorthand)"

#. type: item
#: original_texis/peg.texi:348
#, no-wrap
msgid "(substring @var{e})"
msgstr "(substring @var{e})"

#. type: table
#: original_texis/peg.texi:350
msgid "Match @acronym{PEX} @var{e} and push the matched string onto the stack."
msgstr "@acronym{PEX}の@var{e}をマッチして、マッチした文字列をスタックにプッシュする。"

#. type: findex
#: original_texis/peg.texi:351
#, no-wrap
msgid "region (a PEG shorthand)"
msgstr "region (a PEG shorthand)"

#. type: item
#: original_texis/peg.texi:352
#, no-wrap
msgid "(region @var{e})"
msgstr "(region @var{e})"

#. type: table
#: original_texis/peg.texi:355
msgid "Match @var{e} and push the start and end positions of the matched region onto the stack."
msgstr "@var{e}をマッチして、マッチしたリージョンの開始と終了をスタックにプッシュする。"

#. type: findex
#: original_texis/peg.texi:356
#, no-wrap
msgid "replace (a PEG shorthand)"
msgstr "replace (a PEG shorthand)"

#. type: item
#: original_texis/peg.texi:357
#, no-wrap
msgid "(replace @var{e} @var{replacement})"
msgstr "(replace @var{e} @var{replacement})"

#. type: table
#: original_texis/peg.texi:360
msgid "Match @var{e} and replaced the matched region with the string @var{replacement}."
msgstr "@var{e}をマッチして、マッチしたリージョンを文字列@var{replacement}で置き換える。"

#. type: findex
#: original_texis/peg.texi:361
#, no-wrap
msgid "list (a PEG shorthand)"
msgstr "list (a PEG shorthand)"

#. type: item
#: original_texis/peg.texi:362
#, no-wrap
msgid "(list @var{e})"
msgstr "(list @var{e})"

#. type: table
#: original_texis/peg.texi:367
msgid "Match @var{e}, collect all values produced by @var{e} (and its sub-expressions) into a list, and push that list onto the stack.  Stack values are typically returned as a flat list; this is a way of ``grouping'' values together."
msgstr "@var{e}をマッチして、@var{e} (とその部分式)が生成した値をリストに収集、そのリストをスタックにプッシュする。スタック値は通常はフラットなリストとしてリターンされる(この方法により複数の値を一緒に``グループ化''される)。"

#. type: cindex
#: original_texis/peg.texi:371
#, no-wrap
msgid "PEG rules, pitfalls"
msgstr "PEG rules, pitfalls"

#. type: cindex
#: original_texis/peg.texi:372
#, no-wrap
msgid "Parsing Expression Grammar, pitfalls in rules"
msgstr "Parsing Expression Grammar, pitfalls in rules"

#. type: Plain text
#: original_texis/peg.texi:379
msgid "Something to be aware of when writing PEG rules is that they are greedy.  Rules which can consume a variable amount of text will always consume the maximum amount possible, even if that causes a rule that might otherwise have matched to fail later on -- there is no backtracking.  For instance, this rule will never succeed:"
msgstr "PEGルールを記述する際には、それが貪欲であることに留意する必要があります。可変量のテキストを消費し得るルールは、たとえそれを行うことによって通常であればマッチするような後続のルールが失敗することになろうとも、可能なかぎり最大の量のテキストを常に消費します。たとえば以下のルールが成功することは決してあり得ません:"

#. type: example
#: original_texis/peg.texi:382
#, no-wrap
msgid "(forest (+ \"tree\" (* [blank])) \"tree\" (eol))\n"
msgstr "(forest (+ \"tree\" (* [blank])) \"tree\" (eol))\n"

#. type: Plain text
#: original_texis/peg.texi:388
msgid "The @acronym{PEX} @w{@code{(+ \"tree\" (* [blank]))}} will consume all the repetitions of the word @samp{tree}, leaving none to match the final @samp{tree}."
msgstr "@w{@code{(+ \"tree\" (* [blank]))}}という@acronym{PEX}は、最後にマッチさせる@samp{tree}を残さず、単語@samp{tree}の繰り返しすべてを消費します。"

#. type: Plain text
#: original_texis/peg.texi:392
msgid "In these situations, the desired result can be obtained by using predicates and guards -- namely the @code{not}, @code{if} and @code{guard} expressions -- to constrain behavior.  For instance:"
msgstr "このような状況においては述語とguard (すなわち式@code{not}、@code{if}、@code{guard})を用いて挙動を制限することによって望ましい結果を得ることができます。たとえば:"

#. type: example
#: original_texis/peg.texi:395
#, no-wrap
msgid "(forest (+ \"tree\" (* [blank])) (not (eol)) \"tree\" (eol))\n"
msgstr "(forest (+ \"tree\" (* [blank])) (not (eol)) \"tree\" (eol))\n"

#. type: Plain text
#: original_texis/peg.texi:403
msgid "The @code{if} and @code{not} operators accept a parsing expression and interpret it as a boolean, without moving point.  The contents of a @code{guard} operator are evaluated as regular Lisp (not a @acronym{PEX}) and should return a boolean value.  A @code{nil} value causes the match to fail."
msgstr "@code{if}および@code{not}はポイントを移動せずにパース式を受け取って、ブーリアンとして解釈できる演算子です。@code{guard}演算子の内容は通常のLisp(@acronym{PEX}ではない)として評価されてブーリアン値をリターンされるはずです。@code{nil}値の場合にはマッチは失敗です。"

#. type: Plain text
#: original_texis/peg.texi:407
msgid "Another potentially unexpected behavior is that parsing will move point as far as possible, even if the parsing ultimately fails.  This rule:"
msgstr "他の期待していない振る舞いとしては、たとえ最終的に失敗するパースであってもパースによって可能なかぎり遠くにポイントが移動してしまう可能性があることです。以下のルール:"

#. type: example
#: original_texis/peg.texi:410
#, no-wrap
msgid "(end-game \"game\" (eob))\n"
msgstr "(end-game \"game\" (eob))\n"

#. type: Plain text
#: original_texis/peg.texi:416
msgid "when run in a buffer containing the text ``game over'' after point, will move point to just after ``game'' then halt parsing, returning @code{nil}.  Successful parsing will always return @code{t}, or the contexts of the parsing stack."
msgstr "このルールをポイント後にテキスト``game over''を含んだバッファーで実行すると、ポイントを``game''の直後に移動してからパースを中止して@code{nil}をリターンするでしょう。パースが成功した場合には常に@code{t}、あるいはパーススタックのコンテキストをリターンします。"
