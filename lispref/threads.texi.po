# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Emacs 26.1\n"
"POT-Creation-Date: 2021-03-19 23:11+0900\n"
"PO-Revision-Date: 2020-10-26 01:24+0900\n"
"Last-Translator: Ayanokoji Takesi <ayanokoji.takesi@gmail.com>\n"
"Language-Team: ja <ayanokoji.takesi@gmail.com>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: original_texis/threads.texi:5 original_texis/threads.texi:6
#, no-wrap
msgid "Threads"
msgstr "Threads"

#. type: cindex
#: original_texis/threads.texi:7
#, no-wrap
msgid "threads"
msgstr "threads"

#. type: cindex
#: original_texis/threads.texi:8
#, no-wrap
msgid "concurrency"
msgstr "concurrency"

#. type: Plain text
#: original_texis/threads.texi:17
msgid "Emacs Lisp provides a limited form of concurrency, called @dfn{threads}.  All the threads in a given instance of Emacs share the same memory.  Concurrency in Emacs Lisp is ``mostly cooperative'', meaning that Emacs will only switch execution between threads at well-defined times.  However, the Emacs thread support has been designed in a way to later allow more fine-grained concurrency, and correct programs should not rely on cooperative threading."
msgstr "Emacs Lispは@dfn{スレッド(thread)}と呼ばれる限定的な並行性(concurrency)の形式を提供します。Emacsの与えられたインターフェース内のすべてのスレッドは同じメモリーを共有します。Emacs Lisp内の並行性は``概ね協調的(mostly cooperative)''であり、これはEmacsがスレッド間の実効を明確に定義された時間にだけ切り替えることを意味しています。しかしEmacsでのスレッドのサポートは将来よりきめの細かい並行性が可能な方法でデザインされており、正しいプログラムは協調的なスレッドに依存するべきではありません。"

#. type: Plain text
#: original_texis/threads.texi:23
msgid "Currently, thread switching will occur upon explicit request via @code{thread-yield}, when waiting for keyboard input or for process output from asynchronous processes (e.g., during @code{accept-process-output}), or during blocking operations relating to threads, such as mutex locking or @code{thread-join}."
msgstr "現在のところスレッドの切り替えはキーボード入力や非同期プロセスからの出力の待機中(つまり@code{accept-process-output}の間)、ミューテックスのロックや@code{thread-join}のようなスレッドに関連するブロッキング処理の間での、@code{thread-yield}を介した明示的な要求時に発生します。"

#. type: Plain text
#: original_texis/threads.texi:27
msgid "Emacs Lisp provides primitives to create and control threads, and also to create and control mutexes and condition variables, useful for thread synchronization."
msgstr "Emacs Lispはスレッドの作成や制御、さらにスレッドの同期に有用なミューテックスや条件変数の作成や制御を行うプリミティブを提供します。"

#. type: Plain text
#: original_texis/threads.texi:32
msgid "While global variables are shared among all Emacs Lisp threads, local variables are not---a dynamic @code{let} binding is local.  Each thread also has its own current buffer (@pxref{Current Buffer}) and its own match data (@pxref{Match Data})."
msgstr "グローバル変数はEmacs Lispのすべてのスレッドの間で共有されますがローカル変数(@code{let}によるダイナミックなバインドはローカル)は異なります。スレッドはそれぞれ自身のカレントバッファー(@ref{Current Buffer}を参照)と自身のマッチデータ(@ref{Match Data}を参照)を所有します。"

#. type: Plain text
#: original_texis/threads.texi:39
msgid "Note that @code{let} bindings are treated specially by the Emacs Lisp implementation.  There is no way to duplicate this unwinding and rewinding behavior other than by using @code{let}.  For example, a manual implementation of @code{let} written using @code{unwind-protect} cannot arrange for variable values to be thread-specific."
msgstr "@code{let}によるバイディングはEmacs Lisp実装により特別に処理されることに注意してください。@code{let}の使う以外にこのunwind(巻き戻し)とrewind(巻き戻すための巻き取り)の振る舞いを複製する方法はありません。たとえば@code{unwind-protect}を使用して@code{let}の独自実装で記述しても変数値をスレッド固有にアレンジすることはできません。"

#. type: Plain text
#: original_texis/threads.texi:43
msgid "In the case of lexical bindings (@pxref{Variable Scoping}), a closure is an object like any other in Emacs Lisp, and bindings in a closure are shared by any threads invoking the closure."
msgstr "レキシカルバインディング(@ref{Variable Scoping}を参照)の場合には他のEmacs Lispオブジェクト類似するものはクロージ(closure)です。クロージャ内のバインディングはクロージャを呼び出したすべてのスレッド間で共有されます。"

#. type: section
#: original_texis/threads.texi:49 original_texis/threads.texi:51
#: original_texis/threads.texi:52
#, no-wrap
msgid "Basic Thread Functions"
msgstr "Basic Thread Functions"

#. type: menuentry
#: original_texis/threads.texi:49
msgid "Basic thread functions."
msgstr "基本的なスレッド関数。"

#. type: section
#: original_texis/threads.texi:49 original_texis/threads.texi:151
#: original_texis/threads.texi:152
#, no-wrap
msgid "Mutexes"
msgstr "Mutexes"

#. type: menuentry
#: original_texis/threads.texi:49
msgid "Mutexes allow exclusive access to data."
msgstr "データへの排他アクセスを可能にするミューテックス。"

#. type: section
#: original_texis/threads.texi:49 original_texis/threads.texi:198
#: original_texis/threads.texi:199
#, no-wrap
msgid "Condition Variables"
msgstr "Condition Variables"

#. type: menuentry
#: original_texis/threads.texi:49
msgid "Inter-thread events."
msgstr "スレッド間のイベント。"

#. type: section
#: original_texis/threads.texi:49 original_texis/threads.texi:276
#: original_texis/threads.texi:277
#, no-wrap
msgid "The Thread List"
msgstr "The Thread List"

#. type: menuentry
#: original_texis/threads.texi:49
msgid "Show the active threads."
msgstr "アクティブなスレッドの表示。"

#. type: Plain text
#: original_texis/threads.texi:57
msgid "Threads can be created and waited for.  A thread cannot be exited directly, but the current thread can be exited implicitly, and other threads can be signaled."
msgstr "スレッドを作成したり待機することができます。スレッドを直接exitすることはできませんがカンレントスレッドは暗黙にexitでき、他のスレッドはシグナルを受け取ることができます。"

#. type: defun
#: original_texis/threads.texi:58
#, no-wrap
msgid "make-thread function &optional name"
msgstr "make-thread function &optional name"

#. type: defun
#: original_texis/threads.texi:61
msgid "Create a new thread of execution which invokes @var{function}.  When @var{function} returns, the thread exits."
msgstr "@var{function}を呼び出す新たなスレッドの実行を作成する。@var{function}のリターン時にスレッドはexitする。"

#. type: defun
#: original_texis/threads.texi:64
msgid "The new thread is created with no local variable bindings in effect.  The new thread's current buffer is inherited from the current thread."
msgstr "新たなスレッドは効力をもつローカル変数のバインディングが何もない状態で作成される。新たなスレッドのカレントバッファーはカレントスレッドから継承される。"

#. type: defun
#: original_texis/threads.texi:68
msgid "@var{name} can be supplied to give a name to the thread.  The name is used for debugging and informational purposes only; it has no meaning to Emacs.  If @var{name} is provided, it must be a string."
msgstr "@var{name}でスレッドに名前を与えることができる。これはデバッグと情報的な用途だけに使用される名前であり、Emacsにとって意味はない。@var{name}を与える場合には文字列でなければならない。"

#. type: defun
#: original_texis/threads.texi:70
msgid "This function returns the new thread."
msgstr "この関数は新たなスレッドをリターンする。"

#. type: defun
#: original_texis/threads.texi:72
#, no-wrap
msgid "threadp object"
msgstr "threadp object"

#. type: defun
#: original_texis/threads.texi:75
msgid "This function returns @code{t} if @var{object} represents an Emacs thread, @code{nil} otherwise."
msgstr "この関数は@var{object}がEmacsスレッドを表すなら@code{t}、それ以外は@code{nil}をリターンする。"

#. type: defun
#: original_texis/threads.texi:77
#, no-wrap
msgid "thread-join thread"
msgstr "thread-join thread"

#. type: defun
#: original_texis/threads.texi:81
msgid "Block until @var{thread} exits, or until the current thread is signaled.  It returns the result of the @var{thread} function.  If @var{thread} has already exited, this returns immediately."
msgstr "@var{thread}がexitするかカレントスレッドがシグナルされるまでブロックする。これは@var{thread}関数の結果をリターンする。@var{thread}がexit済みなら即座にリターンする。"

#. type: defun
#: original_texis/threads.texi:83
#, no-wrap
msgid "thread-signal thread error-symbol data"
msgstr "thread-signal thread error-symbol data"

#. type: defun
#: original_texis/threads.texi:91
msgid "Like @code{signal} (@pxref{Signaling Errors}), but the signal is delivered in the thread @var{thread}.  If @var{thread} is the current thread, then this just calls @code{signal} immediately.  Otherwise, @var{thread} will receive the signal as soon as it becomes current.  If @var{thread} was blocked by a call to @code{mutex-lock}, @code{condition-wait}, or @code{thread-join}; @code{thread-signal} will unblock it."
msgstr "@code{signal} (@ref{Signaling Errors}を参照)と同様だがシグナルはスレッド@var{thread}に送信される。@var{thread}がカレントスレッドなら、即座に@code{signal}を呼び出す。それ以外なら@var{thread}がカレントになり次第、シグナルを受信する。@code{mutex-lock}、@code{condition-wait}、@code{thread-join}の呼び出しにより@var{thread}がブロックされていたら@code{thread-signal}がロックを解除する。"

#. type: defun
#: original_texis/threads.texi:94
msgid "If @var{thread} is the main thread, the signal is not propagated there.  Instead, it is shown as message in the main thread."
msgstr "@var{thread}がメインスレッドならシグナルは伝播されない。かわりにメインスレッド内のメッセージとして表れる。"

#. type: defun
#: original_texis/threads.texi:96
#, no-wrap
msgid "thread-yield"
msgstr "thread-yield"

#. type: defun
#: original_texis/threads.texi:98
msgid "Yield execution to the next runnable thread."
msgstr "実行可能な次のスレッドに実行を譲り渡す。"

#. type: defun
#: original_texis/threads.texi:100
#, no-wrap
msgid "thread-name thread"
msgstr "thread-name thread"

#. type: defun
#: original_texis/threads.texi:102
msgid "Return the name of @var{thread}, as specified to @code{make-thread}."
msgstr "@code{make-thread}で指定された@var{thread}の名前をリターンする。"

#. type: defun
#: original_texis/threads.texi:104
#, no-wrap
msgid "thread-live-p thread"
msgstr "thread-live-p thread"

#. type: defun
#: original_texis/threads.texi:107
msgid "Return @code{t} if @var{thread} is alive, or @code{nil} if it is not.  A thread is alive as long as its function is still executing."
msgstr "@var{thread}が生きていれば@code{t}、それ以外は@code{nil}をリターンする。スレッドは自身の関数がまだ実行中なら生きている。"

#. type: defun
#: original_texis/threads.texi:109
#, no-wrap
msgid "thread--blocker thread"
msgstr "thread--blocker thread"

#. type: defun
#: original_texis/threads.texi:113
msgid "Return the object that @var{thread} is waiting on.  This function is primarily intended for debugging, and is given a ``double hyphen'' name to indicate that."
msgstr "@var{thread}が待機中のオブジェクトをリターンする。これは主にデバッグを糸した関数であり、それを示すために``2重ハイフン''の名前を付与してある。"

#. type: defun
#: original_texis/threads.texi:116
msgid "If @var{thread} is blocked in @code{thread-join}, this returns the thread for which it is waiting."
msgstr "@var{thread}が@code{thread-join}内でブロックされていたら待機対象のスレッドをリターンする。"

#. type: defun
#: original_texis/threads.texi:118
msgid "If @var{thread} is blocked in @code{mutex-lock}, this returns the mutex."
msgstr "@var{thread}が@code{mutex-lock}内でブロックされていたらミューテックスをリターンする。"

#. type: defun
#: original_texis/threads.texi:121
msgid "If @var{thread} is blocked in @code{condition-wait}, this returns the condition variable."
msgstr "@var{thread}が@code{condition-wait}内でブロックされていたら条件変数をリターンする。"

#. type: defun
#: original_texis/threads.texi:123
msgid "Otherwise, this returns @code{nil}."
msgstr "それ以外なら@code{nil}をリターンする。"

#. type: defun
#: original_texis/threads.texi:125
#, no-wrap
msgid "current-thread"
msgstr "current-thread"

#. type: defun
#: original_texis/threads.texi:127
msgid "Return the current thread."
msgstr "カレントスレッドをリターンする。"

#. type: defun
#: original_texis/threads.texi:129
#, no-wrap
msgid "all-threads"
msgstr "all-threads"

#. type: defun
#: original_texis/threads.texi:132
msgid "Return a list of all the live thread objects.  A new list is returned by each invocation."
msgstr "すべての生きたスレッドオブジェクトのリストをリターンする。呼び出しそれぞれにたいして新たなリストをリターンする。"

#. type: defvar
#: original_texis/threads.texi:134
#, no-wrap
msgid "main-thread"
msgstr "main-thread"

#. type: defvar
#: original_texis/threads.texi:137
msgid "This variable keeps the main thread Emacs is running, or @code{nil} if Emacs is compiled without thread support."
msgstr "この変数はEmacs実行中のメインスレッド、スレッドサポートなしでEmacsコンパイル時には@code{nil}を保持する。"

#. type: Plain text
#: original_texis/threads.texi:142
msgid "When code run by a thread signals an error that is unhandled, the thread exits.  Other threads can access the error form which caused the thread to exit using the following function."
msgstr "スレッドが実行したコードがハンドルされないエラーをシグナルすると、そのスレッドはexitします。それ以外のスレッドは以下の関数を使用してスレッドのexitを誘発したエラーフォームにアクセスできます。"

#. type: defun
#: original_texis/threads.texi:143
#, no-wrap
msgid "thread-last-error &optional cleanup"
msgstr "thread-last-error &optional cleanup"

#. type: defun
#: original_texis/threads.texi:149
msgid "This function returns the last error form recorded when a thread exited due to an error.  Each thread that exits abnormally overwrites the form stored by the previous thread's error with a new value, so only the last one can be accessed.  If @var{cleanup} is non-@code{nil}, the stored form is reset to @code{nil}."
msgstr "この関数はエラーによりスレッドがexitした際に記録された最後のエラーフォームをリターンする。異常終了(abnormal exit)した各スレッドが、以前にスレッドエラーで格納されたフォームを新たな値に上書きするので、アクセスできるのは最後のフォームのみ。@var{cleanup}が非@code{nil}なら格納されたフォームを@code{nil}にリセットする。"

#. type: Plain text
#: original_texis/threads.texi:158
msgid "A @dfn{mutex} is an exclusive lock.  At any moment, zero or one threads may own a mutex.  If a thread attempts to acquire a mutex, and the mutex is already owned by some other thread, then the acquiring thread will block until the mutex becomes available."
msgstr "@dfn{ミューテックス(mutex)}は排他的なロックです。任意のタイミングにおいて0、または1つのスレッドがミューテックスを所有できます。スレッドがミューテックスの取得を試みたときに別スレッドがすでにそのミューテックスを所有していたら、ミューテックスが利用可能になるまで取得を試みたスレッドはブロックされます。"

#. type: Plain text
#: original_texis/threads.texi:165
msgid "Emacs Lisp mutexes are of a type called @dfn{recursive}, which means that a thread can re-acquire a mutex it owns any number of times.  A mutex keeps a count of how many times it has been acquired, and each acquisition of a mutex must be paired with a release.  The last release by a thread of a mutex reverts it to the unowned state, potentially allowing another thread to acquire the mutex."
msgstr "Emacs Lispのミューテックスは@dfn{再帰的(recursive)}と呼ばれるタイプです。これはスレッドがミューテックスを何回も再帰的に所有できることを意味します。ミューテックスは所有された回数を保持していて、それら所有のそれぞれがリリースとペアになっていなければなりません。スレッドによるミューテックスの最後のリリースによりミューテックスは他のスレッドが潜在的に所有可能である非所有な状態へとリバートされます。"

#. type: defun
#: original_texis/threads.texi:166
#, no-wrap
msgid "mutexp object"
msgstr "mutexp object"

#. type: defun
#: original_texis/threads.texi:169
msgid "This function returns @code{t} if @var{object} represents an Emacs mutex, @code{nil} otherwise."
msgstr "この関数は@var{object}がEmacsのミューテックスを表していれば@code{t}、それ以外は@code{nil}をリターンする。"

#. type: defun
#: original_texis/threads.texi:171
#, no-wrap
msgid "make-mutex &optional name"
msgstr "make-mutex &optional name"

#. type: defun
#: original_texis/threads.texi:175
msgid "Create a new mutex and return it.  If @var{name} is specified, it is a name given to the mutex.  It must be a string.  The name is for debugging purposes only; it has no meaning to Emacs."
msgstr "新たなミューテックスを作成してリターンする。@var{name}が指定されたらミューテックスの名前として与えられる(文字列でなければならない)。これはデバッグにたいする用途のみの名前でありEmacsにとって意味はない。"

#. type: defun
#: original_texis/threads.texi:177
#, no-wrap
msgid "mutex-name mutex"
msgstr "mutex-name mutex"

#. type: defun
#: original_texis/threads.texi:179
msgid "Return the name of @var{mutex}, as specified to @code{make-mutex}."
msgstr "@code{make-mutex}で指定された@var{mutex}の名前をリターンする。"

#. type: defun
#: original_texis/threads.texi:181
#, no-wrap
msgid "mutex-lock mutex"
msgstr "mutex-lock mutex"

#. type: defun
#: original_texis/threads.texi:185
msgid "This will block until this thread acquires @var{mutex}, or until this thread is signaled using @code{thread-signal}.  If @var{mutex} is already owned by this thread, this simply returns."
msgstr "これはスレッドが@var{mutex}を所有するか、スレッドが@code{thread-signal}の使用によりシグナルされるまでブロックする。スレッドが@var{mutex}をすでに所有していたら単にリターンする。"

#. type: defun
#: original_texis/threads.texi:187
#, no-wrap
msgid "mutex-unlock mutex"
msgstr "mutex-unlock mutex"

#. type: defun
#: original_texis/threads.texi:190
msgid "Release @var{mutex}.  If @var{mutex} is not owned by this thread, this will signal an error."
msgstr "@var{mutex}をリリースする。そのスレッドが@var{mutex}を所有していなければエラーをシグナルする。"

#. type: defmac
#: original_texis/threads.texi:192
#, no-wrap
msgid "with-mutex mutex body@dots{}"
msgstr "with-mutex mutex body@dots{}"

#. type: defmac
#: original_texis/threads.texi:196
msgid "This macro is the simplest and safest way to evaluate forms while holding a mutex.  It acquires @var{mutex}, invokes @var{body}, and then releases @var{mutex}.  It returns the result of @var{body}."
msgstr "このマクロはもっともシンプルかつ安全にミューテックスを保持しつつフォームを評価する方法である。これは@var{mutex}を取得して@var{body}を呼び出してから@var{mutex}をリリースする。@var{body}の結果をリターンする。"

#. type: Plain text
#: original_texis/threads.texi:204
msgid "A @dfn{condition variable} is a way for a thread to block until some event occurs.  A thread can wait on a condition variable, to be woken up when some other thread notifies the condition."
msgstr "@dfn{条件変数(condition variable)}は何らかのイベントが発生するまでスレッドをブロックするための手段です。スレッドは別のスレッドが条件を通知した際に目覚めるように条件変数を待機できます。"

#. type: Plain text
#: original_texis/threads.texi:209
msgid "A condition variable is associated with a mutex and, conceptually, with some condition.  For proper operation, the mutex must be acquired, and then a waiting thread must loop, testing the condition and waiting on the condition variable.  For example:"
msgstr "条件変数はミューテックス、および概念的に何らかの条件に関連付けられます。正しく操作するために、ミューテックスを所有してから待機スレッドはループして、条件のテストを行い条件変数を待機しなければなりません。たとえば:"

#. type: example
#: original_texis/threads.texi:214
#, no-wrap
msgid ""
"(with-mutex mutex\n"
"  (while (not global-variable)\n"
"    (condition-wait cond-var)))\n"
msgstr ""
"(with-mutex mutex\n"
"  (while (not global-variable)\n"
"    (condition-wait cond-var)))\n"

#. type: Plain text
#: original_texis/threads.texi:218
msgid "The mutex ensures atomicity, and the loop is for robustness---there may be spurious notifications."
msgstr "ミューテックスはアトミック操作のために、ループは堅牢性のためのものです。これは偽の通知があるかもしれないからです。"

#. type: Plain text
#: original_texis/threads.texi:222
msgid "Similarly, the mutex must be held before notifying the condition.  The typical, and best, approach is to acquire the mutex, make the changes associated with this condition, and then notify it:"
msgstr "同様にミューテックスは条件の通知前に所持されていなければなりません。ミューテックスを所有して条件に関連する変更を行い、それを通知するのが典型的かつ最良なアプローチです:"

#. type: example
#: original_texis/threads.texi:227
#, no-wrap
msgid ""
"(with-mutex mutex\n"
"  (setq global-variable (some-computation))\n"
"  (condition-notify cond-var))\n"
msgstr ""
"(with-mutex mutex\n"
"  (setq global-variable (some-computation))\n"
"  (condition-notify cond-var))\n"

#. type: defun
#: original_texis/threads.texi:229
#, no-wrap
msgid "make-condition-variable mutex &optional name"
msgstr "make-condition-variable mutex &optional name"

#. type: defun
#: original_texis/threads.texi:234
msgid "Make a new condition variable associated with @var{mutex}.  If @var{name} is specified, it is a name given to the condition variable.  It must be a string.  The name is for debugging purposes only; it has no meaning to Emacs."
msgstr "@var{mutex}に関連付けられた条件変数を作成する。@var{name}が指定されたら条件変数の名前として与えられる(文字列でなければならない)。これはデバッグにたいする用途のみの名前でありEmacsにとって意味はない。"

#. type: defun
#: original_texis/threads.texi:236
#, no-wrap
msgid "condition-variable-p object"
msgstr "condition-variable-p object"

#. type: defun
#: original_texis/threads.texi:239
msgid "This function returns @code{t} if @var{object} represents a condition variable, @code{nil} otherwise."
msgstr "この関数は@var{object}が条件変数を表していれば@code{t}、それ以外は@code{nil}をリターンする。"

#. type: defun
#: original_texis/threads.texi:241
#, no-wrap
msgid "condition-wait cond"
msgstr "condition-wait cond"

#. type: defun
#: original_texis/threads.texi:245
msgid "Wait for another thread to notify @var{cond}, a condition variable.  This function will block until the condition is notified, or until a signal is delivered to this thread using @code{thread-signal}."
msgstr "他のスレッドによる条件変数@var{cond}の通知を待機する。この関数は条件変数の通知、または@code{thread-signal}の使用によりシグナルが送信されるまでブロックする。"

#. type: defun
#: original_texis/threads.texi:248
msgid "It is an error to call @code{condition-wait} without holding the condition's associated mutex."
msgstr "ミューテックスに関連付けられた条件を所持しない@code{condition-wait}の呼び出しはエラーとなる。"

#. type: defun
#: original_texis/threads.texi:252
msgid "@code{condition-wait} releases the associated mutex while waiting.  This allows other threads to acquire the mutex in order to notify the condition."
msgstr "@code{condition-wait}は待機中に関連付けられたミューテックスをリリースする。これは別スレッドによる条件通知するためのミューテックス所有を可能にする。"

#. type: defun
#: original_texis/threads.texi:254
#, no-wrap
msgid "condition-notify cond &optional all"
msgstr "condition-notify cond &optional all"

#. type: defun
#: original_texis/threads.texi:259
msgid "Notify @var{cond}.  The mutex with @var{cond} must be held before calling this.  Ordinarily a single waiting thread is woken by @code{condition-notify}; but if @var{all} is not @code{nil}, then all threads waiting on @var{cond} are notified."
msgstr "@var{cond}を通知する。呼び出し前に@var{cond}に関連付けられるミューテックスを所有しなければならない。通常は@code{condition-notify}により単一の待機中スレッドが目覚めさせられる。しかし@var{all}が非@code{nil}なら@var{cond}を待機中のすべてのスレッドに通知される。"

#. type: defun
#: original_texis/threads.texi:264
msgid "@code{condition-notify} releases the associated mutex while waiting.  This allows other threads to acquire the mutex in order to wait on the condition."
msgstr "@code{condition-notify}は関連付けられたミューテックスを待機中はリリースする。これによりスレッドが条件を待機するためにミューテックスを所有することが可能になる。"

#. type: defun
#: original_texis/threads.texi:266
#, no-wrap
msgid "condition-name cond"
msgstr "condition-name cond"

#. type: defun
#: original_texis/threads.texi:269
msgid "Return the name of @var{cond}, as passed to @code{make-condition-variable}."
msgstr "@code{make-condition-variable}に渡された@var{cond}の名前をリターンする。"

#. type: defun
#: original_texis/threads.texi:271
#, no-wrap
msgid "condition-mutex cond"
msgstr "condition-mutex cond"

#. type: defun
#: original_texis/threads.texi:274
msgid "Return the mutex associated with @var{cond}.  Note that the associated mutex cannot be changed."
msgstr "@var{cond}に関連付けられたミューテックスをリターンする。関連付けられたミューテックスは変更できないことに注意。"

#. type: cindex
#: original_texis/threads.texi:279
#, no-wrap
msgid "thread list"
msgstr "thread list"

#. type: cindex
#: original_texis/threads.texi:280
#, no-wrap
msgid "list of threads"
msgstr "list of threads"

#. type: findex
#: original_texis/threads.texi:281
#, no-wrap
msgid "list-threads"
msgstr "list-threads"

#. type: Plain text
#: original_texis/threads.texi:289
msgid "The @code{list-threads} command lists all the currently alive threads.  In the resulting buffer, each thread is identified either by the name passed to @code{make-thread} (@pxref{Basic Thread Functions}), or by its unique internal identifier if it was not created with a name.  The status of each thread at the time of the creation or last update of the buffer is shown, in addition to the object the thread was blocked on at the time, if it was blocked."
msgstr "@code{list-threads}コマンドはカレントでアクティブなすべてのスレッドをリストします。その結果となるバッファー内では、それぞれのスレッドは@code{make-thread} (@ref{Basic Thread Functions}を参照)に渡された名前、または名前つきで作成されていなければ一意な内部識別子により識別される。バッファーの作成時(または最終更新時)の各スレッドの状態、さらにその時点でスレッドがブロックされていたらブロックしているオブジェクトが表示されます。"

#. type: defvar
#: original_texis/threads.texi:290
#, no-wrap
msgid "thread-list-refresh-seconds"
msgstr "thread-list-refresh-seconds"

#. type: defvar
#: original_texis/threads.texi:294
msgid "The @file{*Threads*} buffer will automatically update twice per second.  You can make the refresh rate faster or slower by customizing this variable."
msgstr "@file{*Threads*}バッファーは自動的に毎秒2回更新される。この変数をカスタマイズしてリフレッシュ間隔を加減できる。"

#. type: Plain text
#: original_texis/threads.texi:297
msgid "Here are the commands available in the thread list buffer:"
msgstr "以下はレッドリストバッファーで利用できるコマンドです:"

#. type: cindex
#: original_texis/threads.texi:300
#, no-wrap
msgid "backtrace of thread"
msgstr "backtrace of thread"

#. type: cindex
#: original_texis/threads.texi:301
#, no-wrap
msgid "thread backtrace"
msgstr "thread backtrace"

#. type: item
#: original_texis/threads.texi:302
#, no-wrap
msgid "b"
msgstr "b"

#. type: table
#: original_texis/threads.texi:308
msgid "Show a backtrace of the thread at point.  This will show where in its code the thread had yielded or was blocked at the moment you pressed @kbd{b}.  Be aware that the backtrace is a snapshot; the thread could have meanwhile resumed execution, and be in a different state, or could have exited."
msgstr "ポイント位置のスレッドのバックトレースを表示する。これは@kbd{b}を押下した時点でスレッドが生成またはブロックされたコードを表示する。このバックトレースはスナップショットであることに注意。それ以降にスレッドが実行を再開して異なる状態になったりexitしているかもしれない。"

#. type: table
#: original_texis/threads.texi:313
msgid "You may use @kbd{g} in the thread's backtrace buffer to get an updated backtrace, as backtrace buffers do not automatically update.  @xref{Backtraces}, for a description of backtraces and the other commands which work on them."
msgstr "バックトレースバッファーは自動的に更新されないので、スレッドのバックトレースバッファーでは、更新されたバックトレースを取得するために@kbd{g}を使用できる。バックトレースおよびそれらに機能する他のコマンドの説明は@ref{Backtraces}を参照のこと。"

#. type: item
#: original_texis/threads.texi:314
#, no-wrap
msgid "s"
msgstr "s"

#. type: table
#: original_texis/threads.texi:321
msgid "Signal the thread at point.  After @kbd{s}, type @kbd{q} to send a quit signal or @kbd{e} to send an error signal.  Threads may implement handling of signals, but the default behavior is to exit on any signal.  Therefore you should only use this command if you understand how to restart the target thread, because your Emacs session may behave incorrectly if necessary threads are killed."
msgstr "ポイント位置のスレッドにシグナルを送信する。@kbd{s}の後に@kbd{q}をタイプするとquit、@kbd{e}をタイプするとエラーをシグナルする。スレッドはシグナルを処理するように実装されているかもしれないが、デフォルトではすべてのシグナルにたいしてexitする。したがってターゲットとなるスレッドの再開方法を理解している場合のみこのコマンドを使用すること(必要なスレッドがkillされるとEmacsセッションは不正に振る舞うかもしれない)。"

#. type: item
#: original_texis/threads.texi:322
#, no-wrap
msgid "g"
msgstr "g"

#. type: table
#: original_texis/threads.texi:324
msgid "Update the list of threads and their statuses."
msgstr "スレッドのリストと状態を更新する。"
