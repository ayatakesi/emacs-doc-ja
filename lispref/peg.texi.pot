# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2024-07-10 03:45+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: original_texis/peg.texi:6 original_texis/peg.texi:7
#, no-wrap
msgid "Parsing Expression Grammars"
msgstr ""

#. type: cindex
#: original_texis/peg.texi:8
#, no-wrap
msgid "text parsing"
msgstr ""

#. type: cindex
#: original_texis/peg.texi:9
#, no-wrap
msgid "parsing expression grammar"
msgstr ""

#. type: cindex
#: original_texis/peg.texi:10
#, no-wrap
msgid "PEG"
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:19
msgid ""
"Emacs Lisp provides several tools for parsing and matching text, from "
"regular expressions (@pxref{Regular Expressions}) to full left-to-right "
"(a.k.a.@: @acronym{LL}) grammar parsers (@pxref{Top,, Bovine parser "
"development,bovine}).  @dfn{Parsing Expression Grammars} (@acronym{PEG}) are "
"another approach to text parsing that offer more structure and composability "
"than regular expressions, but less complexity than context-free grammars."
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:27
msgid ""
"A Parsing Expression Grammar (@acronym{PEG}) describes a formal language in "
"terms of a set of rules for recognizing strings in the language.  In Emacs, "
"a @acronym{PEG} parser is defined as a list of named rules, each of which "
"matches text patterns and/or contains references to other rules.  Parsing is "
"initiated with the function @code{peg-run} or the macro @code{peg-parse} "
"(see below), and parses text after point in the current buffer, using a "
"given set of rules."
msgstr ""

#. type: cindex
#: original_texis/peg.texi:28
#, no-wrap
msgid "parsing expression"
msgstr ""

#. type: cindex
#: original_texis/peg.texi:29
#, no-wrap
msgid "root, of parsing expression grammar"
msgstr ""

#. type: cindex
#: original_texis/peg.texi:30
#, no-wrap
msgid "entry-point, of parsing expression grammar"
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:38
msgid ""
"Each rule in a @acronym{PEG} is referred to as a @dfn{parsing expression} "
"(@acronym{PEX}), and can be specified a literal string, a regexp-like "
"character range or set, a peg-specific construct resembling an Emacs Lisp "
"function call, a reference to another rule, or a combination of any of "
"these.  A grammar is expressed as a tree of rules in which one rule is "
"typically treated as a ``root'' or ``entry-point'' rule.  For instance:"
msgstr ""

#. type: group
#: original_texis/peg.texi:44
#, no-wrap
msgid ""
"((number sign digit (* digit))\n"
" (sign   (or \"+\" \"-\" \"\"))\n"
" (digit  [0-9]))\n"
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:50
msgid ""
"Once defined, grammars can be used to parse text after point in the current "
"buffer, in a number of ways.  The @code{peg-parse} macro is the simplest:"
msgstr ""

#. type: defmac
#: original_texis/peg.texi:51
#, no-wrap
msgid "peg-parse &rest pexs"
msgstr ""

#. type: defmac
#: original_texis/peg.texi:53
msgid "Match @var{pexs} at point."
msgstr ""

#. type: group
#: original_texis/peg.texi:61
#, no-wrap
msgid ""
"(peg-parse\n"
"  (number sign digit (* digit))\n"
"  (sign   (or \"+\" \"-\" \"\"))\n"
"  (digit  [0-9]))\n"
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:67
msgid ""
"While this macro is simple it is also inflexible, as the rules must be "
"written directly into the source code.  More flexibility can be gained by "
"using a combination of other functions and macros."
msgstr ""

#. type: defmac
#: original_texis/peg.texi:68
#, no-wrap
msgid "with-peg-rules rules &rest body"
msgstr ""

#. type: defmac
#: original_texis/peg.texi:72
msgid ""
"Execute @var{body} with @var{rules}, a list of @acronym{PEX}s, in effect.  "
"Within @var{BODY}, parsing is initiated with a call to @code{peg-run}."
msgstr ""

#. type: defun
#: original_texis/peg.texi:74
#, no-wrap
msgid "peg-run peg-matcher &optional failure-function success-function"
msgstr ""

#. type: defun
#: original_texis/peg.texi:78
msgid ""
"This function accepts a single @var{peg-matcher}, which is the result of "
"calling @code{peg} (see below) on a named rule, usually the entry-point of a "
"larger grammar."
msgstr ""

#. type: defun
#: original_texis/peg.texi:88
msgid ""
"At the end of parsing, one of @var{failure-function} or "
"@var{success-function} is called, depending on whether the parsing succeeded "
"or not.  If @var{success-function} is provided, it should be a function that "
"receives as its only argument an anonymous function that runs all the "
"actions collected on the stack during parsing.  By default this anonymous "
"function is simply executed.  If parsing fails, a function provided as "
"@var{failure-function} will be called with a list of @acronym{PEG} "
"expressions that failed during parsing.  By default this list is discarded."
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:92
msgid ""
"The @var{peg-matcher} passed to @code{peg-run} is produced by a call to "
"@code{peg}:"
msgstr ""

#. type: defmac
#: original_texis/peg.texi:93
#, no-wrap
msgid "peg &rest pexs"
msgstr ""

#. type: defmac
#: original_texis/peg.texi:96
msgid ""
"Convert @var{pexs} into a single peg-matcher suitable for passing to "
"@code{peg-run}."
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:100
msgid ""
"The @code{peg-parse} example above expands to a set of calls to these "
"functions, and could be written in full as:"
msgstr ""

#. type: group
#: original_texis/peg.texi:108
#, no-wrap
msgid ""
"(with-peg-rules\n"
"    ((number sign digit (* digit))\n"
"     (sign   (or \"+\" \"-\" \"\"))\n"
"     (digit  [0-9]))\n"
"  (peg-run (peg number)))\n"
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:113
msgid ""
"This approach allows more explicit control over the ``entry-point'' of "
"parsing, and allows the combination of rules from different sources."
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:116
msgid ""
"Individual rules can also be defined using a more @code{defun}-like syntax, "
"using the macro @code{define-peg-rule}:"
msgstr ""

#. type: defmac
#: original_texis/peg.texi:117
#, no-wrap
msgid "define-peg-rule name args &rest pexs"
msgstr ""

#. type: defmac
#: original_texis/peg.texi:120
msgid ""
"Define @var{name} as a PEG rule that accepts @var{args} and matches "
"@var{pexs} at point."
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:123
msgid "For instance:"
msgstr ""

#. type: group
#: original_texis/peg.texi:128
#, no-wrap
msgid ""
"(define-peg-rule digit ()\n"
"  [0-9])\n"
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:133
msgid ""
"Arguments can be supplied to rules by the @code{funcall} PEG rule "
"(@pxref{PEX Definitions})."
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:136
msgid ""
"Another possibility is to define a named set of rules with "
"@code{define-peg-ruleset}:"
msgstr ""

#. type: defmac
#: original_texis/peg.texi:137
#, no-wrap
msgid "define-peg-ruleset name &rest rules"
msgstr ""

#. type: defmac
#: original_texis/peg.texi:139
msgid "Define @var{name} as an identifier for @var{rules}."
msgstr ""

#. type: group
#: original_texis/peg.texi:147
#, no-wrap
msgid ""
"(define-peg-ruleset number-grammar\n"
"        '((number sign digit (* digit))\n"
"          digit  ;; A reference to the definition above.\n"
"          (sign (or \"+\" \"-\" \"\"))))\n"
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:152
msgid ""
"Rules and rulesets defined this way can be referred to by name in later "
"calls to @code{peg-run} or @code{with-peg-rules}:"
msgstr ""

#. type: group
#: original_texis/peg.texi:157
#, no-wrap
msgid ""
"(with-peg-rules number-grammar\n"
"  (peg-run (peg number)))\n"
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:164
msgid ""
"By default, calls to @code{peg-run} or @code{peg-parse} produce no output: "
"parsing simply moves point.  In order to return or otherwise act upon parsed "
"strings, rules can include @dfn{actions}, see @ref{Parsing Actions}."
msgstr ""

#. type: section
#: original_texis/peg.texi:169 original_texis/peg.texi:171
#: original_texis/peg.texi:172
#, no-wrap
msgid "PEX Definitions"
msgstr ""

#. type: menuentry
#: original_texis/peg.texi:169
msgid "The syntax of PEX rules."
msgstr ""

#. type: section
#: original_texis/peg.texi:169 original_texis/peg.texi:279
#: original_texis/peg.texi:280
#, no-wrap
msgid "Parsing Actions"
msgstr ""

#. type: menuentry
#: original_texis/peg.texi:169
msgid "Running actions upon successful parsing."
msgstr ""

#. type: section
#: original_texis/peg.texi:169 original_texis/peg.texi:369
#: original_texis/peg.texi:370
#, no-wrap
msgid "Writing PEG Rules"
msgstr ""

#. type: menuentry
#: original_texis/peg.texi:169
msgid "Tips for writing parsing rules."
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:175
msgid "Parsing expressions can be defined using the following syntax:"
msgstr ""

#. type: item
#: original_texis/peg.texi:177
#, no-wrap
msgid "(and @var{e1} @var{e2}@dots{})"
msgstr ""

#. type: table
#: original_texis/peg.texi:180
msgid ""
"A sequence of @acronym{PEX}s that must all be matched.  The @code{and} form "
"is optional and implicit."
msgstr ""

#. type: item
#: original_texis/peg.texi:181
#, no-wrap
msgid "(or @var{e1} @var{e2}@dots{})"
msgstr ""

#. type: table
#: original_texis/peg.texi:186
msgid ""
"Prioritized choices, meaning that, as in Elisp, the choices are tried in "
"order, and the first successful match is used.  Note that this is distinct "
"from context-free grammars, in which selection between multiple matches is "
"indeterminate."
msgstr ""

#. type: item
#: original_texis/peg.texi:187
#, no-wrap
msgid "(any)"
msgstr ""

#. type: table
#: original_texis/peg.texi:189
msgid "Matches any single character, as the regexp ``.''."
msgstr ""

#. type: var{#1}
#: original_texis/peg.texi:190
#, no-wrap
msgid "string"
msgstr ""

#. type: table
#: original_texis/peg.texi:192
msgid "A literal string."
msgstr ""

#. type: item
#: original_texis/peg.texi:193
#, no-wrap
msgid "(char @var{c})"
msgstr ""

#. type: table
#: original_texis/peg.texi:195
msgid "A single character @var{c}, as an Elisp character literal."
msgstr ""

#. type: item
#: original_texis/peg.texi:196
#, no-wrap
msgid "(* @var{e})"
msgstr ""

#. type: table
#: original_texis/peg.texi:199
msgid ""
"Zero or more instances of expression @var{e}, as the regexp @samp{*}.  "
"Matching is always ``greedy''."
msgstr ""

#. type: item
#: original_texis/peg.texi:200
#, no-wrap
msgid "(+ @var{e})"
msgstr ""

#. type: table
#: original_texis/peg.texi:203
msgid ""
"One or more instances of expression @var{e}, as the regexp @samp{+}.  "
"Matching is always ``greedy''."
msgstr ""

#. type: item
#: original_texis/peg.texi:204
#, no-wrap
msgid "(opt @var{e})"
msgstr ""

#. type: table
#: original_texis/peg.texi:206
msgid "Zero or one instance of expression @var{e}, as the regexp @samp{?}."
msgstr ""

#. type: var{#1}
#: original_texis/peg.texi:207
#, no-wrap
msgid "symbol"
msgstr ""

#. type: table
#: original_texis/peg.texi:209
msgid "A symbol representing a previously-defined PEG rule."
msgstr ""

#. type: item
#: original_texis/peg.texi:210
#, no-wrap
msgid "(range @var{ch1} @var{ch2})"
msgstr ""

#. type: table
#: original_texis/peg.texi:213
msgid ""
"The character range between @var{ch1} and @var{ch2}, as the regexp "
"@samp{[@var{ch1}-@var{ch2}]}."
msgstr ""

#. type: item
#: original_texis/peg.texi:214
#, no-wrap
msgid "[@var{ch1}-@var{ch2} \"+*\" ?x]"
msgstr ""

#. type: table
#: original_texis/peg.texi:217
msgid ""
"A character set, which can include ranges, character literals, or strings of "
"characters."
msgstr ""

#. type: item
#: original_texis/peg.texi:218
#, no-wrap
msgid "[ascii cntrl]"
msgstr ""

#. type: table
#: original_texis/peg.texi:220
msgid "A list of named character classes."
msgstr ""

#. type: item
#: original_texis/peg.texi:221
#, no-wrap
msgid "(syntax-class @var{name})"
msgstr ""

#. type: table
#: original_texis/peg.texi:223
msgid "A single syntax class."
msgstr ""

#. type: item
#: original_texis/peg.texi:224
#, no-wrap
msgid "(funcall @var{e} @var{args}@dots{})"
msgstr ""

#. type: table
#: original_texis/peg.texi:227
msgid ""
"Call @acronym{PEX} @var{e} (previously defined with @code{define-peg-rule}) "
"with arguments @var{args}."
msgstr ""

#. type: item
#: original_texis/peg.texi:228
#, no-wrap
msgid "(null)"
msgstr ""

#. type: table
#: original_texis/peg.texi:230
msgid "The empty string."
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:236
msgid ""
"The following expressions are used as anchors or tests -- they do not move "
"point, but return a boolean value which can be used to constrain matches as "
"a way of controlling the parsing process (@pxref{Writing PEG Rules})."
msgstr ""

#. type: item
#: original_texis/peg.texi:238
#, no-wrap
msgid "(bob)"
msgstr ""

#. type: table
#: original_texis/peg.texi:240
msgid "Beginning of buffer."
msgstr ""

#. type: item
#: original_texis/peg.texi:241
#, no-wrap
msgid "(eob)"
msgstr ""

#. type: table
#: original_texis/peg.texi:243
msgid "End of buffer."
msgstr ""

#. type: item
#: original_texis/peg.texi:244
#, no-wrap
msgid "(bol)"
msgstr ""

#. type: table
#: original_texis/peg.texi:246
msgid "Beginning of line."
msgstr ""

#. type: item
#: original_texis/peg.texi:247
#, no-wrap
msgid "(eol)"
msgstr ""

#. type: table
#: original_texis/peg.texi:249
msgid "End of line."
msgstr ""

#. type: item
#: original_texis/peg.texi:250
#, no-wrap
msgid "(bow)"
msgstr ""

#. type: table
#: original_texis/peg.texi:252
msgid "Beginning of word."
msgstr ""

#. type: item
#: original_texis/peg.texi:253
#, no-wrap
msgid "(eow)"
msgstr ""

#. type: table
#: original_texis/peg.texi:255
msgid "End of word."
msgstr ""

#. type: item
#: original_texis/peg.texi:256
#, no-wrap
msgid "(bos)"
msgstr ""

#. type: table
#: original_texis/peg.texi:258
msgid "Beginning of symbol."
msgstr ""

#. type: item
#: original_texis/peg.texi:259
#, no-wrap
msgid "(eos)"
msgstr ""

#. type: table
#: original_texis/peg.texi:261
msgid "End of symbol."
msgstr ""

#. type: item
#: original_texis/peg.texi:262
#, no-wrap
msgid "(if @var{e})"
msgstr ""

#. type: table
#: original_texis/peg.texi:265
msgid ""
"Returns non-@code{nil} if parsing @acronym{PEX} @var{e} from point succeeds "
"(point is not moved)."
msgstr ""

#. type: item
#: original_texis/peg.texi:266
#, no-wrap
msgid "(not @var{e})"
msgstr ""

#. type: table
#: original_texis/peg.texi:269
msgid ""
"Returns non-@code{nil} if parsing @acronym{PEX} @var{e} from point fails "
"(point is not moved)."
msgstr ""

#. type: item
#: original_texis/peg.texi:270
#, no-wrap
msgid "(guard @var{exp})"
msgstr ""

#. type: table
#: original_texis/peg.texi:272
msgid "Treats the value of the Lisp expression @var{exp} as a boolean."
msgstr ""

#. type: vindex
#: original_texis/peg.texi:274
#, no-wrap
msgid "peg-char-classes"
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:278
msgid ""
"Character-class matching can refer to the classes named in "
"@code{peg-char-classes}, equivalent to character classes in regular "
"expressions (@pxref{Top,, Character Classes,elisp})"
msgstr ""

#. type: cindex
#: original_texis/peg.texi:282
#, no-wrap
msgid "parsing actions"
msgstr ""

#. type: cindex
#: original_texis/peg.texi:283
#, no-wrap
msgid "parsing stack"
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:293
msgid ""
"By default the process of parsing simply moves point in the current buffer, "
"ultimately returning @code{t} if the parsing succeeds, and @code{nil} if it "
"doesn't.  It's also possible to define @dfn{parsing actions} that can run "
"arbitrary Elisp at certain points in the parsed text.  These actions can "
"optionally affect something called the @dfn{parsing stack}, which is a list "
"of values returned by the parsing process.  These actions only run (and only "
"return values) if the parsing process ultimately succeeds; if it fails the "
"action code is not run at all."
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:304
msgid ""
"Actions can be added anywhere in the definition of a rule.  They are "
"distinguished from parsing expressions by an initial backquote (@samp{`}), "
"followed by a parenthetical form that must contain a pair of hyphens "
"(@samp{--}) somewhere within it.  Symbols to the left of the hyphens are "
"bound to values popped from the stack (they are somewhat analogous to the "
"argument list of a lambda form).  Values produced by code to the right of "
"the hyphens are pushed onto the stack (analogous to the return value of the "
"lambda).  For instance, the previous grammar can be augmented with actions "
"to return the parsed number as an actual integer:"
msgstr ""

#. type: group
#: original_texis/peg.texi:315
#, no-wrap
msgid ""
"(with-peg-rules ((number sign digit (* digit\n"
"                                       `(a b -- (+ (* a 10) b)))\n"
"                         `(sign val -- (* sign val)))\n"
"                 (sign (or (and \"+\" `(-- 1))\n"
"                           (and \"-\" `(-- -1))\n"
"                           (and \"\"  `(-- 1))))\n"
"                 (digit [0-9] `(-- (- (char-before) ?0))))\n"
"  (peg-run (peg number)))\n"
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:324
msgid ""
"There must be values on the stack before they can be popped and returned -- "
"if there aren't enough stack values to bind to an action's left-hand terms, "
"they will be bound to @code{nil}.  An action with only right-hand terms will "
"push values to the stack; an action with only left-hand terms will consume "
"(and discard) values from the stack.  At the end of parsing, stack values "
"are returned as a flat list."
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:327
msgid ""
"To return the string matched by a @acronym{PEX} (instead of simply moving "
"point over it), a grammar can use a rule like this:"
msgstr ""

#. type: group
#: original_texis/peg.texi:334
#, no-wrap
msgid ""
"(one-word\n"
"  `(-- (point))\n"
"  (+ [word])\n"
"  `(start -- (buffer-substring start (point))))\n"
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:345
msgid ""
"The first action above pushes the initial value of point to the stack.  The "
"intervening @acronym{PEX} moves point over the next word.  The second action "
"pops the previous value from the stack (binding it to the variable "
"@code{start}), then uses that value to extract a substring from the buffer "
"and push it to the stack.  This pattern is so common that @acronym{PEG} "
"provides a shorthand function that does exactly the above, along with a few "
"other shorthands for common scenarios:"
msgstr ""

#. type: findex
#: original_texis/peg.texi:347
#, no-wrap
msgid "substring (a PEG shorthand)"
msgstr ""

#. type: item
#: original_texis/peg.texi:348
#, no-wrap
msgid "(substring @var{e})"
msgstr ""

#. type: table
#: original_texis/peg.texi:350
msgid "Match @acronym{PEX} @var{e} and push the matched string onto the stack."
msgstr ""

#. type: findex
#: original_texis/peg.texi:351
#, no-wrap
msgid "region (a PEG shorthand)"
msgstr ""

#. type: item
#: original_texis/peg.texi:352
#, no-wrap
msgid "(region @var{e})"
msgstr ""

#. type: table
#: original_texis/peg.texi:355
msgid ""
"Match @var{e} and push the start and end positions of the matched region "
"onto the stack."
msgstr ""

#. type: findex
#: original_texis/peg.texi:356
#, no-wrap
msgid "replace (a PEG shorthand)"
msgstr ""

#. type: item
#: original_texis/peg.texi:357
#, no-wrap
msgid "(replace @var{e} @var{replacement})"
msgstr ""

#. type: table
#: original_texis/peg.texi:360
msgid ""
"Match @var{e} and replaced the matched region with the string "
"@var{replacement}."
msgstr ""

#. type: findex
#: original_texis/peg.texi:361
#, no-wrap
msgid "list (a PEG shorthand)"
msgstr ""

#. type: item
#: original_texis/peg.texi:362
#, no-wrap
msgid "(list @var{e})"
msgstr ""

#. type: table
#: original_texis/peg.texi:367
msgid ""
"Match @var{e}, collect all values produced by @var{e} (and its "
"sub-expressions) into a list, and push that list onto the stack.  Stack "
"values are typically returned as a flat list; this is a way of ``grouping'' "
"values together."
msgstr ""

#. type: cindex
#: original_texis/peg.texi:371
#, no-wrap
msgid "PEG rules, pitfalls"
msgstr ""

#. type: cindex
#: original_texis/peg.texi:372
#, no-wrap
msgid "Parsing Expression Grammar, pitfalls in rules"
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:379
msgid ""
"Something to be aware of when writing PEG rules is that they are greedy.  "
"Rules which can consume a variable amount of text will always consume the "
"maximum amount possible, even if that causes a rule that might otherwise "
"have matched to fail later on -- there is no backtracking.  For instance, "
"this rule will never succeed:"
msgstr ""

#. type: example
#: original_texis/peg.texi:382
#, no-wrap
msgid "(forest (+ \"tree\" (* [blank])) \"tree\" (eol))\n"
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:388
msgid ""
"The @acronym{PEX} @w{@code{(+ \"tree\" (* [blank]))}} will consume all the "
"repetitions of the word @samp{tree}, leaving none to match the final "
"@samp{tree}."
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:392
msgid ""
"In these situations, the desired result can be obtained by using predicates "
"and guards -- namely the @code{not}, @code{if} and @code{guard} expressions "
"-- to constrain behavior.  For instance:"
msgstr ""

#. type: example
#: original_texis/peg.texi:395
#, no-wrap
msgid "(forest (+ \"tree\" (* [blank])) (not (eol)) \"tree\" (eol))\n"
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:403
msgid ""
"The @code{if} and @code{not} operators accept a parsing expression and "
"interpret it as a boolean, without moving point.  The contents of a "
"@code{guard} operator are evaluated as regular Lisp (not a @acronym{PEX}) "
"and should return a boolean value.  A @code{nil} value causes the match to "
"fail."
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:407
msgid ""
"Another potentially unexpected behavior is that parsing will move point as "
"far as possible, even if the parsing ultimately fails.  This rule:"
msgstr ""

#. type: example
#: original_texis/peg.texi:410
#, no-wrap
msgid "(end-game \"game\" (eob))\n"
msgstr ""

#. type: Plain text
#: original_texis/peg.texi:416
msgid ""
"when run in a buffer containing the text ``game over'' after point, will "
"move point to just after ``game'' then halt parsing, returning @code{nil}.  "
"Successful parsing will always return @code{t}, or the contexts of the "
"parsing stack."
msgstr ""
