# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Emacs 26.1\n"
"POT-Creation-Date: 2020-03-08 09:41+0900\n"
"PO-Revision-Date: 2020-03-08 17:34+0900\n"
"Last-Translator: Takeshi Ayanokoji <takeshi.ayanokoji@gmail.com>\n"
"Language-Team: Japanese <takeshi.ayanokoji@gmail.com>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: original_texis/intro.texi:6 original_texis/intro.texi:7
#, no-wrap
msgid "Introduction"
msgstr "Introduction"

#. type: Plain text
#: original_texis/intro.texi:15
msgid "Most of the GNU Emacs text editor is written in the programming language called Emacs Lisp.  You can write new code in Emacs Lisp and install it as an extension to the editor.  However, Emacs Lisp is more than a mere extension language; it is a full computer programming language in its own right.  You can use it as you would any other programming language."
msgstr "GNU Emacsテキストエディターのほとんどの部分は、Emacs Lispと呼ばれるプログラミング言語で記述されています。新しいコードをEmacs Lispで記述して、このエディターの拡張としてインストールできます。しかしEmacs Lispは、単なる拡張言語を越える言語であり、それ自体で完全なコンピュータープログラミング言語です。他のプログラミング言語で行なうすべてのことに、この言語を使用できます。"

#. type: Plain text
#: original_texis/intro.texi:22
msgid "Because Emacs Lisp is designed for use in an editor, it has special features for scanning and parsing text as well as features for handling files, buffers, displays, subprocesses, and so on.  Emacs Lisp is closely integrated with the editing facilities; thus, editing commands are functions that can also conveniently be called from Lisp programs, and parameters for customization are ordinary Lisp variables."
msgstr "Emacs Lispはエディターの中で使用するようにデザインされているので、テキストのスキャンやパースのための特別な機能をもち、同様にファイル、バッファー、ディスプレー、サブプロセスを処理する機能をもちます。Emacs Lispは編集機能と密に統合されています。つまり編集コマンドはLispプログラムから簡単に呼び出せる関数で、カスタマイズのためのパラメーターは普通のLisp変数です。"

#. type: Plain text
#: original_texis/intro.texi:29
msgid "This manual attempts to be a full description of Emacs Lisp.  For a beginner's introduction to Emacs Lisp, see @cite{An Introduction to Emacs Lisp Programming}, by Bob Chassell, also published by the Free Software Foundation.  This manual presumes considerable familiarity with the use of Emacs for editing; see @cite{The GNU Emacs Manual} for this basic information."
msgstr "このマニュアルはEmacs Lispの完全な記述を試みます。初心者のためのEmacs Lispのイントロダクションは、Free Software Foundationからも出版されている、Bob Chassellの@cite{An Introduction to Emacs Lisp Programming}を参照してください。このマニュアルは、Emacsを使用した編集に熟知していることを前提としています。これの基本的な情報については、@cite{The GNU Emacs Manual}を参照してください。"

#. type: Plain text
#: original_texis/intro.texi:34
msgid "Generally speaking, the earlier chapters describe features of Emacs Lisp that have counterparts in many programming languages, and later chapters describe features that are peculiar to Emacs Lisp or relate specifically to editing."
msgstr "おおまかに言うと、前の方のチャプターでは多くのプログラミング言語の機能にたいして、Emacs Lispでの対応する機能を説明し、後の方のチャプターではEmacs Lispに特異な機能や、編集に特化した関連する機能を説明します。"

#. type: Plain text
#: original_texis/intro.texi:36
msgid "This is"
msgstr "これは"

#. type: iftex
#: original_texis/intro.texi:38
msgid "edition @value{VERSION} of"
msgstr "エディション@value{VERSION}"

#. type: Plain text
#: original_texis/intro.texi:41
msgid "the @cite{GNU Emacs Lisp Reference Manual}, corresponding to Emacs version @value{EMACSVER}."
msgstr "Emacs @value{EMACSVER}に対応した@cite{GNU Emacs Lisp Reference Manual}です。"

#. type: section
#: original_texis/intro.texi:48 original_texis/intro.texi:50
#: original_texis/intro.texi:51
#, no-wrap
msgid "Caveats"
msgstr "Caveats"

#. type: menuentry
#: original_texis/intro.texi:48
msgid "Flaws and a request for help."
msgstr "不備な点と、助けを求める方法。"

#. type: section
#: original_texis/intro.texi:48 original_texis/intro.texi:92
#: original_texis/intro.texi:93
#, no-wrap
msgid "Lisp History"
msgstr "Lisp History"

#. type: menuentry
#: original_texis/intro.texi:48
msgid "Emacs Lisp is descended from Maclisp."
msgstr "Maclispを後継するEmacs Lisp。"

#. type: section
#: original_texis/intro.texi:48 original_texis/intro.texi:128
#: original_texis/intro.texi:129
#, no-wrap
msgid "Conventions"
msgstr "Conventions"

#. type: menuentry
#: original_texis/intro.texi:48
msgid "How the manual is formatted."
msgstr "このマニュアルのフォーマット方法。"

#. type: node
#: original_texis/intro.texi:48 original_texis/intro.texi:470
#, no-wrap
msgid "Version Info"
msgstr "Version Info"

#. type: menuentry
#: original_texis/intro.texi:48
msgid "Which Emacs version is running?"
msgstr "実行中のEmacsのバージョンは?"

#. type: section
#: original_texis/intro.texi:48 original_texis/intro.texi:533
#: original_texis/intro.texi:534
#, no-wrap
msgid "Acknowledgments"
msgstr "Acknowledgments"

#. type: menuentry
#: original_texis/intro.texi:48
msgid "The authors, editors, and sponsors of this manual."
msgstr "このマニュアルの著者、編集者、スポンサー。"

#. type: cindex
#: original_texis/intro.texi:52
#, no-wrap
msgid "bugs in this manual"
msgstr "bugs in this manual"

#. type: Plain text
#: original_texis/intro.texi:60
msgid "This manual has gone through numerous drafts.  It is nearly complete but not flawless.  There are a few topics that are not covered, either because we consider them secondary (such as most of the individual modes) or because they are yet to be written.  Because we are not able to deal with them completely, we have left out several parts intentionally."
msgstr "このマニュアルは幾多のドラフトを経てきました。ほとんど完璧ではありますが、不備がないとも言えません。(ほとんどの特定のモードのように)それらが副次的であるとか、まだ記述されていないという理由により、カバーされていないトピックもあります。わたしたちがそれらを完璧に扱うことはできないので、いくつかの部分は意図的に省略しました。"

#. type: Plain text
#: original_texis/intro.texi:67
msgid "The manual should be fully correct in what it does cover, and it is therefore open to criticism on anything it says---from specific examples and descriptive text, to the ordering of chapters and sections.  If something is confusing, or you find that you have to look at the sources or experiment to learn something not covered in the manual, then perhaps the manual should be fixed.  Please let us know."
msgstr "このマニュアルは、それがカバーしている事柄については完全に正しくあるべきあり、故に特定の説明テキスト、チャプターやセクションの順番にたいしての批判にオープンであるべきです。判りにくかったり、このマニュアルでカバーされていない何かを学ぶためにソースを見たり実地から学ぶ必要があるなら、このマニュアルはおそらく訂正されるべきなのかもしれません。どうかわたしたちにそれを教えてください。"

#. type: iftex
#: original_texis/intro.texi:77
msgid "As you use this manual, we ask that you mark pages with corrections so you can later look them up and send them to us.  If you think of a simple, real-life example for a function or group of functions, please make an effort to write it up and send it in.  Please reference any comments to the chapter name, section name, and function name, as appropriate, since page numbers and chapter and section numbers will change and we may have trouble finding the text you are talking about.  Also state the version of the edition you are criticizing."
msgstr "このマニュアルを使用するときは、訂正のためにページにマークしてください。そうすれば後でそれを探して、わたしたちに送ることができます。関数や関数グループの単純で現実的な例を思いついたときは、ぜひそれを記述して送ってください。それが妥当ならチャプター名、セクション名、関数名への参照をコメントしてください。なぜならページ番号やチャプター番号、セクション番号は変更されるので、あなたが言及しているテキストを探すのに問題が生じるかもしれないからです。あなたが訂正を求めるエディションのバージョンも示してください。"

#. type: ifnottex
#: original_texis/intro.texi:86
msgid "As you use this manual, we ask that you send corrections as soon as you find them.  If you think of a simple, real life example for a function or group of functions, please make an effort to write it up and send it in.  Please reference any comments to the node name and function or variable name, as appropriate.  Also state the number of the edition you are criticizing."
msgstr "このマニュアルを使用するときは、間違いを見つけたらすぐに訂正を送ってください。関数または関数グループの単純な現実例を考えたときは、ぜひそれを記述して送ってください。それが妥当ならコメントでノード名と関数名や変数名を参照してください。あなたが訂正を求めるエディションのバージョンも示してください。"

#. type: cindex
#: original_texis/intro.texi:88
#, no-wrap
msgid "bugs"
msgstr "bugs"

#. type: cindex
#: original_texis/intro.texi:89
#, no-wrap
msgid "suggestions"
msgstr "suggestions"

#. type: Plain text
#: original_texis/intro.texi:91
msgid "Please send comments and corrections using @kbd{M-x report-emacs-bug}."
msgstr "@kbd{M-x report-emacs-bug}を使用して、コメントや訂正を送ってください。"

#. type: cindex
#: original_texis/intro.texi:94
#, no-wrap
msgid "Lisp history"
msgstr "Lisp history"

#. type: Plain text
#: original_texis/intro.texi:100
msgid "Lisp (LISt Processing language) was first developed in the late 1950s at the Massachusetts Institute of Technology for research in artificial intelligence.  The great power of the Lisp language makes it ideal for other purposes as well, such as writing editing commands."
msgstr "Lisp(LISt Processing language: リスト処理言語)は、MIT(Massachusetts Institute of Technology: マサチューセッツ工科大学)で、AI(artificial intelligence: 人工知能)の研究のために、1950年代末に最初に開発されました。Lisp言語の強力なパワーは、編集コマンドの記述のような、他の目的にも適っています。"

#. type: cindex
#: original_texis/intro.texi:101
#, no-wrap
msgid "Maclisp"
msgstr "Maclisp"

#. type: cindex
#: original_texis/intro.texi:102
#, no-wrap
msgid "Common Lisp"
msgstr "Common Lisp"

#. type: Plain text
#: original_texis/intro.texi:110
msgid "Dozens of Lisp implementations have been built over the years, each with its own idiosyncrasies.  Many of them were inspired by Maclisp, which was written in the 1960s at MIT's Project MAC@.  Eventually the implementers of the descendants of Maclisp came together and developed a standard for Lisp systems, called Common Lisp.  In the meantime, Gerry Sussman and Guy Steele at MIT developed a simplified but very powerful dialect of Lisp, called Scheme."
msgstr "長年の間に何ダースものLisp実装が構築されてきて、それらのそれぞれに特異な点があります。これらの多くは、1960年代にMITのProject MACで記述された、Maclispに影響を受けています。最終的に、Maclisp後裔の実装者は共同して、Common Lispと呼ばれる標準のLispシステムを開発しました。その間にMITのGerry SussmanとGuy Steeleにより、簡潔ながらとても強力なLisp方言の、Schemeが開発されました。"

#. type: Plain text
#: original_texis/intro.texi:119
msgid "GNU Emacs Lisp is largely inspired by Maclisp, and a little by Common Lisp.  If you know Common Lisp, you will notice many similarities.  However, many features of Common Lisp have been omitted or simplified in order to reduce the memory requirements of GNU Emacs.  Sometimes the simplifications are so drastic that a Common Lisp user might be very confused.  We will occasionally point out how GNU Emacs Lisp differs from Common Lisp.  If you don't know Common Lisp, don't worry about it; this manual is self-contained."
msgstr "GNU Emacs LispはMaclispから多く、Common Lispから少し影響を受けています。Common Lispを知っている場合、多くの類似点に気づくでしょう。しかしCommon Lispの多くの機能は、GNU Emacsが要求するメモリー量を削減するために、省略または単純化されています。ときには劇的に単純化されているために、Common Lispユーザーは混乱するかもしれません。わたしたちは時折GNU Emacs LispがCommon Lispと異なるか示すでしょう。Common Lispを知らない場合、それについて心配する必要はありません。このマニュアルは、それ自体で自己完結しています。"

#. type: pindex
#: original_texis/intro.texi:120
#, no-wrap
msgid "cl"
msgstr "cl"

#. type: Plain text
#: original_texis/intro.texi:123
msgid "A certain amount of Common Lisp emulation is available via the @file{cl-lib} library.  @xref{Top,, Overview, cl, Common Lisp Extensions}."
msgstr "@file{cl-lib}ライブラリーを通じて、Common Lispをかなりエミュレートできます。@ref{Top,, Overview, cl, Common Lisp Extensions}を参照してください。"

#. type: Plain text
#: original_texis/intro.texi:127
msgid "Emacs Lisp is not at all influenced by Scheme; but the GNU project has an implementation of Scheme, called Guile.  We use it in all new GNU software that calls for extensibility."
msgstr "Emacs LispはSchemeの影響は受けていません。しかしGNUプロジェクトにはGuileと呼ばれるScheme実装があります。拡張が必要な新しいGNUソフトウェアーでは、Guileを使用します。"

#. type: Plain text
#: original_texis/intro.texi:133
msgid "This section explains the notational conventions that are used in this manual.  You may want to skip this section and refer back to it later."
msgstr "このセクションでは、このマニュアルで使用する表記規約を説明します。あなたはこのセクションをスキップして、後から参照したいと思うかもしれません。"

#. type: subsection
#: original_texis/intro.texi:142 original_texis/intro.texi:144
#: original_texis/intro.texi:145
#, no-wrap
msgid "Some Terms"
msgstr "Some Terms"

#. type: menuentry
#: original_texis/intro.texi:142
msgid "Explanation of terms we use in this manual."
msgstr "このマニュアルで使用する用語の説明。"

#. type: node
#: original_texis/intro.texi:142 original_texis/intro.texi:160
#, no-wrap
msgid "nil and t"
msgstr "nil and t"

#. type: menuentry
#: original_texis/intro.texi:142
msgid "How the symbols @code{nil} and @code{t} are used."
msgstr "シンボル@code{nil}と@code{t}の使用方法。"

#. type: subsection
#: original_texis/intro.texi:142 original_texis/intro.texi:209
#: original_texis/intro.texi:210
#, no-wrap
msgid "Evaluation Notation"
msgstr "Evaluation Notation"

#. type: menuentry
#: original_texis/intro.texi:142
msgid "The format we use for examples of evaluation."
msgstr "評価の例で使用するフォーマット。"

#. type: subsection
#: original_texis/intro.texi:142 original_texis/intro.texi:246
#: original_texis/intro.texi:247
#, no-wrap
msgid "Printing Notation"
msgstr "Printing Notation"

#. type: menuentry
#: original_texis/intro.texi:142
msgid "The format we use when examples print text."
msgstr "テキストのプリント例で使用するフォーマット。"

#. type: subsection
#: original_texis/intro.texi:142 original_texis/intro.texi:271
#: original_texis/intro.texi:272
#, no-wrap
msgid "Error Messages"
msgstr "Error Messages"

#. type: menuentry
#: original_texis/intro.texi:142
msgid "The format we use for examples of errors."
msgstr "エラー例で使用するフォーマット。"

#. type: subsection
#: original_texis/intro.texi:142 original_texis/intro.texi:285
#: original_texis/intro.texi:286
#, no-wrap
msgid "Buffer Text Notation"
msgstr "Buffer Text Notation"

#. type: menuentry
#: original_texis/intro.texi:142
msgid "The format we use for buffer contents in examples."
msgstr "例のバッファー内容で使用するフォーマット。"

#. type: subsection
#: original_texis/intro.texi:142 original_texis/intro.texi:309
#: original_texis/intro.texi:310
#, no-wrap
msgid "Format of Descriptions"
msgstr "Format of Descriptions"

#. type: menuentry
#: original_texis/intro.texi:142
msgid "Notation for describing functions, variables, etc."
msgstr "関数や変数などの説明にたいする表記。"

#. type: Plain text
#: original_texis/intro.texi:154
msgid "Throughout this manual, the phrases ``the Lisp reader'' and ``the Lisp printer'' refer to those routines in Lisp that convert textual representations of Lisp objects into actual Lisp objects, and vice versa.  @xref{Printed Representation}, for more details.  You, the person reading this manual, are thought of as the programmer and are addressed as ``you''.  The user is the person who uses Lisp programs, including those you write."
msgstr "このマニュアルでは、``Lispリーダー''および``Lispプリンター''という用語で、Lispのテキスト表現を実際のLispオブジェクトに変換したり、その逆を行なうLispルーチンを参照します。詳細については、@ref{Printed Representation}を参照してください。あなた、つまりこのマニュアルを読んでいる人のことはプログラマーと考えて``あなた''と呼びます。``ユーザー''とは、あなたの記述したものも含めて、Lispプログラムを使用する人を指します。"

#. type: cindex
#: original_texis/intro.texi:155
#, no-wrap
msgid "typographic conventions"
msgstr "typographic conventions"

#. type: Plain text
#: original_texis/intro.texi:159
msgid "Examples of Lisp code are formatted like this: @code{(list 1 2 3)}.  Names that represent metasyntactic variables, or arguments to a function being described, are formatted like this: @var{first-number}."
msgstr "Lispコードの例は、@code{(list 1 2 3)}のようなフォーマットです。メタ構文変数(metasyntactic variables)を表す名前や、説明されている関数の引数名前は、@var{first-number}のようにフォーマットされています。"

#. type: subsection
#: original_texis/intro.texi:161
#, no-wrap
msgid "@code{nil} and @code{t}"
msgstr "@code{nil} and @code{t}"

#. type: cindex
#: original_texis/intro.texi:162
#, no-wrap
msgid "truth value"
msgstr "truth value"

#. type: cindex
#: original_texis/intro.texi:163
#, no-wrap
msgid "boolean"
msgstr "boolean"

#. type: code{#1}
#: original_texis/intro.texi:165
#, no-wrap
msgid "nil"
msgstr "nil"

#. type: cindex
#: original_texis/intro.texi:166
#, no-wrap
msgid "false"
msgstr "false"

#. type: Plain text
#: original_texis/intro.texi:171
msgid "In Emacs Lisp, the symbol @code{nil} has three separate meanings: it is a symbol with the name @samp{nil}; it is the logical truth value @var{false}; and it is the empty list---the list of zero elements.  When used as a variable, @code{nil} always has the value @code{nil}."
msgstr "Emacs Lispでは、シンボル@code{nil}には3つの異なる意味があります。1つ目は@samp{nil}という名前のシンボル、2つ目は論理値の@var{false}、3つ目は空リスト --- つまり要素が0のリストです。変数として使用した場合、@code{nil}は常に値@code{nil}をもちます。"

#. type: Plain text
#: original_texis/intro.texi:178
msgid "As far as the Lisp reader is concerned, @samp{()} and @samp{nil} are identical: they stand for the same object, the symbol @code{nil}.  The different ways of writing the symbol are intended entirely for human readers.  After the Lisp reader has read either @samp{()} or @samp{nil}, there is no way to determine which representation was actually written by the programmer."
msgstr "Lispリーダーに関する限り、@samp{()}と@samp{nil}は同一です。これらは同じオブジェクト、つまりシンボル@code{nil}を意味します。このシンボルを異なる方法で記述するのは、完全に人間の読み手を意図したものです。Lispリーダーが@samp{()}か@samp{nil}のどちらかを読み取った後は、プログラマーが実際にどちらの表現で記述したかを判断する方法はありません。"

#. type: Plain text
#: original_texis/intro.texi:183
msgid "In this manual, we write @code{()} when we wish to emphasize that it means the empty list, and we write @code{nil} when we wish to emphasize that it means the truth value @var{false}.  That is a good convention to use in Lisp programs also."
msgstr "このマニュアルでは、空リストを意味することを強調したいときは@code{()}と記述し、論理値の@var{false}を意味することを強調したいときは@code{nil}と記述します。この慣習はLispプログラムで使用してもよいでしょう。"

#. type: example
#: original_texis/intro.texi:187
#, no-wrap
msgid ""
"(cons 'foo ())                ; @r{Emphasize the empty list}\n"
"(setq foo-flag nil)           ; @r{Emphasize the truth value @var{false}}\n"
msgstr ""
"(cons 'foo ())                ; @r{空リストを強調}\n"
"(setq foo-flag nil)           ; @r{論理値の@var{false}を強調}\n"

#. type: code{#1}
#: original_texis/intro.texi:189
#, no-wrap
msgid "t"
msgstr "t"

#. type: cindex
#: original_texis/intro.texi:190
#, no-wrap
msgid "true"
msgstr "true"

#. type: Plain text
#: original_texis/intro.texi:197
msgid "In contexts where a truth value is expected, any non-@code{nil} value is considered to be @var{true}.  However, @code{t} is the preferred way to represent the truth value @var{true}.  When you need to choose a value that represents @var{true}, and there is no other basis for choosing, use @code{t}.  The symbol @code{t} always has the value @code{t}."
msgstr "論理値が期待されているコンテキストでは、非@code{nil}は@var{true}と判断されます。しかし論理値の@var{true}を表す好ましい方法は@code{t}です。@var{true}を表す値を選択する必要があり、他に選択の根拠がない場合は@code{t}を使用してください。シンボル@code{t}は、常に値@code{t}をもちます。"

#. type: Plain text
#: original_texis/intro.texi:203
msgid "In Emacs Lisp, @code{nil} and @code{t} are special symbols that always evaluate to themselves.  This is so that you do not need to quote them to use them as constants in a program.  An attempt to change their values results in a @code{setting-constant} error.  @xref{Constant Variables}."
msgstr "Emacs Lispでの@code{nil}と@code{t}は、常に自分自身を評価する特別なシンボルです。そのためプログラムでこれらを定数として使用する場合、クォートする必要はありません。これらの値の変更を試みると、結果は@code{setting-constant}エラーとなります。@ref{Constant Variables}を参照してください。"

#. type: defun
#: original_texis/intro.texi:204
#, no-wrap
msgid "booleanp object"
msgstr "booleanp object"

#. type: defun
#: original_texis/intro.texi:207
msgid "Return non-@code{nil} if @var{object} is one of the two canonical boolean values: @code{t} or @code{nil}."
msgstr "@var{object}が2つの正規のブーリーン値(@code{t}か@code{nil})のいずれかなら、非@code{nil}をリターンする。"

#. type: cindex
#: original_texis/intro.texi:211
#, no-wrap
msgid "evaluation notation"
msgstr "evaluation notation"

#. type: cindex
#: original_texis/intro.texi:212
#, no-wrap
msgid "documentation notation"
msgstr "documentation notation"

#. type: cindex
#: original_texis/intro.texi:213
#, no-wrap
msgid "notation"
msgstr "notation"

#. type: Plain text
#: original_texis/intro.texi:218
msgid "A Lisp expression that you can evaluate is called a @dfn{form}.  Evaluating a form always produces a result, which is a Lisp object.  In the examples in this manual, this is indicated with @samp{@result{}}:"
msgstr "評価できるLisp式のことを@dfn{フォーム(form)}と呼びます。フォームの評価により、これは結果として常にLispオブジェクトを生成します。このマニュアルの例では、これを@samp{@result{}}で表します:"

#. type: example
#: original_texis/intro.texi:222
#, no-wrap
msgid ""
"(car '(1 2))\n"
"     @result{} 1\n"
msgstr ""
"(car '(1 2))\n"
"     @result{} 1\n"

#. type: Plain text
#: original_texis/intro.texi:226
msgid "You can read this as ``@code{(car '(1 2))} evaluates to 1''."
msgstr "これは``@code{(car '(1 2))}を評価すると、1になる''と読むことができます。"

#. type: Plain text
#: original_texis/intro.texi:231
msgid "When a form is a macro call, it expands into a new form for Lisp to evaluate.  We show the result of the expansion with @samp{@expansion{}}.  We may or may not show the result of the evaluation of the expanded form."
msgstr "フォームがマクロ呼び出しの場合、それは評価されるための新たなLispフォームに展開されます。展開された結果は@samp{@expansion{}}で表します。わたしたちは展開されたフォームの評価し結果を示すこともあれば、示さない場合もあります。"

#. type: example
#: original_texis/intro.texi:236
#, no-wrap
msgid ""
"(third '(a b c))\n"
"     @expansion{} (car (cdr (cdr '(a b c))))\n"
"     @result{} c\n"
msgstr ""
"(third '(a b c))\n"
"     @expansion{} (car (cdr (cdr '(a b c))))\n"
"     @result{} c\n"

#. type: Plain text
#: original_texis/intro.texi:241
msgid "To help describe one form, we sometimes show another form that produces identical results.  The exact equivalence of two forms is indicated with @samp{@equiv{}}."
msgstr "1つのフォームを説明するために、同じ結果を生成する別のフォームを示すこともあります。完全に等価な2つのフォームは、@samp{@equiv{}}で表します。"

#. type: example
#: original_texis/intro.texi:244
#, no-wrap
msgid "(make-sparse-keymap) @equiv{} (list 'keymap)\n"
msgstr "(make-sparse-keymap) @equiv{} (list 'keymap)\n"

#. type: cindex
#: original_texis/intro.texi:248
#, no-wrap
msgid "printing notation"
msgstr "printing notation"

#. type: Plain text
#: original_texis/intro.texi:256
msgid "Many of the examples in this manual print text when they are evaluated.  If you execute example code in a Lisp Interaction buffer (such as the buffer @file{*scratch*}), the printed text is inserted into the buffer.  If you execute the example by other means (such as by evaluating the function @code{eval-region}), the printed text is displayed in the echo area."
msgstr "このマニュアルの例の多くは、それらが評価されるときにテキストをプリントします。(@file{*scratch*}バッファーのような)Lisp Interactionバッファーでコード例を実行する場合、プリントされるテキストはそのバッファーに挿入されます。(関数@code{eval-region}での評価のように)他の方法でコード例を実行する場合、プリントされるテキストはエコーエリアに表示されます。"

#. type: Plain text
#: original_texis/intro.texi:261
msgid "Examples in this manual indicate printed text with @samp{@print{}}, irrespective of where that text goes.  The value returned by evaluating the form follows on a separate line with @samp{@result{}}."
msgstr "このマニュアルの例はプリントされるテキストがどこに出力されるかに関わらず、それを@samp{@print{}}で表します。フォームを評価することにより戻される値は、@samp{@result{}}とともに後続の行で示します。"

#. type: group
#: original_texis/intro.texi:268
#, no-wrap
msgid ""
"(progn (prin1 'foo) (princ \"\\n\") (prin1 'bar))\n"
"     @print{} foo\n"
"     @print{} bar\n"
"     @result{} bar\n"
msgstr ""
"(progn (prin1 'foo) (princ \"\\n\") (prin1 'bar))\n"
"     @print{} foo\n"
"     @print{} bar\n"
"     @result{} bar\n"

#. type: cindex
#: original_texis/intro.texi:273
#, no-wrap
msgid "error message notation"
msgstr "error message notation"

#. type: Plain text
#: original_texis/intro.texi:279
msgid "Some examples signal errors.  This normally displays an error message in the echo area.  We show the error message on a line starting with @samp{@error{}}.  Note that @samp{@error{}} itself does not appear in the echo area."
msgstr "エラーをシグナルする例もあります。これは通常、エコーエリアにエラーメッセージを表示します。エラーメッセージの行は@samp{@error{}}で始まります。@samp{@error{}}自体は、エコーエリアに表示されないことに注意してください。"

#. type: example
#: original_texis/intro.texi:283
#, no-wrap
msgid ""
"(+ 23 'x)\n"
"@error{} Wrong type argument: number-or-marker-p, x\n"
msgstr ""
"(+ 23 'x)\n"
"@error{} Wrong type argument: number-or-marker-p, x\n"

#. type: cindex
#: original_texis/intro.texi:287
#, no-wrap
msgid "buffer text notation"
msgstr "buffer text notation"

#. type: Plain text
#: original_texis/intro.texi:296
msgid "Some examples describe modifications to the contents of a buffer, by showing the before and after versions of the text.  These examples show the contents of the buffer in question between two lines of dashes containing the buffer name.  In addition, @samp{@point{}} indicates the location of point.  (The symbol for point, of course, is not part of the text in the buffer; it indicates the place @emph{between} two characters where point is currently located.)"
msgstr "バッファー内容の変更を説明する例もあます。それらの例では、そのテキストのbefore(以前)とafter(以後)のバージョンを示します。それらの例では、バッファー内容の該当する部分を、ダッシュを用いた2行の破線(バッファー名を含む)で示します。さらに、@samp{@point{}}はポイントの位置を表します(もちろんポイントのシンボルはバッファーのテキストの一部ではなく、ポイントが現在配されている2つの文字の@emph{間}の位置を表す)。"

#. type: example
#: original_texis/intro.texi:301
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the @point{}contents of foo.\n"
"---------- Buffer: foo ----------\n"
"\n"
msgstr ""
"---------- Buffer: foo ----------\n"
"This is the @point{}contents of foo.\n"
"---------- Buffer: foo ----------\n"
"\n"

#. type: example
#: original_texis/intro.texi:307
#, no-wrap
msgid ""
"(insert \"changed \")\n"
"     @result{} nil\n"
"---------- Buffer: foo ----------\n"
"This is the changed @point{}contents of foo.\n"
"---------- Buffer: foo ----------\n"
msgstr ""
"(insert \"changed \")\n"
"     @result{} nil\n"
"---------- Buffer: foo ----------\n"
"This is the changed @point{}contents of foo.\n"
"---------- Buffer: foo ----------\n"

#. type: cindex
#: original_texis/intro.texi:311
#, no-wrap
msgid "description format"
msgstr "description format"

#. type: Plain text
#: original_texis/intro.texi:317
msgid "Functions, variables, macros, commands, user options, and special forms are described in this manual in a uniform format.  The first line of a description contains the name of the item followed by its arguments, if any."
msgstr "このマニュアルでは関数(function)、変数(variable)、コマンド(command)、ユーザーオプション(user option)、スペシャルフォーム(special form)を、統一されたフォーマットで記述します。記述の最初の行には、そのアイテムの名前と、もしあれば引数(argument)が続きます。"

#. type: ifnottex
#: original_texis/intro.texi:320
msgid "The category---function, variable, or whatever---appears at the beginning of the line."
msgstr "そのアイテムの属するカテゴリー(function、variableなど)は、行の先頭に表示します。"

#. type: iftex
#: original_texis/intro.texi:324
msgid "The category---function, variable, or whatever---is printed next to the right margin."
msgstr "そのアイテムの属するカテゴリー(function、variableなど)は、ページの右マージンの隣にプリントされます。"

#. type: Plain text
#: original_texis/intro.texi:326
msgid "The description follows on succeeding lines, sometimes with examples."
msgstr "それ以降の行は説明行で、例を含む場合もあります。"

#. type: subsubsection
#: original_texis/intro.texi:333 original_texis/intro.texi:335
#: original_texis/intro.texi:336
#, no-wrap
msgid "A Sample Function Description"
msgstr "A Sample Function Description"

#. type: menuentry
#: original_texis/intro.texi:333
msgid "A description of an imaginary function, @code{foo}."
msgstr "架空の関数@code{foo}にたいする記述例。"

#. type: subsubsection
#: original_texis/intro.texi:333 original_texis/intro.texi:444
#: original_texis/intro.texi:445
#, no-wrap
msgid "A Sample Variable Description"
msgstr "A Sample Variable Description"

#. type: menuentry
#: original_texis/intro.texi:333
msgid "A description of an imaginary variable, @code{electric-future-map}."
msgstr "架空の変数@code{electric-future-map}にたいする記述例。"

#. type: cindex
#: original_texis/intro.texi:337
#, no-wrap
msgid "function descriptions"
msgstr "function descriptions"

#. type: cindex
#: original_texis/intro.texi:338
#, no-wrap
msgid "command descriptions"
msgstr "command descriptions"

#. type: cindex
#: original_texis/intro.texi:339
#, no-wrap
msgid "macro descriptions"
msgstr "macro descriptions"

#. type: cindex
#: original_texis/intro.texi:340
#, no-wrap
msgid "special form descriptions"
msgstr "special form descriptions"

#. type: Plain text
#: original_texis/intro.texi:346
msgid "In a function description, the name of the function being described appears first.  It is followed on the same line by a list of argument names.  These names are also used in the body of the description, to stand for the values of the arguments."
msgstr "関数の記述では、関数の名前が最初に記述されます。同じ行に引数の名前のリストが続きます。引数の値を参照するために、引数の名前は記述の本文にも使用されます。"

#. type: Plain text
#: original_texis/intro.texi:351
msgid "The appearance of the keyword @code{&optional} in the argument list indicates that the subsequent arguments may be omitted (omitted arguments default to @code{nil}).  Do not write @code{&optional} when you call the function."
msgstr "引数リストの中にキーワード@code{&optional}がある場合、その後の引数が省略可能であることを示します(省略された引数のデフォルトは@code{nil})。その関数を呼び出すときは、@code{&optional}を記述しないでください。"

#. type: Plain text
#: original_texis/intro.texi:357
msgid "The keyword @code{&rest} (which must be followed by a single argument name) indicates that any number of arguments can follow.  The single argument name following @code{&rest} receives, as its value, a list of all the remaining arguments passed to the function.  Do not write @code{&rest} when you call the function."
msgstr "キーワード@code{&rest}(これの後には1つの引数名を続けなければならない)は、その後に任意の引数を続けることができることを表します。@code{&rest}の後に記述された引数名の値には、その関数に渡された残りのすべての引数がリストとしてセットされます。この関数を呼び出すときは、@code{&rest}を記述しないでください。"

#. type: Plain text
#: original_texis/intro.texi:359
msgid "Here is a description of an imaginary function @code{foo}:"
msgstr "以下は@code{foo}という架空の関数(function)の説明です:"

#. type: defun
#: original_texis/intro.texi:360
#, no-wrap
msgid "foo integer1 &optional integer2 &rest integers"
msgstr "foo integer1 &optional integer2 &rest integers"

#. type: defun
#: original_texis/intro.texi:364
msgid "The function @code{foo} subtracts @var{integer1} from @var{integer2}, then adds all the rest of the arguments to the result.  If @var{integer2} is not supplied, then the number 19 is used by default."
msgstr "関数@code{foo}は@var{integer2}から@var{integer1}を減じてから、その結果に残りすべての引数を加える。@var{integer2}が与えられなかった場合、デフォルトして数値19が使用される。"

#. type: example
#: original_texis/intro.texi:370
#, no-wrap
msgid ""
"(foo 1 5 3 9)\n"
"     @result{} 16\n"
"(foo 5)\n"
"     @result{} 14\n"
msgstr ""
"(foo 1 5 3 9)\n"
"     @result{} 16\n"
"(foo 5)\n"
"     @result{} 14\n"

#. type: defun
#: original_texis/intro.texi:374
msgid "More generally,"
msgstr "より一般的には、"

#. type: example
#: original_texis/intro.texi:379
#, no-wrap
msgid ""
"(foo @var{w} @var{x} @var{y}@dots{})\n"
"@equiv{}\n"
"(+ (- @var{x} @var{w}) @var{y}@dots{})\n"
msgstr ""
"(foo @var{w} @var{x} @var{y}@dots{})\n"
"@equiv{}\n"
"(+ (- @var{x} @var{w}) @var{y}@dots{})\n"

#. type: Plain text
#: original_texis/intro.texi:391
msgid "By convention, any argument whose name contains the name of a type (e.g., @var{integer}, @var{integer1} or @var{buffer}) is expected to be of that type.  A plural of a type (such as @var{buffers}) often means a list of objects of that type.  An argument named @var{object} may be of any type.  (For a list of Emacs object types, @pxref{Lisp Data Types}.)  An argument with any other sort of name (e.g., @var{new-file}) is specific to the function; if the function has a documentation string, the type of the argument should be described there (@pxref{Documentation})."
msgstr "慣例として引数の名前には、(たとえば@var{integer}、@var{integer1}、@var{buffer}のような)期待されるタイプ名が含まれます。(@var{buffers}のような)複数形のタイプは、しばしばその型のオブジェクトのリストを意味します。@var{object}のような引き数名は、それが任意の型であることを表します(Emacsオブジェクトタイプのリストは@ref{Lisp Data Types}を参照)。他の名前をもつ引数(たとえば@var{new-file})はその関数に固有の引数で、関数がドキュメント文字列をもつ場合、引数のタイプはその中で説明されるべきです(@ref{Documentation}を参照)。"

#. type: Plain text
#: original_texis/intro.texi:394
msgid "@xref{Lambda Expressions}, for a more complete description of arguments modified by @code{&optional} and @code{&rest}."
msgstr "@code{&optional}や@code{&rest}により修飾される引数のより完全な説明は、@ref{Lambda Expressions}を参照してください。"

#. type: Plain text
#: original_texis/intro.texi:401
msgid "Command, macro, and special form descriptions have the same format, but the word @samp{Function} is replaced by @samp{Command}, @samp{Macro}, or @samp{Special Form}, respectively.  Commands are simply functions that may be called interactively; macros process their arguments differently from functions (the arguments are not evaluated), but are presented the same way."
msgstr "コマンド(command)、マクロ(macro)、スペシャルフォーム(special form)の説明も同じフォーマットですが、@samp{Function}が@samp{Command}、@samp{Macro}、@samp{Special Form}に置き換えられます。コマンドはとは単に、インタラクティブ(interactive: 対話的)に呼び出すことができる関数です。マクロは関数とは違う方法(引数は評価されない)で引数を処理しますが、同じ方法で記述します。"

#. type: Plain text
#: original_texis/intro.texi:410
msgid "The descriptions of macros and special forms use a more complex notation to specify optional and repeated arguments, because they can break the argument list down into separate arguments in more complicated ways.  @samp{@r{[}@var{optional-arg}@r{]}} means that @var{optional-arg} is optional and @samp{@var{repeated-args}@dots{}} stands for zero or more arguments.  Parentheses are used when several arguments are grouped into additional levels of list structure.  Here is an example:"
msgstr "マクロとスペシャルフォームにたいする説明には、特定のオプション引数や繰り替えされる引数のために、より複雑な表記が使用されます。なぜなら引数リストが、より複雑な方法で別の引数に分離されるからです。@samp{@r{[}@var{optional-arg}@r{]}}は@var{optional-arg}がオプションであることを意味し、@samp{@var{repeated-args}@dots{}}は0個以上の引数を表します。カッコ(parentheses)は、複数の引数をリスト構造の追加レベルにグループ化するのに使用されます。以下は例です:"

#. type: defspec
#: original_texis/intro.texi:411
#, no-wrap
msgid "count-loop (var [from to [inc]]) body@dots{}"
msgstr "count-loop (var [from to [inc]]) body@dots{}"

#. type: defspec
#: original_texis/intro.texi:418
msgid "This imaginary special form implements a loop that executes the @var{body} forms and then increments the variable @var{var} on each iteration.  On the first iteration, the variable has the value @var{from}; on subsequent iterations, it is incremented by one (or by @var{inc} if that is given).  The loop exits before executing @var{body} if @var{var} equals @var{to}.  Here is an example:"
msgstr "この架空のスペシャルフォームは、 @var{body}フォームを実行してから変数@var{var}をインクリメントするループを実装します。最初の繰り返しでは変数は値@var{from}をもちます。以降の繰り返しでは、変数は1(@var{inc}が与えられた場合は@var{inc})増分されます。@var{var}が@var{to}に等しい場合、@var{body}を実行する前にループをexitします。以下は例です:"

#. type: example
#: original_texis/intro.texi:424
#, no-wrap
msgid ""
"(count-loop (i 0 10)\n"
"  (prin1 i) (princ \" \")\n"
"  (prin1 (aref vector i))\n"
"  (terpri))\n"
msgstr ""
"(count-loop (i 0 10)\n"
"  (prin1 i) (princ \" \")\n"
"  (prin1 (aref vector i))\n"
"  (terpri))\n"

#. type: defspec
#: original_texis/intro.texi:429
msgid "If @var{from} and @var{to} are omitted, @var{var} is bound to @code{nil} before the loop begins, and the loop exits if @var{var} is non-@code{nil} at the beginning of an iteration.  Here is an example:"
msgstr "@var{from}と@var{to}が省略された場合、ループを実行する前に@var{var}に@code{nil}がバインドされ、繰り返しの先頭において@var{var}が非@code{nil}の場合は、ループをexitします。以下は例です:"

#. type: example
#: original_texis/intro.texi:435
#, no-wrap
msgid ""
"(count-loop (done)\n"
"  (if (pending)\n"
"      (fixit)\n"
"    (setq done t)))\n"
msgstr ""
"(count-loop (done)\n"
"  (if (pending)\n"
"      (fixit)\n"
"    (setq done t)))\n"

#. type: defspec
#: original_texis/intro.texi:442
msgid "In this special form, the arguments @var{from} and @var{to} are optional, but must both be present or both absent.  If they are present, @var{inc} may optionally be specified as well.  These arguments are grouped with the argument @var{var} into a list, to distinguish them from @var{body}, which includes all remaining elements of the form."
msgstr "このスペシャルフォームでは、引数@var{from}と@var{to}はオプションですが、両方を指定するか未指定にするかのいずれかでなければなりません。これらの引数が与えられた場合には、オプションで@var{inc}も同様に指定することができます。これらの引数は、フォームのすべての残りの要素を含む@var{body}と区別するために、引数@var{var}とともにリストにグループ化されます。"

#. type: cindex
#: original_texis/intro.texi:446
#, no-wrap
msgid "variable descriptions"
msgstr "variable descriptions"

#. type: cindex
#: original_texis/intro.texi:447
#, no-wrap
msgid "option descriptions"
msgstr "option descriptions"

#. type: Plain text
#: original_texis/intro.texi:457
msgid "A @dfn{variable} is a name that can be @dfn{bound} (or @dfn{set}) to an object.  The object to which a variable is bound is called a @dfn{value}; we say also that variable holds that value.  Although nearly all variables can be set by the user, certain variables exist specifically so that users can change them; these are called @dfn{user options}.  Ordinary variables and user options are described using a format like that for functions, except that there are no arguments."
msgstr "@dfn{変数(variable)}とは、オブジェクトに@dfn{バインド(bind)}される名前です(@dfn{セット(set)}とも言う)。変数がバインドされたオブジェクトのことを@dfn{値(value)}と呼びます。このような場合には、その変数が値をもつという言い方もします。ほとんどすべての変数はユーザーがセットすることができますが、特にユーザーが変更できる特定の変数も存在し、これらは@dfn{ユーザーオプション(user options)}と呼ばれます。通常の変数およびユーザーオプションは、関数と同様のフォーマットを使用して説明されますが、それらには引数がありません。"

#. type: Plain text
#: original_texis/intro.texi:460
msgid "Here is a description of the imaginary @code{electric-future-map} variable."
msgstr "以下は架空の変数@code{electric-future-map}の説明です。"

#. type: defvar
#: original_texis/intro.texi:461
#, no-wrap
msgid "electric-future-map"
msgstr "electric-future-map"

#. type: defvar
#: original_texis/intro.texi:465
msgid "The value of this variable is a full keymap used by Electric Command Future mode.  The functions in this map allow you to edit commands you have not yet thought about executing."
msgstr "この変数の値はElectric Command Futureモードで使用される完全なキーマップである。このマップ内の関数により、まだ実行を考えていないコマンドの編集が可能になる。"

#. type: Plain text
#: original_texis/intro.texi:469
msgid "User option descriptions have the same format, but @samp{Variable} is replaced by @samp{User Option}."
msgstr "ユーザーオプションも同じフォーマットをもちますが、@samp{Variable}が@samp{User Option}に置き換えられます。"

#. type: section
#: original_texis/intro.texi:471
#, no-wrap
msgid "Version Information"
msgstr "Version Information"

#. type: Plain text
#: original_texis/intro.texi:475
msgid "These facilities provide information about which version of Emacs is in use."
msgstr "以下の機能は、使用しているEmacsに関する情報を提供します。"

#. type: deffn
#: original_texis/intro.texi:476
#, no-wrap
msgid "Command emacs-version &optional here"
msgstr "Command emacs-version &optional here"

#. type: deffn
#: original_texis/intro.texi:479
msgid "This function returns a string describing the version of Emacs that is running.  It is useful to include this string in bug reports."
msgstr "この関数は実行しているEmacsのバージョンを説明する文字列をreturnすす。これはバグレポートにこの文字列を含めるときに有用である。"

#. type: group
#: original_texis/intro.texi:485
#, no-wrap
msgid ""
"(emacs-version)\n"
"  @result{} \"GNU Emacs 26.1 (build 1, x86_64-unknown-linux-gnu,\n"
"             GTK+ Version 3.16) of 2017-06-01\"\n"
msgstr ""
"(emacs-version)\n"
"  @result{} \"GNU Emacs 26.1 (build 1, x86_64-unknown-linux-gnu,\n"
"             GTK+ Version 3.16) of 2017-06-01\"\n"

#. type: deffn
#: original_texis/intro.texi:492
msgid "If @var{here} is non-@code{nil}, it inserts the text in the buffer before point, and returns @code{nil}.  When this function is called interactively, it prints the same information in the echo area, but giving a prefix argument makes @var{here} non-@code{nil}."
msgstr "@var{here}が非@code{nil}ならテキストをバッファーのポイントの前に挿入して、@code{nil}をリターンする。この関数がインタラクティブに呼び出すと、同じ情報をエコーエリアに出力する。プレフィクス引数を与えると、@var{here}が非@code{nil}になる。"

#. type: defvar
#: original_texis/intro.texi:494
#, no-wrap
msgid "emacs-build-time"
msgstr "emacs-build-time"

#. type: defvar
#: original_texis/intro.texi:499
msgid "The value of this variable indicates the time at which Emacs was built.  It is a list of four integers, like the value of @code{current-time} (@pxref{Time of Day}), or is @code{nil} if the information is not available."
msgstr "この変数の値はEmacsがビルドされた日時を示す。値は@code{current-time}と同様の4つの整数からなるリスト(@ref{Time of Day}を参照)、その情報が利用できなければ@code{nil}。"

#. type: group
#: original_texis/intro.texi:504
#, no-wrap
msgid ""
"emacs-build-time\n"
"     @result{} (20614 63694 515336 438000)\n"
msgstr ""
"emacs-build-time\n"
"     @result{} (20614 63694 515336 438000)\n"

#. type: defvar
#: original_texis/intro.texi:508
#, no-wrap
msgid "emacs-version"
msgstr "emacs-version"

#. type: defvar
#: original_texis/intro.texi:515
msgid "The value of this variable is the version of Emacs being run.  It is a string such as @code{\"26.1\"}.  A value with three numeric components, such as @code{\"26.0.91\"}, indicates an unreleased test version.  (Prior to Emacs 26.1, the string includes an extra final component with the integer that is now stored in @code{emacs-build-number}; e.g., @code{\"25.1.1\"}.)"
msgstr "この変数の値は実行中のEmacsのバージョンであり、@code{\"26.1\"}のような文字列。@code{\"26.0.91\"}のように3つの数値コンポーネントをもつ値はリリース版ではなくテストバージョンであることを示す(Emacs 26.1より前では@code{\"25.1.1\"}のように文字列の最後に余分な整数コンポーネントが含まれていたが、これは現在は@code{emacs-build-number}に格納される)。"

#. type: defvar
#: original_texis/intro.texi:517
#, no-wrap
msgid "emacs-major-version"
msgstr "emacs-major-version"

#. type: defvar
#: original_texis/intro.texi:520
msgid "The major version number of Emacs, as an integer.  For Emacs version 23.1, the value is 23."
msgstr "Emacsのメジャーバージョン番号を示す整数。Emacs 23.1では値は23。"

#. type: defvar
#: original_texis/intro.texi:522
#, no-wrap
msgid "emacs-minor-version"
msgstr "emacs-minor-version"

#. type: defvar
#: original_texis/intro.texi:525
msgid "The minor version number of Emacs, as an integer.  For Emacs version 23.1, the value is 1."
msgstr "Emacsのマイナーバージョン番号を示す整数。Emacs 23.1では値は1。"

#. type: defvar
#: original_texis/intro.texi:527
#, no-wrap
msgid "emacs-build-number"
msgstr "emacs-build-number"

#. type: defvar
#: original_texis/intro.texi:531
msgid "An integer that increments each time Emacs is built in the same directory (without cleaning).  This is only of relevance when developing Emacs."
msgstr "これは同一のディレクトリーにおいてEmacsが(クリーニングなしで)ビルドされるたびに増分される整数。これはEmacsの開発時だけに関係のある変数。"

#. type: Plain text
#: original_texis/intro.texi:546
msgid "This manual was originally written by Robert Krawitz, Bil Lewis, Dan LaLiberte, Richard@tie{}M. Stallman and Chris Welty, the volunteers of the GNU manual group, in an effort extending over several years.  Robert@tie{}J. Chassell helped to review and edit the manual, with the support of the Defense Advanced Research Projects Agency, ARPA Order 6082, arranged by Warren@tie{}A. Hunt, Jr.@: of Computational Logic, Inc.  Additional sections have since been written by Miles Bader, Lars Brinkhoff, Chong Yidong, Kenichi Handa, Lute Kamstra, Juri Linkov, Glenn Morris, Thien-Thi Nguyen, Dan Nicolaescu, Martin Rudalics, Kim F. Storm, Luc Teirlinck, and Eli Zaretskii, and others."
msgstr "このマニュアルは当初、Robert Krawitz、Bil Lewis、Dan LaLiberte、Richard@tie{}M. Stallman、Chris Welty、およびGNUマニュアルグループのボランティアにより、数年を費やして記述されました。Robert@tie{}J. Chassellはこのマニュアルのレビューと編集をDefense Advanced Research Projects Agency、ARPA Order 6082のサポートのもとに手助けしてくれ、Computational Logic, IncのWarren@tie{}A. Hunt, Jr.によりアレンジされました。それ以降も追加のセクションがMiles Bader、Lars Brinkhoff、Chong Yidong、Kenichi Handa、Lute Kamstra、Juri Linkov、Glenn Morris、Thien-Thi Nguyen、Dan Nicolaescu、Martin Rudalics、Kim F. Storm、Luc Teirlinck、Eli Zaretskii、およびその他の人たちにより記述されました。"

#. type: Plain text
#: original_texis/intro.texi:560
msgid "Corrections were supplied by Drew Adams, Juanma Barranquero, Karl Berry, Jim Blandy, Bard Bloom, Stephane Boucher, David Boyes, Alan Carroll, Richard Davis, Lawrence R. Dodd, Peter Doornbosch, David A. Duff, Chris Eich, Beverly Erlebacher, David Eckelkamp, Ralf Fassel, Eirik Fuller, Stephen Gildea, Bob Glickstein, Eric Hanchrow, Jesper Harder, George Hartzell, Nathan Hess, Masayuki Ida, Dan Jacobson, Jak Kirman, Bob Knighten, Frederick M. Korz, Joe Lammens, Glenn M. Lewis, K. Richard Magill, Brian Marick, Roland McGrath, Stefan Monnier, Skip Montanaro, John Gardiner Myers, Thomas A. Peterson, Francesco Potortì, Friedrich Pukelsheim, Arnold D. Robbins, Raul Rockwell, Jason Rumney, Per Starbäck, Shinichirou Sugou, Kimmo Suominen, Edward Tharp, Bill Trost, Rickard Westman, Jean White, Eduard Wiebe, Matthew Wilding, Carl Witty, Dale Worley, Rusty Wright, and David D. Zuhn."
msgstr "Drew Adams、Juanma Barranquero、Karl Berry、Jim Blandy、Bard Bloom、Stephane Boucher、David Boyes、Alan Carroll、Richard Davis、Lawrence R. Dodd、Peter Doornbosch、David A. Duff、Chris Eich、Beverly Erlebacher、David Eckelkamp、Ralf Fassel、Eirik Fuller、Stephen Gildea、Bob Glickstein、Eric Hanchrow、Jesper Harder、George Hartzell、Nathan Hess、Masayuki Ida、Dan Jacobson、Jak Kirman、Bob Knighten、Frederick M. Korz、Joe Lammens、Glenn M. Lewis、K. Richard Magill、Brian Marick、Roland McGrath、Stefan Monnier、Skip Montanaro、John Gardiner Myers、Thomas A. Peterson、Francesco Potortì、Friedrich Pukelsheim、Arnold D. Robbins、Raul Rockwell、Jason Rumney、Per Starbäck、Shinichirou Sugou、Kimmo Suominen、Edward Tharp、Bill Trost、Rickard Westman、Jean White、Eduard Wiebe、Matthew Wilding、Carl Witty、Dale Worley、Rusty Wright、David D. Zuhnにより訂正が提供されました。"

#. type: Plain text
#: original_texis/intro.texi:562
msgid "For a more complete list of contributors, please see the relevant change log entries in the Emacs source repository."
msgstr "より完全な貢献者のリストは、Emacsソースリポジトリーの関連する変更ログエントリーを参照してください。"
