# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Emacs 25.1\n"
"POT-Creation-Date: 2019-10-14 22:49+0900\n"
"PO-Revision-Date: 2020-02-02 13:51+0900\n"
"Last-Translator: Ayanokoji Takesi <ayanokoji.takesi@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: original_texis/syntax.texi:6 original_texis/syntax.texi:7
#, no-wrap
msgid "Syntax Tables"
msgstr "Syntax Tables"

#. type: cindex
#: original_texis/syntax.texi:8
#, no-wrap
msgid "parsing buffer text"
msgstr "parsing buffer text"

#. type: cindex
#: original_texis/syntax.texi:9
#, no-wrap
msgid "syntax table"
msgstr "syntax table"

#. type: cindex
#: original_texis/syntax.texi:10
#, no-wrap
msgid "text parsing"
msgstr "text parsing"

#. type: Plain text
#: original_texis/syntax.texi:17
msgid "A @dfn{syntax table} specifies the syntactic role of each character in a buffer.  It can be used to determine where words, symbols, and other syntactic constructs begin and end.  This information is used by many Emacs facilities, including Font Lock mode (@pxref{Font Lock Mode}) and the various complex movement commands (@pxref{Motion})."
msgstr "@dfn{構文テーブル(syntax table)}はバッファー内のそれぞれの文字にたいして構文的な役割を指定します。単語、シンボル、その他の構文要素の開始と終了の判定にこれを使用できます。この情報はFont Lockモード(@ref{Font Lock Mode}を参照)や、種々の複雑な移動コマンド(@ref{Motion}を参照)を含む多くのEmacs機能により使用されます。"

#. type: menuentry
#: original_texis/syntax.texi:28
msgid "Basics: Syntax Basics"
msgstr "Basics: Syntax Basics"

#. type: menuentry
#: original_texis/syntax.texi:28
msgid "Basic concepts of syntax tables."
msgstr "構文テーブルの基本的概念。"

#. type: section
#: original_texis/syntax.texi:28 original_texis/syntax.texi:87
#: original_texis/syntax.texi:88
#, no-wrap
msgid "Syntax Descriptors"
msgstr "Syntax Descriptors"

#. type: menuentry
#: original_texis/syntax.texi:28
msgid "How characters are classified."
msgstr "文字がクラス分けされる方法。"

#. type: section
#: original_texis/syntax.texi:28 original_texis/syntax.texi:390
#: original_texis/syntax.texi:391
#, no-wrap
msgid "Syntax Table Functions"
msgstr "Syntax Table Functions"

#. type: menuentry
#: original_texis/syntax.texi:28
msgid "How to create, examine and alter syntax tables."
msgstr "構文テーブルを作成、調査、変更する方法。"

#. type: section
#: original_texis/syntax.texi:28 original_texis/syntax.texi:528
#: original_texis/syntax.texi:529
#, no-wrap
msgid "Syntax Properties"
msgstr "Syntax Properties"

#. type: menuentry
#: original_texis/syntax.texi:28
msgid "Overriding syntax with text properties."
msgstr "テキストプロパティによる構文テーブルのオーバーライド。"

#. type: section
#: original_texis/syntax.texi:28 original_texis/syntax.texi:593
#: original_texis/syntax.texi:594
#, no-wrap
msgid "Motion and Syntax"
msgstr "Motion and Syntax"

#. type: menuentry
#: original_texis/syntax.texi:28
msgid "Moving over characters with certain syntaxes."
msgstr "特定の構文による文字間の移動。"

#. type: section
#: original_texis/syntax.texi:28 original_texis/syntax.texi:634
#: original_texis/syntax.texi:635
#, no-wrap
msgid "Parsing Expressions"
msgstr "Parsing Expressions"

#. type: menuentry
#: original_texis/syntax.texi:28
msgid "Parsing balanced expressions using the syntax table."
msgstr "構文テーブル使用によるバランスのとれた式の解析。"

#. type: section
#: original_texis/syntax.texi:28 original_texis/syntax.texi:948
#: original_texis/syntax.texi:949
#, no-wrap
msgid "Syntax Table Internals"
msgstr "Syntax Table Internals"

#. type: menuentry
#: original_texis/syntax.texi:28
msgid "How syntax table information is stored."
msgstr "構文テーブルの情報が格納される方法。"

#. type: section
#: original_texis/syntax.texi:28 original_texis/syntax.texi:1045
#: original_texis/syntax.texi:1046
#, no-wrap
msgid "Categories"
msgstr "Categories"

#. type: menuentry
#: original_texis/syntax.texi:28
msgid "Another way of classifying character syntax."
msgstr "文字構文をクラス分けする別の手段。"

#. type: node
#: original_texis/syntax.texi:30
#, no-wrap
msgid "Syntax Basics"
msgstr "Syntax Basics"

#. type: section
#: original_texis/syntax.texi:31
#, no-wrap
msgid "Syntax Table Concepts"
msgstr "Syntax Table Concepts"

#. type: Plain text
#: original_texis/syntax.texi:37
msgid "A syntax table is a data structure which can be used to look up the @dfn{syntax class} and other syntactic properties of each character.  Syntax tables are used by Lisp programs for scanning and moving across text."
msgstr "構文テーブルは、それぞれの文字の@dfn{構文クラス(syntax class)}やその他の構文的プロパティを照合するために使用できるデータ構造です。構文テーブルはテキストを横断したスキャンや移動のためにLispプログラムから使用されます。"

#. type: Plain text
#: original_texis/syntax.texi:46
msgid "Internally, a syntax table is a char-table (@pxref{Char-Tables}).  The element at index @var{c} describes the character with code @var{c}; its value is a cons cell which specifies the syntax of the character in question.  @xref{Syntax Table Internals}, for details.  However, instead of using @code{aset} and @code{aref} to modify and inspect syntax table contents, you should usually use the higher-level functions @code{char-syntax} and @code{modify-syntax-entry}, which are described in @ref{Syntax Table Functions}."
msgstr "構文テーブルは内部的には文字テーブルです(@ref{Char-Tables}を参照)。インデックス@var{c}の要素はコード@var{c}の文字を記述します。値は該当する文字の構文を指定するコンスセルです。詳細は@ref{Syntax Table Internals}を参照してください。しかし構文テーブルの内容を変更や確認するために@code{aset}や@code{aref}を使用するかわりに、通常は高レベルな関数@code{char-syntax}や@code{modify-syntax-entry}を使用するべきです。これらについては@ref{Syntax Table Functions}で説明します。"

#. type: defun
#: original_texis/syntax.texi:47
#, no-wrap
msgid "syntax-table-p object"
msgstr "syntax-table-p object"

#. type: defun
#: original_texis/syntax.texi:49
msgid "This function returns @code{t} if @var{object} is a syntax table."
msgstr "この関数は@var{object}が構文テーブルなら@code{t}をリターンする。"

#. type: Plain text
#: original_texis/syntax.texi:65
msgid "Each buffer has its own major mode, and each major mode has its own idea of the syntax class of various characters.  For example, in Lisp mode, the character @samp{;} begins a comment, but in C mode, it terminates a statement.  To support these variations, the syntax table is local to each buffer.  Typically, each major mode has its own syntax table, which it installs in all buffers that use that mode.  For example, the variable @code{emacs-lisp-mode-syntax-table} holds the syntax table used by Emacs Lisp mode, and @code{c-mode-syntax-table} holds the syntax table used by C mode.  Changing a major mode's syntax table alters the syntax in all of that mode's buffers, as well as in any buffers subsequently put in that mode.  Occasionally, several similar modes share one syntax table.  @xref{Example Major Modes}, for an example of how to set up a syntax table."
msgstr "バッファーはそれぞれ自身のメジャーモードをもち、それぞれのメジャーモードはさまざまな文字の構文クラスにたいして独自の考えをもっています。たとえばLisモードでは文字@samp{;}はコメントの開始ですが、Cモードでは命令文の終端になります。これらのバリエーションをサポートするために、構文テーブルはそれぞれのバッファーにたいしてローカルです。一般的に各メジャーモードは自身の構文テーブルをもち、そのモードを使用するすべてのバッファーにそれがインストールされます。たとえば変数@code{emacs-lisp-mode-syntax-table}はEmacsのLispモードが使用する構文テーブル、@code{c-mode-syntax-table}はCモードが使用する構文テーブルを保持します。あるメジャーモードの構文テーブルを変更すると、そのモードのバッファー、およびその後でそのモードに置かれるすべてのバッファーの構文も同様に変更されます。複数の類似するモードが1つの構文テーブルを共有することがときおりあります。構文テーブルをセットアップする方法の例は@ref{Example Major Modes}を参照してください。"

#. type: cindex
#: original_texis/syntax.texi:66
#, no-wrap
msgid "standard syntax table"
msgstr "standard syntax table"

#. type: cindex
#: original_texis/syntax.texi:67
#, no-wrap
msgid "inheritance, syntax table"
msgstr "inheritance, syntax table"

#. type: Plain text
#: original_texis/syntax.texi:76
msgid "A syntax table can @dfn{inherit} from another syntax table, which is called its @dfn{parent syntax table}.  A syntax table can leave the syntax class of some characters unspecified, by giving them the ``inherit'' syntax class; such a character then acquires the syntax class specified by the parent syntax table (@pxref{Syntax Class Table}).  Emacs defines a @dfn{standard syntax table}, which is the default parent syntax table, and is also the syntax table used by Fundamental mode."
msgstr "別の構文テーブルから構文テールを@dfn{継承(inherit)}できます。これを@dfn{親構文テーブル(parent syntax table)}と呼びます。構文テーブルは、ある文字にたいして構文クラス``inherit''を与えることにより、構文クラスを未指定にしておくことができます。そのような文字は親構文テーブルが指定する構文クラスを取得します(@ref{Syntax Class Table}を参照)。Emacsは@dfn{標準構文テーブル(standard syntax table)}を定義します。これはデフォルトとなる親構文テーブルであり、Fundamentalモードが使用する構文テーブルでもあります。"

#. type: defun
#: original_texis/syntax.texi:77
#, no-wrap
msgid "standard-syntax-table"
msgstr "standard-syntax-table"

#. type: defun
#: original_texis/syntax.texi:80
msgid "This function returns the standard syntax table, which is the syntax table used in Fundamental mode."
msgstr "この関数は標準構文テーブルをリターンする。これはFundamentalモードが使用する構文テーブルである。"

#. type: Plain text
#: original_texis/syntax.texi:86
msgid "Syntax tables are not used by the Emacs Lisp reader, which has its own built-in syntactic rules which cannot be changed.  (Some Lisp systems provide ways to redefine the read syntax, but we decided to leave this feature out of Emacs Lisp for simplicity.)"
msgstr "Emacs Lispリーダーは変更不可な独自のビルトイン構文ルールをもつので、構文テーブルは使用しません(いくつかのLispシステムはリード構文を再定義する手段を提供するが、わたしたちは単純化のためこの機能をEmacs Lisp外部に留める決定をした)。"

#. type: cindex
#: original_texis/syntax.texi:89
#, no-wrap
msgid "syntax class"
msgstr "syntax class"

#. type: Plain text
#: original_texis/syntax.texi:95
msgid "The @dfn{syntax class} of a character describes its syntactic role.  Each syntax table specifies the syntax class of each character.  There is no necessary relationship between the class of a character in one syntax table and its class in any other table."
msgstr "@dfn{構文クラス(syntax class)}の文字は、その文字の構文的な役割を記述します。各構文テーブルは、それぞれの文字の構文クラスを指定します。ある構文テーブルでの文字のクラスと、別のテーブルにおけるその文字のクラスとの間に関連性がある必要はありません。"

#. type: Plain text
#: original_texis/syntax.texi:104
msgid "Each syntax class is designated by a mnemonic character, which serves as the name of the class when you need to specify a class.  Usually, this designator character is one that is often assigned that class; however, its meaning as a designator is unvarying and independent of what syntax that character currently has.  Thus, @samp{\\} as a designator character always stands for escape character syntax, regardless of whether the @samp{\\} character actually has that syntax in the current syntax table."
msgstr "構文テーブルはそれぞれニーモニック文字(mnemonic character)により選別され、クラスを指定する必要がある際にはそのクラスの名前としての役割を果たします。この指定子文字(designator character)は通常はそのクラスに割当てられることが多々あります。しかしその指定子としての意味は不変であり、その文字がカレントでもつ構文とは独立しています。つまりカレント構文テーブルにおいて実際に文字@samp{\\}が構文をもつかどうかに関係なく、指定子文字としての@samp{\\}は常にエスケープ文字(escape character)を意味します。"

#. type: ifnottex
#: original_texis/syntax.texi:107
msgid "@xref{Syntax Class Table}, for a list of syntax classes and their designator characters."
msgstr "構文クラスとそれらの指定子文字のリストは@ref{Syntax Class Table}を参照してください。"

#. type: cindex
#: original_texis/syntax.texi:109
#, no-wrap
msgid "syntax descriptor"
msgstr "syntax descriptor"

#. type: Plain text
#: original_texis/syntax.texi:115
msgid "A @dfn{syntax descriptor} is a Lisp string that describes the syntax class and other syntactic properties of a character.  When you want to modify the syntax of a character, that is done by calling the function @code{modify-syntax-entry} and passing a syntax descriptor as one of its arguments (@pxref{Syntax Table Functions})."
msgstr "@dfn{構文記述子(syntax descriptor)}とは文字の構文クラスと、その他の構文的なプロパティを記述するLisp文字列です。ある文字の構文を変更したい際には、関数@code{modify-syntax-entry}を呼び出して引数に構文記述子を渡すことにより行います(@ref{Syntax Table Functions}を参照)。"

#. type: Plain text
#: original_texis/syntax.texi:122
msgid "The first character in a syntax descriptor must be a syntax class designator character.  The second character, if present, specifies a matching character (e.g., in Lisp, the matching character for @samp{(} is @samp{)}); a space specifies that there is no matching character.  Then come characters specifying additional syntax properties (@pxref{Syntax Flags})."
msgstr "構文記述子の1つ目の文字は構文クラスの指定子文字でなければなりません。2つ目の文字がもしあれば、マッチング文字を指定します(Lispでは@samp{(}にたいするマッチング文字は@samp{)})。スペースはマッチング文字が存在しないことを指定します。その後に続く文字は追加の構文プロパティを指定します(@ref{Syntax Flags}を参照)。"

#. type: Plain text
#: original_texis/syntax.texi:125
msgid "If no matching character or flags are needed, only one character (specifying the syntax class) is sufficient."
msgstr "マッチング文字やフラグが必要なければ、(構文クラスを指定する)1つの文字だけで十分です。"

#. type: Plain text
#: original_texis/syntax.texi:132
msgid "For example, the syntax descriptor for the character @samp{*} in C mode is @code{\". 23\"} (i.e., punctuation, matching character slot unused, second character of a comment-starter, first character of a comment-ender), and the entry for @samp{/} is @samp{@w{. 14}} (i.e., punctuation, matching character slot unused, first character of a comment-starter, second character of a comment-ender)."
msgstr "たとえばCモードでの文字@samp{*}の構文記述子は@code{\". 23\"} (区切り記号、マッチング文字用スロットは未使用、コメント開始記号の2つ目の文字、コメント終了記号の1つ目の文字)、@samp{/}にたいするエントリーは@samp{@w{. 14}} (区切り記号、マッチング文字用スロットは未使用、コメント開始記号の1つ目の文字、コメント終了記号の2つ目の文字)です。"

#. type: Plain text
#: original_texis/syntax.texi:136
msgid "Emacs also defines @dfn{raw syntax descriptors}, which are used to describe syntax classes at a lower level.  @xref{Syntax Table Internals}."
msgstr "Emacsは低レベルでの構文クラスを記述するために使用される@dfn{raw構文記述子(raw syntax descriptors)}も定義しています。@ref{Syntax Table Internals}を参照してください。"

#. type: node
#: original_texis/syntax.texi:140 original_texis/syntax.texi:142
#, no-wrap
msgid "Syntax Class Table"
msgstr "Syntax Class Table"

#. type: menuentry
#: original_texis/syntax.texi:140
msgid "Table of syntax classes."
msgstr "構文クラスのテーブル。"

#. type: subsection
#: original_texis/syntax.texi:140 original_texis/syntax.texi:283
#: original_texis/syntax.texi:284
#, no-wrap
msgid "Syntax Flags"
msgstr "Syntax Flags"

#. type: menuentry
#: original_texis/syntax.texi:140
msgid "Additional flags each character can have."
msgstr "各文字が所有できる追加のフラグ。"

#. type: subsection
#: original_texis/syntax.texi:143
#, no-wrap
msgid "Table of Syntax Classes"
msgstr "Table of Syntax Classes"

#. type: cindex
#: original_texis/syntax.texi:144
#, no-wrap
msgid "syntax class table"
msgstr "syntax class table"

#. type: Plain text
#: original_texis/syntax.texi:148
msgid "Here is a table of syntax classes, the characters that designate them, their meanings, and examples of their use."
msgstr "以下は構文クラス、それらの指定子となる文字と意味、および使用例を示すテーブルです。"

#. type: item
#: original_texis/syntax.texi:150
#, no-wrap
msgid "Whitespace characters: @samp{@ } or @samp{-}"
msgstr "空白文字: @samp{@ }か@samp{-}"

#. type: table
#: original_texis/syntax.texi:156
msgid "Characters that separate symbols and words from each other.  Typically, whitespace characters have no other syntactic significance, and multiple whitespace characters are syntactically equivalent to a single one.  Space, tab, and formfeed are classified as whitespace in almost all major modes."
msgstr "シンボルや単語を区別する文字。空白文字は通常は他の構文的な意義をもたず、複数の空白文字は構文的には単一の空白文字と等しい。スペース、タブ、フォームフィードは、ほとんどすべてのメジャーモードにおいて空白文字にクラス分けされる。"

#. type: table
#: original_texis/syntax.texi:159
msgid "This syntax class can be designated by either @w{@samp{@ }} or @samp{-}.  Both designators are equivalent."
msgstr "この構文クラスは@w{@samp{@ }}か@samp{-}により指定できる。両指定子は等価。"

#. type: item
#: original_texis/syntax.texi:160
#, no-wrap
msgid "Word constituents: @samp{w}"
msgstr "単語構成文字: @samp{w}"

#. type: table
#: original_texis/syntax.texi:164
msgid "Parts of words in human languages.  These are typically used in variable and command names in programs.  All upper- and lower-case letters, and the digits, are typically word constituents."
msgstr "人間の言語における単語の一部。これらは通常はプログラム内において変数やコマンドの名前として使用される。すべての大文字と小文字、および数字は通常は単語構成文字。"

#. type: item
#: original_texis/syntax.texi:165
#, no-wrap
msgid "Symbol constituents: @samp{_}"
msgstr "シンボル構成文字: @samp{_}"

#. type: table
#: original_texis/syntax.texi:171
msgid "Extra characters used in variable and command names along with word constituents.  Examples include the characters @samp{$&*+-_<>} in Lisp mode, which may be part of a symbol name even though they are not part of English words.  In standard C, the only non-word-constituent character that is valid in symbols is underscore (@samp{_})."
msgstr "単語構成文字とともに変数やコマンドの名前で使用される追加の文字。例としてはLispモードの文字@samp{$&*+-_<>}が含まれ、これらはたとえ英単語の一部ではないとしてもシンボルの名前の一部となり得る。標準Cではシンボル内において非単語構成文字で有効な文字はアンダースコア(@samp{_})のみ。"

#. type: item
#: original_texis/syntax.texi:172
#, no-wrap
msgid "Punctuation characters: @samp{.}"
msgstr "区切り文字: @samp{.}"

#. type: table
#: original_texis/syntax.texi:179
msgid "Characters used as punctuation in a human language, or used in a programming language to separate symbols from one another.  Some programming language modes, such as Emacs Lisp mode, have no characters in this class since the few characters that are not symbol or word constituents all have other uses.  Other programming language modes, such as C mode, use punctuation syntax for operators."
msgstr "人間の言語において句読点として使用される文字、またはプログラミング言語でシンボルを別のシンボルと区別するために使用される文字。Emacs Lispモードのようないくつかのプログラミング言語のモードでは、単語構成文字およびシンボル構成文字のいずれでもないいくつかの文字はすべて他の用途をもつので、このクラスの文字をもたない。Cモードのような他のプログラミング言語のモードでは演算子にたいして区切り文字構文が使用される。"

#. type: item
#: original_texis/syntax.texi:180
#, no-wrap
msgid "Open parenthesis characters: @samp{(}"
msgstr "開カッコ文字: @samp{(}"

#. type: itemx
#: original_texis/syntax.texi:181
#, no-wrap
msgid "Close parenthesis characters: @samp{)}"
msgstr "閉カッコ文字: @samp{)}"

#. type: table
#: original_texis/syntax.texi:188
msgid "Characters used in dissimilar pairs to surround sentences or expressions.  Such a grouping is begun with an open parenthesis character and terminated with a close.  Each open parenthesis character matches a particular close parenthesis character, and vice versa.  Normally, Emacs indicates momentarily the matching open parenthesis when you insert a close parenthesis.  @xref{Blinking}."
msgstr "文や式を囲うために異なるペアとして使用される文字。そのようなグループ化は開カッコで開始され、閉カッコで終了する。開カッコ文字はそれぞれ特定の閉カッコ文字にマッチして、その逆も成り立つ。Emacsは通常は閉カッコ挿入時にマッチする開カッコを示す。@ref{Blinking}を参照のこと。"

#. type: table
#: original_texis/syntax.texi:193
msgid "In human languages, and in C code, the parenthesis pairs are @samp{()}, @samp{[]}, and @samp{@{@}}.  In Emacs Lisp, the delimiters for lists and vectors (@samp{()} and @samp{[]}) are classified as parenthesis characters."
msgstr "人間の言語やCのコードでは、カッコのペアは@samp{()}、@samp{[]}、@samp{@{@}}。Emacs Lispではリストとベクターにたいする区切り文字(@samp{()}と@samp{[]})はカッコ文字としてクラス分けされる。"

#. type: item
#: original_texis/syntax.texi:194
#, no-wrap
msgid "String quotes: @samp{\"}"
msgstr "文字列クォート: @samp{\"}"

#. type: table
#: original_texis/syntax.texi:198
msgid "Characters used to delimit string constants.  The same string quote character appears at the beginning and the end of a string.  Such quoted strings do not nest."
msgstr "文字列定数を区切るために使用される文字。文字列の先頭と終端に同じ文字列クォート文字が出現する。このようなクォート文字列はネストされない。"

#. type: table
#: original_texis/syntax.texi:202
msgid "The parsing facilities of Emacs consider a string as a single token.  The usual syntactic meanings of the characters in the string are suppressed."
msgstr "Emacsのパース機能は文字列を単一のトークンとみなす。文字列内ではその文字の通常の構文的な意味は抑制される。"

#. type: table
#: original_texis/syntax.texi:208
msgid "The Lisp modes have two string quote characters: double-quote (@samp{\"})  and vertical bar (@samp{|}).  @samp{|} is not used in Emacs Lisp, but it is used in Common Lisp.  C also has two string quote characters: double-quote for strings, and apostrophe (@samp{'}) for character constants."
msgstr "Lispモードはダブルクォーテーション(@samp{\"})と垂直バー(@samp{|})とう2つの文字列クォート文字をもつ。Emacs Lispでは@samp{|}は使用しないがCommon Lispでは使用される。Cも文字列にたいするダブルクォート文字、および文字定数にたいするシングルアポストロフィ(@samp{'})という2つのクォート文字をもつ。"

#. type: table
#: original_texis/syntax.texi:212
msgid "Human text has no string quote characters.  We do not want quotation marks to turn off the usual syntactic properties of other characters in the quotation."
msgstr "人間用のテキストには文字列クォート文字がない。そのクォーテーション内の別の文字の通常の構文的プロパティを、クォーテーションマークがオフに切り替えることを、わたしたちは望まない。"

#. type: item
#: original_texis/syntax.texi:213
#, no-wrap
msgid "Escape-syntax characters: @samp{\\}"
msgstr "エスケープ構文文字: @samp{\\}"

#. type: table
#: original_texis/syntax.texi:219
msgid "Characters that start an escape sequence, such as is used in string and character constants.  The character @samp{\\} belongs to this class in both C and Lisp.  (In C, it is used thus only inside strings, but it turns out to cause no trouble to treat it this way throughout C code.)"
msgstr "文字列や文字定数内で使用されるようなエスケープシーケンスで始まる文字。CとLispの両方で文字@samp{\\}はこのクラスに属する(Cでは文字列内でのみ使用されるが、Cコード中を通じてこのように扱っても問題ないことがわかった)。"

#. type: table
#: original_texis/syntax.texi:222 original_texis/syntax.texi:230
msgid "Characters in this class count as part of words if @code{words-include-escapes} is non-@code{nil}.  @xref{Word Motion}."
msgstr "@code{words-include-escapes}が非@code{nil}なら、このクラスの文字は単語の一部とみなされる。@ref{Word Motion}を参照のこと。"

#. type: item
#: original_texis/syntax.texi:223
#, no-wrap
msgid "Character quotes: @samp{/}"
msgstr "文字クォート: @samp{/}"

#. type: table
#: original_texis/syntax.texi:227
msgid "Characters used to quote the following character so that it loses its normal syntactic meaning.  This differs from an escape character in that only the character immediately following is ever affected."
msgstr "その文字の通常の構文的な意義を失うように、後続の文字をクォートするために使用される文字。これは直後に続く文字だけに影響する点がエスケープ文字と異なる。"

#. type: table
#: original_texis/syntax.texi:232
msgid "This class is used for backslash in @TeX{} mode."
msgstr "このクラスは@TeX{}モードのバックスラッシュにたいして使用される。"

#. type: item
#: original_texis/syntax.texi:233
#, no-wrap
msgid "Paired delimiters: @samp{$}"
msgstr "区切りペアー: @samp{$}"

#. type: table
#: original_texis/syntax.texi:238
msgid "Similar to string quote characters, except that the syntactic properties of the characters between the delimiters are not suppressed.  Only @TeX{} mode uses a paired delimiter presently---the @samp{$} that both enters and leaves math mode."
msgstr "文字列クォート文字と似ているが、この区切りの間にある文字の構文的なプロパティは抑制されない点が異なる。現在のところ@TeX{}モードだけが区切りペアを使用する(@samp{$}によりmathモードに出入りする)。"

#. type: item
#: original_texis/syntax.texi:239
#, no-wrap
msgid "Expression prefixes: @samp{'}"
msgstr "式プレフィクス: @samp{'}"

#. type: table
#: original_texis/syntax.texi:245
msgid "Characters used for syntactic operators that are considered as part of an expression if they appear next to one.  In Lisp modes, these characters include the apostrophe, @samp{'} (used for quoting), the comma, @samp{,} (used in macros), and @samp{#} (used in the read syntax for certain data types)."
msgstr "式に隣接して出現した場合には式の一部とみなされる構文的演算子にたいして使用される文字。Lispモードではアポストロフィー@samp{'} (クォートに使用)、カンマ@samp{,} (マクロに使用)、@samp{#} (特定のデータ型にたいするリード構文として使用)が、これらの文字に含まれる。"

#. type: item
#: original_texis/syntax.texi:246
#, no-wrap
msgid "Comment starters: @samp{<}"
msgstr "コメント開始文字: @samp{<}"

#. type: itemx
#: original_texis/syntax.texi:247
#, no-wrap
msgid "Comment enders: @samp{>}"
msgstr "コメント終了文字: @samp{>}"

#. type: cindex
#: original_texis/syntax.texi:248
#, no-wrap
msgid "comment syntax"
msgstr "comment syntax"

#. type: table
#: original_texis/syntax.texi:252
msgid "Characters used in various languages to delimit comments.  Human text has no comment characters.  In Lisp, the semicolon (@samp{;}) starts a comment and a newline or formfeed ends one."
msgstr "さまざまな言語においてコメントを区切るために使用する文字。人間用のテキストはコメント文字をもたない。Lispではセミコロン(@samp{;})がコメントの開始、改行かフォームフィードで終了する。"

#. type: item
#: original_texis/syntax.texi:253
#, no-wrap
msgid "Inherit standard syntax: @samp{@@}"
msgstr "標準構文の継承: @samp{@@}"

#. type: table
#: original_texis/syntax.texi:257
msgid "This syntax class does not specify a particular syntax.  It says to look in the standard syntax table to find the syntax of this character."
msgstr "この構文クラスは特定の構文を指定しない。これはその文字の構文を探すために標準構文テーブルを照合するよう告げる。"

#. type: item
#: original_texis/syntax.texi:258
#, no-wrap
msgid "Generic comment delimiters: @samp{!}"
msgstr "汎用コメント区切り: @samp{!}"

#. type: table
#: original_texis/syntax.texi:263
msgid "Characters that start or end a special kind of comment.  @emph{Any} generic comment delimiter matches @emph{any} generic comment delimiter, but they cannot match a comment starter or comment ender; generic comment delimiters can only match each other."
msgstr "特殊なコメントを開始または終了させる文字。@emph{任意}の汎用コメント区切りは@emph{任意}の汎用コメント区切りにマッチするが、コメント開始とコメント終了はマッチできない。汎用コメント区切りは汎用コメント区切り同士としかマッチできない。"

#. type: table
#: original_texis/syntax.texi:269
msgid "This syntax class is primarily meant for use with the @code{syntax-table} text property (@pxref{Syntax Properties}).  You can mark any range of characters as forming a comment, by giving the first and last characters of the range @code{syntax-table} properties identifying them as generic comment delimiters."
msgstr "この構文クラスは主として@code{syntax-table}テキストプロパティ(@ref{Syntax Properties}を参照)とともに使用することを意図している。任意の文字範囲の最初と最後の文字にたいして、それらが汎用コメント区切りであることを示す@code{syntax-table}プロパティを付与することにより、その範囲がコメントを形成するとマークすることができる。"

#. type: item
#: original_texis/syntax.texi:270
#, no-wrap
msgid "Generic string delimiters: @samp{|}"
msgstr "汎用文字列区切り: @samp{|}"

#. type: table
#: original_texis/syntax.texi:275
msgid "Characters that start or end a string.  This class differs from the string quote class in that @emph{any} generic string delimiter can match any other generic string delimiter; but they do not match ordinary string quote characters."
msgstr "文字列を開始や終了させる文字。@emph{任意}の汎用文字列区切りは@emph{任意}の汎用文字列区切りにマッチするが、通常の文字列クォート文字とはマッチできない。"

#. type: table
#: original_texis/syntax.texi:281
msgid "This syntax class is primarily meant for use with the @code{syntax-table} text property (@pxref{Syntax Properties}).  You can mark any range of characters as forming a string constant, by giving the first and last characters of the range @code{syntax-table} properties identifying them as generic string delimiters."
msgstr "この構文クラスは主として@code{syntax-table}テキストプロパティ(@ref{Syntax Properties}を参照)とともに使用することを意図している。任意の文字範囲の最初と最後の文字にたいして、それらが汎用文字列区切りであることを示す@code{syntax-table}プロパティを付与することにより、その範囲が文字列定数を形成するとマークすることができる。"

#. type: cindex
#: original_texis/syntax.texi:285
#, no-wrap
msgid "syntax flags"
msgstr "syntax flags"

#. type: Plain text
#: original_texis/syntax.texi:291
msgid "In addition to the classes, entries for characters in a syntax table can specify flags.  There are eight possible flags, represented by the characters @samp{1}, @samp{2}, @samp{3}, @samp{4}, @samp{b}, @samp{c}, @samp{n}, and @samp{p}."
msgstr "構文テーブル内の文字全体にたいして構文クラスに加えてフラグを指定できます。利用できる8つのフラグがあり、それらは文字@samp{1}、@samp{2}、@samp{3}、@samp{4}、@samp{b}、@samp{c}、@samp{n}、@samp{p}で表されます。"

#. type: Plain text
#: original_texis/syntax.texi:303
msgid "All the flags except @samp{p} are used to describe comment delimiters.  The digit flags are used for comment delimiters made up of 2 characters.  They indicate that a character can @emph{also} be part of a comment sequence, in addition to the syntactic properties associated with its character class.  The flags are independent of the class and each other for the sake of characters such as @samp{*} in C mode, which is a punctuation character, @emph{and} the second character of a start-of-comment sequence (@samp{/*}), @emph{and} the first character of an end-of-comment sequence (@samp{*/}).  The flags @samp{b}, @samp{c}, and @samp{n} are used to qualify the corresponding comment delimiter."
msgstr "@samp{p}を除くすべてのフラグはコメント区切りを記述するために使用されます。数字のフラグは2文字から構成されるコメント区切りにたいして使用されます。これらは文字の文字クラスに関連付けられた構文的プロパティに加えて、その文字も@emph{同様}にコメントシーケンスの一部となれることを示します。Cモードでは区切り文字であり、@emph{かつ}コメントシーケンス開始(@samp{/*})の2文字目であり、@emph{かつ}コメントシーケンス終了(@samp{*/})の1文字目である@samp{*}のような文字のためにフラグとクラスは互いに独立しています。フラグ@samp{b}、@samp{c}、@samp{n}は対応するコメント区切りを限定するために使用されます。"

#. type: Plain text
#: original_texis/syntax.texi:306
msgid "Here is a table of the possible flags for a character @var{c}, and what they mean:"
msgstr "以下は文字@var{c}にたいして利用できるフラグと意味を示すテーブルです:"

#. type: itemize
#: original_texis/syntax.texi:311
msgid "@samp{1} means @var{c} is the start of a two-character comment-start sequence."
msgstr "@samp{1}は@var{c}が2文字からなるコメント開始シーケンスの開始であることを意味する。"

#. type: itemize
#: original_texis/syntax.texi:314
msgid "@samp{2} means @var{c} is the second character of such a sequence."
msgstr "@samp{2}は@var{c}がそのようなシーケンスの2文字目であることを意味する。"

#. type: itemize
#: original_texis/syntax.texi:318
msgid "@samp{3} means @var{c} is the start of a two-character comment-end sequence."
msgstr "@samp{3}は@var{c}が2文字からなるコメント終了シーケンスの開始であることを意味する。"

#. type: itemize
#: original_texis/syntax.texi:321
msgid "@samp{4} means @var{c} is the second character of such a sequence."
msgstr "@samp{4}は@var{c}がそのようなシーケンスの2文字目であることを意味する。"

#. type: itemize
#: original_texis/syntax.texi:327
msgid "@samp{b} means that @var{c} as a comment delimiter belongs to the alternative ``b'' comment style.  For a two-character comment starter, this flag is only significant on the second char, and for a 2-character comment ender it is only significant on the first char."
msgstr "@samp{b}は@var{c}が代替えのコメントスタイル``b''に属するコメント区切りであることを意味する。このフラグは2文字のコメント開始では2文字目、2文字のコメント終了では1文字目にたいしてのみ意味をもつ。"

#. type: itemize
#: original_texis/syntax.texi:332
msgid "@samp{c} means that @var{c} as a comment delimiter belongs to the alternative ``c'' comment style.  For a two-character comment delimiter, @samp{c} on either character makes it of style ``c''."
msgstr "@samp{c}は@var{c}が代替えのコメントスタイル``c''に属するコメント区切りであることを意味する。2文字からなるコメント区切りにたいしては、そのいずれかが@samp{c}であればスタイル``c''となる。"

#. type: itemize
#: original_texis/syntax.texi:338
msgid "@samp{n} on a comment delimiter character specifies that this kind of comment can be nested.  For a two-character comment delimiter, @samp{n} on either character makes it nestable."
msgstr "コメント区切り文字での@samp{n}は、この種のコメントがネスト可能であることを指定する。2文字からなるコメント区切りにたいしては、そのいずれかが@samp{n}であればネスト可能となる。"

#. type: cindex
#: original_texis/syntax.texi:339
#, no-wrap
msgid "comment style"
msgstr "comment style"

#. type: itemize
#: original_texis/syntax.texi:347
msgid "Emacs supports several comment styles simultaneously in any one syntax table.  A comment style is a set of flags @samp{b}, @samp{c}, and @samp{n}, so there can be up to 8 different comment styles.  Each comment delimiter has a style and only matches comment delimiters of the same style.  Thus if a comment starts with the comment-start sequence of style ``bn'', it will extend until the next matching comment-end sequence of style ``bn''."
msgstr "Emacsは任意の構文テーブル1つにたいして、同時に複数のコメントスタイルをサポートする。コメントスタイルはフラグ@samp{b}、@samp{c}、@samp{n}の組み合わせなので8個の異なるコメントスタイルが可能である。コメント区切りはそれぞれスタイルをもち、同じスタイルのコメント区切りとのみマッチできる。つまりコメントがスタイル``bn''のコメント開始シーケンスで開始されるなら、そのコメントは次のスタイル``bn''のコメント終了シーケンスにマッチするまで拡張されるだろう。"

#. type: itemize
#: original_texis/syntax.texi:349
msgid "The appropriate comment syntax settings for C++ can be as follows:"
msgstr "C++にたいして適切なコメント構文は以下のようになる:"

#. type: samp{#1}
#: original_texis/syntax.texi:351
#, no-wrap
msgid "/"
msgstr "/"

#. type: samp{#1}
#: original_texis/syntax.texi:353
msgid "124"
msgstr "124"

#. type: samp{#1}
#: original_texis/syntax.texi:353
#, no-wrap
msgid "*"
msgstr "*"

#. type: samp{#1}
#: original_texis/syntax.texi:355
msgid "23b"
msgstr "23b"

#. type: item
#: original_texis/syntax.texi:355 original_texis/syntax.texi:374
#, no-wrap
msgid "newline"
msgstr "newline"

#. type: samp{#1}
#: original_texis/syntax.texi:357
msgid ">"
msgstr ">"

#. type: itemize
#: original_texis/syntax.texi:360
msgid "This defines four comment-delimiting sequences:"
msgstr "これは4つのコメント区切りシーケンスを定義する:"

#. type: samp{#1}
#: original_texis/syntax.texi:362
#, no-wrap
msgid "/*"
msgstr "/*"

#. type: table
#: original_texis/syntax.texi:365
msgid "This is a comment-start sequence for ``b'' style because the second character, @samp{*}, has the @samp{b} flag."
msgstr "これは2文字目の@samp{*}が@samp{b}フラグをもつので、``b''スタイルのコメント開始シーケンス。"

#. type: samp{#1}
#: original_texis/syntax.texi:366
#, no-wrap
msgid "//"
msgstr "//"

#. type: table
#: original_texis/syntax.texi:369
msgid "This is a comment-start sequence for ``a'' style because the second character, @samp{/}, does not have the @samp{b} flag."
msgstr "これは2文字目の@samp{/}が@samp{b}フラグをもたないので、``a''スタイルのコメント開始シーケンス。"

#. type: samp{#1}
#: original_texis/syntax.texi:370
#, no-wrap
msgid "*/"
msgstr "*/"

#. type: table
#: original_texis/syntax.texi:373
msgid "This is a comment-end sequence for ``b'' style because the first character, @samp{*}, has the @samp{b} flag."
msgstr "これは1文字目の@samp{*}が@samp{b}フラグをもつので、``b''スタイルのコメント終了シーケンス。"

#. type: table
#: original_texis/syntax.texi:377
msgid "This is a comment-end sequence for ``a'' style, because the newline character does not have the @samp{b} flag."
msgstr "これは改行文字が@samp{b}フラグをもたないので、``a''スタイルのコメント終了シーケンス。"

#. type: itemize
#: original_texis/syntax.texi:384
msgid "@samp{p} identifies an additional prefix character for Lisp syntax.  These characters are treated as whitespace when they appear between expressions.  When they appear within an expression, they are handled according to their usual syntax classes."
msgstr "@samp{p}はLisp構文にたいして追加のプレフィクス文字を識別する。これらが式の間に出現した際には空白文字として扱われる。これらが式の内部に出現したときは、それらの通常の構文クラスに応じて処理される。"

#. type: itemize
#: original_texis/syntax.texi:388
msgid "The function @code{backward-prefix-chars} moves back over these characters, as well as over characters whose primary syntax class is prefix (@samp{'}).  @xref{Motion and Syntax}."
msgstr "関数@code{backward-prefix-chars}はこれらの文字、同様にメインの構文クラスがプレフィクスであるような文字(@samp{'})を超えて後方に移動する。@ref{Motion and Syntax}を参照のこと。"

#. type: Plain text
#: original_texis/syntax.texi:395
msgid "In this section we describe functions for creating, accessing and altering syntax tables."
msgstr "このセクションでは構文テーブルの作成、アクセス、変更を行う関数を説明します。"

#. type: defun
#: original_texis/syntax.texi:396
#, no-wrap
msgid "make-syntax-table &optional table"
msgstr "make-syntax-table &optional table"

#. type: defun
#: original_texis/syntax.texi:400
msgid "This function creates a new syntax table.  If @var{table} is non-@code{nil}, the parent of the new syntax table is @var{table}; otherwise, the parent is the standard syntax table."
msgstr "この関数は新たに構文テーブルを作成する。@var{table}が非@code{nil}なら新たな構文テーブルの親は@var{table}、それ以外なら標準構文テーブルが親になる。"

#. type: defun
#: original_texis/syntax.texi:404
msgid "In the new syntax table, all characters are initially given the ``inherit'' (@samp{@@}) syntax class, i.e., their syntax is inherited from the parent table (@pxref{Syntax Class Table})."
msgstr "新たな構文テーブルでは最初はすべての文字に構文クラス``inherit''(@samp{@@})が与えられて、それらの構文は親テーブルから継承される(@ref{Syntax Class Table}を参照)。"

#. type: defun
#: original_texis/syntax.texi:406
#, no-wrap
msgid "copy-syntax-table &optional table"
msgstr "copy-syntax-table &optional table"

#. type: defun
#: original_texis/syntax.texi:411
msgid "This function constructs a copy of @var{table} and returns it.  If @var{table} is omitted or @code{nil}, it returns a copy of the standard syntax table.  Otherwise, an error is signaled if @var{table} is not a syntax table."
msgstr "この関数は@var{table}のコピーを構築してそれをリターンする。@var{table}が省略または@code{nil}なら標準構文テーブルのコピーをリターンする。それ以外の場合には、@var{table}が構文テーブルでなければエラーをシグナルする。"

#. type: deffn
#: original_texis/syntax.texi:413
#, no-wrap
msgid "Command modify-syntax-entry char syntax-descriptor  &optional table"
msgstr "Command modify-syntax-entry char syntax-descriptor  &optional table"

#. type: cindex
#: original_texis/syntax.texi:414
#, no-wrap
msgid "syntax entry, setting"
msgstr "syntax entry, setting"

#. type: deffn
#: original_texis/syntax.texi:420
msgid "This function sets the syntax entry for @var{char} according to @var{syntax-descriptor}.  @var{char} must be a character, or a cons cell of the form @code{(@var{min} . @var{max})}; in the latter case, the function sets the syntax entries for all characters in the range between @var{min} and @var{max}, inclusive."
msgstr "この関数は@var{syntax-descriptor}に応じて@var{char}の構文エントリーをセットする。@var{char}は文字、または@code{(@var{min} . @var{max})}という形式のコンスセルでなければならない。後者の場合には、この関数は@var{min}と@var{max} (両端を含む)の間のすべての文字にたいして構文エントリーをセットする。"

#. type: deffn
#: original_texis/syntax.texi:423
msgid "The syntax is changed only for @var{table}, which defaults to the current buffer's syntax table, and not in any other syntax table."
msgstr "構文は@var{table} (デフォルトはカレントバッファーの構文テーブル)にたいしてのみ変更されて、他のすべての構文テーブルにたいしては変更されない。"

#. type: deffn
#: original_texis/syntax.texi:429
msgid "The argument @var{syntax-descriptor} is a syntax descriptor, i.e., a string whose first character is a syntax class designator and whose second and subsequent characters optionally specify a matching character and syntax flags.  @xref{Syntax Descriptors}.  An error is signaled if @var{syntax-descriptor} is not a valid syntax descriptor."
msgstr "引数@var{syntax-descriptor}は構文記述子、すなわち1文字目が構文クラス指定子、2文字目以降がオプションでマッチング文字と構文フラグを指定する文字列。@ref{Syntax Descriptors}を参照のこと。@var{syntax-descriptor}が有効な構文記述子でなければエラーがシグナルされる。"

#. type: deffn
#: original_texis/syntax.texi:432
msgid "This function always returns @code{nil}.  The old syntax information in the table for this character is discarded."
msgstr "この関数は常に@code{nil}をリターンする。この文字にたいするテーブル内の古い構文情報は破棄される。"

#. type: exdent
#: original_texis/syntax.texi:435
#, no-wrap
msgid "@r{Examples:}"
msgstr "@r{例:}"

#. type: group
#: original_texis/syntax.texi:440
#, no-wrap
msgid ""
";; @r{Put the space character in class whitespace.}\n"
"(modify-syntax-entry ?\\s \" \")\n"
"     @result{} nil\n"
msgstr ""
";; @r{空白文字クラスのスペースをputする}\n"
"(modify-syntax-entry ?\\s \" \")\n"
"     @result{} nil\n"

#. type: group
#: original_texis/syntax.texi:447
#, no-wrap
msgid ""
";; @r{Make @samp{$} an open parenthesis character,}\n"
";;   @r{with @samp{^} as its matching close.}\n"
"(modify-syntax-entry ?$ \"(^\")\n"
"     @result{} nil\n"
msgstr ""
";; @r{@samp{$}を開カッコ文字にして、}\n"
";;   @r{@samp{^}を対応する閉カッコにする}\n"
"(modify-syntax-entry ?$ \"(^\")\n"
"     @result{} nil\n"

#. type: group
#: original_texis/syntax.texi:454
#, no-wrap
msgid ""
";; @r{Make @samp{^} a close parenthesis character,}\n"
";;   @r{with @samp{$} as its matching open.}\n"
"(modify-syntax-entry ?^ \")$\")\n"
"     @result{} nil\n"
msgstr ""
";; @r{@samp{^}を閉カッコ文字にして}\n"
";;   @r{@samp{$}を対応する開カッコにする}\n"
"(modify-syntax-entry ?^ \")$\")\n"
"     @result{} nil\n"

#. type: group
#: original_texis/syntax.texi:463
#, no-wrap
msgid ""
";; @r{Make @samp{/} a punctuation character,}\n"
";;   @r{the first character of a start-comment sequence,}\n"
";;   @r{and the second character of an end-comment sequence.}\n"
";;   @r{This is used in C mode.}\n"
"(modify-syntax-entry ?/ \". 14\")\n"
"     @result{} nil\n"
msgstr ""
";; @r{@samp{/}を区切り文字で}\n"
";;   @r{コメント開始シーケンス1文字目、}\n"
";;   @r{かつコメント終了シーケンス2文字目とする}\n"
";;   @r{これはCモードで使用される}\n"
"(modify-syntax-entry ?/ \". 14\")\n"
"     @result{} nil\n"

#. type: defun
#: original_texis/syntax.texi:467
#, no-wrap
msgid "char-syntax character"
msgstr "char-syntax character"

#. type: defun
#: original_texis/syntax.texi:472
msgid "This function returns the syntax class of @var{character}, represented by its designator character (@pxref{Syntax Class Table}).  This returns @emph{only} the class, not its matching character or syntax flags."
msgstr "この関数は指定子文字(@ref{Syntax Class Table}を参照)の表現で@var{character}の構文クラスをリターンする。これはクラス@emph{だけ}をリターンして、マッチング文字や構文フラグはリターンしない。"

#. type: defun
#: original_texis/syntax.texi:475
msgid "The following examples apply to C mode.  (We use @code{string} to make it easier to see the character returned by @code{char-syntax}.)"
msgstr "以下の例はCモードにたいして適用する( @code{char-syntax}がリターンする文字を確認しやすいように@code{string}を使用する)。"

#. type: group
#: original_texis/syntax.texi:481
#, no-wrap
msgid ""
";; Space characters have whitespace syntax class.\n"
"(string (char-syntax ?\\s))\n"
"     @result{} \" \"\n"
msgstr ""
";; スペース文字は空白文字構文クラスをもつ\n"
"(string (char-syntax ?\\s))\n"
"     @result{} \" \"\n"

#. type: group
#: original_texis/syntax.texi:489
#, no-wrap
msgid ""
";; Forward slash characters have punctuation syntax.\n"
";; Note that this @code{char-syntax} call does not reveal\n"
";; that it is also part of comment-start and -end sequences.\n"
"(string (char-syntax ?/))\n"
"     @result{} \".\"\n"
msgstr ""
";; スラッシュ文字は区切り文字構文をもつ。\n"
";; コメント開始やコメント終了シーケンスの一部でもある場合、\n"
";; @code{char-syntax}呼び出しはこれを明らかにしないことに注意。\n"
"(string (char-syntax ?/))\n"
"     @result{} \".\"\n"

#. type: group
#: original_texis/syntax.texi:497
#, no-wrap
msgid ""
";; Open parenthesis characters have open parenthesis syntax.\n"
";; Note that this @code{char-syntax} call does not reveal that\n"
";; it has a matching character, @samp{)}.\n"
"(string (char-syntax ?\\())\n"
"     @result{} \"(\"\n"
msgstr ""
";; 開カッコ文字は開カッコ構文をもつ。\n"
";; これがマッチング文字@samp{)}をもつことは\n"
";; @code{char-syntax}呼び出しでは自明ではないことに注意。\n"
"(string (char-syntax ?\\())\n"
"     @result{} \"(\"\n"

#. type: defun
#: original_texis/syntax.texi:502
#, no-wrap
msgid "set-syntax-table table"
msgstr "set-syntax-table table"

#. type: defun
#: original_texis/syntax.texi:505
msgid "This function makes @var{table} the syntax table for the current buffer.  It returns @var{table}."
msgstr "この関数はカレントバッファーの構文テーブルを@var{table}にする。これは@var{table}をリターンする。"

#. type: var{#1}
#: original_texis/syntax.texi:507 original_texis/syntax.texi:540
#, no-wrap
msgid "syntax-table"
msgstr "syntax-table"

#. type: defun
#: original_texis/syntax.texi:510
msgid "This function returns the current syntax table, which is the table for the current buffer."
msgstr "この関数はカレント構文テーブル(カレントバッファーのテーブル)をリターンする。"

#. type: deffn
#: original_texis/syntax.texi:512
#, no-wrap
msgid "Command describe-syntax &optional buffer"
msgstr "Command describe-syntax &optional buffer"

#. type: deffn
#: original_texis/syntax.texi:515
msgid "This command displays the contents of the syntax table of @var{buffer} (by default, the current buffer) in a help buffer."
msgstr "このコマンドは@var{buffer} (デフォルトはカレントバッファー)の構文テーブルのコンテンツをhelpバッファーに表示する。"

#. type: defmac
#: original_texis/syntax.texi:517
#, no-wrap
msgid "with-syntax-table table body@dots{}"
msgstr "with-syntax-table table body@dots{}"

#. type: defmac
#: original_texis/syntax.texi:521
msgid "This macro executes @var{body} using @var{table} as the current syntax table.  It returns the value of the last form in @var{body}, after restoring the old current syntax table."
msgstr "このマクロは@var{table}をカレント構文テーブルとして使用して@var{body}を実行する。これは古いカレント構文テーブルのリストア後に@var{body}の最後のフォームの値をリターンする。"

#. type: defmac
#: original_texis/syntax.texi:526
msgid "Since each buffer has its own current syntax table, we should make that more precise: @code{with-syntax-table} temporarily alters the current syntax table of whichever buffer is current at the time the macro execution starts.  Other buffers are not affected."
msgstr "各バッファーは独自にカレント構文テーブルをもつので、マクロはこれを入念に行うべきだろう。@code{with-syntax-table}はマクロの実行開始時には、そのときカレントのバッファーが何であれカレント構文テーブルを一時的に変更する。他のバッファーは影響を受けない。"

#. type: kindex
#: original_texis/syntax.texi:530
#, no-wrap
msgid "syntax-table @r{(text property)}"
msgstr "syntax-table @r{(text property)}"

#. type: Plain text
#: original_texis/syntax.texi:536
msgid "When the syntax table is not flexible enough to specify the syntax of a language, you can override the syntax table for specific character occurrences in the buffer, by applying a @code{syntax-table} text property.  @xref{Text Properties}, for how to apply text properties."
msgstr "ある言語の構文を指定するのに構文テーブルが十分に柔軟でないときは、 バッファー内に出現する特定の文字にたいしてテキストプロパティ@code{syntax-table}を適用することにより構文テーブルをオーバーライドできます。テキストプロパティを適用する方法については@ref{Text Properties}を参照してください。"

#. type: Plain text
#: original_texis/syntax.texi:538
msgid "The valid values of @code{syntax-table} text property are:"
msgstr "以下はテキストプロパティ@code{syntax-table}の有効な値です:"

#. type: table
#: original_texis/syntax.texi:544
msgid "If the property value is a syntax table, that table is used instead of the current buffer's syntax table to determine the syntax for the underlying text character."
msgstr "プロパティの値が構文テーブルなら、根底となるテキスト文字の構文を決定するカレントバッファーの構文テーブルのかわりにそのテーブルが使用される。"

#. type: code{#1}
#: original_texis/syntax.texi:545
#, no-wrap
msgid "(@var{syntax-code} . @var{matching-char})"
msgstr "(@var{syntax-code} . @var{matching-char})"

#. type: table
#: original_texis/syntax.texi:549
msgid "A cons cell of this format is a raw syntax descriptor (@pxref{Syntax Table Internals}), which directly specifies a syntax class for the underlying text character."
msgstr "この形式のコンスセルは根底となるテキスト文字の構文クラスを直接指定するraw構文テーブル(@ref{Syntax Table Internals}を参照)。"

#. type: code{#1}
#: original_texis/syntax.texi:550
#, no-wrap
msgid "nil"
msgstr "nil"

#. type: table
#: original_texis/syntax.texi:553
msgid "If the property is @code{nil}, the character's syntax is determined from the current syntax table in the usual way."
msgstr "このプロパティが@code{nil}なら、その文字の構文はカレント構文テーブルにより通常の方法で決定される。"

#. type: vindex
#: original_texis/syntax.texi:555 original_texis/syntax.texi:933
#, no-wrap
msgid "parse-sexp-lookup-properties"
msgstr "parse-sexp-lookup-properties"

#. type: defvar
#: original_texis/syntax.texi:559
msgid "If this is non-@code{nil}, the syntax scanning functions, like @code{forward-sexp}, pay attention to syntax text properties.  Otherwise they use only the current syntax table."
msgstr "これが非@code{nil}なら@code{forward-sexp}のような構文をスキャンする関数は、syntax-tableテキストプロパティに注意を払い、それ以外ならカレント構文テーブルだけを使用する。"

#. type: defvar
#: original_texis/syntax.texi:561
#, no-wrap
msgid "syntax-propertize-function"
msgstr "syntax-propertize-function"

#. type: defvar
#: original_texis/syntax.texi:566
msgid "This variable, if non-@code{nil}, should store a function for applying @code{syntax-table} properties to a specified stretch of text.  It is intended to be used by major modes to install a function which applies @code{syntax-table} properties in some mode-appropriate way."
msgstr "この変数が非@code{nil}なら特定のテキスト範囲にたいして@code{syntax-table}プロパティを適用する関数を格納すること。これはモードに適した方法で@code{syntax-table}プロパティを適用する関数をインストールするようにメジャーモードで使用されることを意図している。"

#. type: defvar
#: original_texis/syntax.texi:576
msgid "The function is called by @code{syntax-ppss} (@pxref{Position Parse}), and by Font Lock mode during syntactic fontification (@pxref{Syntactic Font Lock}).  It is called with two arguments, @var{start} and @var{end}, which are the starting and ending positions of the text on which it should act.  It is allowed to call @code{syntax-ppss} on any position before @var{end}.  However, it should not call @code{syntax-ppss-flush-cache}; so, it is not allowed to call @code{syntax-ppss} on some position and later modify the buffer at an earlier position."
msgstr "この関数は@code{syntax-ppss} (@ref{Position Parse}を参照)、および構文フォント表示化(@ref{Syntactic Font Lock}を参照)の間にFont Lockモードにより呼び出される。これは作用すべきテキスト部分の開始@var{start}と終了@var{end}という2つの引数で呼び出される。これは@var{end}の前の任意の位置で@code{syntax-ppss}を呼び出すことが許されている。しかし@code{syntax-ppss-flush-cache}を呼び出すべきではなく、そのためある位置で@code{syntax-ppss}を呼び出して後からバッファー内の前の位置を変更することは許されていない。"

#. type: defvar
#: original_texis/syntax.texi:578
#, no-wrap
msgid "syntax-propertize-extend-region-functions"
msgstr "syntax-propertize-extend-region-functions"

#. type: defvar
#: original_texis/syntax.texi:585
msgid "This abnormal hook is run by the syntax parsing code prior to calling @code{syntax-propertize-function}.  Its role is to help locate safe starting and ending buffer positions for passing to @code{syntax-propertize-function}.  For example, a major mode can add a function to this hook to identify multi-line syntactic constructs, and ensure that the boundaries do not fall in the middle of one."
msgstr "このアブノーマルフックは@code{syntax-propertize-function}呼び出しに先立ち構文解析コードにより実行される。これは@code{syntax-propertize-function}に渡すために安全なバッファーの開始と終了の位置を見つける助けをする役割をもつ。たとえばメジャーモードは複数行の構文構成を識別して、境界が複数行の中間にならないようにこのフックに関数を追加できる。"

#. type: defvar
#: original_texis/syntax.texi:591
msgid "Each function in this hook should accept two arguments, @var{start} and @var{end}.  It should return either a cons cell of two adjusted buffer positions, @code{(@var{new-start} . @var{new-end})}, or @code{nil} if no adjustment is necessary.  The hook functions are run in turn, repeatedly, until they all return @code{nil}."
msgstr "このフック内の各関数は引数@var{start}と@var{end}を受け取ること。これは2つのバッファー位置を調整するコンスセル@code{(@var{new-start} . @var{new-end})}、調整が必要なければ@code{nil}をリターンするべきである。フック関数はそれらすべてが@code{nil}をリターンするまで順番に繰り返し実行される。"

#. type: cindex
#: original_texis/syntax.texi:595
#, no-wrap
msgid "moving across syntax classes"
msgstr "moving across syntax classes"

#. type: cindex
#: original_texis/syntax.texi:596
#, no-wrap
msgid "skipping characters of certain syntax"
msgstr "skipping characters of certain syntax"

#. type: Plain text
#: original_texis/syntax.texi:600
msgid "This section describes functions for moving across characters that have certain syntax classes."
msgstr "このセクションでは、特定の構文クラスをもつ文字間を横断して移動する関数を説明します。"

#. type: defun
#: original_texis/syntax.texi:601
#, no-wrap
msgid "skip-syntax-forward syntaxes &optional limit"
msgstr "skip-syntax-forward syntaxes &optional limit"

#. type: defun
#: original_texis/syntax.texi:607
msgid "This function moves point forward across characters having syntax classes mentioned in @var{syntaxes} (a string of syntax class characters).  It stops when it encounters the end of the buffer, or position @var{limit} (if specified), or a character it is not supposed to skip."
msgstr "この関数は@var{syntaxes}で指定された構文クラス(構文クラスの文字列)をもつ文字を横断してポイントを前方に移動する。バッファー終端か、(与えられた場合は)位置@var{limit}に到達、もしくはスキップしない文字に達した際に停止する。"

#. type: defun
#: original_texis/syntax.texi:610 original_texis/syntax.texi:623
msgid "If @var{syntaxes} starts with @samp{^}, then the function skips characters whose syntax is @emph{not} in @var{syntaxes}."
msgstr "@var{syntaxes}が@samp{^}で始まる場合には、この関数は構文が@var{syntaxes}では@emph{ない}文字をスキップする。"

#. type: defun
#: original_texis/syntax.texi:613
msgid "The return value is the distance traveled, which is a nonnegative integer."
msgstr "リターン値は移動した距離を表す非負の整数。"

#. type: defun
#: original_texis/syntax.texi:615
#, no-wrap
msgid "skip-syntax-backward syntaxes &optional limit"
msgstr "skip-syntax-backward syntaxes &optional limit"

#. type: defun
#: original_texis/syntax.texi:620
msgid "This function moves point backward across characters whose syntax classes are mentioned in @var{syntaxes}.  It stops when it encounters the beginning of the buffer, or position @var{limit} (if specified), or a character it is not supposed to skip."
msgstr "この関数は@var{syntaxes}で指定された構文クラスをもつ文字を横断してポイントを後方に移動する。バッファー先頭か、(与えられた場合は)位置@var{limit}に到達、もしくはスキップしない文字に達した際に停止する。"

#. type: defun
#: original_texis/syntax.texi:626
msgid "The return value indicates the distance traveled.  It is an integer that is zero or less."
msgstr "リターン値は移動した距離を表す0以下の整数。"

#. type: defun
#: original_texis/syntax.texi:628
#, no-wrap
msgid "backward-prefix-chars"
msgstr "backward-prefix-chars"

#. type: defun
#: original_texis/syntax.texi:632
msgid "This function moves point backward over any number of characters with expression prefix syntax.  This includes both characters in the expression prefix syntax class, and characters with the @samp{p} flag."
msgstr "この関数は式プレフィクス構文の任意個数の文字を横断して後方にポイントを移動する。これには式プレフィクス構文クラスとフラグ@samp{p}の文字の両方が含まれる。"

#. type: cindex
#: original_texis/syntax.texi:636
#, no-wrap
msgid "parsing expressions"
msgstr "parsing expressions"

#. type: cindex
#: original_texis/syntax.texi:637
#, no-wrap
msgid "scanning expressions"
msgstr "scanning expressions"

#. type: Plain text
#: original_texis/syntax.texi:648
msgid "This section describes functions for parsing and scanning balanced expressions.  We will refer to such expressions as @dfn{sexps}, following the terminology of Lisp, even though these functions can act on languages other than Lisp.  Basically, a sexp is either a balanced parenthetical grouping, a string, or a symbol (i.e., a sequence of characters whose syntax is either word constituent or symbol constituent).  However, characters in the expression prefix syntax class (@pxref{Syntax Class Table}) are treated as part of the sexp if they appear next to it."
msgstr "このセクションではバランスのとれた式の解析やスキャンを行う関数を説明します。たとえこれらの関数がLisp以外の言語にたいして作用可能であったとしても、Lisp用語にしたがってそのような式のことを@dfn{sexps}という用語で参照することにします。基本的にsexpはバランスのとれたカッコによるグループ化、または文字列、シンボル(構文が単語構成要素かシンボル構成要素である文字シーケンス)のいずれかです。しかし式プレフィクス構文(@ref{Syntax Class Table}を参照)の文字は、それらがsexpに隣接する場合にはsexpの一部として扱われます。"

#. type: Plain text
#: original_texis/syntax.texi:653
msgid "The syntax table controls the interpretation of characters, so these functions can be used for Lisp expressions when in Lisp mode and for C expressions when in C mode.  @xref{List Motion}, for convenient higher-level functions for moving over balanced expressions."
msgstr "構文テーブルは文字の解釈を制御するので、これらの関数はLispモードでのLisp式、CモードでのCの式にたいして使用できます。バランスのとれた式にたいして有用な高レベル関数については@ref{List Motion}を参照してください。"

#. type: Plain text
#: original_texis/syntax.texi:660
msgid "A character's syntax controls how it changes the state of the parser, rather than describing the state itself.  For example, a string delimiter character toggles the parser state between in-string and in-code, but the syntax of characters does not directly say whether they are inside a string.  For example (note that 15 is the syntax code for generic string delimiters),"
msgstr "ある文字の構文はパーサー自身の状態の記述ではなくパーサー状態の変更方法を制御します。たとえば文字列区切り文字はin-stringとin-codeの間でパーサー状態をトグルしますが、文字の構文が直接文字列内部にあるかどうかを告げることはありません。たとえば(15は汎用文字列区切りの構文コードであることに注意)、"

#. type: example
#: original_texis/syntax.texi:663
#, no-wrap
msgid "(put-text-property 1 9 'syntax-table '(15 . nil))\n"
msgstr "(put-text-property 1 9 'syntax-table '(15 . nil))\n"

#. type: Plain text
#: original_texis/syntax.texi:669
msgid "does not tell Emacs that the first eight chars of the current buffer are a string, but rather that they are all string delimiters.  As a result, Emacs treats them as four consecutive empty string constants."
msgstr "これはEmacsにたいしてカレントバッファーの最初の8文字が文字列であることを告げますが、それらはすべて文字列区切りです。結果としてEmacsはそれらを連続する4つの空文字列定数として扱います。"

#. type: node
#: original_texis/syntax.texi:676 original_texis/syntax.texi:678
#, no-wrap
msgid "Motion via Parsing"
msgstr "Motion via Parsing"

#. type: menuentry
#: original_texis/syntax.texi:676
msgid "Motion functions that work by parsing."
msgstr "パースにより機能する移動関数。"

#. type: node
#: original_texis/syntax.texi:676 original_texis/syntax.texi:744
#, no-wrap
msgid "Position Parse"
msgstr "Position Parse"

#. type: menuentry
#: original_texis/syntax.texi:676
msgid "Determining the syntactic state of a position."
msgstr "ある位置の構文状態を判断する。"

#. type: subsection
#: original_texis/syntax.texi:676 original_texis/syntax.texi:790
#: original_texis/syntax.texi:791
#, no-wrap
msgid "Parser State"
msgstr "Parser State"

#. type: menuentry
#: original_texis/syntax.texi:676
msgid "How Emacs represents a syntactic state."
msgstr "Emacsが構文状態を表す方法。"

#. type: subsection
#: original_texis/syntax.texi:676 original_texis/syntax.texi:877
#: original_texis/syntax.texi:878
#, no-wrap
msgid "Low-Level Parsing"
msgstr "Low-Level Parsing"

#. type: menuentry
#: original_texis/syntax.texi:676
msgid "Parsing across a specified region."
msgstr "指定されたリージョンを横断するパース。"

#. type: node
#: original_texis/syntax.texi:676 original_texis/syntax.texi:915
#, no-wrap
msgid "Control Parsing"
msgstr "Control Parsing"

#. type: menuentry
#: original_texis/syntax.texi:676
msgid "Parameters that affect parsing."
msgstr "パースに影響するパラメーター。"

#. type: subsection
#: original_texis/syntax.texi:679
#, no-wrap
msgid "Motion Commands Based on Parsing"
msgstr "Motion Commands Based on Parsing"

#. type: cindex
#: original_texis/syntax.texi:680
#, no-wrap
msgid "motion based on parsing"
msgstr "motion based on parsing"

#. type: Plain text
#: original_texis/syntax.texi:684
msgid "This section describes simple point-motion functions that operate based on parsing expressions."
msgstr "このセクションでは式のパースにもとづいて処理を行うシンプルなポイント移動関数を説明します。"

#. type: defun
#: original_texis/syntax.texi:685
#, no-wrap
msgid "scan-lists from count depth"
msgstr "scan-lists from count depth"

#. type: defun
#: original_texis/syntax.texi:689
msgid "This function scans forward @var{count} balanced parenthetical groupings from position @var{from}.  It returns the position where the scan stops.  If @var{count} is negative, the scan moves backwards."
msgstr "この関数は位置@var{from}からバランスのとれたカッコのグループを前方に@var{count}個スキャンする。これはスキャンが停止した位置をリターンする。@var{count}が負ならスキャンは後方に移動する。"

#. type: defun
#: original_texis/syntax.texi:697
msgid "If @var{depth} is nonzero, treat the starting position as being @var{depth} parentheses deep.  The scanner moves forward or backward through the buffer until the depth changes to zero @var{count} times.  Hence, a positive value for @var{depth} has the effect of moving out @var{depth} levels of parenthesis from the starting position, while a negative @var{depth} has the effect of moving deeper by @var{-depth} levels of parenthesis."
msgstr "@var{depth}が非0なら開始位置のカッコのネスト深さを@var{depth}として扱う。スキャナーはネスト深さが0になるまで繰り返して@var{count}回、前方か後方に移動する。そのため正の@var{depth}は開始位置からカッコを@var{depth}レベル抜け出して移動する効果があり、負の@var{depth}はカッコが@var{depth}レベル深くなるよう移動する効果をもつ。"

#. type: defun
#: original_texis/syntax.texi:700 original_texis/syntax.texi:714
msgid "Scanning ignores comments if @code{parse-sexp-ignore-comments} is non-@code{nil}."
msgstr "@code{parse-sexp-ignore-comments}が非@code{nil}ならスキャンはコメントを無視する。"

#. type: defun
#: original_texis/syntax.texi:705
msgid "If the scan reaches the beginning or end of the accessible part of the buffer before it has scanned over @var{count} parenthetical groupings, the return value is @code{nil} if the depth at that point is zero; if the depth is non-zero, a @code{scan-error} error is signaled."
msgstr "@var{count}個のカッコのグループをスキャンする前にスキャンがバッファーのアクセス可能範囲の先頭か終端に達した場合には、そのポイントのネスト深さが0なら値@code{nil}をリターンする。ネスト深さが非0なら@code{scan-error}エラーをシグナルする。"

#. type: defun
#: original_texis/syntax.texi:707
#, no-wrap
msgid "scan-sexps from count"
msgstr "scan-sexps from count"

#. type: defun
#: original_texis/syntax.texi:711
msgid "This function scans forward @var{count} sexps from position @var{from}.  It returns the position where the scan stops.  If @var{count} is negative, the scan moves backwards."
msgstr "この関数は位置@var{from}から@var{count}個のsexpを前方にスキャンする。これはスキャンが停止した位置をリターンする。@var{count}が負ならスキャンは後方へ移動する。"

#. type: defun
#: original_texis/syntax.texi:719
msgid "If the scan reaches the beginning or end of (the accessible part of) the buffer while in the middle of a parenthetical grouping, an error is signaled.  If it reaches the beginning or end between groupings but before count is used up, @code{nil} is returned."
msgstr "カッコのグループの中間でバッファー(のアクセス可能範囲)の先頭か終端に達したらエラーをシグナルする。@var{count}個を消費する前にカッコのグループの間でバッファーの先頭か終端に達したら@code{nil}をリターンする。"

#. type: defun
#: original_texis/syntax.texi:721
#, no-wrap
msgid "forward-comment count"
msgstr "forward-comment count"

#. type: defun
#: original_texis/syntax.texi:733
msgid "This function moves point forward across @var{count} complete comments (that is, including the starting delimiter and the terminating delimiter if any), plus any whitespace encountered on the way.  It moves backward if @var{count} is negative.  If it encounters anything other than a comment or whitespace, it stops, leaving point at the place where it stopped.  This includes (for instance) finding the end of a comment when moving forward and expecting the beginning of one.  The function also stops immediately after moving over the specified number of complete comments.  If @var{count} comments are found as expected, with nothing except whitespace between them, it returns @code{t}; otherwise it returns @code{nil}."
msgstr "この関数は@var{count}個の完全なコメント(すなわち、もしあれば開始区切りと終了区切りを含む)、および途中で遭遇する任意の空白文字を横断してポイントを前方に移動する。@var{count}が負なら後方に移動する。コメントまたは空白文字以外のものに遭遇したら停止して停止位置にポイントを残す。これには、(たとえば)前方に移動してコメント開始を調べる際にコメント終了を探すことも含まれる。この関数は指定された個数の完全なコメントを横断して移動した後にも即座に停止する。空白以外のものがコメント間に存在せずに期待どおり@var{count}個のコメントが見つかったら@code{t}、それ以外は@code{nil}をリターンする。"

#. type: defun
#: original_texis/syntax.texi:737
msgid "This function cannot tell whether the comments it traverses are embedded within a string.  If they look like comments, it treats them as comments."
msgstr "この関数はコメントを横断する際に、それが文字列内に埋め込まれているかどうか区別できない。それらがコメントのように見えればコメントとして扱われる。"

#. type: defun
#: original_texis/syntax.texi:742
msgid "To move forward over all comments and whitespace following point, use @code{(forward-comment (buffer-size))}.  @code{(buffer-size)} is a good argument to use, because the number of comments in the buffer cannot exceed that many."
msgstr "ポイントの後のすべてのコメントと空白文字を飛び越して移動するには@code{(forward-comment (buffer-size))}を使用する。バッファー内のコメント数は@code{(buffer-size)}を超えることはできないので、これは引数としての使用に適している。"

#. type: subsection
#: original_texis/syntax.texi:745
#, no-wrap
msgid "Finding the Parse State for a Position"
msgstr "Finding the Parse State for a Position"

#. type: cindex
#: original_texis/syntax.texi:746
#, no-wrap
msgid "parse state for a position"
msgstr "parse state for a position"

#. type: Plain text
#: original_texis/syntax.texi:751
msgid "For syntactic analysis, such as in indentation, often the useful thing is to compute the syntactic state corresponding to a given buffer position.  This function does that conveniently."
msgstr "インデントのような構文分析にとっては、与えられたバッファー位置に応じた構文状態の計算が有用なことが多々あります。それを手軽に行うのが以下の関数です。"

#. type: defun
#: original_texis/syntax.texi:752
#, no-wrap
msgid "syntax-ppss &optional pos"
msgstr "syntax-ppss &optional pos"

#. type: defun
#: original_texis/syntax.texi:755
msgid "This function returns the parser state that the parser would reach at position @var{pos} starting from the beginning of the buffer."
msgstr "この関数はパーサーがバッファー先頭から開始して位置@var{pos}で停止するだろうというパーサー状態をリターンする。"

#. type: iftex
#: original_texis/syntax.texi:757
msgid "See the next section for"
msgstr "パーサー状態の説明は次のセクションを参照のこと"

#. type: ifnottex
#: original_texis/syntax.texi:760
msgid "@xref{Parser State},"
msgstr "パーサー状態の説明は@ref{Parser State}を参照のこと"

#. type: defun
#: original_texis/syntax.texi:762
msgid "for a description of the parser state."
msgstr "。"

#. type: defun
#: original_texis/syntax.texi:770
msgid "The return value is the same as if you call the low-level parsing function @code{parse-partial-sexp} to parse from the beginning of the buffer to @var{pos} (@pxref{Low-Level Parsing}).  However, @code{syntax-ppss} uses a cache to speed up the computation.  Due to this optimization, the second value (previous complete subexpression)  and sixth value (minimum parenthesis depth) in the returned parser state are not meaningful."
msgstr "リターン値はバッファー先頭から@var{pos}までパースするために低レベル関数@code{parse-partial-sexp}(@ref{Low-Level Parsing}を参照)を呼び出した場合と同じようになる。しかし@code{syntax-ppss}は計算速度向上のためにキャッシュを使用する。この最適化のために、リターンされるパーサー状態のうち2つ目の値(前の完全な部分式)と6つ目の値(最小のカッコ深さ)は意味をもたない。"

#. type: defun
#: original_texis/syntax.texi:780
msgid "This function has a side effect: it adds a buffer-local entry to @code{before-change-functions} (@pxref{Change Hooks}) for @code{syntax-ppss-flush-cache} (see below).  This entry keeps the cache consistent as the buffer is modified.  However, the cache might not be updated if @code{syntax-ppss} is called while @code{before-change-functions} is temporarily let-bound, or if the buffer is modified without running the hook, such as when using @code{inhibit-modification-hooks}.  In those cases, it is necessary to call @code{syntax-ppss-flush-cache} explicitly."
msgstr "この関数は@code{syntax-ppss-flush-cache} (以下参照)にたいして、@code{before-change-functions} (@ref{Change Hooks}を参照)にバッファーローカルなエントリーを追加するという副作用をもつ。このエントリーはバッファー変更にたいしてキャッシュの一貫性を保つ。とはいえ@code{before-change-functions}が一時的にletでバインドされている間に@code{syntax-ppss}が呼び出された場合、または@code{inhibit-modification-hooks}使用時のようにバッファーがフックを実行せずに変更される場合にはキャッシュは更新されないかもしれない。そのような場合には明示的に@code{syntax-ppss-flush-cache}を呼び出す必要がある。"

#. type: defun
#: original_texis/syntax.texi:782
#, no-wrap
msgid "syntax-ppss-flush-cache beg &rest ignored-args"
msgstr "syntax-ppss-flush-cache beg &rest ignored-args"

#. type: defun
#: original_texis/syntax.texi:788
msgid "This function flushes the cache used by @code{syntax-ppss}, starting at position @var{beg}.  The remaining arguments, @var{ignored-args}, are ignored; this function accepts them so that it can be directly used on hooks such as @code{before-change-functions} (@pxref{Change Hooks})."
msgstr "この関数は@code{syntax-ppss}が使用するキャッシュを位置@var{beg}からフラッシュする。残りの引数@var{ignored-args}は無視される。@code{before-change-functions} (@ref{Change Hooks}を参照)のような関数で直接使用できるように、この関数はそれらの引数を受け入れる。"

#. type: cindex
#: original_texis/syntax.texi:792
#, no-wrap
msgid "parser state"
msgstr "parser state"

#. type: Plain text
#: original_texis/syntax.texi:798
msgid "A @dfn{parser state} is a list of ten elements describing the state of the syntactic parser, after it parses the text between a specified starting point and a specified end point in the buffer.  Parsing functions such as @code{syntax-ppss}"
msgstr "@dfn{パーサー状態(parser state)}とはバッファー内の指定された開始位置と終了位置の間のテキストをパースした後の構文パーサーの状態を記述する10要素のリストです。@code{syntax-ppss}のようなパース関数"

#. type: ifnottex
#: original_texis/syntax.texi:800
msgid "(@pxref{Position Parse})"
msgstr "(@ref{Position Parse}を参照)"

#. type: Plain text
#: original_texis/syntax.texi:803
msgid "return a parser state as the value.  Some parsing functions accept a parser state as an argument, for resuming parsing."
msgstr "は値としてパーサー状態をリターンします。いくつかのパース関数はパースを再開するために引数としてパーサー状態を受け取ります。"

#. type: Plain text
#: original_texis/syntax.texi:805
msgid "Here are the meanings of the elements of the parser state:"
msgstr "以下はパーサー状態の要素の意味です:"

#. type: enumerate
#: original_texis/syntax.texi:811
msgid "The depth in parentheses, counting from 0.  @strong{Warning:} this can be negative if there are more close parens than open parens between the parser's starting point and end point."
msgstr "0から数えたカッコの深さ。@strong{警告:} パーサーの開始位置と終了位置の間に開カッコより多くの閉カッコがあれば負になることもある。"

#. type: cindex
#: original_texis/syntax.texi:813
#, no-wrap
msgid "innermost containing parentheses"
msgstr "innermost containing parentheses"

#. type: enumerate
#: original_texis/syntax.texi:816
msgid "The character position of the start of the innermost parenthetical grouping containing the stopping point; @code{nil} if none."
msgstr "停止位置を含む最内のカッコグループの開始文字位置。なければ@code{nil}。"

#. type: cindex
#: original_texis/syntax.texi:818
#, no-wrap
msgid "previous complete subexpression"
msgstr "previous complete subexpression"

#. type: enumerate
#: original_texis/syntax.texi:821
msgid "The character position of the start of the last complete subexpression terminated; @code{nil} if none."
msgstr "最後の終端された完全な部分式の開始文字位置。なければ@code{nil}。"

#. type: cindex
#: original_texis/syntax.texi:823
#, no-wrap
msgid "inside string"
msgstr "inside string"

#. type: enumerate
#: original_texis/syntax.texi:827
msgid "Non-@code{nil} if inside a string.  More precisely, this is the character that will terminate the string, or @code{t} if a generic string delimiter character should terminate it."
msgstr "文字列内部なら非@code{nil}。より正確には文字列を終端させるであろう文字、または汎用文字列区切りが終端すべきような場合には@code{t}。"

#. type: cindex
#: original_texis/syntax.texi:829
#, no-wrap
msgid "inside comment"
msgstr "inside comment"

#. type: enumerate
#: original_texis/syntax.texi:833
msgid "@code{t} if inside a non-nestable comment (of any comment style; @pxref{Syntax Flags}); or the comment nesting level if inside a comment that can be nested."
msgstr "ネスト不可なコメント(または任意のコメントスタイル。@ref{Syntax Flags}を参照)の内部なら@code{t}、ネスト可なコメントの内部ならコメントのネストレベル。"

#. type: cindex
#: original_texis/syntax.texi:835
#, no-wrap
msgid "quote character"
msgstr "quote character"

#. type: enumerate
#: original_texis/syntax.texi:837
msgid "@code{t} if the end point is just after a quote character."
msgstr "終了位置がクォート文字直後なら@code{t}。"

#. type: enumerate
#: original_texis/syntax.texi:840
msgid "The minimum parenthesis depth encountered during this scan."
msgstr "当該スキャン中に遭遇した最小のカッコ深さ。"

#. type: enumerate
#: original_texis/syntax.texi:846
msgid "What kind of comment is active: @code{nil} if not in a comment or in a comment of style @samp{a}; 1 for a comment of style @samp{b}; 2 for a comment of style @samp{c}; and @code{syntax-table} for a comment that should be ended by a generic comment delimiter character."
msgstr "アクティブなコメントの種類。コメント以外、またはスタイル@samp{a}のコメント内なら@code{nil}、スタイル@samp{b}のコメントなら1、スタイル@samp{c}のコメントなら2、汎用コメント区切り文字で終端されるべきコメントなら@code{syntax-table}。"

#. type: enumerate
#: original_texis/syntax.texi:852
msgid "The string or comment start position.  While inside a comment, this is the position where the comment began; while inside a string, this is the position where the string began.  When outside of strings and comments, this element is @code{nil}."
msgstr "文字列やコメントの開始位置。コメント内部ならコメントが始まる位置。文字列内部なら文字列が始まる位置。文字列やコメントの外部ならこの要素は@code{nil}。"

#. type: enumerate
#: original_texis/syntax.texi:857
msgid "Internal data for continuing the parsing.  The meaning of this data is subject to change; it is used if you pass this list as the @var{state} argument to another call."
msgstr "パースを継続するための内部データ。このデータのもつ意味は変更されるかもしれない。これは他の呼び出しの@var{state}引数としてこのリストを渡す場合に使用される。"

#. type: Plain text
#: original_texis/syntax.texi:863
msgid "Elements 1, 2, and 6 are ignored in a state which you pass as an argument to continue parsing, and elements 8 and 9 are used only in trivial cases.  Those elements are mainly used internally by the parser code."
msgstr "パース継続のために渡す場合には要素1、2、6は無視されて要素8と9は特に重要ではない場面でのみ使用されます。これらの要素は主にパーサーコードにより内部的に使用されます。"

#. type: Plain text
#: original_texis/syntax.texi:866
msgid "One additional piece of useful information is available from a parser state using this function:"
msgstr "以下の関数を使用することにより追加でさらにパーサー状態から有用な情報を利用できます:"

#. type: defun
#: original_texis/syntax.texi:867
#, no-wrap
msgid "syntax-ppss-toplevel-pos state"
msgstr "syntax-ppss-toplevel-pos state"

#. type: defun
#: original_texis/syntax.texi:872
msgid "This function extracts, from parser state @var{state}, the last position scanned in the parse which was at top level in grammatical structure.  ``At top level'' means outside of any parentheses, comments, or strings."
msgstr "この関数はパーサー状態@var{state}から文法構造上トップレベルでのパースでのスキャンした最後の位置をリターンする。``トップレベル''とはすべてのカッコ、コメント、文字列の外部であることを意味する。"

#. type: defun
#: original_texis/syntax.texi:875
msgid "The value is @code{nil} if @var{state} represents a parse which has arrived at a top level position."
msgstr "@var{state}がトップレベルの位置に到達したパースを表す場合には値は@code{nil}。"

#. type: Plain text
#: original_texis/syntax.texi:883
msgid "The most basic way to use the expression parser is to tell it to start at a given position with a certain state, and parse up to a specified end position."
msgstr "式パーサーを使用するもっとも基本的な方法は特定の状態で与えられた位置からパースを開始して、指定した位置でパースを終了するよう指示する方法です。"

#. type: defun
#: original_texis/syntax.texi:884
#, no-wrap
msgid "parse-partial-sexp start limit &optional target-depth stop-before state stop-comment"
msgstr "parse-partial-sexp start limit &optional target-depth stop-before state stop-comment"

#. type: defun
#: original_texis/syntax.texi:889
msgid "This function parses a sexp in the current buffer starting at @var{start}, not scanning past @var{limit}.  It stops at position @var{limit} or when certain criteria described below are met, and sets point to the location where parsing stops.  It returns a parser state"
msgstr "この関数はカレントバッファー内のsexpを、@var{start}から開始して@var{limit}を超えてスキャンしないようパースを行う。これは位置@var{limit}、または以下に記述する特定の条件に適合したら停止してパースが停止した位置にポイントをセットする。これはポイントが停止した位置でのパースの状態を記述するパーサー状態"

#. type: ifinfo
#: original_texis/syntax.texi:891
msgid "(@pxref{Parser State})"
msgstr "(@ref{Parser State}を参照)"

#. type: defun
#: original_texis/syntax.texi:893
msgid "describing the status of the parse at the point where it stops."
msgstr "をリターンする。"

#. type: cindex
#: original_texis/syntax.texi:894
#, no-wrap
msgid "parenthesis depth"
msgstr "parenthesis depth"

#. type: defun
#: original_texis/syntax.texi:898
msgid "If the third argument @var{target-depth} is non-@code{nil}, parsing stops if the depth in parentheses becomes equal to @var{target-depth}.  The depth starts at 0, or at whatever is given in @var{state}."
msgstr "3つ目の引数@var{target-depth}が非@code{nil}の場合には、カッコの深さが@var{target-depth}と等しくなったらパースを停止する。この深さは0、または@var{state}内で与えられる深さなら何であれそこから開始される。"

#. type: defun
#: original_texis/syntax.texi:905
msgid "If the fourth argument @var{stop-before} is non-@code{nil}, parsing stops when it comes to any character that starts a sexp.  If @var{stop-comment} is non-@code{nil}, parsing stops when it comes to the start of a comment.  If @var{stop-comment} is the symbol @code{syntax-table}, parsing stops after the start of a comment or a string, or the end of a comment or a string, whichever comes first."
msgstr "4つ目の引数@var{stop-before}が非@code{nil}の場合には、sexpの開始となる任意の文字に到達したらパースは停止する。@var{stop-comment}が非@code{nil}ならコメントの開始でパースは停止する。@var{stop-comment}がシンボル@code{syntax-table}ならコメントか文字列の開始の後、またはコメントか文字列の終了のいずれか先に到達した方でパースは停止する。"

#. type: defun
#: original_texis/syntax.texi:913
msgid "If @var{state} is @code{nil}, @var{start} is assumed to be at the top level of parenthesis structure, such as the beginning of a function definition.  Alternatively, you might wish to resume parsing in the middle of the structure.  To do this, you must provide a @var{state} argument that describes the initial status of parsing.  The value returned by a previous call to @code{parse-partial-sexp} will do nicely."
msgstr "@var{state}が@code{nil}なら、@var{start}は関数定義先頭のようなカッコ構造のトップレベルであるとみなされる。かわりにこの構造の中間でパースを再開したいと思うかもしれない。これを行うにはパースの初期状態を記述する@var{state}引数を提供しなければならない。前の@code{parse-partial-sexp}呼び出しでリターンされた値で、これをうまく行うことができるだろう。"

#. type: subsection
#: original_texis/syntax.texi:916
#, no-wrap
msgid "Parameters to Control Parsing"
msgstr "Parameters to Control Parsing"

#. type: cindex
#: original_texis/syntax.texi:917
#, no-wrap
msgid "parsing, control parameters"
msgstr "parsing, control parameters"

#. type: defvar
#: original_texis/syntax.texi:919
#, no-wrap
msgid "multibyte-syntax-as-symbol"
msgstr "multibyte-syntax-as-symbol"

#. type: defvar
#: original_texis/syntax.texi:924
msgid "If this variable is non-@code{nil}, @code{scan-sexps} treats all non-@acronym{ASCII} characters as symbol constituents regardless of what the syntax table says about them.  (However, text properties can still override the syntax.)"
msgstr "この変数が非@code{nil}なら構文テーブルがそれらについて何と言っているかに関わらず、@code{scan-sexps}はすべての非@acronym{ASCII}文字をシンボル構成要素として扱う(とはいえ依然としてテキストプロパティは構文をオーバーラードできるが)。"

#. type: defopt
#: original_texis/syntax.texi:926
#, no-wrap
msgid "parse-sexp-ignore-comments"
msgstr "parse-sexp-ignore-comments"

#. type: cindex
#: original_texis/syntax.texi:927
#, no-wrap
msgid "skipping comments"
msgstr "skipping comments"

#. type: defopt
#: original_texis/syntax.texi:931
msgid "If the value is non-@code{nil}, then comments are treated as whitespace by the functions in this section and by @code{forward-sexp}, @code{scan-lists} and @code{scan-sexps}."
msgstr "この値が非@code{nil}ならこのセクション内の関数、および@code{forward-sexp}、@code{scan-lists}、@code{scan-sexps}はコメントを空白文字として扱う。"

#. type: Plain text
#: original_texis/syntax.texi:936
msgid "The behavior of @code{parse-partial-sexp} is also affected by @code{parse-sexp-lookup-properties} (@pxref{Syntax Properties})."
msgstr "@code{parse-partial-sexp}の振る舞いも@code{parse-sexp-lookup-properties}の影響を受けます(@ref{Syntax Properties}を参照)。"

#. type: defvar
#: original_texis/syntax.texi:937
#, no-wrap
msgid "comment-end-can-be-escaped"
msgstr "comment-end-can-be-escaped"

#. type: defvar
#: original_texis/syntax.texi:943
msgid "If this buffer local variable is non-@code{nil}, a single character which usually terminates a comment doesn't do so when that character is escaped.  This is used in C and C++ Modes, where line comments starting with @samp{//} can be continued onto the next line by escaping the newline with @samp{\\}."
msgstr "このバッファーローカル変数が非@code{nil}なら、通常ならコメントを終端するような単一の文字は、エスケープ時にはコメントを終端しない。これはCとC++のモードにおいて@samp{\\}でエスケープされた改行により、@samp{//}で開始される行コメントを次行に継続させるために使用される。"

#. type: Plain text
#: original_texis/syntax.texi:947
msgid "You can use @code{forward-comment} to move forward or backward over one comment or several comments."
msgstr "1つ、または複数のコメントを横断して前方や後方に移動するには@code{forward-comment}を使用できます。"

#. type: cindex
#: original_texis/syntax.texi:950
#, no-wrap
msgid "syntax table internals"
msgstr "syntax table internals"

#. type: Plain text
#: original_texis/syntax.texi:958
msgid "Syntax tables are implemented as char-tables (@pxref{Char-Tables}), but most Lisp programs don't work directly with their elements.  Syntax tables do not store syntax data as syntax descriptors (@pxref{Syntax Descriptors}); they use an internal format, which is documented in this section.  This internal format can also be assigned as syntax properties (@pxref{Syntax Properties})."
msgstr "構文テーブルは文字テーブル(@ref{Char-Tables}を参照)として実装されていますが、ほとんどのLispプログラムが直接それらの要素に作用することはありません。構文テーブルは構文データとして構文記述子を格納しません(@ref{Syntax Descriptors}を参照)。それらは内部的なフォーマットを使用しており、それについてはこのセクションで説明します。この内部的フォーマットは構文プロパティとして割り当てることもできます(@ref{Syntax Properties}を参照)。"

#. type: cindex
#: original_texis/syntax.texi:959
#, no-wrap
msgid "syntax code"
msgstr "syntax code"

#. type: cindex
#: original_texis/syntax.texi:960
#, no-wrap
msgid "raw syntax descriptor"
msgstr "raw syntax descriptor"

#. type: Plain text
#: original_texis/syntax.texi:967
msgid "Each entry in a syntax table is a @dfn{raw syntax descriptor}: a cons cell of the form @code{(@var{syntax-code} . @var{matching-char})}.  @var{syntax-code} is an integer which encodes the syntax class and syntax flags, according to the table below.  @var{matching-char}, if non-@code{nil}, specifies a matching character (similar to the second character in a syntax descriptor)."
msgstr "構文テーブル内の各要素は@dfn{raw構文記述子(raw syntax descriptor)}という@code{(@var{syntax-code} . @var{matching-char})}という形式のコンスセルです。@var{syntax-code}は下記のテーブルに応じて構文クラスと構文フラグをエンコードする整数です。@var{matching-char}が非@code{nil}なら、それはマッチング文字(構文記述子内の2つ目の文字と同様)を指定します。"

#. type: Plain text
#: original_texis/syntax.texi:970
msgid "Here are the syntax codes corresponding to the various syntax classes:"
msgstr "以下はさまざまな構文クラスに対応する構文コードです。"

#. type: i{#1}
#: original_texis/syntax.texi:974
msgid "Code"
msgstr "Code"

#. type: i{#1}
#: original_texis/syntax.texi:974
msgid "Class"
msgstr "Class"

#. type: multitable
#: original_texis/syntax.texi:974
msgid "@i{Class}"
msgstr "@i{Class}"

#. type: multitable
#: original_texis/syntax.texi:976
msgid "0"
msgstr "0"

#. type: multitable
#: original_texis/syntax.texi:976
msgid "whitespace"
msgstr "空白文字"

#. type: multitable
#: original_texis/syntax.texi:976
msgid "8"
msgstr "8"

#. type: multitable
#: original_texis/syntax.texi:976
msgid "paired delimiter"
msgstr "区切り文字ペアー"

#. type: samp{#1}
#: original_texis/syntax.texi:978 original_texis/syntax.texi:1005
msgid "1"
msgstr "1"

#. type: multitable
#: original_texis/syntax.texi:978
msgid "punctuation"
msgstr "句読点"

#. type: multitable
#: original_texis/syntax.texi:978
msgid "9"
msgstr "9"

#. type: multitable
#: original_texis/syntax.texi:978
msgid "escape"
msgstr "エスケープ"

#. type: samp{#1}
#: original_texis/syntax.texi:980 original_texis/syntax.texi:1007
msgid "2"
msgstr "2"

#. type: multitable
#: original_texis/syntax.texi:980
msgid "word"
msgstr "単語"

#. type: multitable
#: original_texis/syntax.texi:980
msgid "10"
msgstr "10"

#. type: multitable
#: original_texis/syntax.texi:980
msgid "character quote"
msgstr "文字クォート"

#. type: samp{#1}
#: original_texis/syntax.texi:982 original_texis/syntax.texi:1009
msgid "3"
msgstr "3"

#. type: multitable
#: original_texis/syntax.texi:982
msgid "symbol"
msgstr "シンボル"

#. type: multitable
#: original_texis/syntax.texi:982
msgid "11"
msgstr "11"

#. type: multitable
#: original_texis/syntax.texi:982
msgid "comment-start"
msgstr "コメント開始"

#. type: samp{#1}
#: original_texis/syntax.texi:984 original_texis/syntax.texi:1011
msgid "4"
msgstr "4"

#. type: multitable
#: original_texis/syntax.texi:984
msgid "open parenthesis"
msgstr "開カッコ"

#. type: multitable
#: original_texis/syntax.texi:984
msgid "12"
msgstr "12"

#. type: multitable
#: original_texis/syntax.texi:984
msgid "comment-end"
msgstr "コメント終了"

#. type: multitable
#: original_texis/syntax.texi:986
msgid "5"
msgstr "5"

#. type: multitable
#: original_texis/syntax.texi:986
msgid "close parenthesis"
msgstr "閉カッコ"

#. type: multitable
#: original_texis/syntax.texi:986
msgid "13"
msgstr "13"

#. type: multitable
#: original_texis/syntax.texi:986
msgid "inherit"
msgstr "継承"

#. type: multitable
#: original_texis/syntax.texi:988
msgid "6"
msgstr "6"

#. type: multitable
#: original_texis/syntax.texi:988
msgid "expression prefix"
msgstr "式プレフィクス"

#. type: multitable
#: original_texis/syntax.texi:988
msgid "14"
msgstr "14"

#. type: multitable
#: original_texis/syntax.texi:988
msgid "generic comment"
msgstr "汎用コメント"

#. type: multitable
#: original_texis/syntax.texi:990
msgid "7"
msgstr "7"

#. type: multitable
#: original_texis/syntax.texi:990
msgid "string quote"
msgstr "文字列クォート"

#. type: multitable
#: original_texis/syntax.texi:990
msgid "15"
msgstr "15"

#. type: multitable
#: original_texis/syntax.texi:990
msgid "generic string"
msgstr "汎用文字列"

#. type: Plain text
#: original_texis/syntax.texi:995
msgid "For example, in the standard syntax table, the entry for @samp{(} is @code{(4 . 41)}.  41 is the character code for @samp{)}."
msgstr "たとえば標準構文テーブルでは@samp{(}にたいするエントリーは@code{(4 . 41)}、41は@samp{)}の文字コードです。"

#. type: Plain text
#: original_texis/syntax.texi:999
msgid "Syntax flags are encoded in higher order bits, starting 16 bits from the least significant bit.  This table gives the power of two which corresponds to each syntax flag."
msgstr "構文フラグは最下位ビットから16ビット目より始まる高位ビットにエンコードされます。以下のテーブルは対応する各構文フラグにたいして2のべき乗を与えます。"

#. type: i{#1}
#: original_texis/syntax.texi:1003
msgid "Prefix"
msgstr "Prefix"

#. type: i{#1}
#: original_texis/syntax.texi:1003
msgid "Flag"
msgstr "Flag"

#. type: multitable
#: original_texis/syntax.texi:1003
msgid "@i{Flag}"
msgstr "@i{Flag}"

#. type: code{#1}
#: original_texis/syntax.texi:1005
msgid "(lsh 1 16)"
msgstr "(lsh 1 16)"

#. type: samp{#1}
#: original_texis/syntax.texi:1005
msgid "p"
msgstr "p"

#. type: multitable
#: original_texis/syntax.texi:1005
msgid "@code{(lsh 1 20)}"
msgstr "@code{(lsh 1 20)}"

#. type: code{#1}
#: original_texis/syntax.texi:1007
msgid "(lsh 1 17)"
msgstr "(lsh 1 17)"

#. type: samp{#1}
#: original_texis/syntax.texi:1007
msgid "b"
msgstr "b"

#. type: multitable
#: original_texis/syntax.texi:1007
msgid "@code{(lsh 1 21)}"
msgstr "@code{(lsh 1 21)}"

#. type: code{#1}
#: original_texis/syntax.texi:1009
msgid "(lsh 1 18)"
msgstr "(lsh 1 18)"

#. type: samp{#1}
#: original_texis/syntax.texi:1009
msgid "n"
msgstr "n"

#. type: multitable
#: original_texis/syntax.texi:1009
msgid "@code{(lsh 1 22)}"
msgstr "@code{(lsh 1 22)}"

#. type: multitable
#: original_texis/syntax.texi:1011
msgid "@code{(lsh 1 19)}"
msgstr "@code{(lsh 1 19)}"

#. type: defun
#: original_texis/syntax.texi:1013
#, no-wrap
msgid "string-to-syntax desc"
msgstr "string-to-syntax desc"

#. type: defun
#: original_texis/syntax.texi:1016
msgid "Given a syntax descriptor @var{desc} (a string), this function returns the corresponding raw syntax descriptor."
msgstr "与えられた構文記述子@var{desc}(文字列)にたいして、この関数は対応するraw構文記述子をリターンする。"

#. type: defun
#: original_texis/syntax.texi:1018
#, no-wrap
msgid "syntax-after pos"
msgstr "syntax-after pos"

#. type: defun
#: original_texis/syntax.texi:1024
msgid "This function returns the raw syntax descriptor for the character in the buffer after position @var{pos}, taking account of syntax properties as well as the syntax table.  If @var{pos} is outside the buffer's accessible portion (@pxref{Narrowing, accessible portion}), the return value is @code{nil}."
msgstr "この関数はバッファー内の位置@var{pos}の後の文字にたいして、構文テーブルと同様に構文プロパティも考慮したraw構文記述子をリターンする。@var{pos}がバッファーのアクセス可能範囲(@ref{Narrowing, accessible portion}を参照)の外部ならリターン値は@code{nil}。"

#. type: defun
#: original_texis/syntax.texi:1026
#, no-wrap
msgid "syntax-class syntax"
msgstr "syntax-class syntax"

#. type: defun
#: original_texis/syntax.texi:1031
msgid "This function returns the syntax code for the raw syntax descriptor @var{syntax}.  More precisely, it takes the raw syntax descriptor's @var{syntax-code} component, masks off the high 16 bits which record the syntax flags, and returns the resulting integer."
msgstr "この関数はraw構文記述子@var{syntax}にたいする構文コードをリターンする。より正確にはこれはraw構文記述子の@var{syntax-code}要素から構文フラグを記録する高位16ビットをマスクして、その結果の整数をリターンする。"

#. type: defun
#: original_texis/syntax.texi:1034
msgid "If @var{syntax} is @code{nil}, the return value is returns @code{nil}.  This is so that the expression"
msgstr "@var{syntax}が@code{nil}ならリターン値は@code{nil}。これは以下の式"

#. type: example
#: original_texis/syntax.texi:1037
#, no-wrap
msgid "(syntax-class (syntax-after pos))\n"
msgstr "(syntax-class (syntax-after pos))\n"

#. type: defun
#: original_texis/syntax.texi:1043
msgid "evaluates to @code{nil} if @code{pos} is outside the buffer's accessible portion, without throwing errors or returning an incorrect code."
msgstr "は@code{pos}がバッファーのアクセス可能範囲外部なら、エラーをthrowしたり不正なコードをリターンすることなく@code{nil}に評価されるため。"

#. type: cindex
#: original_texis/syntax.texi:1047
#, no-wrap
msgid "categories of characters"
msgstr "categories of characters"

#. type: cindex
#: original_texis/syntax.texi:1048
#, no-wrap
msgid "character categories"
msgstr "character categories"

#. type: Plain text
#: original_texis/syntax.texi:1055
msgid "@dfn{Categories} provide an alternate way of classifying characters syntactically.  You can define several categories as needed, then independently assign each character to one or more categories.  Unlike syntax classes, categories are not mutually exclusive; it is normal for one character to belong to several categories."
msgstr "@dfn{カテゴリー(categories)}は構文的に文字をクラス分けする別の手段を提供します。必要に応じて複数のカテゴリーを定義して、それぞれの文字に独立して1つ以上のカテゴリーを割り当てることができます。構文クラスと異なりカテゴリーは互いに排他ではありません。1つの文字が複数のカテゴリーに属すのは普通のことです。"

#. type: cindex
#: original_texis/syntax.texi:1056
#, no-wrap
msgid "category table"
msgstr "category table"

#. type: Plain text
#: original_texis/syntax.texi:1062
msgid "Each buffer has a @dfn{category table} which records which categories are defined and also which characters belong to each category.  Each category table defines its own categories, but normally these are initialized by copying from the standard categories table, so that the standard categories are available in all modes."
msgstr "バッファーはそれぞれ@dfn{カテゴリーテーブル(category table)}をもっています。これはどのカテゴリーが定義されていて、各カテゴリーにどの文字が属すかを記録しています。カテゴリーテールは自身のカテゴリーを定義しますが、標準カテゴリーはすべてのモードで利用可能なので、これらは通常は標準カテゴリーテーブルをコピーすることにより初期化されます。"

#. type: Plain text
#: original_texis/syntax.texi:1066
msgid "Each category has a name, which is an @acronym{ASCII} printing character in the range @w{@samp{ }} to @samp{~}.  You specify the name of a category when you define it with @code{define-category}."
msgstr "カテゴリーはそれぞれ@w{@samp{ }}から@samp{~}の範囲の@acronym{ASCII}プリント文字による名前をもちます。@code{define-category}で定義する際にはカテゴリーの名前を指定します。"

#. type: cindex
#: original_texis/syntax.texi:1067
#, no-wrap
msgid "category set"
msgstr "category set"

#. type: Plain text
#: original_texis/syntax.texi:1074
msgid "The category table is actually a char-table (@pxref{Char-Tables}).  The element of the category table at index @var{c} is a @dfn{category set}---a bool-vector---that indicates which categories character @var{c} belongs to.  In this category set, if the element at index @var{cat} is @code{t}, that means category @var{cat} is a member of the set, and that character @var{c} belongs to category @var{cat}."
msgstr "カテゴリーテーブルは実際には文字テーブルです(@ref{Char-Tables}を参照)。カテゴリーテーブルのインデックス@var{c}の要素は、文字@var{c}が属するカテゴリーを示す@dfn{カテゴリーセット(category set)}というブールベクターです。このカテゴリーセット内で、もしインデックス@var{cat}の要素が@code{t}なら@var{cat}はそのセットのメンバーであり、その文字@var{c}はカテゴリー@var{cat}に属することを意味します。"

#. type: Plain text
#: original_texis/syntax.texi:1077
msgid "For the next three functions, the optional argument @var{table} defaults to the current buffer's category table."
msgstr "以下の3つの関数のオプション引数@var{table}のデフォルトは、カレントバッファーのカテゴリーテーブルです。"

#. type: defun
#: original_texis/syntax.texi:1078
#, no-wrap
msgid "define-category char docstring &optional table"
msgstr "define-category char docstring &optional table"

#. type: defun
#: original_texis/syntax.texi:1081
msgid "This function defines a new category, with name @var{char} and documentation @var{docstring}, for the category table @var{table}."
msgstr "この関数はカテゴリーテーブル@var{table}にたいして名前が@var{char}、ドキュメントが@var{docstring}であるような新たなカテゴリーを定義する。"

#. type: defun
#: original_texis/syntax.texi:1088
msgid "Here's an example of defining a new category for characters that have strong right-to-left directionality (@pxref{Bidirectional Display})  and using it in a special category table.  To obtain the information about the directionality of characters, the example code uses the @samp{bidi-class} Unicode property (@pxref{Character Properties, bidi-class})."
msgstr "以下ではR2L(right-to-left: 右から左)への強い方向性(directionality)をもつ文字(@ref{Bidirectional Display}を参照)にたいするカテゴリーを新たに定義して、それを特別なカテゴリーテーブル内で使用する例を示す。文字の方向性に関する情報を取得するために、コード例ではUnicodeプロパティ@samp{bidi-class} (@ref{Character Properties, bidi-class}を参照)を使用する。"

#. type: example
#: original_texis/syntax.texi:1107
#, no-wrap
msgid ""
"(defvar special-category-table-for-bidi\n"
"  ;;     Make an empty category-table.\n"
"  (let ((category-table (make-category-table))\n"
"        ;; Create a char-table which gives the 'bidi-class' Unicode\n"
"        ;; property for each character.\n"
"        (uniprop-table (unicode-property-table-internal 'bidi-class)))\n"
"    (define-category ?R \"Characters of bidi-class R, AL, or RLO\"\n"
"                     category-table)\n"
"    ;; Modify the category entry of each character whose 'bidi-class'\n"
"    ;; Unicode property is R, AL, or RLO -- these have a\n"
"    ;; right-to-left directionality.\n"
"    (map-char-table\n"
"     #'(lambda (key val)\n"
"         (if (memq val '(R AL RLO))\n"
"             (modify-category-entry key ?R category-table)))\n"
"     uniprop-table)\n"
"    category-table))\n"
msgstr ""
"(defvar special-category-table-for-bidi\n"
"  ;;     Make an empty category-table.\n"
"  (let ((category-table (make-category-table))\n"
"        ;; Create a char-table which gives the 'bidi-class' Unicode\n"
"        ;; property for each character.\n"
"        (uniprop-table (unicode-property-table-internal 'bidi-class)))\n"
"    (define-category ?R \"Characters of bidi-class R, AL, or RLO\"\n"
"                     category-table)\n"
"    ;; Modify the category entry of each character whose 'bidi-class'\n"
"    ;; Unicode property is R, AL, or RLO -- these have a\n"
"    ;; right-to-left directionality.\n"
"    (map-char-table\n"
"     #'(lambda (key val)\n"
"         (if (memq val '(R AL RLO))\n"
"             (modify-category-entry key ?R category-table)))\n"
"     uniprop-table)\n"
"    category-table))\n"

#. type: defun
#: original_texis/syntax.texi:1110
#, no-wrap
msgid "category-docstring category &optional table"
msgstr "category-docstring category &optional table"

#. type: defun
#: original_texis/syntax.texi:1113
msgid "This function returns the documentation string of category @var{category} in category table @var{table}."
msgstr "この関数はカテゴリーテーブル@var{table}内のカテゴリー@var{category}のドキュメント文字列をリターンする。"

#. type: example
#: original_texis/syntax.texi:1119
#, no-wrap
msgid ""
"(category-docstring ?a)\n"
"     @result{} \"ASCII\"\n"
"(category-docstring ?l)\n"
"     @result{} \"Latin\"\n"
msgstr ""
"(category-docstring ?a)\n"
"     @result{} \"ASCII\"\n"
"(category-docstring ?l)\n"
"     @result{} \"Latin\"\n"

#. type: defun
#: original_texis/syntax.texi:1122
#, no-wrap
msgid "get-unused-category &optional table"
msgstr "get-unused-category &optional table"

#. type: defun
#: original_texis/syntax.texi:1126
msgid "This function returns a category name (a character) which is not currently defined in @var{table}.  If all possible categories are in use in @var{table}, it returns @code{nil}."
msgstr "この関数は@var{table}内で現在のところ未定義なカテゴリーの名前(文字)をリターンする。@var{table}内で利用可能なカテゴリーがすべて使用済みなら@code{nil}をリターンする。"

#. type: defun
#: original_texis/syntax.texi:1128
#, no-wrap
msgid "category-table"
msgstr "category-table"

#. type: defun
#: original_texis/syntax.texi:1130
msgid "This function returns the current buffer's category table."
msgstr "この関数はカレントバッファーのカテゴリーテーブルをリターンする。"

#. type: defun
#: original_texis/syntax.texi:1132
#, no-wrap
msgid "category-table-p object"
msgstr "category-table-p object"

#. type: defun
#: original_texis/syntax.texi:1135
msgid "This function returns @code{t} if @var{object} is a category table, otherwise @code{nil}."
msgstr "この関数は@var{object}がカテゴリーテーブルなら@code{t}、それ以外は@code{nil}をリターンする。"

#. type: defun
#: original_texis/syntax.texi:1137
#, no-wrap
msgid "standard-category-table"
msgstr "standard-category-table"

#. type: defun
#: original_texis/syntax.texi:1139
msgid "This function returns the standard category table."
msgstr "この関数は標準カテゴリーテーブルをリターンする。"

#. type: defun
#: original_texis/syntax.texi:1141
#, no-wrap
msgid "copy-category-table &optional table"
msgstr "copy-category-table &optional table"

#. type: defun
#: original_texis/syntax.texi:1146
msgid "This function constructs a copy of @var{table} and returns it.  If @var{table} is not supplied (or is @code{nil}), it returns a copy of the standard category table.  Otherwise, an error is signaled if @var{table} is not a category table."
msgstr "この関数は@var{table}のコピーを構築してリターンする。@var{table}が与えられない(または@code{nil})なら、標準カテゴリーテーブルのコピーをリターンする。それ以外の場合には、もし@var{table}がカテゴリーテーブルでなければエラーをシグナルする。"

#. type: defun
#: original_texis/syntax.texi:1148
#, no-wrap
msgid "set-category-table table"
msgstr "set-category-table table"

#. type: defun
#: original_texis/syntax.texi:1151
msgid "This function makes @var{table} the category table for the current buffer.  It returns @var{table}."
msgstr "この関数は@var{table}をカレントバッファーのカテゴリーテーブルにする。リターン値は@var{table}。"

#. type: defun
#: original_texis/syntax.texi:1153
#, no-wrap
msgid "make-category-table"
msgstr "make-category-table"

#. type: defun
#: original_texis/syntax.texi:1157
msgid "This creates and returns an empty category table.  In an empty category table, no categories have been allocated, and no characters belong to any categories."
msgstr "これは空のカテゴリーテーブルを作成してリターンする。空のカテゴリーテーブルでは、どのカテゴリーも割り当てられておらず何らかのカテゴリーに属する文字もない。"

#. type: defun
#: original_texis/syntax.texi:1159
#, no-wrap
msgid "make-category-set categories"
msgstr "make-category-set categories"

#. type: defun
#: original_texis/syntax.texi:1165
msgid "This function returns a new category set---a bool-vector---whose initial contents are the categories listed in the string @var{categories}.  The elements of @var{categories} should be category names; the new category set has @code{t} for each of those categories, and @code{nil} for all other categories."
msgstr "この関数は初期内容が文字列@var{categories}にリストされるカテゴリーであるような、新たなカテゴリーセット(ブールベクター)をリターンする。@var{categories}の要素はカテゴリー名であること。新たなカテゴリーセットはそれらのカテゴリーにたいして@code{t}、それ以外のすべてのカテゴリーにたいして@code{nil}をもつ。"

#. type: example
#: original_texis/syntax.texi:1169
#, no-wrap
msgid ""
"(make-category-set \"al\")\n"
"     @result{} #&128\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\2\\20\\0\\0\"\n"
msgstr ""
"(make-category-set \"al\")\n"
"     @result{} #&128\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\2\\20\\0\\0\"\n"

#. type: defun
#: original_texis/syntax.texi:1172
#, no-wrap
msgid "char-category-set char"
msgstr "char-category-set char"

#. type: defun
#: original_texis/syntax.texi:1178
msgid "This function returns the category set for character @var{char} in the current buffer's category table.  This is the bool-vector which records which categories the character @var{char} belongs to.  The function @code{char-category-set} does not allocate storage, because it returns the same bool-vector that exists in the category table."
msgstr "この関数はカレントバッファーのカテゴリーテーブル内で、文字@var{char}にたいするカテゴリーセットをリターンする。これは文字@var{char}が属するカテゴリーを記録するブールベクター。関数@code{char-category-set}はカテゴリーテーブル内にある同じブールベクターをリターンするのでメモリーの割り当ては行わない。"

#. type: example
#: original_texis/syntax.texi:1182
#, no-wrap
msgid ""
"(char-category-set ?a)\n"
"     @result{} #&128\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\2\\20\\0\\0\"\n"
msgstr ""
"(char-category-set ?a)\n"
"     @result{} #&128\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\2\\20\\0\\0\"\n"

#. type: defun
#: original_texis/syntax.texi:1185
#, no-wrap
msgid "category-set-mnemonics category-set"
msgstr "category-set-mnemonics category-set"

#. type: defun
#: original_texis/syntax.texi:1189
msgid "This function converts the category set @var{category-set} into a string containing the characters that designate the categories that are members of the set."
msgstr "この関数はカテゴリーセット@var{category-set}を、そのセットのメンバーのカテゴリーを指定する文字を含む文字列に変換する。"

#. type: example
#: original_texis/syntax.texi:1193
#, no-wrap
msgid ""
"(category-set-mnemonics (char-category-set ?a))\n"
"     @result{} \"al\"\n"
msgstr ""
"(category-set-mnemonics (char-category-set ?a))\n"
"     @result{} \"al\"\n"

#. type: defun
#: original_texis/syntax.texi:1196
#, no-wrap
msgid "modify-category-entry char category &optional table reset"
msgstr "modify-category-entry char category &optional table reset"

#. type: defun
#: original_texis/syntax.texi:1203
msgid "This function modifies the category set of @var{char} in category table @var{table} (which defaults to the current buffer's category table).  @var{char} can be a character, or a cons cell of the form @code{(@var{min} . @var{max})}; in the latter case, the function modifies the category sets of all characters in the range between @var{min} and @var{max}, inclusive."
msgstr "この関数はカテゴリーテーブル@var{table} (デフォルトはカレントバッファーのカテゴリーテーブル)内の@var{char}のカテゴリーセットを変更する。@var{char}には文字、または@code{(@var{min} . @var{max})}という形式のコンスセルを指定できる。後者の場合には、この関数は@var{min}と@var{max}の間(両端を含む)の範囲にあるすべての文字のカテゴリーセットを変更する。"

#. type: defun
#: original_texis/syntax.texi:1207
msgid "Normally, it modifies a category set by adding @var{category} to it.  But if @var{reset} is non-@code{nil}, then it deletes @var{category} instead."
msgstr "これは通常はカテゴリーセットに@var{category}を追加することにより変更を行う。しかし@var{reset}が非@code{nil}なら、かわりに@var{category}を削除する。"

#. type: deffn
#: original_texis/syntax.texi:1209
#, no-wrap
msgid "Command describe-categories &optional buffer-or-name"
msgstr "Command describe-categories &optional buffer-or-name"

#. type: deffn
#: original_texis/syntax.texi:1214
msgid "This function describes the category specifications in the current category table.  It inserts the descriptions in a buffer, and then displays that buffer.  If @var{buffer-or-name} is non-@code{nil}, it describes the category table of that buffer instead."
msgstr "この関数はカレントカテゴリーテーブル内のカテゴリー仕様を説明する。これはその説明をバッファーに挿入してから、そのバッファーを表示する。@var{buffer-or-name}が非@code{nil}なら、かわりにそのバッファーのカテゴリーテーブルを説明する。"
