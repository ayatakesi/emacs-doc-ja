# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2024-07-10 03:45+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: original_texis/commands.texi:6 original_texis/commands.texi:7
#, no-wrap
msgid "Command Loop"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:8
#, no-wrap
msgid "editor command loop"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:9
#, no-wrap
msgid "command loop"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:15
msgid ""
"When you run Emacs, it enters the @dfn{editor command loop} almost "
"immediately.  This loop reads key sequences, executes their definitions, and "
"displays the results.  In this chapter, we describe how these things are "
"done, and the subroutines that allow Lisp programs to do them."
msgstr ""

#. type: node
#: original_texis/commands.texi:34 original_texis/commands.texi:36
#, no-wrap
msgid "Command Overview"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:34
msgid "How the command loop reads commands."
msgstr ""

#. type: section
#: original_texis/commands.texi:34 original_texis/commands.texi:108
#: original_texis/commands.texi:109
#, no-wrap
msgid "Defining Commands"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:34
msgid "Specifying how a function should read arguments."
msgstr ""

#. type: section
#: original_texis/commands.texi:34 original_texis/commands.texi:786
#: original_texis/commands.texi:787
#, no-wrap
msgid "Interactive Call"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:34
msgid "Calling a command, so that it will read arguments."
msgstr ""

#. type: node
#: original_texis/commands.texi:34 original_texis/commands.texi:958
#, no-wrap
msgid "Distinguish Interactive"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:34
msgid "Making a command distinguish interactive calls."
msgstr ""

#. type: node
#: original_texis/commands.texi:34 original_texis/commands.texi:1048
#, no-wrap
msgid "Command Loop Info"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:34
msgid "Variables set by the command loop for you to examine."
msgstr ""

#. type: node
#: original_texis/commands.texi:34 original_texis/commands.texi:1299
#, no-wrap
msgid "Adjusting Point"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:34
msgid "Adjustment of point after a command."
msgstr ""

#. type: section
#: original_texis/commands.texi:34 original_texis/commands.texi:1337
#: original_texis/commands.texi:1338
#, no-wrap
msgid "Input Events"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:34
msgid "What input looks like when you read it."
msgstr ""

#. type: section
#: original_texis/commands.texi:34 original_texis/commands.texi:3286
#: original_texis/commands.texi:3287
#, no-wrap
msgid "Reading Input"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:34
msgid "How to read input events from the keyboard or mouse."
msgstr ""

#. type: section
#: original_texis/commands.texi:34 original_texis/commands.texi:3998
#: original_texis/commands.texi:3999
#, no-wrap
msgid "Special Events"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:34
msgid "Events processed immediately and individually."
msgstr ""

#. type: node
#: original_texis/commands.texi:34 original_texis/commands.texi:4026
#, no-wrap
msgid "Waiting"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:34
msgid "Waiting for user input or elapsed time."
msgstr ""

#. type: section
#: original_texis/commands.texi:34 original_texis/commands.texi:4080
#: original_texis/commands.texi:4081
#, no-wrap
msgid "Quitting"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:34
msgid "How @kbd{C-g} works.  How to catch or defer quitting."
msgstr ""

#. type: section
#: original_texis/commands.texi:34 original_texis/commands.texi:4212
#: original_texis/commands.texi:4213
#, no-wrap
msgid "Prefix Command Arguments"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:34
msgid "How the commands to set prefix args work."
msgstr ""

#. type: section
#: original_texis/commands.texi:34 original_texis/commands.texi:4352
#: original_texis/commands.texi:4353
#, no-wrap
msgid "Recursive Editing"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:34
msgid "Entering a recursive edit, and why you usually shouldn't."
msgstr ""

#. type: section
#: original_texis/commands.texi:34 original_texis/commands.texi:4475
#: original_texis/commands.texi:4476
#, no-wrap
msgid "Disabling Commands"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:34
msgid "How the command loop handles disabled commands."
msgstr ""

#. type: section
#: original_texis/commands.texi:34 original_texis/commands.texi:4545
#: original_texis/commands.texi:4546
#, no-wrap
msgid "Command History"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:34
msgid "How the command history is set up, and how accessed."
msgstr ""

#. type: section
#: original_texis/commands.texi:34 original_texis/commands.texi:4588
#: original_texis/commands.texi:4589
#, no-wrap
msgid "Keyboard Macros"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:34
msgid "How keyboard macros are implemented."
msgstr ""

#. type: section
#: original_texis/commands.texi:37
#, no-wrap
msgid "Command Loop Overview"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:46
msgid ""
"The first thing the command loop must do is read a key sequence, which is a "
"sequence of input events that translates into a command.  It does this by "
"calling the function @code{read-key-sequence}.  Lisp programs can also call "
"this function (@pxref{Key Sequence Input}).  They can also read input at a "
"lower level with @code{read-key} or @code{read-event} (@pxref{Reading One "
"Event}), or discard pending input with @code{discard-input} (@pxref{Event "
"Input Misc})."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:53
msgid ""
"The key sequence is translated into a command through the currently active "
"keymaps.  @xref{Key Lookup}, for information on how this is done.  The "
"result should be a keyboard macro or an interactively callable function.  If "
"the key is @kbd{M-x}, then it reads the name of another command, which it "
"then calls.  This is done by the command @code{execute-extended-command} "
"(@pxref{Interactive Call})."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:56
msgid ""
"Prior to executing the command, Emacs runs @code{undo-boundary} to create an "
"undo boundary.  @xref{Maintaining Undo}."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:68
msgid ""
"To execute a command, Emacs first reads its arguments by calling "
"@code{command-execute} (@pxref{Interactive Call}).  For commands written in "
"Lisp, the @code{interactive} specification says how to read the arguments.  "
"This may use the prefix argument (@pxref{Prefix Command Arguments}) or may "
"read with prompting in the minibuffer (@pxref{Minibuffers}).  For example, "
"the command @code{find-file} has an @code{interactive} specification which "
"says to read a file name using the minibuffer.  The function body of "
"@code{find-file} does not use the minibuffer, so if you call "
"@code{find-file} as a function from Lisp code, you must supply the file name "
"string as an ordinary Lisp function argument."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:72
msgid ""
"If the command is a keyboard macro (i.e., a string or vector), Emacs "
"executes it using @code{execute-kbd-macro} (@pxref{Keyboard Macros})."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:73
#, no-wrap
msgid "pre-command-hook"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:78
msgid ""
"This normal hook is run by the editor command loop before it executes each "
"command.  At that time, @code{this-command} contains the command that is "
"about to run, and @code{last-command} describes the previous command.  "
"@xref{Command Loop Info}."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:80
#, no-wrap
msgid "post-command-hook"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:86
msgid ""
"This normal hook is run by the editor command loop after it executes each "
"command (including commands terminated prematurely by quitting or by "
"errors).  At that time, @code{this-command} refers to the command that just "
"ran, and @code{last-command} refers to the command before that."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:90
msgid ""
"This hook is also run when Emacs first enters the command loop (at which "
"point @code{this-command} and @code{last-command} are both @code{nil})."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:97
msgid ""
"Quitting is suppressed while running @code{pre-command-hook} and "
"@code{post-command-hook}.  If an error happens while executing one of these "
"hooks, it does not terminate execution of the hook; instead the error is "
"silenced and the function in which the error occurred is removed from the "
"hook."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:101
msgid ""
"A request coming into the Emacs server (@pxref{Emacs Server,,, emacs, The "
"GNU Emacs Manual}) runs these two hooks just as a keyboard command does."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:107
msgid ""
"Note that, when the buffer text includes very long lines, these two hooks "
"are called as if they were in a @code{with-restriction} form "
"(@pxref{Narrowing}), with a @code{long-line-optimizations-in-command-hooks} "
"label and with the buffer narrowed to a portion around point."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:110
#, no-wrap
msgid "defining commands"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:111
#, no-wrap
msgid "commands, defining"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:112
#, no-wrap
msgid "functions, making them interactive"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:113
#, no-wrap
msgid "interactive function"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:124
msgid ""
"The special form @code{interactive} turns a Lisp function into a command.  "
"The @code{interactive} form must be located at top-level in the function "
"body, usually as the first form in the body; this applies to both lambda "
"expressions (@pxref{Lambda Expressions}) and @code{defun} forms "
"(@pxref{Defining Functions}).  This form does nothing during the actual "
"execution of the function; its presence serves as a flag, telling the Emacs "
"command loop that the function can be called interactively.  The argument of "
"the @code{interactive} form specifies how the arguments for an interactive "
"call should be read."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:125
#, no-wrap
msgid "@code{interactive-form} property"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:130
msgid ""
"Alternatively, an @code{interactive} form may be specified in a function "
"symbol's @code{interactive-form} property.  A non-@code{nil} value for this "
"property takes precedence over any @code{interactive} form in the function "
"body itself.  This feature is seldom used."
msgstr ""

#. type: anchor{#1}
#: original_texis/commands.texi:132
msgid "The interactive-only property"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:132
#, no-wrap
msgid "@code{interactive-only} property"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:144
msgid ""
"Sometimes, a function is only intended to be called interactively, never "
"directly from Lisp.  In that case, give the function a non-@code{nil} "
"@code{interactive-only} property, either directly or via @code{declare} "
"(@pxref{Declare Form}).  This causes the byte compiler to warn if the "
"command is called from Lisp.  The output of @code{describe-function} will "
"include similar information.  The value of the property can be: a string, "
"which the byte-compiler will use directly in its warning (it should end with "
"a period, and not start with a capital, e.g., @code{\"use (system-name) "
"instead.\"}); @code{t}; any other symbol, which should be an alternative "
"function to use in Lisp code."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:147
msgid ""
"Generic functions (@pxref{Generic Functions}) cannot be turned into commands "
"by adding the @code{interactive} form to them."
msgstr ""

#. type: node
#: original_texis/commands.texi:155 original_texis/commands.texi:157
#, no-wrap
msgid "Using Interactive"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:155
msgid "General rules for @code{interactive}."
msgstr ""

#. type: node
#: original_texis/commands.texi:155 original_texis/commands.texi:342
#, no-wrap
msgid "Interactive Codes"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:155
msgid "The standard letter-codes for reading arguments in various ways."
msgstr ""

#. type: node
#: original_texis/commands.texi:155 original_texis/commands.texi:575
#, no-wrap
msgid "Interactive Examples"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:155
msgid "Examples of how to read interactive arguments."
msgstr ""

#. type: node
#: original_texis/commands.texi:155 original_texis/commands.texi:627
#, no-wrap
msgid "Command Modes"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:155
msgid "Specifying that commands are for a specific mode."
msgstr ""

#. type: node
#: original_texis/commands.texi:155 original_texis/commands.texi:710
#, no-wrap
msgid "Generic Commands"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:155
msgid "Select among command alternatives."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:158
#, no-wrap
msgid "Using @code{interactive}"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:159
#, no-wrap
msgid "arguments, interactive entry"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:160
#, no-wrap
msgid "interactive spec, using"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:165
msgid ""
"This section describes how to write the @code{interactive} form that makes a "
"Lisp function an interactively-callable command, and how to examine a "
"command's @code{interactive} form."
msgstr ""

#. type: defspec
#: original_texis/commands.texi:166
#, no-wrap
msgid "interactive &optional arg-descriptor &rest modes"
msgstr ""

#. type: defspec
#: original_texis/commands.texi:172
msgid ""
"This special form declares that a function is a command, and that it may "
"therefore be called interactively (via @kbd{M-x} or by entering a key "
"sequence bound to it).  The argument @var{arg-descriptor} declares how to "
"compute the arguments to the command when the command is called "
"interactively."
msgstr ""

#. type: defspec
#: original_texis/commands.texi:176
msgid ""
"A command may be called from Lisp programs like any other function, but then "
"the caller supplies the arguments and @var{arg-descriptor} has no effect."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:177
#, no-wrap
msgid "@code{interactive-form}, symbol property"
msgstr ""

#. type: defspec
#: original_texis/commands.texi:186
msgid ""
"The @code{interactive} form must be located at top-level in the function "
"body, or in the function symbol's @code{interactive-form} property "
"(@pxref{Symbol Properties}).  It has its effect because the command loop "
"looks for it before calling the function (@pxref{Interactive Call}).  Once "
"the function is called, all its body forms are executed; at this time, if "
"the @code{interactive} form occurs within the body, the form simply returns "
"@code{nil} without even evaluating its argument."
msgstr ""

#. type: defspec
#: original_texis/commands.texi:190
msgid ""
"The @var{modes} list allows specifying which modes the command is meant to "
"be used in.  See @ref{Command Modes} for more details about the effect of "
"specifying @var{modes}, and when to use it."
msgstr ""

#. type: defspec
#: original_texis/commands.texi:198
msgid ""
"By convention, you should put the @code{interactive} form in the function "
"body, as the first top-level form.  If there is an @code{interactive} form "
"in both the @code{interactive-form} symbol property and the function body, "
"the former takes precedence.  The @code{interactive-form} symbol property "
"can be used to add an interactive form to an existing function, or change "
"how its arguments are processed interactively, without redefining the "
"function."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:201
msgid "There are three possibilities for the argument @var{arg-descriptor}:"
msgstr ""

#. type: itemize
#: original_texis/commands.texi:207
msgid ""
"It may be omitted or @code{nil}; then the command is called with no "
"arguments.  This leads quickly to an error if the command requires one or "
"more arguments."
msgstr ""

#. type: itemize
#: original_texis/commands.texi:214
msgid ""
"It may be a string; its contents are a sequence of elements separated by "
"newlines, one for each argument@footnote{Some elements actually supply two "
"arguments.}.  Each element consists of a code character (@pxref{Interactive "
"Codes}) optionally followed by a prompt (which some code characters use and "
"some ignore).  Here is an example:"
msgstr ""

#. type: smallexample
#: original_texis/commands.texi:217
#, no-wrap
msgid "(interactive \"P\\nbFrobnicate buffer: \")\n"
msgstr ""

#. type: itemize
#: original_texis/commands.texi:225
msgid ""
"The code letter @samp{P} sets the command's first argument to the raw "
"command prefix (@pxref{Prefix Command Arguments}).  @samp{bFrobnicate "
"buffer: } prompts the user with @samp{Frobnicate buffer: } to enter the name "
"of an existing buffer, which becomes the second and final argument."
msgstr ""

#. type: itemize
#: original_texis/commands.texi:231
msgid ""
"The prompt string can use @samp{%} to include previous argument values "
"(starting with the first argument) in the prompt.  This is done using "
"@code{format-message} (@pxref{Formatting Strings}).  For example, here is "
"how you could read the name of an existing buffer followed by a new name to "
"give to that buffer:"
msgstr ""

#. type: group
#: original_texis/commands.texi:235
#, no-wrap
msgid "(interactive \"bBuffer to rename: \\nsRename buffer %s to: \")\n"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:238
#, no-wrap
msgid "@samp{*} in @code{interactive}"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:239
#, no-wrap
msgid "read-only buffers in interactive"
msgstr ""

#. type: itemize
#: original_texis/commands.texi:242
msgid ""
"If @samp{*} appears at the beginning of the string, then an error is "
"signaled if the buffer is read-only."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:243
#, no-wrap
msgid "@samp{@@} in @code{interactive}"
msgstr ""

#. type: itemize
#: original_texis/commands.texi:248
msgid ""
"If @samp{@@} appears at the beginning of the string, and if the key sequence "
"used to invoke the command includes any mouse events, then the window "
"associated with the first of those events is selected before the command is "
"run."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:249
#, no-wrap
msgid "@samp{^} in @code{interactive}"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:250
#, no-wrap
msgid "shift-selection, and @code{interactive} spec"
msgstr ""

#. type: itemize
#: original_texis/commands.texi:259
msgid ""
"If @samp{^} appears at the beginning of the string, and if the command was "
"invoked through @dfn{shift-translation}, set the mark and activate the "
"region temporarily, or extend an already active region, before the command "
"is run.  If the command was invoked without shift-translation, and the "
"region is temporarily active, deactivate the region before the command is "
"run.  Shift-translation is controlled on the user level by "
"@code{shift-select-mode}; see @ref{Shift Selection,,, emacs, The GNU Emacs "
"Manual}."
msgstr ""

#. type: itemize
#: original_texis/commands.texi:264
msgid ""
"You can use @samp{*}, @samp{@@}, and @code{^} together; the order does not "
"matter.  Actual reading of arguments is controlled by the rest of the prompt "
"string (starting with the first character that is not @samp{*}, @samp{@@}, "
"or @samp{^})."
msgstr ""

#. type: itemize
#: original_texis/commands.texi:271
msgid ""
"It may be a Lisp expression that is not a string; then it should be a form "
"that is evaluated to get a list of arguments to pass to the command.  "
"Usually this form will call various functions to read input from the user, "
"most often through the minibuffer (@pxref{Minibuffers})  or directly from "
"the keyboard (@pxref{Reading Input})."
msgstr ""

#. type: itemize
#: original_texis/commands.texi:278
msgid ""
"Providing point or the mark as an argument value is also common, but if you "
"do this @emph{and} read input (whether using the minibuffer or not), be sure "
"to get the integer values of point or the mark after reading.  The current "
"buffer may be receiving subprocess output; if subprocess output arrives "
"while the command is waiting for input, it could relocate point and the "
"mark."
msgstr ""

#. type: itemize
#: original_texis/commands.texi:280
msgid "Here's an example of what @emph{not} to do:"
msgstr ""

#. type: smallexample
#: original_texis/commands.texi:285
#, no-wrap
msgid ""
"(interactive\n"
" (list (region-beginning) (region-end)\n"
"       (read-string \"Foo: \" nil 'my-history)))\n"
msgstr ""

#. type: itemize
#: original_texis/commands.texi:290
msgid ""
"Here's how to avoid the problem, by examining point and the mark after "
"reading the keyboard input:"
msgstr ""

#. type: smallexample
#: original_texis/commands.texi:295
#, no-wrap
msgid ""
"(interactive\n"
" (let ((string (read-string \"Foo: \" nil 'my-history)))\n"
"   (list (region-beginning) (region-end) string)))\n"
msgstr ""

#. type: itemize
#: original_texis/commands.texi:302
msgid ""
"@strong{Warning:} the argument values should not include any data types that "
"can't be printed and then read.  Some facilities save @code{command-history} "
"in a file to be read in the subsequent sessions; if a command's arguments "
"contain a data type that prints using @samp{#<@dots{}>} syntax, those "
"facilities won't work."
msgstr ""

#. type: itemize
#: original_texis/commands.texi:310
msgid ""
"There are, however, a few exceptions: it is ok to use a limited set of "
"expressions such as @code{(point)}, @code{(mark)}, "
"@code{(region-beginning)}, and @code{(region-end)}, because Emacs recognizes "
"them specially and puts the expression (rather than its value) into the "
"command history.  To see whether the expression you wrote is one of these "
"exceptions, run the command, then examine @code{(car command-history)}."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:312
#, no-wrap
msgid "examining the @code{interactive} form"
msgstr ""

#. type: defun
#: original_texis/commands.texi:313
#, no-wrap
msgid "interactive-form function"
msgstr ""

#. type: defun
#: original_texis/commands.texi:323
msgid ""
"This function returns the @code{interactive} form of @var{function}.  If "
"@var{function} is an interactively callable function (@pxref{Interactive "
"Call}), the value is the command's @code{interactive} form "
"@code{(interactive @var{spec})}, which specifies how to compute its "
"arguments.  Otherwise, the value is @code{nil}.  If @var{function} is a "
"symbol, its function definition is used.  When called on an OClosure, the "
"work is delegated to the generic function @code{oclosure-interactive-form}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:325
#, no-wrap
msgid "oclosure-interactive-form function"
msgstr ""

#. type: defun
#: original_texis/commands.texi:332
msgid ""
"Just like @code{interactive-form}, this function takes a command and returns "
"its interactive form.  The difference is that it is a generic function and "
"it is only called when @var{function} is an OClosure (@pxref{OClosures}).  "
"The purpose is to make it possible for some OClosure types to compute their "
"interactive forms dynamically instead of carrying it in one of their slots."
msgstr ""

#. type: defun
#: original_texis/commands.texi:340
msgid ""
"This is used for example for @code{kmacro} functions in order to reduce "
"their memory size, since they all share the same interactive form.  It is "
"also used for @code{advice} functions, where the interactive form is "
"computed from the interactive forms of its components, so as to make this "
"computation more lazily and to correctly adjust the interactive form when "
"one of its component's is redefined."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:343
#, no-wrap
msgid "Code Characters for @code{interactive}"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:344
#, no-wrap
msgid "interactive code description"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:345
#, no-wrap
msgid "description for interactive codes"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:346
#, no-wrap
msgid "codes, interactive, description of"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:347
#, no-wrap
msgid "characters for interactive codes"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:351
msgid ""
"The code character descriptions below contain a number of key words, defined "
"here as follows:"
msgstr ""

#. type: item
#: original_texis/commands.texi:353
#, no-wrap
msgid "Completion"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:354
#, no-wrap
msgid "interactive completion"
msgstr ""

#. type: table
#: original_texis/commands.texi:358
msgid ""
"Provide completion.  @key{TAB}, @key{SPC}, and @key{RET} perform name "
"completion because the argument is read using @code{completing-read} "
"(@pxref{Completion}).  @kbd{?} displays a list of possible completions."
msgstr ""

#. type: item
#: original_texis/commands.texi:359
#, no-wrap
msgid "Existing"
msgstr ""

#. type: table
#: original_texis/commands.texi:363
msgid ""
"Require the name of an existing object.  An invalid name is not accepted; "
"the commands to exit the minibuffer do not exit if the current input is not "
"valid."
msgstr ""

#. type: item
#: original_texis/commands.texi:364
#, no-wrap
msgid "Default"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:365
#, no-wrap
msgid "default argument string"
msgstr ""

#. type: table
#: original_texis/commands.texi:368
msgid ""
"A default value of some sort is used if the user enters no text in the "
"minibuffer.  The default depends on the code character."
msgstr ""

#. type: item
#: original_texis/commands.texi:369
#, no-wrap
msgid "No I/O"
msgstr ""

#. type: table
#: original_texis/commands.texi:373
msgid ""
"This code letter computes an argument without reading any input.  Therefore, "
"it does not use a prompt string, and any prompt string you supply is "
"ignored."
msgstr ""

#. type: table
#: original_texis/commands.texi:376
msgid ""
"Even though the code letter doesn't use a prompt string, you must follow it "
"with a newline if it is not the last code character in the string."
msgstr ""

#. type: item
#: original_texis/commands.texi:377
#, no-wrap
msgid "Prompt"
msgstr ""

#. type: table
#: original_texis/commands.texi:380
msgid ""
"A prompt immediately follows the code character.  The prompt ends either "
"with the end of the string or with a newline."
msgstr ""

#. type: item
#: original_texis/commands.texi:381
#, no-wrap
msgid "Special"
msgstr ""

#. type: table
#: original_texis/commands.texi:385
msgid ""
"This code character is meaningful only at the beginning of the interactive "
"string, and it does not look for a prompt or a newline.  It is a single, "
"isolated character."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:387
#, no-wrap
msgid "reading interactive arguments"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:389
msgid "Here are the code character descriptions for use with @code{interactive}:"
msgstr ""

#. type: item
#: original_texis/commands.texi:391
#, no-wrap
msgid "*"
msgstr ""

#. type: table
#: original_texis/commands.texi:393
msgid "Signal an error if the current buffer is read-only.  Special."
msgstr ""

#. type: item
#: original_texis/commands.texi:394
#, no-wrap
msgid "@@"
msgstr ""

#. type: table
#: original_texis/commands.texi:397
msgid ""
"Select the window mentioned in the first mouse event in the key sequence "
"that invoked this command.  Special."
msgstr ""

#. type: item
#: original_texis/commands.texi:398
#, no-wrap
msgid "^"
msgstr ""

#. type: table
#: original_texis/commands.texi:404
msgid ""
"If the command was invoked through shift-translation, set the mark and "
"activate the region temporarily, or extend an already active region, before "
"the command is run.  If the command was invoked without shift-translation, "
"and the region is temporarily active, deactivate the region before the "
"command is run.  Special."
msgstr ""

#. type: item
#: original_texis/commands.texi:405
#, no-wrap
msgid "a"
msgstr ""

#. type: table
#: original_texis/commands.texi:408
msgid ""
"A function name (i.e., a symbol satisfying @code{fboundp}).  Existing, "
"Completion, Prompt."
msgstr ""

#. type: item
#: original_texis/commands.texi:409
#, no-wrap
msgid "b"
msgstr ""

#. type: table
#: original_texis/commands.texi:413
msgid ""
"The name of an existing buffer.  By default, uses the name of the current "
"buffer (@pxref{Buffers}).  Existing, Completion, Default, Prompt."
msgstr ""

#. type: item
#: original_texis/commands.texi:414
#, no-wrap
msgid "B"
msgstr ""

#. type: table
#: original_texis/commands.texi:418
msgid ""
"A buffer name.  The buffer need not exist.  By default, uses the name of a "
"recently used buffer other than the current buffer.  Completion, Default, "
"Prompt."
msgstr ""

#. type: item
#: original_texis/commands.texi:419
#, no-wrap
msgid "c"
msgstr ""

#. type: table
#: original_texis/commands.texi:421
msgid "A character.  The cursor does not move into the echo area.  Prompt."
msgstr ""

#. type: item
#: original_texis/commands.texi:422
#, no-wrap
msgid "C"
msgstr ""

#. type: table
#: original_texis/commands.texi:425
msgid ""
"A command name (i.e., a symbol satisfying @code{commandp}).  Existing, "
"Completion, Prompt."
msgstr ""

#. type: item
#: original_texis/commands.texi:426
#, no-wrap
msgid "d"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:427
#, no-wrap
msgid "position argument"
msgstr ""

#. type: table
#: original_texis/commands.texi:429
msgid "The position of point, as an integer (@pxref{Point}).  No I/O."
msgstr ""

#. type: item
#: original_texis/commands.texi:430
#, no-wrap
msgid "D"
msgstr ""

#. type: table
#: original_texis/commands.texi:434
msgid ""
"A directory.  The default is the current default directory of the current "
"buffer, @code{default-directory} (@pxref{File Name Expansion}).  Existing, "
"Completion, Default, Prompt."
msgstr ""

#. type: item
#: original_texis/commands.texi:435
#, no-wrap
msgid "e"
msgstr ""

#. type: table
#: original_texis/commands.texi:439
msgid ""
"The first or next non-keyboard event in the key sequence that invoked the "
"command.  More precisely, @samp{e} gets events that are lists, so you can "
"look at the data in the lists.  @xref{Input Events}.  No I/O."
msgstr ""

#. type: table
#: original_texis/commands.texi:444
msgid ""
"You use @samp{e} for mouse events and for special system events (@pxref{Misc "
"Events}).  The event list that the command receives depends on the event.  "
"@xref{Input Events}, which describes the forms of the list for each event in "
"the corresponding subsections."
msgstr ""

#. type: table
#: original_texis/commands.texi:450
msgid ""
"You can use @samp{e} more than once in a single command's interactive "
"specification.  If the key sequence that invoked the command has @var{n} "
"events that are lists, the @var{n}th @samp{e} provides the @var{n}th such "
"event.  Events that are not lists, such as function keys and @acronym{ASCII} "
"characters, do not count where @samp{e} is concerned."
msgstr ""

#. type: item
#: original_texis/commands.texi:451
#, no-wrap
msgid "f"
msgstr ""

#. type: table
#: original_texis/commands.texi:455
msgid ""
"A file name of an existing file (@pxref{File Names}).  @xref{Reading File "
"Names}, for details about default values.  Existing, Completion, Default, "
"Prompt."
msgstr ""

#. type: item
#: original_texis/commands.texi:456
#, no-wrap
msgid "F"
msgstr ""

#. type: table
#: original_texis/commands.texi:458
msgid "A file name.  The file need not exist.  Completion, Default, Prompt."
msgstr ""

#. type: item
#: original_texis/commands.texi:459
#, no-wrap
msgid "G"
msgstr ""

#. type: table
#: original_texis/commands.texi:463
msgid ""
"A file name.  The file need not exist.  If the user enters just a directory "
"name, then the value is just that directory name, with no file name within "
"the directory added.  Completion, Default, Prompt."
msgstr ""

#. type: item
#: original_texis/commands.texi:464
#, no-wrap
msgid "i"
msgstr ""

#. type: table
#: original_texis/commands.texi:467
msgid ""
"An irrelevant argument.  This code always supplies @code{nil} as the "
"argument's value.  No I/O."
msgstr ""

#. type: item
#: original_texis/commands.texi:468
#, no-wrap
msgid "k"
msgstr ""

#. type: table
#: original_texis/commands.texi:473
msgid ""
"A key sequence (@pxref{Key Sequences}).  This keeps reading events until a "
"command (or undefined command) is found in the current key maps.  The key "
"sequence argument is represented as a string or vector.  The cursor does not "
"move into the echo area.  Prompt."
msgstr ""

#. type: table
#: original_texis/commands.texi:477
msgid ""
"If @samp{k} reads a key sequence that ends with a down-event, it also reads "
"and discards the following up-event.  You can get access to that up-event "
"with the @samp{U} code character."
msgstr ""

#. type: table
#: original_texis/commands.texi:480
msgid ""
"This kind of input is used by commands such as @code{describe-key} and "
"@code{keymap-global-set}."
msgstr ""

#. type: item
#: original_texis/commands.texi:481
#, no-wrap
msgid "K"
msgstr ""

#. type: table
#: original_texis/commands.texi:489
msgid ""
"A key sequence on a form that can be used as input to functions like "
"@code{keymap-set}.  This works like @samp{k}, except that it suppresses, for "
"the last input event in the key sequence, the conversions that are normally "
"used (when necessary) to convert an undefined key into a defined one "
"(@pxref{Key Sequence Input}), so this form is usually used when prompting "
"for a new key sequence that is to be bound to a command."
msgstr ""

#. type: item
#: original_texis/commands.texi:490
#, no-wrap
msgid "m"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:491
#, no-wrap
msgid "marker argument"
msgstr ""

#. type: table
#: original_texis/commands.texi:493
msgid "The position of the mark, as an integer.  No I/O."
msgstr ""

#. type: item
#: original_texis/commands.texi:494
#, no-wrap
msgid "M"
msgstr ""

#. type: table
#: original_texis/commands.texi:498
msgid ""
"Arbitrary text, read in the minibuffer using the current buffer's input "
"method, and returned as a string (@pxref{Input Methods,,, emacs, The GNU "
"Emacs Manual}).  Prompt."
msgstr ""

#. type: item
#: original_texis/commands.texi:499
#, no-wrap
msgid "n"
msgstr ""

#. type: table
#: original_texis/commands.texi:503
msgid ""
"A number, read with the minibuffer.  If the input is not a number, the user "
"has to try again.  @samp{n} never uses the prefix argument.  Prompt."
msgstr ""

#. type: item
#: original_texis/commands.texi:504
#, no-wrap
msgid "N"
msgstr ""

#. type: table
#: original_texis/commands.texi:508
msgid ""
"The numeric prefix argument; but if there is no prefix argument, read a "
"number as with @kbd{n}.  The value is always a number.  @xref{Prefix Command "
"Arguments}.  Prompt."
msgstr ""

#. type: item
#: original_texis/commands.texi:509
#, no-wrap
msgid "p"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:510
#, no-wrap
msgid "numeric prefix argument usage"
msgstr ""

#. type: table
#: original_texis/commands.texi:513
msgid ""
"The numeric prefix argument.  (Note that this @samp{p} is lower case.)  No "
"I/O."
msgstr ""

#. type: item
#: original_texis/commands.texi:514
#, no-wrap
msgid "P"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:515
#, no-wrap
msgid "raw prefix argument usage"
msgstr ""

#. type: table
#: original_texis/commands.texi:518
msgid "The raw prefix argument.  (Note that this @samp{P} is upper case.)  No I/O."
msgstr ""

#. type: item
#: original_texis/commands.texi:519
#, no-wrap
msgid "r"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:520
#, no-wrap
msgid "region argument"
msgstr ""

#. type: table
#: original_texis/commands.texi:528
msgid ""
"Point and the mark, as two numeric arguments, smallest first.  This is the "
"only code letter that specifies two successive arguments rather than one.  "
"This will signal an error if the mark is not set in the buffer which is "
"current when the command is invoked.  If Transient Mark mode is turned on "
"(@pxref{The Mark}) --- as it is by default --- and user option "
"@code{mark-even-if-inactive} is @code{nil}, Emacs will signal an error even "
"if the mark @emph{is} set, but is inactive.  No I/O."
msgstr ""

#. type: item
#: original_texis/commands.texi:529
#, no-wrap
msgid "s"
msgstr ""

#. type: table
#: original_texis/commands.texi:534
msgid ""
"Arbitrary text, read in the minibuffer and returned as a string (@pxref{Text "
"from Minibuffer}).  Terminate the input with either @kbd{C-j} or @key{RET}.  "
"(@kbd{C-q} may be used to include either of these characters in the input.)  "
"Prompt."
msgstr ""

#. type: item
#: original_texis/commands.texi:535
#, no-wrap
msgid "S"
msgstr ""

#. type: table
#: original_texis/commands.texi:540
msgid ""
"An interned symbol whose name is read in the minibuffer.  Terminate the "
"input with either @kbd{C-j} or @key{RET}.  Other characters that normally "
"terminate a symbol (e.g., whitespace, parentheses and brackets) do not do so "
"here.  Prompt."
msgstr ""

#. type: item
#: original_texis/commands.texi:541
#, no-wrap
msgid "U"
msgstr ""

#. type: table
#: original_texis/commands.texi:546
msgid ""
"A key sequence or @code{nil}.  Can be used after a @samp{k} or @samp{K} "
"argument to get the up-event that was discarded (if any)  after @samp{k} or "
"@samp{K} read a down-event.  If no up-event has been discarded, @samp{U} "
"provides @code{nil} as the argument.  No I/O."
msgstr ""

#. type: item
#: original_texis/commands.texi:547
#, no-wrap
msgid "v"
msgstr ""

#. type: table
#: original_texis/commands.texi:552
msgid ""
"A variable declared to be a user option (i.e., satisfying the predicate "
"@code{custom-variable-p}).  This reads the variable using "
"@code{read-variable}.  @xref{Definition of read-variable}.  Existing, "
"Completion, Prompt."
msgstr ""

#. type: item
#: original_texis/commands.texi:553
#, no-wrap
msgid "x"
msgstr ""

#. type: table
#: original_texis/commands.texi:557
msgid ""
"A Lisp object, specified with its read syntax, terminated with a @kbd{C-j} "
"or @key{RET}.  The object is not evaluated.  @xref{Object from Minibuffer}.  "
"Prompt."
msgstr ""

#. type: item
#: original_texis/commands.texi:558
#, no-wrap
msgid "X"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:559
#, no-wrap
msgid "evaluated expression argument"
msgstr ""

#. type: table
#: original_texis/commands.texi:563
msgid ""
"A Lisp form's value.  @samp{X} reads as @samp{x} does, then evaluates the "
"form so that its value becomes the argument for the command.  Prompt."
msgstr ""

#. type: item
#: original_texis/commands.texi:564
#, no-wrap
msgid "z"
msgstr ""

#. type: table
#: original_texis/commands.texi:568
msgid ""
"A coding system name (a symbol).  If the user enters null input, the "
"argument value is @code{nil}.  @xref{Coding Systems}.  Completion, Existing, "
"Prompt."
msgstr ""

#. type: item
#: original_texis/commands.texi:569
#, no-wrap
msgid "Z"
msgstr ""

#. type: table
#: original_texis/commands.texi:573
msgid ""
"A coding system name (a symbol)---but only if this command has a prefix "
"argument.  With no prefix argument, @samp{Z} provides @code{nil} as the "
"argument value.  Completion, Existing, Prompt."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:576
#, no-wrap
msgid "Examples of Using @code{interactive}"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:577
#, no-wrap
msgid "examples of using @code{interactive}"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:578
#, no-wrap
msgid "@code{interactive}, examples of using"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:581
msgid "Here are some examples of @code{interactive}:"
msgstr ""

#. type: group
#: original_texis/commands.texi:588
#, no-wrap
msgid ""
"(defun foo1 ()              ; @r{@code{foo1} takes no arguments,}\n"
"    (interactive)           ;   @r{just moves forward two words.}\n"
"    (forward-word 2))\n"
"     @result{} foo1\n"
msgstr ""

#. type: group
#: original_texis/commands.texi:597
#, no-wrap
msgid ""
"(defun foo2 (n)             ; @r{@code{foo2} takes one argument,}\n"
"    (interactive \"^p\")      ;   @r{which is the numeric prefix.}\n"
"                            ; @r{under @code{shift-select-mode},}\n"
"                            ;   @r{will activate or extend region.}\n"
"    (forward-word (* 2 n)))\n"
"     @result{} foo2\n"
msgstr ""

#. type: group
#: original_texis/commands.texi:604
#, no-wrap
msgid ""
"(defun foo3 (n)             ; @r{@code{foo3} takes one argument,}\n"
"    (interactive \"nCount:\") ;   @r{which is read with the Minibuffer.}\n"
"    (forward-word (* 2 n)))\n"
"     @result{} foo3\n"
msgstr ""

#. type: group
#: original_texis/commands.texi:610
#, no-wrap
msgid ""
"(defun three-b (b1 b2 b3)\n"
"  \"Select three existing buffers.\n"
"Put them into three windows, selecting the last one.\"\n"
msgstr ""

#. type: example
#: original_texis/commands.texi:621
#, no-wrap
msgid ""
"    (interactive \"bBuffer1:\\nbBuffer2:\\nbBuffer3:\")\n"
"    (delete-other-windows)\n"
"    (split-window (selected-window) 8)\n"
"    (switch-to-buffer b1)\n"
"    (other-window 1)\n"
"    (split-window (selected-window) 8)\n"
"    (switch-to-buffer b2)\n"
"    (other-window 1)\n"
"    (switch-to-buffer b3))\n"
"     @result{} three-b\n"
msgstr ""

#. type: group
#: original_texis/commands.texi:624
#, no-wrap
msgid ""
"(three-b \"*scratch*\" \"declarations.texi\" \"*mail*\")\n"
"     @result{} nil\n"
msgstr ""

#. type: subsection
#: original_texis/commands.texi:628
#, no-wrap
msgid "Specifying Modes For Commands"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:629
#, no-wrap
msgid "commands, mode-specific"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:630
#, no-wrap
msgid "commands, specify as mode-specific"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:631
#, no-wrap
msgid "mode-specific commands"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:637
msgid ""
"Many commands in Emacs are general, and not tied to any specific mode.  For "
"instance, @kbd{M-x kill-region} can be used in pretty much any mode that has "
"editable text, and commands that display information (like @kbd{M-x "
"list-buffers}) can be used in pretty much any context."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:642
msgid ""
"Many other commands, however, are specifically tied to a mode, and make no "
"sense outside of that context.  For instance, @code{M-x dired-diff} will "
"just signal an error if used outside of a Dired buffer."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:645
msgid ""
"Emacs therefore has a mechanism for specifying what mode (or modes) a "
"command ``belongs'' to:"
msgstr ""

#. type: lisp
#: original_texis/commands.texi:651
#, no-wrap
msgid ""
"(defun dired-diff (...)\n"
"  ...\n"
"  (interactive \"p\" dired-mode)\n"
"  ...)\n"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:656
msgid ""
"This will mark the command as applicable to @code{dired-mode} only (or any "
"modes that are derived from @code{dired-mode}).  Any number of modes can be "
"added to the @code{interactive} form."
msgstr ""

#. type: vindex
#: original_texis/commands.texi:657 original_texis/commands.texi:927
#, no-wrap
msgid "read-extended-command-predicate"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:662
msgid ""
"Specifying modes affects command completion in @kbd{M-S-x} "
"(@code{execute-extended-command-for-buffer}, @pxref{Interactive Call}).  It "
"may also affect completion in @kbd{M-x}, depending on the value of "
"@code{read-extended-command-predicate}."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:670
msgid ""
"For instance, when using the @code{command-completion-default-include-p} "
"predicate as the value of @code{read-extended-command-predicate}, @kbd{M-x} "
"won't list commands that have been marked as being applicable to a specific "
"mode (unless you are in a buffer that uses that mode, of course).  This goes "
"for both major and minor modes.  (By contrast, @kbd{M-S-x} always omits "
"inapplicable commands from the completion candidates.)"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:675
msgid ""
"By default, @code{read-extended-command-predicate} is @code{nil}, and "
"completion in @kbd{M-x} lists all the commands that match what the user has "
"typed, whether those commands are or aren't marked as applicable to the "
"current buffer's mode."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:678
msgid ""
"Marking commands to be applicable to a mode will also make @kbd{C-h m} list "
"these commands (if they aren't bound to any keys)."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:683
msgid ""
"If using this extended @code{interactive} form isn't convenient (because the "
"code is supposed to work in older versions of Emacs that don't support the "
"extended @code{interactive} form), the following equivalent declaration "
"(@pxref{Declare Form}) can be used instead:"
msgstr ""

#. type: lisp
#: original_texis/commands.texi:686
#, no-wrap
msgid "(declare (modes dired-mode))\n"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:694
msgid ""
"Which commands to tag with modes is to some degree a matter of taste, but "
"commands that clearly do not work outside of the mode should be tagged.  "
"This includes commands that will signal an error if called from somewhere "
"else, but also commands that are destructive when called from an unexpected "
"mode.  (This usually includes most of the commands that are written for "
"special (i.e., non-editing) modes.)"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:703
msgid ""
"Some commands may be harmless, and ``work'' when called from other modes, "
"but should still be tagged with a mode if they don't actually make much "
"sense to use elsewhere.  For instance, many special modes have commands to "
"exit the buffer bound to @kbd{q}, and may not do anything but issue a "
"message like \"Goodbye from this mode\" and then call @code{kill-buffer}.  "
"This command will ``work'' from any mode, but it is highly unlikely that "
"anybody would actually want to use the command outside the context of this "
"special mode."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:709
msgid ""
"Many modes have a set of different commands that start the mode in different "
"ways (e.g., @code{eww-open-in-new-buffer} and @code{eww-open-file}).  "
"Commands like that should never be tagged as mode-specific, as they can be "
"issued by the user from pretty much any context."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:711
#, no-wrap
msgid "Select among Command Alternatives"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:712
#, no-wrap
msgid "generic commands"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:713
#, no-wrap
msgid "alternative commands, defining"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:726
msgid ""
"Sometimes it is useful to define a command that serves as a ``generic "
"dispatcher'' capable of invoking one of a set of commands according to the "
"user's needs.  For example, imagine that you want to define a command named "
"@samp{open} that can ``open'' and display several different types of "
"objects.  Or you could have a command named @samp{mua} (which stands for "
"Mail User Agent) that can read and send email using one of several email "
"backends, such as Rmail, Gnus, or MH-E.  The macro "
"@code{define-alternatives} can be used to define such @dfn{generic "
"commands}.  A generic command is an interactive function whose "
"implementation can be selected from several alternatives, as a matter of "
"user preference."
msgstr ""

#. type: defmac
#: original_texis/commands.texi:727
#, no-wrap
msgid "define-alternatives command &rest customizations"
msgstr ""

#. type: defmac
#: original_texis/commands.texi:731
msgid ""
"This macro defines the new generic @var{command}, which can have several "
"alternative implementations.  The argument @var{command} should be an "
"unquoted symbol."
msgstr ""

#. type: defmac
#: original_texis/commands.texi:749
msgid ""
"When invoked, the macro creates an interactive Lisp closure "
"(@pxref{Closures}).  When the user runs @w{@kbd{M-x @var{command} "
"@key{RET}}} for the first time, Emacs asks to select one of the alternative "
"implementations of @var{command}, offering completion for the names of these "
"alternatives.  These names come from the user option whose name is "
"@code{@var{command}-alternatives}, which the macro creates (if it didn't "
"exist before).  To be useful, this variable's value should be an alist whose "
"elements have the form @w{@code{(@var{alt-name} . @var{alt-func})}}, where "
"@var{alt-name} is the name of the alternative and @var{alt-func} is the "
"interactive function to be called if this alternative is selected.  When the "
"user selects an alternative, Emacs remembers the selection, and will "
"thereafter automatically call that selected alternative without prompting "
"when the user invokes @kbd{M-x @var{command}} again.  To choose a different "
"alternative, type @w{@kbd{C-u M-x @var{command} @key{RET}}}--then Emacs will "
"again prompt for one of the alternatives, and the selection will override "
"the previous one."
msgstr ""

#. type: defmac
#: original_texis/commands.texi:757
msgid ""
"The variable @code{@var{command}-alternatives} can be created before calling "
"@code{define-alternatives}, with the appropriate values; otherwise the macro "
"creates the variable with a @code{nil} value, and it should then be "
"populated with the associations describing the alternatives.  Packages that "
"wish to provide their own implementation of an existing generic command can "
"use @code{autoload} cookies (@pxref{Autoload}) to add to the alist, for "
"example:"
msgstr ""

#. type: lisp
#: original_texis/commands.texi:760
#, no-wrap
msgid ";;;###autoload (push '(\"My name\" . my-foo-symbol) foo-alternatives\n"
msgstr ""

#. type: defmac
#: original_texis/commands.texi:766
msgid ""
"If the optional argument @var{customizations} is non-@code{nil}, it should "
"consist of alternating @code{defcustom} keywords (typically @code{:group} "
"and @code{:version}) and values to add to the definition of the "
"@code{defcustom} @code{@var{command}-alternatives}."
msgstr ""

#. type: defmac
#: original_texis/commands.texi:769
msgid ""
"Here is an example of a simple generic dispatcher command named @code{open} "
"with 3 alternative implementations:"
msgstr ""

#. type: group
#: original_texis/commands.texi:775
#, no-wrap
msgid ""
"(define-alternatives open\n"
"  :group 'files\n"
"  :version \"42.1\")\n"
msgstr ""

#. type: group
#: original_texis/commands.texi:781
#, no-wrap
msgid ""
"(setq open-alternatives\n"
"      '((\"file\" . find-file)\n"
"\t(\"directory\" . dired)\n"
"\t(\"hexl\" . hexl-find-file)))\n"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:788
#, no-wrap
msgid "interactive call"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:795
msgid ""
"After the command loop has translated a key sequence into a command, it "
"invokes that command using the function @code{command-execute}.  If the "
"command is a function, @code{command-execute} calls "
"@code{call-interactively}, which reads the arguments and calls the command.  "
"You can also call these functions yourself."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:800
msgid ""
"Note that the term ``command'', in this context, refers to an interactively "
"callable function (or function-like object), or a keyboard macro.  It does "
"not refer to the key sequence used to invoke a command (@pxref{Keymaps})."
msgstr ""

#. type: defun
#: original_texis/commands.texi:801
#, no-wrap
msgid "commandp object &optional for-call-interactively"
msgstr ""

#. type: defun
#: original_texis/commands.texi:804
msgid ""
"This function returns @code{t} if @var{object} is a command.  Otherwise, it "
"returns @code{nil}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:814
msgid ""
"Commands include strings and vectors (which are treated as keyboard macros), "
"lambda expressions that contain a top-level @code{interactive} form "
"(@pxref{Using Interactive}), byte-code function objects made from such "
"lambda expressions, autoload objects that are declared as interactive "
"(non-@code{nil} fourth argument to @code{autoload}), and some primitive "
"functions.  Also, a symbol is considered a command if it has a "
"non-@code{nil} @code{interactive-form} property, or if its function "
"definition satisfies @code{commandp}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:818
msgid ""
"If @var{for-call-interactively} is non-@code{nil}, then @code{commandp} "
"returns @code{t} only for objects that @code{call-interactively} could "
"call---thus, not for keyboard macros."
msgstr ""

#. type: defun
#: original_texis/commands.texi:821
msgid ""
"See @code{documentation} in @ref{Accessing Documentation}, for a realistic "
"example of using @code{commandp}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:823
#, no-wrap
msgid "call-interactively command &optional record-flag keys"
msgstr ""

#. type: defun
#: original_texis/commands.texi:827
msgid ""
"This function calls the interactively callable function @var{command}, "
"providing arguments according to its interactive calling specifications.  It "
"returns whatever @var{command} returns."
msgstr ""

#. type: defun
#: original_texis/commands.texi:829
msgid "If, for instance, you have a function with the following signature:"
msgstr ""

#. type: example
#: original_texis/commands.texi:834
#, no-wrap
msgid ""
"(defun foo (begin end)\n"
"  (interactive \"r\")\n"
"  ...)\n"
msgstr ""

#. type: defun
#: original_texis/commands.texi:837
msgid "then saying"
msgstr ""

#. type: example
#: original_texis/commands.texi:840
#, no-wrap
msgid "(call-interactively 'foo)\n"
msgstr ""

#. type: defun
#: original_texis/commands.texi:844
msgid ""
"will call @code{foo} with the region (@code{point} and @code{mark}) as the "
"arguments."
msgstr ""

#. type: defun
#: original_texis/commands.texi:851
msgid ""
"An error is signaled if @var{command} is not a function or if it cannot be "
"called interactively (i.e., is not a command).  Note that keyboard macros "
"(strings and vectors) are not accepted, even though they are considered "
"commands, because they are not functions.  If @var{command} is a symbol, "
"then @code{call-interactively} uses its function definition."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:852
#, no-wrap
msgid "record command history"
msgstr ""

#. type: defun
#: original_texis/commands.texi:857
msgid ""
"If @var{record-flag} is non-@code{nil}, then this command and its arguments "
"are unconditionally added to the list @code{command-history}.  Otherwise, "
"the command is added only if it uses the minibuffer to read an argument.  "
"@xref{Command History}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:863
msgid ""
"The argument @var{keys}, if given, should be a vector which specifies the "
"sequence of events to supply if the command inquires which events were used "
"to invoke it.  If @var{keys} is omitted or @code{nil}, the default is the "
"return value of @code{this-command-keys-vector}.  @xref{Definition of "
"this-command-keys-vector}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:865
#, no-wrap
msgid "funcall-interactively function &rest arguments"
msgstr ""

#. type: defun
#: original_texis/commands.texi:871
msgid ""
"This function works like @code{funcall} (@pxref{Calling Functions}), but it "
"makes the call look like an interactive invocation: a call to "
"@code{called-interactively-p} inside @var{function} will return @code{t}.  "
"If @var{function} is not a command, it is called without signaling an error."
msgstr ""

#. type: defun
#: original_texis/commands.texi:873
#, no-wrap
msgid "command-execute command &optional record-flag keys special"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:874
#, no-wrap
msgid "keyboard macro execution"
msgstr ""

#. type: defun
#: original_texis/commands.texi:878
msgid ""
"This function executes @var{command}.  The argument @var{command} must "
"satisfy the @code{commandp} predicate; i.e., it must be an interactively "
"callable function or a keyboard macro."
msgstr ""

#. type: defun
#: original_texis/commands.texi:883
msgid ""
"A string or vector as @var{command} is executed with "
"@code{execute-kbd-macro}.  A function is passed to @code{call-interactively} "
"(see above), along with the @var{record-flag} and @var{keys} arguments."
msgstr ""

#. type: defun
#: original_texis/commands.texi:889
msgid ""
"If @var{command} is a symbol, its function definition is used in its place.  "
"A symbol with an @code{autoload} definition counts as a command if it was "
"declared to stand for an interactively callable function.  Such a definition "
"is handled by loading the specified library and then rechecking the "
"definition of the symbol."
msgstr ""

#. type: defun
#: original_texis/commands.texi:893
msgid ""
"The argument @var{special}, if given, means to ignore the prefix argument "
"and not clear it.  This is used for executing special events (@pxref{Special "
"Events})."
msgstr ""

#. type: deffn
#: original_texis/commands.texi:895
#, no-wrap
msgid "Command execute-extended-command prefix-argument"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:896
#, no-wrap
msgid "read command name"
msgstr ""

#. type: deffn
#: original_texis/commands.texi:901
msgid ""
"This function reads a command name from the minibuffer using "
"@code{completing-read} (@pxref{Completion}).  Then it uses "
"@code{command-execute} to call the specified command.  Whatever that command "
"returns becomes the value of @code{execute-extended-command}."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:902
#, no-wrap
msgid "execute with prefix argument"
msgstr ""

#. type: deffn
#: original_texis/commands.texi:907
msgid ""
"If the command asks for a prefix argument, it receives the value "
"@var{prefix-argument}.  If @code{execute-extended-command} is called "
"interactively, the current raw prefix argument is used for "
"@var{prefix-argument}, and thus passed on to whatever command is run."
msgstr ""

#. type: kbd{#1}
#: original_texis/commands.texi:909
#, no-wrap
msgid "M-x"
msgstr ""

#. type: deffn
#: original_texis/commands.texi:916
msgid ""
"@code{execute-extended-command} is the normal definition of @kbd{M-x}, so it "
"uses the string @w{@samp{M-x }} as a prompt.  (It would be better to take "
"the prompt from the events used to invoke @code{execute-extended-command}, "
"but that is painful to implement.)  A description of the value of the prefix "
"argument, if any, also becomes part of the prompt."
msgstr ""

#. type: group
#: original_texis/commands.texi:924
#, no-wrap
msgid ""
"(execute-extended-command 3)\n"
"---------- Buffer: Minibuffer ----------\n"
"3 M-x forward-word @key{RET}\n"
"---------- Buffer: Minibuffer ----------\n"
"     @result{} t\n"
msgstr ""

#. type: findex
#: original_texis/commands.texi:928
#, no-wrap
msgid "command-completion-default-include-p"
msgstr ""

#. type: deffn
#: original_texis/commands.texi:940
msgid ""
"This command heeds the @code{read-extended-command-predicate} variable, "
"which can filter out commands that are not applicable to the current major "
"mode (or enabled minor modes).  By default, the value of this variable is "
"@code{nil}, and no commands are filtered out.  However, customizing it to "
"invoke the function @code{command-completion-default-include-p} will perform "
"mode-dependent filtering.  @code{read-extended-command-predicate} can be any "
"predicate function; it will be called with two parameters: the command's "
"symbol and the current buffer.  If should return non-@code{nil} if the "
"command is to be included when completing in that buffer."
msgstr ""

#. type: kbd{#1}
#: original_texis/commands.texi:942
#, no-wrap
msgid "M-X"
msgstr ""

#. type: kbd{#1}
#: original_texis/commands.texi:943
#, no-wrap
msgid "M-S-x"
msgstr ""

#. type: deffn
#: original_texis/commands.texi:944
#, no-wrap
msgid "Command execute-extended-command-for-buffer prefix-argument"
msgstr ""

#. type: deffn
#: original_texis/commands.texi:952
msgid ""
"This is like @code{execute-extended-command}, but limits the commands "
"offered for completion to those commands that are of particular relevance to "
"the current major mode (and enabled minor modes).  This includes commands "
"that are tagged with the modes (@pxref{Using Interactive}), and also "
"commands that are bound to locally active keymaps.  This command is the "
"normal definition of @kbd{M-S-x} (that's ``meta shift x'')."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:957
msgid ""
"Both these commands prompt for a command name, but with different completion "
"rules.  You can toggle between these two modes by using the @kbd{M-S-x} "
"command while being prompted."
msgstr ""

#. type: section
#: original_texis/commands.texi:959
#, no-wrap
msgid "Distinguish Interactive Calls"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:960
#, no-wrap
msgid "distinguish interactive calls"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:961
#, no-wrap
msgid "is this call interactive"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:970
msgid ""
"Sometimes a command should display additional visual feedback (such as an "
"informative message in the echo area) for interactive calls only.  There are "
"three ways to do this.  The recommended way to test whether the function was "
"called using @code{call-interactively} is to give it an optional argument "
"@code{print-message} and use the @code{interactive} spec to make it "
"non-@code{nil} in interactive calls.  Here's an example:"
msgstr ""

#. type: example
#: original_texis/commands.texi:976
#, no-wrap
msgid ""
"(defun foo (&optional print-message)\n"
"  (interactive \"p\")\n"
"  (when print-message\n"
"    (message \"foo\")))\n"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:982
msgid ""
"We use @code{\"p\"} because the numeric prefix argument is never "
"@code{nil}.  Defined in this way, the function does display the message when "
"called from a keyboard macro."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:986
msgid ""
"The above method with the additional argument is usually best, because it "
"allows callers to say ``treat this call as interactive''.  But you can also "
"do the job by testing @code{called-interactively-p}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:987
#, no-wrap
msgid "called-interactively-p kind"
msgstr ""

#. type: defun
#: original_texis/commands.texi:990
msgid ""
"This function returns @code{t} when the calling function was called using "
"@code{call-interactively}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:999
msgid ""
"The argument @var{kind} should be either the symbol @code{interactive} or "
"the symbol @code{any}.  If it is @code{interactive}, then "
"@code{called-interactively-p} returns @code{t} only if the call was made "
"directly by the user---e.g., if the user typed a key sequence bound to the "
"calling function, but @emph{not} if the user ran a keyboard macro that "
"called the function (@pxref{Keyboard Macros}).  If @var{kind} is @code{any}, "
"@code{called-interactively-p} returns @code{t} for any kind of interactive "
"call, including keyboard macros."
msgstr ""

#. type: defun
#: original_texis/commands.texi:1003
msgid ""
"If in doubt, use @code{any}; the only known proper use of @code{interactive} "
"is if you need to decide whether to display a helpful message while a "
"function is running."
msgstr ""

#. type: defun
#: original_texis/commands.texi:1006
msgid ""
"A function is never considered to be called interactively if it was called "
"via Lisp evaluation (or with @code{apply} or @code{funcall})."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1010
msgid "Here is an example of using @code{called-interactively-p}:"
msgstr ""

#. type: group
#: original_texis/commands.texi:1018
#, no-wrap
msgid ""
"(defun foo ()\n"
"  (interactive)\n"
"  (when (called-interactively-p 'any)\n"
"    (message \"Interactive!\")\n"
"    'foo-called-interactively))\n"
msgstr ""

#. type: group
#: original_texis/commands.texi:1023
#, no-wrap
msgid ""
";; @r{Type @kbd{M-x foo}.}\n"
"     @print{} Interactive!\n"
msgstr ""

#. type: group
#: original_texis/commands.texi:1028
#, no-wrap
msgid ""
"(foo)\n"
"     @result{} nil\n"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1034
msgid ""
"Here is another example that contrasts direct and indirect calls to "
"@code{called-interactively-p}."
msgstr ""

#. type: group
#: original_texis/commands.texi:1040
#, no-wrap
msgid ""
"(defun bar ()\n"
"  (interactive)\n"
"  (message \"%s\" (list (foo) (called-interactively-p 'any))))\n"
msgstr ""

#. type: group
#: original_texis/commands.texi:1045
#, no-wrap
msgid ""
";; @r{Type @kbd{M-x bar}.}\n"
"     @print{} (nil t)\n"
msgstr ""

#. type: section
#: original_texis/commands.texi:1049
#, no-wrap
msgid "Information from the Command Loop"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1050
#, no-wrap
msgid "command loop variables"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1056
msgid ""
"The editor command loop sets several Lisp variables to keep status records "
"for itself and for commands that are run.  With the exception of "
"@code{this-command} and @code{last-command} it's generally a bad idea to "
"change any of these variables in a Lisp program."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1057
#, no-wrap
msgid "last-command"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1061
msgid ""
"This variable records the name of the previous command executed by the "
"command loop (the one before the current command).  Normally the value is a "
"symbol with a function definition, but this is not guaranteed."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1065
msgid ""
"The value is copied from @code{this-command} when a command returns to the "
"command loop, except when the command has specified a prefix argument for "
"the following command."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1068
msgid ""
"This variable is always local to the current terminal and cannot be "
"buffer-local.  @xref{Multiple Terminals}."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1070
#, no-wrap
msgid "real-last-command"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1073
msgid ""
"This variable is set up by Emacs just like @code{last-command}, but never "
"altered by Lisp programs."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1075
#, no-wrap
msgid "last-repeatable-command"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1079
msgid ""
"This variable stores the most recently executed command that was not part of "
"an input event.  This is the command @code{repeat} will try to repeat, "
"@xref{Repeating,,, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1081
#, no-wrap
msgid "this-command"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1082
#, no-wrap
msgid "current command"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1086
msgid ""
"This variable records the name of the command now being executed by the "
"editor command loop.  Like @code{last-command}, it is normally a symbol with "
"a function definition."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1091
msgid ""
"The command loop sets this variable just before running a command, and "
"copies its value into @code{last-command} when the command finishes (unless "
"the command specified a prefix argument for the following command)."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1092
#, no-wrap
msgid "kill command repetition"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1098
msgid ""
"Some commands set this variable during their execution, as a flag for "
"whatever command runs next.  In particular, the functions for killing text "
"set @code{this-command} to @code{kill-region} so that any kill commands "
"immediately following will know to append the killed text to the previous "
"kill."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1105
msgid ""
"If you do not want a particular command to be recognized as the previous "
"command in the case where it got an error, you must code that command to "
"prevent this.  One way is to set @code{this-command} to @code{t} at the "
"beginning of the command, and set @code{this-command} back to its proper "
"value at the end, like this:"
msgstr ""

#. type: example
#: original_texis/commands.texi:1113
#, no-wrap
msgid ""
"(defun foo (args@dots{})\n"
"  (interactive @dots{})\n"
"  (let ((old-this-command this-command))\n"
"    (setq this-command t)\n"
"    @r{@dots{}do the work@dots{}}\n"
"    (setq this-command old-this-command)))\n"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1119
msgid ""
"We do not bind @code{this-command} with @code{let} because that would "
"restore the old value in case of error---a feature of @code{let} which in "
"this case does precisely what we want to avoid."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1120
#, no-wrap
msgid "this-original-command"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1126
msgid ""
"This has the same value as @code{this-command} except when command remapping "
"occurs (@pxref{Remapping Commands}).  In that case, @code{this-command} "
"gives the command actually run (the result of remapping), and "
"@code{this-original-command} gives the command that was specified to run but "
"remapped into another command."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1128
#, no-wrap
msgid "current-minibuffer-command"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1133
msgid ""
"This has the same value as @code{this-command}, but is bound recursively "
"when entering a minibuffer.  This variable can be used from minibuffer hooks "
"and the like to determine what command opened the current minibuffer "
"session."
msgstr ""

#. type: defun
#: original_texis/commands.texi:1135
#, no-wrap
msgid "this-command-keys"
msgstr ""

#. type: defun
#: original_texis/commands.texi:1139
msgid ""
"This function returns a string or vector containing the key sequence that "
"invoked the present command.  Any events read by the command using "
"@code{read-event} without a timeout get tacked on to the end."
msgstr ""

#. type: defun
#: original_texis/commands.texi:1144
msgid ""
"However, if the command has called @code{read-key-sequence}, it returns the "
"last read key sequence.  @xref{Key Sequence Input}.  The value is a string "
"if all events in the sequence were characters that fit in a string.  "
"@xref{Input Events}."
msgstr ""

#. type: group
#: original_texis/commands.texi:1150
#, no-wrap
msgid ""
"(this-command-keys)\n"
";; @r{Now use @kbd{C-u C-x C-e} to evaluate that.}\n"
"     @result{} \"^X^E\"\n"
msgstr ""

#. type: defun
#: original_texis/commands.texi:1154
#, no-wrap
msgid "this-command-keys-vector"
msgstr ""

#. type: anchor{#1}
#: original_texis/commands.texi:1159
msgid "Definition of this-command-keys-vector"
msgstr ""

#. type: defun
#: original_texis/commands.texi:1159
msgid ""
"Like @code{this-command-keys}, except that it always returns the events in a "
"vector, so you don't need to deal with the complexities of storing input "
"events in a string (@pxref{Strings of Events})."
msgstr ""

#. type: defun
#: original_texis/commands.texi:1161
#, no-wrap
msgid "clear-this-command-keys &optional keep-record"
msgstr ""

#. type: defun
#: original_texis/commands.texi:1168
msgid ""
"This function empties out the table of events for @code{this-command-keys} "
"to return.  Unless @var{keep-record} is non-@code{nil}, it also empties the "
"records that the function @code{recent-keys} (@pxref{Recording Input}) will "
"subsequently return.  This is useful after reading a password, to prevent "
"the password from echoing inadvertently as part of the next command in "
"certain cases."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1170
#, no-wrap
msgid "last-nonmenu-event"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1173
msgid ""
"This variable holds the last input event read as part of a key sequence, not "
"counting events resulting from mouse menus."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1177
msgid ""
"One use of this variable is for telling @code{x-popup-menu} where to pop up "
"a menu.  It is also used internally by @code{y-or-n-p} (@pxref{Yes-or-No "
"Queries})."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1179
#, no-wrap
msgid "last-command-event"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1186
msgid ""
"This variable is set to the last input event that was read by the command "
"loop as part of a command.  The principal use of this variable is in "
"@code{self-insert-command}, which uses it to decide which character to "
"insert, and in @code{post-self-insert-hook} (@pxref{Commands for "
"Insertion}), which uses it to access the character that was just inserted."
msgstr ""

#. type: group
#: original_texis/commands.texi:1192
#, no-wrap
msgid ""
"last-command-event\n"
";; @r{Now use @kbd{C-u C-x C-e} to evaluate that.}\n"
"     @result{} 5\n"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1197
msgid "The value is 5 because that is the @acronym{ASCII} code for @kbd{C-e}."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1199
#, no-wrap
msgid "last-event-frame"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1205
msgid ""
"This variable records which frame the last input event was directed to.  "
"Usually this is the frame that was selected when the event was generated, "
"but if that frame has redirected input focus to another frame, the value is "
"the frame to which the event was redirected.  @xref{Input Focus}."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1207
msgid "If the last event came from a keyboard macro, the value is @code{macro}."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1209
#, no-wrap
msgid "input devices"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1210
#, no-wrap
msgid "device names"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1218
msgid ""
"Input events must come from somewhere; sometimes, that is a keyboard macro, "
"a signal, or `unread-command-events', but it is usually a physical input "
"device connected to a computer that is controlled by the user.  Those "
"devices are referred to as @dfn{input devices}, and Emacs associates each "
"input event with the input device from which it originated.  They are "
"identified by a name that is unique to each input device."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1225
msgid ""
"The ability to determine the precise input device used depends on the "
"details of each system.  When that information is unavailable, Emacs reports "
"keyboard events as originating from the @samp{\"Virtual core keyboard\"}, "
"and other events as originating from the @samp{\"Virtual core pointer\"}.  "
"(These values are used on every platform because the X server reports them "
"when detailed device information is not known.)"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1226
#, no-wrap
msgid "last-event-device"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1231
msgid ""
"This variable records the name of the input device from which the last input "
"event read was generated.  It is @code{nil} if no such device exists, i.e., "
"the last input event was read from @code{unread-command-events}, or it came "
"from a keyboard macro."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1238
msgid ""
"When the X Input Extension is being used on X Windows, the device name is a "
"string that is unique to each physical keyboard, pointing device and "
"touchscreen attached to the X server.  Otherwise, it is either the string "
"@samp{\"Virtual core pointer\"} or @samp{\"Virtual core keyboard\"}, "
"depending on whether the event was generated by a pointing device (such as a "
"mouse) or a keyboard."
msgstr ""

#. type: defun
#: original_texis/commands.texi:1240
#, no-wrap
msgid "device-class frame name"
msgstr ""

#. type: defun
#: original_texis/commands.texi:1245
msgid ""
"There are various different types of devices, which can be determined from "
"their names.  This function can be used to determined the correct type of "
"the device @var{name} for an event originating from @var{frame}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:1247
msgid "The return value is one of the following symbols (``device classes''):"
msgstr ""

#. type: item
#: original_texis/commands.texi:1249
#, no-wrap
msgid "core-keyboard"
msgstr ""

#. type: table
#: original_texis/commands.texi:1252
msgid ""
"The core keyboard; this is means the device is a keyboard-like device, but "
"no other characteristics are unknown."
msgstr ""

#. type: item
#: original_texis/commands.texi:1253
#, no-wrap
msgid "core-pointer"
msgstr ""

#. type: table
#: original_texis/commands.texi:1256
msgid ""
"The core pointer; this means the device is a pointing device, but no other "
"characteristics are known."
msgstr ""

#. type: item
#: original_texis/commands.texi:1257
#, no-wrap
msgid "mouse"
msgstr ""

#. type: table
#: original_texis/commands.texi:1259
msgid "A computer mouse."
msgstr ""

#. type: item
#: original_texis/commands.texi:1260
#, no-wrap
msgid "trackpoint"
msgstr ""

#. type: table
#: original_texis/commands.texi:1262
msgid "A trackpoint or joystick (or other similar control.)"
msgstr ""

#. type: item
#: original_texis/commands.texi:1263
#, no-wrap
msgid "eraser"
msgstr ""

#. type: table
#: original_texis/commands.texi:1266
msgid "The other end of a stylus on a graphics tablet, or a standalone eraser."
msgstr ""

#. type: item
#: original_texis/commands.texi:1267
#, no-wrap
msgid "pen"
msgstr ""

#. type: table
#: original_texis/commands.texi:1270
msgid ""
"The pointed end of a pen on a graphics tablet, a stylus, or some other "
"similar device."
msgstr ""

#. type: item
#: original_texis/commands.texi:1271
#, no-wrap
msgid "puck"
msgstr ""

#. type: table
#: original_texis/commands.texi:1274
msgid ""
"A device that looks like a computer mouse, but reports absolute coordinates "
"relative to some other surface."
msgstr ""

#. type: item
#: original_texis/commands.texi:1275
#, no-wrap
msgid "power-button"
msgstr ""

#. type: table
#: original_texis/commands.texi:1277
msgid "A power button or volume button (or other similar control.)"
msgstr ""

#. type: item
#: original_texis/commands.texi:1278
#, no-wrap
msgid "keyboard"
msgstr ""

#. type: table
#: original_texis/commands.texi:1280
msgid "A computer keyboard."
msgstr ""

#. type: item
#: original_texis/commands.texi:1281
#, no-wrap
msgid "touchscreen"
msgstr ""

#. type: table
#: original_texis/commands.texi:1283
msgid "A computer touchpad."
msgstr ""

#. type: item
#: original_texis/commands.texi:1284
#, no-wrap
msgid "pad"
msgstr ""

#. type: table
#: original_texis/commands.texi:1287
msgid ""
"A collection of sensitive buttons, rings, and strips commonly found around a "
"drawing tablet."
msgstr ""

#. type: item
#: original_texis/commands.texi:1288
#, no-wrap
msgid "touchpad"
msgstr ""

#. type: table
#: original_texis/commands.texi:1290
msgid "An indirect touch device such as a touchpad."
msgstr ""

#. type: item
#: original_texis/commands.texi:1291
#, no-wrap
msgid "piano"
msgstr ""

#. type: table
#: original_texis/commands.texi:1293
msgid "A musical instrument such as an electronic keyboard."
msgstr ""

#. type: item
#: original_texis/commands.texi:1294
#, no-wrap
msgid "test"
msgstr ""

#. type: table
#: original_texis/commands.texi:1296
msgid "A device used by the XTEST extension to report input."
msgstr ""

#. type: section
#: original_texis/commands.texi:1300
#, no-wrap
msgid "Adjusting Point After Commands"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1301
#, no-wrap
msgid "adjusting point"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1302
#, no-wrap
msgid "invisible/intangible text, and point"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1303
#, no-wrap
msgid "@code{display} property, and point display"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1304
#, no-wrap
msgid "@code{composition} property, and point display"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1312
msgid ""
"When a sequence of text has the @code{display} or @code{composition} "
"property, or is invisible, there can be several buffer positions that result "
"in the cursor being displayed at same place on the screen.  Therefore, after "
"a command finishes and returns to the command loop, if point is in such a "
"sequence, the command loop normally moves point to try and make this "
"sequence effectively intangible."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1319
msgid ""
"This @emph{point adjustment} follows the following general rules: first, the "
"adjustment should not change the overall direction of the command; second if "
"the command moved point, the adjustment tries to ensure the cursor is also "
"moved; third, Emacs prefers the edges of an intangible sequence and among "
"those edges it prefers the non sticky ones, such that newly inserted text is "
"visible."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1322
msgid ""
"A command can inhibit this feature by setting the variable "
"@code{disable-point-adjustment}:"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1323
#, no-wrap
msgid "disable-point-adjustment"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1327
msgid ""
"If this variable is non-@code{nil} when a command returns to the command "
"loop, then the command loop does not check for those text properties, and "
"does not move point out of sequences that have them."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1330
msgid ""
"The command loop sets this variable to @code{nil} before each command, so if "
"a command sets it, the effect applies only to that command."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1332
#, no-wrap
msgid "global-disable-point-adjustment"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:1335
msgid ""
"If you set this variable to a non-@code{nil} value, the feature of moving "
"point out of these sequences is completely turned off."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1339
#, no-wrap
msgid "events"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1340
#, no-wrap
msgid "input events"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1347
msgid ""
"The Emacs command loop reads a sequence of @dfn{input events} that represent "
"keyboard or mouse activity, or system events sent to Emacs.  The events for "
"keyboard activity are characters or symbols; other events are always lists.  "
"This section describes the representation and meaning of input events in "
"detail."
msgstr ""

#. type: defun
#: original_texis/commands.texi:1348
#, no-wrap
msgid "eventp object"
msgstr ""

#. type: defun
#: original_texis/commands.texi:1351
msgid ""
"This function returns non-@code{nil} if @var{object} is an input event or "
"event type."
msgstr ""

#. type: defun
#: original_texis/commands.texi:1355
msgid ""
"Note that any non-@code{nil} symbol might be used as an event or an event "
"type; @code{eventp} cannot distinguish whether a symbol is intended by Lisp "
"code to be used as an event."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:1377 original_texis/commands.texi:1379
#: original_texis/commands.texi:1380
#, no-wrap
msgid "Keyboard Events"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:1377
msgid "Ordinary characters -- keys with symbols on them."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:1377 original_texis/commands.texi:1511
#: original_texis/commands.texi:1512
#, no-wrap
msgid "Function Keys"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:1377
msgid "Function keys -- keys with names, not symbols."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:1377 original_texis/commands.texi:1588
#: original_texis/commands.texi:1589
#, no-wrap
msgid "Mouse Events"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:1377
msgid "Overview of mouse events."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:1377 original_texis/commands.texi:1610
#: original_texis/commands.texi:1611
#, no-wrap
msgid "Click Events"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:1377
msgid "Pushing and releasing a mouse button."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:1377 original_texis/commands.texi:1844
#: original_texis/commands.texi:1845
#, no-wrap
msgid "Drag Events"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:1377
msgid "Moving the mouse before releasing the button."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:1377 original_texis/commands.texi:1880
#: original_texis/commands.texi:1881
#, no-wrap
msgid "Button-Down Events"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:1377
msgid "A button was pushed and not yet released."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:1377 original_texis/commands.texi:1904
#: original_texis/commands.texi:1905
#, no-wrap
msgid "Repeat Events"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:1377
msgid "Double and triple click (or drag, or down)."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:1377 original_texis/commands.texi:1999
#: original_texis/commands.texi:2000
#, no-wrap
msgid "Motion Events"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:1377
msgid "Just moving the mouse, not pushing a button."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:1377 original_texis/commands.texi:2030
#: original_texis/commands.texi:2031
#, no-wrap
msgid "Touchscreen Events"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:1377
msgid "Tapping and moving fingers on a touchscreen."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:1377 original_texis/commands.texi:2302
#: original_texis/commands.texi:2303
#, no-wrap
msgid "Focus Events"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:1377
msgid "Moving the mouse between frames."
msgstr ""

#. type: node
#: original_texis/commands.texi:1377 original_texis/commands.texi:2366
#, no-wrap
msgid "Xwidget Events"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:1377
msgid "Events generated by xwidgets."
msgstr ""

#. type: node
#: original_texis/commands.texi:1377 original_texis/commands.texi:2460
#, no-wrap
msgid "Misc Events"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:1377
msgid "Other events the system can generate."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:1377 original_texis/commands.texi:2809
#: original_texis/commands.texi:2810
#, no-wrap
msgid "Event Examples"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:1377
msgid "Examples of the lists for mouse events."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:1377 original_texis/commands.texi:2849
#: original_texis/commands.texi:2850
#, no-wrap
msgid "Classifying Events"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:1377
msgid "Finding the modifier keys in an event symbol.  Event types."
msgstr ""

#. type: node
#: original_texis/commands.texi:1377 original_texis/commands.texi:2951
#, no-wrap
msgid "Accessing Mouse"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:1377
msgid "Functions to extract info from mouse events."
msgstr ""

#. type: node
#: original_texis/commands.texi:1377 original_texis/commands.texi:3141
#, no-wrap
msgid "Accessing Scroll"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:1377
msgid "Functions to get info from scroll bar events."
msgstr ""

#. type: node
#: original_texis/commands.texi:1377 original_texis/commands.texi:3174
#, no-wrap
msgid "Strings of Events"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:1377
msgid "Special considerations for putting keyboard character events in a string."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1381
#, no-wrap
msgid "keyboard events"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1383
#, no-wrap
msgid "character event"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1390
msgid ""
"There are two kinds of input you can get from the keyboard: ordinary keys, "
"and function keys.  Ordinary keys correspond to (possibly modified) "
"characters; the events they generate are represented in Lisp as characters.  "
"The event type of a @dfn{character event} is the character itself (an "
"integer), which might have some modifier bits set; see @ref{Classifying "
"Events}."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1391
#, no-wrap
msgid "modifier bits (of input character)"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1392
#, no-wrap
msgid "basic code (of input character)"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1395
msgid ""
"An input character event consists of a @dfn{basic code} between 0 and "
"524287, plus any or all of these @dfn{modifier bits}:"
msgstr ""

#. type: item
#: original_texis/commands.texi:1397
#, no-wrap
msgid "meta"
msgstr ""

#. type: table
#: original_texis/commands.texi:1399 original_texis/commands.texi:1410
#: original_texis/commands.texi:1437 original_texis/commands.texi:1471
#: original_texis/commands.texi:1482 original_texis/commands.texi:1493
msgid "The"
msgstr ""

#. type: tex
#: original_texis/commands.texi:1401 original_texis/commands.texi:3216
#: original_texis/commands.texi:3236 original_texis/commands.texi:3258
#, no-wrap
msgid "@math{2^{27}}\n"
msgstr ""

#. type: ifnottex
#: original_texis/commands.texi:1404 original_texis/commands.texi:3219
#: original_texis/commands.texi:3239 original_texis/commands.texi:3261
msgid "2**27"
msgstr ""

#. type: table
#: original_texis/commands.texi:1407
msgid ""
"bit in the character code indicates a character typed with the meta key held "
"down."
msgstr ""

#. type: item
#: original_texis/commands.texi:1408
#, no-wrap
msgid "control"
msgstr ""

#. type: tex
#: original_texis/commands.texi:1412 original_texis/commands.texi:1428
#, no-wrap
msgid "@math{2^{26}}\n"
msgstr ""

#. type: ifnottex
#: original_texis/commands.texi:1415 original_texis/commands.texi:1431
msgid "2**26"
msgstr ""

#. type: table
#: original_texis/commands.texi:1418
msgid "bit in the character code indicates a non-@acronym{ASCII} control character."
msgstr ""

#. type: table
#: original_texis/commands.texi:1422
msgid ""
"@sc{ascii} control characters such as @kbd{C-a} have special basic codes of "
"their own, so Emacs needs no special bit to indicate them.  Thus, the code "
"for @kbd{C-a} is just 1."
msgstr ""

#. type: table
#: original_texis/commands.texi:1426
msgid ""
"But if you type a control combination not in @acronym{ASCII}, such as "
"@kbd{%} with the control key, the numeric value you get is the code for "
"@kbd{%} plus"
msgstr ""

#. type: table
#: original_texis/commands.texi:1434
msgid ""
"(assuming the terminal supports non-@acronym{ASCII} control characters), "
"i.e.@: with the 27th bit set."
msgstr ""

#. type: item
#: original_texis/commands.texi:1435
#, no-wrap
msgid "shift"
msgstr ""

#. type: tex
#: original_texis/commands.texi:1439 original_texis/commands.texi:1452
#: original_texis/commands.texi:1462
#, no-wrap
msgid "@math{2^{25}}\n"
msgstr ""

#. type: ifnottex
#: original_texis/commands.texi:1442 original_texis/commands.texi:1455
#: original_texis/commands.texi:1465
msgid "2**25"
msgstr ""

#. type: table
#: original_texis/commands.texi:1445
msgid ""
"bit (the 26th bit) in the character event code indicates an @acronym{ASCII} "
"control character typed with the shift key held down."
msgstr ""

#. type: table
#: original_texis/commands.texi:1450
msgid ""
"For letters, the basic code itself indicates upper versus lower case; for "
"digits and punctuation, the shift key selects an entirely different "
"character with a different basic code.  In order to keep within the "
"@acronym{ASCII} character set whenever possible, Emacs avoids using the"
msgstr ""

#. type: table
#: original_texis/commands.texi:1457
msgid "bit for those character events."
msgstr ""

#. type: table
#: original_texis/commands.texi:1460
msgid ""
"However, @acronym{ASCII} provides no way to distinguish @kbd{C-A} from "
"@kbd{C-a}, so Emacs uses the"
msgstr ""

#. type: table
#: original_texis/commands.texi:1468
msgid "bit in @kbd{C-A} and not in @kbd{C-a}."
msgstr ""

#. type: item
#: original_texis/commands.texi:1469
#, no-wrap
msgid "hyper"
msgstr ""

#. type: tex
#: original_texis/commands.texi:1473
#, no-wrap
msgid "@math{2^{24}}\n"
msgstr ""

#. type: ifnottex
#: original_texis/commands.texi:1476
msgid "2**24"
msgstr ""

#. type: table
#: original_texis/commands.texi:1479
msgid ""
"bit in the character event code indicates a character typed with the hyper "
"key held down."
msgstr ""

#. type: item
#: original_texis/commands.texi:1480
#, no-wrap
msgid "super"
msgstr ""

#. type: tex
#: original_texis/commands.texi:1484
#, no-wrap
msgid "@math{2^{23}}\n"
msgstr ""

#. type: ifnottex
#: original_texis/commands.texi:1487
msgid "2**23"
msgstr ""

#. type: table
#: original_texis/commands.texi:1490
msgid ""
"bit in the character event code indicates a character typed with the super "
"key held down."
msgstr ""

#. type: item
#: original_texis/commands.texi:1491
#, no-wrap
msgid "alt"
msgstr ""

#. type: tex
#: original_texis/commands.texi:1495
#, no-wrap
msgid "@math{2^{22}}\n"
msgstr ""

#. type: ifnottex
#: original_texis/commands.texi:1498
msgid "2**22"
msgstr ""

#. type: table
#: original_texis/commands.texi:1502
msgid ""
"bit in the character event code indicates a character typed with the alt key "
"held down.  (The key labeled @key{Alt} on most keyboards is actually treated "
"as the meta key, not this.)"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1510
msgid ""
"It is best to avoid mentioning specific bit numbers in your program.  To "
"test the modifier bits of a character, use the function "
"@code{event-modifiers} (@pxref{Classifying Events}).  When making key "
"bindings with @code{keymap-set}, you specify these events using strings like "
"@samp{C-H-x} instead (for ``control hyper x'')  (@pxref{Changing Key "
"Bindings})."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1514
#, no-wrap
msgid "function keys"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1520
msgid ""
"Most keyboards also have @dfn{function keys}---keys that have names or "
"symbols that are not characters.  Function keys are represented in Emacs "
"Lisp as symbols; the symbol's name is the function key's label, in lower "
"case.  For example, pressing a key labeled @key{F1} generates an input event "
"represented by the symbol @code{f1}."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1523
msgid ""
"The event type of a function key event is the event symbol itself.  "
"@xref{Classifying Events}."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1526
msgid ""
"Here are a few special cases in the symbol-naming convention for function "
"keys:"
msgstr ""

#. type: item
#: original_texis/commands.texi:1528
#, no-wrap
msgid "@code{backspace}, @code{tab}, @code{newline}, @code{return}, @code{delete}"
msgstr ""

#. type: table
#: original_texis/commands.texi:1531
msgid ""
"These keys correspond to common @acronym{ASCII} control characters that have "
"special keys on most keyboards."
msgstr ""

#. type: table
#: original_texis/commands.texi:1536
msgid ""
"In @acronym{ASCII}, @kbd{C-i} and @key{TAB} are the same character.  If the "
"terminal can distinguish between them, Emacs conveys the distinction to Lisp "
"programs by representing the former as the integer 9, and the latter as the "
"symbol @code{tab}."
msgstr ""

#. type: table
#: original_texis/commands.texi:1543
msgid ""
"Most of the time, it's not useful to distinguish the two.  So normally "
"@code{local-function-key-map} (@pxref{Translation Keymaps}) is set up to map "
"@code{tab} into 9.  Thus, a key binding for character code 9 (the character "
"@kbd{C-i}) also applies to @code{tab}.  Likewise for the other symbols in "
"this group.  The function @code{read-char} likewise converts these events "
"into characters."
msgstr ""

#. type: table
#: original_texis/commands.texi:1547
msgid ""
"In @acronym{ASCII}, @key{BS} is really @kbd{C-h}.  But @code{backspace} "
"converts into the character code 127 (@key{DEL}), not into code 8 "
"(@key{BS}).  This is what most users prefer."
msgstr ""

#. type: item
#: original_texis/commands.texi:1548
#, no-wrap
msgid "@code{left}, @code{up}, @code{right}, @code{down}"
msgstr ""

#. type: table
#: original_texis/commands.texi:1550
msgid "Cursor arrow keys"
msgstr ""

#. type: item
#: original_texis/commands.texi:1550
#, no-wrap
msgid "@code{kp-add}, @code{kp-decimal}, @code{kp-divide}, @dots{}"
msgstr ""

#. type: table
#: original_texis/commands.texi:1552
msgid "Keypad keys (to the right of the regular keyboard)."
msgstr ""

#. type: item
#: original_texis/commands.texi:1552
#, no-wrap
msgid "@code{kp-0}, @code{kp-1}, @dots{}"
msgstr ""

#. type: table
#: original_texis/commands.texi:1554
msgid "Keypad keys with digits."
msgstr ""

#. type: item
#: original_texis/commands.texi:1554
#, no-wrap
msgid "@code{kp-f1}, @code{kp-f2}, @code{kp-f3}, @code{kp-f4}"
msgstr ""

#. type: table
#: original_texis/commands.texi:1556
msgid "Keypad PF keys."
msgstr ""

#. type: item
#: original_texis/commands.texi:1556
#, no-wrap
msgid ""
"@code{kp-home}, @code{kp-left}, @code{kp-up}, @code{kp-right}, "
"@code{kp-down}"
msgstr ""

#. type: table
#: original_texis/commands.texi:1559
msgid ""
"Keypad arrow keys.  Emacs normally translates these into the corresponding "
"non-keypad keys @code{home}, @code{left}, @dots{}"
msgstr ""

#. type: item
#: original_texis/commands.texi:1559
#, no-wrap
msgid ""
"@code{kp-prior}, @code{kp-next}, @code{kp-end}, @code{kp-begin}, "
"@code{kp-insert}, @code{kp-delete}"
msgstr ""

#. type: table
#: original_texis/commands.texi:1562
msgid ""
"Additional keypad duplicates of keys ordinarily found elsewhere.  Emacs "
"normally translates these into the like-named non-keypad keys."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1567
msgid ""
"You can use the modifier keys @key{ALT}, @key{CTRL}, @key{HYPER}, "
"@key{META}, @key{SHIFT}, and @key{SUPER} with function keys.  The way to "
"represent them is with prefixes in the symbol name:"
msgstr ""

#. type: item
#: original_texis/commands.texi:1569
#, no-wrap
msgid "A-"
msgstr ""

#. type: table
#: original_texis/commands.texi:1571
msgid "The alt modifier."
msgstr ""

#. type: item
#: original_texis/commands.texi:1571
#, no-wrap
msgid "C-"
msgstr ""

#. type: table
#: original_texis/commands.texi:1573
msgid "The control modifier."
msgstr ""

#. type: item
#: original_texis/commands.texi:1573
#, no-wrap
msgid "H-"
msgstr ""

#. type: table
#: original_texis/commands.texi:1575
msgid "The hyper modifier."
msgstr ""

#. type: item
#: original_texis/commands.texi:1575
#, no-wrap
msgid "M-"
msgstr ""

#. type: table
#: original_texis/commands.texi:1577
msgid "The meta modifier."
msgstr ""

#. type: item
#: original_texis/commands.texi:1577
#, no-wrap
msgid "S-"
msgstr ""

#. type: table
#: original_texis/commands.texi:1579
msgid "The shift modifier."
msgstr ""

#. type: item
#: original_texis/commands.texi:1579
#, no-wrap
msgid "s-"
msgstr ""

#. type: table
#: original_texis/commands.texi:1581
msgid "The super modifier."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1587
msgid ""
"Thus, the symbol for the key @key{F3} with @key{META} held down is "
"@code{M-f3}.  When you use more than one prefix, we recommend you write them "
"in alphabetical order; but the order does not matter in arguments to the "
"key-binding lookup and modification functions."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1598
msgid ""
"Emacs supports four kinds of mouse events: click events, drag events, "
"button-down events, and motion events.  All mouse events are represented as "
"lists.  The @sc{car} of the list is the event type; this says which mouse "
"button was involved, and which modifier keys were used with it.  The event "
"type can also distinguish double or triple button presses (@pxref{Repeat "
"Events}).  The rest of the list elements give position and time information."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1603
msgid ""
"For key lookup, only the event type matters: two events of the same type "
"necessarily run the same command.  The command can access the full values of "
"these events using the @samp{e} interactive code.  @xref{Interactive Codes}."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1609
msgid ""
"A key sequence that starts with a mouse event is read using the keymaps of "
"the buffer in the window that the mouse was in, not the current buffer.  "
"This does not imply that clicking in a window selects that window or its "
"buffer---that is entirely under the control of the command binding of the "
"key sequence."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1612
#, no-wrap
msgid "click event"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1613
#, no-wrap
msgid "mouse click event"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1614
#, no-wrap
msgid "mouse wheel event"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1621
msgid ""
"When the user presses a mouse button and releases it at the same location, "
"that generates a @dfn{click} event.  Depending on how your window-system "
"reports mouse-wheel events, turning the mouse wheel can generate either a "
"mouse click or a mouse-wheel event.  All mouse event share the same format:"
msgstr ""

#. type: example
#: original_texis/commands.texi:1624
#, no-wrap
msgid "(@var{event-type} @var{position} @var{click-count})\n"
msgstr ""

#. type: var{#1}
#: original_texis/commands.texi:1627
#, no-wrap
msgid "event-type"
msgstr ""

#. type: table
#: original_texis/commands.texi:1632
msgid ""
"This is a symbol that indicates which mouse button was used.  It is one of "
"the symbols @code{mouse-1}, @code{mouse-2}, @dots{}, where the buttons are "
"numbered left to right.  For mouse-wheel event, it can be @code{wheel-up} or "
"@code{wheel-down}."
msgstr ""

#. type: table
#: original_texis/commands.texi:1636
msgid ""
"You can also use prefixes @samp{A-}, @samp{C-}, @samp{H-}, @samp{M-}, "
"@samp{S-} and @samp{s-} for modifiers alt, control, hyper, meta, shift and "
"super, just as you would with function keys."
msgstr ""

#. type: table
#: original_texis/commands.texi:1641
msgid ""
"This symbol also serves as the event type of the event.  Key bindings "
"describe events by their types; thus, if there is a key binding for "
"@code{mouse-1}, that binding would apply to all events whose "
"@var{event-type} is @code{mouse-1}."
msgstr ""

#. type: var{#1}
#: original_texis/commands.texi:1642
#, no-wrap
msgid "position"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1643
#, no-wrap
msgid "mouse position list"
msgstr ""

#. type: table
#: original_texis/commands.texi:1646
msgid ""
"This is a @dfn{mouse position list} specifying where the mouse event "
"occurred; see below for details."
msgstr ""

#. type: var{#1}
#: original_texis/commands.texi:1647
#, no-wrap
msgid "click-count"
msgstr ""

#. type: table
#: original_texis/commands.texi:1651
msgid ""
"This is the number of rapid repeated presses so far of the same mouse button "
"or the number of repeated turns of the wheel.  @xref{Repeat Events}."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1656
msgid ""
"To access the contents of a mouse position list in the @var{position} slot "
"of a mouse event, you should typically use the functions documented in "
"@ref{Accessing Mouse}."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1660
msgid ""
"The explicit format of the list depends on where the event occurred.  For "
"clicks in the text area, mode line, header line, tab line, or in the fringe "
"or marginal areas, the mouse position list has the form"
msgstr ""

#. type: example
#: original_texis/commands.texi:1665
#, no-wrap
msgid ""
"(@var{window} @var{pos-or-area} (@var{x} . @var{y}) @var{timestamp}\n"
" @var{object} @var{text-pos} (@var{col} . @var{row})\n"
" @var{image} (@var{dx} . @var{dy}) (@var{width} . @var{height}))\n"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1669
msgid "The meanings of these list elements are as follows:"
msgstr ""

#. type: var{#1}
#: original_texis/commands.texi:1671 original_texis/commands.texi:1765
#, no-wrap
msgid "window"
msgstr ""

#. type: table
#: original_texis/commands.texi:1673
msgid "The window in which the mouse event occurred."
msgstr ""

#. type: var{#1}
#: original_texis/commands.texi:1674
#, no-wrap
msgid "pos-or-area"
msgstr ""

#. type: table
#: original_texis/commands.texi:1681
msgid ""
"The buffer position of the character clicked on in the text area; or, if the "
"event was outside the text area, the window area where it occurred.  It is "
"one of the symbols @code{mode-line}, @code{header-line}, @code{tab-line}, "
"@code{vertical-line}, @code{left-margin}, @code{right-margin}, "
"@code{left-fringe}, or @code{right-fringe}."
msgstr ""

#. type: table
#: original_texis/commands.texi:1686
msgid ""
"In one special case, @var{pos-or-area} is a list containing a symbol (one of "
"the symbols listed above) instead of just the symbol.  This happens after "
"the imaginary prefix keys for the event are registered by Emacs.  @xref{Key "
"Sequence Input}."
msgstr ""

#. type: item
#: original_texis/commands.texi:1687
#, no-wrap
msgid "@var{x}, @var{y}"
msgstr ""

#. type: table
#: original_texis/commands.texi:1697
msgid ""
"The relative pixel coordinates of the event.  For events in the text area of "
"a window, the coordinate origin @code{(0 . 0)} is taken to be the top left "
"corner of the text area.  @xref{Window Sizes}.  For events in a mode line, "
"header line or tab line, the coordinate origin is the top left corner of the "
"window itself.  For fringes, margins, and the vertical border, @var{x} does "
"not have meaningful data.  For fringes and margins, @var{y} is relative to "
"the bottom edge of the header line.  In all cases, the @var{x} and @var{y} "
"coordinates increase rightward and downward respectively."
msgstr ""

#. type: var{#1}
#: original_texis/commands.texi:1698 original_texis/commands.texi:1781
#, no-wrap
msgid "timestamp"
msgstr ""

#. type: table
#: original_texis/commands.texi:1701
msgid ""
"The time at which the event occurred, as an integer number of milliseconds "
"since a system-dependent initial time."
msgstr ""

#. type: var{#1}
#: original_texis/commands.texi:1702
#, no-wrap
msgid "object"
msgstr ""

#. type: table
#: original_texis/commands.texi:1706
msgid ""
"Either @code{nil}, which means the event occurred on buffer text, or a cons "
"cell of the form @w{(@var{string} . @var{string-pos})} if there is a string "
"from a text property or an overlay at the event position."
msgstr ""

#. type: var{#1}
#: original_texis/commands.texi:1708
#, no-wrap
msgid "string"
msgstr ""

#. type: table
#: original_texis/commands.texi:1710
msgid "The string which was clicked on, including any properties."
msgstr ""

#. type: var{#1}
#: original_texis/commands.texi:1711
#, no-wrap
msgid "string-pos"
msgstr ""

#. type: table
#: original_texis/commands.texi:1713
msgid "The position in the string where the click occurred."
msgstr ""

#. type: var{#1}
#: original_texis/commands.texi:1715
#, no-wrap
msgid "text-pos"
msgstr ""

#. type: table
#: original_texis/commands.texi:1721
msgid ""
"For clicks on a marginal area or on a fringe, this is the buffer position of "
"the first visible character in the corresponding line in the window.  For "
"clicks on the mode line, the header line or the tab line, this is "
"@code{nil}.  For other events, it is the buffer position closest to the "
"click."
msgstr ""

#. type: item
#: original_texis/commands.texi:1722
#, no-wrap
msgid "@var{col}, @var{row}"
msgstr ""

#. type: table
#: original_texis/commands.texi:1735
msgid ""
"These are the actual column and row coordinate numbers of the glyph under "
"the @var{x}, @var{y} position.  If @var{x} lies beyond the last column of "
"actual text on its line, @var{col} is reported by adding fictional extra "
"columns that have the default character width.  Row 0 is taken to be the "
"header line if the window has one, or Row 1 if the window also has the tab "
"line, or the topmost row of the text area otherwise.  Column 0 is taken to "
"be the leftmost column of the text area for clicks on a window text area, or "
"the leftmost mode line or header line column for clicks there.  For clicks "
"on fringes or vertical borders, these have no meaningful data.  For clicks "
"on margins, @var{col} is measured from the left edge of the margin area and "
"@var{row} is measured from the top of the margin area."
msgstr ""

#. type: var{#1}
#: original_texis/commands.texi:1736
#, no-wrap
msgid "image"
msgstr ""

#. type: table
#: original_texis/commands.texi:1740
msgid ""
"If there is an image at the click location, this is the image object as "
"returned by @code{find-image} (@pxref{Defining Images}); otherwise this is "
"@code{nil}."
msgstr ""

#. type: item
#: original_texis/commands.texi:1741
#, no-wrap
msgid "@var{dx}, @var{dy}"
msgstr ""

#. type: table
#: original_texis/commands.texi:1750
msgid ""
"These are the pixel offsets of the click relative to the top left corner of "
"the @var{object}'s glyph that is the nearest one to the click. The relevant "
"@var{object}s can be either a buffer, or a string, or an image, see above.  "
"If @var{object} is @code{nil} or a string, the coordinates are relative to "
"the top left corner of the character glyph clicked on.  Note that the "
"offsets are always zero on text-mode frames, when @var{object} is "
"@code{nil}, since each glyph there is considered to have exactly 1x1 pixel "
"dimensions."
msgstr ""

#. type: item
#: original_texis/commands.texi:1751
#, no-wrap
msgid "@var{width}, @var{height}"
msgstr ""

#. type: table
#: original_texis/commands.texi:1756
msgid ""
"If the click is on a character, either from buffer text or from overlay or "
"display string, these are the pixel width and height of that character's "
"glyph; otherwise they are dimensions of @var{object} clicked on."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1759
msgid "For clicks on a scroll bar, @var{position} has this form:"
msgstr ""

#. type: example
#: original_texis/commands.texi:1762
#, no-wrap
msgid ""
"(@var{window} @var{area} (@var{portion} . @var{whole}) @var{timestamp} "
"@var{part})\n"
msgstr ""

#. type: table
#: original_texis/commands.texi:1767
msgid "The window whose scroll bar was clicked on."
msgstr ""

#. type: var{#1}
#: original_texis/commands.texi:1768
#, no-wrap
msgid "area"
msgstr ""

#. type: table
#: original_texis/commands.texi:1770
msgid "This is the symbol @code{vertical-scroll-bar}."
msgstr ""

#. type: var{#1}
#: original_texis/commands.texi:1771
#, no-wrap
msgid "portion"
msgstr ""

#. type: table
#: original_texis/commands.texi:1775
msgid ""
"The number of pixels from the top of the scroll bar to the click position.  "
"On some toolkits, including GTK+, Emacs cannot extract this data, so the "
"value is always @code{0}."
msgstr ""

#. type: var{#1}
#: original_texis/commands.texi:1776
#, no-wrap
msgid "whole"
msgstr ""

#. type: table
#: original_texis/commands.texi:1780
msgid ""
"The total length, in pixels, of the scroll bar.  On some toolkits, including "
"GTK+, Emacs cannot extract this data, so the value is always @code{0}."
msgstr ""

#. type: table
#: original_texis/commands.texi:1785
msgid ""
"The time at which the event occurred, in milliseconds.  On some toolkits, "
"including GTK+, Emacs cannot extract this data, so the value is always "
"@code{0}."
msgstr ""

#. type: var{#1}
#: original_texis/commands.texi:1786 original_texis/commands.texi:1807
#, no-wrap
msgid "part"
msgstr ""

#. type: table
#: original_texis/commands.texi:1793
msgid ""
"The part of the scroll bar on which the click occurred.  It is one of the "
"symbols @code{handle} (the scroll bar handle), @code{above-handle} (the area "
"above the handle), @code{below-handle} (the area below the handle), "
"@code{up} (the up arrow at one end of the scroll bar), or @code{down} (the "
"down arrow at one end of the scroll bar)."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1798
msgid ""
"For clicks on the frame's internal border (@pxref{Frame Layout}), the "
"frame's tool bar (@pxref{Tool Bar}) or tab bar, @var{position} has this "
"form:"
msgstr ""

#. type: example
#: original_texis/commands.texi:1801
#, no-wrap
msgid " (@var{frame} @var{part} (@var{X} . @var{Y}) @var{timestamp})\n"
msgstr ""

#. type: var{#1}
#: original_texis/commands.texi:1804
#, no-wrap
msgid "frame"
msgstr ""

#. type: table
#: original_texis/commands.texi:1806
msgid "The frame whose internal border or tool bar or tab bar was clicked on."
msgstr ""

#. type: table
#: original_texis/commands.texi:1810
msgid ""
"The part of the frame which was clicked on.  This can be one of the "
"following:"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1812
#, no-wrap
msgid "tool-bar mouse events"
msgstr ""

#. type: item
#: original_texis/commands.texi:1813
#, no-wrap
msgid "tool-bar"
msgstr ""

#. type: table
#: original_texis/commands.texi:1815
msgid "The frame has a tool bar, and the event was in the tool-bar area."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1816
#, no-wrap
msgid "tab-bar mouse events"
msgstr ""

#. type: item
#: original_texis/commands.texi:1817
#, no-wrap
msgid "tab-bar"
msgstr ""

#. type: table
#: original_texis/commands.texi:1819
msgid "The frame has a tab bar, and the event was in the tab-bar area."
msgstr ""

#. type: item
#: original_texis/commands.texi:1820
#, no-wrap
msgid "left-edge"
msgstr ""

#. type: itemx
#: original_texis/commands.texi:1821
#, no-wrap
msgid "top-edge"
msgstr ""

#. type: itemx
#: original_texis/commands.texi:1822
#, no-wrap
msgid "right-edge"
msgstr ""

#. type: itemx
#: original_texis/commands.texi:1823
#, no-wrap
msgid "bottom-edge"
msgstr ""

#. type: table
#: original_texis/commands.texi:1826
msgid ""
"The click was on the corresponding border at an offset of at least one "
"canonical character from the border's nearest corner."
msgstr ""

#. type: item
#: original_texis/commands.texi:1827
#, no-wrap
msgid "top-left-corner"
msgstr ""

#. type: itemx
#: original_texis/commands.texi:1828
#, no-wrap
msgid "top-right-corner"
msgstr ""

#. type: itemx
#: original_texis/commands.texi:1829
#, no-wrap
msgid "bottom-right-corner"
msgstr ""

#. type: itemx
#: original_texis/commands.texi:1830
#, no-wrap
msgid "bottom-left-corner"
msgstr ""

#. type: table
#: original_texis/commands.texi:1832
msgid "The click was on the corresponding corner of the internal border."
msgstr ""

#. type: item
#: original_texis/commands.texi:1833 original_texis/commands.texi:2498
#, no-wrap
msgid "nil"
msgstr ""

#. type: table
#: original_texis/commands.texi:1839
msgid ""
"The frame does not have an internal border, and the event was not on the tab "
"bar or the tool bar.  This usually happens on text-mode frames.  This can "
"also happen on GUI frames with internal border if the frame doesn't have its "
"@code{drag-internal-border} parameter (@pxref{Mouse Dragging Parameters}) "
"set to a non-@code{nil} value."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1846
#, no-wrap
msgid "drag event"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1847
#, no-wrap
msgid "mouse drag event"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1855
msgid ""
"With Emacs, you can have a drag event without even changing your clothes.  A "
"@dfn{drag event} happens every time the user presses a mouse button and then "
"moves the mouse to a different character position before releasing the "
"button.  Like all mouse events, drag events are represented in Lisp as "
"lists.  The lists record both the starting mouse position and the final "
"position, like this:"
msgstr ""

#. type: example
#: original_texis/commands.texi:1858
#, no-wrap
msgid "(@var{event-type} @var{start-position} @var{end-position})\n"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1870
msgid ""
"For a drag event, the name of the symbol @var{event-type} contains the "
"prefix @samp{drag-}.  For example, dragging the mouse with button 2 held "
"down generates a @code{drag-mouse-2} event.  The second and third elements "
"of the event, @var{start-position} and @var{end-position} in the foregoing "
"illustration, are set to the start and end positions of the drag as mouse "
"position lists (@pxref{Click Events}).  You can access the second element of "
"any mouse event in the same way.  However, the drag event may end outside "
"the boundaries of the frame that was initially selected.  In that case, the "
"third element's position list contains that frame in place of a window."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1873
msgid ""
"The @samp{drag-} prefix follows the modifier key prefixes such as @samp{C-} "
"and @samp{M-}."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1879
msgid ""
"If @code{read-key-sequence} receives a drag event that has no key binding, "
"and the corresponding click event does have a binding, it changes the drag "
"event into a click event at the drag's starting position.  This means that "
"you don't have to distinguish between click and drag events unless you want "
"to."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1882
#, no-wrap
msgid "button-down event"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1887
msgid ""
"Click and drag events happen when the user releases a mouse button.  They "
"cannot happen earlier, because there is no way to distinguish a click from a "
"drag until the button is released."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1895
msgid ""
"If you want to take action as soon as a button is pressed, you need to "
"handle @dfn{button-down} events.@footnote{Button-down is the conservative "
"antithesis of drag.} These occur as soon as a button is pressed.  They are "
"represented by lists that look exactly like click events (@pxref{Click "
"Events}), except that the @var{event-type} symbol name contains the prefix "
"@samp{down-}.  The @samp{down-} prefix follows modifier key prefixes such as "
"@samp{C-} and @samp{M-}."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1903
msgid ""
"The function @code{read-key-sequence} ignores any button-down events that "
"don't have command bindings; therefore, the Emacs command loop ignores them "
"too.  This means that you need not worry about defining button-down events "
"unless you want them to do something.  The usual reason to define a "
"button-down event is so that you can track mouse motion (by reading motion "
"events) until the button is released.  @xref{Motion Events}."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1906
#, no-wrap
msgid "repeat events"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1907
#, no-wrap
msgid "double-click events"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1908
#, no-wrap
msgid "triple-click events"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:1909
#, no-wrap
msgid "mouse events, repeated"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1914
msgid ""
"If you press the same mouse button more than once in quick succession "
"without moving the mouse, Emacs generates special @dfn{repeat} mouse events "
"for the second and subsequent presses."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1919
msgid ""
"The most common repeat events are @dfn{double-click} events.  Emacs "
"generates a double-click event when you click a button twice; the event "
"happens when you release the button (as is normal for all click events)."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1927
msgid ""
"The event type of a double-click event contains the prefix @samp{double-}.  "
"Thus, a double click on the second mouse button with @key{meta} held down "
"comes to the Lisp program as @code{M-double-mouse-2}.  If a double-click "
"event has no binding, the binding of the corresponding ordinary click event "
"is used to execute it.  Thus, you need not pay attention to the double click "
"feature unless you really want to."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1933
msgid ""
"When the user performs a double click, Emacs generates first an ordinary "
"click event, and then a double-click event.  Therefore, you must design the "
"command binding of the double click event to assume that the single-click "
"command has already run.  It must produce the desired results of a double "
"click, starting from the results of a single click."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1937
msgid ""
"This is convenient, if the meaning of a double click somehow builds on the "
"meaning of a single click---which is recommended user interface design "
"practice for double clicks."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1944
msgid ""
"If you click a button, then press it down again and start moving the mouse "
"with the button held down, then you get a @dfn{double-drag} event when you "
"ultimately release the button.  Its event type contains @samp{double-drag} "
"instead of just @samp{drag}.  If a double-drag event has no binding, Emacs "
"looks for an alternate binding as if the event were an ordinary drag."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1952
msgid ""
"Before the double-click or double-drag event, Emacs generates a "
"@dfn{double-down} event when the user presses the button down for the second "
"time.  Its event type contains @samp{double-down} instead of just "
"@samp{down}.  If a double-down event has no binding, Emacs looks for an "
"alternate binding as if the event were an ordinary button-down event.  If it "
"finds no binding that way either, the double-down event is ignored."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1957
msgid ""
"To summarize, when you click a button and then press it again right away, "
"Emacs generates a down event and a click event for the first click, a "
"double-down event when you press the button again, and finally either a "
"double-click or a double-drag event."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1964
msgid ""
"If you click a button twice and then press it again, all in quick "
"succession, Emacs generates a @dfn{triple-down} event, followed by either a "
"@dfn{triple-click} or a @dfn{triple-drag}.  The event types of these events "
"contain @samp{triple} instead of @samp{double}.  If any triple event has no "
"binding, Emacs uses the binding that it would use for the corresponding "
"double event."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:1970
msgid ""
"If you click a button three or more times and then press it again, the "
"events for the presses beyond the third are all triple events.  Emacs does "
"not have separate event types for quadruple, quintuple, etc.@: events.  "
"However, you can look at the event list to find out precisely how many times "
"the button was pressed."
msgstr ""

#. type: defun
#: original_texis/commands.texi:1971
#, no-wrap
msgid "event-click-count event"
msgstr ""

#. type: defun
#: original_texis/commands.texi:1977
msgid ""
"This function returns the number of consecutive button presses that led up "
"to @var{event}.  If @var{event} is a double-down, double-click or "
"double-drag event, the value is 2.  If @var{event} is a triple event, the "
"value is 3 or greater.  If @var{event} is an ordinary mouse event (not a "
"repeat event), the value is 1."
msgstr ""

#. type: defopt
#: original_texis/commands.texi:1979
#, no-wrap
msgid "double-click-fuzz"
msgstr ""

#. type: defopt
#: original_texis/commands.texi:1985
msgid ""
"To generate repeat events, successive mouse button presses must be at "
"approximately the same screen position.  The value of "
"@code{double-click-fuzz} specifies the maximum number of pixels the mouse "
"may be moved (horizontally or vertically) between two successive clicks to "
"make a double-click."
msgstr ""

#. type: defopt
#: original_texis/commands.texi:1988
msgid ""
"This variable is also the threshold for motion of the mouse to count as a "
"drag."
msgstr ""

#. type: defopt
#: original_texis/commands.texi:1990
#, no-wrap
msgid "double-click-time"
msgstr ""

#. type: defopt
#: original_texis/commands.texi:1997
msgid ""
"To generate repeat events, the number of milliseconds between successive "
"button presses must be less than the value of @code{double-click-time}.  "
"Setting @code{double-click-time} to @code{nil} disables multi-click "
"detection entirely.  Setting it to @code{t} removes the time limit; Emacs "
"then detects multi-clicks by position only."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2001
#, no-wrap
msgid "motion event"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2002
#, no-wrap
msgid "mouse motion events"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2007
msgid ""
"Emacs sometimes generates @dfn{mouse motion} events to describe motion of "
"the mouse without any button activity.  Mouse motion events are represented "
"by lists that look like this:"
msgstr ""

#. type: example
#: original_texis/commands.texi:2010
#, no-wrap
msgid "(mouse-movement POSITION)\n"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2018
msgid ""
"@var{position} is a mouse position list (@pxref{Click Events}), specifying "
"the current position of the mouse cursor.  As with the end-position of a "
"drag event, this position list may represent a location outside the "
"boundaries of the initially selected frame, in which case the list contains "
"that frame in place of a window."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2023
msgid ""
"The @code{track-mouse} macro enables generation of motion events within its "
"body.  Outside of @code{track-mouse} body, Emacs does not generate events "
"for mere motion of the mouse, and these events do not appear.  @xref{Mouse "
"Tracking}."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:2024
#, no-wrap
msgid "mouse-fine-grained-tracking"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:2028
msgid ""
"When non-@code{nil}, mouse motion events are generated even for very small "
"movements.  Otherwise, motion events are not generated as long as the mouse "
"cursor remains pointing to the same glyph in the text."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2032
#, no-wrap
msgid "touchscreen events"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2033
#, no-wrap
msgid "support for touchscreens"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2039
msgid ""
"Some window systems provide support for input devices that react to the "
"user's touching the screen and moving fingers while touching the screen.  "
"These input devices are known as touchscreens, and Emacs reports the events "
"they generate as @dfn{touchscreen events}."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2046
msgid ""
"Most individual events generated by a touchscreen only have meaning as part "
"of a larger sequence of other events: for instance, the simple operation of "
"tapping the touchscreen involves the user placing and raising a finger on "
"the touchscreen, and swiping the display to scroll it involves placing a "
"finger, moving it many times upwards or downwards, and then raising the "
"finger."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2047
#, no-wrap
msgid "touch point, in touchscreen events"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2057
msgid ""
"While a simplistic model consisting of one finger is adequate for taps and "
"scrolling, more complicated gestures require support for keeping track of "
"multiple fingers, where the position of each finger is represented by a "
"@dfn{touch point}.  For example, a ``pinch to zoom'' gesture might consist "
"of the user placing two fingers and moving them individually in opposite "
"directions, where the distance between the positions of their individual "
"points determine the amount by which to zoom the display, and the center of "
"an imaginary line between those positions determines where to pan the "
"display after zooming."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2063
msgid ""
"The low-level touchscreen events described below can be used to implement "
"all the touch sequences described above.  In those events, each point is "
"represented by a cons of an arbitrary number identifying the point and a "
"mouse position list (@pxref{Click Events}) specifying the position of the "
"finger when the event occurred."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2065
#, no-wrap
msgid "@code{touchscreen-begin} event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2066
#, no-wrap
msgid "(touchscreen-begin @var{point})"
msgstr ""

#. type: table
#: original_texis/commands.texi:2069
msgid ""
"This event is sent when @var{point} is created by the user pressing a finger "
"against the touchscreen."
msgstr ""

#. type: table
#: original_texis/commands.texi:2073
msgid ""
"Imaginary prefix keys are also affixed to these events "
"@code{read-key-sequence} when they originate on top of a special part of a "
"frame or window.  @xref{Key Sequence Input}."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2074
#, no-wrap
msgid "@code{touchscreen-update} event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2075
#, no-wrap
msgid "(touchscreen-update @var{points})"
msgstr ""

#. type: table
#: original_texis/commands.texi:2079
msgid ""
"This event is sent when a point on the touchscreen has changed position.  "
"@var{points} is a list of touch points containing the up-to-date positions "
"of each touch point currently on the touchscreen."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2080
#, no-wrap
msgid "@code{touchscreen-end} event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2081
#, no-wrap
msgid "(touchscreen-end @var{point} @var{canceled})"
msgstr ""

#. type: table
#: original_texis/commands.texi:2085
msgid ""
"This event is sent when @var{point} is no longer present on the display, "
"because another program took the grab, or because the user raised the finger "
"from the touchscreen."
msgstr ""

#. type: table
#: original_texis/commands.texi:2090
msgid ""
"@var{canceled} is non-@code{nil} if the touch sequence has been intercepted "
"by another program (such as the window manager), and Emacs should undo or "
"avoid any editing commands that would otherwise result from the touch "
"sequence."
msgstr ""

#. type: table
#: original_texis/commands.texi:2094
msgid ""
"Imaginary prefix keys are also affixed to these events "
"@code{read-key-sequence} when they originate on top of a special part of a "
"frame or window."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2101
msgid ""
"If a touchpoint is pressed against the menu bar, then Emacs will not "
"generate any corresponding @code{touchscreen-begin} or "
"@code{touchscreen-end} events; instead, the menu bar may be displayed after "
"@code{touchscreen-end} would have been delivered under other circumstances."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2102
#, no-wrap
msgid "mouse emulation from touch screen events"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2112
msgid ""
"When no command is bound to @code{touchscreen-begin}, @code{touchscreen-end} "
"or @code{touchscreen-update}, Emacs calls a ``key translation function'' "
"(@pxref{Translation Keymaps}) to translate key sequences containing touch "
"screen events into ordinary mouse events (@pxref{Mouse Events}.)  Since "
"Emacs doesn't support distinguishing events originating from separate mouse "
"devices, it assumes that a maximum of two touchpoints are active while "
"translation takes place, and does not place any guarantees on the results of "
"event translation when that restriction is overstepped."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2126
msgid ""
"Emacs applies two different strategies for translating touch events into "
"mouse events, contingent on factors such as the commands bound to keymaps "
"that are active at the location of the @code{touchscreen-begin} event.  If a "
"command is bound to @code{down-mouse-1} at that location, the initial "
"translation consists of a single @code{down-mouse-1} event, with subsequent "
"@code{touchscreen-update} events translated to mouse motion events "
"(@pxref{Motion Events}), and a final @code{touchscreen-end} event translated "
"to a @code{mouse-1} or @code{drag-mouse-1} event (unless the "
"@code{touchscreen-end} event indicates that the touch sequence has been "
"intercepted by another program.)  This is dubbed ``simple translation'', and "
"produces a simple correspondence between touchpoint motion and mouse motion."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2127
#, no-wrap
msgid "@code{ignored-mouse-command}, a symbol property"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2148
msgid ""
"However, some commands bound to "
"@code{down-mouse-1}--@code{mouse-drag-region}, for example--either conflict "
"with defined touch screen gestures (such as ``long-press to drag''), or with "
"user expectations for touch input, and shouldn't subject the touch sequence "
"to simple translation.  If a command whose name contains the property "
"(@pxref{Symbol Properties})  @code{ignored-mouse-command} is encountered or "
"there is no command bound to @code{down-mouse-1}, a more irregular form of "
"translation takes place: here, Emacs processes touch screen gestures "
"(@pxref{Touchscreens,,, emacs, The GNU Emacs Manual}) first, and finally "
"attempts to translate touch screen events into mouse events if no gesture "
"was detected prior to a closing @code{touchscreen-end} event (with its "
"@var{canceled} parameter @code{nil}, as with simple translation) and a "
"command is bound to @code{mouse-1} at the location of that event.  Before "
"generating the @code{mouse-1} event, point is also set to the location of "
"the @code{touchscreen-end} event, and the window containing the position of "
"that event is selected, as a compromise for packages which assume "
"@code{mouse-drag-region} has already set point to the location of any mouse "
"click and selected the window where it took place."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2156
msgid ""
"To prevent unwanted @code{mouse-1} events arriving after a mouse menu is "
"dismissed (@pxref{Mouse Menus}), Emacs also avoids simple translation if "
"@code{down-mouse-1} is bound to a keymap, making it a prefix key.  In lieu "
"of simple translation, it translates the closing @code{touchscreen-end} to a "
"@code{down-mouse-1} event with the starting position of the touch sequence, "
"consequently displaying the mouse menu."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2157
#, no-wrap
msgid "@code{mouse-1-menu-command}, a symbol property"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2162
msgid ""
"Since certain commands are also bound to @code{down-mouse-1} for the purpose "
"of displaying pop-up menus, Emacs additionally behaves as illustrated in the "
"last paragraph if @code{down-mouse-1} is bound to a command whose name has "
"the property @code{mouse-1-menu-command}."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2163
#, no-wrap
msgid "pinch-to-zoom touchscreen gesture translation"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2171
msgid ""
"When a second touch point is registered as a touch point is already being "
"translated, gesture translation is terminated, and the distance from the "
"second touch point (the @dfn{ancillary tool}) to the first is measured.  "
"Subsequent motion from either of those touch points will yield "
"@code{touchscreen-pinch} events incorporating the ratio formed by the "
"distance between their new positions and the distance measured at the "
"outset, as illustrated in the following table."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2172
#, no-wrap
msgid "touchscreen gesture events"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2175
msgid ""
"If touch gestures are detected during translation, one of the following "
"input events may be generated:"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2177
#, no-wrap
msgid "@code{touchscreen-scroll} event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2178
#, no-wrap
msgid "(touchscreen-scroll @var{window} @var{dx} @var{dy})"
msgstr ""

#. type: table
#: original_texis/commands.texi:2185
msgid ""
"If a ``scrolling'' gesture is detected during the translation process, each "
"subsequent @code{touchscreen-update} event is translated to a "
"@code{touchscreen-scroll} event, where @var{dx} and @var{dy} specify, in "
"pixels, the relative motion of the touchpoint from the position of the "
"@code{touchscreen-begin} event that started the sequence or the last "
"@code{touchscreen-scroll} event, whichever came later."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2186
#, no-wrap
msgid "@code{touchscreen-hold} event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2187
#, no-wrap
msgid "(touchscreen-hold @var{posn})"
msgstr ""

#. type: table
#: original_texis/commands.texi:2194
msgid ""
"If the single active touchpoint remains stationary for more than "
"@code{touch-screen-delay} seconds after a @code{touchscreen-begin} is "
"generated, a ``long-press'' gesture is detected during the translation "
"process, and a @code{touchscreen-hold} event is sent, with @var{posn} set to "
"a mouse position list containing the position of the "
"@code{touchscreen-begin} event."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2195
#, no-wrap
msgid "@code{touchscreen-drag} event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2196
#, no-wrap
msgid "(touchscreen-drag @var{posn})"
msgstr ""

#. type: table
#: original_texis/commands.texi:2203
msgid ""
"If a ``long-press'' gesture is detected while translating the current touch "
"sequence or ``drag-to-select'' is being resumed as a result of the "
"@code{touch-screen-extend-selection} user option, a @code{touchscreen-drag} "
"event is sent upon each subsequent @code{touchscreen-update} event with "
"@var{posn} set to the new position of the touchpoint."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2204
#, no-wrap
msgid "@code{touchscreen-restart-drag} event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2205
#, no-wrap
msgid "(touchscreen-restart-drag @var{posn})"
msgstr ""

#. type: table
#: original_texis/commands.texi:2210
msgid ""
"This event is sent upon the start of a touch sequence resulting in the "
"continuation of a ``drag-to-select'' gesture (subject to the aforementioned "
"user option) with @var{posn} set to the position list of the initial "
"@code{touchscreen-begin} event within that touch sequence."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2211
#, no-wrap
msgid "@code{touchscreen-pinch} event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2212
#, no-wrap
msgid ""
"(touchscreen-pinch @var{posn} @var{ratio} @var{pan-x} @var{pan-y} "
"@var{ratio-diff})"
msgstr ""

#. type: table
#: original_texis/commands.texi:2215
msgid ""
"This event is delivered upon significant changes to the positions of either "
"active touch point when an ancillary tool is active."
msgstr ""

#. type: table
#: original_texis/commands.texi:2218
msgid ""
"@var{posn} is a mouse position list for the midpoint of a line drawn from "
"the ancillary tool to the other touch point being observed."
msgstr ""

#. type: table
#: original_texis/commands.texi:2222
msgid ""
"@var{ratio} is the distance between both touch points being observed divided "
"by that distance when the ancillary point was first registered; which is to "
"say, the scale of the ``pinch'' gesture."
msgstr ""

#. type: table
#: original_texis/commands.texi:2228
msgid ""
"@var{pan-x} and @var{pan-y} are the difference between the pixel position of "
"@var{posn} and this position within the last event delivered appertaining to "
"this series of touch events, or in the case that no such event exists, the "
"centerpoint between both touch points when the ancillary tool was first "
"registered."
msgstr ""

#. type: table
#: original_texis/commands.texi:2232
msgid ""
"@var{ratio-diff} is the difference between this event's ratio and "
"@var{ratio} in the last event delivered; it is @var{ratio} if no such event "
"exists."
msgstr ""

#. type: table
#: original_texis/commands.texi:2238
msgid ""
"Such events are sent when the magnitude of the changes they represent will "
"yield a @var{ratio} which differs by more than @code{0.2} from that in the "
"previous event, or the sum of @var{pan-x} and @var{pan-y} will surpass half "
"the frame's character width in pixels (@pxref{Frame Font})."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2240
#, no-wrap
msgid "handling touch screen events"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2241
#, no-wrap
msgid "tap and drag, touch screen gestures"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2247
msgid ""
"Several functions are provided for Lisp programs that handle touch screen "
"events.  The intended use of the first two functions described below is from "
"commands bound directly to @code{touchscreen-begin} events; they allow "
"responding to commonly used touch screen gestures separately from mouse "
"event translation."
msgstr ""

#. type: defun
#: original_texis/commands.texi:2248
#, no-wrap
msgid "touch-screen-track-tap event &optional update data threshold"
msgstr ""

#. type: defun
#: original_texis/commands.texi:2254
msgid ""
"This function is used to track a single ``tap'' gesture originating from the "
"@code{touchscreen-begin} event @var{event}, often used to set the point or "
"to activate a button.  It waits for a @code{touchscreen-end} event with the "
"same touch identifier to arrive, at which point it returns @code{t}, "
"signifying the end of the gesture."
msgstr ""

#. type: defun
#: original_texis/commands.texi:2260
msgid ""
"If a @code{touchscreen-update} event arrives in the mean time and contains "
"at least one touchpoint with the same identifier as in @var{event}, the "
"function @var{update} is called with two arguments, the list of touchpoints "
"in that @code{touchscreen-update} event, and @var{data}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:2268
msgid ""
"If @var{threshold} is non-@code{nil} and such an event indicates that the "
"touchpoint represented by @var{event} has moved beyond a threshold of either "
"@var{threshold} or 10 pixels if it is not a number from the position of "
"@var{event}, @code{nil} is returned and mouse event translation is resumed "
"for that touchpoint, so as not to impede the recognition of any subsequent "
"touchscreen gesture arising from its sequence."
msgstr ""

#. type: defun
#: original_texis/commands.texi:2271
msgid ""
"If any other event arrives in the mean time, @code{nil} is returned.  The "
"caller should not perform any action in that case."
msgstr ""

#. type: defun
#: original_texis/commands.texi:2273
#, no-wrap
msgid "touch-screen-track-drag event update &optional data"
msgstr ""

#. type: defun
#: original_texis/commands.texi:2276
msgid ""
"This function is used to track a single ``drag'' gesture originating from "
"the @code{touchscreen-begin} event @code{event}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:2282
msgid ""
"It behaves like @code{touch-screen-track-tap}, except that it returns "
"@code{no-drag} and refrains from calling @var{update} if the touchpoint in "
"@code{event} did not move far enough (by default, 5 pixels from its position "
"in @code{event}) to qualify as an actual drag."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2288
msgid ""
"In addition to those two functions, a function is provided for commands "
"bound to some types of events generated through mouse event translation to "
"prevent unwanted events from being generated after it is called."
msgstr ""

#. type: defun
#: original_texis/commands.texi:2289
#, no-wrap
msgid "touch-screen-inhibit-drag"
msgstr ""

#. type: defun
#: original_texis/commands.texi:2295
msgid ""
"This function inhibits the generation of @code{touchscreen-drag} events "
"during mouse event translation for the duration of the touch sequence being "
"translated after it is called.  It must be called from a command which is "
"bound to a @code{touchscreen-hold} or @code{touchscreen-drag} event, and "
"signals an error otherwise."
msgstr ""

#. type: defun
#: original_texis/commands.texi:2300
msgid ""
"Since this function can only be called after a gesture is already recognized "
"during mouse event translation, no mouse events will be generated from touch "
"events constituting the previously mentioned touch sequence after it is "
"called."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2304
#, no-wrap
msgid "focus event"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2310
msgid ""
"This section talks about both window systems and Emacs frames.  When talking "
"about just ``frames'' or ``windows'', it refers to Emacs frames and Emacs "
"windows.  When talking about window system windows, which are also Emacs "
"frames, this section always says ``window system window''."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2319
msgid ""
"Window systems provide general ways for the user to control which window "
"system window, or Emacs frame, gets keyboard input.  This choice of window "
"system window is called the @dfn{focus}.  When the user does something to "
"switch between Emacs frames, that generates a @dfn{focus event}.  Emacs also "
"generates focus events when using @var{mouse-autoselect-window} to switch "
"between Emacs windows within Emacs frames."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2326
msgid ""
"A focus event in the middle of a key sequence would garble the sequence.  So "
"Emacs never generates a focus event in the middle of a key sequence.  If the "
"user changes focus in the middle of a key sequence---that is, after a prefix "
"key---then Emacs reorders the events so that the focus event comes either "
"before or after the multi-event key sequence, and not within it."
msgstr ""

#. type: subsubheading
#: original_texis/commands.texi:2327
#, no-wrap
msgid "Focus events for frames"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2334
msgid ""
"The normal definition of a focus event that switches frames, in the global "
"keymap, is to select that new frame within Emacs, as the user would expect.  "
"@xref{Input Focus}, which also describes hooks related to focus events for "
"frames.  Focus events for frames are represented in Lisp as lists that look "
"like this:"
msgstr ""

#. type: example
#: original_texis/commands.texi:2337
#, no-wrap
msgid "(switch-frame @var{new-frame})\n"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2341
msgid "where @var{new-frame} is the frame switched to."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2349
msgid ""
"Some X window managers are set up so that just moving the mouse into a frame "
"is enough to set the focus there.  Usually, there is no need for a Lisp "
"program to know about the focus change until some other kind of input "
"arrives.  Emacs generates a focus event only when the user actually types a "
"keyboard key or presses a mouse button in the new frame; just moving the "
"mouse between frames does not generate a focus event."
msgstr ""

#. type: subsubheading
#: original_texis/commands.texi:2350
#, no-wrap
msgid "Focus events for windows"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2358
msgid ""
"When @var{mouse-autoselect-window} is set, moving the mouse over a new "
"window within a frame can also switch the selected window.  @xref{Mouse "
"Window Auto-selection}, which describes the behavior for different values.  "
"When the mouse is moved over a new window, a focus event for switching "
"windows is generated.  Focus events for windows are represented in Lisp as "
"lists that look like this:"
msgstr ""

#. type: example
#: original_texis/commands.texi:2361
#, no-wrap
msgid "(select-window @var{new-window})\n"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2365
msgid "where @var{new-window} is the window switched to."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:2367
#, no-wrap
msgid "Xwidget events"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2372
msgid ""
"Xwidgets (@pxref{Xwidgets}) can send events to update Lisp programs on their "
"status.  These events are dubbed @code{xwidget-events}, and contain various "
"data describing the nature of the change."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2374
#, no-wrap
msgid "@code{xwidget-event} event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2375
#, no-wrap
msgid "(xwidget-event @var{kind} @var{xwidget} @var{arg})"
msgstr ""

#. type: table
#: original_texis/commands.texi:2379
msgid ""
"This event is sent whenever some kind of update occurs in @var{xwidget}.  "
"There are several types of updates, identified by their @var{kind}."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2380
#, no-wrap
msgid "xwidget callbacks"
msgstr ""

#. type: table
#: original_texis/commands.texi:2384
msgid ""
"It is a special event (@pxref{Special Events}), which should be handled by "
"adding a callback to an xwidget that is called whenever an xwidget event for "
"@var{xwidget} is received."
msgstr ""

#. type: table
#: original_texis/commands.texi:2388
msgid ""
"You can add a callback by setting the @code{callback} of an xwidget's "
"property list, which should be a function that accepts @var{xwidget} and "
"@var{kind} as arguments."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2390
#, no-wrap
msgid "@code{load-changed} xwidget event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2391
#, no-wrap
msgid "load-changed"
msgstr ""

#. type: table
#: original_texis/commands.texi:2396
msgid ""
"This xwidget event indicates that the @var{xwidget} has reached a particular "
"point of the page-loading process.  When these events are sent, @var{arg} "
"will contain a string that further describes the status of the widget:"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2398
#, no-wrap
msgid "@samp{load-started} in xwidgets"
msgstr ""

#. type: item
#: original_texis/commands.texi:2399
#, no-wrap
msgid "load-started"
msgstr ""

#. type: table
#: original_texis/commands.texi:2401
msgid "This means the widget has begun a page-loading operation."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2402
#, no-wrap
msgid "@samp{load-finished} in xwidgets"
msgstr ""

#. type: item
#: original_texis/commands.texi:2403
#, no-wrap
msgid "load-finished"
msgstr ""

#. type: table
#: original_texis/commands.texi:2406
msgid ""
"This means the @var{xwidget} has finished processing whatever page-loading "
"operation that it was previously performing."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2407
#, no-wrap
msgid "@samp{load-redirected} in xwidgets"
msgstr ""

#. type: item
#: original_texis/commands.texi:2408
#, no-wrap
msgid "load-redirected"
msgstr ""

#. type: table
#: original_texis/commands.texi:2411
msgid ""
"This means the @var{xwidget} has encountered and followed a redirect during "
"the page-loading operation."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2412
#, no-wrap
msgid "@samp{load-committed} in xwidgets"
msgstr ""

#. type: item
#: original_texis/commands.texi:2413
#, no-wrap
msgid "load-committed"
msgstr ""

#. type: table
#: original_texis/commands.texi:2417
msgid ""
"This means the @var{xwidget} has committed to a given URL during the "
"page-loading operation, i.e.@: the URL is the final URL that will be "
"rendered by @var{xwidget} during the current page-loading operation."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2419
#, no-wrap
msgid "@code{download-callback} xwidget events"
msgstr ""

#. type: item
#: original_texis/commands.texi:2420
#, no-wrap
msgid "download-callback"
msgstr ""

#. type: table
#: original_texis/commands.texi:2422
msgid "This event indicates that a download of some kind has been completed."
msgstr ""

#. type: table
#: original_texis/commands.texi:2429
msgid ""
"In the above events, there can be arguments after @var{arg}, which itself "
"indicates the URL from which the download file was retrieved: the first "
"argument after @var{arg} indicates the MIME type of the download, as a "
"string, while the second argument contains the full file name of the "
"downloaded file."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2431
#, no-wrap
msgid "@code{download-started} xwidget events"
msgstr ""

#. type: item
#: original_texis/commands.texi:2432
#, no-wrap
msgid "download-started"
msgstr ""

#. type: table
#: original_texis/commands.texi:2436
msgid ""
"This event indicates that a download has been started.  In these events, "
"@var{arg} contains the URL of the file that is currently being downloaded."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2437
#, no-wrap
msgid "@code{javascript-callback} xwidget events"
msgstr ""

#. type: item
#: original_texis/commands.texi:2438
#, no-wrap
msgid "javascript-callback"
msgstr ""

#. type: table
#: original_texis/commands.texi:2441
msgid ""
"This event contains JavaScript callback data.  These events are used "
"internally by @code{xwidget-webkit-execute-script}."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2443
#, no-wrap
msgid "@code{xwidget-display-event} event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2444
#, no-wrap
msgid "(xwidget-display-event @var{xwidget} @var{source})"
msgstr ""

#. type: table
#: original_texis/commands.texi:2448
msgid ""
"This event is sent whenever an xwidget requests that another xwidget be "
"displayed.  @var{xwidget} is the xwidget that should be displayed, and "
"@var{source} is the xwidget that asked to display @var{xwidget}."
msgstr ""

#. type: table
#: original_texis/commands.texi:2453
msgid ""
"It is also a special event which should be handled through callbacks.  You "
"can add such a callback by setting the @code{display-callback} of "
"@var{source}'s property list, which should be a function that accepts "
"@var{xwidget} and @var{source} as arguments."
msgstr ""

#. type: table
#: original_texis/commands.texi:2458
msgid ""
"@var{xwidget}'s buffer will be set to a temporary buffer.  When displaying "
"the widget, care should be taken to replace the buffer with the buffer in "
"which the xwidget will be displayed, using @code{set-xwidget-buffer} "
"(@pxref{Xwidgets})."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:2461
#, no-wrap
msgid "Miscellaneous System Events"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2464
msgid "A few other event types represent occurrences within the system."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2466
#, no-wrap
msgid "@code{text-conversion} event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2467
#, no-wrap
msgid "text-conversion"
msgstr ""

#. type: table
#: original_texis/commands.texi:2470
msgid ""
"This kind of event is sent @strong{after} a system-wide input method "
"performs an edit to one or more buffers."
msgstr ""

#. type: vindex
#: original_texis/commands.texi:2471
#, no-wrap
msgid "text-conversion-edits"
msgstr ""

#. type: table
#: original_texis/commands.texi:2477
msgid ""
"Once the event is sent, the input method may already have made changes to "
"multiple buffers inside many different frames.  To determine which buffers "
"have been changed, and what edits have been made to them, use the variable "
"@code{text-conversion-edits}, which is set prior to each "
"@code{text-conversion} event being sent; it is a list of the form:"
msgstr ""

#. type: example
#: original_texis/commands.texi:2480
#, no-wrap
msgid "@w{@code{((@var{buffer} @var{beg} @var{end} @var{ephemeral}) ...)}}\n"
msgstr ""

#. type: table
#: original_texis/commands.texi:2488
msgid ""
"Where @var{ephemeral} is the buffer which was modified, @var{beg} and "
"@var{end} are markers set to the positions of the edit at the time it was "
"completed, and @var{ephemeral} is either a string, containing any text which "
"was inserted (or any text before point which was deleted), @code{t}, meaning "
"that the edit is a temporary edit made by the input method, or @code{nil}, "
"meaning that some text was deleted after point."
msgstr ""

#. type: vindex
#: original_texis/commands.texi:2489
#, no-wrap
msgid "text-conversion-style"
msgstr ""

#. type: table
#: original_texis/commands.texi:2494
msgid ""
"Whether or not this event is sent depends on the value of the buffer-local "
"variable @code{text-conversion-style}, which determines how an input method "
"that wishes to make edits to buffer contents will behave."
msgstr ""

#. type: table
#: original_texis/commands.texi:2496
msgid "This variable can have one of four values:"
msgstr ""

#. type: table
#: original_texis/commands.texi:2501
msgid ""
"This means that the input method will be disabled entirely, and key events "
"will be sent instead of text conversion events."
msgstr ""

#. type: item
#: original_texis/commands.texi:2502
#, no-wrap
msgid "action"
msgstr ""

#. type: table
#: original_texis/commands.texi:2505
msgid ""
"This means that the input method will be enabled, but @key{RET} will be sent "
"whenever the input method wants to insert a new line."
msgstr ""

#. type: item
#: original_texis/commands.texi:2506
#, no-wrap
msgid "password"
msgstr ""

#. type: table
#: original_texis/commands.texi:2512
msgid ""
"This is largely identical to @code{action}, but also requests an input "
"method capable of inserting ASCII characters, and instructs it not to save "
"input in locations from which it might be subsequently retrieved by features "
"of the input method that cannot handle sensitive information, such as text "
"suggestions."
msgstr ""

#. type: item
#: original_texis/commands.texi:2513
#, no-wrap
msgid "t"
msgstr ""

#. type: table
#: original_texis/commands.texi:2516
msgid ""
"This, or any other value, means that the input method will be enabled and "
"make edits followed by @code{text-conversion} events."
msgstr ""

#. type: findex
#: original_texis/commands.texi:2518
#, no-wrap
msgid "set-text-conversion-style"
msgstr ""

#. type: table
#: original_texis/commands.texi:2525
msgid ""
"Changes to the value of this variable will only take effect upon the next "
"redisplay after the buffer becomes the selected buffer of a frame.  If you "
"need to disable text conversion in a way that takes immediate effect, call "
"the function @code{set-text-conversion-style} instead.  This has the "
"potential to lock up the input method for a significant amount of time, and "
"should be used with care."
msgstr ""

#. type: vindex
#: original_texis/commands.texi:2526
#, no-wrap
msgid "disable-inhibit-text-conversion"
msgstr ""

#. type: table
#: original_texis/commands.texi:2531
msgid ""
"In addition, text conversion is automatically disabled after a prefix key is "
"read by the command loop or @code{read-key-sequence}.  This can be disabled "
"by setting or binding the variable @code{disable-inhibit-text-conversion} to "
"a non-@code{nil} value."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2532
#, no-wrap
msgid "@code{delete-frame} event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2533
#, no-wrap
msgid "(delete-frame (@var{frame}))"
msgstr ""

#. type: table
#: original_texis/commands.texi:2536
msgid ""
"This kind of event indicates that the user gave the window manager a command "
"to delete a particular window, which happens to be an Emacs frame."
msgstr ""

#. type: table
#: original_texis/commands.texi:2538
msgid ""
"The standard definition of the @code{delete-frame} event is to delete "
"@var{frame}."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2539
#, no-wrap
msgid "@code{iconify-frame} event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2540
#, no-wrap
msgid "(iconify-frame (@var{frame}))"
msgstr ""

#. type: table
#: original_texis/commands.texi:2546
msgid ""
"This kind of event indicates that the user iconified @var{frame} using the "
"window manager.  Its standard definition is @code{ignore}; since the frame "
"has already been iconified, Emacs has no work to do.  The purpose of this "
"event type is so that you can keep track of such events if you want to."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2547
#, no-wrap
msgid "@code{make-frame-visible} event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2548
#, no-wrap
msgid "(make-frame-visible (@var{frame}))"
msgstr ""

#. type: table
#: original_texis/commands.texi:2552
msgid ""
"This kind of event indicates that the user deiconified @var{frame} using the "
"window manager.  Its standard definition is @code{ignore}; since the frame "
"has already been made visible, Emacs has no work to do."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2553
#, no-wrap
msgid "@code{touch-end} event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2554
#, no-wrap
msgid "(touch-end (@var{position}))"
msgstr ""

#. type: table
#: original_texis/commands.texi:2559
msgid ""
"This kind of event indicates that the user's finger moved off the mouse "
"wheel or the touchpad.  The @var{position} element is a mouse position list "
"(@pxref{Click Events}), specifying the position of the mouse cursor when the "
"finger moved off the mouse wheel."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2560
#, no-wrap
msgid "@code{wheel-up} event"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2561
#, no-wrap
msgid "@code{wheel-down} event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2562
#, no-wrap
msgid "(wheel-up @var{position} @var{clicks} @var{lines} @var{pixel-delta})"
msgstr ""

#. type: itemx
#: original_texis/commands.texi:2563
#, no-wrap
msgid "(wheel-down @var{position} @var{clicks} @var{lines} @var{pixel-delta})"
msgstr ""

#. type: table
#: original_texis/commands.texi:2568
msgid ""
"These events are generated by moving a mouse wheel.  The @var{position} "
"element is a mouse position list (@pxref{Click Events}), specifying the "
"position of the mouse cursor when the event occurred."
msgstr ""

#. type: vindex
#: original_texis/commands.texi:2569
#, no-wrap
msgid "mwheel-coalesce-scroll-events"
msgstr ""

#. type: table
#: original_texis/commands.texi:2586
msgid ""
"@var{clicks}, if present, is the number of times that the wheel was moved in "
"quick succession.  @xref{Repeat Events}.  @var{lines}, if present and not "
"@code{nil}, is the positive number of screen lines that should be scrolled "
"(either up, when the event is @code{wheel-up}, or down when the event is "
"@code{wheel-down}).  @var{pixel-delta}, if present, is a cons cell of the "
"form @w{@code{(@var{x} . @var{y})}}, where @var{x} and @var{y} are the "
"numbers of pixels by which to scroll in each axis, a.k.a.@: @dfn{pixelwise "
"deltas}.  Usually, only one of the two will be non-zero, the other will be "
"either zero or very close to zero; the larger number indicates the axis to "
"scroll the window.  When the variable @code{mwheel-coalesce-scroll-events} "
"is @code{nil}, the scroll commands ignore the @var{lines} element, even if "
"it's non-@code{nil}, and use the @var{pixel-delta} data instead; in that "
"case, the direction of scrolling is determined by the sign of the pixelwise "
"deltas, and the direction (up or down) implied by the event kind is ignored."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2587
#, no-wrap
msgid "pixel-resolution wheel events"
msgstr ""

#. type: table
#: original_texis/commands.texi:2596
msgid ""
"You can use these @var{x} and @var{y} pixelwise deltas to determine how much "
"the mouse wheel has actually moved at pixel resolution.  For example, the "
"pixelwise deltas could be used to scroll the display at pixel resolution, "
"exactly according to the user's turning the mouse wheel.  This pixelwise "
"scrolling is possible only when @code{mwheel-coalesce-scroll-events} is "
"@code{nil}, and in general the @var{pixel-delta} data is not generated when "
"that variable is non-@code{nil}."
msgstr ""

#. type: vindex
#: original_texis/commands.texi:2597
#, no-wrap
msgid "mouse-wheel-up-event"
msgstr ""

#. type: vindex
#: original_texis/commands.texi:2598
#, no-wrap
msgid "mouse-wheel-down-event"
msgstr ""

#. type: table
#: original_texis/commands.texi:2608
msgid ""
"The @code{wheel-up} and @code{wheel-down} events are generated only on some "
"kinds of systems.  On other systems, other events like @code{mouse-4} and "
"@code{mouse-5} are used instead.  Portable code should handle both "
"@code{wheel-up} and @code{wheel-down} events as well as the events specified "
"in the variables @code{mouse-wheel-up-event} and "
"@code{mouse-wheel-down-event}, defined in @file{mwheel.el}.  Beware that for "
"historical reasons the @code{mouse-wheel-@emph{up}-event} is the variable "
"that holds an event that should be handled similarly to "
"@code{wheel-@emph{down}} and vice versa."
msgstr ""

#. type: vindex
#: original_texis/commands.texi:2609
#, no-wrap
msgid "mouse-wheel-left-event"
msgstr ""

#. type: vindex
#: original_texis/commands.texi:2610
#, no-wrap
msgid "mouse-wheel-right-event"
msgstr ""

#. type: table
#: original_texis/commands.texi:2621
msgid ""
"The same holds for the horizontal wheel movements which are usually "
"represented by @code{wheel-left} and @code{wheel-right} events, but for "
"which portable code should also obey the variables "
"@code{mouse-wheel-left-event} and @code{mouse-wheel-right-event}, defined in "
"@file{mwheel.el}.  However, some mice also generate other events at the same "
"time as they're generating these scroll events which may get in the way.  "
"The way to fix this is generally to unbind these events (for instance, "
"@code{mouse-6} or @code{mouse-7}, but this is very hardware and operating "
"system dependent)."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2622
#, no-wrap
msgid "@code{pinch} event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2623
#, no-wrap
msgid "(pinch @var{position} @var{dx} @var{dy} @var{scale} @var{angle})"
msgstr ""

#. type: table
#: original_texis/commands.texi:2636
msgid ""
"This kind of event is generated by the user performing a ``pinch'' gesture "
"by placing two fingers on a touchpad and moving them towards or away from "
"each other.  @var{position} is a mouse position list (@pxref{Click Events}) "
"that provides the position of the mouse pointer when the event occurred, "
"@var{dx} is the change in the horizontal distance between the fingers since "
"the last event in the same sequence, @var{dy} is the vertical movement of "
"the fingers since the last event in the same sequence, @var{scale} is the "
"ratio of the current distance between the fingers to that distance at the "
"start of the sequence, and @var{angle} is the angular difference in degrees "
"between the direction of the line connecting the fingers in this event and "
"the direction of that line in the last event of the same sequence."
msgstr ""

#. type: table
#: original_texis/commands.texi:2640
msgid ""
"As pinch events are only sent at the beginning or during a pinch sequence, "
"they do not report gestures where the user moves two fingers on a touchpad "
"in a rotating fashion without pinching the fingers."
msgstr ""

#. type: table
#: original_texis/commands.texi:2642
msgid "All arguments after @var{position} are floating point numbers."
msgstr ""

#. type: table
#: original_texis/commands.texi:2648
msgid ""
"This event is usually sent as part of a sequence, which begins with the user "
"placing two fingers on the touchpad, and ends with the user removing those "
"fingers.  @var{dx}, @var{dy}, and @var{angle} will be @code{0.0} in the "
"first event of a sequence; subsequent events will report non-zero values for "
"these members of the event structure."
msgstr ""

#. type: table
#: original_texis/commands.texi:2653
msgid ""
"@var{dx} and @var{dy} are reported in imaginary relative units, in which "
"@code{1.0} is the width and height of the touchpad respectively.  They are "
"usually interpreted as being relative to the size of the object beneath the "
"gesture: image, window, etc."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2654
#, no-wrap
msgid "@code{preedit-text} event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2655
#, no-wrap
msgid "(preedit-text @var{arg})"
msgstr ""

#. type: table
#: original_texis/commands.texi:2659
msgid ""
"This event is sent when a system input method tells Emacs to display some "
"text to indicate to the user what will be inserted.  The contents of "
"@var{arg} are dependent on the window system being used."
msgstr ""

#. type: table
#: original_texis/commands.texi:2663
msgid ""
"On X, @var{arg} is a string describing some text to place behind the "
"cursor.  It can be @code{nil}, which means to remove any text previously "
"displayed."
msgstr ""

#. type: table
#: original_texis/commands.texi:2667
msgid ""
"On PGTK frames (@pxref{Frames}), @var{arg} is a list of strings with "
"information about their color and underline attributes.  It has the "
"following form:"
msgstr ""

#. type: group
#: original_texis/commands.texi:2680
#, no-wrap
msgid ""
"   ((@var{string1}\n"
"     (ul . @var{underline-color})\n"
"     (bg . @var{background-color})\n"
"     (fg . @var{foreground-color}))\n"
"    (@var{string2}\n"
"     (ul . @var{underline-color})\n"
"     (bg . @var{background-color})\n"
"     (fg . @var{foreground-color}))\n"
"    @dots{}\n"
"   )\n"
msgstr ""

#. type: table
#: original_texis/commands.texi:2687
msgid ""
"Color information can be omitted, leaving just the text of the strings.  "
"@var{underline-color} can be @code{t}, meaning underlined text with default "
"underline color, or it can be a string, the name of the color to draw the "
"underline."
msgstr ""

#. type: table
#: original_texis/commands.texi:2692
msgid ""
"This is a special event (@pxref{Special Events}), which normally should not "
"be bound by the user to any command.  Emacs will typically display the text "
"contained in the event in an overlay behind point when it is received."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2693
#, no-wrap
msgid "@code{drag-n-drop} event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2694
#, no-wrap
msgid "(drag-n-drop @var{position} @var{files})"
msgstr ""

#. type: table
#: original_texis/commands.texi:2698
msgid ""
"This kind of event is generated when a group of files is selected in an "
"application outside of Emacs, and then dragged and dropped onto an Emacs "
"frame."
msgstr ""

#. type: table
#: original_texis/commands.texi:2704
msgid ""
"The element @var{position} is a list describing the position of the event, "
"in the same format as used in a mouse-click event (@pxref{Click Events}), "
"and @var{files} is the list of file names that were dragged and dropped.  "
"The usual way to handle this event is by visiting these files."
msgstr ""

#. type: table
#: original_texis/commands.texi:2707
msgid "This kind of event is generated, at present, only on some kinds of systems."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2708
#, no-wrap
msgid "@code{help-echo} event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2709
#, no-wrap
msgid "help-echo"
msgstr ""

#. type: table
#: original_texis/commands.texi:2713
msgid ""
"This kind of event is generated when a mouse pointer moves onto a portion of "
"buffer text which has a @code{help-echo} text property.  The generated event "
"has this form:"
msgstr ""

#. type: example
#: original_texis/commands.texi:2716
#, no-wrap
msgid "(help-echo @var{frame} @var{help} @var{window} @var{object} @var{pos})\n"
msgstr ""

#. type: table
#: original_texis/commands.texi:2722
msgid ""
"The precise meaning of the event parameters and the way these parameters are "
"used to display the help-echo text are described in @ref{Text help-echo}."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2723
#, no-wrap
msgid "@code{sigusr1} event"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2724
#, no-wrap
msgid "@code{sigusr2} event"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2725
#, no-wrap
msgid "user signals"
msgstr ""

#. type: item
#: original_texis/commands.texi:2726
#, no-wrap
msgid "sigusr1"
msgstr ""

#. type: itemx
#: original_texis/commands.texi:2727
#, no-wrap
msgid "sigusr2"
msgstr ""

#. type: table
#: original_texis/commands.texi:2732
msgid ""
"These events are generated when the Emacs process receives the signals "
"@code{SIGUSR1} and @code{SIGUSR2}.  They contain no additional data because "
"signals do not carry additional information.  They can be useful for "
"debugging (@pxref{Error Debugging})."
msgstr ""

#. type: table
#: original_texis/commands.texi:2738
msgid ""
"To catch a user signal, bind the corresponding event to an interactive "
"command in the @code{special-event-map} (@pxref{Controlling Active Maps}).  "
"The command is called with no arguments, and the specific signal event is "
"available in @code{last-input-event} (@pxref{Event Input Misc}.  For "
"example:"
msgstr ""

#. type: smallexample
#: original_texis/commands.texi:2743
#, no-wrap
msgid ""
"(defun sigusr-handler ()\n"
"  (interactive)\n"
"  (message \"Caught signal %S\" last-input-event))\n"
"\n"
msgstr ""

#. type: smallexample
#: original_texis/commands.texi:2745
#, no-wrap
msgid "(keymap-set special-event-map \"<sigusr1>\" 'sigusr-handler)\n"
msgstr ""

#. type: table
#: original_texis/commands.texi:2748
msgid "To test the signal handler, you can make Emacs send a signal to itself:"
msgstr ""

#. type: smallexample
#: original_texis/commands.texi:2751
#, no-wrap
msgid "(signal-process (emacs-pid) 'sigusr1)\n"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2753
#, no-wrap
msgid "@code{language-change} event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2754
#, no-wrap
msgid "language-change"
msgstr ""

#. type: table
#: original_texis/commands.texi:2759
msgid ""
"This kind of event is generated on MS-Windows when the input language has "
"changed.  This typically means that the keyboard keys will send to Emacs "
"characters from a different language.  The generated event has this form:"
msgstr ""

#. type: smallexample
#: original_texis/commands.texi:2762
#, no-wrap
msgid "(language-change @var{frame} @var{codepage} @var{language-id})\n"
msgstr ""

#. type: table
#: original_texis/commands.texi:2774
msgid ""
"Here @var{frame} is the frame which was current when the input language "
"changed; @var{codepage} is the new codepage number; and @var{language-id} is "
"the numerical ID of the new input language.  The coding-system "
"(@pxref{Coding Systems}) that corresponds to @var{codepage} is "
"@code{cp@var{codepage}} or @code{windows-@var{codepage}}.  To convert "
"@var{language-id} to a string (e.g., to use it for various "
"language-dependent features, such as @code{set-language-environment}), use "
"the @code{w32-get-locale-info} function, like this:"
msgstr ""

#. type: smallexample
#: original_texis/commands.texi:2783
#, no-wrap
msgid ""
";; Get the abbreviated language name, such as \"ENU\" for English\n"
"(w32-get-locale-info language-id)\n"
";; Get the full English name of the language,\n"
";; such as \"English (United States)\"\n"
"(w32-get-locale-info language-id 4097)\n"
";; Get the full localized name of the language\n"
"(w32-get-locale-info language-id t)\n"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2785
#, no-wrap
msgid "@code{end-session} event"
msgstr ""

#. type: item
#: original_texis/commands.texi:2786
#, no-wrap
msgid "end-session"
msgstr ""

#. type: table
#: original_texis/commands.texi:2795
msgid ""
"This event is generated on MS-Windows when the operating system informs "
"Emacs that the user terminated the interactive session, or that the system "
"is shutting down.  The standard definition of this event is to invoke the "
"@code{kill-emacs} command (@pxref{Killing Emacs}) so as to shut down Emacs "
"in an orderly fashion; if there are unsaved changes, this will produce "
"auto-save files (@pxref{Auto-Saving}) that the user can use after restarting "
"the session to restore the unsaved edits."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2801
msgid ""
"If one of these events arrives in the middle of a key sequence---that is, "
"after a prefix key---then Emacs reorders the events so that this event comes "
"either before or after the multi-event key sequence, not within it."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2808
msgid ""
"Some of these special events, such as @code{delete-frame}, invoke Emacs "
"commands by default; others are not bound.  If you want to arrange for a "
"special event to invoke a command, you can do that via "
"@code{special-event-map}.  The command you bind to a function key in that "
"map can then examine the full event which invoked it in "
"@code{last-input-event}.  @xref{Special Events}."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2814
msgid ""
"If the user presses and releases the left mouse button over the same "
"location, that generates a sequence of events like this:"
msgstr ""

#. type: smallexample
#: original_texis/commands.texi:2818
#, no-wrap
msgid ""
"(down-mouse-1 (#<window 18 on NEWS> 2613 (0 . 38) -864320))\n"
"(mouse-1      (#<window 18 on NEWS> 2613 (0 . 38) -864180))\n"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2823
msgid ""
"While holding the control key down, the user might hold down the second "
"mouse button, and drag the mouse from one line to the next.  That produces "
"two events, as shown here:"
msgstr ""

#. type: smallexample
#: original_texis/commands.texi:2828
#, no-wrap
msgid ""
"(C-down-mouse-2 (#<window 18 on NEWS> 3440 (0 . 27) -731219))\n"
"(C-drag-mouse-2 (#<window 18 on NEWS> 3440 (0 . 27) -731219)\n"
"                (#<window 18 on NEWS> 3510 (0 . 28) -729648))\n"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2833
msgid ""
"While holding down the meta and shift keys, the user might press the second "
"mouse button on the window's mode line, and then drag the mouse into another "
"window.  That produces a pair of events like these:"
msgstr ""

#. type: smallexample
#: original_texis/commands.texi:2839
#, no-wrap
msgid ""
"(M-S-down-mouse-2 (#<window 18 on NEWS> mode-line (33 . 31) -457844))\n"
"(M-S-drag-mouse-2 (#<window 18 on NEWS> mode-line (33 . 31) -457844)\n"
"                  (#<window 20 on carlton-sanskrit.tex> 161 (33 . 3)\n"
"                   -453816))\n"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2844
msgid ""
"The frame with input focus might not take up the entire screen, and the user "
"might move the mouse outside the scope of the frame.  Inside the "
"@code{track-mouse} macro, that produces an event like this:"
msgstr ""

#. type: smallexample
#: original_texis/commands.texi:2847
#, no-wrap
msgid "(mouse-movement (#<frame *ielm* 0x102849a30> nil (563 . 205) 532301936))\n"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2851
#, no-wrap
msgid "event type"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2852
#, no-wrap
msgid "classifying events"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2860
msgid ""
"Every event has an @dfn{event type}, which classifies the event for key "
"binding purposes.  For a keyboard event, the event type equals the event "
"value; thus, the event type for a character is the character, and the event "
"type for a function key symbol is the symbol itself.  For events that are "
"lists, the event type is the symbol in the @sc{car} of the list.  Thus, the "
"event type is always a symbol or a character."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2866
msgid ""
"Two events of the same type are equivalent where key bindings are concerned; "
"thus, they always run the same command.  That does not necessarily mean they "
"do the same things, however, as some commands look at the whole event to "
"decide what to do.  For example, some commands use the location of a mouse "
"event to decide where in the buffer to act."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2870
msgid ""
"Sometimes broader classifications of events are useful.  For example, you "
"might want to ask whether an event involved the @key{META} key, regardless "
"of which other key or mouse button was used."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2873
msgid ""
"The functions @code{event-modifiers} and @code{event-basic-type} are "
"provided to get such information conveniently."
msgstr ""

#. type: defun
#: original_texis/commands.texi:2874
#, no-wrap
msgid "event-modifiers event"
msgstr ""

#. type: defun
#: original_texis/commands.texi:2881
msgid ""
"This function returns a list of the modifiers that @var{event} has.  The "
"modifiers are symbols; they include @code{shift}, @code{control}, "
"@code{meta}, @code{alt}, @code{hyper} and @code{super}.  In addition, the "
"modifiers list of a mouse event symbol always contains one of @code{click}, "
"@code{drag}, and @code{down}.  For double or triple events, it also contains "
"@code{double} or @code{triple}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:2887
msgid ""
"The argument @var{event} may be an entire event object, or just an event "
"type.  If @var{event} is a symbol that has never been used in an event that "
"has been read as input in the current Emacs session, then "
"@code{event-modifiers} can return @code{nil}, even when @var{event} actually "
"has modifiers."
msgstr ""

#. type: defun
#: original_texis/commands.texi:2889
msgid "Here are some examples:"
msgstr ""

#. type: example
#: original_texis/commands.texi:2911
#, no-wrap
msgid ""
"(event-modifiers ?a)\n"
"     @result{} nil\n"
"(event-modifiers ?A)\n"
"     @result{} (shift)\n"
"(event-modifiers ?\\C-a)\n"
"     @result{} (control)\n"
"(event-modifiers ?\\C-%)\n"
"     @result{} (control)\n"
"(event-modifiers ?\\C-\\S-a)\n"
"     @result{} (control shift)\n"
"(event-modifiers 'f5)\n"
"     @result{} nil\n"
"(event-modifiers 's-f5)\n"
"     @result{} (super)\n"
"(event-modifiers 'M-S-f5)\n"
"     @result{} (meta shift)\n"
"(event-modifiers 'mouse-1)\n"
"     @result{} (click)\n"
"(event-modifiers 'down-mouse-1)\n"
"     @result{} (down)\n"
msgstr ""

#. type: defun
#: original_texis/commands.texi:2919
msgid ""
"The modifiers list for a click event explicitly contains @code{click}, but "
"the event symbol name itself does not contain @samp{click}.  Similarly, the "
"modifiers list for an @acronym{ASCII} control character, such as @samp{C-a}, "
"contains @code{control}, even though reading such an event via "
"@code{read-char} will return the value 1 with the control modifier bit "
"removed."
msgstr ""

#. type: defun
#: original_texis/commands.texi:2921
#, no-wrap
msgid "event-basic-type event"
msgstr ""

#. type: defun
#: original_texis/commands.texi:2925
msgid ""
"This function returns the key or mouse button that @var{event} describes, "
"with all modifiers removed.  The @var{event} argument is as in "
"@code{event-modifiers}.  For example:"
msgstr ""

#. type: example
#: original_texis/commands.texi:2943
#, no-wrap
msgid ""
"(event-basic-type ?a)\n"
"     @result{} 97\n"
"(event-basic-type ?A)\n"
"     @result{} 97\n"
"(event-basic-type ?\\C-a)\n"
"     @result{} 97\n"
"(event-basic-type ?\\C-\\S-a)\n"
"     @result{} 97\n"
"(event-basic-type 'f5)\n"
"     @result{} f5\n"
"(event-basic-type 's-f5)\n"
"     @result{} f5\n"
"(event-basic-type 'M-S-f5)\n"
"     @result{} f5\n"
"(event-basic-type 'down-mouse-1)\n"
"     @result{} mouse-1\n"
msgstr ""

#. type: defun
#: original_texis/commands.texi:2946
#, no-wrap
msgid "mouse-movement-p object"
msgstr ""

#. type: defun
#: original_texis/commands.texi:2949
msgid ""
"This function returns non-@code{nil} if @var{object} is a mouse movement "
"event.  @xref{Motion Events}."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:2952
#, no-wrap
msgid "Accessing Mouse Events"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2953
#, no-wrap
msgid "mouse events, data in"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2954
#, no-wrap
msgid "keyboard events, data in"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2960
msgid ""
"This section describes convenient functions for accessing the data in a "
"mouse button or motion event.  Keyboard event data can be accessed using the "
"same functions, but data elements that aren't applicable to keyboard events "
"are zero or @code{nil}."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2963
msgid ""
"The following two functions return a mouse position list (@pxref{Click "
"Events}), specifying the position of a mouse event."
msgstr ""

#. type: defun
#: original_texis/commands.texi:2964
#, no-wrap
msgid "event-start event"
msgstr ""

#. type: defun
#: original_texis/commands.texi:2966
msgid "This returns the starting position of @var{event}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:2970
msgid ""
"If @var{event} is a click or button-down event, this returns the location of "
"the event.  If @var{event} is a drag event, this returns the drag's starting "
"position."
msgstr ""

#. type: defun
#: original_texis/commands.texi:2972
#, no-wrap
msgid "event-end event"
msgstr ""

#. type: defun
#: original_texis/commands.texi:2974
msgid "This returns the ending position of @var{event}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:2979
msgid ""
"If @var{event} is a drag event, this returns the position where the user "
"released the mouse button.  If @var{event} is a click or button-down event, "
"the value is actually the starting position, which is the only position such "
"events have."
msgstr ""

#. type: defun
#: original_texis/commands.texi:2981
#, no-wrap
msgid "posnp object"
msgstr ""

#. type: defun
#: original_texis/commands.texi:2985
msgid ""
"This function returns non-@code{nil} if @var{object} is a mouse position "
"list, in the format documented in @ref{Click Events}); and @code{nil} "
"otherwise."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:2987
#, no-wrap
msgid "mouse position list, accessing"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:2990
msgid ""
"These functions take a mouse position list as argument, and return various "
"parts of it:"
msgstr ""

#. type: defun
#: original_texis/commands.texi:2991
#, no-wrap
msgid "posn-window position"
msgstr ""

#. type: defun
#: original_texis/commands.texi:2995
msgid ""
"Return the window that @var{position} is in.  If @var{position} represents a "
"location outside the frame where the event was initiated, return that frame "
"instead."
msgstr ""

#. type: defun
#: original_texis/commands.texi:2997
#, no-wrap
msgid "posn-area position"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3001
msgid ""
"Return the window area recorded in @var{position}.  It returns @code{nil} "
"when the event occurred in the text area of the window; otherwise, it is a "
"symbol identifying the area in which the event occurred."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3003
#, no-wrap
msgid "posn-point position"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3008
msgid ""
"Return the buffer position in @var{position}.  When the event occurred in "
"the text area of the window, in a marginal area, or on a fringe, this is an "
"integer specifying a buffer position.  Otherwise, the value is undefined."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3010
#, no-wrap
msgid "posn-x-y position"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3014
msgid ""
"Return the pixel-based x and y coordinates in @var{position}, as a cons cell "
"@w{@code{(@var{x} . @var{y})}}.  These coordinates are relative to the "
"window given by @code{posn-window}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3017
msgid ""
"This example shows how to convert the window-relative coordinates in the "
"text area of a window into frame-relative coordinates:"
msgstr ""

#. type: example
#: original_texis/commands.texi:3027
#, no-wrap
msgid ""
"(defun frame-relative-coordinates (position)\n"
"  \"Return frame-relative coordinates from POSITION.\n"
"POSITION is assumed to lie in a window text area.\"\n"
"  (let* ((x-y (posn-x-y position))\n"
"         (window (posn-window position))\n"
"         (edges (window-inside-pixel-edges window)))\n"
"    (cons (+ (car x-y) (car edges))\n"
"          (+ (cdr x-y) (cadr edges)))))\n"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3030
#, no-wrap
msgid "posn-col-row position &optional use-window"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3043
msgid ""
"This function returns a cons cell @w{@code{(@var{col} .  @var{row})}}, "
"containing the estimated column and row corresponding to buffer position "
"described by @var{position}.  The return value is given in units of the "
"frame's default character width and default line height (including spacing), "
"as computed from the @var{x} and @var{y} values corresponding to "
"@var{position}.  (So, if the actual characters have non-default sizes, the "
"actual row and column may differ from these computed values.)  If the "
"optional @var{window} argument is non-@code{nil}, use the default character "
"width in the window indicated by @var{position} instead of the frame.  (This "
"makes a difference if that window is showing a buffer with a non-default "
"zooming level, for instance.)"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3048
msgid ""
"Note that @var{row} is counted from the top of the text area.  If the window "
"given by @var{position} possesses a header line (@pxref{Header Lines}) or a "
"tab line, they are @emph{not} included in the @var{row} count."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3050
#, no-wrap
msgid "posn-actual-col-row position"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3057
msgid ""
"Return the actual row and column in @var{position}, as a cons cell "
"@w{@code{(@var{col} . @var{row})}}.  The values are the actual row and "
"column numbers in the window given by @var{position}.  @xref{Click Events}, "
"for details.  The function returns @code{nil} if @var{position} does not "
"include actual position values; in that case @code{posn-col-row} can be used "
"to get approximate values."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3062
msgid ""
"Note that this function doesn't account for the visual width of characters "
"on display, like the number of visual columns taken by a tab character or an "
"image.  If you need the coordinates in canonical character units, use "
"@code{posn-col-row} instead."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3064
#, no-wrap
msgid "posn-string position"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3068
msgid ""
"Return the string object described by @var{position}, either @code{nil} "
"(which means @var{position} describes buffer text), or a cons cell "
"@w{@code{(@var{string} . @var{string-pos})}}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3070
#, no-wrap
msgid "posn-image position"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3074
msgid ""
"Return the image object in @var{position}, either @code{nil} (if there's no "
"image at @var{position}), or an image spec @w{@code{(image @dots{})}}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3076
#, no-wrap
msgid "posn-object position"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3081
msgid ""
"Return the image or string object described by @var{position}, either "
"@code{nil} (which means @var{position} describes buffer text), an image "
"@w{@code{(image @dots{})}}, or a cons cell @w{@code{(@var{string} "
". @var{string-pos})}}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3083
#, no-wrap
msgid "posn-object-x-y position"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3089
msgid ""
"Return the pixel-based x and y coordinates relative to the upper left corner "
"of the object described by @var{position}, as a cons cell @w{@code{(@var{dx} "
". @var{dy})}}.  If the @var{position} describes buffer text, return the "
"relative coordinates of the buffer-text character closest to that position."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3091
#, no-wrap
msgid "posn-object-width-height position"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3096
msgid ""
"Return the pixel width and height of the object described by @var{position}, "
"as a cons cell @code{(@var{width} . @var{height})}.  If the @var{position} "
"describes a buffer position, return the size of the character at that "
"position."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3098
#, no-wrap
msgid "timestamp of a mouse event"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3099
#, no-wrap
msgid "posn-timestamp position"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3105
msgid ""
"Return the timestamp in @var{position}.  This is the time at which the event "
"occurred, in milliseconds.  Such a timestamp is reported relative to an "
"arbitrary starting time that varies according to the window system in use.  "
"On the X Window System, for example, it is the number of milliseconds since "
"the X server was started."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3110
msgid ""
"These functions compute a position list given particular buffer position or "
"screen position.  You can access the data in this position list with the "
"functions described above."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3111
#, no-wrap
msgid "posn-at-point &optional pos window"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3115
msgid ""
"This function returns a position list for position @var{pos} in "
"@var{window}.  @var{pos} defaults to point in @var{window}; @var{window} "
"defaults to the selected window."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3118
msgid ""
"@code{posn-at-point} returns @code{nil} if @var{pos} is not visible in "
"@var{window}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3120
#, no-wrap
msgid "posn-at-x-y x y &optional frame-or-window whole"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3128
msgid ""
"This function returns position information corresponding to pixel "
"coordinates @var{x} and @var{y} in a specified frame or window, "
"@var{frame-or-window}, which defaults to the selected window.  The "
"coordinates @var{x} and @var{y} are relative to the text area of the "
"selected window.  If @var{whole} is non-@code{nil}, the @var{x} coordinate "
"is relative to the entire window area including scroll bars, margins and "
"fringes."
msgstr ""

#. type: defopt
#: original_texis/commands.texi:3130
#, no-wrap
msgid "mouse-prefer-closest-glyph"
msgstr ""

#. type: defopt
#: original_texis/commands.texi:3139
msgid ""
"If this variable is non-@code{nil}, the @code{posn-point} of a mouse "
"position list will be set to the position of the glyph whose leftmost edge "
"is the closest to the mouse click, as opposed to the position of the glyph "
"underneath the mouse pointer itself.  For example, if @code{posn-at-x-y} is "
"called with @var{x} set to @code{9}, which is contained within a character "
"of width 10 displayed at column 0, the point saved within the mouse position "
"list will be @emph{after} that character, not @emph{before} it."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:3142
#, no-wrap
msgid "Accessing Scroll Bar Events"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3143
#, no-wrap
msgid "scroll bar events, data in"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3146
msgid "These functions are useful for decoding scroll bar events."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3147
#, no-wrap
msgid "scroll-bar-event-ratio event"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3152
msgid ""
"This function returns the fractional vertical position of a scroll bar event "
"within the scroll bar.  The value is a cons cell @code{(@var{portion} "
". @var{whole})} containing two integers whose ratio is the fractional "
"position."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3154
#, no-wrap
msgid "scroll-bar-scale ratio total"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3159
msgid ""
"This function multiplies (in effect) @var{ratio} by @var{total}, rounding "
"the result to an integer.  The argument @var{ratio} is not a number, but "
"rather a pair @code{(@var{num} . @var{denom})}---typically a value returned "
"by @code{scroll-bar-event-ratio}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3162
msgid ""
"This function is handy for scaling a position on a scroll bar into a buffer "
"position.  Here's how to do that:"
msgstr ""

#. type: example
#: original_texis/commands.texi:3168
#, no-wrap
msgid ""
"(+ (point-min)\n"
"   (scroll-bar-scale\n"
"      (posn-x-y (event-start event))\n"
"      (- (point-max) (point-min))))\n"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3172
msgid ""
"Recall that scroll bar events have two integers forming a ratio, in place of "
"a pair of x and y coordinates."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:3175
#, no-wrap
msgid "Putting Keyboard Events in Strings"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3176
#, no-wrap
msgid "keyboard events in strings"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3177
#, no-wrap
msgid "strings with keyboard events"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3186
msgid ""
"In most of the places where strings are used, we conceptualize the string as "
"containing text characters---the same kind of characters found in buffers or "
"files.  Occasionally Lisp programs use strings that conceptually contain "
"keyboard characters; for example, they may be key sequences or keyboard "
"macro definitions.  However, storing keyboard characters in a string is a "
"complex matter, for reasons of historical compatibility, and it is not "
"always possible."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3191
msgid ""
"We recommend that new programs avoid dealing with these complexities by not "
"storing keyboard events in strings containing control characters or the "
"like, but instead store them in the common Emacs format as understood by "
"@code{key-valid-p}."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3196
msgid ""
"If you read a key sequence with @code{read-key-sequence-vector} (or "
"@code{read-key-sequence}), or access a key sequence with "
"@code{this-command-keys-vector} (or @code{this-command-keys}), you can "
"transform this to the recommended format by using @code{key-description}."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3201
msgid ""
"The complexities stem from the modifier bits that keyboard input characters "
"can include.  Aside from the Meta modifier, none of these modifier bits can "
"be included in a string, and the Meta modifier is allowed only in special "
"cases."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3209
msgid ""
"The earliest GNU Emacs versions represented meta characters as codes in the "
"range of 128 to 255.  At that time, the basic character codes ranged from 0 "
"to 127, so all keyboard character codes did fit in a string.  Many Lisp "
"programs used @samp{\\M-} in string constants to stand for meta characters, "
"especially in arguments to @code{define-key} and similar functions, and key "
"sequences and sequences of events were always represented as strings."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3214
msgid ""
"When we added support for larger basic character codes beyond 127, and "
"additional modifier bits, we had to change the representation of meta "
"characters.  Now the flag that represents the Meta modifier in a character "
"is"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3221
msgid "and such numbers cannot be included in a string."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3226
msgid ""
"To support programs with @samp{\\M-} in string constants, there are special "
"rules for including certain meta characters in a string.  Here are the rules "
"for interpreting a string as a sequence of input characters:"
msgstr ""

#. type: itemize
#: original_texis/commands.texi:3231
msgid ""
"If the keyboard character value is in the range of 0 to 127, it can go in "
"the string unchanged."
msgstr ""

#. type: itemize
#: original_texis/commands.texi:3234
msgid "The meta variants of those characters, with codes in the range of"
msgstr ""

#. type: itemize
#: original_texis/commands.texi:3241
msgid "to"
msgstr ""

#. type: tex
#: original_texis/commands.texi:3243
#, no-wrap
msgid "@math{2^{27} + 127},\n"
msgstr ""

#. type: ifnottex
#: original_texis/commands.texi:3246
msgid "2**27+127,"
msgstr ""

#. type: itemize
#: original_texis/commands.texi:3249
msgid ""
"can also go in the string, but you must change their numeric values.  You "
"must set the"
msgstr ""

#. type: tex
#: original_texis/commands.texi:3251
#, no-wrap
msgid "@math{2^{7}}\n"
msgstr ""

#. type: ifnottex
#: original_texis/commands.texi:3254
msgid "2**7"
msgstr ""

#. type: itemize
#: original_texis/commands.texi:3256
msgid "bit instead of the"
msgstr ""

#. type: itemize
#: original_texis/commands.texi:3264
msgid ""
"bit, resulting in a value between 128 and 255.  Only a unibyte string can "
"include these codes."
msgstr ""

#. type: itemize
#: original_texis/commands.texi:3267
msgid ""
"Non-@acronym{ASCII} characters above 256 can be included in a multibyte "
"string."
msgstr ""

#. type: itemize
#: original_texis/commands.texi:3271
msgid ""
"Other keyboard character events cannot fit in a string.  This includes "
"keyboard events in the range of 128 to 255."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3276
msgid ""
"Functions such as @code{read-key-sequence} that construct strings of "
"keyboard input characters follow these rules: they construct vectors instead "
"of strings, when the events won't fit in a string."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3282
msgid ""
"When you use the read syntax @samp{\\M-} in a string, it produces a code in "
"the range of 128 to 255---the same code that you get if you modify the "
"corresponding keyboard event to put it in the string.  Thus, meta events in "
"strings work consistently regardless of how they get into the strings."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3285
msgid ""
"However, most programs would do well to avoid these issues by following the "
"recommendations at the beginning of this section."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3288
#, no-wrap
msgid "read input"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3289
#, no-wrap
msgid "keyboard input"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3298
msgid ""
"The editor command loop reads key sequences using the function "
"@code{read-key-sequence}, which uses @code{read-event}.  These and other "
"functions for event input are also available for use in Lisp programs.  See "
"also @code{momentary-string-display} in @ref{Temporary Displays}, and "
"@code{sit-for} in @ref{Waiting}.  @xref{Terminal Input}, for functions and "
"variables for controlling terminal input modes and debugging terminal input."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3300
msgid "For higher-level input facilities, see @ref{Minibuffers}."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:3308 original_texis/commands.texi:3310
#: original_texis/commands.texi:3311
#, no-wrap
msgid "Key Sequence Input"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:3308
msgid "How to read one key sequence."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:3308 original_texis/commands.texi:3466
#: original_texis/commands.texi:3467
#, no-wrap
msgid "Reading One Event"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:3308
msgid "How to read just one event."
msgstr ""

#. type: node
#: original_texis/commands.texi:3308 original_texis/commands.texi:3684
#, no-wrap
msgid "Event Mod"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:3308
msgid "How Emacs modifies events as they are read."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:3308 original_texis/commands.texi:3774
#: original_texis/commands.texi:3775
#, no-wrap
msgid "Invoking the Input Method"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:3308
msgid "How reading an event uses the input method."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:3308 original_texis/commands.texi:3816
#: original_texis/commands.texi:3817
#, no-wrap
msgid "Quoted Character Input"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:3308
msgid "Asking the user to specify a character."
msgstr ""

#. type: node
#: original_texis/commands.texi:3308 original_texis/commands.texi:3861
#, no-wrap
msgid "Event Input Misc"
msgstr ""

#. type: menuentry
#: original_texis/commands.texi:3308
msgid "How to reread or throw away input events."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3312
#, no-wrap
msgid "key sequence input"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3317
msgid ""
"The command loop reads input a key sequence at a time, by calling "
"@code{read-key-sequence}.  Lisp programs can also call this function; for "
"example, @code{describe-key} uses it to read the key to describe."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3318
#, no-wrap
msgid ""
"read-key-sequence prompt &optional continue-echo dont-downcase-last "
"switch-frame-ok command-loop disable-text-conversion"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3325
msgid ""
"This function reads a key sequence and returns it as a string or vector.  It "
"keeps reading events until it has accumulated a complete key sequence; that "
"is, enough to specify a non-prefix command using the currently active "
"keymaps.  (Remember that a key sequence that starts with a mouse event is "
"read using the keymaps of the buffer in the window that the mouse was in, "
"not the current buffer.)"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3331
msgid ""
"If the events are all characters and all can fit in a string, then "
"@code{read-key-sequence} returns a string (@pxref{Strings of Events}).  "
"Otherwise, it returns a vector, since a vector can hold all kinds of "
"events---characters, symbols, and lists.  The elements of the string or "
"vector are the events in the key sequence."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3334
msgid ""
"Reading a key sequence includes translating the events in various ways.  "
"@xref{Translation Keymaps}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3339
msgid ""
"The argument @var{prompt} is either a string to be displayed in the echo "
"area as a prompt, or @code{nil}, meaning not to display a prompt.  The "
"argument @var{continue-echo}, if non-@code{nil}, means to echo this key as a "
"continuation of the previous key."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3345
msgid ""
"Normally any upper case event is converted to lower case if the original "
"event is undefined and the lower case equivalent is defined.  The argument "
"@var{dont-downcase-last}, if non-@code{nil}, means do not convert the last "
"event to lower case.  This is appropriate for reading a key sequence to be "
"defined."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3352
msgid ""
"The argument @var{switch-frame-ok}, if non-@code{nil}, means that this "
"function should process a @code{switch-frame} event if the user switches "
"frames before typing anything.  If the user switches frames in the middle of "
"a key sequence, or at the start of the sequence but @var{switch-frame-ok} is "
"@code{nil}, then the event will be put off until after the current key "
"sequence."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3357
msgid ""
"The argument @var{command-loop}, if non-@code{nil}, means that this key "
"sequence is being read by something that will read commands one after "
"another.  It should be @code{nil} if the caller will read just one key "
"sequence."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3363
msgid ""
"The argument @var{disable-text-conversion}, if non-@code{nil}, means that "
"system input methods will not directly perform edits to buffer text while "
"this key sequence is being read; user input will always generated individual "
"key events instead.  @xref{Misc Events}, for more about text conversion."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3366
msgid ""
"In the following example, Emacs displays the prompt @samp{?} in the echo "
"area, and then the user types @kbd{C-x C-f}."
msgstr ""

#. type: example
#: original_texis/commands.texi:3369
#, no-wrap
msgid ""
"(read-key-sequence \"?\")\n"
"\n"
msgstr ""

#. type: group
#: original_texis/commands.texi:3374
#, no-wrap
msgid ""
"---------- Echo Area ----------\n"
"?@kbd{C-x C-f}\n"
"---------- Echo Area ----------\n"
"\n"
msgstr ""

#. type: group
#: original_texis/commands.texi:3376
#, no-wrap
msgid "     @result{} \"^X^F\"\n"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3382
msgid ""
"The function @code{read-key-sequence} suppresses quitting: @kbd{C-g} typed "
"while reading with this function works like any other character, and does "
"not set @code{quit-flag}.  @xref{Quitting}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3384
#, no-wrap
msgid ""
"read-key-sequence-vector prompt &optional continue-echo dont-downcase-last "
"switch-frame-ok command-loop disable-text-conversion"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3388
msgid ""
"This is like @code{read-key-sequence} except that it always returns the key "
"sequence as a vector, never as a string.  @xref{Strings of Events}."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3390
#, no-wrap
msgid "upper case key sequence"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3391
#, no-wrap
msgid "downcasing in @code{lookup-key}"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3392
#, no-wrap
msgid "shift-translation"
msgstr ""

#. type: vindex
#: original_texis/commands.texi:3393
#, no-wrap
msgid "translate-upper-case-key-bindings"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3401
msgid ""
"If an input character is upper-case (or has the shift modifier) and has no "
"key binding, but its lower-case equivalent has one, then "
"@code{read-key-sequence} converts the character to lower case.  (This "
"behavior can be disabled by setting the "
"@code{translate-upper-case-key-bindings} user option to @code{nil}.)  Note "
"that @code{lookup-key} does not perform case conversion in this way."
msgstr ""

#. type: vindex
#: original_texis/commands.texi:3402
#, no-wrap
msgid "this-command-keys-shift-translated"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3410
msgid ""
"When reading input results in such a @dfn{shift-translation}, Emacs sets the "
"variable @code{this-command-keys-shift-translated} to a non-@code{nil} "
"value.  Lisp programs can examine this variable if they need to modify their "
"behavior when invoked by shift-translated keys.  For example, the function "
"@code{handle-shift-selection} examines the value of this variable to "
"determine how to activate or deactivate the region (@pxref{The Mark, "
"handle-shift-selection})."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3416
msgid ""
"The function @code{read-key-sequence} also transforms some mouse events.  It "
"converts unbound drag events into click events, and discards unbound "
"button-down events entirely.  It also reshuffles focus events and "
"miscellaneous window events so that they never appear in a key sequence with "
"any other events."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3417
#, no-wrap
msgid "@code{tab-line}, prefix key"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3418
#, no-wrap
msgid "@code{header-line}, prefix key"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3419
#, no-wrap
msgid "@code{mode-line}, prefix key"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3420
#, no-wrap
msgid "@code{vertical-line}, prefix key"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3421
#, no-wrap
msgid "@code{horizontal-scroll-bar}, prefix key"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3422
#, no-wrap
msgid "@code{vertical-scroll-bar}, prefix key"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3423
#, no-wrap
msgid "@code{menu-bar}, prefix key"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3424
#, no-wrap
msgid "@code{tab-bar}, prefix key"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3425
#, no-wrap
msgid "@code{left-margin}, prefix key"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3426
#, no-wrap
msgid "@code{right-margin}, prefix key"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3427
#, no-wrap
msgid "@code{left-fringe}, prefix key"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3428
#, no-wrap
msgid "@code{right-fringe}, prefix key"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3429
#, no-wrap
msgid "@code{right-divider}, prefix key"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3430
#, no-wrap
msgid "@code{bottom-divider}, prefix key"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3431
#, no-wrap
msgid "mouse events, in special parts of window or frame"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3432
#, no-wrap
msgid "touch screen events, in special parts of window or frame"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3448
msgid ""
"When mouse or @code{touchscreen-begin} and @code{touchscreen-end} events "
"occur in special parts of a window or frame, such as a mode line or a scroll "
"bar, the event type shows nothing special---it is the same symbol that would "
"normally represent that combination of mouse button and modifier keys.  The "
"information about the window part is kept elsewhere in the event---in the "
"coordinates.  But @code{read-key-sequence} translates this information into "
"imaginary prefix keys, all of which are symbols: @code{tab-line}, "
"@code{header-line}, @code{horizontal-scroll-bar}, @code{menu-bar}, "
"@code{tab-bar}, @code{mode-line}, @code{vertical-line}, "
"@code{vertical-scroll-bar}, @code{left-margin}, @code{right-margin}, "
"@code{left-fringe}, @code{right-fringe}, @code{right-divider}, and "
"@code{bottom-divider}.  You can define meanings for mouse clicks in special "
"window parts by defining key sequences using these imaginary prefix keys."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3451
msgid ""
"For example, if you call @code{read-key-sequence} and then click the mouse "
"on the window's mode line, you get two events, like this:"
msgstr ""

#. type: example
#: original_texis/commands.texi:3458
#, no-wrap
msgid ""
"(read-key-sequence \"Click on the mode line: \")\n"
"     @result{} [mode-line\n"
"         (mouse-1\n"
"          (#<window 6 on NEWS> mode-line\n"
"           (40 . 63) 5959987))]\n"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3460
#, no-wrap
msgid "num-input-keys"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3464
msgid ""
"This variable's value is the number of key sequences processed so far in "
"this Emacs session.  This includes key sequences read from the terminal and "
"key sequences read from keyboard macros being executed."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3468
#, no-wrap
msgid "reading a single event"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3469
#, no-wrap
msgid "event, reading only one"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3473
msgid ""
"The lowest level functions for command input are @code{read-event}, "
"@code{read-char}, and @code{read-char-exclusive}."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3476
msgid ""
"If you need a function to read a character using the minibuffer, use "
"@code{read-char-from-minibuffer} (@pxref{Multiple Queries})."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3477
#, no-wrap
msgid "read-event &optional prompt inherit-input-method seconds"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3480
msgid ""
"This function reads and returns the next event of command input, waiting if "
"necessary until an event is available."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3484
msgid ""
"The returned event may come directly from the user, or from a keyboard "
"macro.  It is not decoded by the keyboard's input coding system "
"(@pxref{Terminal I/O Encoding})."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3491
msgid ""
"If the optional argument @var{prompt} is non-@code{nil}, it should be a "
"string to display in the echo area as a prompt.  If @var{prompt} is "
"@code{nil} or the string @samp{\"\"}, @code{read-event} does not display any "
"message to indicate it is waiting for input; instead, it prompts by echoing: "
"it displays descriptions of the events that led to or were read by the "
"current command.  @xref{The Echo Area}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3496
msgid ""
"If @var{inherit-input-method} is non-@code{nil}, then the current input "
"method (if any) is employed to make it possible to enter a "
"non-@acronym{ASCII} character.  Otherwise, input method handling is disabled "
"for reading this event."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3500
msgid ""
"If @code{cursor-in-echo-area} is non-@code{nil}, then @code{read-event} "
"moves the cursor temporarily to the echo area, to the end of any message "
"displayed there.  Otherwise @code{read-event} does not move the cursor."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3509
msgid ""
"If @var{seconds} is non-@code{nil}, it should be a number specifying the "
"maximum time to wait for input, in seconds.  If no input arrives within that "
"time, @code{read-event} stops waiting and returns @code{nil}.  A floating "
"point @var{seconds} means to wait for a fractional number of seconds.  Some "
"systems support only a whole number of seconds; on these systems, "
"@var{seconds} is rounded down.  If @var{seconds} is @code{nil}, "
"@code{read-event} waits as long as necessary for input to arrive."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3518
msgid ""
"If @var{seconds} is @code{nil}, Emacs is considered idle while waiting for "
"user input to arrive.  Idle timers---those created with "
"@code{run-with-idle-timer} (@pxref{Idle Timers})---can run during this "
"period.  However, if @var{seconds} is non-@code{nil}, the state of idleness "
"remains unchanged.  If Emacs is non-idle when @code{read-event} is called, "
"it remains non-idle throughout the operation of @code{read-event}; if Emacs "
"is idle (which can happen if the call happens inside an idle timer), it "
"remains idle."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3524
msgid ""
"If @code{read-event} gets an event that is defined as a help character, then "
"in some cases @code{read-event} processes the event directly without "
"returning.  @xref{Help Functions}.  Certain other events, called "
"@dfn{special events}, are also processed directly within @code{read-event} "
"(@pxref{Special Events})."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3527
msgid ""
"Here is what happens if you call @code{read-event} and then press the "
"right-arrow function key:"
msgstr ""

#. type: group
#: original_texis/commands.texi:3532
#, no-wrap
msgid ""
"(read-event)\n"
"     @result{} right\n"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3536
#, no-wrap
msgid "read-char &optional prompt inherit-input-method seconds"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3541
msgid ""
"This function reads and returns a character input event.  If the user "
"generates an event which is not a character (i.e., a mouse click or function "
"key event), @code{read-char} signals an error.  The arguments work as in "
"@code{read-event}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3555
msgid ""
"If the event has modifiers, Emacs attempts to resolve them and return the "
"code of the corresponding character.  For example, if the user types "
"@kbd{C-a}, the function returns 1, which is the @acronym{ASCII} code of the "
"@samp{C-a} character.  If some of the modifiers cannot be reflected in the "
"character code, @code{read-char} leaves the unresolved modifier bits set in "
"the returned event.  For example, if the user types @kbd{C-M-a}, the "
"function returns 134217729, 8000001 in hex, i.e.@: @samp{C-a} with the Meta "
"modifier bit set.  This value is not a valid character code: it fails the "
"@code{characterp} test (@pxref{Character Codes}).  Use "
"@code{event-basic-type} (@pxref{Classifying Events}) to recover the "
"character code with the modifier bits removed; use @code{event-modifiers} to "
"test for modifiers in the character event returned by @code{read-char}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3562
msgid ""
"In the first example below, the user types the character @kbd{1} "
"(@acronym{ASCII} code 49).  The second example shows a keyboard macro "
"definition that calls @code{read-char} from the minibuffer using "
"@code{eval-expression}.  @code{read-char} reads the keyboard macro's very "
"next character, which is @kbd{1}.  Then @code{eval-expression} displays its "
"return value in the echo area."
msgstr ""

#. type: group
#: original_texis/commands.texi:3567
#, no-wrap
msgid ""
"(read-char)\n"
"     @result{} 49\n"
msgstr ""

#. type: group
#: original_texis/commands.texi:3573
#, no-wrap
msgid ""
";; @r{We assume here you use @kbd{M-:} to evaluate this.}\n"
"(symbol-function 'foo)\n"
"     @result{} \"^[:(read-char)^M1\"\n"
msgstr ""

#. type: group
#: original_texis/commands.texi:3578
#, no-wrap
msgid ""
"(execute-kbd-macro 'foo)\n"
"     @print{} 49\n"
"     @result{} nil\n"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3582
#, no-wrap
msgid "read-char-exclusive &optional prompt inherit-input-method seconds"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3588
msgid ""
"This function reads and returns a character input event.  If the user "
"generates an event which is not a character event, "
"@code{read-char-exclusive} ignores it and reads another event, until it gets "
"a character.  The arguments work as in @code{read-event}.  The returned "
"value may include modifier bits, as with @code{read-char}."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3591
msgid "None of the above functions suppress quitting."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3592
#, no-wrap
msgid "num-nonmacro-input-events"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3595
msgid ""
"This variable holds the total number of input events received so far from "
"the terminal---not counting those generated by keyboard macros."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3604
msgid ""
"We emphasize that, unlike @code{read-key-sequence}, the functions "
"@code{read-event}, @code{read-char}, and @code{read-char-exclusive} do not "
"perform the translations described in @ref{Translation Keymaps}.  If you "
"wish to read a single key taking these translations into account (for "
"example, to read @ref{Function Keys} in a terminal or @ref{Mouse Events} "
"from @code{xterm-mouse-mode}), use the function @code{read-key}:"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3605
#, no-wrap
msgid "read-key &optional prompt disable-fallbacks"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3612
msgid ""
"This function reads a single key.  It is intermediate between "
"@code{read-key-sequence} and @code{read-event}.  Unlike the former, it reads "
"a single key, not a key sequence.  Unlike the latter, it does not return a "
"raw event, but decodes and translates the user input according to "
"@code{input-decode-map}, @code{local-function-key-map}, and "
"@code{key-translation-map} (@pxref{Translation Keymaps})."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3615
msgid ""
"The argument @var{prompt} is either a string to be displayed in the echo "
"area as a prompt, or @code{nil}, meaning not to display a prompt."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3623
msgid ""
"If argument @var{disable-fallbacks} is non-@code{nil} then the usual "
"fallback logic for unbound keys in @code{read-key-sequence} is not applied.  "
"This means that mouse button-down and multi-click events will not be "
"discarded and @code{local-function-key-map} and @code{key-translation-map} "
"will not get applied.  If @code{nil} or unspecified, the only fallback "
"disabled is downcasing of the last event."
msgstr ""

#. type: vindex
#: original_texis/commands.texi:3625
#, no-wrap
msgid "read-char-choice-use-read-key"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3626
#, no-wrap
msgid "read-char-choice prompt chars &optional inhibit-quit"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3631
msgid ""
"This function uses @code{read-from-minibuffer} to read and return a single "
"character that is a member of @var{chars}, which should be a list of single "
"characters.  It discards any input characters that are not members of "
"@var{chars}, and shows a message to that effect."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3643
msgid ""
"The optional argument @var{inhibit-quit} is by default ignored, but if the "
"variable @code{read-char-choice-use-read-key} is non-@code{nil}, this "
"function uses @code{read-key} instead of @code{read-from-minibuffer}, and in "
"that case @var{inhibit-quit} non-@code{nil} means ignore keyboard-quit "
"events while waiting for valid input.  In addition, if "
"@code{read-char-choice-use-read-key} is non-@code{nil}, binding "
"@code{help-form} (@pxref{Help Functions}) to a non-@code{nil} value while "
"calling this function causes it to evaluate @code{help-form} and display the "
"result when the user presses @code{help-char}; it then continues to wait for "
"a valid input character, or for keyboard-quit."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3645
#, no-wrap
msgid ""
"read-multiple-choice prompt choices &optional help-string show-help "
"long-form"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3648
msgid ""
"Ask user a multiple choice question.  @var{prompt} should be a string that "
"will be displayed as the prompt."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3654
msgid ""
"@var{choices} is an alist where the first element in each entry is a "
"character to be entered, the second element is a short name for the entry to "
"be displayed while prompting (if there's room, it might be shortened), and "
"the third, optional entry is a longer explanation that will be displayed in "
"a help buffer if the user requests more help."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3659
msgid ""
"If optional argument @var{help-string} is non-@code{nil}, it should be a "
"string with a more detailed description of all choices.  It will be "
"displayed in a help buffer instead of the default auto-generated description "
"when the user types @kbd{?}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3663
msgid ""
"If optional argument @var{show-help} is non-@code{nil}, the help buffer will "
"be displayed immediately, before any user input.  If it is a string, use it "
"as the name of the help buffer."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3668
msgid ""
"If optional argument @var{long-form} is non-@code{nil}, the user will have "
"to type in long-form answers (using @code{completing-read})  instead of "
"hitting a single key.  The answers must be among the second elements of the "
"values in the @var{choices} list."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3670
msgid "The return value is the matching value from @var{choices}."
msgstr ""

#. type: lisp
#: original_texis/commands.texi:3677
#, no-wrap
msgid ""
"(read-multiple-choice\n"
" \"Continue connecting?\"\n"
" '((?a \"always\" \"Accept certificate for this and future sessions.\")\n"
"   (?s \"session only\" \"Accept certificate this session only.\")\n"
"   (?n \"no\" \"Refuse to use certificate, close connection.\")))\n"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3681
msgid ""
"The @code{read-multiple-choice-face} face is used to highlight the matching "
"characters in the name string on graphical terminals."
msgstr ""

#. type: subsection
#: original_texis/commands.texi:3685
#, no-wrap
msgid "Modifying and Translating Input Events"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3686
#, no-wrap
msgid "modifiers of events"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3687
#, no-wrap
msgid "translating input events"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3688
#, no-wrap
msgid "event translation"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3694
msgid ""
"Emacs modifies every event it reads according to "
"@code{extra-keyboard-modifiers}, then translates it through "
"@code{keyboard-translate-table} (if applicable), before returning it from "
"@code{read-event}."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3695
#, no-wrap
msgid "extra-keyboard-modifiers"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3707
msgid ""
"This variable lets Lisp programs ``press'' the modifier keys on the "
"keyboard.  The value is a character.  Only the modifiers of the character "
"matter.  Each time the user types a keyboard key, it is altered as if those "
"modifier keys were held down.  For instance, if you bind "
"@code{extra-keyboard-modifiers} to @code{?\\C-\\M-a}, then all keyboard "
"input characters typed during the scope of the binding will have the control "
"and meta modifiers applied to them.  The character @code{?\\C-@@}, "
"equivalent to the integer 0, does not count as a control character for this "
"purpose, but as a character with no modifiers.  Thus, setting "
"@code{extra-keyboard-modifiers} to zero cancels any modification."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3711
msgid ""
"When using a window system, the program can press any of the modifier keys "
"in this way.  Otherwise, only the @key{CTL} and @key{META} keys can be "
"virtually pressed."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3714
msgid ""
"Note that this variable applies only to events that really come from the "
"keyboard, and has no effect on mouse events or any other events."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3716
#, no-wrap
msgid "keyboard-translate-table"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3722
msgid ""
"This terminal-local variable is the translate table for keyboard "
"characters.  It lets you reshuffle the keys on the keyboard without changing "
"any command bindings.  Its value is normally a char-table, or else "
"@code{nil}.  (It can also be a string or vector, but this is considered "
"obsolete.)"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3727
msgid ""
"If @code{keyboard-translate-table} is a char-table (@pxref{Char-Tables}), "
"then each character read from the keyboard is looked up in this char-table.  "
"If the value found there is non-@code{nil}, then it is used instead of the "
"actual input character."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3732
msgid ""
"Note that this translation is the first thing that happens to a character "
"after it is read from the terminal.  Record-keeping features such as "
"@code{recent-keys} and dribble files record the characters after "
"translation."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3737
msgid ""
"Note also that this translation is done before the characters are supplied "
"to input methods (@pxref{Input Methods}).  Use "
"@code{translation-table-for-input} (@pxref{Translation of Characters}), if "
"you want to translate characters after input methods operate."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3739
#, no-wrap
msgid "key-translate from to"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3746
msgid ""
"This function modifies @code{keyboard-translate-table} to translate "
"character code @var{from} into character code @var{to}.  It creates the "
"keyboard translate table if necessary.  Both @var{from} and @var{to} should "
"be strings that satisfy @code{key-valid-p} (@pxref{Key Sequences}).  If "
"@var{to} is @code{nil}, the function removes any existing translation for "
"@var{from}."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3751
msgid ""
"Here's an example of using the @code{keyboard-translate-table} to make "
"@kbd{C-x}, @kbd{C-c} and @kbd{C-v} perform the cut, copy and paste "
"operations:"
msgstr ""

#. type: example
#: original_texis/commands.texi:3759
#, no-wrap
msgid ""
"(key-translate \"C-x\" \"<control-x>\")\n"
"(key-translate \"C-c\" \"<control-c>\")\n"
"(key-translate \"C-v\" \"<control-v>\")\n"
"(keymap-global-set \"<control-x>\" 'kill-region)\n"
"(keymap-global-set \"<control-c>\" 'kill-ring-save)\n"
"(keymap-global-set \"<control-v>\" 'yank)\n"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3767
msgid ""
"On a graphical terminal that supports extended @acronym{ASCII} input, you "
"can still get the standard Emacs meanings of one of those characters by "
"typing it with the shift key.  That makes it a different character as far as "
"keyboard translation is concerned, but it has the same usual meaning."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3773
msgid ""
"@xref{Translation Keymaps}, for mechanisms that translate event sequences at "
"the level of @code{read-key-sequence}.  If you need to translate input "
"events that are not characters (i.e., @code{characterp} returns @code{nil} "
"for them), you must use the event translation mechanism described there."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3776
#, no-wrap
msgid "invoking input method"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3783
msgid ""
"The event-reading functions invoke the current input method, if any "
"(@pxref{Input Methods}).  If the value of @code{input-method-function} is "
"non-@code{nil}, it should be a function; when @code{read-event} reads a "
"printing character (including @key{SPC}) with no modifier bits, it calls "
"that function, passing the character as an argument."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3784
#, no-wrap
msgid "input-method-function"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3787
msgid ""
"If this is non-@code{nil}, its value specifies the current input method "
"function."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3793
msgid ""
"@strong{Warning:} don't bind this variable with @code{let}.  It is often "
"buffer-local, and if you bind it around reading input (which is exactly when "
"you @emph{would} bind it), switching buffers asynchronously while Emacs is "
"waiting will cause the value to be restored in the wrong buffer."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3803
msgid ""
"The input method function should return a list of events which should be "
"used as input.  (If the list is @code{nil}, that means there is no input, so "
"@code{read-event} waits for another event.)  These events are processed "
"before the events in @code{unread-command-events} (@pxref{Event Input "
"Misc}).  Events returned by the input method function are not passed to the "
"input method function again, even if they are printing characters with no "
"modifier bits."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3807
msgid ""
"If the input method function calls @code{read-event} or "
"@code{read-key-sequence}, it should bind @code{input-method-function} to "
"@code{nil} first, to prevent recursion."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3815
msgid ""
"The input method function is not called when reading the second and "
"subsequent events of a key sequence.  Thus, these characters are not subject "
"to input method processing.  The input method function should test the "
"values of @code{overriding-local-map} and "
"@code{overriding-terminal-local-map}; if either of these variables is "
"non-@code{nil}, the input method should put its argument into a list and "
"return that list with no further processing."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3818
#, no-wrap
msgid "quoted character input"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3824
msgid ""
"You can use the function @code{read-quoted-char} to ask the user to specify "
"a character, and allow the user to specify a control or meta character "
"conveniently, either literally or as an octal character code.  The command "
"@code{quoted-insert} uses this function."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3825
#, no-wrap
msgid "read-quoted-char &optional prompt"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3826
#, no-wrap
msgid "octal character input"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3827
#, no-wrap
msgid "control characters, reading"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3828
#, no-wrap
msgid "nonprinting characters, reading"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3836
msgid ""
"This function is like @code{read-char}, except that if the first character "
"read is an octal digit (0--7), it reads any number of octal digits (but "
"stopping if a non-octal digit is found), and returns the character "
"represented by that numeric character code.  If the character that "
"terminates the sequence of octal digits is @key{RET}, it is discarded.  Any "
"other terminating character is used as input after this function returns."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3839
msgid ""
"Quitting is suppressed when the first character is read, so that the user "
"can enter a @kbd{C-g}.  @xref{Quitting}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3843
msgid ""
"If @var{prompt} is supplied, it specifies a string for prompting the user.  "
"The prompt string is always displayed in the echo area, followed by a single "
"@samp{-}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3846
msgid ""
"In the following example, the user types in the octal number 177 (which is "
"127 in decimal)."
msgstr ""

#. type: example
#: original_texis/commands.texi:3849
#, no-wrap
msgid ""
"(read-quoted-char \"What character\")\n"
"\n"
msgstr ""

#. type: group
#: original_texis/commands.texi:3854
#, no-wrap
msgid ""
"---------- Echo Area ----------\n"
"What character @kbd{1 7 7}-\n"
"---------- Echo Area ----------\n"
"\n"
msgstr ""

#. type: group
#: original_texis/commands.texi:3856
#, no-wrap
msgid "     @result{} 127\n"
msgstr ""

#. type: subsection
#: original_texis/commands.texi:3862
#, no-wrap
msgid "Miscellaneous Event Input Features"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:3868
msgid ""
"This section describes how to peek ahead at events without using them up, "
"how to check for pending input, and how to discard pending input.  See also "
"the function @code{read-passwd} (@pxref{Reading a Password})."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3869
#, no-wrap
msgid "unread-command-events"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3870
#, no-wrap
msgid "next input"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3871
#, no-wrap
msgid "peeking at input"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3875
msgid ""
"This variable holds a list of events waiting to be read as command input.  "
"The events are used in the order they appear in the list, and removed one by "
"one as they are used."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3880
msgid ""
"The variable is needed because in some cases a function reads an event and "
"then decides not to use it.  Storing the event in this variable causes it to "
"be processed normally, by the command loop or by the functions to read "
"command input."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3881
#, no-wrap
msgid "prefix argument unreading"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3888
msgid ""
"For example, the function that implements numeric prefix arguments reads any "
"number of digits.  When it finds a non-digit event, it must unread the event "
"so that it can be read normally by the command loop.  Likewise, incremental "
"search uses this feature to unread events with no special meaning in a "
"search, because these events should exit the search and then execute "
"normally."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3892
msgid ""
"The reliable and easy way to extract events from a key sequence so as to put "
"them in @code{unread-command-events} is to use @code{listify-key-sequence} "
"(see below)."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3895
msgid ""
"Normally you add events to the front of this list, so that the events most "
"recently unread will be reread first."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3901
msgid ""
"Events read from this list are not normally added to the current command's "
"key sequence (as returned by, e.g., @code{this-command-keys}), as the events "
"will already have been added once as they were read for the first time.  An "
"element of the form @w{@code{(t . @var{event})}} forces @var{event} to be "
"added to the current command's key sequence."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3902
#, no-wrap
msgid "not recording input events"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3903
#, no-wrap
msgid "input events, prevent recording"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3909
msgid ""
"Elements read from this list are normally recorded by the record-keeping "
"features (@pxref{Recording Input}) and while defining a keyboard macro "
"(@pxref{Keyboard Macros}).  However, an element of the form "
"@w{@code{(no-record . @var{event})}} causes @var{event} to be processed "
"normally without recording it."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3911
#, no-wrap
msgid "listify-key-sequence key"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3914
msgid ""
"This function converts the string or vector @var{key} to a list of "
"individual events, which you can put in @code{unread-command-events}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3916
#, no-wrap
msgid "input-pending-p &optional check-timers"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3917
#, no-wrap
msgid "waiting for command key input"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3922
msgid ""
"This function determines whether any command input is currently available to "
"be read.  It returns immediately, with value @code{t} if there is available "
"input, @code{nil} otherwise.  On rare occasions it may return @code{t} when "
"no input is available."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3926
msgid ""
"If the optional argument @var{check-timers} is non-@code{nil}, then if no "
"input is available, Emacs runs any timers which are ready.  @xref{Timers}."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3928
#, no-wrap
msgid "last-input-event"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3931
msgid ""
"This variable records the last terminal input event read, whether as part of "
"a command or explicitly by a Lisp program."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3936
msgid ""
"In the example below, the Lisp program reads the character @kbd{1}, "
"@acronym{ASCII} code 49.  It becomes the value of @code{last-input-event}, "
"while @kbd{C-e} (we assume @kbd{C-x C-e} command is used to evaluate this "
"expression) remains the value of @code{last-command-event}."
msgstr ""

#. type: group
#: original_texis/commands.texi:3945
#, no-wrap
msgid ""
"(progn (print (read-char))\n"
"       (print last-command-event)\n"
"       last-input-event)\n"
"     @print{} 49\n"
"     @print{} 5\n"
"     @result{} 49\n"
msgstr ""

#. type: defmac
#: original_texis/commands.texi:3949
#, no-wrap
msgid "while-no-input body@dots{}"
msgstr ""

#. type: defmac
#: original_texis/commands.texi:3956
msgid ""
"This construct runs the @var{body} forms and returns the value of the last "
"one---but only if no input arrives.  If any input arrives during the "
"execution of the @var{body} forms, it aborts them (working much like a "
"quit).  The @code{while-no-input} form returns @code{nil} if aborted by a "
"real quit, and returns @code{t} if aborted by arrival of other input."
msgstr ""

#. type: defmac
#: original_texis/commands.texi:3960
msgid ""
"If a part of @var{body} binds @code{inhibit-quit} to non-@code{nil}, arrival "
"of input during those parts won't cause an abort until the end of that part."
msgstr ""

#. type: defmac
#: original_texis/commands.texi:3964
msgid ""
"If you want to be able to distinguish all possible values computed by "
"@var{body} from both kinds of abort conditions, write the code like this:"
msgstr ""

#. type: example
#: original_texis/commands.texi:3969
#, no-wrap
msgid ""
"(while-no-input\n"
"  (list\n"
"    (progn . @var{body})))\n"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3972
#, no-wrap
msgid "while-no-input-ignore-events"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:3975
msgid ""
"This variable allow setting which special events @code{while-no-input} "
"should ignore.  It is a list of event symbols (@pxref{Event Examples})."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3978
#, no-wrap
msgid "discard-input"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3979
#, no-wrap
msgid "flushing input"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3980
#, no-wrap
msgid "discarding input"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:3981
#, no-wrap
msgid "keyboard macro, terminating"
msgstr ""

#. type: defun
#: original_texis/commands.texi:3985
msgid ""
"This function discards the contents of the terminal input buffer and cancels "
"any keyboard macro that might be in the process of definition.  It returns "
"@code{nil}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:3990
msgid ""
"In the following example, the user may type a number of characters right "
"after starting the evaluation of the form.  After the @code{sleep-for} "
"finishes sleeping, @code{discard-input} discards any characters typed during "
"the sleep."
msgstr ""

#. type: example
#: original_texis/commands.texi:3995
#, no-wrap
msgid ""
"(progn (sleep-for 2)\n"
"       (discard-input))\n"
"     @result{} nil\n"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:4001
#, no-wrap
msgid "special events"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4006
msgid ""
"Certain @dfn{special events} are handled at a very low level---as soon as "
"they are read.  The @code{read-event} function processes these events "
"itself, and never returns them.  Instead, it keeps waiting for the first "
"event that is not special and returns that one."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4014
msgid ""
"Special events do not echo, they are never grouped into key sequences, and "
"they never appear in the value of @code{last-command-event} or "
"@code{(this-command-keys)}.  They do not discard a numeric argument, they "
"cannot be unread with @code{unread-command-events}, they may not appear in a "
"keyboard macro, and they are not recorded in a keyboard macro while you are "
"defining one."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4018
msgid ""
"Special events do, however, appear in @code{last-input-event} immediately "
"after they are read, and this is the way for the event's definition to find "
"the actual event."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4025
msgid ""
"The events types @code{iconify-frame}, @code{make-frame-visible}, "
"@code{delete-frame}, @code{drag-n-drop}, @code{language-change}, and user "
"signals like @code{sigusr1} are normally handled in this way.  The keymap "
"which defines how to handle special events---and which events are "
"special---is in the variable @code{special-event-map} (@pxref{Controlling "
"Active Maps})."
msgstr ""

#. type: section
#: original_texis/commands.texi:4027
#, no-wrap
msgid "Waiting for Elapsed Time or Input"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:4028
#, no-wrap
msgid "waiting"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4036
msgid ""
"The wait functions are designed to wait for a certain amount of time to pass "
"or until there is input.  For example, you may wish to pause in the middle "
"of a computation to allow the user time to view the display.  @code{sit-for} "
"pauses and updates the screen, and returns immediately if input comes in, "
"while @code{sleep-for} pauses without updating the screen."
msgstr ""

#. type: defun
#: original_texis/commands.texi:4037
#, no-wrap
msgid "sit-for seconds &optional nodisp"
msgstr ""

#. type: defun
#: original_texis/commands.texi:4044
msgid ""
"This function performs redisplay (provided there is no pending input from "
"the user), then waits @var{seconds} seconds, or until input is available.  "
"The usual purpose of @code{sit-for} is to give the user time to read text "
"that you display.  The value is @code{t} if @code{sit-for} waited the full "
"time with no input arriving (@pxref{Event Input Misc}).  Otherwise, the "
"value is @code{nil}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:4049
msgid ""
"The argument @var{seconds} need not be an integer.  If it is floating point, "
"@code{sit-for} waits for a fractional number of seconds.  Some systems "
"support only a whole number of seconds; on these systems, @var{seconds} is "
"rounded down."
msgstr ""

#. type: defun
#: original_texis/commands.texi:4053
msgid ""
"The expression @code{(sit-for 0)} is equivalent to @code{(redisplay)}, i.e., "
"it requests a redisplay, without any delay, if there is no pending input.  "
"@xref{Forcing Redisplay}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:4057
msgid ""
"If @var{nodisp} is non-@code{nil}, then @code{sit-for} does not redisplay, "
"but it still returns as soon as input is available (or when the timeout "
"elapses)."
msgstr ""

#. type: defun
#: original_texis/commands.texi:4061
msgid ""
"In batch mode (@pxref{Batch Mode}), @code{sit-for} cannot be interrupted, "
"even by input from the standard input descriptor.  It is thus equivalent to "
"@code{sleep-for}, which is described below."
msgstr ""

#. type: defun
#: original_texis/commands.texi:4063
#, no-wrap
msgid "sleep-for seconds"
msgstr ""

#. type: defun
#: original_texis/commands.texi:4067
msgid ""
"This function simply pauses for @var{seconds} seconds without updating the "
"display.  It pays no attention to available input.  It returns @code{nil}."
msgstr ""

#. type: defun
#: original_texis/commands.texi:4070
msgid ""
"The argument @var{seconds} need not be an integer.  If it is floating point, "
"@code{sleep-for} waits for a fractional number of seconds."
msgstr ""

#. type: defun
#: original_texis/commands.texi:4074
msgid ""
"It is also possible to call @code{sleep-for} with two arguments, as "
"@code{(sleep-for @var{seconds} @var{millisec})}, but that is considered "
"obsolete and will be removed in the future."
msgstr ""

#. type: defun
#: original_texis/commands.texi:4076
msgid "Use @code{sleep-for} when you wish to guarantee a delay."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4079
msgid "@xref{Time of Day}, for functions to get the current time."
msgstr ""

#. type: kbd{#1}
#: original_texis/commands.texi:4082
#, no-wrap
msgid "C-g"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:4083
#, no-wrap
msgid "quitting"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:4084
#, no-wrap
msgid "interrupt Lisp functions"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4089
msgid ""
"Typing @kbd{C-g} while a Lisp function is running causes Emacs to @dfn{quit} "
"whatever it is doing.  This means that control returns to the innermost "
"active command loop."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4097
msgid ""
"Typing @kbd{C-g} while the command loop is waiting for keyboard input does "
"not cause a quit; it acts as an ordinary input character.  In the simplest "
"case, you cannot tell the difference, because @kbd{C-g} normally runs the "
"command @code{keyboard-quit}, whose effect is to quit.  However, when "
"@kbd{C-g} follows a prefix key, they combine to form an undefined key.  The "
"effect is to cancel the prefix key as well as any prefix argument."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4107
msgid ""
"In the minibuffer, @kbd{C-g} has a different definition: it aborts out of "
"the minibuffer.  This means, in effect, that it exits the minibuffer and "
"then quits.  (Simply quitting would return to the command loop @emph{within} "
"the minibuffer.)  The reason why @kbd{C-g} does not quit directly when the "
"command reader is reading input is so that its meaning can be redefined in "
"the minibuffer in this way.  @kbd{C-g} following a prefix key is not "
"redefined in the minibuffer, and it has its normal effect of canceling the "
"prefix key and prefix argument.  This too would not be possible if @kbd{C-g} "
"always quit directly."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4112
msgid ""
"When @kbd{C-g} does directly quit, it does so by setting the variable "
"@code{quit-flag} to @code{t}.  Emacs checks this variable at appropriate "
"times and quits if it is not @code{nil}.  Setting @code{quit-flag} "
"non-@code{nil} in any way thus causes a quit."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4118
msgid ""
"At the level of C code, quitting cannot happen just anywhere; only at the "
"special places that check @code{quit-flag}.  The reason for this is that "
"quitting at other places might leave an inconsistency in Emacs's internal "
"state.  Because quitting is delayed until a safe place, quitting cannot make "
"Emacs crash."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4126
msgid ""
"Certain functions such as @code{read-key-sequence} or "
"@code{read-quoted-char} prevent quitting entirely even though they wait for "
"input.  Instead of quitting, @kbd{C-g} serves as the requested input.  In "
"the case of @code{read-key-sequence}, this serves to bring about the special "
"behavior of @kbd{C-g} in the command loop.  In the case of "
"@code{read-quoted-char}, this is so that @kbd{C-q} can be used to quote a "
"@kbd{C-g}."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:4127
#, no-wrap
msgid "preventing quitting"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4137
msgid ""
"You can prevent quitting for a portion of a Lisp function by binding the "
"variable @code{inhibit-quit} to a non-@code{nil} value.  Then, although "
"@kbd{C-g} still sets @code{quit-flag} to @code{t} as usual, the usual result "
"of this---a quit---is prevented.  Eventually, @code{inhibit-quit} will "
"become @code{nil} again, such as when its binding is unwound at the end of a "
"@code{let} form.  At that time, if @code{quit-flag} is still non-@code{nil}, "
"the requested quit happens immediately.  This behavior is ideal when you "
"wish to make sure that quitting does not happen within a critical section of "
"the program."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:4138
#, no-wrap
msgid "@code{read-quoted-char} quitting"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4146
msgid ""
"In some functions (such as @code{read-quoted-char}), @kbd{C-g} is handled in "
"a special way that does not involve quitting.  This is done by reading the "
"input with @code{inhibit-quit} bound to @code{t}, and setting "
"@code{quit-flag} to @code{nil} before @code{inhibit-quit} becomes @code{nil} "
"again.  This excerpt from the definition of @code{read-quoted-char} shows "
"how this is done; it also shows that normal quitting is permitted after the "
"first character of input."
msgstr ""

#. type: example
#: original_texis/commands.texi:4159
#, no-wrap
msgid ""
"(defun read-quoted-char (&optional prompt)\n"
"  \"@dots{}@var{documentation}@dots{}\"\n"
"  (let ((message-log-max nil) done (first t) (code 0) char)\n"
"    (while (not done)\n"
"      (let ((inhibit-quit first)\n"
"            @dots{})\n"
"        (and prompt (message \"%s-\" prompt))\n"
"        (setq char (read-event))\n"
"        (if inhibit-quit (setq quit-flag nil)))\n"
"      @r{@dots{}set the variable @code{code}@dots{}})\n"
"    code))\n"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4161
#, no-wrap
msgid "quit-flag"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4165
msgid ""
"If this variable is non-@code{nil}, then Emacs quits immediately, unless "
"@code{inhibit-quit} is non-@code{nil}.  Typing @kbd{C-g} ordinarily sets "
"@code{quit-flag} non-@code{nil}, regardless of @code{inhibit-quit}."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4167
#, no-wrap
msgid "inhibit-quit"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4171
msgid ""
"This variable determines whether Emacs should quit when @code{quit-flag} is "
"set to a value other than @code{nil}.  If @code{inhibit-quit} is "
"non-@code{nil}, then @code{quit-flag} has no special effect."
msgstr ""

#. type: defmac
#: original_texis/commands.texi:4173
#, no-wrap
msgid "with-local-quit body@dots{}"
msgstr ""

#. type: defmac
#: original_texis/commands.texi:4179
msgid ""
"This macro executes @var{body} forms in sequence, but allows quitting, at "
"least locally, within @var{body} even if @code{inhibit-quit} was "
"non-@code{nil} outside this construct.  It returns the value of the last "
"form in @var{body}, unless exited by quitting, in which case it returns "
"@code{nil}."
msgstr ""

#. type: defmac
#: original_texis/commands.texi:4190
msgid ""
"If @code{inhibit-quit} is @code{nil} on entry to @code{with-local-quit}, it "
"only executes the @var{body}, and setting @code{quit-flag} causes a normal "
"quit.  However, if @code{inhibit-quit} is non-@code{nil} so that ordinary "
"quitting is delayed, a non-@code{nil} @code{quit-flag} triggers a special "
"kind of local quit.  This ends the execution of @var{body} and exits the "
"@code{with-local-quit} body with @code{quit-flag} still non-@code{nil}, so "
"that another (ordinary) quit will happen as soon as that is allowed.  If "
"@code{quit-flag} is already non-@code{nil} at the beginning of @var{body}, "
"the local quit happens immediately and the body doesn't execute at all."
msgstr ""

#. type: defmac
#: original_texis/commands.texi:4195
msgid ""
"This macro is mainly useful in functions that can be called from timers, "
"process filters, process sentinels, @code{pre-command-hook}, "
"@code{post-command-hook}, and other places where @code{inhibit-quit} is "
"normally bound to @code{t}."
msgstr ""

#. type: deffn
#: original_texis/commands.texi:4197
#, no-wrap
msgid "Command keyboard-quit"
msgstr ""

#. type: deffn
#: original_texis/commands.texi:4201
msgid ""
"This function signals the @code{quit} condition with @code{(signal 'quit "
"nil)}.  This is the same thing that quitting does.  (See @code{signal} in "
"@ref{Errors}.)"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4208
msgid ""
"To quit without aborting a keyboard macro definition or execution, you can "
"signal the @code{minibuffer-quit} condition.  This has almost the same "
"effect as the @code{quit} condition except that the error handling in the "
"command loop handles it without exiting keyboard macro definition or "
"execution."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4211
msgid ""
"You can specify a character other than @kbd{C-g} to use for quitting.  See "
"the function @code{set-input-mode} in @ref{Input Modes}."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:4214
#, no-wrap
msgid "prefix argument"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:4215
#, no-wrap
msgid "raw prefix argument"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:4216
#, no-wrap
msgid "numeric prefix argument"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4223
msgid ""
"Most Emacs commands can use a @dfn{prefix argument}, a number specified "
"before the command itself.  (Don't confuse prefix arguments with prefix "
"keys.)  The prefix argument is at all times represented by a value, which "
"may be @code{nil}, meaning there is currently no prefix argument.  Each "
"command may use the prefix argument or ignore it."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4228
msgid ""
"There are two representations of the prefix argument: @dfn{raw} and "
"@dfn{numeric}.  The editor command loop uses the raw representation "
"internally, and so do the Lisp variables that store the information, but "
"commands can request either representation."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4230
msgid "Here are the possible values of a raw prefix argument:"
msgstr ""

#. type: itemize
#: original_texis/commands.texi:4236
msgid ""
"@code{nil}, meaning there is no prefix argument.  Its numeric value is 1, "
"but numerous commands make a distinction between @code{nil} and the integer "
"1."
msgstr ""

#. type: itemize
#: original_texis/commands.texi:4239
msgid "An integer, which stands for itself."
msgstr ""

#. type: itemize
#: original_texis/commands.texi:4245
msgid ""
"A list of one element, which is an integer.  This form of prefix argument "
"results from one or a succession of @kbd{C-u}s with no digits.  The numeric "
"value is the integer in the list, but some commands make a distinction "
"between such a list and an integer alone."
msgstr ""

#. type: itemize
#: original_texis/commands.texi:4251
msgid ""
"The symbol @code{-}.  This indicates that @kbd{M--} or @kbd{C-u -} was "
"typed, without following digits.  The equivalent numeric value is @minus{}1, "
"but some commands make a distinction between the integer @minus{}1 and the "
"symbol @code{-}."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4255
msgid ""
"We illustrate these possibilities by calling the following function with "
"various prefixes:"
msgstr ""

#. type: group
#: original_texis/commands.texi:4262
#, no-wrap
msgid ""
"(defun display-prefix (arg)\n"
"  \"Display the value of the raw prefix arg.\"\n"
"  (interactive \"P\")\n"
"  (message \"%s\" arg))\n"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4268
msgid ""
"Here are the results of calling @code{display-prefix} with various raw "
"prefix arguments:"
msgstr ""

#. type: example
#: original_texis/commands.texi:4271
#, no-wrap
msgid ""
"        M-x display-prefix  @print{} nil\n"
"\n"
msgstr ""

#. type: example
#: original_texis/commands.texi:4273
#, no-wrap
msgid ""
"C-u     M-x display-prefix  @print{} (4)\n"
"\n"
msgstr ""

#. type: example
#: original_texis/commands.texi:4275
#, no-wrap
msgid ""
"C-u C-u M-x display-prefix  @print{} (16)\n"
"\n"
msgstr ""

#. type: example
#: original_texis/commands.texi:4277
#, no-wrap
msgid ""
"C-u 3   M-x display-prefix  @print{} 3\n"
"\n"
msgstr ""

#. type: example
#: original_texis/commands.texi:4279
#, no-wrap
msgid ""
"M-3     M-x display-prefix  @print{} 3      ; @r{(Same as @code{C-u 3}.)}\n"
"\n"
msgstr ""

#. type: example
#: original_texis/commands.texi:4281
#, no-wrap
msgid ""
"C-u -   M-x display-prefix  @print{} -\n"
"\n"
msgstr ""

#. type: example
#: original_texis/commands.texi:4283
#, no-wrap
msgid ""
"M--     M-x display-prefix  @print{} -      ; @r{(Same as @code{C-u -}.)}\n"
"\n"
msgstr ""

#. type: example
#: original_texis/commands.texi:4285
#, no-wrap
msgid ""
"C-u - 7 M-x display-prefix  @print{} -7\n"
"\n"
msgstr ""

#. type: example
#: original_texis/commands.texi:4287
#, no-wrap
msgid "M-- 7   M-x display-prefix  @print{} -7     ; @r{(Same as @code{C-u -7}.)}\n"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4296
msgid ""
"Emacs uses two variables to store the prefix argument: @code{prefix-arg} and "
"@code{current-prefix-arg}.  Commands such as @code{universal-argument} that "
"set up prefix arguments for other commands store them in @code{prefix-arg}.  "
"In contrast, @code{current-prefix-arg} conveys the prefix argument to the "
"current command, so setting it has no effect on the prefix arguments for "
"future commands."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4302
msgid ""
"Normally, commands specify which representation to use for the prefix "
"argument, either numeric or raw, in the @code{interactive} specification.  "
"(@xref{Using Interactive}.)  Alternatively, functions may look at the value "
"of the prefix argument directly in the variable @code{current-prefix-arg}, "
"but this is less clean."
msgstr ""

#. type: defun
#: original_texis/commands.texi:4303
#, no-wrap
msgid "prefix-numeric-value arg"
msgstr ""

#. type: defun
#: original_texis/commands.texi:4310
msgid ""
"This function returns the numeric meaning of a valid raw prefix argument "
"value, @var{arg}.  The argument may be a symbol, a number, or a list.  If it "
"is @code{nil}, the value 1 is returned; if it is @code{-}, the value "
"@minus{}1 is returned; if it is a number, that number is returned; if it is "
"a list, the @sc{car} of that list (which should be a number) is returned."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4312
#, no-wrap
msgid "current-prefix-arg"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4316
msgid ""
"This variable holds the raw prefix argument for the @emph{current} command.  "
"Commands may examine it directly, but the usual method for accessing it is "
"with @code{(interactive \"P\")}."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4318
#, no-wrap
msgid "prefix-arg"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4323
msgid ""
"The value of this variable is the raw prefix argument for the @emph{next} "
"editing command.  Commands such as @code{universal-argument} that specify "
"prefix arguments for the following command work by setting this variable."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4325
#, no-wrap
msgid "last-prefix-arg"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4327
msgid "The raw prefix argument value used by the previous command."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4331
msgid ""
"The following commands exist to set up prefix arguments for the following "
"command.  Do not call them for any other reason."
msgstr ""

#. type: deffn
#: original_texis/commands.texi:4332
#, no-wrap
msgid "Command universal-argument"
msgstr ""

#. type: deffn
#: original_texis/commands.texi:4336
msgid ""
"This command reads input and specifies a prefix argument for the following "
"command.  Don't call this command yourself unless you know what you are "
"doing."
msgstr ""

#. type: deffn
#: original_texis/commands.texi:4338
#, no-wrap
msgid "Command digit-argument arg"
msgstr ""

#. type: deffn
#: original_texis/commands.texi:4343
msgid ""
"This command adds to the prefix argument for the following command.  The "
"argument @var{arg} is the raw prefix argument as it was before this command; "
"it is used to compute the updated prefix argument.  Don't call this command "
"yourself unless you know what you are doing."
msgstr ""

#. type: deffn
#: original_texis/commands.texi:4345
#, no-wrap
msgid "Command negative-argument arg"
msgstr ""

#. type: deffn
#: original_texis/commands.texi:4350
msgid ""
"This command adds to the numeric argument for the next command.  The "
"argument @var{arg} is the raw prefix argument as it was before this command; "
"its value is negated to form the new prefix argument.  Don't call this "
"command yourself unless you know what you are doing."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:4354
#, no-wrap
msgid "recursive command loop"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:4355
#, no-wrap
msgid "recursive editing level"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:4356
#, no-wrap
msgid "command loop, recursive"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4365
msgid ""
"The Emacs command loop is entered automatically when Emacs starts up.  This "
"top-level invocation of the command loop never exits; it keeps running as "
"long as Emacs does.  Lisp programs can also invoke the command loop.  Since "
"this makes more than one activation of the command loop, we call it "
"@dfn{recursive editing}.  A recursive editing level has the effect of "
"suspending whatever command invoked it and permitting the user to do "
"arbitrary editing before resuming that command."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4372
msgid ""
"The commands available during recursive editing are the same ones available "
"in the top-level editing loop and defined in the keymaps.  Only a few "
"special commands exit the recursive editing level; the others return to the "
"recursive editing level when they finish.  (The special commands for exiting "
"are always available, but they do nothing when recursive editing is not in "
"progress.)"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4376
msgid ""
"All command loops, including recursive ones, set up all-purpose error "
"handlers so that an error in a command run from the command loop will not "
"exit the loop."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:4377
#, no-wrap
msgid "minibuffer input"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4384
msgid ""
"Minibuffer input is a special kind of recursive editing.  It has a few "
"special wrinkles, such as enabling display of the minibuffer and the "
"minibuffer window, but fewer than you might suppose.  Certain keys behave "
"differently in the minibuffer, but that is only because of the minibuffer's "
"local map; if you switch windows, you get the usual Emacs commands."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:4385
#, no-wrap
msgid "@code{throw} example"
msgstr ""

#. type: kindex
#: original_texis/commands.texi:4386
#, no-wrap
msgid "exit"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:4387
#, no-wrap
msgid "exit recursive editing"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:4388
#, no-wrap
msgid "aborting"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4403
msgid ""
"To invoke a recursive editing level, call the function "
"@code{recursive-edit}.  This function contains the command loop; it also "
"contains a call to @code{catch} with tag @code{exit}, which makes it "
"possible to exit the recursive editing level by throwing to @code{exit} "
"(@pxref{Catch and Throw}).  Throwing a @code{t} value causes "
"@code{recursive-edit} to quit, so that control returns to the command loop "
"one level up.  This is called @dfn{aborting}, and is done by @kbd{C-]} "
"(@code{abort-recursive-edit}).  Similarly, you can throw a string value to "
"make @code{recursive-edit} signal an error, printing this string as the "
"message.  If you throw a function, @code{recursive-edit} will call it "
"without arguments before returning.  Throwing any other value, will make "
"@code{recursive-edit} return normally to the function that called it.  The "
"command @kbd{C-M-c} (@code{exit-recursive-edit}) does this."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4413
msgid ""
"Most applications should not use recursive editing, except as part of using "
"the minibuffer.  Usually it is more convenient for the user if you change "
"the major mode of the current buffer temporarily to a special major mode, "
"which should have a command to go back to the previous mode.  (The @kbd{e} "
"command in Rmail uses this technique.)  Or, if you wish to give the user "
"different text to edit recursively, create and select a new buffer in a "
"special mode.  In this mode, define a command to complete the processing and "
"go back to the previous buffer.  (The @kbd{m} command in Rmail does this.)"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4418
msgid ""
"Recursive edits are useful in debugging.  You can insert a call to "
"@code{debug} into a function definition as a sort of breakpoint, so that you "
"can look around when the function gets there.  @code{debug} invokes a "
"recursive edit but also provides the other features of the debugger."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4421
msgid ""
"Recursive editing levels are also used when you type @kbd{C-r} in "
"@code{query-replace} or use @kbd{C-x q} (@code{kbd-macro-query})."
msgstr ""

#. type: deffn
#: original_texis/commands.texi:4422
#, no-wrap
msgid "Command recursive-edit"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:4423
#, no-wrap
msgid "suspend evaluation"
msgstr ""

#. type: deffn
#: original_texis/commands.texi:4428
msgid ""
"This function invokes the editor command loop.  It is called automatically "
"by the initialization of Emacs, to let the user begin editing.  When called "
"from a Lisp program, it enters a recursive editing level."
msgstr ""

#. type: deffn
#: original_texis/commands.texi:4433
msgid ""
"If the current buffer is not the same as the selected window's buffer, "
"@code{recursive-edit} saves and restores the current buffer.  Otherwise, if "
"you switch buffers, the buffer you switched to is current after "
"@code{recursive-edit} returns."
msgstr ""

#. type: deffn
#: original_texis/commands.texi:4438
msgid ""
"In the following example, the function @code{simple-rec} first advances "
"point one word, then enters a recursive edit, printing out a message in the "
"echo area.  The user can then do any editing desired, and then type "
"@kbd{C-M-c} to exit and continue executing @code{simple-rec}."
msgstr ""

#. type: example
#: original_texis/commands.texi:4448
#, no-wrap
msgid ""
"(defun simple-rec ()\n"
"  (forward-word 1)\n"
"  (message \"Recursive edit in progress\")\n"
"  (recursive-edit)\n"
"  (forward-word 1))\n"
"     @result{} simple-rec\n"
"(simple-rec)\n"
"     @result{} nil\n"
msgstr ""

#. type: deffn
#: original_texis/commands.texi:4451
#, no-wrap
msgid "Command exit-recursive-edit"
msgstr ""

#. type: deffn
#: original_texis/commands.texi:4455
msgid ""
"This function exits from the innermost recursive edit (including minibuffer "
"input).  Its definition is effectively @code{(throw 'exit nil)}."
msgstr ""

#. type: deffn
#: original_texis/commands.texi:4457
#, no-wrap
msgid "Command abort-recursive-edit"
msgstr ""

#. type: deffn
#: original_texis/commands.texi:4462
msgid ""
"This function aborts the command that requested the innermost recursive edit "
"(including minibuffer input), by signaling @code{quit} after exiting the "
"recursive edit.  Its definition is effectively @code{(throw 'exit t)}.  "
"@xref{Quitting}."
msgstr ""

#. type: deffn
#: original_texis/commands.texi:4464
#, no-wrap
msgid "Command top-level"
msgstr ""

#. type: deffn
#: original_texis/commands.texi:4468
msgid ""
"This function exits all recursive editing levels; it does not return a "
"value, as it jumps completely out of any computation directly back to the "
"main command loop."
msgstr ""

#. type: defun
#: original_texis/commands.texi:4470
#, no-wrap
msgid "recursion-depth"
msgstr ""

#. type: defun
#: original_texis/commands.texi:4473
msgid ""
"This function returns the current depth of recursive edits.  When no "
"recursive edit is active, it returns 0."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:4477
#, no-wrap
msgid "disabled command"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4483
msgid ""
"@dfn{Disabling a command} marks the command as requiring user confirmation "
"before it can be executed.  Disabling is used for commands which might be "
"confusing to beginning users, to prevent them from using the commands by "
"accident."
msgstr ""

#. type: kindex
#: original_texis/commands.texi:4484
#, no-wrap
msgid "disabled"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4489
msgid ""
"The low-level mechanism for disabling a command is to put a non-@code{nil} "
"@code{disabled} property on the Lisp symbol for the command.  These "
"properties are normally set up by the user's init file (@pxref{Init File}) "
"with Lisp expressions such as this:"
msgstr ""

#. type: example
#: original_texis/commands.texi:4492
#, no-wrap
msgid "(put 'upcase-region 'disabled t)\n"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4497
msgid ""
"For a few commands, these properties are present by default (you can remove "
"them in your init file if you wish)."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4500
msgid ""
"If the value of the @code{disabled} property is a string, the message saying "
"the command is disabled includes that string.  For example:"
msgstr ""

#. type: example
#: original_texis/commands.texi:4504
#, no-wrap
msgid ""
"(put 'delete-region 'disabled\n"
"     \"Text deleted this way cannot be yanked back!\\n\")\n"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4510
msgid ""
"@xref{Disabling,,, emacs, The GNU Emacs Manual}, for the details on what "
"happens when a disabled command is invoked interactively.  Disabling a "
"command has no effect on calling it as a function from Lisp programs."
msgstr ""

#. type: findex
#: original_texis/commands.texi:4511
#, no-wrap
msgid "command-query"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4519
msgid ""
"The value of the @code{disabled} property can also be a list where the first "
"element is the symbol @code{query}.  In that case, the user will be queried "
"whether to execute the command.  The second element in the list should be "
"@code{nil} or non-@code{nil} to say whether to use @code{y-or-n-p} or "
"@code{yes-or-no-p}, respectively, and the third element is the question to "
"use.  The @code{command-query} convenience function should be used to enable "
"querying for a command."
msgstr ""

#. type: deffn
#: original_texis/commands.texi:4520
#, no-wrap
msgid "Command enable-command command"
msgstr ""

#. type: deffn
#: original_texis/commands.texi:4524
msgid ""
"Allow @var{command} (a symbol) to be executed without special confirmation "
"from now on, and alter the user's init file (@pxref{Init File}) so that this "
"will apply to future sessions."
msgstr ""

#. type: deffn
#: original_texis/commands.texi:4526
#, no-wrap
msgid "Command disable-command command"
msgstr ""

#. type: deffn
#: original_texis/commands.texi:4529
msgid ""
"Require special confirmation to execute @var{command} from now on, and alter "
"the user's init file so that this will apply to future sessions."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4531
#, no-wrap
msgid "disabled-command-function"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4537
msgid ""
"The value of this variable should be a function.  When the user invokes a "
"disabled command interactively, this function is called instead of the "
"disabled command.  It can use @code{this-command-keys} to determine what the "
"user typed to run the command, and thus find the command itself."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4540
msgid ""
"The value may also be @code{nil}.  Then all commands work normally, even "
"disabled ones."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4543
msgid "By default, the value is a function that asks the user whether to proceed."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:4547
#, no-wrap
msgid "command history"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:4548
#, no-wrap
msgid "complex command"
msgstr ""

#. type: cindex
#: original_texis/commands.texi:4549
#, no-wrap
msgid "history of commands"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4559
msgid ""
"The command loop keeps a history of the complex commands that have been "
"executed, to make it convenient to repeat these commands.  A @dfn{complex "
"command} is one for which the interactive argument reading uses the "
"minibuffer.  This includes any @kbd{M-x} command, any @kbd{M-:} command, and "
"any command whose @code{interactive} specification reads an argument from "
"the minibuffer.  Explicit use of the minibuffer during the execution of the "
"command itself does not cause the command to be considered complex."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4560
#, no-wrap
msgid "command-history"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4566
msgid ""
"This variable's value is a list of recent complex commands, each represented "
"as a form to evaluate.  It continues to accumulate all complex commands for "
"the duration of the editing session, but when it reaches the maximum size "
"(@pxref{Minibuffer History}), the oldest elements are deleted as new ones "
"are added."
msgstr ""

#. type: group
#: original_texis/commands.texi:4574
#, no-wrap
msgid ""
"command-history\n"
"@result{} ((switch-to-buffer \"chistory.texi\")\n"
"    (describe-key \"^X^[\")\n"
"    (visit-tags-table \"~/emacs/src/\")\n"
"    (find-tag \"repeat-complex-command\"))\n"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4581
msgid ""
"This history list is actually a special case of minibuffer history "
"(@pxref{Minibuffer History}), with one special twist: the elements are "
"expressions rather than strings."
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4587
msgid ""
"There are a number of commands devoted to the editing and recall of previous "
"commands.  The commands @code{repeat-complex-command}, and "
"@code{list-command-history} are described in the user manual "
"(@pxref{Repetition,,, emacs, The GNU Emacs Manual}).  Within the minibuffer, "
"the usual minibuffer history commands are available."
msgstr ""

#. type: cindex
#: original_texis/commands.texi:4590
#, no-wrap
msgid "keyboard macros"
msgstr ""

#. type: Plain text
#: original_texis/commands.texi:4597
msgid ""
"A @dfn{keyboard macro} is a canned sequence of input events that can be "
"considered a command and made the definition of a key.  The Lisp "
"representation of a keyboard macro is a string or vector containing the "
"events.  Don't confuse keyboard macros with Lisp macros (@pxref{Macros})."
msgstr ""

#. type: defun
#: original_texis/commands.texi:4598
#, no-wrap
msgid "execute-kbd-macro kbdmacro &optional count loopfunc"
msgstr ""

#. type: defun
#: original_texis/commands.texi:4604
msgid ""
"This function executes @var{kbdmacro} as a sequence of events.  If "
"@var{kbdmacro} is a string or vector, then the events in it are executed "
"exactly as if they had been input by the user.  The sequence is @emph{not} "
"expected to be a single key sequence; normally a keyboard macro definition "
"consists of several key sequences concatenated."
msgstr ""

#. type: defun
#: original_texis/commands.texi:4609
msgid ""
"If @var{kbdmacro} is a symbol, then its function definition is used in place "
"of @var{kbdmacro}.  If that is another symbol, this process repeats.  "
"Eventually the result should be a string or vector.  If the result is not a "
"symbol, string, or vector, an error is signaled."
msgstr ""

#. type: defun
#: original_texis/commands.texi:4614
msgid ""
"The argument @var{count} is a repeat count; @var{kbdmacro} is executed that "
"many times.  If @var{count} is omitted or @code{nil}, @var{kbdmacro} is "
"executed once.  If it is 0, @var{kbdmacro} is executed over and over until "
"it encounters an error or a failing search."
msgstr ""

#. type: defun
#: original_texis/commands.texi:4618
msgid ""
"If @var{loopfunc} is non-@code{nil}, it is a function that is called, "
"without arguments, prior to each iteration of the macro.  If @var{loopfunc} "
"returns @code{nil}, then this stops execution of the macro."
msgstr ""

#. type: defun
#: original_texis/commands.texi:4620
msgid "@xref{Reading One Event}, for an example of using @code{execute-kbd-macro}."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4622
#, no-wrap
msgid "executing-kbd-macro"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4628
msgid ""
"This variable contains the string or vector that defines the keyboard macro "
"that is currently executing.  It is @code{nil} if no macro is currently "
"executing.  A command can test this variable so as to behave differently "
"when run from an executing macro.  Do not set this variable yourself."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4630
#, no-wrap
msgid "defining-kbd-macro"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4637
msgid ""
"This variable is non-@code{nil} if and only if a keyboard macro is being "
"defined.  A command can test this variable so as to behave differently while "
"a macro is being defined.  The value is @code{append} while appending to the "
"definition of an existing macro.  The commands @code{start-kbd-macro}, "
"@code{kmacro-start-macro} and @code{end-kbd-macro} set this variable---do "
"not set it yourself."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4640 original_texis/commands.texi:4648
msgid ""
"The variable is always local to the current terminal and cannot be "
"buffer-local.  @xref{Multiple Terminals}."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4642
#, no-wrap
msgid "last-kbd-macro"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4645
msgid ""
"This variable is the definition of the most recently defined keyboard "
"macro.  Its value is a string or vector, or @code{nil}."
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4650
#, no-wrap
msgid "kbd-macro-termination-hook"
msgstr ""

#. type: defvar
#: original_texis/commands.texi:4654
msgid ""
"This normal hook is run when a keyboard macro terminates, regardless of what "
"caused it to terminate (reaching the macro end or an error which ended the "
"macro prematurely)."
msgstr ""
