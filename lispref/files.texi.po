# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Emacs 26.1\n"
"POT-Creation-Date: 2020-03-08 09:41+0900\n"
"PO-Revision-Date: 2020-04-12 16:46+0900\n"
"Last-Translator: Ayanokoji Takesi <ayanokoji.takesi@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: original_texis/files.texi:6 original_texis/files.texi:7
#, no-wrap
msgid "Files"
msgstr "Files"

#. type: Plain text
#: original_texis/files.texi:14
msgid "This chapter describes the Emacs Lisp functions and variables to find, create, view, save, and otherwise work with files and directories.  A few other file-related functions are described in @ref{Buffers}, and those related to backups and auto-saving are described in @ref{Backups and Auto-Saving}."
msgstr "このチャプターでは検索、作成、閲覧、保存、その他ファイルとディレクトリーにたいして機能するEmacs Lispの関数と変数について説明します。その他のいくつかのファイルに関する関数については@ref{Buffers}、バックアップとauto-save(自動保存)に関する関数については@ref{Backups and Auto-Saving}で説明されています。"

#. type: Plain text
#: original_texis/files.texi:20
msgid "Many of the file functions take one or more arguments that are file names.  A file name is a string.  Most of these functions expand file name arguments using the function @code{expand-file-name}, so that @file{~} is handled correctly, as are relative file names (including @file{../}).  @xref{File Name Expansion}."
msgstr "ファイル関数の多くはファイル名であるような引数を1つ以上受け取ります。このファイル名は文字列です。これらの関数のほとんどは関数@code{expand-file-name}を使用してファイル名引数を展開するので、@file{~}は相対ファイル名(@file{../}を含む)として正しく処理されます。@ref{File Name Expansion}を参照してください。"

#. type: Plain text
#: original_texis/files.texi:28
msgid "In addition, certain @dfn{magic} file names are handled specially.  For example, when a remote file name is specified, Emacs accesses the file over the network via an appropriate protocol.  @xref{Remote Files,, Remote Files, emacs, The GNU Emacs Manual}.  This handling is done at a very low level, so you may assume that all the functions described in this chapter accept magic file names as file name arguments, except where noted.  @xref{Magic File Names}, for details."
msgstr "加えて特定の@dfn{magic}ファイル名は特別に扱われます。たとえばリモートファイル名が指定された際、Emacsは適切なプロトコルを通じてネットワーク越しにファイルにアクセスします。@ref{Remote Files,, Remote Files, emacs, The GNU Emacs Manual}を参照してください。この処理は非常に低レベルで行われるので、特に注記されたものを除いて、このチャプターで説明するすべての関数がファイル名引数としてmagicファイル名を受け入れると想定しても良いでしょう。詳細は@xref{Magic File Names}を参照してください。"

#. type: Plain text
#: original_texis/files.texi:34
msgid "When file I/O functions signal Lisp errors, they usually use the condition @code{file-error} (@pxref{Handling Errors}).  The error message is in most cases obtained from the operating system, according to locale @code{system-messages-locale}, and decoded using coding system @code{locale-coding-system} (@pxref{Locales})."
msgstr "ファイルI/O関数がLispエラーをシグナルする際、通常はコンディション@code{file-error}を使用します(@ref{Handling Errors}を参照)。ほとんどの場合にはオペレーティングシステムからロケール@code{system-messages-locale}に応じたエラーメッセージが取得されて、コーディングシステム@code{locale-coding-system}を使用してデコードされます(@ref{Locales}を参照)。"

#. type: section
#: original_texis/files.texi:50 original_texis/files.texi:52
#: original_texis/files.texi:53
#, no-wrap
msgid "Visiting Files"
msgstr "Visiting Files"

#. type: menuentry
#: original_texis/files.texi:50
msgid "Reading files into Emacs buffers for editing."
msgstr "編集のためにEmacsバッファーにファイルを読み込む。"

#. type: section
#: original_texis/files.texi:50 original_texis/files.texi:327
#: original_texis/files.texi:328
#, no-wrap
msgid "Saving Buffers"
msgstr "Saving Buffers"

#. type: menuentry
#: original_texis/files.texi:50
msgid "Writing changed buffers back into files."
msgstr "変更されたバッファーをファイルに書き戻す。"

#. type: section
#: original_texis/files.texi:50 original_texis/files.texi:531
#: original_texis/files.texi:532
#, no-wrap
msgid "Reading from Files"
msgstr "Reading from Files"

#. type: menuentry
#: original_texis/files.texi:50
msgid "Reading files into buffers without visiting."
msgstr "ファイルをvisitせずにバッファーに読み込む。"

#. type: section
#: original_texis/files.texi:50 original_texis/files.texi:594
#: original_texis/files.texi:595
#, no-wrap
msgid "Writing to Files"
msgstr "Writing to Files"

#. type: menuentry
#: original_texis/files.texi:50
msgid "Writing new files from parts of buffers."
msgstr "バッファーの一部から新たなファイルに書き込む。"

#. type: section
#: original_texis/files.texi:50 original_texis/files.texi:711
#: original_texis/files.texi:712
#, no-wrap
msgid "File Locks"
msgstr "File Locks"

#. type: menuentry
#: original_texis/files.texi:50
msgid "Locking and unlocking files, to prevent simultaneous editing by two people."
msgstr "複数名による同時編集を防ぐためにファイルをlockまたはunlockする。"

#. type: section
#: original_texis/files.texi:50 original_texis/files.texi:802
#: original_texis/files.texi:803
#, no-wrap
msgid "Information about Files"
msgstr "Information about Files"

#. type: menuentry
#: original_texis/files.texi:50
msgid "Testing existence, accessibility, size of files."
msgstr "ファイルの存在、アクセス権、サイズのテスト。"

#. type: node
#: original_texis/files.texi:50 original_texis/files.texi:1569
#, no-wrap
msgid "Changing Files"
msgstr "Changing Files"

#. type: menuentry
#: original_texis/files.texi:50
msgid "Renaming files, changing permissions, etc."
msgstr "ファイル名のリネームやパーミッションの変更など。"

#. type: node
#: original_texis/files.texi:50 original_texis/files.texi:1931
#, no-wrap
msgid "Files and Storage"
msgstr "Files and Storage"

#. type: menuentry
#: original_texis/files.texi:50
msgid "Surviving power and media failures"
msgstr "電源喪失とメディアエラーへの対処"

#. type: section
#: original_texis/files.texi:50 original_texis/files.texi:1953
#: original_texis/files.texi:1954
#, no-wrap
msgid "File Names"
msgstr "File Names"

#. type: menuentry
#: original_texis/files.texi:50
msgid "Decomposing and expanding file names."
msgstr "ファイル名の分解と展開。"

#. type: section
#: original_texis/files.texi:50 original_texis/files.texi:2854
#: original_texis/files.texi:2855
#, no-wrap
msgid "Contents of Directories"
msgstr "Contents of Directories"

#. type: menuentry
#: original_texis/files.texi:50
msgid "Getting a list of the files in a directory."
msgstr "ディレクトリーないのファイルリストの取得。"

#. type: node
#: original_texis/files.texi:50 original_texis/files.texi:2981
#, no-wrap
msgid "Create/Delete Dirs"
msgstr "Create/Delete Dirs"

#. type: menuentry
#: original_texis/files.texi:50
msgid "Creating and Deleting Directories."
msgstr "ディレクトリーの作成と削除。"

#. type: node
#: original_texis/files.texi:50 original_texis/files.texi:3047
#, no-wrap
msgid "Magic File Names"
msgstr "Magic File Names"

#. type: menuentry
#: original_texis/files.texi:50
msgid "Special handling for certain file names."
msgstr "特定のファイル名にたいする特別な処理。"

#. type: node
#: original_texis/files.texi:50 original_texis/files.texi:3409
#, no-wrap
msgid "Format Conversion"
msgstr "Format Conversion"

#. type: menuentry
#: original_texis/files.texi:50
msgid "Conversion to and from various file formats."
msgstr "さまざまなファイルフォーマットへ/からの変換。"

#. type: cindex
#: original_texis/files.texi:54
#, no-wrap
msgid "finding files"
msgstr "finding files"

#. type: cindex
#: original_texis/files.texi:55
#, no-wrap
msgid "visiting files"
msgstr "visiting files"

#. type: Plain text
#: original_texis/files.texi:60
msgid "Visiting a file means reading a file into a buffer.  Once this is done, we say that the buffer is @dfn{visiting} that file, and call the file @dfn{the visited file} of the buffer."
msgstr "ファイルのvisitとはファイルをバッファーに読み込むことを意味します。一度これを行うと、わたしたちはバッファーがファイルを@dfn{visit(訪問)}していると言い、ファイルのことをバッファーのvisitされたファイルと呼んでいます。"

#. type: Plain text
#: original_texis/files.texi:70
msgid "A file and a buffer are two different things.  A file is information recorded permanently in the computer (unless you delete it).  A buffer, on the other hand, is information inside of Emacs that will vanish at the end of the editing session (or when you kill the buffer).  When a buffer is visiting a file, it contains information copied from the file.  The copy in the buffer is what you modify with editing commands.  Changes to the buffer do not change the file; to make the changes permanent, you must @dfn{save} the buffer, which means copying the altered buffer contents back into the file."
msgstr "ファイルとバッファーは2つの異なる事柄です。ファイルとは、(削除しない限り)コンピューター内に永続的に記録された情報です。一方バッファーとは編集セッションの終了(またはバッファーのkill)とともに消滅する、Emacs内部の情報です。あるバッファーがファイルをvistしているとき、バッファーにはファイルからコピーされた情報が含まれます。編集コマンドにより変更されるのはバッファー内のコピーです。バッファーへの変更によってファイルは変更されません。その変更を永続化するためにはバッファーを@dfn{保存(save)}しなければなりません。これは変更されたバッファーのコンテンツをファイルにコピーして書き戻すことを意味します。"

#. type: Plain text
#: original_texis/files.texi:77
msgid "Despite the distinction between files and buffers, people often refer to a file when they mean a buffer and vice-versa.  Indeed, we say, ``I am editing a file'', rather than, ``I am editing a buffer that I will soon save as a file of the same name''.  Humans do not usually need to make the distinction explicit.  When dealing with a computer program, however, it is good to keep the distinction in mind."
msgstr "ファイルとバッファーは異なるにも関わらず、人はバッファーという意味でファイルを呼んだり、その逆を行うことが多々あります。実際のところ、``わたしはまもなく同じ名前のファイルに保存するためのバッファーを編集している''ではなく、``わたしはファイルを編集している''と言います。人間がこの違いを明確にする必要は通常はありません。しかしコンピュータープログラムで対処する際には、この違いを心に留めておくのが良いでしょう。"

#. type: node
#: original_texis/files.texi:81 original_texis/files.texi:83
#, no-wrap
msgid "Visiting Functions"
msgstr "Visiting Functions"

#. type: menuentry
#: original_texis/files.texi:81
msgid "The usual interface functions for visiting."
msgstr "visit用の通常のインターフェイス関数。"

#. type: subsection
#: original_texis/files.texi:81 original_texis/files.texi:253
#: original_texis/files.texi:254
#, no-wrap
msgid "Subroutines of Visiting"
msgstr "Subroutines of Visiting"

#. type: menuentry
#: original_texis/files.texi:81
msgid "Lower-level subroutines that they use."
msgstr "通常のvisit関数が使用する低レベルのサブルーチン。"

#. type: subsection
#: original_texis/files.texi:84
#, no-wrap
msgid "Functions for Visiting Files"
msgstr "Functions for Visiting Files"

#. type: cindex
#: original_texis/files.texi:85
#, no-wrap
msgid "visiting files, functions for"
msgstr "visiting files, functions for"

#. type: cindex
#: original_texis/files.texi:86
#, no-wrap
msgid "how to visit files"
msgstr "how to visit files"

#. type: Plain text
#: original_texis/files.texi:93
msgid "This section describes the functions normally used to visit files.  For historical reasons, these functions have names starting with @samp{find-} rather than @samp{visit-}.  @xref{Buffer File Name}, for functions and variables that access the visited file name of a buffer or that find an existing buffer by its visited file name."
msgstr "このセクションではファイルのvisitに通常使用される関数を説明します。歴史的な理由によりこれらの関数は@samp{visit-}ではなく、@samp{find-}で始まる名前をもちます。バッファーをvisitしているファイルの名前へのアクセスや、visitされたファイル名から既存のバッファーを見つける関数および変数については@ref{Buffer File Name}を参照してください。"

#. type: Plain text
#: original_texis/files.texi:98
msgid "In a Lisp program, if you want to look at the contents of a file but not alter it, the fastest way is to use @code{insert-file-contents} in a temporary buffer.  Visiting the file is not necessary and takes longer.  @xref{Reading from Files}."
msgstr "ファイル内容を見たいものの変更したくない場合にはテンポラリーバッファー(temporary buffer: 一時的なバッファー)で@code{insert-file-contents}を使用例するのが、Lispプログラム内ではもっとも高速な方法です。時間を要するファイルのvisitは必要ありません。@ref{Reading from Files}を参照してください。"

#. type: deffn
#: original_texis/files.texi:99
#, no-wrap
msgid "Command find-file filename &optional wildcards"
msgstr "Command find-file filename &optional wildcards"

#. type: deffn
#: original_texis/files.texi:103
msgid "This command selects a buffer visiting the file @var{filename}, using an existing buffer if there is one, and otherwise creating a new buffer and reading the file into it.  It also returns that buffer."
msgstr "このコマンドはファイル@var{filename}をvisitしているバッファーを選択する。visitしている既存のバッファーがあればそのバッファー、なければバッファーを新たに作成してそのバッファーにファイルを読み込む。これはそのバッファーをリターンする。"

#. type: deffn
#: original_texis/files.texi:106
msgid "Aside from some technical details, the body of the @code{find-file} function is basically equivalent to:"
msgstr "技術的な詳細を除けば@code{find-file}関数のbodyは基本的には以下と等価:"

#. type: smallexample
#: original_texis/files.texi:109
#, no-wrap
msgid "(switch-to-buffer (find-file-noselect filename nil nil wildcards))\n"
msgstr "(switch-to-buffer (find-file-noselect filename nil nil wildcards))\n"

#. type: deffn
#: original_texis/files.texi:113
msgid "(See @code{switch-to-buffer} in @ref{Switching Buffers}.)"
msgstr "(@ref{Switching Buffers}の@code{switch-to-buffer}を参照されたい。)"

#. type: deffn
#: original_texis/files.texi:117
msgid "If @var{wildcards} is non-@code{nil}, which is always true in an interactive call, then @code{find-file} expands wildcard characters in @var{filename} and visits all the matching files."
msgstr "@var{wildcards}が非@code{nil} (interactiveに呼び出された場合は常に真)の場合、@code{find-file}は@var{filename}内のワイルドカード文字を展開してマッチするすべてのファイルをvisitする。"

#. type: deffn
#: original_texis/files.texi:120
msgid "When @code{find-file} is called interactively, it prompts for @var{filename} in the minibuffer."
msgstr "@code{find-file}がinteractiveに呼び出された際にはミニバッファー内で@var{filename}の入力を求める。"

#. type: deffn
#: original_texis/files.texi:122
#, no-wrap
msgid "Command find-file-literally filename"
msgstr "Command find-file-literally filename"

#. type: deffn
#: original_texis/files.texi:133
msgid "This command visits @var{filename}, like @code{find-file} does, but it does not perform any format conversions (@pxref{Format Conversion}), character code conversions (@pxref{Coding Systems}), or end-of-line conversions (@pxref{Coding System Basics, End of line conversion}).  The buffer visiting the file is made unibyte, and its major mode is Fundamental mode, regardless of the file name.  File local variable specifications in the file (@pxref{File Local Variables}) are ignored, and automatic decompression and adding a newline at the end of the file due to @code{require-final-newline} (@pxref{Saving Buffers, require-final-newline}) are also disabled."
msgstr "このコマンドは@code{find-file}が行うように@var{filename}をvisitするが、フォーマット変換(@ref{Format Conversion}を参照)、文字コード変換(@ref{Coding Systems}を参照)、EOL変換(@ref{Coding System Basics, End of line conversion}を参照)を何も行わない。ファイルをvisitしているバッファーはunibyteになり、ファイル名とは無関係にバッファーのメジャーモードはFundamentalモードになる。ファイル内で指定されたファイルローカル変数(@ref{File Local Variables}を参照)は無視され、自動的な解凍と@code{require-final-newline}によるファイル終端への改行追加(@ref{Saving Buffers, require-final-newline}を参照)も無効になる。"

#. type: deffn
#: original_texis/files.texi:140
msgid "Note that if Emacs already has a buffer visiting the same file non-literally, it will not visit the same file literally, but instead just switch to the existing buffer.  If you want to be sure of accessing a file's contents literally, you should create a temporary buffer and then read the file contents into it using @code{insert-file-contents-literally} (@pxref{Reading from Files})."
msgstr "Emacsがすでにリテラリー(literally: 文字通り、そのまま)でない方法で同じファイルをvisitしているバッファーをもつ場合には、Emacsはその同じファイルをリテラリーにvisitせず、単に既存のバッファーに切り替えることに注意。あるファイルのコンテンツにたいして確実にリテラリーにアクセスしたければテンポラリーバッファーを作成して、@code{insert-file-contents-literally}を使用してファイルのコンテンツを読み込むこと(@ref{Reading from Files}を参照)。"

#. type: defun
#: original_texis/files.texi:142
#, no-wrap
msgid "find-file-noselect filename &optional nowarn rawfile wildcards"
msgstr "find-file-noselect filename &optional nowarn rawfile wildcards"

#. type: defun
#: original_texis/files.texi:147
msgid "This function is the guts of all the file-visiting functions.  It returns a buffer visiting the file @var{filename}.  You may make the buffer current or display it in a window if you wish, but this function does not do so."
msgstr "これはファイルをvisitするすべての関数の要となる関数である。これはファイル@var{filename}をvisitしているバッファーをリターンする。望むならそのバッファーをカレントにしたり、あるウィンドウ内に表示することができるだろうがこの関数はそれを行わない。"

#. type: defun
#: original_texis/files.texi:155
msgid "The function returns an existing buffer if there is one; otherwise it creates a new buffer and reads the file into it.  When @code{find-file-noselect} uses an existing buffer, it first verifies that the file has not changed since it was last visited or saved in that buffer.  If the file has changed, this function asks the user whether to reread the changed file.  If the user says @samp{yes}, any edits previously made in the buffer are lost."
msgstr "関数は既存のバッファーがあればそれをリターンし、なければ新たにバッファーを作成してそれにファイルを読み込む。@code{find-file-noselect}が既存のバッファーを使用する際は、まずファイルがそのバッファーに最後にvisit、または保存したときから変更されていないことを検証する。ファイルが変更されていれば、この関数は変更されたファイルを再読み込みするかどうかをユーザーに尋ねる。ユーザーが@samp{yes}と応えたら、以前に行われたそのバッファー内での編集は失われる。"

#. type: defun
#: original_texis/files.texi:161
msgid "Reading the file involves decoding the file's contents (@pxref{Coding Systems}), including end-of-line conversion, and format conversion (@pxref{Format Conversion}).  If @var{wildcards} is non-@code{nil}, then @code{find-file-noselect} expands wildcard characters in @var{filename} and visits all the matching files."
msgstr "ファイルの読み込みはEOL変換、フォーマット変換(@ref{Format Conversion}を参照)を含むファイルコンテンツのデコードを要する(@ref{Coding Systems}を参照)。@var{wildcards}が非@code{nil}なら、@code{find-file-noselect}は@var{filename}内のワイルドカード文字を展開してマッチするすべてのファイルをvisitする。"

#. type: defun
#: original_texis/files.texi:167
msgid "This function displays warning or advisory messages in various peculiar cases, unless the optional argument @var{nowarn} is non-@code{nil}.  For example, if it needs to create a buffer, and there is no file named @var{filename}, it displays the message @samp{(New file)} in the echo area, and leaves the buffer empty."
msgstr "この関数はオプション引数@var{nowarn}が@code{nil}なら、さまざまな特殊ケースにおいて警告メッセージ(warning message)、および注意メッセージ(advisory message)を表示する。たとえば関数がバッファーの作成を必要とし、かつ@var{filename}という名前のファイルが存在しなければ、エコーエリア内にメッセージ@samp{(New file)}を表示してそのバッファーを空のままに留める。"

#. type: defun
#: original_texis/files.texi:174
msgid "The @code{find-file-noselect} function normally calls @code{after-find-file} after reading the file (@pxref{Subroutines of Visiting}).  That function sets the buffer major mode, parses local variables, warns the user if there exists an auto-save file more recent than the file just visited, and finishes by running the functions in @code{find-file-hook}."
msgstr "@code{find-file-noselect}関数は、ファイルを読み込んだ後に通常は@code{after-find-file}を呼び出す(@ref{Subroutines of Visiting}を参照)。この関数はバッファーのメジャーモードのセット、ローカル変数のパース、正にvisitしたファイルより新しいauto-saveファイルが存在する場合にユーザーへの警告を行い、@code{find-file-hook}内の関数を実行することにより終了する。"

#. type: defun
#: original_texis/files.texi:180
msgid "If the optional argument @var{rawfile} is non-@code{nil}, then @code{after-find-file} is not called, and the @code{find-file-not-found-functions} are not run in case of failure.  What's more, a non-@code{nil} @var{rawfile} value suppresses coding system conversion and format conversion."
msgstr "オプション引数@var{rawfile}が非@code{nil}なら@code{after-find-file}は呼び出されず、失敗時に@code{find-file-not-found-functions}は呼び出されない。さらに非@code{nil}値の@var{rawfile}は、コーディングシステム変換とフォーマット変換を抑制する。"

#. type: defun
#: original_texis/files.texi:185
msgid "The @code{find-file-noselect} function usually returns the buffer that is visiting the file @var{filename}.  But, if wildcards are actually used and expanded, it returns a list of buffers that are visiting the various files."
msgstr "@code{find-file-noselect}関数は、通常はファイル@var{filename}をvisitしているバッファーをリターンする。しかしワイルドカードが実際に使用、展開された場合には、それらのファイルをvisitしているバッファーのリストをリターンする。"

#. type: group
#: original_texis/files.texi:190
#, no-wrap
msgid ""
"(find-file-noselect \"/etc/fstab\")\n"
"     @result{} #<buffer fstab>\n"
msgstr ""
"(find-file-noselect \"/etc/fstab\")\n"
"     @result{} #<buffer fstab>\n"

#. type: deffn
#: original_texis/files.texi:194
#, no-wrap
msgid "Command find-file-other-window filename &optional wildcards"
msgstr "Command find-file-other-window filename &optional wildcards"

#. type: deffn
#: original_texis/files.texi:199
msgid "This command selects a buffer visiting the file @var{filename}, but does so in a window other than the selected window.  It may use another existing window or split a window; see @ref{Switching Buffers}."
msgstr "このコマンドはファイル@var{filename}をvisitしているバッファーを選択するが、選択されたウィンドウではない他のウィンドウでこれを行う。これは別の既存ウィンドウを使用したり、ウィンドウを分割するかもしれない。@ref{Switching Buffers}lを参照のこと。"

#. type: deffn
#: original_texis/files.texi:202 original_texis/files.texi:211
msgid "When this command is called interactively, it prompts for @var{filename}."
msgstr "このコマンドがinteractiveに呼び出された際は@var{filename}の入力を求める。"

#. type: deffn
#: original_texis/files.texi:204
#, no-wrap
msgid "Command find-file-read-only filename &optional wildcards"
msgstr "Command find-file-read-only filename &optional wildcards"

#. type: deffn
#: original_texis/files.texi:208
msgid "This command selects a buffer visiting the file @var{filename}, like @code{find-file}, but it marks the buffer as read-only.  @xref{Read Only Buffers}, for related functions and variables."
msgstr "このコマンドは@code{find-file}のようにファイル@var{filename}をvisitしているバッファーを選択するが、そのバッファーを読み取り専用(read-only)とマークする。関連する関数と変数については@ref{Read Only Buffers}を参照のこと。"

#. type: defopt
#: original_texis/files.texi:213
#, no-wrap
msgid "find-file-wildcards"
msgstr "find-file-wildcards"

#. type: defopt
#: original_texis/files.texi:220
msgid "If this variable is non-@code{nil}, then the various @code{find-file} commands check for wildcard characters and visit all the files that match them (when invoked interactively or when their @var{wildcards} argument is non-@code{nil}).  If this option is @code{nil}, then the @code{find-file} commands ignore their @var{wildcards} argument and never treat wildcard characters specially."
msgstr "この変数が非@code{nil}なら、各種@code{find-file}コマンドはワイルドカード文字をチェックして、それらにマッチするすべてのファイルをvisitする(interactiveに呼び出されたときや@var{wildcards}引数が非@code{nil}のとき)。このオプションが@code{nil}なら、@code{find-file}コマンドはそれらの@var{wildcards}引数を無視してワイルドカード文字を特別に扱うことは決してない。"

#. type: defopt
#: original_texis/files.texi:222
#, no-wrap
msgid "find-file-hook"
msgstr "find-file-hook"

#. type: defopt
#: original_texis/files.texi:227
msgid "The value of this variable is a list of functions to be called after a file is visited.  The file's local-variables specification (if any) will have been processed before the hooks are run.  The buffer visiting the file is current when the hook functions are run."
msgstr "この変数の値はファイルがvisitされた後に呼び出される関数のリスト。ファイルのローカル変数指定は、(もしあれば)このフックが実行される前に処理されるだろう。フック関数実行時はそのファイルをvisitしているバッファーがカレントになる。"

#. type: defopt
#: original_texis/files.texi:229
msgid "This variable is a normal hook.  @xref{Hooks}."
msgstr "この変数はノーマルフックである。@ref{Hooks}を参照のこと。"

#. type: defvar
#: original_texis/files.texi:231
#, no-wrap
msgid "find-file-not-found-functions"
msgstr "find-file-not-found-functions"

#. type: defvar
#: original_texis/files.texi:238
msgid "The value of this variable is a list of functions to be called when @code{find-file} or @code{find-file-noselect} is passed a nonexistent file name.  @code{find-file-noselect} calls these functions as soon as it detects a nonexistent file.  It calls them in the order of the list, until one of them returns non-@code{nil}.  @code{buffer-file-name} is already set up."
msgstr "この変数の値は@code{find-file}や@code{find-file-noselect}が存在しないファイル名を受け取った際に呼び出される関数のリスト。存在しないファイルを検知すると@code{find-file-noselect}は直ちにこれらの関数を呼び出す。これらのいずれかが非@code{nil}をリターンするまで、リスト順に関数を呼び出す。@code{buffer-file-name}はすでにセットアップ済みである。"

#. type: defvar
#: original_texis/files.texi:241
msgid "This is not a normal hook because the values of the functions are used, and in many cases only some of the functions are called."
msgstr "関数の値が使用されること、および多くの場合いくつかの関数だけが呼び出されるので、これはノーマルフックではない。"

#. type: defvar
#: original_texis/files.texi:243
#, no-wrap
msgid "find-file-literally"
msgstr "find-file-literally"

#. type: defvar
#: original_texis/files.texi:251
msgid "This buffer-local variable, if set to a non-@code{nil} value, makes @code{save-buffer} behave as if the buffer were visiting its file literally, i.e., without conversions of any kind.  The command @code{find-file-literally} sets this variable's local value, but other equivalent functions and commands can do that as well, e.g., to avoid automatic addition of a newline at the end of the file.  This variable is permanent local, so it is unaffected by changes of major modes."
msgstr "このバッファーローカル変数が非@code{nil}値にセットされると、@code{save-buffer}はあたかもそのバッファーがリテラリー、つまり何の変換も行わずにファイルをvisitしていたかのように振る舞う。コマンド@code{find-file-literally}はこの変数のローカル値をセットするが、その他の等価な関数およびコマンドも、たとえばファイル終端への改行の自動追加を避けるためにこれを同様に行うことができる。この変数は恒久的にローカルなのでメジャーモードの変更による影響を受けない。"

#. type: Plain text
#: original_texis/files.texi:259
msgid "The @code{find-file-noselect} function uses two important subroutines which are sometimes useful in user Lisp code: @code{create-file-buffer} and @code{after-find-file}.  This section explains how to use them."
msgstr "@code{find-file-noselect}関数は、2つの重要なサブルーチン@code{create-file-buffer}と@code{after-find-file}を使用します。これらはユーザーのLispコードでも役に立つことがあります。このセクションではそれらの使い方について説明します。"

#. type: defun
#: original_texis/files.texi:263
#, no-wrap
msgid "create-file-buffer filename"
msgstr "create-file-buffer filename"

#. type: defun
#: original_texis/files.texi:270
msgid "This function creates a suitably named buffer for visiting @var{filename}, and returns it.  It uses @var{filename} (sans directory)  as the name if that name is free; otherwise, it appends a string such as @samp{<2>} to get an unused name.  See also @ref{Creating Buffers}.  Note that the @file{uniquify} library affects the result of this function.  @xref{Uniquify,,, emacs, The GNU Emacs Manual}."
msgstr "この関数は@var{filename}のvisitにたいして適切な名前のバッファーを作成してそれをリターンする。これは@var{filename} (ディレクトリーを含まず)の名前がフリーならバッファー名にそれを使用し、フリーでなければ未使用の名前を取得するために@samp{<2>}のような文字列を付加する。@ref{Creating Buffers}も参照のこと。@file{uniquify}ライブラリーはこの関数の結果に影響を与えることに注意。@ref{Uniquify,,, emacs, The GNU Emacs Manual}を参照のこと。"

#. type: defun
#: original_texis/files.texi:274
msgid "@strong{Please note:} @code{create-file-buffer} does @emph{not} associate the new buffer with a file and does not select the buffer.  It also does not use the default major mode."
msgstr "@strong{注意されたい:} @code{create-file-buffer}はファイルに新たなバッファーを@emph{関連付けない}。バッファーの選択もせず、さらにデフォルトのメジャーモードも使用しない。"

#. type: group
#: original_texis/files.texi:279
#, no-wrap
msgid ""
"(create-file-buffer \"foo\")\n"
"     @result{} #<buffer foo>\n"
msgstr ""
"(create-file-buffer \"foo\")\n"
"     @result{} #<buffer foo>\n"

#. type: group
#: original_texis/files.texi:283
#, no-wrap
msgid ""
"(create-file-buffer \"foo\")\n"
"     @result{} #<buffer foo<2>>\n"
msgstr ""
"(create-file-buffer \"foo\")\n"
"     @result{} #<buffer foo<2>>\n"

#. type: group
#: original_texis/files.texi:287
#, no-wrap
msgid ""
"(create-file-buffer \"foo\")\n"
"     @result{} #<buffer foo<3>>\n"
msgstr ""
"(create-file-buffer \"foo\")\n"
"     @result{} #<buffer foo<3>>\n"

#. type: defun
#: original_texis/files.texi:292
msgid "This function is used by @code{find-file-noselect}.  It uses @code{generate-new-buffer} (@pxref{Creating Buffers})."
msgstr "この関数は@code{find-file-noselect}により使用される。この関数自身は@code{generate-new-buffer}を使用する(@ref{Creating Buffers}を参照)。"

#. type: defun
#: original_texis/files.texi:294
#, no-wrap
msgid "after-find-file &optional error warn noauto after-find-file-from-revert-buffer nomodes"
msgstr "after-find-file &optional error warn noauto after-find-file-from-revert-buffer nomodes"

#. type: defun
#: original_texis/files.texi:298
msgid "This function sets the buffer major mode, and parses local variables (@pxref{Auto Major Mode}).  It is called by @code{find-file-noselect} and by the default revert function (@pxref{Reverting})."
msgstr "この関数はバッファーのメジャーモードをセットして、ローカル変数をパースする(@ref{Auto Major Mode}を参照)。これは@code{find-file-noselect}、およびデフォルトのリバート関数(@ref{Reverting}を参照)により呼び出される。"

#. type: cindex
#: original_texis/files.texi:299
#, no-wrap
msgid "new file message"
msgstr "new file message"

#. type: cindex
#: original_texis/files.texi:300
#, no-wrap
msgid "file open error"
msgstr "file open error"

#. type: defun
#: original_texis/files.texi:306
msgid "If reading the file got an error because the file does not exist, but its directory does exist, the caller should pass a non-@code{nil} value for @var{error}.  In that case, @code{after-find-file} issues a warning: @samp{(New file)}.  For more serious errors, the caller should usually not call @code{after-find-file}."
msgstr "ファイルが存在しないという理由によりファイルの読み込みがエラーを受け取るがディレクトリーは存在するなら、呼び出し側は@var{error}にたいして非@code{nil}値を渡すこと。この場合、@code{after-find-file}は警告@samp{(New file)}を発する。より深刻なエラーにたいしては、呼び出し側は通常は@code{after-find-file}を呼び出さないこと。"

#. type: defun
#: original_texis/files.texi:309
msgid "If @var{warn} is non-@code{nil}, then this function issues a warning if an auto-save file exists and is more recent than the visited file."
msgstr "@var{warn}が非@code{nil}なら、もしauto-saveファイルが存在して、かつそれがvisitされているファイルより新しければ、この関数は警告を発する。"

#. type: defun
#: original_texis/files.texi:312
msgid "If @var{noauto} is non-@code{nil}, that says not to enable or disable Auto-Save mode.  The mode remains enabled if it was enabled before."
msgstr "@var{noauto}が非@code{nil}なら、それはAuto-Saveモードを有効や無効にしないことを告げる。以前にAuto-Saveモードが有効なら有効のまま留まる。"

#. type: defun
#: original_texis/files.texi:317
msgid "If @var{after-find-file-from-revert-buffer} is non-@code{nil}, that means this call was from @code{revert-buffer}.  This has no direct effect, but some mode functions and hook functions check the value of this variable."
msgstr "@var{after-find-file-from-revert-buffer}が非@code{nil}なら、それはこの関数が@code{revert-buffer}から呼び出されたことを意味する。これに直接的な効果はないが、モード関数とフック関数の中には、この変数の値をチェックするものがいくつかある。"

#. type: defun
#: original_texis/files.texi:322
msgid "If @var{nomodes} is non-@code{nil}, that means don't alter the buffer's major mode, don't process local variables specifications in the file, and don't run @code{find-file-hook}.  This feature is used by @code{revert-buffer} in some cases."
msgstr "@var{nomodes}が非@code{nil}なら、それはバッファーのメジャーモードを変更せず、ファイル内のローカル変数指定を処理せず、@code{find-file-hook}を実行しないことを意味する。この機能はあるケースにおいて@code{revert-buffer}により使用される。"

#. type: defun
#: original_texis/files.texi:325
msgid "The last thing @code{after-find-file} does is call all the functions in the list @code{find-file-hook}."
msgstr "@code{after-find-file}はリスト@code{find-file-hook}内のすべての関数を最後に呼び出す。"

#. type: cindex
#: original_texis/files.texi:329
#, no-wrap
msgid "saving buffers"
msgstr "saving buffers"

#. type: Plain text
#: original_texis/files.texi:338
msgid "When you edit a file in Emacs, you are actually working on a buffer that is visiting that file---that is, the contents of the file are copied into the buffer and the copy is what you edit.  Changes to the buffer do not change the file until you @dfn{save} the buffer, which means copying the contents of the buffer into the file.  Buffers which are not visiting a file can still be ``saved'', in a sense, using functions in the buffer-local @code{write-contents-functions} hook."
msgstr "Emacs内でファイルを編集する際には、実際にはそのファイルをvisitしているバッファーにたいして編集を行っています。つまりファイルのコンテンツをバッファーにコピーしてそのコピーを編集しています。そのバッファーを変更してもバッファーを@dfn{保存(save)}するまでファイルは変更されません。保存とはバッファーのコンテンツをファイルにコピーすることを意味します。ファイルをvisitしていないバッファーでも、バッファーローカルんｑ@code{write-contents-functions}の関数を使用することにより``saved(保存済み)''にすることができます。"

#. type: deffn
#: original_texis/files.texi:339
#, no-wrap
msgid "Command save-buffer &optional backup-option"
msgstr "Command save-buffer &optional backup-option"

#. type: deffn
#: original_texis/files.texi:343
msgid "This function saves the contents of the current buffer in its visited file if the buffer has been modified since it was last visited or saved.  Otherwise it does nothing."
msgstr "この関数はバッファーが最後にvisitされたときや保存されたときから変更されていれば、カレントバッファーのコンテンツをバッファーによってvisitされているファイルに保存、変更されていなければ何も行わない。"

#. type: deffn
#: original_texis/files.texi:349
msgid "@code{save-buffer} is responsible for making backup files.  Normally, @var{backup-option} is @code{nil}, and @code{save-buffer} makes a backup file only if this is the first save since visiting the file.  Other values for @var{backup-option} request the making of backup files in other circumstances:"
msgstr "@code{save-buffer}はバックアップファイルの作成に責任を負う。@var{backup-option}は通常は@code{nil}であり、@code{save-buffer}はファイルのvisit以降、それが最初の保存の場合のみバックアップファイルを作成する。@var{backup-option}にたいする他の値は、別の条件によるバックアップファイル作成を要求する:"

#. type: itemize
#: original_texis/files.texi:355
msgid "With an argument of 4 or 64, reflecting 1 or 3 @kbd{C-u}'s, the @code{save-buffer} function marks this version of the file to be backed up when the buffer is next saved."
msgstr "引数4は1つの@kbd{C-u}、引数64は3つの@kbd{C-u}を意味するので、@code{save-buffer}はバッファーの次回保存時にこのバージョンのファイルがバックアップされるようマークする。"

#. type: itemize
#: original_texis/files.texi:360
msgid "With an argument of 16 or 64, reflecting 2 or 3 @kbd{C-u}'s, the @code{save-buffer} function unconditionally backs up the previous version of the file before saving it."
msgstr "引数16は2つの@kbd{C-u}、引数64は3つの@kbd{C-u}を意味するので、@code{save-buffer}関数はそれを保存する前に前バージョンのファイルを無条件にバックアップする。"

#. type: itemize
#: original_texis/files.texi:363
msgid "With an argument of 0, unconditionally do @emph{not} make any backup file."
msgstr "引数0は無条件にバックアップファイルを何も@emph{作成しない}。"

#. type: deffn
#: original_texis/files.texi:366
#, no-wrap
msgid "Command save-some-buffers &optional save-silently-p pred"
msgstr "Command save-some-buffers &optional save-silently-p pred"

#. type: anchor{#1}
#: original_texis/files.texi:372
msgid "Definition of save-some-buffers"
msgstr "Definition of save-some-buffers"

#. type: deffn
#: original_texis/files.texi:372
msgid "This command saves some modified file-visiting buffers.  Normally it asks the user about each buffer.  But if @var{save-silently-p} is non-@code{nil}, it saves all the file-visiting buffers without querying the user."
msgstr "このコマンドはファイルをvisitしている変更されたバッファーのいくつかを保存する。これは通常は各バッファーごとにユーザーに確認を求める。しかし@var{save-silently-p}が非@code{nil}なら、ユーザーに質問せずにファイルをvisitしているすべてのバッファーを保存する。"

#. type: vindex
#: original_texis/files.texi:373
#, no-wrap
msgid "save-some-buffers-default-predicate"
msgstr "save-some-buffers-default-predicate"

#. type: deffn
#: original_texis/files.texi:386
msgid "The optional @var{pred} argument provides a predicate that controls which buffers to ask about (or to save silently if @var{save-silently-p} is non-@code{nil}).  If @var{pred} is @code{nil}, that means to use the value of @code{save-some-buffers-default-predicate} instead of @var{pred}.  If the result is @code{nil}, it means ask only about file-visiting buffers.  If it is @code{t}, that means also offer to save certain other non-file buffers---those that have a non-@code{nil} buffer-local value of @code{buffer-offer-save} (@pxref{Killing Buffers}).  A user who says @samp{yes} to saving a non-file buffer is asked to specify the file name to use.  The @code{save-buffers-kill-emacs} function passes the value @code{t} for @var{pred}."
msgstr ""
"オプション引数@var{pred}は、どのバッファーで確認を求めるか(または@var{save-silently-p}が非@code{nil}ならどのバッファーで確認せずに保存するか)を制御する。\n"
"\n"
"@var{pred}が@code{nil}なら、@var{pred}のかわりに@code{save-some-buffers-default-predicate}の値を使用することを意味する。その結果が@code{nil}ならファイルをvisitしているバッファーにたいしてのみ確認を求めることを意味する。@code{t}なら@code{buffer-offer-save}のバッファーローカル値が@code{nil}であるような非ファイルバッファー以外の特定のバッファーの保存も提案することを意味する(@ref{Killing Buffers}を参照)。ユーザーが非ファイルバッファーの保存にたいして@samp{yes}と応えると保存に使用するファイル名の指定を求める。@code{save-buffers-kill-emacs}関数は@var{pred}にたいして値@code{t}を渡す。"

#. type: deffn
#: original_texis/files.texi:391
msgid "If the predicate is neither @code{t} nor @code{nil}, then it should be a function of no arguments.  It will be called in each buffer to decide whether to offer to save that buffer.  If it returns a non-@code{nil} value in a certain buffer, that means do offer to save that buffer."
msgstr "述語が@code{t}と@code{nil}のいずれでもなければ引数なしの関数であること。その関数はバッファーの保存を提案するか否かを決定するためにバッファーごとに呼び出される。これが特定のバッファーで非@code{nil}値をリターンすればバッファー保存の提案を行うことを意味する。"

#. type: deffn
#: original_texis/files.texi:393
#, no-wrap
msgid "Command write-file filename &optional confirm"
msgstr "Command write-file filename &optional confirm"

#. type: anchor{#1}
#: original_texis/files.texi:401
msgid "Definition of write-file"
msgstr "Definition of write-file"

#. type: deffn
#: original_texis/files.texi:401
msgid "This function writes the current buffer into file @var{filename}, makes the buffer visit that file, and marks it not modified.  Then it renames the buffer based on @var{filename}, appending a string like @samp{<2>} if necessary to make a unique buffer name.  It does most of this work by calling @code{set-visited-file-name} (@pxref{Buffer File Name}) and @code{save-buffer}."
msgstr "この関数はカレントバッファーをファイル@var{filename}に書き込んで、バッファーがそのファイルをvisitしていることにして未変更とマークする。次に@var{filename}にもとづいてバッファー名をリネームする。バッファー名を一意にするため、必要なら@samp{<2>}のような文字列を付加する。処理のほとんどは@code{set-visited-file-name} (@ref{Buffer File Name}を参照)、および@code{save-buffer}を呼び出すことにより行われる。"

#. type: deffn
#: original_texis/files.texi:405
msgid "If @var{confirm} is non-@code{nil}, that means to ask for confirmation before overwriting an existing file.  Interactively, confirmation is required, unless the user supplies a prefix argument."
msgstr "@var{confirm}が非@code{nil}なら、それは既存のファイルを上書きする前に確認を求めることを意味する。ユーザーがプレフィックス引数を与えなければinteractiveに確認が求められる。"

#. type: deffn
#: original_texis/files.texi:410
msgid "If @var{filename} is a directory name (@pxref{Directory Names}), @code{write-file} uses the name of the visited file, in directory @var{filename}.  If the buffer is not visiting a file, it uses the buffer name instead."
msgstr "@var{filename}がディレクトリー名(@ref{Directory Names}を参照)、または既存のディレクトリーへのシンボリックリンクなら、@code{write-file}はディレクトリー@var{filename}内でvisitされているファイルの名前を使用する。そのバッファーがファイルをvisitしていなければ、かわりにバッファーの名前を使用する。"

#. type: Plain text
#: original_texis/files.texi:418
msgid "Saving a buffer runs several hooks.  It also performs format conversion (@pxref{Format Conversion}).  Note that these hooks, described below, are only run by @code{save-buffer}, they are not run by other primitives and functions that write buffer text to files, and in particular auto-saving (@pxref{Auto-Saving}) doesn't run these hooks."
msgstr "バッファーの保存によりフックがいくつか実行されます。これによりフォーマット変換も処理されます(@ref{Format Conversion}を参照)。以下で説明するこれらのフックはバッファーのテキストをファイルに書き込む@code{save-buffer}以外の他のプリミティブや関数、とりわけauto-saving (@ref{Auto-Saving}を参照)では実行されないことに注意してください。"

#. type: defvar
#: original_texis/files.texi:419
#, no-wrap
msgid "write-file-functions"
msgstr "write-file-functions"

#. type: defvar
#: original_texis/files.texi:425
msgid "The value of this variable is a list of functions to be called before writing out a buffer to its visited file.  If one of them returns non-@code{nil}, the file is considered already written and the rest of the functions are not called, nor is the usual code for writing the file executed."
msgstr "この変数の値はvisitされているファイルをバッファーに書き出す前に呼び出される関数のリスト。それらのうちのいずれかが非@code{nil}をリターンしたら、そのファイルは書き込み済みだと判断されて残りの関数は呼び出されないし、ファイルを書き込むための通常のコードも実行されない。"

#. type: defvar
#: original_texis/files.texi:429
msgid "If a function in @code{write-file-functions} returns non-@code{nil}, it is responsible for making a backup file (if that is appropriate).  To do so, execute the following code:"
msgstr "@code{write-file-functions}内の関数が非@code{nil}をリターンしたら、(それが適切なら)その関数はファイルをバックアップする責任を負う。これを行うには以下のコードを実行する:"

#. type: example
#: original_texis/files.texi:432
#, no-wrap
msgid "(or buffer-backed-up (backup-buffer))\n"
msgstr "(or buffer-backed-up (backup-buffer))\n"

#. type: defvar
#: original_texis/files.texi:438
msgid "You might wish to save the file modes value returned by @code{backup-buffer} and use that (if non-@code{nil}) to set the mode bits of the file that you write.  This is what @code{save-buffer} normally does.  @xref{Making Backups,, Making Backup Files}."
msgstr "@code{backup-buffer}によりリターンされるファイルモードの値を保存して、(もし非@code{nil}なら)書き込むファイルのモードビットをセットしたいと思うかもしれない。これは正に@code{save-buffer}が通常行うことである。@ref{Making Backups,, Making Backup Files}を参照のこと。"

#. type: defvar
#: original_texis/files.texi:445
msgid "The hook functions in @code{write-file-functions} are also responsible for encoding the data (if desired): they must choose a suitable coding system and end-of-line conversion (@pxref{Lisp and Coding Systems}), perform the encoding (@pxref{Explicit Encoding}), and set @code{last-coding-system-used} to the coding system that was used (@pxref{Encoding and I/O})."
msgstr "@code{write-file-functions}内のフック関数は、データのエンコード(が望ましければ)にも責任を負う。これらは適切なコーディングシステムと改行規則(@ref{Lisp and Coding Systems}を参照)を選択してエンコード(@ref{Explicit Encoding}を参照)を処理して、使用されていたコーディングシステム(@ref{Encoding and I/O}を参照)を@code{last-coding-system-used}にセットしなければならない。"

#. type: defvar
#: original_texis/files.texi:453
msgid "If you set this hook locally in a buffer, it is assumed to be associated with the file or the way the contents of the buffer were obtained.  Thus the variable is marked as a permanent local, so that changing the major mode does not alter a buffer-local value.  On the other hand, calling @code{set-visited-file-name} will reset it.  If this is not what you want, you might like to use @code{write-contents-functions} instead."
msgstr "バッファー内でこのフックをローカルにセットすると、バッファーはそのファイル、またはバッファーのコンテンツを取得したファイルに類するものに関連付けられる。このようにして変数は恒久的にローカルとマークされるので、メジャーモードの変更がバッファーローカルな値を変更することはない。その一方で@code{set-visited-file-name}を呼び出すことによって変数はリセットされるだろう。これを望まなければ、かわりに@code{write-contents-functions}を使用したいと思うかもしれない。"

#. type: defvar
#: original_texis/files.texi:456
msgid "Even though this is not a normal hook, you can use @code{add-hook} and @code{remove-hook} to manipulate the list.  @xref{Hooks}."
msgstr "たとえこれがノーマルフックでなくても、このリストを操作するために@code{add-hook}と@code{remove-hook}を使用することはできる。@ref{Hooks}を参照のこと。"

#. type: defvar
#: original_texis/files.texi:459
#, no-wrap
msgid "write-contents-functions"
msgstr "write-contents-functions"

#. type: defvar
#: original_texis/files.texi:468
msgid "This works just like @code{write-file-functions}, but it is intended for hooks that pertain to the buffer's contents, not to the particular visited file or its location, and can be used to create arbitrary save processes for buffers that aren't visiting files at all.  Such hooks are usually set up by major modes, as buffer-local bindings for this variable.  This variable automatically becomes buffer-local whenever it is set; switching to a new major mode always resets this variable, but calling @code{set-visited-file-name} does not."
msgstr "これは正に@code{write-file-functions}と同様に機能するが、こちらはvisitしている特定のファイルやファイルの場所ではなくバッファーのコンテンツに関連するフックを意図しており、実際にはファイルをvisitしていないバッファーにたいして任意の保存処理を作成するために使用できる。そのようなフックは、この変数にたいするバッファーローカルなバインディングとして、通常はメジャーモードにより作成される。この変数はセットされた際には常に自動的にバッファーローカルになる。新たなメジャーモードへの切り替えは常にこの変数をリセットするが、@code{set-visited-file-name}の呼び出しではリセットされない。"

#. type: defvar
#: original_texis/files.texi:472
msgid "If any of the functions in this hook returns non-@code{nil}, the file is considered already written and the rest are not called and neither are the functions in @code{write-file-functions}."
msgstr "このフック内の関数のいずれかが非@code{nil}をリターンすると、そのファイルはすでに書き込み済みとみなされて、残りの関数は呼び出されず@code{write-file-functions}内の関数も呼び出されない。"

#. type: defvar
#: original_texis/files.texi:479
msgid "When using this hook to save buffers that are not visiting files (for instance, special-mode buffers), keep in mind that, if the function fails to save correctly and returns a @code{nil} value, @code{save-buffer} will go on to prompt the user for a file to save the buffer in.  If this is undesirable, consider having the function fail by raising an error."
msgstr "(スペシャルモードのバッファーのような)ファイルをvisitしていないバッファーを保存するためにこのフックを利用する際には、その関数が正常に保存することに失敗して@code{nil}値をリターンすると、@code{save-buffer}がユーザーにたいしてバッファーを保存するファイルの入力を求めることに留意。これが望ましくなければエラーのレイズによる関数の失敗を考慮されたい。"

#. type: defopt
#: original_texis/files.texi:481
#, no-wrap
msgid "before-save-hook"
msgstr "before-save-hook"

#. type: defopt
#: original_texis/files.texi:487
msgid "This normal hook runs before a buffer is saved in its visited file, regardless of whether that is done normally or by one of the hooks described above.  For instance, the @file{copyright.el} program uses this hook to make sure the file you are saving has the current year in its copyright notice."
msgstr "このノーマルフックはvisitしているファイルにバッファーが保存される前に実行される。保存が通常の方法で行われるか、あるいは上述のフックのいずれかで行われたかは問題ではない。たとえば@file{copyright.el}プログラムは、ファイルの保存においてそれの著作権表示が今年であることを確認するためにこのフックを使用する。"

#. type: defopt
#: original_texis/files.texi:490
#, no-wrap
msgid "after-save-hook"
msgstr "after-save-hook"

#. type: defopt
#: original_texis/files.texi:494
msgid "This normal hook runs after a buffer has been saved in its visited file.  One use of this hook is in Fast Lock mode; it uses this hook to save the highlighting information in a cache file."
msgstr "このノーマルフックはvisitしているファイルにバッファーを保存した後に実行される。このフックの使用例の1つはFast Lockモードにある。このモードはキャッシュファイルにハイライト情報を保存するためにこのフックを使用している。"

#. type: defopt
#: original_texis/files.texi:496
#, no-wrap
msgid "file-precious-flag"
msgstr "file-precious-flag"

#. type: defopt
#: original_texis/files.texi:503
msgid "If this variable is non-@code{nil}, then @code{save-buffer} protects against I/O errors while saving by writing the new file to a temporary name instead of the name it is supposed to have, and then renaming it to the intended name after it is clear there are no errors.  This procedure prevents problems such as a lack of disk space from resulting in an invalid file."
msgstr "この変数が非@code{nil}なら、@code{save-buffer}は保存ファイルがもつ名前のかわりに一時的な名前で新たなファイルに書き込み、エラーがないことが明確になった後にファイルを意図する名前にリネームすることによって保存中のI/Oエラーから防御する。この手順は無効なファイルが原因となるディスク容量逼迫のような問題を防ぐ。"

#. type: defopt
#: original_texis/files.texi:507
msgid "As a side effect, backups are necessarily made by copying.  @xref{Rename or Copy}.  Yet, at the same time, saving a precious file always breaks all hard links between the file you save and other file names."
msgstr "副作用としてバックアップ作成にコピーが必要になる。@ref{Rename or Copy}を参照のこと。しかし同時にこの高価なファイル保存によって保存したファイルと他のファイル名との間のすべてのハードリンクは切断される。"

#. type: defopt
#: original_texis/files.texi:510
msgid "Some modes give this variable a non-@code{nil} buffer-local value in particular buffers."
msgstr "いくつかのモードは特定のバッファーにおいてこの変数に非@code{nil}のバッファーローカル値を与える。"

#. type: defopt
#: original_texis/files.texi:512
#, no-wrap
msgid "require-final-newline"
msgstr "require-final-newline"

#. type: defopt
#: original_texis/files.texi:522
msgid "This variable determines whether files may be written out that do @emph{not} end with a newline.  If the value of the variable is @code{t}, then @code{save-buffer} silently adds a newline at the end of the buffer whenever it does not already end in one.  If the value is @code{visit}, Emacs adds a missing newline just after it visits the file.  If the value is @code{visit-save}, Emacs adds a missing newline both on visiting and on saving.  For any other non-@code{nil} value, @code{save-buffer} asks the user whether to add a newline each time the case arises."
msgstr "この変数はファイルが改行で@emph{終わらない}ように書き込まれるかどうかを決定する。変数の値が@code{t}なら、@code{save-buffer}はバッファーの終端に改行がなければ暗黙理に改行を追加する。値が@code{visit}なら、Emacsはファイルをvisitした直後に不足している改行を追加する。値が@code{visit-save}なら、Emacsはvisitと保存の両方のタイミングで不足している改行を追加する。その他の非@code{nil}値にたいしては、そのようなケースが生じるたびに改行を追加するかどうか@code{save-buffer}がユーザーに尋ねる。"

#. type: defopt
#: original_texis/files.texi:526
msgid "If the value of the variable is @code{nil}, then @code{save-buffer} doesn't add newlines at all.  @code{nil} is the default value, but a few major modes set it to @code{t} in particular buffers."
msgstr "変数の値が@code{nil}なら@code{save-buffer}は改行を追加しない。デフォルト値は@code{nil}だが、特定のバッファーでこれを@code{t}にセットするメジャーモードも少数存在する。"

#. type: Plain text
#: original_texis/files.texi:530
msgid "See also the function @code{set-visited-file-name} (@pxref{Buffer File Name})."
msgstr "@ref{Buffer File Name}の関数@code{set-visited-file-name}も参照されたい。"

#. type: cindex
#: original_texis/files.texi:533
#, no-wrap
msgid "reading from files"
msgstr "reading from files"

#. type: Plain text
#: original_texis/files.texi:538
msgid "To copy the contents of a file into a buffer, use the function @code{insert-file-contents}.  (Don't use the command @code{insert-file} in a Lisp program, as that sets the mark.)"
msgstr "ファイルのコンテンツをバッファーにコピーするためには関数@code{insert-file-contents}を使用します(マークをセットするのでLispプログラム内でコマンド@code{insert-file}は使用してはならない)。"

#. type: defun
#: original_texis/files.texi:539
#, no-wrap
msgid "insert-file-contents filename &optional visit beg end replace"
msgstr "insert-file-contents filename &optional visit beg end replace"

#. type: defun
#: original_texis/files.texi:544
msgid "This function inserts the contents of file @var{filename} into the current buffer after point.  It returns a list of the absolute file name and the length of the data inserted.  An error is signaled if @var{filename} is not the name of a file that can be read."
msgstr "この関数はファイル@var{filename}のコンテンツをカレントバッファーのポイントの後に挿入する。これは絶対ファイル名と挿入だれたデータの長さからなるリストをリターンする。@var{filename}が読み取り可能なファイルの名前でなければエラーがシグナルされる。"

#. type: defun
#: original_texis/files.texi:554
msgid "This function checks the file contents against the defined file formats, and converts the file contents if appropriate and also calls the functions in the list @code{after-insert-file-functions}.  @xref{Format Conversion}.  Normally, one of the functions in the @code{after-insert-file-functions} list determines the coding system (@pxref{Coding Systems}) used for decoding the file's contents, including end-of-line conversion.  However, if the file contains null bytes, it is by default visited without any code conversions.  @xref{Lisp and Coding Systems, inhibit-null-byte-detection}."
msgstr "この関数は定義されたファイルフォーマットに照らしてファイルのコンテンツをチェックして、適切ならそのコンテンツの変換、およびリスト@code{after-insert-file-functions}内の関数の呼び出しも行う。@ref{Format Conversion}を参照のこと。通常はリスト@code{after-insert-file-functions}内のいずれかの関数がEOL変換を含むファイルコンテンツのデコードに使用されるコーディングシステム(@ref{Coding Systems}を参照)を判断する。しかしファイルにnullバイトが含まれる場合には、デフォルトではコード変換なしでvisitされる。@ref{Lisp and Coding Systems, inhibit-null-byte-detection}を参照のこと。"

#. type: defun
#: original_texis/files.texi:560
msgid "If @var{visit} is non-@code{nil}, this function additionally marks the buffer as unmodified and sets up various fields in the buffer so that it is visiting the file @var{filename}: these include the buffer's visited file name and its last save file modtime.  This feature is used by @code{find-file-noselect} and you probably should not use it yourself."
msgstr "@var{visit}が非@code{nil}なら、この関数は追加でそのバッファーを未変更とマークしてそのバッファーのさまざまなフィールドをセットアップして、バッファーがファイル@var{filename}をvisitしているようにする。これらのフィールドにはバッファーがvisitしたファイルの名前、最終保存したファイルのmodtimeが含まれる。これらの機能は@code{find-file-noselect}により使用されるものであり、恐らくあなた自身が使用するべきではない。"

#. type: defun
#: original_texis/files.texi:564
msgid "If @var{beg} and @var{end} are non-@code{nil}, they should be numbers that are byte offsets specifying the portion of the file to insert.  In this case, @var{visit} must be @code{nil}.  For example,"
msgstr "@var{beg}と@var{end}が非@code{nil}なら、それらはファイル挿入範囲を指定するバイトオフセット数値であること。この場合、@var{visit}は@code{nil}でなければならない。たとえば、"

#. type: example
#: original_texis/files.texi:567
#, no-wrap
msgid "(insert-file-contents filename nil 0 500)\n"
msgstr "(insert-file-contents filename nil 0 500)\n"

#. type: defun
#: original_texis/files.texi:571
msgid "inserts the first 500 characters of a file."
msgstr "これはファイルの先頭500文字(バイト)を挿入する。"

#. type: defun
#: original_texis/files.texi:577
msgid "If the argument @var{replace} is non-@code{nil}, it means to replace the contents of the buffer (actually, just the accessible portion) with the contents of the file.  This is better than simply deleting the buffer contents and inserting the whole file, because (1) it preserves some marker positions and (2) it puts less data in the undo list."
msgstr "引数@var{replace}が非@code{nil}なら、それはバッファーのコンテンツ(実際にはアクセス可能な範囲)をファイルのコンテンツで置き換えることを意味する。これは単にバッファーのコンテンツを削除してファイル全体を挿入するより優れている。なぜなら、(1)マーカー位置を維持して、(2)undoリストに配置するデータも少ないからである。"

#. type: defun
#: original_texis/files.texi:581
msgid "It is possible to read a special file (such as a FIFO or an I/O device)  with @code{insert-file-contents}, as long as @var{replace} and @var{visit} are @code{nil}."
msgstr "@var{replace}と@var{visit}が@code{nil}なら、@code{insert-file-contents}で(FIFOやI/Oデバイスのような)スペシャルファイルの読み取りが可能。"

#. type: defun
#: original_texis/files.texi:583
#, no-wrap
msgid "insert-file-contents-literally filename &optional visit beg end replace"
msgstr "insert-file-contents-literally filename &optional visit beg end replace"

#. type: defun
#: original_texis/files.texi:588
msgid "This function works like @code{insert-file-contents} except that it does not run @code{after-insert-file-functions}, and does not do format decoding, character code conversion, automatic uncompression, and so on."
msgstr "この関数は@code{insert-file-contents}のように機能するが、@code{after-insert-file-functions}を実行せずフォーマットのデコード、文字コード変換、自動解凍、...などを行わない点が異なる。"

#. type: Plain text
#: original_texis/files.texi:593
msgid "If you want to pass a file name to another process so that another program can read the file, use the function @code{file-local-copy}; see @ref{Magic File Names}."
msgstr "他のプログラムがファイルを読めるように他プロセスにファイル名を渡したければ関数@code{file-local-copy}を使用します。@ref{Magic File Names}を参照してください。"

#. type: cindex
#: original_texis/files.texi:596
#, no-wrap
msgid "writing to files"
msgstr "writing to files"

#. type: Plain text
#: original_texis/files.texi:603
msgid "You can write the contents of a buffer, or part of a buffer, directly to a file on disk using the @code{append-to-file} and @code{write-region} functions.  Don't use these functions to write to files that are being visited; that could cause confusion in the mechanisms for visiting."
msgstr "関数@code{append-to-file}と@code{write-region}を使用することによってディスク上のファイルにバッファーのコンテンツやバッファーの一部を直接書き込むことができます。visitされているファイルに書き込むためにこれらの関数を使用しないでください。これによってvisitにたいするメカニズムが混乱するかもしれません。"

#. type: deffn
#: original_texis/files.texi:604
#, no-wrap
msgid "Command append-to-file start end filename"
msgstr "Command append-to-file start end filename"

#. type: deffn
#: original_texis/files.texi:609
msgid "This function appends the contents of the region delimited by @var{start} and @var{end} in the current buffer to the end of file @var{filename}.  If that file does not exist, it is created.  This function returns @code{nil}."
msgstr "この関数はカレントバッファー内で@var{start}と@var{end}によるリージョンのコンテンツをファイル@var{filename}の終端に追加する。そのファイルが存在しなければ作成する。この関数は@code{nil}をリターンする。"

#. type: deffn
#: original_texis/files.texi:612
msgid "An error is signaled if @var{filename} specifies a nonwritable file, or a nonexistent file in a directory where files cannot be created."
msgstr "@var{filename}に書込不可能なファイルやファイルを作成不可なディレクトリー内の存在しないファイルを指定するとエラーがシグナルされる。"

#. type: deffn
#: original_texis/files.texi:614
msgid "When called from Lisp, this function is completely equivalent to:"
msgstr "Lispから呼び出した場合、この関数は以下と完全に等価:"

#. type: example
#: original_texis/files.texi:617
#, no-wrap
msgid "(write-region start end filename t)\n"
msgstr "(write-region start end filename t)\n"

#. type: deffn
#: original_texis/files.texi:620
#, no-wrap
msgid "Command write-region start end filename &optional append visit lockname mustbenew"
msgstr "Command write-region start end filename &optional append visit lockname mustbenew"

#. type: deffn
#: original_texis/files.texi:623
msgid "This function writes the region delimited by @var{start} and @var{end} in the current buffer into the file specified by @var{filename}."
msgstr "この関数はカレントバッファー内の@var{start}と@var{end}で区切られたリージョンを@var{filename}で指定されたファイルに書き込む。"

#. type: deffn
#: original_texis/files.texi:627
msgid "If @var{start} is @code{nil}, then the command writes the entire buffer contents (@emph{not} just the accessible portion) to the file and ignores @var{end}."
msgstr "@var{start}が@code{nil}なら、このコマンドはバッファーのコンテンツ全体(アクセス可能な@emph{範囲だけではない})をファイルに書き込んで@var{end}は無視する。"

#. type: deffn
#: original_texis/files.texi:632
msgid "If @var{start} is a string, then @code{write-region} writes or appends that string, rather than text from the buffer.  @var{end} is ignored in this case."
msgstr "@var{start}が文字列なら、@code{write-region}はバッファーのテキストではなくその文字列を追加する。その場合には@var{end}は無視される。"

#. type: deffn
#: original_texis/files.texi:637
msgid "If @var{append} is non-@code{nil}, then the specified text is appended to the existing file contents (if any).  If @var{append} is a number, @code{write-region} seeks to that byte offset from the start of the file and writes the data from there."
msgstr "@var{append}が非@code{nil}なら、指定されたテキストが(もしあれば)既存のファイルコンテンツに追加される。@var{append}が数字なら@code{write-region}はファイル開始位置からそのバイトオフセットをseekしてデータをそこに書き込む。"

# pointed-to fileの訳注は以下を参照
# https://books.google.co.jp/books?id=o9K8KEQic5sC&pg=PA105&lpg=PA105&dq=what+is+%22pointed-to+file%22&source=bl&ots=lYUX0698mz&sig=ACfU3U3m4dvB-WroL51o8bue11wL6QzvKA&hl=ja&sa=X&ved=2ahUKEwj-s7DE9L7oAhWpyYsBHc-hC8kQ6AEwBHoECAgQAQ#v=onepage&q=what%20is%20%22pointed-to%20file%22&f=false
#. type: deffn
#: original_texis/files.texi:646
msgid "If @var{mustbenew} is non-@code{nil}, then @code{write-region} asks for confirmation if @var{filename} names an existing file.  If @var{mustbenew} is the symbol @code{excl}, then @code{write-region} does not ask for confirmation, but instead it signals an error @code{file-already-exists} if the file already exists.  Although @code{write-region} normally follows a symbolic link and creates the pointed-to file if the symbolic link is dangling, it does not follow symbolic links if @var{mustbenew} is @code{excl}."
msgstr "@var{mustbenew}が非@code{nil}の場合には、@var{filename}が既存ファイルの名前なら@code{write-region}は確認を求める。@var{mustbenew}がシンボル@code{excl}なら、ファイルがすでに存在する場合には@code{write-region}は確認を求めるかわりにエラー@code{file-already-exists}をシグナルする。たとえ@code{write-region}が通常はシンボリックリンクをフォローして、もしシンボリックリンクが壊れていればpointed-toファイル(訳注: ファイルへのハードリンクにたいするポインター)を作成するとしても、@var{mustbenew}が@code{excl}ならシンボリックリンクをフォローしない。"

#. type: deffn
#: original_texis/files.texi:651
msgid "The test for an existing file, when @var{mustbenew} is @code{excl}, uses a special system feature.  At least for files on a local disk, there is no chance that some other program could create a file of the same name before Emacs does, without Emacs's noticing."
msgstr "@var{mustbenew}が@code{excl}のときは、存在するファイルのテストに特別なシステム機能を使用する。少なくともローカルディスク上のファイルにたいしては、Emacsがファイルを作成する前にEmacsに通知せずに他のプログラムが同じ名前のファイルを作成することはありえない。"

#. type: deffn
#: original_texis/files.texi:658
msgid "If @var{visit} is @code{t}, then Emacs establishes an association between the buffer and the file: the buffer is then visiting that file.  It also sets the last file modification time for the current buffer to @var{filename}'s modtime, and marks the buffer as not modified.  This feature is used by @code{save-buffer}, but you probably should not use it yourself."
msgstr "@var{visit}が@code{t}なら、Emacsはバッファーとファイルの関連付けを設定してそのバッファーがそのファイルをvictiする。またカレントバッファーにたいする最終ファイル変更日時に@var{filename}をセットして、そのバッファーを未変更としてマークする。この機能は@code{save-buffer}により使用されるが、おそらくあなた自身が使用するべきではないだろう。"

#. type: deffn
#: original_texis/files.texi:667
msgid "If @var{visit} is a string, it specifies the file name to visit.  This way, you can write the data to one file (@var{filename}) while recording the buffer as visiting another file (@var{visit}).  The argument @var{visit} is used in the echo area message and also for file locking; @var{visit} is stored in @code{buffer-file-name}.  This feature is used to implement @code{file-precious-flag}; don't use it yourself unless you really know what you're doing."
msgstr "@var{visit}が文字列なら、それはvisitするファイルの名前を指定する。この方法を使えば、そのバッファーが別のファイルをvisitしていると記録しつつ1つのファイル(@var{filename})にデータを書き込むことができる。引数@var{visit}はエコーエリアに使用される他にファイルのロックにも使用され、@var{visit}が@code{buffer-file-name}に格納される。この機能は@code{file-precious-flag}の実装に使用される。自分が何をしているか本当にわかっているのでなければこれを使用してはならない。"

#. type: deffn
#: original_texis/files.texi:671
msgid "The optional argument @var{lockname}, if non-@code{nil}, specifies the file name to use for purposes of locking and unlocking, overriding @var{filename} and @var{visit} for that purpose."
msgstr "オプション引数@var{lockname}が非@code{nil}なら、それはロックとアンロックの目的に使用する@var{filename}と@var{visit}をオーバーライドするファイル名を指定する。"

#. type: deffn
#: original_texis/files.texi:677
msgid "The function @code{write-region} converts the data which it writes to the appropriate file formats specified by @code{buffer-file-format} and also calls the functions in the list @code{write-region-annotate-functions}.  @xref{Format Conversion}."
msgstr "関数@code{write-region}は書き込むデータを@code{buffer-file-format}によって指定される適切なファイルフォーマットに変換しするとともに、リスト@code{write-region-annotate-functions}内の関数の呼び出しも行う。@ref{Format Conversion}を参照のこと。"

#. type: deffn
#: original_texis/files.texi:684
msgid "Normally, @code{write-region} displays the message @samp{Wrote @var{filename}} in the echo area.  This message is inhibited if @var{visit} is neither @code{t} nor @code{nil} nor a string, or if Emacs is operating in batch mode (@pxref{Batch Mode}).  This feature is useful for programs that use files for internal purposes, files that the user does not need to know about."
msgstr "@code{write-region}は通常はエコーエリア内にメッセージ@samp{Wrote @var{filename}}を表示する。@var{visit}が@code{t}、@code{nil}、文字列のいずれでもない場合、こまたはEmacsがbatchモード(@ref{Batch Mode}を参照)で処理中ならこのメッセージは抑制される。この機能は内部的な目的のためにユーザーが知る必要がないファイルを使用したり、Emacsがbatchモードで処理中に有用である。"

#. type: defvar
#: original_texis/files.texi:686
#, no-wrap
msgid "write-region-inhibit-fsync"
msgstr "write-region-inhibit-fsync"

#. type: defvar
#: original_texis/files.texi:693
msgid "If this variable's value is @code{nil}, @code{write-region} uses the @code{fsync} system call after writing a file.  Although this slows Emacs down, it lessens the risk of data loss after power failure.  If the value is @code{t}, Emacs does not use @code{fsync}.  The default value is @code{nil} when Emacs is interactive, and @code{t} when Emacs runs in batch mode.  @xref{Files and Storage}."
msgstr "この変数の値が@code{nil}なら@code{write-region}はファイル書き込み後にシステムコール@code{fsync}を使用する。これはたとえEmacsを低速化するとしても、電源喪失時のデータ損失リスクを軽減する。値が@code{t}ならEmacsは@code{fsync}を使用しない。デフォルト値はEmacsが対話的に実行されていれば@code{nil}、batchモードで実行時には@code{t}。@ref{Files and Storage}を参照のこと。"

#. type: defmac
#: original_texis/files.texi:695
#, no-wrap
msgid "with-temp-file file body@dots{}"
msgstr "with-temp-file file body@dots{}"

#. type: anchor{#1}
#: original_texis/files.texi:703
msgid "Definition of with-temp-file"
msgstr "Definition of with-temp-file"

#. type: defmac
#: original_texis/files.texi:703
msgid "The @code{with-temp-file} macro evaluates the @var{body} forms with a temporary buffer as the current buffer; then, at the end, it writes the buffer contents into file @var{file}.  It kills the temporary buffer when finished, restoring the buffer that was current before the @code{with-temp-file} form.  Then it returns the value of the last form in @var{body}."
msgstr "@code{with-temp-file}マクロは一時バッファー(temporary buffer)をカレントバッファーとして@var{body}フォームを評価して、最後にそのバッファーのコンテンツを@var{file}に書き込む。これは終了時に一時バッファーをkillして、@code{with-temp-file}フォームの前にカレントだったバッファーをリストアする。その後に@var{body}内の最後のフォームの値をリターンする。"

#. type: defmac
#: original_texis/files.texi:706
msgid "The current buffer is restored even in case of an abnormal exit via @code{throw} or error (@pxref{Nonlocal Exits})."
msgstr "@code{throw}やエラーによる異常なexit(abnormal exit)でも、カレントバッファーはリストアされる(@ref{Nonlocal Exits}を参照)。"

#. type: defmac
#: original_texis/files.texi:709
msgid "See also @code{with-temp-buffer} in @ref{Definition of with-temp-buffer,, The Current Buffer}."
msgstr "@ref{Definition of with-temp-buffer,, The Current Buffer}の@code{with-temp-buffer}も参照のこと。"

#. type: cindex
#: original_texis/files.texi:713
#, no-wrap
msgid "file locks"
msgstr "file locks"

#. type: cindex
#: original_texis/files.texi:714
#, no-wrap
msgid "lock file"
msgstr "lock file"

#. type: Plain text
#: original_texis/files.texi:725
msgid "When two users edit the same file at the same time, they are likely to interfere with each other.  Emacs tries to prevent this situation from arising by recording a @dfn{file lock} when a file is being modified.  Emacs can then detect the first attempt to modify a buffer visiting a file that is locked by another Emacs job, and ask the user what to do.  The file lock is really a file, a symbolic link with a special name, stored in the same directory as the file you are editing.  (On file systems that do not support symbolic links, a regular file is used.)"
msgstr "2人のユーザーが同時に同じファイルを編集する際、おそらく彼らは互いに干渉しあうことになるでしょう。Emacsはファイルが変更される際に@dfn{ファイルロック(file lock)}を記録することによって、このような状況の発生を防ぎます。そしてEmacsは他のEmacsジョブにロックされているファイルをvisitしているバッファーへの変更の最初の試みを検知して、ユーザーに何を行うか尋ねます。このファイルロックの実態は、編集中のファイルと同じディレクトリーに格納される特別な名前をもつシンボリックリンクです(シンボリックリンクをサポートしないファイルシステムでは通常ファイルが使用される)。"

#. type: Plain text
#: original_texis/files.texi:733
msgid "When you access files using NFS, there may be a small probability that you and another user will both lock the same file simultaneously.  If this happens, it is possible for the two users to make changes simultaneously, but Emacs will still warn the user who saves second.  Also, the detection of modification of a buffer visiting a file changed on disk catches some cases of simultaneous editing; see @ref{Modification Time}."
msgstr "ファイルのアクセスにNFSを使用する際には、可能性は小さいものの他のユーザーと同じファイルを同時にロックするかもしれません。これが発生すると2人のユーザーが同時にファイルを変更することが可能になりますが、それでもEmacsは2番目に保存するユーザーにたいして警告を発するでしょう。たファイルをvisitしているバッファーでディスク上でファイルの変更を検知することにより、ある種の同時編集を捕捉できます。@ref{Modification Time}を参照してください。"

#. type: defun
#: original_texis/files.texi:734
#, no-wrap
msgid "file-locked-p filename"
msgstr "file-locked-p filename"

#. type: defun
#: original_texis/files.texi:739
msgid "This function returns @code{nil} if the file @var{filename} is not locked.  It returns @code{t} if it is locked by this Emacs process, and it returns the name of the user who has locked it if it is locked by some other job."
msgstr "この関数はファイル@var{filename}がロックされていなければ@code{nil}をリターンする。このEmacsプロセスによりロックされていれば@code{t}、他のEmacsジョブによりロックされている場合はロックしたユーザーの名前をリターンする。"

#. type: group
#: original_texis/files.texi:744
#, no-wrap
msgid ""
"(file-locked-p \"foo\")\n"
"     @result{} nil\n"
msgstr ""
"(file-locked-p \"foo\")\n"
"     @result{} nil\n"

#. type: defun
#: original_texis/files.texi:748
#, no-wrap
msgid "lock-buffer &optional filename"
msgstr "lock-buffer &optional filename"

#. type: defun
#: original_texis/files.texi:754
msgid "This function locks the file @var{filename}, if the current buffer is modified.  The argument @var{filename} defaults to the current buffer's visited file.  Nothing is done if the current buffer is not visiting a file, or is not modified, or if the option @code{create-lockfiles} is @code{nil}."
msgstr "この関数はカレントバッファーが変更されていればファイル@var{filename}をロックする。引数@var{filename}のデフォルトはカレントバッファーがvisitしているファイル。カレントバッファーがファイルをvisitしていない、バッファーが変更されていない、または@code{create-lockfiles}が@code{nil}なら何もしない。"

#. type: defun
#: original_texis/files.texi:756
#, no-wrap
msgid "unlock-buffer"
msgstr "unlock-buffer"

#. type: defun
#: original_texis/files.texi:761
msgid "This function unlocks the file being visited in the current buffer, if the buffer is modified.  If the buffer is not modified, then the file should not be locked, so this function does nothing.  It also does nothing if the current buffer is not visiting a file, or is not locked."
msgstr "この関数はカレントバッファーが変更されていればバッファーによりvisitされているファイルをアンロックする。バッファーが変更されていなければ、そのファイルをロックしてはならないのでこの関数は何もしない。カレントバッファーがファイルをvisitしていない、またはファイルがロックされていなければこの関数は何もしない。"

#. type: defopt
#: original_texis/files.texi:763
#, no-wrap
msgid "create-lockfiles"
msgstr "create-lockfiles"

#. type: defopt
#: original_texis/files.texi:765
msgid "If this variable is @code{nil}, Emacs does not lock files."
msgstr "この変数が@code{nil}ならEmacsはファイルをロックしない。"

#. type: defun
#: original_texis/files.texi:767
#, no-wrap
msgid "ask-user-about-lock file other-user"
msgstr "ask-user-about-lock file other-user"

#. type: defun
#: original_texis/files.texi:772
msgid "This function is called when the user tries to modify @var{file}, but it is locked by another user named @var{other-user}.  The default definition of this function asks the user to say what to do.  The value this function returns determines what Emacs does next:"
msgstr "この関数はユーザーが@var{file}の変更を試みたが、それが名前@var{other-user}のユーザーにロックされていたとき呼び出される。この関数のデフォルト定義は何を行うかユーザーに尋ねる関数。この関数がリターンする値はEmacsが次に何を行うかを決定する:"

#. type: itemize
#: original_texis/files.texi:777
msgid "A value of @code{t} says to grab the lock on the file.  Then this user may edit the file and @var{other-user} loses the lock."
msgstr "値@code{t}はそのファイルのロックを奪うことを意味する。その場合には@var{other-user}はロックを失い、そのユーザーがファイルを編集することができる。"

#. type: itemize
#: original_texis/files.texi:781
msgid "A value of @code{nil} says to ignore the lock and let this user edit the file anyway."
msgstr "値@code{nil}はロックを無視して、とにかくユーザーがファイルを編集できるようにすることを意味する。"

#. type: kindex
#: original_texis/files.texi:783
#, no-wrap
msgid "file-locked"
msgstr "file-locked"

#. type: itemize
#: original_texis/files.texi:786
msgid "This function may instead signal a @code{file-locked} error, in which case the change that the user was about to make does not take place."
msgstr "この関数はかわりにエラー@code{file-locked}をシグナルする。この場合には、ユーザーが行おうとしていた変更は行われない。"

#. type: itemize
#: original_texis/files.texi:788
msgid "The error message for this error looks like this:"
msgstr "このエラーにたいするエラーメッセージは以下のようになる:"

#. type: example
#: original_texis/files.texi:791
#, no-wrap
msgid "@error{} File is locked: @var{file} @var{other-user}\n"
msgstr "@error{} File is locked: @var{file} @var{other-user}\n"

#. type: itemize
#: original_texis/files.texi:796
msgid "where @code{file} is the name of the file and @var{other-user} is the name of the user who has locked the file."
msgstr "ここで@code{file}はファイル名、@var{other-user}はそのファイルのロックを所有するユーザーの名前。"

#. type: defun
#: original_texis/files.texi:800
msgid "If you wish, you can replace the @code{ask-user-about-lock} function with your own version that makes the decision in another way."
msgstr "望むなら他の方法で判定を行う独自バージョンで@code{ask-user-about-lock}関数を置き換えることができる。"

#. type: cindex
#: original_texis/files.texi:804
#, no-wrap
msgid "file, information about"
msgstr "file, information about"

#. type: Plain text
#: original_texis/files.texi:811
msgid "This section describes the functions for retrieving various types of information about files (or directories or symbolic links), such as whether a file is readable or writable, and its size.  These functions all take arguments which are file names.  Except where noted, these arguments need to specify existing files, or an error is signaled."
msgstr "このセクションではファイル(またはディレクトリーやシンボリックリンク)に関してファイルが読み込み可能か、書き込み可能か、あるいはファイルのサイズのようなさまざまなタイプの情報を取得する関数を説明します。これらの関数はすべて引数にファイルの名前を受け取ります。特に注記した場合を除きこれらの引数には既存のファイルを指定する必要があり、ファイルが存在しなければエラーをシグナルします。"

#. type: cindex
#: original_texis/files.texi:812
#, no-wrap
msgid "file names, trailing whitespace"
msgstr "file names, trailing whitespace"

#. type: cindex
#: original_texis/files.texi:813
#, no-wrap
msgid "trailing blanks in file names"
msgstr "trailing blanks in file names"

#. type: Plain text
#: original_texis/files.texi:817
msgid "Be careful with file names that end in spaces.  On some filesystems (notably, MS-Windows), trailing whitespace characters in file names are silently and automatically ignored."
msgstr "スペースで終わるファイル名には気をつけてください。いくつかのファイルシステム(特にMS-Windows)では、ファイル名の末尾の空白文字は暗黙かつ自動的に無視されます。"

#. type: subsection
#: original_texis/files.texi:825 original_texis/files.texi:827
#: original_texis/files.texi:828
#, no-wrap
msgid "Testing Accessibility"
msgstr "Testing Accessibility"

#. type: menuentry
#: original_texis/files.texi:825
msgid "Is a given file readable? Writable?"
msgstr "そのファイルは読み取り可能か? 書き込み可能か?"

#. type: node
#: original_texis/files.texi:825 original_texis/files.texi:979
#, no-wrap
msgid "Kinds of Files"
msgstr "Kinds of Files"

#. type: menuentry
#: original_texis/files.texi:825
msgid "Is it a directory? A symbolic link?"
msgstr "それはディレクトリー? それともシンボリックリンク?"

#. type: subsection
#: original_texis/files.texi:825 original_texis/files.texi:1100
#: original_texis/files.texi:1101
#, no-wrap
msgid "Truenames"
msgstr "Truenames"

#. type: menuentry
#: original_texis/files.texi:825
msgid "Eliminating symbolic links from a file name."
msgstr "シンボリックリンクの最終的なファイル名。"

#. type: subsection
#: original_texis/files.texi:825 original_texis/files.texi:1211
#: original_texis/files.texi:1212
#, no-wrap
msgid "File Attributes"
msgstr "File Attributes"

#. type: menuentry
#: original_texis/files.texi:825
msgid "File sizes, modification times, etc."
msgstr "ファイルのサイズや更新日時など。"

#. type: node
#: original_texis/files.texi:825 original_texis/files.texi:1436
#, no-wrap
msgid "Extended Attributes"
msgstr "Extended Attributes"

#. type: menuentry
#: original_texis/files.texi:825
msgid "Extended file attributes for access control."
msgstr "アクセス制御にたいするファイル属性の拡張。"

#. type: node
#: original_texis/files.texi:825 original_texis/files.texi:1502
#, no-wrap
msgid "Locating Files"
msgstr "Locating Files"

#. type: menuentry
#: original_texis/files.texi:825
msgid "How to find a file in standard places."
msgstr "標準的な場所でファイルを見つける方法。"

#. type: cindex
#: original_texis/files.texi:829
#, no-wrap
msgid "accessibility of a file"
msgstr "accessibility of a file"

#. type: cindex
#: original_texis/files.texi:830
#, no-wrap
msgid "file accessibility"
msgstr "file accessibility"

#. type: Plain text
#: original_texis/files.texi:835
msgid "These functions test for permission to access a file for reading, writing, or execution.  Unless explicitly stated otherwise, they follow symbolic links.  @xref{Kinds of Files}."
msgstr "以下の関数はファイルにたいする読み取り、書き込み、実行のパーミッションをテストします。これらの関数は明示しない限りボリックリンクをフォローします。@ref{Kinds of Files}を参照してください。"

#. type: Plain text
#: original_texis/files.texi:840
msgid "On some operating systems, more complex sets of access permissions can be specified, via mechanisms such as Access Control Lists (ACLs).  @xref{Extended Attributes}, for how to query and set those permissions."
msgstr "いくつかのオペレーティングシステムではACL(Access Control Lists: アクセス制御リスト)のような機構を通じて、より複雑なアクセスパーミッションセットが指定できます。それらのパーミッションにたいする問い合わせやセットの方法については@ref{Extended Attributes}を参照してください。"

#. type: defun
#: original_texis/files.texi:841
#, no-wrap
msgid "file-exists-p filename"
msgstr "file-exists-p filename"

#. type: defun
#: original_texis/files.texi:848
msgid "This function returns @code{t} if a file named @var{filename} appears to exist.  This does not mean you can necessarily read the file, only that you can find out its attributes.  (On GNU and other POSIX-like systems, this is true if the file exists and you have execute permission on the containing directories, regardless of the permissions of the file itself.)"
msgstr "この関数はファイル名@var{filename}が存在しているようなら@code{t}をリターンする。これはファイルが読み取り可能である必要はなく、ファイルの属性を調べることが可能なこと意味する(Unixやその他のPOSIXシステム類ではファイルが存在してファイルを含むディレクトリーの実行パーミッションをもつ場合にはファイル自体のパーミッションに関わらず@code{t})。"

#. type: defun
#: original_texis/files.texi:851
msgid "If the file does not exist, or if access control policies prevent you from finding its attributes, this function returns @code{nil}."
msgstr "ファイルが存在しない、またはACLポリシーがファイル属性を調べることを禁止する場合には、この関数は@code{nil}をリターンする。"

#. type: defun
#: original_texis/files.texi:856
msgid "Directories are files, so @code{file-exists-p} can return @code{t} when given a directory.  However, because @code{file-exists-p} follows symbolic links, it returns @code{t} for a symbolic link name only if the target file exists."
msgstr "ディレクトリーはファイルなので、ディレクトリーが与えられると@code{file-exists-p}は@code{t}をリターンするかもしれない。しかし@code{file-exists-p}はシンボリックリンクをフォローするので、ターゲットファイルが存在する場合のみシンボリックリンク名にたいして@code{t}をリターンする。"

#. type: defun
#: original_texis/files.texi:858
#, no-wrap
msgid "file-readable-p filename"
msgstr "file-readable-p filename"

#. type: defun
#: original_texis/files.texi:861
msgid "This function returns @code{t} if a file named @var{filename} exists and you can read it.  It returns @code{nil} otherwise."
msgstr "この関数は@var{filename}という名前のファイルが存在して、それを読み取ることが可能なら@code{t}、それ以外は@code{nil}をリターンする。"

#. type: defun
#: original_texis/files.texi:863
#, no-wrap
msgid "file-executable-p filename"
msgstr "file-executable-p filename"

#. type: defun
#: original_texis/files.texi:869
msgid "This function returns @code{t} if a file named @var{filename} exists and you can execute it.  It returns @code{nil} otherwise.  On GNU and other POSIX-like systems, if the file is a directory, execute permission means you can check the existence and attributes of files inside the directory, and open those files if their modes permit."
msgstr "この関数は、@var{filename}という名前のファイルが存在して、それを実行することが可能なら@code{t}をリターンする。それ以外は@code{nil}をリターンする。Unixやその他のPOSIXシステム類ではファイルがディレクトリーなら実行パーミッションはディレクトリー内のファイルの存在と属性をチェックできるので、ファイルのモードが許せばオープンできることを意味する。"

#. type: defun
#: original_texis/files.texi:871
#, no-wrap
msgid "file-writable-p filename"
msgstr "file-writable-p filename"

#. type: defun
#: original_texis/files.texi:877
msgid "This function returns @code{t} if the file @var{filename} can be written or created by you, and @code{nil} otherwise.  A file is writable if the file exists and you can write it.  It is creatable if it does not exist, but the specified directory does exist and you can write in that directory."
msgstr "この関数は@var{filename}という名前のファイルが書き込み可能か作成可能可能なら@code{t}、それ以外は@code{nil}をリターンする。ファイルが存在してそれに書き込むことができるならファイルは書き込み可能。ファイルが存在せず、指定されたディレクトリーが存在して、そのディレクトリーに書き込むことができるなら書き込み可能。"

#. type: defun
#: original_texis/files.texi:881
msgid "In the example below, @file{foo} is not writable because the parent directory does not exist, even though the user could create such a directory."
msgstr "以下の例では、@file{foo}は親ディレクトリーが存在しないので、たとえユーザーがそのディレクトリーを作成可能であってもファイルは書き込み可能ではない。"

#. type: group
#: original_texis/files.texi:886
#, no-wrap
msgid ""
"(file-writable-p \"~/no-such-dir/foo\")\n"
"     @result{} nil\n"
msgstr ""
"(file-writable-p \"~/no-such-dir/foo\")\n"
"     @result{} nil\n"

#. type: defun
#: original_texis/files.texi:890
#, no-wrap
msgid "file-accessible-directory-p dirname"
msgstr "file-accessible-directory-p dirname"

#. type: defun
#: original_texis/files.texi:897
msgid "This function returns @code{t} if you have permission to open existing files in the directory whose name as a file is @var{dirname}; otherwise (or if there is no such directory), it returns @code{nil}.  The value of @var{dirname} may be either a directory name (such as @file{/foo/}) or the file name of a file which is a directory (such as @file{/foo}, without the final slash)."
msgstr "この関数はファイルとしての名前が@var{dirname}であるようなディレクトリー内にある既存のファイルをオープンするパーミッションをもつ場合は@code{t}、それ以外(またはそのようなディレクトリーが存在しない場合)は@code{nil}をリターンする。@var{dirname}の値はディレクトリー名(@file{/foo/}など)、または名前がディレクトリー(最後のスラッシュがない@file{/foo}など)であるようなファイル。"

#. type: defun
#: original_texis/files.texi:900
msgid "For example, from the following we deduce that any attempt to read a file in @file{/foo/} will give an error:"
msgstr "たとえば以下では@file{/foo/}内の任意のファイルを読み取る試みはエラーになると推測できる:"

#. type: example
#: original_texis/files.texi:904
#, no-wrap
msgid ""
"(file-accessible-directory-p \"/foo\")\n"
"     @result{} nil\n"
msgstr ""
"(file-accessible-directory-p \"/foo\")\n"
"     @result{} nil\n"

#. type: defun
#: original_texis/files.texi:907
#, no-wrap
msgid "access-file filename string"
msgstr "access-file filename string"

#. type: defun
#: original_texis/files.texi:911
msgid "This function opens file @var{filename} for reading, then closes it and returns @code{nil}.  However, if the open fails, it signals an error using @var{string} as the error message text."
msgstr "この関数は読み取り用にファイル@var{filename}をオープンして、クローズした後に@code{nil}をリターンする。しかしオープンに失敗すると、@var{string}をエラーメッセージのテキストに使用してエラーをシグナルする。"

#. type: defun
#: original_texis/files.texi:913
#, no-wrap
msgid "file-ownership-preserved-p filename &optional group"
msgstr "file-ownership-preserved-p filename &optional group"

#. type: defun
#: original_texis/files.texi:917
msgid "This function returns @code{t} if deleting the file @var{filename} and then creating it anew would keep the file's owner unchanged.  It also returns @code{t} for nonexistent files."
msgstr "この関数はファイル@var{filename}を削除後に新たに作成してもファイルの所有者が変更されずに維持されるようなら@code{t}をリターンする。これは存在しないファイルにたいしても@code{t}をリターンする。"

#. type: defun
#: original_texis/files.texi:920
msgid "If the optional argument @var{group} is non-@code{nil}, this function also checks that the file's group would be unchanged."
msgstr "オプション引数@var{group}が非@code{nil}なら、この関数はファイルのグループが変更されないこともチェックする。"

#. type: defun
#: original_texis/files.texi:922
msgid "This function does not follow symbolic links."
msgstr "この関数はシンボリックリンクをフォローしない。"

#. type: defun
#: original_texis/files.texi:924
#, no-wrap
msgid "file-modes filename"
msgstr "file-modes filename"

#. type: cindex
#: original_texis/files.texi:925
#, no-wrap
msgid "mode bits"
msgstr "mode bits"

#. type: cindex
#: original_texis/files.texi:926
#, no-wrap
msgid "file permissions"
msgstr "file permissions"

#. type: cindex
#: original_texis/files.texi:927 original_texis/files.texi:1799
#, no-wrap
msgid "permissions, file"
msgstr "permissions, file"

#. type: cindex
#: original_texis/files.texi:928
#, no-wrap
msgid "file modes"
msgstr "file modes"

#. type: defun
#: original_texis/files.texi:933
msgid "This function returns the @dfn{mode bits} of @var{filename}---an integer summarizing its read, write, and execution permissions.  This function follows symbolic links.  If the file does not exist, the return value is @code{nil}."
msgstr "この関数は@var{filename}の@dfn{モードビット(mode bits)}をリターンする。これは読み取り、書き込み、実行パーミッションを要約する整数。この関数はシンボリックリンクを許容する。ファイルが存在しなければリターン値は@code{nil}。"

#. type: defun
#: original_texis/files.texi:941
msgid "@xref{File permissions,,, coreutils, The @sc{gnu} @code{Coreutils} Manual}, for a description of mode bits.  For example, if the low-order bit is 1, the file is executable by all users; if the second-lowest-order bit is 1, the file is writable by all users; etc.  The highest possible value is 4095 (7777 octal), meaning that everyone has read, write, and execute permission, the @acronym{SUID} bit is set for both others and group, and the sticky bit is set."
msgstr "モードビットの説明は@ref{File permissions,,, coreutils, The @sc{gnu} @code{Coreutils} Manual}を参照のこと。たとえば最下位ビットが1ならそのファイルは実行可能、2ビット目が1なら書き込み可能、...となる。設定できる最大の値は4095(8進の7777)であり、これはすべてのユーザーが読み取り、書き込み、実行のパーミッションをもち、他のユーザーとグループにたいして@acronym{SUID}ビット、およびstickyビットがセットされる。"

#. type: defun
#: original_texis/files.texi:944
msgid "@xref{Changing Files}, for the @code{set-file-modes} function, which can be used to set these permissions."
msgstr "これらのパーミッションのセットに使用される@code{set-file-modes}関数については@ref{Changing Files}を参照のこと。"

#. type: group
#: original_texis/files.texi:949
#, no-wrap
msgid ""
"(file-modes \"~/junk/diffs\")\n"
"     @result{} 492               ; @r{Decimal integer.}\n"
msgstr ""
"(file-modes \"~/junk/diffs\")\n"
"     @result{} 492               ; @r{10進整数}\n"

#. type: group
#: original_texis/files.texi:953
#, no-wrap
msgid ""
"(format \"%o\" 492)\n"
"     @result{} \"754\"             ; @r{Convert to octal.}\n"
msgstr ""
"(format \"%o\" 492)\n"
"     @result{} \"754\"             ; @r{8進に変換した値}\n"

#. type: group
#: original_texis/files.texi:958
#, no-wrap
msgid ""
"(set-file-modes \"~/junk/diffs\" #o666)\n"
"     @result{} nil\n"
msgstr ""
"(set-file-modes \"~/junk/diffs\" #o666)\n"
"     @result{} nil\n"

#. type: group
#: original_texis/files.texi:963
#, no-wrap
msgid ""
"$ ls -l diffs\n"
"-rw-rw-rw- 1 lewis lewis 3063 Oct 30 16:00 diffs\n"
msgstr ""
"$ ls -l diffs\n"
"-rw-rw-rw- 1 lewis lewis 3063 Oct 30 16:00 diffs\n"

#. type: cindex
#: original_texis/files.texi:966
#, no-wrap
msgid "MS-DOS and file modes"
msgstr "MS-DOS and file modes"

#. type: cindex
#: original_texis/files.texi:967
#, no-wrap
msgid "file modes and MS-DOS"
msgstr "file modes and MS-DOS"

#. type: defun
#: original_texis/files.texi:977
msgid "@strong{MS-DOS note:} On MS-DOS, there is no such thing as an executable file mode bit.  So @code{file-modes} considers a file executable if its name ends in one of the standard executable extensions, such as @file{.com}, @file{.bat}, @file{.exe}, and some others.  Files that begin with the POSIX-standard @samp{#!} signature, such as shell and Perl scripts, are also considered executable.  Directories are also reported as executable, for compatibility with POSIX@.  These conventions are also followed by @code{file-attributes} (@pxref{File Attributes})."
msgstr "@strong{MS-DOSにたいする注意:} MS-DOSでは実行可能であることをを表すようなファイルのモードビットは存在しない。そのため@code{file-modes}はファイル名が@file{.com}、@file{.bat}、@file{.exe}などのような標準的な実行可能な拡張子のいずれかで終わる場合にはファイルを実行可能であると判断する。POSIX標準の@samp{#!}署名で始まるshellスクリプトやPerlスクリプトも実行可能と判断される。POSIXとの互換性のためにディレクトリーも実行可能と報告される。@code{file-attributes} (@ref{File Attributes}を参照)もこれらの慣習にしたがう。"

#. type: subsection
#: original_texis/files.texi:980
#, no-wrap
msgid "Distinguishing Kinds of Files"
msgstr "Distinguishing Kinds of Files"

#. type: cindex
#: original_texis/files.texi:981
#, no-wrap
msgid "file classification"
msgstr "file classification"

#. type: cindex
#: original_texis/files.texi:982
#, no-wrap
msgid "classification of file types"
msgstr "classification of file types"

#. type: cindex
#: original_texis/files.texi:983 original_texis/files.texi:997
#, no-wrap
msgid "symbolic links"
msgstr "symbolic links"

#. type: Plain text
#: original_texis/files.texi:987
msgid "This section describes how to distinguish various kinds of files, such as directories, symbolic links, and ordinary files."
msgstr "このセクションではディレクトリー、シンボリックリンク、および通常ファイルのようなさまざまな種類のファイルを区別する方法を説明します。"

#. type: Plain text
#: original_texis/files.texi:995
msgid "Symbolic links are ordinarily followed wherever they appear.  For example, to interpret the file name @file{a/b/c}, any of @file{a}, @file{a/b}, and @file{a/b/c} can be symbolic links that are followed, possibly recursively if the link targets are themselves symbolic links.  However, a few functions do not follow symbolic links at the end of a file name (@file{a/b/c} in this example).  Such a function is said to @dfn{not follow symbolic links}."
msgstr "シンボリックリンクは通常はそれが出現した場合には常にフォローされます。たとえばファイル名@file{a/b/c}を解釈するためにシンボリックリンクかもしれない@file{a}、@file{a/b}、@file{a/b/c}はすべてフォローされて、リンクターゲット自身がシンボリックリンクなら再帰的にフォローされるかもしれません。しかしいくつかの関数は最後のファイル名(この例では@file{a/b/c})ではシンボリックリンクをフォローしません。そのような関数のことを@dfn{シンボリックリンク非フォロー(not follow symbolic links)}と呼びます。"

#. type: defun
#: original_texis/files.texi:996
#, no-wrap
msgid "file-symlink-p filename"
msgstr "file-symlink-p filename"

#. type: defun
#: original_texis/files.texi:1003
msgid "If the file @var{filename} is a symbolic link, this function does not follow it and instead returns its link target as a string.  (The link target string is not necessarily the full absolute file name of the target; determining the full file name that the link points to is nontrivial, see below.)"
msgstr "ファイル@var{filename}がシンボリックリンクなら@code{file-symlink-p}関数はリンクをフォローせずに、かわりにリンクターゲットを文字列としてリターンする(リンクターゲット文字列はターゲットの完全な絶対ファイル名である必要はない。リンクが指すのが完全なファイル名かどうかを判断するのは簡単な処理ではない。以下参照)。"

#. type: defun
#: original_texis/files.texi:1006
msgid "If the file @var{filename} is not a symbolic link, or does not exist, @code{file-symlink-p} returns @code{nil}."
msgstr "ファイル@var{filename}がシンボリックリンクではない、または存在しなければ@code{file-symlink-p}は@code{nil}をリターンする。"

#. type: defun
#: original_texis/files.texi:1008
msgid "Here are a few examples of using this function:"
msgstr "この関数の使用例をいくつか示す:"

#. type: group
#: original_texis/files.texi:1013
#, no-wrap
msgid ""
"(file-symlink-p \"not-a-symlink\")\n"
"     @result{} nil\n"
msgstr ""
"(file-symlink-p \"not-a-symlink\")\n"
"     @result{} nil\n"

#. type: group
#: original_texis/files.texi:1017
#, no-wrap
msgid ""
"(file-symlink-p \"sym-link\")\n"
"     @result{} \"not-a-symlink\"\n"
msgstr ""
"(file-symlink-p \"sym-link\")\n"
"     @result{} \"not-a-symlink\"\n"

#. type: group
#: original_texis/files.texi:1021
#, no-wrap
msgid ""
"(file-symlink-p \"sym-link2\")\n"
"     @result{} \"sym-link\"\n"
msgstr ""
"(file-symlink-p \"sym-link2\")\n"
"     @result{} \"sym-link\"\n"

#. type: group
#: original_texis/files.texi:1025
#, no-wrap
msgid ""
"(file-symlink-p \"/bin\")\n"
"     @result{} \"/pub/bin\"\n"
msgstr ""
"(file-symlink-p \"/bin\")\n"
"     @result{} \"/pub/bin\"\n"

#. type: defun
#: original_texis/files.texi:1033
msgid "Note that in the third example, the function returned @file{sym-link}, but did not proceed to resolve it, although that file is itself a symbolic link.  That is because this function does not follow symbolic links---the process of following the symbolic links does not apply to the last component of the file name."
msgstr "3つ目の例では関数は@file{sym-link}をリターンするが、たとえそれ自体がシンボリックリンクであってもリンク先の解決を行わないことに注意。これは関数がシンボリックリンクをフォローしない、すなわちシンボリックリンクをフォローする処理はファイル名の最後のコンポーネントには適用されないからである。"

#. type: defun
#: original_texis/files.texi:1040
msgid "The string that this function returns is what is recorded in the symbolic link; it may or may not include any leading directories.  This function does @emph{not} expand the link target to produce a fully-qualified file name, and in particular does not use the leading directories, if any, of the @var{filename} argument if the link target is not an absolute file name.  Here's an example:"
msgstr "この関数がリターンするのはそのシンボリックリンクに何が記録されているかを示す文字列であり、それにディレクトリー部分が含まれているかどうかは構わない。この関数は完全修飾されたファイル名を生成するためにリンクターゲットを@emph{展開しない}し、リンクターゲットが絶対ファイル名でなければ、(もしあっても)@var{filename}引数のディレクトリー部分は使用しない。以下に例を示す:"

#. type: group
#: original_texis/files.texi:1045
#, no-wrap
msgid ""
"(file-symlink-p \"/foo/bar/baz\")\n"
"     @result{} \"some-file\"\n"
msgstr ""
"(file-symlink-p \"/foo/bar/baz\")\n"
"     @result{} \"some-file\"\n"

#. type: defun
#: original_texis/files.texi:1055
msgid "Here, although @file{/foo/bar/baz} was given as a fully-qualified file name, the result is not, and in fact does not have any leading directories at all.  And since @file{some-file} might itself be a symbolic link, you cannot simply prepend leading directories to it, nor even naively use @code{expand-file-name} (@pxref{File Name Expansion}) to produce its absolute file name."
msgstr "ここでは、たとえ与えられた@file{/foo/bar/baz}が完全修飾されたファイル名であるにも関わらずその結果は異なり、実際には何のディレクトリー部分ももたない。@file{some-file}自体がシンボリックリンクかもしれないので、単にその前に先行ディレクトリーを追加することはできず、絶対ファイル名を生成するために単に@code{expand-file-name} (@ref{File Name Expansion}を参照)を使用することもできないからである。"

#. type: defun
#: original_texis/files.texi:1061
msgid "For this reason, this function is seldom useful if you need to determine more than just the fact that a file is or isn't a symbolic link.  If you actually need the file name of the link target, use @code{file-chase-links} or @code{file-truename}, described in @ref{Truenames}."
msgstr "この理由により、あるファイルがシンボリックリンクか否かという単一の事実よりも多くを判定する必要がある場合にこの関数が有用であることは稀である。実際にリンクターゲットのファイル名が必要なら、@ref{Truenames}で説明する@code{file-chase-links}や@code{file-truename}を使用すること。"

#. type: defun
#: original_texis/files.texi:1063
#, no-wrap
msgid "file-directory-p filename"
msgstr "file-directory-p filename"

#. type: defun
#: original_texis/files.texi:1067
msgid "This function returns @code{t} if @var{filename} is the name of an existing directory, @code{nil} otherwise.  This function follows symbolic links."
msgstr "この関数は@var{filename}が既存のディレクトリー名なら@code{t}、それ以外は@code{nil}をリターンする。この関数はシンボリックリンクをフォローする。"

#. type: group
#: original_texis/files.texi:1072
#, no-wrap
msgid ""
"(file-directory-p \"~rms\")\n"
"     @result{} t\n"
msgstr ""
"(file-directory-p \"~rms\")\n"
"     @result{} t\n"

#. type: group
#: original_texis/files.texi:1076
#, no-wrap
msgid ""
"(file-directory-p \"~rms/lewis/files.texi\")\n"
"     @result{} nil\n"
msgstr ""
"(file-directory-p \"~rms/lewis/files.texi\")\n"
"     @result{} nil\n"

#. type: group
#: original_texis/files.texi:1080
#, no-wrap
msgid ""
"(file-directory-p \"~rms/lewis/no-such-file\")\n"
"     @result{} nil\n"
msgstr ""
"(file-directory-p \"~rms/lewis/no-such-file\")\n"
"     @result{} nil\n"

#. type: group
#: original_texis/files.texi:1084
#, no-wrap
msgid ""
"(file-directory-p \"$HOME\")\n"
"     @result{} nil\n"
msgstr ""
"(file-directory-p \"$HOME\")\n"
"     @result{} nil\n"

#. type: group
#: original_texis/files.texi:1089
#, no-wrap
msgid ""
"(file-directory-p\n"
" (substitute-in-file-name \"$HOME\"))\n"
"     @result{} t\n"
msgstr ""
"(file-directory-p\n"
" (substitute-in-file-name \"$HOME\"))\n"
"     @result{} t\n"

#. type: defun
#: original_texis/files.texi:1093
#, no-wrap
msgid "file-regular-p filename"
msgstr "file-regular-p filename"

#. type: defun
#: original_texis/files.texi:1098
msgid "This function returns @code{t} if the file @var{filename} exists and is a regular file (not a directory, named pipe, terminal, or other I/O device).  This function follows symbolic links."
msgstr "この関数はファイル@var{filename}が存在して、それが通常ファイル(ディレクトリー、名前付きパイプ、端末、その他I/Oデバイス以外)なら@code{t}をリターンする。この関数はシンボリックリンクをフォローする。"

#. type: cindex
#: original_texis/files.texi:1102
#, no-wrap
msgid "truename (of file)"
msgstr "truename (of file)"

#. type: Plain text
#: original_texis/files.texi:1111
msgid "The @dfn{truename} of a file is the name that you get by following symbolic links at all levels until none remain, then simplifying away @samp{.}@: and @samp{..}@: appearing as name components.  This results in a sort of canonical name for the file.  A file does not always have a unique truename; the number of distinct truenames a file has is equal to the number of hard links to the file.  However, truenames are useful because they eliminate symbolic links as a cause of name variation."
msgstr "ファイルの@dfn{実名(truename)}とは、全階層においてシンボリックリンクを残らずフォローした後に名前コンポーネントに出現する@samp{.}と@samp{..}を除いて簡略化した名前のことです。これはそのファイルにたいする正規名(canonical name)の一種です。ファイルが常に一意な実名をもつ訳ではありません。あるファイルにたいする異なる実名の個数は、そのファイルにたいするハードリンクの個数と同じです。しかし実名はシンボリックリンクによる名前の変動を解消するのに有用です。"

#. type: defun
#: original_texis/files.texi:1112
#, no-wrap
msgid "file-truename filename"
msgstr "file-truename filename"

#. type: defun
#: original_texis/files.texi:1116
msgid "This function returns the truename of the file @var{filename}.  If the argument is not an absolute file name, this function first expands it against @code{default-directory}."
msgstr "この関数はファイル@var{filename}の実名をリターンする。引数が絶対ファイル名でなければ、この関数は最初に@code{default-directory}にたいしてこれを展開する。"

#. type: defun
#: original_texis/files.texi:1120
msgid "This function does not expand environment variables.  Only @code{substitute-in-file-name} does that.  @xref{Definition of substitute-in-file-name}."
msgstr "この関数は環境変数を展開しない。これを行うのは@code{substitute-in-file-name}のみ。@ref{Definition of substitute-in-file-name}を参照のこと。"

#. type: defun
#: original_texis/files.texi:1129
msgid "If you may need to follow symbolic links preceding @samp{..}@: appearing as a name component, call @code{file-truename} without prior direct or indirect calls to @code{expand-file-name}.  Otherwise, the file name component immediately preceding @samp{..} will be simplified away before @code{file-truename} is called.  To eliminate the need for a call to @code{expand-file-name}, @code{file-truename} handles @samp{~} in the same way that @code{expand-file-name} does."
msgstr "名前コンポーネントに出現する@samp{..}に先行するシンボリックリンクリンクをフォローする必要がある場合には直接と間接を問わず、@code{expand-file-name}を呼び出す前に@code{file-truename}を呼び出すこと。そうしないと@samp{..}の直前にある名前コンポーネントは、@code{file-truename}が呼び出される前の簡略化により取り除かれてしまう。@code{expand-file-name}呼び出しの必要を無くすために、@code{file-truename}は@code{expand-file-name}が行うのと同じ方法で@samp{~}を扱う。@ref{File Name Expansion,, Functions that Expand Filenames}を参照のこと。"

#. type: defun
#: original_texis/files.texi:1133
msgid "If the target of a symbolic links has remote file name syntax, @code{file-truename} returns it quoted.  @xref{File Name Expansion,, Functions that Expand Filenames}."
msgstr "シンボリックリンクのターゲットがリモートファイル名の構文をもつ場合には、@code{file-truename}はそれをクォートしてリターンする。@ref{File Name Expansion,, Functions that Expand Filenames}を参照のこと。"

#. type: defun
#: original_texis/files.texi:1135
#, no-wrap
msgid "file-chase-links filename &optional limit"
msgstr "file-chase-links filename &optional limit"

#. type: defun
#: original_texis/files.texi:1140
msgid "This function follows symbolic links, starting with @var{filename}, until it finds a file name which is not the name of a symbolic link.  Then it returns that file name.  This function does @emph{not} follow symbolic links at the level of parent directories."
msgstr "この関数は@var{filename}で始まるシンボリックリンクを、シンボリックリンクではない名前のファイル名までフォローして、そのファイル名をリターンする。この関数は親ディレクトリーの階層にあるシンボリックリンクを@emph{フォローしない}。"

#. type: defun
#: original_texis/files.texi:1144
msgid "If you specify a number for @var{limit}, then after chasing through that many links, the function just returns what it has even if that is still a symbolic link."
msgstr "@var{limit}に数を指定するとその数のリンクを追跡した後、この関数はたとえそれが依然としてシンボリックリンクであってもそれをリターンする。"

#. type: Plain text
#: original_texis/files.texi:1151
msgid "To illustrate the difference between @code{file-chase-links} and @code{file-truename}, suppose that @file{/usr/foo} is a symbolic link to the directory @file{/home/foo}, and @file{/home/foo/hello} is an ordinary file (or at least, not a symbolic link) or nonexistent.  Then we would have:"
msgstr "@code{file-chase-links}と@code{file-truename}の違いを説明するために、@file{/usr/foo}がディレクトリー@file{/home/foo}へのシンボリックリンク、@file{/home/foo/hello}が(少なくともシンボリックリンクではない)通常ファイル、または存在しないファイルだとします。この場合には以下のようになります:"

#. type: example
#: original_texis/files.texi:1159
#, no-wrap
msgid ""
"(file-chase-links \"/usr/foo/hello\")\n"
"     ;; @r{This does not follow the links in the parent directories.}\n"
"     @result{} \"/usr/foo/hello\"\n"
"(file-truename \"/usr/foo/hello\")\n"
"     ;; @r{Assuming that @file{/home} is not a symbolic link.}\n"
"     @result{} \"/home/foo/hello\"\n"
msgstr ""
"(file-chase-links \"/usr/foo/hello\")\n"
"     ;; @r{親ディレクトリーのリンクはフォローしない}\n"
"     @result{} \"/usr/foo/hello\"\n"
"(file-truename \"/usr/foo/hello\")\n"
"     ;; @r{@file{/home}はシンボリックリンクではないと仮定}\n"
"     @result{} \"/home/foo/hello\"\n"

#. type: defun
#: original_texis/files.texi:1161
#, no-wrap
msgid "file-equal-p file1 file2"
msgstr "file-equal-p file1 file2"

#. type: defun
#: original_texis/files.texi:1167
msgid "This function returns @code{t} if the files @var{file1} and @var{file2} name the same file.  This is similar to comparing their truenames, except that remote file names are also handled in an appropriate manner.  If @var{file1} or @var{file2} does not exist, the return value is unspecified."
msgstr "この関数はファイル@var{file1}と@var{file2}の名前が同じファイルなら@code{t}をリターンする。これはリモートファイル名も適切な方法で処理することを除いて実名の比較と似ている。@var{file1}か@var{file2}が存在しなければリターン値は不定。"

#. type: defun
#: original_texis/files.texi:1169
#, no-wrap
msgid "file-name-case-insensitive-p filename"
msgstr "file-name-case-insensitive-p filename"

#. type: defun
#: original_texis/files.texi:1179
msgid "Sometimes file names or their parts need to be compared as strings, in which case it's important to know whether the underlying filesystem is case-insensitive.  This function returns @code{t} if file @var{filename} is on a case-insensitive filesystem.  It always returns @code{t} on MS-DOS and MS-Windows.  On Cygwin and macOS, filesystems may or may not be case-insensitive, and the function tries to determine case-sensitivity by a runtime test.  If the test is inconclusive, the function returns @code{t} on Cygwin and @code{nil} on macOS."
msgstr "ファイル名やその一部にたいして文字列としての比較を要する場合には、背景にあるファイルシステムが非caseセンシティブ(case-insensitive: 大文字小文字を区別しない)かどうかを知ることが重要になる。この関数はファイル@var{filename}が非caseセンシティブなファイルシステムにあれば@code{t}をリターンする。MS-DOSとMS-Windowsでは常に@code{t}をリターンする。CygwinとmacOSでは非caseセンシティブかもしれないので、実行時テストによりcaseセンシティブ性の判定を試みる。テストで決定されなければCygwinなら@code{t}、macOSなら@code{nil}をリターンする。"

#. type: defun
#: original_texis/files.texi:1186
msgid "Currently this function always returns @code{nil} on platforms other than MS-DOS, MS-Windows, Cygwin, and macOS.  It does not detect case-insensitivity of mounted filesystems, such as Samba shares or NFS-mounted Windows volumes.  On remote hosts, it assumes @code{t} for the @samp{smb} method.  For all other connection methods, runtime tests are performed."
msgstr "この関数は現在のところMS-DOS、MS-Windows、Cygwin、macOS以外のプラットフォームでは常に@code{nil}をリターンする。これはSamba共有やNFSマウントされたWindowsボリュームのようにマウントされたファイルシステムのcaseセンシティブ性は検知しない。リモートホストでは@samp{smb}メソッドにたいしては@code{t}とみなす。"

#. type: defun
#: original_texis/files.texi:1188
#, no-wrap
msgid "file-in-directory-p file dir"
msgstr "file-in-directory-p file dir"

#. type: defun
#: original_texis/files.texi:1194
msgid "This function returns @code{t} if @var{file} is a file in directory @var{dir}, or in a subdirectory of @var{dir}.  It also returns @code{t} if @var{file} and @var{dir} are the same directory.  It compares the truenames of the two directories.  If @var{dir} does not name an existing directory, the return value is @code{nil}."
msgstr "この関数は、@var{file}がディレクトリー@var{dir}内のファイルかサブディレクトリーなら@code{t}をリターンする。また@var{file}と@var{dir}が同じディレクトリーの場合も@code{t}をリターンする。この関数は2つのディレクトリーの実名を比較する。@var{dir}が既存のディレクトリーの名前でなければリターン値は@code{nil}。"

#. type: defun
#: original_texis/files.texi:1196
#, no-wrap
msgid "vc-responsible-backend file"
msgstr "vc-responsible-backend file"

#. type: defun
#: original_texis/files.texi:1205
msgid "This function determines the responsible VC backend of the given @var{file}.  For example, if @file{emacs.c} is a file tracked by Git, @w{@code{(vc-responsible-backend \"emacs.c\")}} returns @samp{Git}.  Note that if @var{file} is a symbolic link, @code{vc-responsible-backend} will not resolve it---the backend of the symbolic link file itself is reported.  To get the backend VC of the file to which @var{file} refers, wrap @var{file} with a symbolic link resolving function such as @code{file-chase-links}:"
msgstr "この関数は与えられた@var{file}にたいしてVCバックエンドが責任を負うかどうかを判断する。たとえば@file{emacs.c}がGitでトラック(track: 追跡)されていれば@w{@code{(vc-responsible-backend \"emacs.c\")}}は@samp{Git}をリターンする。@var{file}がシンボリックリンクなら@code{vc-responsible-backend}はシンボリックリンクを解決せずに、シンボリックリンクにたいするバックエンドが報告されることに注意。@var{file}が参照するファイルのバックエンドVCを取得するには、@code{file-chase-links}のようなシンボリックリンク解決用の関数で@var{file}をラップすること。"

#. type: smallexample
#: original_texis/files.texi:1208
#, no-wrap
msgid "(vc-responsible-backend (file-chase-links \"emacs.c\"))\n"
msgstr "(vc-responsible-backend (file-chase-links \"emacs.c\"))\n"

#. type: cindex
#: original_texis/files.texi:1213
#, no-wrap
msgid "file attributes"
msgstr "file attributes"

#. type: Plain text
#: original_texis/files.texi:1219
msgid "This section describes the functions for getting detailed information about a file, including the owner and group numbers, the number of names, the inode number, the size, and the times of access and modification."
msgstr "このセクションではファイルの詳細な情報を取得する関数について説明します。それらの情報にはファイルの所有者やグループの番号、ファイル名の個数、inode番号、サイズやアクセス日時、変更日時が含まれます。"

#. type: defun
#: original_texis/files.texi:1220
#, no-wrap
msgid "file-newer-than-file-p filename1 filename2"
msgstr "file-newer-than-file-p filename1 filename2"

#. type: cindex
#: original_texis/files.texi:1221
#, no-wrap
msgid "file age"
msgstr "file age"

#. type: cindex
#: original_texis/files.texi:1222
#, no-wrap
msgid "file modification time"
msgstr "file modification time"

#. type: defun
#: original_texis/files.texi:1227
msgid "This function returns @code{t} if the file @var{filename1} is newer than file @var{filename2}.  If @var{filename1} does not exist, it returns @code{nil}.  If @var{filename1} does exist, but @var{filename2} does not, it returns @code{t}."
msgstr "この関数はファイル@var{filename1}がファイル@var{filename2}より新しければ@code{t}をリターンする。@var{filename1}が存在しなければ@code{nil}、@var{filename1}は存在するが@var{filename2}が存在しなければ@code{t}をリターンする。"

#. type: defun
#: original_texis/files.texi:1231
msgid "In the following example, assume that the file @file{aug-19} was written on the 19th, @file{aug-20} was written on the 20th, and the file @file{no-file} doesn't exist at all."
msgstr "以下の例では、@file{aug-19}の書き込みが19日、@file{aug-20}の書き込みが20日、ファイル@file{no-file}は存在しないものとする。"

#. type: group
#: original_texis/files.texi:1236
#, no-wrap
msgid ""
"(file-newer-than-file-p \"aug-19\" \"aug-20\")\n"
"     @result{} nil\n"
msgstr ""
"(file-newer-than-file-p \"aug-19\" \"aug-20\")\n"
"     @result{} nil\n"

#. type: group
#: original_texis/files.texi:1240
#, no-wrap
msgid ""
"(file-newer-than-file-p \"aug-20\" \"aug-19\")\n"
"     @result{} t\n"
msgstr ""
"(file-newer-than-file-p \"aug-20\" \"aug-19\")\n"
"     @result{} t\n"

#. type: group
#: original_texis/files.texi:1244
#, no-wrap
msgid ""
"(file-newer-than-file-p \"aug-19\" \"no-file\")\n"
"     @result{} t\n"
msgstr ""
"(file-newer-than-file-p \"aug-19\" \"no-file\")\n"
"     @result{} t\n"

#. type: group
#: original_texis/files.texi:1248
#, no-wrap
msgid ""
"(file-newer-than-file-p \"no-file\" \"aug-19\")\n"
"     @result{} nil\n"
msgstr ""
"(file-newer-than-file-p \"no-file\" \"aug-19\")\n"
"     @result{} nil\n"

#. type: defun
#: original_texis/files.texi:1252
#, no-wrap
msgid "file-attributes filename &optional id-format"
msgstr "file-attributes filename &optional id-format"

#. type: anchor{#1}
#: original_texis/files.texi:1263
msgid "Definition of file-attributes"
msgstr "Definition of file-attributes"

#. type: defun
#: original_texis/files.texi:1263
msgid "This function returns a list of attributes of file @var{filename}.  If the specified file's attributes cannot be accessed, it returns @code{nil}.  This function does not follow symbolic links.  The optional parameter @var{id-format} specifies the preferred format of attributes @acronym{UID} and @acronym{GID} (see below)---the valid values are @code{'string} and @code{'integer}.  The latter is the default, but we plan to change that, so you should specify a non-@code{nil} value for @var{id-format} if you use the returned @acronym{UID} or @acronym{GID}."
msgstr "この関数はファイル@var{filename}の属性(attributes)のリストをリターンする。オープンできないファイルが指定された場合は、@code{nil}をリターンする。指定されたファイルの属性にアクセスできなければ@code{nil}をリターンする。この関数はシンボリックリンクをフォローしない。オプション引数@var{id-format}は属性@acronym{UID}と@acronym{GID}(以下参照)にたいして望ましいフォーマットを指定する。有効な値は@code{'string}と@code{'integer}。デフォルトは@code{'integer}だが、わたしたちはこれの変更を計画しているので、リターンされる@acronym{UID}や@acronym{GID}を使用する場合には@var{id-format}にたいして非@code{nil}値を指定すること。"

#. type: defun
#: original_texis/files.texi:1270
msgid "On GNU platforms when operating on a local file, this function is atomic: if the filesystem is simultaneously being changed by some other process, this function returns the file's attributes either before or after the change.  Otherwise this function is not atomic, and might return @code{nil} if it detects the race condition, or might return a hodgepodge of the previous and current file attributes."
msgstr "GNUプラットフォームではこの関数はロックファイル処理時はアトミックである。別のプロセスによりファイルシステムが同時に変更された場合には、この関数は変更の前か後のいずれかのファイル属性をリターンする。それ以外ならこの関数はアトミックではなく競合状態を検知したら@code{nil}、または以前とカレントが混ざったファイル属性をリターンするかもしれない。"

#. type: defun
#: original_texis/files.texi:1274
msgid "Accessor functions are provided to access the elements in this list.  The accessors are mentioned along with the descriptions of the elements below."
msgstr "このリスト内の要素にアクセスするためにアクセッサ関数が提供される。このアクセッサ以下の要素の記述とともに示される。"

#. type: defun
#: original_texis/files.texi:1276
msgid "The elements of the list, in order, are:"
msgstr "リストの要素は順に:"

#. type: enumerate
#: original_texis/files.texi:1282
msgid "@code{t} for a directory, a string for a symbolic link (the name linked to), or @code{nil} for a text file (@code{file-attribute-type})."
msgstr "ディレクトリーにたいしては@code{t}、シンボリックリンクにたいしては文字列(リンクされる名前)、テキストファイル(@code{file-attribute-type})にたいしては@code{nil}。"

#. type: enumerate
#: original_texis/files.texi:1288
msgid "The number of names the file has (@code{file-attribute-link-number}).  Alternate names, also known as hard links, can be created by using the @code{add-name-to-file} function (@pxref{Changing Files})."
msgstr "そのファイルがもつ名前の個数(@code{file-attribute-link-number})。ハードリンクとして知られる代替え名は関数@code{add-name-to-file}を使用して作成できる(@ref{Changing Files}を参照)。"

#. type: enumerate
#: original_texis/files.texi:1293
msgid "The file's @acronym{UID}, normally as a string (@code{file-attribute-user-id}).  However, if it does not correspond to a named user, the value is a number."
msgstr "ファイルの@acronym{UID}であり通常は文字列@code{file-attribute-user-id}。しかし名前をもつユーザーに対応しなければ値は整数。"

#. type: enumerate
#: original_texis/files.texi:1296
msgid "The file's @acronym{GID}, likewise (@code{file-attribute-group-id})."
msgstr "同様にファイルの@acronym{GID} (@code{file-attribute-group-id})。"

#. type: enumerate
#: original_texis/files.texi:1305
msgid "The time of last access, as a list of four integers @code{(@var{sec-high} @var{sec-low} @var{microsec} @var{picosec})} (@code{file-attribute-access-time}).  (This is similar to the value of @code{current-time}; see @ref{Time of Day}.)  The value is truncated to that of the filesystem's timestamp resolution; for example, on some FAT-based filesystems, only the date of last access is recorded, so this time will always hold the midnight of the day of the last access."
msgstr "最終アクセス時刻を表す4つの整数@code{(@var{sec-high} @var{sec-low} @var{microsec} @var{picosec})}からなるリスト(@code{file-attribute-access-time}。これは@code{current-time}の値と似ている。@ref{Time of Day}を参照)。値はファイルシステムのタイムスタンプの精度に切り詰められる。たとえばFATベースのいくつかのファイルシステムでは最終アクセスの日付だけが記録されるので、この時刻には常に最終アクセス日の真夜中が保持されることに注意。"

#. type: cindex
#: original_texis/files.texi:1306
#, no-wrap
msgid "modification time of file"
msgstr "modification time of file"

#. type: enumerate
#: original_texis/files.texi:1311
msgid "The time of last modification as a list of four integers (as above)  (@code{file-attribute-modification-time}).  This is the last time when the file's contents were modified."
msgstr "最終変更時刻を表す4つの整数からなるリスト(@code{file-attribute-modification-time}。上記参照)。これはファイルのコンテンツが変更された最終時刻。"

#. type: enumerate
#: original_texis/files.texi:1318
msgid "The time of last status change as a list of four integers (as above)  (@code{file-attribute-status-change-time}).  This is the time of the last change to the file's access mode bits, its owner and group, and other information recorded in the filesystem for the file, beyond the file's contents."
msgstr "ステータスの最終変更時刻を表す4つの整数からなるリスト(@code{file-attribute-status-change-time}。上記参照)。これはファイルのアクセスモードビット、所有者とグループ、およびファイルにたいしてファイルのコンテンツ以外にファイルシステムが記録するその他の情報にたいする最終変更時刻。"

#. type: enumerate
#: original_texis/files.texi:1322
msgid "The size of the file in bytes (@code{file-attribute-size}).  This is floating point if the size is too large to fit in a Lisp integer."
msgstr "ファイルのバイトサイズ(@code{file-attribute-size})。Lisp整数の範囲を超える大きさのサイズでは浮動小数点数。"

#. type: enumerate
#: original_texis/files.texi:1326
msgid "The file's modes, as a string of ten letters or dashes, as in @samp{ls -l} (@code{file-attribute-modes})."
msgstr "@samp{ls -l}で表示されるような10個の文字、またはダッシュからなる文字列で表されるファイルのモード(@code{file-attribute-modes})。"

#. type: enumerate
#: original_texis/files.texi:1329
msgid "An unspecified value, present for backward compatibility."
msgstr "後方互換のために提供される不定値。"

#. type: enumerate
#: original_texis/files.texi:1340
msgid "The file's inode number (@code{file-attribute-inode-number}).  If possible, this is an integer.  If the inode number is too large to be represented as an integer in Emacs Lisp but dividing it by @math{2^{16}} yields a representable integer, then the value has the form @code{(@var{high} . @var{low})}, where @var{low} holds the low 16 bits.  If the inode number is too wide for even that, the value is of the form @code{(@var{high} @var{middle} . @var{low})}, where @code{high} holds the high bits, @var{middle} the middle 24 bits, and @var{low} the low 16 bits."
msgstr "ファイルのinode番号(@code{file-attribute-inode-number})。可能な場合には整数。Emacs Lispの整数として表せる範囲より大きいinode番号は、整数で表現可能な値を得るために@math{2^{16}}で除されて@code{(@var{high} . @var{low})}という形式の値になる。ここで@var{low}は下位16ビット。それにたいしてさえinode番号が大きければ値は@code{(@var{high} @var{middle} . @var{low})}という形式になる。ここで@code{high}は上位ビット、@var{middle}は中位24ビット、@var{low}は下位16ビットを保持する。"

#. type: enumerate
#: original_texis/files.texi:1349
msgid "The filesystem number of the device that the file is on @code{file-attribute-device-number}).  Depending on the magnitude of the value, this can be either an integer or a cons cell, in the same manner as the inode number.  This element and the file's inode number together give enough information to distinguish any two files on the system---no two files can have the same values for both of these numbers."
msgstr "そのファイルがあるデバイスのファイルシステム番号(@code{file-attribute-device-number})。その大きさにより値は整数、またはinode番号と同じ様式のコンスセル。この要素とファイルのinode番号を併せればシステム上の2つを区別するのに足る情報が得られる(2つのファイルがこれら両方の番号で同じ値をもつことはできない)。"

#. type: defun
#: original_texis/files.texi:1352
msgid "For example, here are the file attributes for @file{files.texi}:"
msgstr "たとえば以下は@file{files.texi}のファイル属性:"

#. type: group
#: original_texis/files.texi:1363
#, no-wrap
msgid ""
"(file-attributes \"files.texi\" 'string)\n"
"     @result{}  (nil 1 \"lh\" \"users\"\n"
"          (20614 64019 50040 152000)\n"
"          (20000 23 0 0)\n"
"          (20614 64555 902289 872000)\n"
"          122295 \"-rw-rw-rw-\"\n"
"          t (5888 2 . 43978)\n"
"          (15479 . 46724))\n"
msgstr ""
"(file-attributes \"files.texi\" 'string)\n"
"     @result{}  (nil 1 \"lh\" \"users\"\n"
"          (20614 64019 50040 152000)\n"
"          (20000 23 0 0)\n"
"          (20614 64555 902289 872000)\n"
"          122295 \"-rw-rw-rw-\"\n"
"          t (5888 2 . 43978)\n"
"          (15479 . 46724))\n"

#. type: defun
#: original_texis/files.texi:1368
msgid "and here is how the result is interpreted:"
msgstr "この結果を解釈すると:"

#. type: item
#: original_texis/files.texi:1370
#, no-wrap
msgid "nil"
msgstr "nil"

#. type: table
#: original_texis/files.texi:1372
msgid "is neither a directory nor a symbolic link."
msgstr "ディレクトリーでもシンボリックリンクでもない。"

#. type: item
#: original_texis/files.texi:1373
#, no-wrap
msgid "1"
msgstr "1"

#. type: table
#: original_texis/files.texi:1376
msgid "has only one name (the name @file{files.texi} in the current default directory)."
msgstr "(カレントデフォルトディレクトリー内で名前@file{files.texi}は)単一の名前をもつ。"

#. type: item
#: original_texis/files.texi:1377
#, no-wrap
msgid "\"lh\""
msgstr "\"lh\""

#. type: table
#: original_texis/files.texi:1379
msgid "is owned by the user with name @samp{lh}."
msgstr "名前\"lh\"のユーザーにより所有される。"

#. type: item
#: original_texis/files.texi:1380
#, no-wrap
msgid "\"users\""
msgstr "\"users\""

#. type: table
#: original_texis/files.texi:1382
msgid "is in the group with name @samp{users}."
msgstr "名前\"users\"のグループ。"

#. type: item
#: original_texis/files.texi:1383
#, no-wrap
msgid "(20614 64019 50040 152000)"
msgstr "(20614 64019 50040 152000)"

#. type: table
#: original_texis/files.texi:1385
msgid "was last accessed on October 23, 2012, at 20:12:03.050040152 UTC."
msgstr "最終アクセスがOctober 23, 2012, at 20:12:03.050040152 UTC。"

#. type: item
#: original_texis/files.texi:1386
#, no-wrap
msgid "(20000 23 0 0)"
msgstr "(20000 23 0 0)"

#. type: table
#: original_texis/files.texi:1388
msgid "was last modified on July 15, 2001, at 08:53:43 UTC."
msgstr "最終更新がJuly 15, 2001, at 08:53:43 UTC。"

#. type: item
#: original_texis/files.texi:1389
#, no-wrap
msgid "(20614 64555 902289 872000)"
msgstr "(20614 64555 902289 872000)"

#. type: table
#: original_texis/files.texi:1391
msgid "last had its status changed on October 23, 2012, at 20:20:59.902289872 UTC."
msgstr "最終ステータス変更がOctober 23, 2012, at 20:20:59.902289872 UTC。"

#. type: item
#: original_texis/files.texi:1392
#, no-wrap
msgid "122295"
msgstr "122295"

#. type: table
#: original_texis/files.texi:1396
msgid "is 122295 bytes long.  (It may not contain 122295 characters, though, if some of the bytes belong to multibyte sequences, and also if the end-of-line format is CR-LF.)"
msgstr "バイト長は122295バイト(しかしマルチバイトシーケンスが含まれていたり、EOLフォーマットがCRLFなら122295文字は含まれないかもしれない)。"

#. type: item
#: original_texis/files.texi:1397
#, no-wrap
msgid "\"-rw-rw-rw-\""
msgstr "\"-rw-rw-rw-\""

#. type: table
#: original_texis/files.texi:1399
msgid "has a mode of read and write access for the owner, group, and world."
msgstr "所有者、グループ、その他にたいして読み取り、書き込みアクセスのモードをもつ。"

#. type: item
#: original_texis/files.texi:1400
#, no-wrap
msgid "t"
msgstr "t"

#. type: table
#: original_texis/files.texi:1402
msgid "is merely a placeholder; it carries no information."
msgstr "単なるプレースホルダーであり何の情報ももたない。"

#. type: item
#: original_texis/files.texi:1403
#, no-wrap
msgid "(5888 2 . 43978)"
msgstr "(5888 2 . 43978)"

#. type: table
#: original_texis/files.texi:1405
msgid "has an inode number of 6473924464520138."
msgstr "inode番号は6473924464520138。"

#. type: item
#: original_texis/files.texi:1406
#, no-wrap
msgid "(15479 . 46724)"
msgstr "(15479 . 46724)"

#. type: table
#: original_texis/files.texi:1408
msgid "is on the file-system device whose number is 1014478468."
msgstr "ファイルシステムのデバイス番号は1014478468。"

#. type: defun
#: original_texis/files.texi:1411
#, no-wrap
msgid "file-nlinks filename"
msgstr "file-nlinks filename"

#. type: defun
#: original_texis/files.texi:1417
msgid "This function returns the number of names (i.e., hard links) that file @var{filename} has.  If the file does not exist, this function returns @code{nil}.  Note that symbolic links have no effect on this function, because they are not considered to be names of the files they link to.  This function does not follow symbolic links."
msgstr "この関数はファイル@var{filename}がもつ名前(ハードリンク)の個数をリターンする。ファイルが存在しなければ、この関数は@code{nil}をリターンする。シンボリックリンクはリンク先のファイルの名前とは判断されないので、この関数に影響しないことに注意。この関数はシンボリックリンクをフォローしない。"

#. type: group
#: original_texis/files.texi:1423
#, no-wrap
msgid ""
"$ ls -l foo*\n"
"-rw-rw-rw- 2 rms rms 4 Aug 19 01:27 foo\n"
"-rw-rw-rw- 2 rms rms 4 Aug 19 01:27 foo1\n"
msgstr ""
"$ ls -l foo*\n"
"-rw-rw-rw- 2 rms rms 4 Aug 19 01:27 foo\n"
"-rw-rw-rw- 2 rms rms 4 Aug 19 01:27 foo1\n"

#. type: group
#: original_texis/files.texi:1428
#, no-wrap
msgid ""
"(file-nlinks \"foo\")\n"
"     @result{} 2\n"
msgstr ""
"(file-nlinks \"foo\")\n"
"     @result{} 2\n"

#. type: group
#: original_texis/files.texi:1432
#, no-wrap
msgid ""
"(file-nlinks \"doesnt-exist\")\n"
"     @result{} nil\n"
msgstr ""
"(file-nlinks \"doesnt-exist\")\n"
"     @result{} nil\n"

#. type: subsection
#: original_texis/files.texi:1437
#, no-wrap
msgid "Extended File Attributes"
msgstr "Extended File Attributes"

#. type: cindex
#: original_texis/files.texi:1438
#, no-wrap
msgid "extended file attributes"
msgstr "extended file attributes"

#. type: Plain text
#: original_texis/files.texi:1447
msgid "On some operating systems, each file can be associated with arbitrary @dfn{extended file attributes}.  At present, Emacs supports querying and setting two specific sets of extended file attributes: Access Control Lists (ACLs) and SELinux contexts.  These extended file attributes are used, on some systems, to impose more sophisticated file access controls than the basic Unix-style permissions discussed in the previous sections."
msgstr "いくつかのオペレーティングシステムでは、それぞれのファイルを任意の@dfn{拡張ファイル属性(extended file attributes)}に関連付けることができます。現在のところEmacsは拡張ファイル属性のうち2つの特定セット(ACL: Access Control List、およびSELinuxコンテキスト)にたいする問い合わせと設定をサポートします。これらの拡張ファイル属性は、前のセクションで議論したUnixスタイルの基本的なパーミッションより洗練されたファイルアクセス制御を強制するために、いくつかのシステムで利用されます。"

#. type: cindex
#: original_texis/files.texi:1448
#, no-wrap
msgid "access control list"
msgstr "access control list"

#. type: cindex
#: original_texis/files.texi:1449
#, no-wrap
msgid "ACL entries"
msgstr "ACL entries"

#. type: cindex
#: original_texis/files.texi:1450
#, no-wrap
msgid "SELinux context"
msgstr "SELinux context"

#. type: Plain text
#: original_texis/files.texi:1456
msgid "A detailed explanation of ACLs and SELinux is beyond the scope of this manual.  For our purposes, each file can be associated with an @dfn{ACL}, which specifies its properties under an ACL-based file control system, and/or an @dfn{SELinux context}, which specifies its properties under the SELinux system."
msgstr "ACLとSELinuxについての詳細な解説はこのマニュアルの範囲を超えています。わたしたちの目的のためには、それぞれのファイルは@dfn{ACL} (ACLベースのファイル制御システムの元でACLのプロパティを指定)および/または@dfn{SELinuxコンテキスト} (SELinuxシステムの元でSELinuxのプロパティを指定)に割り当てることができるという理解で問題ないでしょう。"

#. type: defun
#: original_texis/files.texi:1457
#, no-wrap
msgid "file-acl filename"
msgstr "file-acl filename"

#. type: defun
#: original_texis/files.texi:1462
msgid "This function returns the ACL for the file @var{filename}.  The exact Lisp representation of the ACL is unspecified (and may change in future Emacs versions), but it is the same as what @code{set-file-acl} takes for its @var{acl} argument (@pxref{Changing Files})."
msgstr "この関数はファイル@var{filename}にたいするACLをリターンする。ACLにたいする正確なLisp表現は不確定(かつ将来のEmacsバージョンで変更され得る)だが、これは@code{set-file-acl}が引数@var{acl}にとる値と同じである(@ref{Changing Files}を参照)。"

#. type: defun
#: original_texis/files.texi:1466
msgid "The underlying ACL implementation is platform-specific; on GNU/Linux and BSD, Emacs uses the POSIX ACL interface, while on MS-Windows Emacs emulates the POSIX ACL interface with native file security APIs."
msgstr "根底にあるACL実装はプラットフォームに固有である。EmacsはGNU/LinuxとBSDではPOSIX ACLインターフェイスを使用して、MS-WindowsではネイティブのファイルセキュリティAPIをPOSIX ACLインターフェイスでエミュレートする。"

#. type: defun
#: original_texis/files.texi:1470
msgid "If Emacs was not compiled with ACL support, or the file does not exist or is inaccessible, or Emacs was unable to determine the ACL entries for any other reason, then the return value is @code{nil}."
msgstr "ACLサポートなしでEmacsがコンパイルされた場合には、ファイルが存在しないかアクセス不能な場合、またはその他の理由によりEmacsがACLエントリーを判断できなければリターン値は@code{nil}。"

#. type: defun
#: original_texis/files.texi:1472
#, no-wrap
msgid "file-selinux-context filename"
msgstr "file-selinux-context filename"

#. type: defun
#: original_texis/files.texi:1480
msgid "This function returns the SELinux context of the file @var{filename}, as a list of the form @code{(@var{user} @var{role} @var{type} @var{range})}.  The list elements are the context's user, role, type, and range respectively, as Lisp strings; see the SELinux documentation for details about what these actually mean.  The return value has the same form as what @code{set-file-selinux-context} takes for its @var{context} argument (@pxref{Changing Files})."
msgstr "この関数はファイル@var{filename}のSELinuxコンテキストを@code{(@var{user} @var{role} @var{type} @var{range})}という形式のリストでリターンする。リストの要素はそのコンテキストのユーザー、ロール、タイプ、レンジを文字列として表す値である。これらの実際の意味についての詳細はSELinuxのドキュメントを参照のこと。リターン値は@code{set-file-selinux-context}が@var{context}引数で受け取るのと同じ形式(@ref{Changing Files}を参照)。"

#. type: defun
#: original_texis/files.texi:1484
msgid "If Emacs was not compiled with SELinux support, or the file does not exist or is inaccessible, or if the system does not support SELinux, then the return value is @code{(nil nil nil nil)}."
msgstr "SELinuxサポートなしでEmacsがコンパイルされた場合、ファイルが存在しないかアクセス不能な場合、またはシステムがSELinuxをサポートしなければリターン値は@code{(nil nil nil nil)}。"

#. type: defun
#: original_texis/files.texi:1486
#, no-wrap
msgid "file-extended-attributes filename"
msgstr "file-extended-attributes filename"

#. type: defun
#: original_texis/files.texi:1493
msgid "This function returns an alist of the Emacs-recognized extended attributes of file @var{filename}.  Currently, it serves as a convenient way to retrieve both the ACL and SELinux context; you can then call the function @code{set-file-extended-attributes}, with the returned alist as its second argument, to apply the same file access attributes to another file (@pxref{Changing Files})."
msgstr "この関数はEmacsが認識するファイル@var{filename}の拡張属性をalistでリターンする。現在のところこの関数はACLとSELinuxの両方を取得するための便利な方法としての役目を果たす。他のファイルに同じファイルアクセス属性を適用するためにリターンされたalistを2つ目の引数として@code{set-file-extended-attributes}を呼び出すことができる(@ref{Changing Files}を参照)。"

#. type: defun
#: original_texis/files.texi:1496
msgid "One of the elements is @code{(acl . @var{acl})}, where @var{acl} has the same form returned by @code{file-acl}."
msgstr "要素のうちの1つは@code{(acl . @var{acl})}で、@var{acl}は@code{file-acl}がリターンするのと同じ形式。"

#. type: defun
#: original_texis/files.texi:1500
msgid "Another element is @code{(selinux-context . @var{context})}, where @var{context} is the SELinux context, in the same form returned by @code{file-selinux-context}."
msgstr "他の要素は@code{(selinux-context . @var{context})}で、@var{context}は@code{file-selinux-context}がリターンするのと同じ形式。"

#. type: subsection
#: original_texis/files.texi:1503
#, no-wrap
msgid "Locating Files in Standard Places"
msgstr "Locating Files in Standard Places"

#. type: cindex
#: original_texis/files.texi:1504
#, no-wrap
msgid "locate file in path"
msgstr "locate file in path"

#. type: cindex
#: original_texis/files.texi:1505
#, no-wrap
msgid "find file in path"
msgstr "find file in path"

#. type: Plain text
#: original_texis/files.texi:1510
msgid "This section explains how to search for a file in a list of directories (a @dfn{path}), or for an executable file in the standard list of executable file directories."
msgstr "このセクションではディレクトリーのリスト(@dfn{パス(path)})からファイルを検索したり、標準の実行可能ファイル用ディレクトリーから実行可能ファイルを検索する方法を説明します。"

#. type: Plain text
#: original_texis/files.texi:1513
msgid "To search for a user-specific configuration file, @xref{Standard File Names}, for the @code{locate-user-emacs-file} function."
msgstr "ユーザー固有の設定ファイル(configuration file)の検索については@ref{Standard File Names}の関数@code{locate-user-emacs-file}を参照してください。"

#. type: defun
#: original_texis/files.texi:1514
#, no-wrap
msgid "locate-file filename path &optional suffixes predicate"
msgstr "locate-file filename path &optional suffixes predicate"

#. type: defun
#: original_texis/files.texi:1520
msgid "This function searches for a file whose name is @var{filename} in a list of directories given by @var{path}, trying the suffixes in @var{suffixes}.  If it finds such a file, it returns the file's absolute file name (@pxref{Relative File Names}); otherwise it returns @code{nil}."
msgstr "この関数は@var{path}で与えられるディレクトリーリスト内で@var{filename}という名前のファイルを検索して、@var{suffixes}内のサフィックスの検索を試みる。そのようなファイルが見つかったらファイルの絶対ファイル名(@ref{Relative File Names}を参照)、それ以外は@code{nil}をリターンする。"

#. type: defun
#: original_texis/files.texi:1530
msgid "The optional argument @var{suffixes} gives the list of file-name suffixes to append to @var{filename} when searching.  @code{locate-file} tries each possible directory with each of these suffixes.  If @var{suffixes} is @code{nil}, or @code{(\"\")}, then there are no suffixes, and @var{filename} is used only as-is.  Typical values of @var{suffixes} are @code{exec-suffixes} (@pxref{Subprocess Creation}), @code{load-suffixes}, @code{load-file-rep-suffixes} and the return value of the function @code{get-load-suffixes} (@pxref{Load Suffixes})."
msgstr "オプション引数@var{suffixes}は検索時に@var{filename}に追加するファイル名サフィックスのリストを与える。@code{locate-file}は検索するディレクトリーごとにそれらのサフィックスを試みる。@var{suffixes}が@code{nil}や@code{(\"\")}なら、サフィックスなしで@var{filename}だけがそのまま使用される。@var{suffixes}の典型的な値は@code{exec-suffixes} (@ref{Subprocess Creation}を参照)、@code{load-suffixes}、@code{load-file-rep-suffixes}、および関数@code{get-load-suffixes} (@ref{Load Suffixes}を参照)。"

#. type: defun
#: original_texis/files.texi:1536
msgid "Typical values for @var{path} are @code{exec-path} (@pxref{Subprocess Creation}) when looking for executable programs, or @code{load-path} (@pxref{Library Search}) when looking for Lisp files.  If @var{filename} is absolute, @var{path} has no effect, but the suffixes in @var{suffixes} are still tried."
msgstr "実行可能プログラムを探すときは@code{exec-path} (@ref{Subprocess Creation}を参照)、Lispファイルを探すときは@code{load-path} (@ref{Library Search}を参照)が@var{path}の典型的な値である。@var{filename}が絶対ファイル名なら@var{path}の効果はないが、サフィックスにたいする@var{suffixes}は依然として試行される。"

#. type: defun
#: original_texis/files.texi:1544
msgid "The optional argument @var{predicate}, if non-@code{nil}, specifies a predicate function for testing whether a candidate file is suitable.  The predicate is passed the candidate file name as its single argument.  If @var{predicate} is @code{nil} or omitted, @code{locate-file} uses @code{file-readable-p} as the predicate.  @xref{Kinds of Files}, for other useful predicates, e.g., @code{file-executable-p} and @code{file-directory-p}."
msgstr "オプション引数@var{predicate}が非@code{nil}なら、それは候補ファイルが適切かどうかテストする述語関数を指定する。述語関数には単一の引数として候補ファイル名が渡される。@var{predicate}が@code{nil}か省略なら述語として@code{file-readable-p}を使用する。@code{file-executable-p}や@code{file-directory-p}など、その他の有用な述語については@ref{Kinds of Files}を参照のこと。"

#. type: defun
#: original_texis/files.texi:1548
msgid "This function will normally skip directories, so if you want it to find directories, make sure the @var{predicate} function returns @code{dir-ok} for them.  For example:"
msgstr "この関数は通常はディレクトリーをスキップするので、ディレクトリーを探したければ、@var{predicate}関数がディレクトリーにたいして確実に@code{dir-ok}をリターンすること。たとえば:"

#. type: example
#: original_texis/files.texi:1552
#, no-wrap
msgid ""
"(locate-file \"html\" '(\"/var/www\" \"/srv\") nil\n"
"             (lambda (f) (if (file-directory-p f) 'dir-ok)))\n"
msgstr ""
"(locate-file \"html\" '(\"/var/www\" \"/srv\") nil\n"
"             (lambda (f) (if (file-directory-p f) 'dir-ok)))\n"

#. type: defun
#: original_texis/files.texi:1558
msgid "For compatibility, @var{predicate} can also be one of the symbols @code{executable}, @code{readable}, @code{writable}, @code{exists}, or a list of one or more of these symbols."
msgstr "互換性のために@var{predicate}には@code{executable}、@code{readable}、@code{writable}、@code{exists}、またはこれらシンボルの1つ以上のリストも指定できる。"

#. type: defun
#: original_texis/files.texi:1560
#, no-wrap
msgid "executable-find program"
msgstr "executable-find program"

#. type: defun
#: original_texis/files.texi:1567
msgid "This function searches for the executable file of the named @var{program} and returns the absolute file name of the executable, including its file-name extensions, if any.  It returns @code{nil} if the file is not found.  The functions searches in all the directories in @code{exec-path}, and tries all the file-name extensions in @code{exec-suffixes} (@pxref{Subprocess Creation})."
msgstr "この関数は@var{program}という名前の実行可能ファイルを検索して、その実行可能ファイルの絶対ファイル名と、もしあればファイル名の拡張子も含めてリターンする。ファイルが見つからなければ@code{nil}をリターンする。この関数は@code{exec-path}内のすべてのディレクトリーを検索して、@code{exec-suffixes}内のすべてのファイル名拡張子の検索も試みる(@ref{Subprocess Creation}を参照)。"

#. type: section
#: original_texis/files.texi:1570
#, no-wrap
msgid "Changing File Names and Attributes"
msgstr "Changing File Names and Attributes"

#. type: cindex
#: original_texis/files.texi:1572
#, no-wrap
msgid "copying files"
msgstr "copying files"

#. type: cindex
#: original_texis/files.texi:1573
#, no-wrap
msgid "deleting files"
msgstr "deleting files"

#. type: cindex
#: original_texis/files.texi:1574
#, no-wrap
msgid "linking files"
msgstr "linking files"

#. type: cindex
#: original_texis/files.texi:1575
#, no-wrap
msgid "setting modes of files"
msgstr "setting modes of files"

#. type: Plain text
#: original_texis/files.texi:1583
msgid "The functions in this section rename, copy, delete, link, and set the modes (permissions) of files.  Typically, they signal a @code{file-error} error if they fail to perform their function, reporting the system-dependent error message that describes the reason for the failure.  If they fail because a file is missing, they signal a @code{file-missing} error instead."
msgstr "このセクションの関数はファイルのリネーム、コピー、削除やリンク、モードをセットします。これらの関数は処理に失敗すると、通常は失敗の理由を記述するシステム依存のエラーメッセージを報告する@code{file-error}エラーをシグナルします。ファイルが存在しないために失敗すると、かわりに@code{file-missing}エラーをシグナルします。"

#. type: Plain text
#: original_texis/files.texi:1587
msgid "For performance, the operating system may cache or alias changes made by these functions instead of writing them immediately to secondary storage.  @xref{Files and Storage}."
msgstr "性能的な理由によりオペレーティングシステムはこれらの関数により行われた変更を2次記憶装置に書き込むかわりに、キャッシュしたりエイリアスするかもしれません。@ref{Files and Storage}を参照してください。"

#. type: Plain text
#: original_texis/files.texi:1597
msgid "In the functions that have an argument @var{newname}, if this argument is a directory name it is treated as if the nondirectory part of the source name were appended.  Typically, a directory name is one that ends in @samp{/} (@pxref{Directory Names}).  For example, if the old name is @file{a/b/c}, the @var{newname} @file{d/e/f/} is treated as if it were @file{d/e/f/c}.  This special treatment does not apply if @var{newname} is not a directory name but names a file that is a directory; for example, the @var{newname} @file{d/e/f} is left as-is even if @file{d/e/f} happens to be a directory."
msgstr "引数@var{newname}をもつ関数では、それがディレクトリー名ならsource名の非ディレクトリー部分が追加されたかのように扱われます。ディレクトリー名は通常は@samp{/}で終端されます(@ref{Directory Names}を参照)。たとえば@var{oldname}が@file{a/b/c}で@var{newname}が@file{d/e/f/}なら@file{d/e/f/c}であるかのように処理されます。@var{newname}がディレクトリー名ではなくディレクトリーであるような名前なら、この特別な扱いは適用されません。たとえば@var{newname}の@file{d/e/f}がディレクトリーでも、そのまま処理されます。"

#. type: Plain text
#: original_texis/files.texi:1601
msgid "In the functions that have an argument @var{newname}, if a file by the name of @var{newname} already exists, the actions taken depend on the value of the argument @var{ok-if-already-exists}:"
msgstr "@var{newname}という引数をもつ関数では、@var{newname}という名前のファイルが既に存在する場合には、その挙動が引数@var{ok-if-already-exists}の値に依存します。"

#. type: itemize
#: original_texis/files.texi:1606
msgid "Signal a @code{file-already-exists} error if @var{ok-if-already-exists} is @code{nil}."
msgstr "@var{ok-if-already-exists}が@code{nil}なら@code{file-already-exists}エラーがシグナルされる。"

#. type: itemize
#: original_texis/files.texi:1609
msgid "Request confirmation if @var{ok-if-already-exists} is a number."
msgstr "@var{ok-if-already-exists}が数字なら確認を求める。"

#. type: itemize
#: original_texis/files.texi:1613
msgid "Replace the old file without confirmation if @var{ok-if-already-exists} is any other value."
msgstr "@var{ok-if-already-exists}が他の値なら確認なしで古いファイルを置き換える。"

#. type: deffn
#: original_texis/files.texi:1615
#, no-wrap
msgid "Command add-name-to-file oldname newname &optional ok-if-already-exists"
msgstr "Command add-name-to-file oldname newname &optional ok-if-already-exists"

#. type: cindex
#: original_texis/files.texi:1616
#, no-wrap
msgid "file with multiple names"
msgstr "file with multiple names"

#. type: cindex
#: original_texis/files.texi:1617
#, no-wrap
msgid "file hard link"
msgstr "file hard link"

#. type: deffn
#: original_texis/files.texi:1621
msgid "This function gives the file named @var{oldname} the additional name @var{newname}.  This means that @var{newname} becomes a new hard link to @var{oldname}."
msgstr "この関数は、@var{oldname}という名前のファイルに@var{newname}という名前を追加で与える。これは@var{newname}という名前が@var{oldname}にたいする新たなハードリンクになることを意味する。"

#. type: deffn
#: original_texis/files.texi:1629
msgid "If @var{newname} is a symbolic link, its directory entry is replaced, not the directory entry it points to.  If @var{oldname} is a symbolic link, this function might or might not follow the link; it does not follow the link on GNU platforms.  If @var{oldname} is a directory, this function typically fails, although for the superuser on a few old-fashioned non-GNU platforms it can succeed and create a filesystem that is not tree-structured."
msgstr "@var{newname}がシンボリックリンクなら、リンクが指すディレクトリーエントリーではなく、シンボリックリンクリンクのディレクトリーエントリーが置き換えられる。@var{oldname}がシンボリックリンクなら、この関数はリンクをフォローする可能性があるが、GNUプラットフォームではリンクをフォローしない。@var{oldname}がディレクトリーなら、たとえ処理を正常に行ってツリー構造ではないファイルシステムを作成できる古い様式の非GNUプラットフォームのスーパーユーザーでも、この関数は通常は失敗する。"

#. type: deffn
#: original_texis/files.texi:1632
msgid "In the first part of the following example, we list two files, @file{foo} and @file{foo3}."
msgstr "以下の例の最初の部分では2つのファイル@file{foo}と@file{foo3}をリストする。"

#. type: group
#: original_texis/files.texi:1638
#, no-wrap
msgid ""
"$ ls -li fo*\n"
"81908 -rw-rw-rw- 1 rms rms 29 Aug 18 20:32 foo\n"
"84302 -rw-rw-rw- 1 rms rms 24 Aug 18 20:31 foo3\n"
msgstr ""
"$ ls -li fo*\n"
"81908 -rw-rw-rw- 1 rms rms 29 Aug 18 20:32 foo\n"
"84302 -rw-rw-rw- 1 rms rms 24 Aug 18 20:31 foo3\n"

#. type: deffn
#: original_texis/files.texi:1644
msgid "Now we create a hard link, by calling @code{add-name-to-file}, then list the files again.  This shows two names for one file, @file{foo} and @file{foo2}."
msgstr "ここで@code{add-name-to-file}を呼び出してハードリンクを作成して再度ファイルをリストする。このリストには1つのファイルにたいして2つの名前@file{foo}と@file{foo2}が表示される。"

#. type: group
#: original_texis/files.texi:1649
#, no-wrap
msgid ""
"(add-name-to-file \"foo\" \"foo2\")\n"
"     @result{} nil\n"
msgstr ""
"(add-name-to-file \"foo\" \"foo2\")\n"
"     @result{} nil\n"

#. type: group
#: original_texis/files.texi:1656
#, no-wrap
msgid ""
"$ ls -li fo*\n"
"81908 -rw-rw-rw- 2 rms rms 29 Aug 18 20:32 foo\n"
"81908 -rw-rw-rw- 2 rms rms 29 Aug 18 20:32 foo2\n"
"84302 -rw-rw-rw- 1 rms rms 24 Aug 18 20:31 foo3\n"
msgstr ""
"$ ls -li fo*\n"
"81908 -rw-rw-rw- 2 rms rms 29 Aug 18 20:32 foo\n"
"81908 -rw-rw-rw- 2 rms rms 29 Aug 18 20:32 foo2\n"
"84302 -rw-rw-rw- 1 rms rms 24 Aug 18 20:31 foo3\n"

#. type: deffn
#: original_texis/files.texi:1660
msgid "Finally, we evaluate the following:"
msgstr "最後に以下を評価する:"

#. type: example
#: original_texis/files.texi:1663
#, no-wrap
msgid "(add-name-to-file \"foo\" \"foo3\" t)\n"
msgstr "(add-name-to-file \"foo\" \"foo3\" t)\n"

#. type: deffn
#: original_texis/files.texi:1669
msgid "and list the files again.  Now there are three names for one file: @file{foo}, @file{foo2}, and @file{foo3}.  The old contents of @file{foo3} are lost."
msgstr "そしてファイルを再度リストする。今度は1つのファイルにたいして3つの名前@file{foo}、@file{foo2}、@file{foo3}がある。@file{foo3}の古いコンテンツは失われた。"

#. type: group
#: original_texis/files.texi:1674
#, no-wrap
msgid ""
"(add-name-to-file \"foo1\" \"foo3\")\n"
"     @result{} nil\n"
msgstr ""
"(add-name-to-file \"foo1\" \"foo3\")\n"
"     @result{} nil\n"

#. type: group
#: original_texis/files.texi:1681
#, no-wrap
msgid ""
"$ ls -li fo*\n"
"81908 -rw-rw-rw- 3 rms rms 29 Aug 18 20:32 foo\n"
"81908 -rw-rw-rw- 3 rms rms 29 Aug 18 20:32 foo2\n"
"81908 -rw-rw-rw- 3 rms rms 29 Aug 18 20:32 foo3\n"
msgstr ""
"$ ls -li fo*\n"
"81908 -rw-rw-rw- 3 rms rms 29 Aug 18 20:32 foo\n"
"81908 -rw-rw-rw- 3 rms rms 29 Aug 18 20:32 foo2\n"
"81908 -rw-rw-rw- 3 rms rms 29 Aug 18 20:32 foo3\n"

#. type: deffn
#: original_texis/files.texi:1687
msgid "This function is meaningless on operating systems where multiple names for one file are not allowed.  Some systems implement multiple names by copying the file instead."
msgstr "この関数は1つのファイルにたいして複数の名前をもつことが許されないオペレーティングシステムでは無意味である。いくつかのシステムでは、かわりにファイルをコピーすることにより複数の名前を実装している。"

#. type: deffn
#: original_texis/files.texi:1689
msgid "See also @code{file-nlinks} in @ref{File Attributes}."
msgstr "@ref{File Attributes}の@code{file-nlinks}も参照のこと。"

#. type: deffn
#: original_texis/files.texi:1691
#, no-wrap
msgid "Command rename-file filename newname &optional ok-if-already-exists"
msgstr "Command rename-file filename newname &optional ok-if-already-exists"

#. type: deffn
#: original_texis/files.texi:1693
msgid "This command renames the file @var{filename} as @var{newname}."
msgstr "このコマンドは@var{filename}を@var{newname}にリネームする。"

#. type: deffn
#: original_texis/files.texi:1699
msgid "If @var{filename} has additional names aside from @var{filename}, it continues to have those names.  In fact, adding the name @var{newname} with @code{add-name-to-file} and then deleting @var{filename} has the same effect as renaming, aside from momentary intermediate states and treatment of errors, directories and symbolic links."
msgstr "@var{filename}が@var{filename}とは別に追加の名前をもつ場合には、それらは自身の名前をもち続ける。実際のところ@code{add-name-to-file}で名前@var{newname}を追加してから@var{filename}を削除するのは、瞬間的な遷移状態とエラーの処理、ディレクトリーとシンボリックリンクを別とすればリネームと同じ効果がある。"

#. type: deffn
#: original_texis/files.texi:1704
msgid "This command does not follow symbolic links.  If @var{filename} is a symbolic link, this command renames the symbolic link, not the file it points to.  If @var{newname} is a symbolic link, its directory entry is replaced, not the directory entry it points to."
msgstr "このコマンドはシンボリックリンクをフォローしない。@var{filename}がシンボリックリンクなら、このコマンドはリンクが指すファイルではなくシンボリックリンクをリネームする。@var{newname}がシンボリックリンクなら、リンクが指すディレクトリーエントリーではなくリンクのディレクトリーエントリーを置き換える。"

#. type: deffn
#: original_texis/files.texi:1711
msgid "This command does nothing if @var{filename} and @var{newname} are the same directory entry, i.e., if they refer to the same parent directory and give the same name within that directory.  Otherwise, if @var{filename} and @var{newname} name the same file, this command does nothing on POSIX-conforming systems, and removes @var{filename} on some non-POSIX systems."
msgstr "@var{filename}と@var{newname}が同じディレクトリーエントリー(親ディレクトリーが同じでありそのディレクトリー内で同じ名前を与える)なら、このコマンドは何もしない。それ以外なら@var{filename}と@var{newname}が同一のファイルを命名する場合には、このコマンドはPOSIX準拠システムでは何も行わなず、いくつかの非POSIXシステムでは@var{filename}を削除する。"

#. type: deffn
#: original_texis/files.texi:1714
msgid "If @var{newname} exists, then it must be an empty directory if @var{oldname} is a directory and a non-directory otherwise."
msgstr "@var{newname}がすでに存在する場合には@var{oldname}がディレクトリーなら空のディレクトリー、非ディレクトリーなら非ディレクトリーでなければならない。"

#. type: deffn
#: original_texis/files.texi:1716
#, no-wrap
msgid "Command copy-file oldname newname &optional ok-if-already-exists time preserve-uid-gid preserve-extended-attributes"
msgstr "Command copy-file oldname newname &optional ok-if-already-exists time preserve-uid-gid preserve-extended-attributes"

#. type: deffn
#: original_texis/files.texi:1722
msgid "This command copies the file @var{oldname} to @var{newname}.  An error is signaled if @var{oldname} is not a regular file.  If @var{newname} names a directory, it copies @var{oldname} into that directory, preserving its final name component."
msgstr "このコマンドはファイル@var{oldname}を@var{newname}にコピーする。@var{oldname}が通常のファイルでなければエラーをシグナルする。@var{newname}がディレクトリーなら最後の名前コンポーネントを保持するようにディレクトリーの中に@var{oldname}をコピーする。"

#. type: deffn
#: original_texis/files.texi:1725
msgid "This function follows symbolic links, except that it does not follow a dangling symbolic link to create @var{newname}."
msgstr "この関数は@var{newname}を作成するために壊れたシンボリックリンクをフォローしない点を除いて、シンボリックリンクをフォローする。"

#. type: deffn
#: original_texis/files.texi:1732
msgid "If @var{time} is non-@code{nil}, then this function gives the new file the same last-modified time that the old one has.  (This works on only some operating systems.)  If setting the time gets an error, @code{copy-file} signals a @code{file-date-error} error.  In an interactive call, a prefix argument specifies a non-@code{nil} value for @var{time}."
msgstr "@var{time}が非@code{nil}なら、この関数は新たなファイルにたいして古いファイルと同じ最終変更時刻を与える(これはいくつかの限られたオペレーティングシステムでのみ機能する)。時刻のセットでエラーが発生すると、@code{copy-file}は@code{file-date-error}エラーをシグナルする。インタラクティブに呼び出された場合には、プレフィックス引数は@var{time}にたいして非@code{nil}値を指定する。"

#. type: deffn
#: original_texis/files.texi:1739
msgid "If argument @var{preserve-uid-gid} is @code{nil}, we let the operating system decide the user and group ownership of the new file (this is usually set to the user running Emacs).  If @var{preserve-uid-gid} is non-@code{nil}, we attempt to copy the user and group ownership of the file.  This works only on some operating systems, and only if you have the correct permissions to do so."
msgstr "引数@var{preserve-uid-gid}が@code{nil}なら、新たなファイルのユーザーとグループの所有権の決定をオペレーティングシステムに委ねる(通常はEmacsを実行中のユーザー)。@var{preserve-uid-gid}が非@code{nil}なら、そのファイルのユーザーとグループの所有権のコピーを試みる。これはいくつかのオペレーティングシステムで、かつそれを行うための正しいパーミッションをもつ場合のみ機能する。"

#. type: deffn
#: original_texis/files.texi:1744
msgid "If the optional argument @var{preserve-permissions} is non-@code{nil}, this function copies the file modes (or ``permissions'') of @var{oldname} to @var{newname}, as well as the Access Control List and SELinux context (if any).  @xref{Information about Files}."
msgstr "オプション引数@var{preserve-permissions}が非@code{nil}なら、この関数は@var{oldname}のファイルモード(または``パーミッション'')、同様にACL(Access Control List)とSELinuxコンテキストを@var{newname}にコピーする。@ref{Information about Files}を参照のこと。"

#. type: deffn
#: original_texis/files.texi:1750
msgid "Otherwise, the file modes of @var{newname} are left unchanged if it is an existing file, and set to those of @var{oldname}, masked by the default file permissions (see @code{set-default-file-modes} below), if @var{newname} is to be newly created.  The Access Control List or SELinux context are not copied over in either case."
msgstr "それ以外では、@var{newname}が既存ファイルならファイルモードは変更されず、新たに作成された場合はデフォルトのファイルパーミッション(以下の@code{set-default-file-modes}を参照)によりマスクされる。どちらの場合でもACLやSELinuxコンテキストはコピーされない。"

#. type: deffn
#: original_texis/files.texi:1752
#, no-wrap
msgid "Command make-symbolic-link target newname &optional ok-if-already-exists"
msgstr "Command make-symbolic-link target newname &optional ok-if-already-exists"

#. type: pindex
#: original_texis/files.texi:1753
#, no-wrap
msgid "ln"
msgstr "ln"

#. type: kindex
#: original_texis/files.texi:1754
#, no-wrap
msgid "file-already-exists"
msgstr "file-already-exists"

#. type: deffn
#: original_texis/files.texi:1762
msgid "This command makes a symbolic link to @var{target}, named @var{newname}.  This is like the shell command @samp{ln -s @var{target} @var{newname}}.  The @var{target} argument is treated only as a string; it need not name an existing file.  If @var{ok-if-already-exists} is an integer, indicating interactive use, then leading @samp{~} is expanded and leading @samp{/:} is stripped in the @var{target} string."
msgstr "このコマンドは@var{target}へのシンボリックリンク@var{newname}を作成する。これはシェルコマンド@samp{ln -s @var{target} @var{newname}}と似ている。引数@var{target}は単なる文字列として扱われる(存在するファイル名である必要はない)。@var{ok-if-already-exists}が整数ならインタラクティブな使用を示し、先頭の@samp{~}は展開されて、@var{target}文字列内の先頭の@samp{/:}は取り除かれる。"

#. type: deffn
#: original_texis/files.texi:1766
msgid "If @var{target} is a relative file name, the resulting symbolic link is interpreted relative to the directory containing the symbolic link.  @xref{Relative File Names}."
msgstr "@var{target}が相対ファイル名なら結果となるシンボリックリンクはシンボリックリンクを含むディレクトリーにたいして相対的に解釈される。@ref{Relative File Names}を参照のこと。"

#. type: deffn
#: original_texis/files.texi:1770
msgid "If both @var{target} and @var{newname} have remote file name syntax, and if both remote identifications are equal, the symbolic link points to the local file name part of @var{target}."
msgstr "@var{target}と@var{newname}の両方がリモートファイル名の構文をもち、それらのリモート識別が等しければ、シンボリックリンクは@var{target}の一部であるローカルファイル名を指す。"

#. type: deffn
#: original_texis/files.texi:1773
msgid "This function is not available on systems that don't support symbolic links."
msgstr "この関数はシンボリックリンクをサポートしないシステムでは利用できない。"

#. type: cindex
#: original_texis/files.texi:1775 original_texis/files.texi:3024
#, no-wrap
msgid "trash"
msgstr "trash"

#. type: vindex
#: original_texis/files.texi:1776 original_texis/files.texi:3025
#, no-wrap
msgid "delete-by-moving-to-trash"
msgstr "delete-by-moving-to-trash"

#. type: deffn
#: original_texis/files.texi:1777
#, no-wrap
msgid "Command delete-file filename &optional trash"
msgstr "Command delete-file filename &optional trash"

#. type: pindex
#: original_texis/files.texi:1778
#, no-wrap
msgid "rm"
msgstr "rm"

#. type: deffn
#: original_texis/files.texi:1783
msgid "This command deletes the file @var{filename}.  If the file has multiple names, it continues to exist under the other names.  If @var{filename} is a symbolic link, @code{delete-file} deletes only the symbolic link and not its target."
msgstr "このコマンドはファイル@var{filename}を削除する。ファイルが複数の名前をもつ場合には他の名前で存在し続ける。@var{filename}がシンボリックリンクなら@code{delete-file}はシンボリックリンクだけを削除してターゲットは削除しない。"

#. type: deffn
#: original_texis/files.texi:1787
msgid "A suitable kind of @code{file-error} error is signaled if the file does not exist, or is not deletable.  (On GNU and other POSIX-like systems, a file is deletable if its directory is writable.)"
msgstr "ファイルが存在しない、または削除できない場合には適切な種類の@code{file-error}エラーがシグナルされる(GNU/およびその他のPOSIX準拠システムではファイルのディレクトリーが書き込み可能ならファイルは削除可能)。"

#. type: deffn
#: original_texis/files.texi:1794 original_texis/files.texi:3045
msgid "If the optional argument @var{trash} is non-@code{nil} and the variable @code{delete-by-moving-to-trash} is non-@code{nil}, this command moves the file into the system Trash instead of deleting it.  @xref{Misc File Ops,,Miscellaneous File Operations, emacs, The GNU Emacs Manual}.  When called interactively, @var{trash} is @code{t} if no prefix argument is given, and @code{nil} otherwise."
msgstr "オプション引数@var{trash}が非@code{nil}、かつ変数@code{delete-by-moving-to-trash}が非@code{nil}なら、このコマンドはファイルを削除するかわりにシステムのTrash(ゴミ箱)にファイルを移動する。@ref{Misc File Ops,,Miscellaneous File Operations, emacs, The GNU Emacs Manual}を参照のこと。インタラクティブに呼び出された際には、プレフィックス引数がなければ@var{trash}は@code{t}、それ以外は@code{nil}。"

#. type: deffn
#: original_texis/files.texi:1796
msgid "See also @code{delete-directory} in @ref{Create/Delete Dirs}."
msgstr "@ref{Create/Delete Dirs}の@code{delete-directory}も参照のこと。"

#. type: cindex
#: original_texis/files.texi:1798
#, no-wrap
msgid "file permissions, setting"
msgstr "file permissions, setting"

#. type: cindex
#: original_texis/files.texi:1800
#, no-wrap
msgid "file modes, setting"
msgstr "file modes, setting"

#. type: deffn
#: original_texis/files.texi:1801
#, no-wrap
msgid "Command set-file-modes filename mode"
msgstr "Command set-file-modes filename mode"

#. type: deffn
#: original_texis/files.texi:1804
msgid "This function sets the @dfn{file mode} (or @dfn{permissions}) of @var{filename} to @var{mode}.  This function follows symbolic links."
msgstr "この関数は、@var{filename}の@dfn{ファイルモード} (または@dfn{パーミッション})を@var{mode}にセットする。この関数はシンボリックリンクをフォローする。"

#. type: deffn
#: original_texis/files.texi:1809
msgid "If called non-interactively, @var{mode} must be an integer.  Only the lowest 12 bits of the integer are used; on most systems, only the lowest 9 bits are meaningful.  You can use the Lisp construct for octal numbers to enter @var{mode}.  For example,"
msgstr "非インタラクティブに呼び出された場合には、@var{mode}は整数でなければならない。その整数の下位12ビットだけが使用される。ほとんどのシステムでは意味があるのは下位9ビットのみ。@var{mode}を入力するLisp構文を使用できる。たとえば、"

#. type: example
#: original_texis/files.texi:1812
#, no-wrap
msgid "(set-file-modes #o644)\n"
msgstr "(set-file-modes #o644)\n"

#. type: deffn
#: original_texis/files.texi:1819
msgid "specifies that the file should be readable and writable for its owner, readable for group members, and readable for all other users.  @xref{File permissions,,, coreutils, The @sc{gnu} @code{Coreutils} Manual}, for a description of mode bit specifications."
msgstr "これはそのファイルにたいして所有者による読み取りと書き込み、グループメンバーによる読み取り、その他のユーザーによる読み取り可能であることを指定する。モードビットの仕様の説明は@ref{File permissions,,, coreutils, The @sc{gnu} @code{Coreutils} Manual}を参照のこと。"

#. type: deffn
#: original_texis/files.texi:1823
msgid "Interactively, @var{mode} is read from the minibuffer using @code{read-file-modes} (see below), which lets the user type in either an integer or a string representing the permissions symbolically."
msgstr "インタラクティブに呼び出されると、@var{mode}は@code{read-file-modes}(以下参照)を使用してミニバッファーから読み取られる。この場合にはユーザーは整数、またはパーミッションをシンボルで表現する文字列をタイプできる。"

#. type: deffn
#: original_texis/files.texi:1826
msgid "@xref{File Attributes}, for the function @code{file-modes}, which returns the permissions of a file."
msgstr "ファイルのパーミッションをリターンする関数@code{file-modes}については@ref{File Attributes}を参照のこと。"

#. type: defun
#: original_texis/files.texi:1828
#, no-wrap
msgid "set-default-file-modes mode"
msgstr "set-default-file-modes mode"

#. type: cindex
#: original_texis/files.texi:1829
#, no-wrap
msgid "umask"
msgstr "umask"

#. type: defun
#: original_texis/files.texi:1839
msgid "This function sets the default permissions for new files created by Emacs and its subprocesses.  Every file created with Emacs initially has these permissions, or a subset of them (@code{write-region} will not grant execute permissions even if the default file permissions allow execution).  On GNU and other POSIX-like systems, the default permissions are given by the bitwise complement of the @samp{umask} value, i.e.@: each bit that is set in the argument @var{mode} will be @emph{reset} in the default permissions with which Emacs creates files."
msgstr "この関数はEmacsおよびEmacsのサブプロセスが新たに作成するファイルにデフォルトのパーミッションをセットする。Emacsにより作成されたすべてのファイルはこれらのパーミッション、およびそれらのサブセットとなるパーミッションをもつ(デフォルトファイルパーミッションが実行を許可しても、@code{write-region}は実行パーミッションを付与しないだろう)。GNUやその他のPOSIX準拠システムでは、デフォルトのパーミッションは@samp{umask}の値のビット単位の補数で与えられる。すなわち引数@var{mode}でセットされた各ビットはEmacsが作成するファイルのデフォルトパーミッション内では@emph{リセット}される。"

#. type: defun
#: original_texis/files.texi:1843
msgid "The argument @var{mode} should be an integer which specifies the permissions, similar to @code{set-file-modes} above.  Only the lowest 9 bits are meaningful."
msgstr "引数@var{mode}は上記の@code{set-file-modes}と同様、パーミッションを指定する整数であること。意味があるのは下位9ビットのみ。"

#. type: defun
#: original_texis/files.texi:1847
msgid "The default file permissions have no effect when you save a modified version of an existing file; saving a file preserves its existing permissions."
msgstr "デフォルトのファイルパーミッションは、既存ファイルの変更されたバージョンを保存する際は効果がない。ファイルの保存では既存のパーミッションが保持される。"

#. type: defmac
#: original_texis/files.texi:1849
#, no-wrap
msgid "with-file-modes mode body@dots{}"
msgstr "with-file-modes mode body@dots{}"

#. type: defmac
#: original_texis/files.texi:1855
msgid "This macro evaluates the @var{body} forms with the default permissions for new files temporarily set to @var{modes} (whose value is as for @code{set-file-modes} above).  When finished, it restores the original default file permissions, and returns the value of the last form in @var{body}."
msgstr "このマクロは新たなファイルにたいするデフォルトのパーミッションを一時的に@var{modes} (値は)@code{set-file-modes}にたいする値と同様)にセットしてフォーム@var{body}を評価する。終了時には元にデフォルトのファイルノパーミッションをリストアして、@var{body}の最後のフォームの値をリターンする。"

#. type: defmac
#: original_texis/files.texi:1857
msgid "This is useful for creating private files, for example."
msgstr "これはたとえばプライベートファイルの作成に有用である。"

#. type: defun
#: original_texis/files.texi:1859
#, no-wrap
msgid "default-file-modes"
msgstr "default-file-modes"

#. type: defun
#: original_texis/files.texi:1861
msgid "This function returns the default file permissions, as an integer."
msgstr "この関数はデフォルトのファイルのパーミッションを整数でリターンする。"

#. type: defun
#: original_texis/files.texi:1863
#, no-wrap
msgid "read-file-modes &optional prompt base-file"
msgstr "read-file-modes &optional prompt base-file"

#. type: defun
#: original_texis/files.texi:1870
msgid "This function reads a set of file mode bits from the minibuffer.  The first optional argument @var{prompt} specifies a non-default prompt.  Second second optional argument @var{base-file} is the name of a file on whose permissions to base the mode bits that this function returns, if what the user types specifies mode bits relative to permissions of an existing file."
msgstr "この関数はミニバッファーからファイルモードのビットのセットを読み取る。1つ目のオプション引数@var{prompt}は非デフォルトのプロンプトを指定する。2つ目のオプション引数@var{base-file}はユーザーが既存ファイルのパーミッションに相対的なモードビット指定をタイプした場合に、この関数がリターンするモードビッの元となる権限をもつファイルの名前を指定する。"

#. type: defun
#: original_texis/files.texi:1883
msgid "If user input represents an octal number, this function returns that number.  If it is a complete symbolic specification of mode bits, as in @code{\"u=rwx\"}, the function converts it to the equivalent numeric value using @code{file-modes-symbolic-to-number} and returns the result.  If the specification is relative, as in @code{\"o+g\"}, then the permissions on which the specification is based are taken from the mode bits of @var{base-file}.  If @var{base-file} is omitted or @code{nil}, the function uses @code{0} as the base mode bits.  The complete and relative specifications can be combined, as in @code{\"u+r,g+rx,o+r,g-w\"}.  @xref{File permissions,,, coreutils, The @sc{gnu} @code{Coreutils} Manual}, for a description of file mode specifications."
msgstr "ユーザー入力が8進数で表される場合には、この関数はその数字をリターンする。それが@code{\"u=rwx\"}のようなモードビットの完全なシンボル指定なら、この関数は@code{file-modes-symbolic-to-number}を使用して、それを等価な数字に変換して結果をリターンする。@code{\"o+g\"}のように相対的な指定なら、その指定の元となるパーミッションは@var{base-file}のモードビットから取得される。@var{base-file}が省略または@code{nil}なら、この関数は元となるモードビットとして@code{0}を使用する。完全指定と相対指定は@code{\"u+r,g+rx,o+r,g-w\"}のように組み合わせることができる。ファイルモード指定の説明は@ref{File permissions,,, coreutils, The @sc{gnu} @code{Coreutils} Manual}を参照のこと。"

#. type: defun
#: original_texis/files.texi:1885
#, no-wrap
msgid "file-modes-symbolic-to-number modes &optional base-modes"
msgstr "file-modes-symbolic-to-number modes &optional base-modes"

#. type: defun
#: original_texis/files.texi:1892
msgid "This function converts a symbolic file mode specification in @var{modes} into the equivalent integer.  If the symbolic specification is based on an existing file, that file's mode bits are taken from the optional argument @var{base-modes}; if that argument is omitted or @code{nil}, it defaults to 0, i.e., no access rights at all."
msgstr "この関数は@var{modes}内のシンボルによるファイルモード指定を等価な整数に変換する。シンボル指定が既存ファイルにもとづく場合には、オプション引数@var{base-modes}からそのファイルのモードビットが取得される。その引数が省略または@code{nil}なら、0(すべてのアクセスが許可されない)がデフォルトになる。"

#. type: defun
#: original_texis/files.texi:1894
#, no-wrap
msgid "set-file-times filename &optional time"
msgstr "set-file-times filename &optional time"

#. type: defun
#: original_texis/files.texi:1899
msgid "This function sets the access and modification times of @var{filename} to @var{time}.  The return value is @code{t} if the times are successfully set, otherwise it is @code{nil}.  @var{time} defaults to the current time and must be a time value (@pxref{Time of Day})."
msgstr "この関数は@var{filename}のアクセス時刻と変更時刻を@var{time}にセットする。時刻が正しくセットされれば@code{t}、それ以外は@code{nil}がリターン値となる。@var{time}のデフォルトはカレント時刻でありtime値でなければならない(@ref{Time of Day}を参照)。"

#. type: defun
#: original_texis/files.texi:1901
#, no-wrap
msgid "set-file-extended-attributes filename attribute-alist"
msgstr "set-file-extended-attributes filename attribute-alist"

#. type: defun
#: original_texis/files.texi:1908
msgid "This function sets the Emacs-recognized extended file attributes for @code{filename}.  The second argument @var{attribute-alist} should be an alist of the same form returned by @code{file-extended-attributes}.  The return value is @code{t} if the attributes are successfully set, otherwise it is @code{nil}.  @xref{Extended Attributes}."
msgstr "この関数は@code{filename}にたいしてEmacsが認識する拡張ファイル属性をセットする。2つ目の引数@var{attribute-alist}は@code{file-extended-attributes}がリターンするalistと同じ形式であること。属性のセットが成功したら@code{t}、それ以外は@code{nil}がリターン値となる。@ref{Extended Attributes}を参照のこと。"

#. type: defun
#: original_texis/files.texi:1910
#, no-wrap
msgid "set-file-selinux-context filename context"
msgstr "set-file-selinux-context filename context"

#. type: defun
#: original_texis/files.texi:1915
msgid "This function sets the SELinux security context for @var{filename} to @var{context}.  The @var{context} argument should be a list @code{(@var{user} @var{role} @var{type} @var{range})}, where each element is a string.  @xref{Extended Attributes}."
msgstr "この関数は@var{filename}にたいするSELinuxセキュリティコンテキストに@var{context}をセットする。@var{context}引数は各要素が文字列であるような@code{(@var{user} @var{role} @var{type} @var{range})}というリストであること。@ref{Extended Attributes}を参照のこと。"

#. type: defun
#: original_texis/files.texi:1920
msgid "The function returns @code{t} if it succeeds in setting the SELinux context of @var{filename}.  It returns @code{nil} if the context was not set (e.g., if SELinux is disabled, or if Emacs was compiled without SELinux support)."
msgstr "この関数は@var{filename}のSELinuxコンテキストのセットに成功したら@code{t}をリターンする。コンテキストがセットされなかった場合(SELinuxが無効、またはEmacsがSELinuxサポートなしでコンパイルされた場合等)には@code{nil}をリターンする。"

#. type: defun
#: original_texis/files.texi:1922
#, no-wrap
msgid "set-file-acl filename acl"
msgstr "set-file-acl filename acl"

#. type: defun
#: original_texis/files.texi:1926
msgid "This function sets the Access Control List for @var{filename} to @var{acl}.  The @var{acl} argument should have the same form returned by the function @code{file-acl}.  @xref{Extended Attributes}."
msgstr "この関数は@var{filename}にたいするACLに@var{acl}をセットする。@var{acl}引数は関数@code{file-acl}がリターンするのと同じ形式であること。@ref{Extended Attributes}を参照のこと。"

#. type: defun
#: original_texis/files.texi:1929
msgid "The function returns @code{t} if it successfully sets the ACL of @var{filename}, @code{nil} otherwise."
msgstr "この関数は@var{filename}のACLのセットに成功したら@code{t}、それ以外は@code{nil}をリターンする。"

#. type: section
#: original_texis/files.texi:1932
#, no-wrap
msgid "Files and Secondary Storage"
msgstr "Files and Secondary Storage"

#. type: cindex
#: original_texis/files.texi:1933
#, no-wrap
msgid "secondary storage"
msgstr "secondary storage"

#. type: Plain text
#: original_texis/files.texi:1943
msgid "After Emacs changes a file, there are two reasons the changes might not survive later failures of power or media, both having to do with efficiency.  First, the operating system might alias written data with data already stored elsewhere on secondary storage until one file or the other is later modified; this will lose both files if the only copy on secondary storage is lost due to media failure.  Second, the operating system might not write data to secondary storage immediately, which will lose the data if power is lost."
msgstr "Emacsがファイルを変更した後、その後に生じた電源喪失と媒体エラーにより行った変更が保存されないことには2つの理由があります。1つ目は一方または他方のファイルが後で変更されるまで、オペレーティングシステムは書き込まれたデータを2次ストレージのどこかに格納済みのデータにエイリアスすることです。媒体エラーにより2次ストレージ上のコピーだけが失われると、ファイルは両方とも失われるでしょう。2つ目はオペレーティングシステムがデータを2次ストレージに即座に書き込まないかもしれないので、電源喪失時にはデータが失われます。"

#. type: findex
#: original_texis/files.texi:1944
#, no-wrap
msgid "write-region"
msgstr "write-region"

#. type: Plain text
#: original_texis/files.texi:1952
msgid "Although both sorts of failures can largely be avoided by a suitably configured file system, such systems are typically more expensive or less efficient.  In more-typical systems, to survive media failure you can copy the file to a different device, and to survive a power failure you can use the @code{write-region} function with the @code{write-region-inhibit-fsync} variable set to @code{nil}.  @xref{Writing to Files}."
msgstr "これらはいずれも適切なファイルシステムの設定により回避され得る類のエラーですが、そのようなシステムは通常はより高価であるか非効率的です。より典型的なシステムでは媒体エラーに備えて異なるデバイスにファイルをコピーでき、電源喪失にたいしては変数@code{write-region-inhibit-fsync}に@code{nil}をセットして@code{write-region}を使用できます。@ref{Writing to Files}を参照してください。"

#. type: cindex
#: original_texis/files.texi:1955
#, no-wrap
msgid "file names"
msgstr "file names"

#. type: Plain text
#: original_texis/files.texi:1960
msgid "Files are generally referred to by their names, in Emacs as elsewhere.  File names in Emacs are represented as strings.  The functions that operate on a file all expect a file name argument."
msgstr "ファイルは一般的に名前で参照され、これはEmacsでも他と同様です。Emacsではファイル名は文字列で表現されます。ファイルを操作する関数はすべてファイル名引数に文字列を期待します。"

#. type: Plain text
#: original_texis/files.texi:1965
msgid "In addition to operating on files themselves, Emacs Lisp programs often need to operate on file names; i.e., to take them apart and to use part of a name to construct related file names.  This section describes how to manipulate file names."
msgstr "ファイル自体の操作に加えて、Emacs Lispプログラムでファイル名を処理する必要(ファイル名の一部を取得して関連するファイル名構築にその一部を使用する等)がしばしばあります。このセクションではファイル名を扱う方法を説明します。"

#. type: Plain text
#: original_texis/files.texi:1969
msgid "The functions in this section do not actually access files, so they can operate on file names that do not refer to an existing file or directory."
msgstr "このセクションの関数は実際にファイルにアクセスする訳ではないので、既存のファイルやディレクトリーを参照しないファイル名を処理できます。"

#. type: findex
#: original_texis/files.texi:1970
#, no-wrap
msgid "cygwin-convert-file-name-from-windows"
msgstr "cygwin-convert-file-name-from-windows"

#. type: findex
#: original_texis/files.texi:1971
#, no-wrap
msgid "cygwin-convert-file-name-to-windows"
msgstr "cygwin-convert-file-name-to-windows"

#. type: cindex
#: original_texis/files.texi:1972
#, no-wrap
msgid "MS-Windows file-name syntax"
msgstr "MS-Windows file-name syntax"

#. type: cindex
#: original_texis/files.texi:1973
#, no-wrap
msgid "converting file names from/to MS-Windows syntax"
msgstr "converting file names from/to MS-Windows syntax"

#. type: Plain text
#: original_texis/files.texi:1984
msgid "On MS-DOS and MS-Windows, these functions (like the function that actually operate on files) accept MS-DOS or MS-Windows file-name syntax, where backslashes separate the components, as well as POSIX syntax; but they always return POSIX syntax.  This enables Lisp programs to specify file names in POSIX syntax and work properly on all systems without change.@footnote{In MS-Windows versions of Emacs compiled for the Cygwin environment, you can use the functions @code{cygwin-convert-file-name-to-windows} and @code{cygwin-convert-file-name-from-windows} to convert between the two file-name syntaxes.}"
msgstr "MS-DOSやMS-Windowsでは、(実際にファイルを操作する関数と同様)これらの関数はMS-DOSとMS-Windowsのファイル名構文を受け入れます。この構文はPOSIX構文のようにバックスラッシュでコンポーネントを区切りますが、これらの関数は常にPOSIX構文をリターンします。これによりPOSIX構文でファイル名を指定するLispプログラムが変更なしですべてのシステムで正しく機能することが可能になります@footnote{MS-WindowsバージョンのEmacsはCygwin環境用にコンパイルされており、2つのファイル名構文の変換に@code{cygwin-convert-file-name-to-windows}と@code{cygwin-convert-file-name-from-windows}を使用できます。}。"

#. type: subsection
#: original_texis/files.texi:1995 original_texis/files.texi:1997
#: original_texis/files.texi:1998
#, no-wrap
msgid "File Name Components"
msgstr "File Name Components"

#. type: menuentry
#: original_texis/files.texi:1995
msgid "The directory part of a file name, and the rest."
msgstr "ファイル名のディレクトリー部分と、それ以外。"

#. type: node
#: original_texis/files.texi:1995 original_texis/files.texi:2136
#, no-wrap
msgid "Relative File Names"
msgstr "Relative File Names"

#. type: menuentry
#: original_texis/files.texi:1995
msgid "Some file names are relative to a current directory."
msgstr "カレントディレクトリーにたいして相対的なファイル名。"

#. type: subsection
#: original_texis/files.texi:1995 original_texis/files.texi:2201
#: original_texis/files.texi:2202
#, no-wrap
msgid "Directory Names"
msgstr "Directory Names"

#. type: menuentry
#: original_texis/files.texi:1995
msgid "A directory's name as a directory is different from its name as a file."
msgstr "ディレクトリーとしてのディレクトリー名と、ファイルとしてのファイル名の違い。"

#. type: node
#: original_texis/files.texi:1995 original_texis/files.texi:2330
#, no-wrap
msgid "File Name Expansion"
msgstr "File Name Expansion"

#. type: menuentry
#: original_texis/files.texi:1995
msgid "Converting relative file names to absolute ones."
msgstr "相対ファイル名から絶対ファイル名への変換。"

#. type: node
#: original_texis/files.texi:1995 original_texis/files.texi:2545
#, no-wrap
msgid "Unique File Names"
msgstr "Unique File Names"

#. type: menuentry
#: original_texis/files.texi:1995
msgid "Generating names for temporary files."
msgstr "一時ファイル用の名前の生成。"

#. type: subsection
#: original_texis/files.texi:1995 original_texis/files.texi:2696
#: original_texis/files.texi:2697
#, no-wrap
msgid "File Name Completion"
msgstr "File Name Completion"

#. type: menuentry
#: original_texis/files.texi:1995
msgid "Finding the completions for a given file name."
msgstr "与えられたファイル名にたいする補完を探す。"

#. type: subsection
#: original_texis/files.texi:1995 original_texis/files.texi:2796
#: original_texis/files.texi:2797
#, no-wrap
msgid "Standard File Names"
msgstr "Standard File Names"

#. type: menuentry
#: original_texis/files.texi:1995
msgid "If your package uses a fixed file name, how to handle various operating systems simply."
msgstr "パッケージが固定されたファイル名を使用する際に、種々のオペレーティングシステムをシンプルに処理する方法。"

#. type: cindex
#: original_texis/files.texi:1999
#, no-wrap
msgid "directory part (of file name)"
msgstr "directory part (of file name)"

#. type: cindex
#: original_texis/files.texi:2000
#, no-wrap
msgid "nondirectory part (of file name)"
msgstr "nondirectory part (of file name)"

#. type: cindex
#: original_texis/files.texi:2001
#, no-wrap
msgid "version number (in file name)"
msgstr "version number (in file name)"

#. type: Plain text
#: original_texis/files.texi:2009
msgid "The operating system groups files into directories.  To specify a file, you must specify the directory and the file's name within that directory.  Therefore, Emacs considers a file name as having two main parts: the @dfn{directory name} part, and the @dfn{nondirectory} part (or @dfn{file name within the directory}).  Either part may be empty.  Concatenating these two parts reproduces the original file name."
msgstr "オペレーティングシステムはファイルをディレクトリーにグループ化します。あるファイルを指定するためには、ディレクトリーとそのディレクトリー内でのファイルの名前を指定しなければなりません。それゆえEmacsはファイル名を@dfn{ディレクトリー名}パートと@dfn{非ディレクトリー}(または@dfn{ディレクトリー内ファイル名})パートという、2つの主要パートから判断します。どちらのパートも空の場合があり得ます。これら2つのパートを結合することによって元のファイル名が再構築されます。"

#. type: Plain text
#: original_texis/files.texi:2013
msgid "On most systems, the directory part is everything up to and including the last slash (backslash is also allowed in input on MS-DOS or MS-Windows); the nondirectory part is the rest."
msgstr "ほとんどのシステムでは最後のスラッシュ(MS-DOSとMS-Windowsではバックスラッシュも許される)までのすべてがディレクトリーパートです。残りが非ディレクトリーパートです。"

#. type: Plain text
#: original_texis/files.texi:2017
msgid "For some purposes, the nondirectory part is further subdivided into the name proper and the @dfn{version number}.  On most systems, only backup files have version numbers in their names."
msgstr "ある目的のために、非ディレクトリーパートはさらに正式名称(the name proper)と@dfn{バージョン番号}に細分されます。ほとんどのシステムでは、名前にバージョン番号をもつのはバックアップファイルだけです。"

#. type: defun
#: original_texis/files.texi:2018
#, no-wrap
msgid "file-name-directory filename"
msgstr "file-name-directory filename"

#. type: defun
#: original_texis/files.texi:2022
msgid "This function returns the directory part of @var{filename}, as a directory name (@pxref{Directory Names}), or @code{nil} if @var{filename} does not include a directory part."
msgstr "この関数は@var{filename}のディレクトリーパートをディレクトリー名(@ref{Directory Names}を参照)としてリターンする。@var{filename}がディレクトリーパートを含まなければ@code{nil}をリターンする。"

#. type: defun
#: original_texis/files.texi:2025
msgid "On GNU and other POSIX-like systems, a string returned by this function always ends in a slash.  On MS-DOS it can also end in a colon."
msgstr "GNUや他のPOSIX準拠ixシステムでは、この関数がリターンする文字列は常にスラッシュで終わる。MS-DOSではコロンで終わることもあり得る。"

#. type: group
#: original_texis/files.texi:2030
#, no-wrap
msgid ""
"(file-name-directory \"lewis/foo\")  ; @r{GNU example}\n"
"     @result{} \"lewis/\"\n"
msgstr ""
"(file-name-directory \"lewis/foo\")  ; @r{GNUの例}\n"
"     @result{} \"lewis/\"\n"

#. type: group
#: original_texis/files.texi:2034
#, no-wrap
msgid ""
"(file-name-directory \"foo\")        ; @r{GNU example}\n"
"     @result{} nil\n"
msgstr ""
"(file-name-directory \"foo\")        ; @r{GNUの例}\n"
"     @result{} nil\n"

#. type: defun
#: original_texis/files.texi:2038
#, no-wrap
msgid "file-name-nondirectory filename"
msgstr "file-name-nondirectory filename"

#. type: defun
#: original_texis/files.texi:2040
msgid "This function returns the nondirectory part of @var{filename}."
msgstr "この関数は@var{filename}の非ディレクトリーパートをリターンする。"

#. type: group
#: original_texis/files.texi:2045
#, no-wrap
msgid ""
"(file-name-nondirectory \"lewis/foo\")\n"
"     @result{} \"foo\"\n"
msgstr ""
"(file-name-nondirectory \"lewis/foo\")\n"
"     @result{} \"foo\"\n"

#. type: group
#: original_texis/files.texi:2049
#, no-wrap
msgid ""
"(file-name-nondirectory \"foo\")\n"
"     @result{} \"foo\"\n"
msgstr ""
"(file-name-nondirectory \"foo\")\n"
"     @result{} \"foo\"\n"

#. type: group
#: original_texis/files.texi:2053
#, no-wrap
msgid ""
"(file-name-nondirectory \"lewis/\")\n"
"     @result{} \"\"\n"
msgstr ""
"(file-name-nondirectory \"lewis/\")\n"
"     @result{} \"\"\n"

#. type: defun
#: original_texis/files.texi:2057
#, no-wrap
msgid "file-name-sans-versions filename &optional keep-backup-version"
msgstr "file-name-sans-versions filename &optional keep-backup-version"

#. type: defun
#: original_texis/files.texi:2060
msgid "This function returns @var{filename} with any file version numbers, backup version numbers, or trailing tildes discarded."
msgstr "この関数は、任意のファイルバージョン番号、バックアップバージョン番号、末尾のチルダを取り除いた@var{filename}をリターンする。"

#. type: defun
#: original_texis/files.texi:2064
msgid "If @var{keep-backup-version} is non-@code{nil}, then true file version numbers understood as such by the file system are discarded from the return value, but backup version numbers are kept."
msgstr "@var{keep-backup-version}が非@code{nil}なら、ファイルシステムなどが認識するような真のファイルバージョン番号は破棄されるが、バックアップバージョン番号は保持される。"

#. type: group
#: original_texis/files.texi:2069
#, no-wrap
msgid ""
"(file-name-sans-versions \"~rms/foo.~1~\")\n"
"     @result{} \"~rms/foo\"\n"
msgstr ""
"(file-name-sans-versions \"~rms/foo.~1~\")\n"
"     @result{} \"~rms/foo\"\n"

#. type: group
#: original_texis/files.texi:2073
#, no-wrap
msgid ""
"(file-name-sans-versions \"~rms/foo~\")\n"
"     @result{} \"~rms/foo\"\n"
msgstr ""
"(file-name-sans-versions \"~rms/foo~\")\n"
"     @result{} \"~rms/foo\"\n"

#. type: group
#: original_texis/files.texi:2077
#, no-wrap
msgid ""
"(file-name-sans-versions \"~rms/foo\")\n"
"     @result{} \"~rms/foo\"\n"
msgstr ""
"(file-name-sans-versions \"~rms/foo\")\n"
"     @result{} \"~rms/foo\"\n"

#. type: defun
#: original_texis/files.texi:2081
#, no-wrap
msgid "file-name-extension filename &optional period"
msgstr "file-name-extension filename &optional period"

#. type: defun
#: original_texis/files.texi:2087
msgid "This function returns @var{filename}'s final extension, if any, after applying @code{file-name-sans-versions} to remove any version/backup part.  The extension, in a file name, is the part that follows the last @samp{.} in the last name component (minus any version/backup part)."
msgstr "この関数は@var{filename}から、もしあればすべてのバージョン番号とバックアップ番号を取り除いた後の、終端の拡張子(extension)をリターンする。ファイル名の拡張子とは最後の名前コンポーネント(からすべてのバージョン番号とバックアップ番号を取り去った後)の最後の@samp{.}に後続するパートのこと。"

#. type: defun
#: original_texis/files.texi:2094
msgid "This function returns @code{nil} for extensionless file names such as @file{foo}.  It returns @code{\"\"} for null extensions, as in @file{foo.}.  If the last component of a file name begins with a @samp{.}, that @samp{.} doesn't count as the beginning of an extension.  Thus, @file{.emacs}'s extension is @code{nil}, not @samp{.emacs}."
msgstr "この関数は@file{foo}のような拡張子のないファイル名にたいしては@code{nil}、@file{foo.}のようなnull拡張子にたいしては@code{\"\"}をリターンする。ファイル名の最終コンポーネントが@samp{.}で始まる場合には、その@samp{.}は拡張子の開始とはみなされない。したがって@file{.emacs}の拡張子は@samp{.emacs}ではなく@code{nil}。"

#. type: defun
#: original_texis/files.texi:2098
msgid "If @var{period} is non-@code{nil}, then the returned value includes the period that delimits the extension, and if @var{filename} has no extension, the value is @code{\"\"}."
msgstr "@var{period}が非@code{nil}なら、拡張子を区切るピリオドもリターン値に含まれる。その場合には、もし@var{filename}が拡張子をもたなければリターン値は@code{\"\"}。"

#. type: defun
#: original_texis/files.texi:2100
#, no-wrap
msgid "file-name-sans-extension filename"
msgstr "file-name-sans-extension filename"

#. type: defun
#: original_texis/files.texi:2104
msgid "This function returns @var{filename} minus its extension, if any.  The version/backup part, if present, is only removed if the file has an extension.  For example,"
msgstr "この関数は、もしあれば@var{filename}から拡張子を除いてリターンする。もしバージョン番号やバックアップ番号があるなら、ファイルが拡張子をもつ場合のみそれを削除する。たとえば、"

#. type: example
#: original_texis/files.texi:2118
#, no-wrap
msgid ""
"(file-name-sans-extension \"foo.lose.c\")\n"
"     @result{} \"foo.lose\"\n"
"(file-name-sans-extension \"big.hack/foo\")\n"
"     @result{} \"big.hack/foo\"\n"
"(file-name-sans-extension \"/my/home/.emacs\")\n"
"     @result{} \"/my/home/.emacs\"\n"
"(file-name-sans-extension \"/my/home/.emacs.el\")\n"
"     @result{} \"/my/home/.emacs\"\n"
"(file-name-sans-extension \"~/foo.el.~3~\")\n"
"     @result{} \"~/foo\"\n"
"(file-name-sans-extension \"~/foo.~3~\")\n"
"     @result{} \"~/foo.~3~\"\n"
msgstr ""
"(file-name-sans-extension \"foo.lose.c\")\n"
"     @result{} \"foo.lose\"\n"
"(file-name-sans-extension \"big.hack/foo\")\n"
"     @result{} \"big.hack/foo\"\n"
"(file-name-sans-extension \"/my/home/.emacs\")\n"
"     @result{} \"/my/home/.emacs\"\n"
"(file-name-sans-extension \"/my/home/.emacs.el\")\n"
"     @result{} \"/my/home/.emacs\"\n"
"(file-name-sans-extension \"~/foo.el.~3~\")\n"
"     @result{} \"~/foo\"\n"
"(file-name-sans-extension \"~/foo.~3~\")\n"
"     @result{} \"~/foo.~3~\"\n"

#. type: defun
#: original_texis/files.texi:2122
msgid "Note that the @samp{.~3~} in the two last examples is the backup part, not an extension."
msgstr "最後の2つの例の@samp{.~3~}は拡張子ではなくバックアップ番号であることに注意。"

#. type: defun
#: original_texis/files.texi:2124
#, no-wrap
msgid "file-name-base &optional filename"
msgstr "file-name-base &optional filename"

#. type: defun
#: original_texis/files.texi:2127
msgid "This function is the composition of @code{file-name-sans-extension} and @code{file-name-nondirectory}.  For example,"
msgstr "これは@code{file-name-sans-extension}と@code{file-name-nondirectory}を組み合わせた関数。たとえば、"

#. type: example
#: original_texis/files.texi:2131
#, no-wrap
msgid ""
"(file-name-base \"/my/home/foo.c\")\n"
"    @result{} \"foo\"\n"
msgstr ""
"(file-name-base \"/my/home/foo.c\")\n"
"    @result{} \"foo\"\n"

#. type: defun
#: original_texis/files.texi:2134
msgid "The @var{filename} argument defaults to @code{buffer-file-name}."
msgstr "引数@var{filename}のデフォルトは@code{buffer-file-name}。"

#. type: subsection
#: original_texis/files.texi:2137
#, no-wrap
msgid "Absolute and Relative File Names"
msgstr "Absolute and Relative File Names"

#. type: cindex
#: original_texis/files.texi:2138
#, no-wrap
msgid "absolute file name"
msgstr "absolute file name"

#. type: cindex
#: original_texis/files.texi:2139
#, no-wrap
msgid "relative file name"
msgstr "relative file name"

#. type: Plain text
#: original_texis/files.texi:2153
msgid "All the directories in the file system form a tree starting at the root directory.  A file name can specify all the directory names starting from the root of the tree; then it is called an @dfn{absolute} file name.  Or it can specify the position of the file in the tree relative to a default directory; then it is called a @dfn{relative} file name.  On GNU and other POSIX-like systems, after any leading @samp{~} has been expanded, an absolute file name starts with a @samp{/} (@pxref{abbreviate-file-name}), and a relative one does not.  On MS-DOS and MS-Windows, an absolute file name starts with a slash or a backslash, or with a drive specification @samp{@var{x}:/}, where @var{x} is the @dfn{drive letter}."
msgstr "ファイルシステム内のすべてのディレクトリーはルートディレクトリーから開始されるツリーを形成します。このツリーのルートから開始されるすべてのディレクトリー名によりファイル名を指定でき、それを@dfn{絶対(absolute)}ファイル名と呼びます。デフォルトディレクトリーからの相対的なツリー中の位置でファイルを指定することもでき、それらは@dfn{相対(relative)}ファイル名と呼ばれます。GNUや他のPOSIX準拠システムでは@samp{~}で開始されるすべてのファイル名は@samp{/}で始まる絶対ファイル名(@ref{abbreviate-file-name}を参照)に展開されますが、相対ファイル名は展開されません。。MS-DOSとMS-Windowsでは絶対ファイル名はスラッシュ、バックスラッシュ、またはドライブ指定@samp{@var{x}:/}で始まります。ここで@var{x}は@dfn{ドライブ文字(drive letter)}です。"

#. type: defun
#: original_texis/files.texi:2154
#, no-wrap
msgid "file-name-absolute-p filename"
msgstr "file-name-absolute-p filename"

#. type: defun
#: original_texis/files.texi:2157
msgid "This function returns @code{t} if file @var{filename} is an absolute file name or begins with @samp{~}, @code{nil} otherwise."
msgstr "この関数は@var{filename}が絶対ファイル名か先頭が@samp{~}なら@code{t}、それ以外は@code{nil}をリターンする。"

#. type: group
#: original_texis/files.texi:2162
#, no-wrap
msgid ""
"(file-name-absolute-p \"~rms/foo\")\n"
"     @result{} t\n"
msgstr ""
"(file-name-absolute-p \"~rms/foo\")\n"
"     @result{} t\n"

#. type: group
#: original_texis/files.texi:2166
#, no-wrap
msgid ""
"(file-name-absolute-p \"rms/foo\")\n"
"     @result{} nil\n"
msgstr ""
"(file-name-absolute-p \"rms/foo\")\n"
"     @result{} nil\n"

#. type: group
#: original_texis/files.texi:2170
#, no-wrap
msgid ""
"(file-name-absolute-p \"/user/rms/foo\")\n"
"     @result{} t\n"
msgstr ""
"(file-name-absolute-p \"/user/rms/foo\")\n"
"     @result{} t\n"

#. type: Plain text
#: original_texis/files.texi:2179
msgid "Given a possibly relative file name, you can expand any leading @samp{~} and convert the result to an absolute name using @code{expand-file-name} (@pxref{File Name Expansion}).  This function converts absolute file names to relative names:"
msgstr "相対ファイル名が与えられた場合には先頭に@samp{~}があれば展開して、@code{expand-file-name}を使用して絶対ファイル名に変換できます(@ref{File Name Expansion}を参照)。この関数は絶対ファイル名を相対ファイル名に変換します:"

#. type: defun
#: original_texis/files.texi:2180
#, no-wrap
msgid "file-relative-name filename &optional directory"
msgstr "file-relative-name filename &optional directory"

#. type: defun
#: original_texis/files.texi:2186
msgid "This function tries to return a relative name that is equivalent to @var{filename}, assuming the result will be interpreted relative to @var{directory} (an absolute directory name or directory file name).  If @var{directory} is omitted or @code{nil}, it defaults to the current buffer's default directory."
msgstr "この関数は@var{directory}(絶対ディレクトリー名かディレクトリーファイル名)から相対的なファイルと仮定して、@var{filename}と等価な相対ファイル名のリターンを試みる。@var{directory}が省略か@code{nil}なら、カレントバッファーのデフォルトディレクトリーがデフォルト。"

#. type: defun
#: original_texis/files.texi:2192
msgid "On some operating systems, an absolute file name begins with a device name.  On such systems, @var{filename} has no relative equivalent based on @var{directory} if they start with two different device names.  In this case, @code{file-relative-name} returns @var{filename} in absolute form."
msgstr "絶対ファイル名がデバイス名で始まるオペレーティングシステムがいくつか存在する。そのようなシステムでは、2つの異なるデバイス名から開始される@var{filename}は、@var{directory}にもといた等価な相対ファイル名をもたない。この場合には、@code{file-relative-name}は絶対形式で@var{filename}をリターンする。"

#. type: example
#: original_texis/files.texi:2198
#, no-wrap
msgid ""
"(file-relative-name \"/foo/bar\" \"/foo/\")\n"
"     @result{} \"bar\"\n"
"(file-relative-name \"/foo/bar\" \"/hack/\")\n"
"     @result{} \"../foo/bar\"\n"
msgstr ""
"(file-relative-name \"/foo/bar\" \"/foo/\")\n"
"     @result{} \"bar\"\n"
"(file-relative-name \"/foo/bar\" \"/hack/\")\n"
"     @result{} \"../foo/bar\"\n"

#. type: cindex
#: original_texis/files.texi:2203
#, no-wrap
msgid "directory name"
msgstr "directory name"

#. type: cindex
#: original_texis/files.texi:2204
#, no-wrap
msgid "directory file name"
msgstr "directory file name"

#. type: cindex
#: original_texis/files.texi:2205
#, no-wrap
msgid "file name of directory"
msgstr "file name of directory"

#. type: Plain text
#: original_texis/files.texi:2217
msgid "A @dfn{directory name} is a string that must name a directory if it names any file at all.  A directory is actually a kind of file, and it has a file name (called the @dfn{directory file name}, which is related to the directory name but is typically not identical.  (This is not quite the same as the usual POSIX terminology.)  These two names for the same entity are related by a syntactic transformation.  On GNU and other POSIX-like systems, this is simple: to obtain a directory name, append a @samp{/} to a directory file name that does not already end in @samp{/}.  On MS-DOS the relationship is more complicated."
msgstr "@dfn{ディレクトリー名(directory name)}とは、ある文字列が何らかのファイルを命名する場合にはディレクトリーを命名する文字列のことです。ディレクトリーは実際にはファイルの一種なので、ファイル名(@dfn{ディレクトリーファイル名}と呼ばれる)をもち、これはディレクトリー名と関係はあるものの通常は等価ではありません(これはPOSIXの通常の用語と完全に同一ではない)。同じ実体にたいするこれら2つの異なる名前は構文的な変換により関連付けられます。GNUや他のPOSIXシステムではことは単純です。ディレクトリー名の最後が@samp{/}でなければ、ディレクトリーファイル名に@samp{/}を追加してディレクトリー名を取得できます。MS-DOSではこの関連付けはより複雑です。"

#. type: Plain text
#: original_texis/files.texi:2223
msgid "The difference between a directory name and a directory file name is subtle but crucial.  When an Emacs variable or function argument is described as being a directory name, a directory file name is not acceptable.  When @code{file-name-directory} returns a string, that is always a directory name."
msgstr "ディレクトリー名とディレクトリーファイル名の違いは些細ですが重要です。Emacsの変数や関数の引数を記述する際には、それがディレクトリー名であるとしており、ディレクトリーファイル名は許容されません。@code{file-name-directory}が文字列をリターンするときには常にディレクトリー名をリターンします。"

#. type: Plain text
#: original_texis/files.texi:2228
msgid "The following two functions convert between directory names and directory file names.  They do nothing special with environment variable substitutions such as @samp{$HOME}, and the constructs @samp{~}, @samp{.} and @samp{..}."
msgstr "以下の2つの関数は、ディレクトリー名とディレクトリーファイル名の間で変換を行います。これらの関数は@samp{$HOME}のような環境変数や@samp{~}、@samp{.}、@samp{..}などの構文にたいして、特別なことは何も行いません。"

#. type: defun
#: original_texis/files.texi:2229
#, no-wrap
msgid "file-name-as-directory filename"
msgstr "file-name-as-directory filename"

#. type: defun
#: original_texis/files.texi:2234
msgid "This function returns a string representing @var{filename} in a form that the operating system will interpret as the name of a directory (a directory name).  On most systems, this means appending a slash to the string (if it does not already end in one)."
msgstr "この関数はオペレーティングシステムがディレクトリーの名前(ディレクトリー名)と解釈する形式で@var{filename}を表す文字列をリターンする。これはほとんどのシステムでは、(もし終端にそれがなければ)これは文字列にスラッシュを追加することを意味する。"

#. type: group
#: original_texis/files.texi:2239
#, no-wrap
msgid ""
"(file-name-as-directory \"~rms/lewis\")\n"
"     @result{} \"~rms/lewis/\"\n"
msgstr ""
"(file-name-as-directory \"~rms/lewis\")\n"
"     @result{} \"~rms/lewis/\"\n"

#. type: defun
#: original_texis/files.texi:2243
#, no-wrap
msgid "directory-name-p filename"
msgstr "directory-name-p filename"

#. type: defun
#: original_texis/files.texi:2248
msgid "This function returns non-@code{nil} if @var{filename} ends with a directory separator character.  This is the forward slash @samp{/} on GNU and other POSIX-like systems; MS-Windows and MS-DOS recognize both the forward slash and the backslash @samp{\\} as directory separators."
msgstr "この関数は@var{filename}の終端がディレクトリー区切り文字なら非@code{nil}をリターンする。これはGNUや他のPOSIX準拠システムではスラッシュ@samp{/}、MS-WindowsとMS-DOSではスラッシュとバックスラッシュ@samp{\\}がディレクトリー区切りとして認識される。"

#. type: defun
#: original_texis/files.texi:2250
#, no-wrap
msgid "directory-file-name dirname"
msgstr "directory-file-name dirname"

#. type: defun
#: original_texis/files.texi:2256
msgid "This function returns a string representing @var{dirname} in a form that the operating system will interpret as the name of a file (a directory file name).  On most systems, this means removing the final directory separators from the string, unless the string consists entirely of directory separators."
msgstr "この関数はオペレーティングシステムがファイルの名前と解釈する形式(ディレクトリーファイル名)で@var{dirname}を表す文字列をリターンする。ほとんどのシステムではこれは文字列すべてがディレクトリー区切り文字で構成されている場合を除き、文字列から最後のディレクトリー区切り文字を削除することを意味する。"

#. type: group
#: original_texis/files.texi:2261
#, no-wrap
msgid ""
"(directory-file-name \"~lewis/\")\n"
"     @result{} \"~lewis\"\n"
msgstr ""
"(directory-file-name \"~lewis/\")\n"
"     @result{} \"~lewis\"\n"

#. type: Plain text
#: original_texis/files.texi:2267
msgid "Given a directory name, you can combine it with a relative file name using @code{concat}:"
msgstr "ディレクトリー名にたいしては@code{concat}を使用して相対ファイルと組み合わせることができます:"

#. type: example
#: original_texis/files.texi:2270
#, no-wrap
msgid "(concat @var{dirname} @var{relfile})\n"
msgstr "(concat @var{dirname} @var{relfile})\n"

#. type: Plain text
#: original_texis/files.texi:2276
msgid "Be sure to verify that the file name is relative before doing that.  If you use an absolute file name, the results could be syntactically invalid or refer to the wrong file."
msgstr "これを行う前にファイル名が相対的であることを確認してください。絶対ファイル名を使用すると構文的に不正な結果となったり、間違ったファイルを参照する可能性があります。"

#. type: Plain text
#: original_texis/files.texi:2280
msgid "If you want to use a directory file name in making such a combination, you must first convert it to a directory name using @code{file-name-as-directory}:"
msgstr "ディレクトリーファイル名の作成にこのような組み合わせを使用しなければ、最初に@code{file-name-as-directory}を使用してそれをディレクトリー名に変換しなければなりません:"

#. type: example
#: original_texis/files.texi:2283
#, no-wrap
msgid "(concat (file-name-as-directory @var{dirfile}) @var{relfile})\n"
msgstr "(concat (file-name-as-directory @var{dirfile}) @var{relfile})\n"

#. type: Plain text
#: original_texis/files.texi:2287
msgid "Don't try concatenating a slash by hand, as in"
msgstr "以下のように手動でスラッシュの結合を試みてはなりません"

#. type: example
#: original_texis/files.texi:2291
#, no-wrap
msgid ""
";;; @r{Wrong!}\n"
"(concat @var{dirfile} \"/\" @var{relfile})\n"
msgstr ""
";;; @r{間違い!}\n"
"(concat @var{dirfile} \"/\" @var{relfile})\n"

#. type: Plain text
#: original_texis/files.texi:2296
msgid "because this is not portable.  Always use @code{file-name-as-directory}."
msgstr "なぜならこれには可搬性がないからです。常に@code{file-name-as-directory}を使用してください。"

#. type: Plain text
#: original_texis/files.texi:2300
msgid "To avoid the issues mentioned above, or if the @var{dirname} value might be @code{nil} (for example, from an element of @code{load-path}), use:"
msgstr "上述の問題の回避や@var{dirname}の値が@code{nil}かもしれない場合(たとえば@code{load-path}の要素を使用する際)には以下を使用します:"

#. type: example
#: original_texis/files.texi:2303
#, no-wrap
msgid "(expand-file-name @var{relfile} @var{dirname})\n"
msgstr "(expand-file-name @var{relfile} @var{dirname})\n"

#. type: Plain text
#: original_texis/files.texi:2308
msgid "However, @code{expand-file-name} expands leading @samp{~} in @var{relfile}, which may not be what you want.  @xref{File Name Expansion}."
msgstr "ただし@code{expand-file-name}は@var{relfile}の先頭の@samp{~}を展開しますが、これは望んだ動作ではないかもしれません。@ref{File Name Expansion}を参照してください。"

#. type: Plain text
#: original_texis/files.texi:2311
msgid "To convert a directory name to its abbreviation, use this function:"
msgstr "ディレクトリー名をディレクトリーの省略名に変換するには以下の関数を使用します:"

#. type: cindex
#: original_texis/files.texi:2312
#, no-wrap
msgid "file name abbreviations"
msgstr "file name abbreviations"

#. type: cindex
#: original_texis/files.texi:2313
#, no-wrap
msgid "abbreviated file names"
msgstr "abbreviated file names"

#. type: vindex
#: original_texis/files.texi:2314
#, no-wrap
msgid "directory-abbrev-alist"
msgstr "directory-abbrev-alist"

#. type: defun
#: original_texis/files.texi:2315
#, no-wrap
msgid "abbreviate-file-name filename"
msgstr "abbreviate-file-name filename"

#. type: anchor{#1}
#: original_texis/files.texi:2325
msgid "abbreviate-file-name"
msgstr "abbreviate-file-name"

#. type: defun
#: original_texis/files.texi:2325
msgid "This function returns an abbreviated form of @var{filename}.  It applies the abbreviations specified in @code{directory-abbrev-alist} (@pxref{File Aliases,,File Aliases, emacs, The GNU Emacs Manual}), then substitutes @samp{~} for the user's home directory if the argument names a file in the home directory or one of its subdirectories.  If the home directory is a root directory, it is not replaced with @samp{~}, because this does not make the result shorter on many systems."
msgstr ""
"この関数は@var{filename}の省略された形式をリターンする。\n"
"これは@code{directory-abbrev-alist} (@ref{File Aliases,,File Aliases, emacs, The GNU Emacs Manual}を参照)で指定される省略名を適用して、引数で与えられるファイル名ががホームディレクトリーかそのサブディレクトリーにあれば、ユーザーのホームディレクトリーを@samp{~}に置換する。ホームディレクトリーがルートディレクトリーなの場合には、多くのシステムでは結果が短縮されないので@samp{~}で置き換えない。"

#. type: defun
#: original_texis/files.texi:2328
msgid "You can use this function for directory names and for file names, because it recognizes abbreviations even as part of the name."
msgstr "これは名前の一部であるような省略形さえも認識するので、ディレクトリー名とファイル名にも使用できる。"

#. type: subsection
#: original_texis/files.texi:2331
#, no-wrap
msgid "Functions that Expand Filenames"
msgstr "Functions that Expand Filenames"

#. type: cindex
#: original_texis/files.texi:2332
#, no-wrap
msgid "expansion of file names"
msgstr "expansion of file names"

#. type: Plain text
#: original_texis/files.texi:2339
msgid "@dfn{Expanding} a file name means converting a relative file name to an absolute one.  Since this is done relative to a default directory, you must specify the default directory as well as the file name to be expanded.  It also involves expanding abbreviations like @file{~/}"
msgstr "ファイル名の@dfn{展開(expanding)}と、相対ファイル名を絶対ファイル名に変換することを意味します。これはデフォルトディレクトリーから相対的に行われるため、展開されるファイル名と同様にデフォルトディレクトリーも指定しなければなりません。これは@file{~/}のような省略形"

#. type: ifnottex
#: original_texis/files.texi:2341
msgid "(@pxref{abbreviate-file-name}),"
msgstr "(@ref{abbreviate-file-name}を参照)、"

#. type: Plain text
#: original_texis/files.texi:2343
msgid "and eliminating redundancies like @file{./} and @file{@var{name}/../}."
msgstr "の展開、および@file{./}や@file{@var{name}/../}のような冗長さの排除も行います。"

#. type: defun
#: original_texis/files.texi:2344
#, no-wrap
msgid "expand-file-name filename &optional directory"
msgstr "expand-file-name filename &optional directory"

#. type: defun
#: original_texis/files.texi:2352
msgid "This function converts @var{filename} to an absolute file name.  If @var{directory} is supplied, it is the default directory to start with if @var{filename} is relative and does not start with @samp{~}.  (The value of @var{directory} should itself be an absolute directory name or directory file name; it may start with @samp{~}.)  Otherwise, the current buffer's value of @code{default-directory} is used.  For example:"
msgstr "この関数は@var{filename}を絶対ファイル名に変換する。@var{directory}が与えられた場合には@var{filename}が相対的であり先頭が@samp{~}でなければ、それが開始点となるデフォルトディレクトリーになる(@var{directory}の値はそれ自体が絶対ディレクトリー名かディレクトリーファイル名であるべきで、それは@samp{~}で始まるかもしれない)。それ以外ではカレントバッファーの@code{default-directory}の値が使用される。たとえば:"

#. type: group
#: original_texis/files.texi:2357
#, no-wrap
msgid ""
"(expand-file-name \"foo\")\n"
"     @result{} \"/xcssun/users/rms/lewis/foo\"\n"
msgstr ""
"(expand-file-name \"foo\")\n"
"     @result{} \"/xcssun/users/rms/lewis/foo\"\n"

#. type: group
#: original_texis/files.texi:2361
#, no-wrap
msgid ""
"(expand-file-name \"../foo\")\n"
"     @result{} \"/xcssun/users/rms/foo\"\n"
msgstr ""
"(expand-file-name \"../foo\")\n"
"     @result{} \"/xcssun/users/rms/foo\"\n"

#. type: group
#: original_texis/files.texi:2365
#, no-wrap
msgid ""
"(expand-file-name \"foo\" \"/usr/spool/\")\n"
"     @result{} \"/usr/spool/foo\"\n"
msgstr ""
"(expand-file-name \"foo\" \"/usr/spool/\")\n"
"     @result{} \"/usr/spool/foo\"\n"

#. type: defun
#: original_texis/files.texi:2377
msgid "If the part of @var{filename} before the first slash is @samp{~}, it expands to the value of the @env{HOME} environment variable (usually your home directory).  If the part before the first slash is @samp{~@var{user}} and if @var{user} is a valid login name, it expands to @var{user}'s home directory.  If you do not want this expansion for a relative @var{filename} that might begin with a literal @samp{~}, you can use @code{(concat (file-name-as-directory directory) filename)} instead of @code{(expand-file-name filename directory)}."
msgstr "@var{filename}の最初のスラッシュの前が@samp{~}なら環境変数@env{HOME} (通常はユーザーのホームディレクトリー)の値に展開される。最初のスラッシュの前が@samp{~@var{user}}で@var{user}が有効なログイン名なら@var{user}のホームディレクトリーに展開される。リテラル@samp{~}で始まるかもしれない相対的な@var{filename}にたいして展開を望まない場合には@code{(expand-file-name filename directory)}のかわりに@code{(concat (file-name-as-directory directory) filename)}を使用できる。"

#. type: defun
#: original_texis/files.texi:2380
msgid "Filenames containing @samp{.} or @samp{..} are simplified to their canonical form:"
msgstr "@samp{.}や@samp{..}を含むファイル名は正規化形式に簡略化される:"

#. type: group
#: original_texis/files.texi:2385
#, no-wrap
msgid ""
"(expand-file-name \"bar/../foo\")\n"
"     @result{} \"/xcssun/users/rms/lewis/foo\"\n"
msgstr ""
"(expand-file-name \"bar/../foo\")\n"
"     @result{} \"/xcssun/users/rms/lewis/foo\"\n"

#. type: defun
#: original_texis/files.texi:2389
msgid "In some cases, a leading @samp{..} component can remain in the output:"
msgstr "出力に@samp{..}部分が残り得る場合もある:"

#. type: group
#: original_texis/files.texi:2394
#, no-wrap
msgid ""
"(expand-file-name \"../home\" \"/\")\n"
"     @result{} \"/../home\"\n"
msgstr ""
"(expand-file-name \"../home\" \"/\")\n"
"     @result{} \"/../home\"\n"

#. type: defun
#: original_texis/files.texi:2401
msgid "This is for the sake of filesystems that have the concept of a superroot above the root directory @file{/}.  On other filesystems, @file{/../} is interpreted exactly the same as @file{/}."
msgstr "これはルートディレクトリー@file{/}の上位のスーパールート(superroot)という概念をもつファイルシステムのためのものである。その他のファイルシステムでは@file{/../}は@file{/}とまったく同じに解釈される。"

#. type: defun
#: original_texis/files.texi:2404
msgid "Note that @code{expand-file-name} does @emph{not} expand environment variables; only @code{substitute-in-file-name} does that:"
msgstr "@code{expand-file-name}は環境変数を@emph{展開しない}ことに注意。それを行うのは@code{substitute-in-file-name}のみ。"

#. type: group
#: original_texis/files.texi:2409
#, no-wrap
msgid ""
"(expand-file-name \"$HOME/foo\")\n"
"     @result{} \"/xcssun/users/rms/lewis/$HOME/foo\"\n"
msgstr ""
"(expand-file-name \"$HOME/foo\")\n"
"     @result{} \"/xcssun/users/rms/lewis/$HOME/foo\"\n"

#. type: defun
#: original_texis/files.texi:2417
msgid "Note also that @code{expand-file-name} does not follow symbolic links at any level.  This results in a difference between the way @code{file-truename} and @code{expand-file-name} treat @samp{..}.  Assuming that @samp{/tmp/bar} is a symbolic link to the directory @samp{/tmp/foo/bar} we get:"
msgstr "@code{expand-file-name}はあらゆる階層においてシンボリックリンクをフォローしないことにも注意。これは@samp{..}の扱いが@code{file-truename}と@code{expand-file-name}で異なることに起因する。@samp{/tmp/bar}がディレクトリー@samp{/tmp/foo/bar}にたいするシンボリックリンクであると仮定すると:"

#. type: group
#: original_texis/files.texi:2422
#, no-wrap
msgid ""
"(file-truename \"/tmp/bar/../myfile\")\n"
"     @result{} \"/tmp/foo/myfile\"\n"
msgstr ""
"(file-truename \"/tmp/bar/../myfile\")\n"
"     @result{} \"/tmp/foo/myfile\"\n"

#. type: group
#: original_texis/files.texi:2426
#, no-wrap
msgid ""
"(expand-file-name \"/tmp/bar/../myfile\")\n"
"     @result{} \"/tmp/myfile\"\n"
msgstr ""
"(expand-file-name \"/tmp/bar/../myfile\")\n"
"     @result{} \"/tmp/myfile\"\n"

#. type: defun
#: original_texis/files.texi:2432
msgid "If you may need to follow symbolic links preceding @samp{..}, you should make sure to call @code{file-truename} without prior direct or indirect calls to @code{expand-file-name}.  @xref{Truenames}."
msgstr "直接間接を問わず事前に@code{expand-file-name}を呼び出さずに@samp{..}に先行するシンボリックリンクをフォローする必要があるかもしれない場合には、それを呼び出さずに確実に@code{file-truename}を呼び出すこと。@ref{Truenames}を参照されたい。"

#. type: defvar
#: original_texis/files.texi:2434
#, no-wrap
msgid "default-directory"
msgstr "default-directory"

#. type: defvar
#: original_texis/files.texi:2438
msgid "The value of this buffer-local variable is the default directory for the current buffer.  It should be an absolute directory name; it may start with @samp{~}.  This variable is buffer-local in every buffer."
msgstr "このバッファーローカル変数の値はカレントバッファーにたいするデフォルトディレクトリー。これは絶対ディレクトリー名であること。これは@samp{~}で始まるかもしれない。この変数はすべてのバッファーにおいてバッファーローカル。"

#. type: defvar
#: original_texis/files.texi:2441
msgid "@code{expand-file-name} uses the default directory when its second argument is @code{nil}."
msgstr "2つ目の引数が@code{nil}なら、@code{expand-file-name}はデフォルトディレクトリーを使用する。"

#. type: defvar
#: original_texis/files.texi:2443
msgid "The value is always a string ending with a slash."
msgstr "値は常にスラッシュで終わる文字列。"

#. type: group
#: original_texis/files.texi:2448
#, no-wrap
msgid ""
"default-directory\n"
"     @result{} \"/user/lewis/manual/\"\n"
msgstr ""
"default-directory\n"
"     @result{} \"/user/lewis/manual/\"\n"

#. type: defun
#: original_texis/files.texi:2452
#, no-wrap
msgid "substitute-in-file-name filename"
msgstr "substitute-in-file-name filename"

#. type: anchor{#1}
#: original_texis/files.texi:2460
msgid "Definition of substitute-in-file-name"
msgstr "Definition of substitute-in-file-name"

#. type: defun
#: original_texis/files.texi:2460
msgid "This function replaces environment variable references in @var{filename} with the environment variable values.  Following standard Unix shell syntax, @samp{$} is the prefix to substitute an environment variable value.  If the input contains @samp{$$}, that is converted to @samp{$}; this gives the user a way to quote a @samp{$}."
msgstr "この関数は@var{filename}内で参照される環境変数を環境変数の値に置き換える。標準的なUnixシェル構文にしたがい @samp{$}は環境変数値を置き換るプレフィックスである。入力に@samp{$$}が含まれる場合には、それらは@samp{$}に置き換えられる。これによりユーザーが@samp{$}をクォートする手段が与えられる。"

#. type: defun
#: original_texis/files.texi:2465
msgid "The environment variable name is the series of alphanumeric characters (including underscores) that follow the @samp{$}.  If the character following the @samp{$} is a @samp{@{}, then the variable name is everything up to the matching @samp{@}}."
msgstr "環境変数名は@samp{$}の後に続く一連の英数字(アンダースコアを含む)である。@samp{$}の後続文字が@samp{@{}なら対応する@samp{@}}までのすべてが変数名である。"

#. type: defun
#: original_texis/files.texi:2474
msgid "Calling @code{substitute-in-file-name} on output produced by @code{substitute-in-file-name} tends to give incorrect results.  For instance, use of @samp{$$} to quote a single @samp{$} won't work properly, and @samp{$} in an environment variable's value could lead to repeated substitution.  Therefore, programs that call this function and put the output where it will be passed to this function need to double all @samp{$} characters to prevent subsequent incorrect results."
msgstr "@code{substitute-in-file-name}により生成された出力で@code{substitute-in-file-name}を呼び出すと不正な結果となる傾向がある。たとえば単一の@samp{$}をクォートするために@samp{$$}を使用しても正しく機能せずに環境変数値の中の@samp{$}は再帰的な置換を導くだろう。したがってこの関数を呼び出して出力をこの関数に渡すプログラムは、その後の不正な結果を防ぐためにすべての@samp{$}文字を二重化する必要がある。"

#. type: defun
#: original_texis/files.texi:2478
msgid "Here we assume that the environment variable @env{HOME}, which holds the user's home directory, has value @samp{/xcssun/users/rms}."
msgstr "以下ではユーザーのホームディレクトリーを保持する環境変数@env{HOME}の値が@samp{/xcssun/users/rms}だと仮定する。"

#. type: group
#: original_texis/files.texi:2483
#, no-wrap
msgid ""
"(substitute-in-file-name \"$HOME/foo\")\n"
"     @result{} \"/xcssun/users/rms/foo\"\n"
msgstr ""
"(substitute-in-file-name \"$HOME/foo\")\n"
"     @result{} \"/xcssun/users/rms/foo\"\n"

#. type: defun
#: original_texis/files.texi:2489
msgid "After substitution, if a @samp{~} or a @samp{/} appears immediately after another @samp{/}, the function discards everything before it (up through the immediately preceding @samp{/})."
msgstr "置き換え後には、@samp{/}の直後に@samp{~}や別の@samp{/}が出現すると、この関数は@samp{/}の前にあるすべてを無視する。"

#. type: group
#: original_texis/files.texi:2494
#, no-wrap
msgid ""
"(substitute-in-file-name \"bar/~/foo\")\n"
"     @result{} \"~/foo\"\n"
msgstr ""
"(substitute-in-file-name \"bar/~/foo\")\n"
"     @result{} \"~/foo\"\n"

#. type: group
#: original_texis/files.texi:2499
#, no-wrap
msgid ""
"(substitute-in-file-name \"/usr/local/$HOME/foo\")\n"
"     @result{} \"/xcssun/users/rms/foo\"\n"
"     ;; @r{@file{/usr/local/} has been discarded.}\n"
msgstr ""
"(substitute-in-file-name \"/usr/local/$HOME/foo\")\n"
"     @result{} \"/xcssun/users/rms/foo\"\n"
"     ;; @r{@file{/usr/local/}は破棄された}\n"

#. type: Plain text
#: original_texis/files.texi:2508
msgid "Sometimes, it is not desired to expand file names.  In such cases, the file name can be quoted to suppress the expansion, and to handle the file name literally.  Quoting happens by prefixing the file name with @samp{/:}."
msgstr "ファイル名の展開が望ましくない場合もあります。そのような場合には展開を抑制するためにファイル名をクォートしてファイル名をそのままリテラルとして処理することができます。ファイル名の前に@samp{/:}を前置することによりクォートが行われます。"

#. type: defmac
#: original_texis/files.texi:2509
#, no-wrap
msgid "file-name-quote name"
msgstr "file-name-quote name"

#. type: defmac
#: original_texis/files.texi:2515
msgid "This macro adds the quotation prefix @samp{/:} to the file @var{name}.  For a local file @var{name}, it prefixes @var{name} with @samp{/:}.  If @var{name} is a remote file name, the local part of @var{name} is quoted.  If @var{name} is already a quoted file name, @var{name} is returned unchanged."
msgstr "このマクロはファイル@var{name}にクォートプレフィクス@samp{/:}を追加する。ローカルファイル@var{name}には@var{name}にプレフィクス@samp{/:}を追加する。@var{name}がリモートファイル名なら@var{name}のローカル部分をクォートする。@var{name}がすでにクォートされたファイル名なら@var{name}を変更せずにリターンする。"

#. type: group
#: original_texis/files.texi:2520
#, no-wrap
msgid ""
"(substitute-in-file-name (file-name-quote \"bar/~/foo\"))\n"
"     @result{} \"/:bar/~/foo\"\n"
msgstr ""
"(substitute-in-file-name (file-name-quote \"bar/~/foo\"))\n"
"     @result{} \"/:bar/~/foo\"\n"

#. type: group
#: original_texis/files.texi:2525
#, no-wrap
msgid ""
"(substitute-in-file-name (file-name-quote \"/ssh:host:bar/~/foo\"))\n"
"     @result{} \"/ssh:host:/:bar/~/foo\"\n"
msgstr ""
"(substitute-in-file-name (file-name-quote \"/ssh:host:bar/~/foo\"))\n"
"     @result{} \"/ssh:host:/:bar/~/foo\"\n"

#. type: defmac
#: original_texis/files.texi:2530
msgid "The macro cannot be used to suppress file name handlers from magic file names (@pxref{Magic File Names})."
msgstr "マジックファイル名によるファイル名ハンドラーを抑制するためにこのマクロは使用できない(@ref{Magic File Names}を参照)。"

#. type: defmac
#: original_texis/files.texi:2532
#, no-wrap
msgid "file-name-unquote name"
msgstr "file-name-unquote name"

#. type: defmac
#: original_texis/files.texi:2536
msgid "This macro removes the quotation prefix @samp{/:} from the file @var{name}, if any. If @var{name} is a remote file name, the local part of @var{name} is unquoted."
msgstr "このマクロはファイル@var{name}にクォーテーションプレフィクス@samp{/:}があれば削除する。@var{name}がリモートファイル名なら@var{name}のローカル部分を非クォート化する。"

#. type: defmac
#: original_texis/files.texi:2538
#, no-wrap
msgid "file-name-quoted-p name"
msgstr "file-name-quoted-p name"

#. type: defmac
#: original_texis/files.texi:2542
msgid "This macro returns non-@code{nil}, when @var{name} is quoted with the prefix @samp{/:}.  If @var{name} is a remote file name, the local part of @var{name} is checked."
msgstr "このマクロは@var{name}がプレフィクス@samp{/:}でクォートされていれば非@code{nil}をリターンする。@var{name}がリモートファイル名なら@var{name}のローカル部分をチェックする。"

#. type: subsection
#: original_texis/files.texi:2546
#, no-wrap
msgid "Generating Unique File Names"
msgstr "Generating Unique File Names"

#. type: cindex
#: original_texis/files.texi:2547
#, no-wrap
msgid "unique file names"
msgstr "unique file names"

#. type: cindex
#: original_texis/files.texi:2548
#, no-wrap
msgid "temporary files"
msgstr "temporary files"

#. type: Plain text
#: original_texis/files.texi:2552
msgid "Some programs need to write temporary files.  Here is the usual way to construct a name for such a file:"
msgstr "一時ファイルに書き込む必要があるプログラムがいくつかあります。以下は、そのようなファイルを構築する便利な方法です:"

#. type: example
#: original_texis/files.texi:2555
#, no-wrap
msgid "(make-temp-file @var{name-of-application})\n"
msgstr "(make-temp-file @var{name-of-application})\n"

#. type: Plain text
#: original_texis/files.texi:2560
msgid "The job of @code{make-temp-file} is to prevent two different users or two different jobs from trying to use the exact same file name."
msgstr "@code{make-temp-file}の役目は、2人の異なるユーザーやジョブが完全に一致する名前のファイルの使用を防ぐことです。"

#. type: defun
#: original_texis/files.texi:2561
#, no-wrap
msgid "make-temp-file prefix &optional dir-flag suffix text"
msgstr "make-temp-file prefix &optional dir-flag suffix text"

#. type: defun
#: original_texis/files.texi:2570
msgid "This function creates a temporary file and returns its name.  Emacs creates the temporary file's name by adding to @var{prefix} some random characters that are different in each Emacs job.  The result is guaranteed to be a newly created file, containing @var{text} if that's given as a string and empty otherwise. On MS-DOS, this function can truncate the @var{string} prefix to fit into the 8+3 file-name limits.  If @var{prefix} is a relative file name, it is expanded against @code{temporary-file-directory}."
msgstr "この関数は一時ファイルを作成して、その名前をリターンする。EmacsはEmacsの各ジョブごとに異なるランダムないくつかの文字を@var{prefix}に追加することにより一時ファイルの名前を作成する。結果として文字列として@var{text}が与えられていればそれを含むファイル、それ以外なら空のファイルが新たに作成されることが保障される。MS-DOSでは8+3のファイル名制限に適合するように、文字列@var{string}が切り詰められる可能性がある。@var{prefix}が相対ファイル名なら@code{temporary-file-directory}にたいして展開される。"

#. type: group
#: original_texis/files.texi:2575
#, no-wrap
msgid ""
"(make-temp-file \"foo\")\n"
"     @result{} \"/tmp/foo232J6v\"\n"
msgstr ""
"(make-temp-file \"foo\")\n"
"     @result{} \"/tmp/foo232J6v\"\n"

#. type: defun
#: original_texis/files.texi:2581
msgid "When @code{make-temp-file} returns, the file has been created and is empty.  At that point, you should write the intended contents into the file."
msgstr "@code{make-temp-file}がリターンした際には、一時ファイルは空で作成される。この時点でそのファイルに意図するコンテンツを書き込むこと。"

#. type: defun
#: original_texis/files.texi:2585
msgid "If @var{dir-flag} is non-@code{nil}, @code{make-temp-file} creates an empty directory instead of an empty file.  It returns the file name, not the directory name, of that directory.  @xref{Directory Names}."
msgstr "@var{dir-flag}が@code{nil}なら、@code{make-temp-file}は空のファイルのかわりに空のディレクトリーを作成する。これはディレクトリー名ではなく、ディレクトリーのファイル名をリターンする。@ref{Directory Names}を参照のこと。"

#. type: defun
#: original_texis/files.texi:2588
msgid "If @var{suffix} is non-@code{nil}, @code{make-temp-file} adds it at the end of the file name."
msgstr "@var{suffix}が非@code{nil}なら、@code{make-temp-file}はそれをファイル名の最後に追加する。"

#. type: defun
#: original_texis/files.texi:2590
msgid "If @var{text} is a string, @code{make-temp-file} inserts it in the file."
msgstr "@var{text}が文字列なら@code{make-temp-file}はそれをファイルに挿入する。"

#. type: defun
#: original_texis/files.texi:2597
msgid "To prevent conflicts among different libraries running in the same Emacs, each Lisp program that uses @code{make-temp-file} should have its own @var{prefix}.  The number added to the end of @var{prefix} distinguishes between the same application running in different Emacs jobs.  Additional added characters permit a large number of distinct names even in one Emacs job."
msgstr "同じEmacs内で実行される異なるライブラリー間での競合を防ぐために、@code{make-temp-file}を使用する各Lispプログラムがプログラム自身の@var{prefix}を使用すること。@var{prefix}の最後に追加される数字は、異なるEmacsジョブ内で実行される同じアプリケーションを区別する。追加される文字により、同一のEmacsジョブ内でも多数の名前を区別することが可能になる。"

#. type: Plain text
#: original_texis/files.texi:2605
msgid "The default directory for temporary files is controlled by the variable @code{temporary-file-directory}.  This variable gives the user a uniform way to specify the directory for all temporary files.  Some programs use @code{small-temporary-file-directory} instead, if that is non-@code{nil}.  To use it, you should expand the prefix against the proper directory before calling @code{make-temp-file}."
msgstr "一時ファイル用のデフォルトディレクトリーは変数@code{temporary-file-directory}により制御されます。この変数によりすべての一時ファイルにたいして、ユーザーがディレクトリーを指定する一貫した方法が与えられます。@code{small-temporary-file-directory}が非@code{nil}なら、かわりにそれを使うプログラムもいくつかあります。これを使う場合には、@code{make-temp-file}を呼び出す前に正しいディレクトリーにたいしてプレフィックスを展開するべきです。"

#. type: defun
#: original_texis/files.texi:2606 original_texis/files.texi:2681
#, no-wrap
msgid "temporary-file-directory"
msgstr "temporary-file-directory"

#. type: cindex
#: original_texis/files.texi:2607
#, no-wrap
msgid "@env{TMPDIR} environment variable"
msgstr "@env{TMPDIR} environment variable"

#. type: cindex
#: original_texis/files.texi:2608
#, no-wrap
msgid "@env{TMP} environment variable"
msgstr "@env{TMP} environment variable"

#. type: cindex
#: original_texis/files.texi:2609
#, no-wrap
msgid "@env{TEMP} environment variable"
msgstr "@env{TEMP} environment variable"

#. type: defopt
#: original_texis/files.texi:2615
msgid "This variable specifies the directory name for creating temporary files.  Its value should be a directory name (@pxref{Directory Names}), but it is good for Lisp programs to cope if the value is a directory's file name instead.  Using the value as the second argument to @code{expand-file-name} is a good way to achieve that."
msgstr "この変数は一時ファイル作成用のディレクトリー名を指定する。値はディレクトリー名であるべきだが、もし値がディレクトリーのファイル名(@ref{Directory Names}を参照)ならば、Lispプログラムがかわりに対処すればよい。@code{expand-file-name}の2つ目の引数としてその値を使用するのは、それを達成するよい方法である。"

#. type: defopt
#: original_texis/files.texi:2620
msgid "The default value is determined in a reasonable way for your operating system; it is based on the @env{TMPDIR}, @env{TMP} and @env{TEMP} environment variables, with a fall-back to a system-dependent name if none of these variables is defined."
msgstr "デフォルト値はオペレーティングシステムにたいして適切な方法により決定される。これは環境変数@env{TMPDIR}、@env{TMP}、@env{TEMP}にもとづく値で、これらの変数が定義されていなければシステム依存の名前にフォールバックする。"

#. type: defopt
#: original_texis/files.texi:2626
msgid "Even if you do not use @code{make-temp-file} to create the temporary file, you should still use this variable to decide which directory to put the file in.  However, if you expect the file to be small, you should use @code{small-temporary-file-directory} first if that is non-@code{nil}."
msgstr "一時ファイルの作成に@code{make-temp-file}を使用しない場合でも、一時ファイルを置くディレクトリーを判断するために依然としてこの変数を使用するべきである。しかし一時ファイルが小さくなることを求める場合には、@code{small-temporary-file-directory}が非@code{nil}ならそれを使用すること。"

#. type: defopt
#: original_texis/files.texi:2628
#, no-wrap
msgid "small-temporary-file-directory"
msgstr "small-temporary-file-directory"

#. type: defopt
#: original_texis/files.texi:2631
msgid "This variable specifies the directory name for creating certain temporary files, which are likely to be small."
msgstr "この変数はサイズが小さいと予想される特定の一時ファイル作成用のディレクトリー名を指定する。"

#. type: defopt
#: original_texis/files.texi:2634
msgid "If you want to write a temporary file which is likely to be small, you should compute the directory like this:"
msgstr "小さくなるかもしれない一時ファイルに書き込みたいなら、以下のようにディレクトリーを計算すること:"

#. type: example
#: original_texis/files.texi:2640
#, no-wrap
msgid ""
"(make-temp-file\n"
"  (expand-file-name @var{prefix}\n"
"                    (or small-temporary-file-directory\n"
"                        temporary-file-directory)))\n"
msgstr ""
"(make-temp-file\n"
"  (expand-file-name @var{prefix}\n"
"                    (or small-temporary-file-directory\n"
"                        temporary-file-directory)))\n"

#. type: defun
#: original_texis/files.texi:2643
#, no-wrap
msgid "make-temp-name base-name"
msgstr "make-temp-name base-name"

#. type: defun
#: original_texis/files.texi:2652
msgid "This function generates a string that might be a unique file name.  The name starts with @var{base-name}, and has several random characters appended to it, which are different in each Emacs job.  It is like @code{make-temp-file} except that (i) it just constructs a name and does not create a file, (ii) @var{base-name} should be an absolute file name that is not magic, and (iii) if the returned file name is magic, it might name an existing file.  @xref{Magic File Names}."
msgstr "この関数は一意なファイル名として使用できる文字列を生成する。この名前は@var{base-name}で始まり、それに各Emacsジョブごとに異なる複数のランダムな文字を追加したものである。これは@code{make-temp-file}と似ているが、(i)名前だけを作成してファイルは作成せず、(ii)@var{base-name}はマジックファイル名ではない絶対ファイル名であること、(iii)リターンされるファイル名がマジックファイル名なら既存のファイルかもしれない、という点が異なる(MS-DOSシステムでは8+3ファイル名制限に適合するように@var{base-name}が切り詰められる)。"

#. type: defun
#: original_texis/files.texi:2657
msgid "@strong{Warning:} In most cases, you should not use this function; use @code{make-temp-file} instead! This function is susceptible to a race condition, between the @code{make-temp-name} call and the creation of the file, which in some cases may cause a security hole."
msgstr "@strong{警告:} この関数を使用するべきではない。かわりに@code{make-temp-file}を使用すること! この関数は競合状態の影響を受けやすい。@code{make-temp-name}呼び出しと一時ファイル作成のタイムラグはセキュリティーホールとなり得る。"

#. type: Plain text
#: original_texis/files.texi:2661
msgid "Sometimes, it is necessary to create a temporary file on a remote host or a mounted directory.  The following two functions support this."
msgstr "リモートホストやマウントされたディレクトリーで一時ファイルの作成を要する場合があります。以下の2つの関数はそれをサポートします。"

#. type: defun
#: original_texis/files.texi:2662
#, no-wrap
msgid "make-nearby-temp-file prefix &optional dir-flag suffix"
msgstr "make-nearby-temp-file prefix &optional dir-flag suffix"

#. type: defun
#: original_texis/files.texi:2671
msgid "This function is similar to @code{make-temp-file}, but it creates a temporary file as close as possible to @code{default-directory}.  If @var{prefix} is a relative file name, and @code{default-directory} is a remote file name or located on a mounted file systems, the temporary file is created in the directory returned by the function @code{temporary-file-directory}.  Otherwise, the function @code{make-temp-file} is used.  @var{prefix}, @var{dir-flag} and @var{suffix} have the same meaning as in @code{make-temp-file}."
msgstr "この関数は@code{make-temp-file}と同様だができ得るかぎり@code{default-directory}に近接した一時ファイルを作成する点が異なる。@var{prefix}が相対ファイル名で@code{default-directory}がリモートファイル名かマウントされたファイルシステムに配置されていれば、一時ファイルは関数@code{temporary-file-directory}がリターンするディレクトリー内に作成される。それ以外なら関数@code{make-temp-file}を使用する。@var{prefix}、@var{dir-flag}、@var{suffix}の意味は@code{make-temp-file}の場合と同様。"

#. type: group
#: original_texis/files.texi:2677
#, no-wrap
msgid ""
"(let ((default-directory \"/ssh:remotehost:\"))\n"
"  (make-nearby-temp-file \"foo\"))\n"
"     @result{} \"/ssh:remotehost:/tmp/foo232J6v\"\n"
msgstr ""
"(let ((default-directory \"/ssh:remotehost:\"))\n"
"  (make-nearby-temp-file \"foo\"))\n"
"     @result{} \"/ssh:remotehost:/tmp/foo232J6v\"\n"

#. type: defun
#: original_texis/files.texi:2691
msgid "The directory for writing temporary files via @code{make-nearby-temp-file}.  In case of a remote @code{default-directory}, this is a directory for temporary files on that remote host.  If such a directory does not exist, or @code{default-directory} ought to be located on a mounted file system (see @code{mounted-file-systems}), the function returns @code{default-directory}.  For a non-remote and non-mounted @code{default-directory}, the value of the variable @code{temporary-file-directory} is returned."
msgstr "@code{make-nearby-temp-file}を通じて一時ファイルを書き込むディレクトリー。@code{default-directory}がリモートの場合にはリモートホスト上の一時ファイル用のディレクトリー。そのようなディレクトリーが存在しない、または@code{default-directory}がマウントされるファイルシステム上に配置される場合(@code{mounted-file-systems}を参照)には、この関数は@code{default-directory}をリターンする。リモートでもマウントされたファイルシステムでもない@code{default-directory}では@code{temporary-file-directory}の値がリターンされる。"

#. type: Plain text
#: original_texis/files.texi:2695
msgid "In order to extract the local part of the path name from a temporary file, @code{file-local-name} could be used."
msgstr "一時ファイルからパス名のローカル部分を抽出するために@code{file-local-name}を使用できます。"

#. type: cindex
#: original_texis/files.texi:2698
#, no-wrap
msgid "file name completion subroutines"
msgstr "file name completion subroutines"

#. type: cindex
#: original_texis/files.texi:2699
#, no-wrap
msgid "completion, file name"
msgstr "completion, file name"

#. type: Plain text
#: original_texis/files.texi:2703
msgid "This section describes low-level subroutines for completing a file name.  For higher level functions, see @ref{Reading File Names}."
msgstr "このセクションではファイル名を補完するための低レベルサブルーチンについて説明します。より高レベルの関数については@ref{Reading File Names}を参照してください。"

#. type: defun
#: original_texis/files.texi:2704
#, no-wrap
msgid "file-name-all-completions partial-filename directory"
msgstr "file-name-all-completions partial-filename directory"

#. type: defun
#: original_texis/files.texi:2710
msgid "This function returns a list of all possible completions for a file whose name starts with @var{partial-filename} in directory @var{directory}.  The order of the completions is the order of the files in the directory, which is unpredictable and conveys no useful information."
msgstr "この関数はディレクトリー@var{directory}内で@var{partial-filename}で始まる名前のファイルにたいする、すべての補完可能なリストをリターンする。補完の順番はそのディレクトリー内でのファイル順序であり、これは予測不能であり何の情報ももたない。"

#. type: defun
#: original_texis/files.texi:2715
msgid "The argument @var{partial-filename} must be a file name containing no directory part and no slash (or backslash on some systems).  The current buffer's default directory is prepended to @var{directory}, if @var{directory} is not absolute."
msgstr "引数@var{partial-filename}は非ディレクトリーパートを含むファイル名でなければならず、スラッシュ(いくつかのシステムではバックスラッシュ)が含まれていてはならない。@var{directory}が絶対ディレクトリーでなければ、@var{directory}の前にカレントバッファーのデフォルトディレクトリーが追加される。"

#. type: defun
#: original_texis/files.texi:2720
msgid "In the following example, suppose that @file{~rms/lewis} is the current default directory, and has five files whose names begin with @samp{f}: @file{foo}, @file{file~}, @file{file.c}, @file{file.c.~1~}, and @file{file.c.~2~}."
msgstr "以下の例では@file{~rms/lewis}がカレントデフォルトディレクトリーで、名前が@samp{f}で始まる5つのファイル@file{foo}、@file{file~}、@file{file.c}、@file{file.c.~1~}、@file{file.c.~2~}がある:"

#. type: group
#: original_texis/files.texi:2726
#, no-wrap
msgid ""
"(file-name-all-completions \"f\" \"\")\n"
"     @result{} (\"foo\" \"file~\" \"file.c.~2~\"\n"
"                \"file.c.~1~\" \"file.c\")\n"
msgstr ""
"(file-name-all-completions \"f\" \"\")\n"
"     @result{} (\"foo\" \"file~\" \"file.c.~2~\"\n"
"                \"file.c.~1~\" \"file.c\")\n"

#. type: group
#: original_texis/files.texi:2731
#, no-wrap
msgid ""
"(file-name-all-completions \"fo\" \"\")\n"
"     @result{} (\"foo\")\n"
msgstr ""
"(file-name-all-completions \"fo\" \"\")\n"
"     @result{} (\"foo\")\n"

#. type: defun
#: original_texis/files.texi:2735
#, no-wrap
msgid "file-name-completion filename directory &optional predicate"
msgstr "file-name-completion filename directory &optional predicate"

#. type: defun
#: original_texis/files.texi:2742
msgid "This function completes the file name @var{filename} in directory @var{directory}.  It returns the longest prefix common to all file names in directory @var{directory} that start with @var{filename}.  If @var{predicate} is non-@code{nil} then it ignores possible completions that don't satisfy @var{predicate}, after calling that function with one argument, the expanded absolute file name."
msgstr "この関数はディレクトリー@var{directory}内でファイル名@var{filename}を補完する。これはディレクトリー@var{directory}内で、@var{filename}で始まるすべてのファイル名にたいして、最長の共通プレフィックスをリターンする。@var{predicate}が非@code{nil}なら展開された絶対ファイル名を単一の引数として呼び出して、@var{predicate}を満足しない補完候補を無視する。"

#. type: defun
#: original_texis/files.texi:2746
msgid "If only one match exists and @var{filename} matches it exactly, the function returns @code{t}.  The function returns @code{nil} if directory @var{directory} contains no name starting with @var{filename}."
msgstr "マッチが1つだけ存在して、かつ@var{filename}が正確にそれにマッチする場合には、この関数は@code{t}をリターンする。関数はディレクトリー@var{directory}が@var{filename}で始まる名前のファイルを含まなければ@code{nil}をリターンする。"

#. type: defun
#: original_texis/files.texi:2751
msgid "In the following example, suppose that the current default directory has five files whose names begin with @samp{f}: @file{foo}, @file{file~}, @file{file.c}, @file{file.c.~1~}, and @file{file.c.~2~}."
msgstr "以下の例では@file{~rms/lewis}がカレントデフォルトディレクトリーで、名前が@samp{f}で始まる5つのファイル@file{foo}、@file{file~}、@file{file.c}、@file{file.c.~1~}、@file{file.c.~2~}がある:"

#. type: group
#: original_texis/files.texi:2756
#, no-wrap
msgid ""
"(file-name-completion \"fi\" \"\")\n"
"     @result{} \"file\"\n"
msgstr ""
"(file-name-completion \"fi\" \"\")\n"
"     @result{} \"file\"\n"

#. type: group
#: original_texis/files.texi:2761
#, no-wrap
msgid ""
"(file-name-completion \"file.c.~1\" \"\")\n"
"     @result{} \"file.c.~1~\"\n"
msgstr ""
"(file-name-completion \"file.c.~1\" \"\")\n"
"     @result{} \"file.c.~1~\"\n"

#. type: group
#: original_texis/files.texi:2766
#, no-wrap
msgid ""
"(file-name-completion \"file.c.~1~\" \"\")\n"
"     @result{} t\n"
msgstr ""
"(file-name-completion \"file.c.~1~\" \"\")\n"
"     @result{} t\n"

#. type: group
#: original_texis/files.texi:2771
#, no-wrap
msgid ""
"(file-name-completion \"file.c.~3\" \"\")\n"
"     @result{} nil\n"
msgstr ""
"(file-name-completion \"file.c.~3\" \"\")\n"
"     @result{} nil\n"

#. type: defopt
#: original_texis/files.texi:2775
#, no-wrap
msgid "completion-ignored-extensions"
msgstr "completion-ignored-extensions"

#. type: defopt
#: original_texis/files.texi:2780
msgid "@code{file-name-completion} usually ignores file names that end in any string in this list.  It does not ignore them when all the possible completions end in one of these suffixes.  This variable has no effect on @code{file-name-all-completions}."
msgstr "@code{file-name-completion}はこのリスト内の任意の文字列で終わるファイル名を通常は無視する。すべての可能な補完がこれらのサフィックスのいずれか1つで終わるときはそれらを無視しない。この変数は@code{file-name-all-completions}に影響しない。"

#. type: defopt
#: original_texis/files.texi:2782
msgid "A typical value might look like this:"
msgstr "以下は典型的な値:"

#. type: group
#: original_texis/files.texi:2787
#, no-wrap
msgid ""
"completion-ignored-extensions\n"
"     @result{} (\".o\" \".elc\" \"~\" \".dvi\")\n"
msgstr ""
"completion-ignored-extensions\n"
"     @result{} (\".o\" \".elc\" \"~\" \".dvi\")\n"

#. type: defopt
#: original_texis/files.texi:2794
msgid "If an element of @code{completion-ignored-extensions} ends in a slash @samp{/}, it signals a directory.  The elements which do @emph{not} end in a slash will never match a directory; thus, the above value will not filter out a directory named @file{foo.elc}."
msgstr "@code{completion-ignored-extensions}のある要素がスラッシュ@samp{/}で終わる場合には、それはディレクトリーを示す。スラッシュで@emph{終わらない}要素がディレクトリーにマッチすることは決してない。したがって上記の値は@file{foo.elc}という名前のディレクトリーを除外しないだろう。"

#. type: Plain text
#: original_texis/files.texi:2807
msgid "Sometimes, an Emacs Lisp program needs to specify a standard file name for a particular use---typically, to hold configuration data specified by the current user.  Usually, such files should be located in the directory specified by @code{user-emacs-directory}, which is @file{~/.emacs.d} by default (@pxref{Init File}).  For example, abbrev definitions are stored by default in @file{~/.emacs.d/abbrev_defs}.  The easiest way to specify such a file name is to use the function @code{locate-user-emacs-file}."
msgstr "Emacs Lispプログラムが特定の用途のために標準的なファイル名を指定することが必要な場合があります。典型的にはカレントユーザーによって指定された設定データを保持する場合が該当します。そのようなファイルは、通常は@code{user-emacs-directory}により指定されるディレクトリーに配置され、デフォルトでは@file{~/.emacs.d}です(@ref{Init File}を参照)。たとえばabbrev(abbreviation: 省略形)の定義は、デフォルトでは@file{~/.emacs.d/abbrev_defs}に格納されます。このようなファイル名を指定するためには、関数@code{locate-user-emacs-file}を使用するのがもっとも簡単な方法です。"

#. type: defun
#: original_texis/files.texi:2808
#, no-wrap
msgid "locate-user-emacs-file base-name &optional old-name"
msgstr "locate-user-emacs-file base-name &optional old-name"

#. type: defun
#: original_texis/files.texi:2814
msgid "This function returns an absolute file name for an Emacs-specific configuration or data file.  The argument @file{base-name} should be a relative file name.  The return value is the absolute name of a file in the directory specified by @code{user-emacs-directory}; if that directory does not exist, this function creates it."
msgstr "この関数はEmacs特有の設定ファイルやデータファイルにたいする絶対ファイル名をリターンする。引数@file{base-name}は、相対ファイル名であること。リターン値は@code{user-emacs-directory}で指定されるディレクトリー内の絶対ファイル名。そのディレクトリーが存在しなければ、この関数はディレクトリーを作成する。"

#. type: defun
#: original_texis/files.texi:2824
msgid "If the optional argument @var{old-name} is non-@code{nil}, it specifies a file in the user's home directory, @file{~/@var{old-name}}.  If such a file exists, the return value is the absolute name of that file, instead of the file specified by @var{base-name}.  This argument is intended to be used by Emacs packages to provide backward compatibility.  For instance, prior to the introduction of @code{user-emacs-directory}, the abbrev file was located in @file{~/.abbrev_defs}.  Here is the definition of @code{abbrev-file-name}:"
msgstr "オプション引数@var{old-name}が非@code{nil}なら、それはユーザーのホームディレクトリー内のファイル@file{~/@var{old-name}}を指定する。そのようなファイルが存在すれば、リターン値は@var{base-name}で指定されるファイルではなくそのファイルの絶対ファイル名となる。これはEmacsパッケージが後方互換を提供するために使用されることを意図した引数。たとえば@code{user-emacs-directory}導入前には、abbrevファイルは@file{~/.abbrev_defs}に置かれていた。以下は@code{abbrev-file-name}の定義である:"

#. type: example
#: original_texis/files.texi:2831
#, no-wrap
msgid ""
"(defcustom abbrev-file-name\n"
"  (locate-user-emacs-file \"abbrev_defs\" \".abbrev_defs\")\n"
"  \"Default name of file from which to read abbrevs.\"\n"
"  @dots{}\n"
"  :type 'file)\n"
msgstr ""
"(defcustom abbrev-file-name\n"
"  (locate-user-emacs-file \"abbrev_defs\" \".abbrev_defs\")\n"
"  \"Default name of file from which to read abbrevs.\"\n"
"  @dots{}\n"
"  :type 'file)\n"

#. type: Plain text
#: original_texis/files.texi:2837
msgid "A lower-level function for standardizing file names, which @code{locate-user-emacs-file} uses as a subroutine, is @code{convert-standard-filename}."
msgstr "ファイル名の標準化のための低レベル関数は@code{convert-standard-filename}で、これはサブルーチンとして@code{locate-user-emacs-file}により使用されます。"

#. type: defun
#: original_texis/files.texi:2838
#, no-wrap
msgid "convert-standard-filename filename"
msgstr "convert-standard-filename filename"

#. type: defun
#: original_texis/files.texi:2841
msgid "This function returns a file name based on @var{filename}, which fits the conventions of the current operating system."
msgstr "この関数は@var{filename}にもとづいたカレントオペレーティングシステムの慣習に適合するファイル名をリターンする。"

#. type: defun
#: original_texis/files.texi:2848
msgid "On GNU and other POSIX-like systems, this simply returns @var{filename}.  On other operating systems, it may enforce system-specific file name conventions; for example, on MS-DOS this function performs a variety of changes to enforce MS-DOS file name limitations, including converting any leading @samp{.} to @samp{_} and truncating to three characters after the @samp{.}."
msgstr "GNUや他のPOSIX準拠システムでは単に@var{filename}をリターンする。その他のオペレーティングシステムではシステム固有のファイル名規約にしたがうだろう。たとえばMS-DOSでは、この関数はMS-DOSファイル名制限にしたがうように先頭の@samp{.}を@samp{_}に変換したり、@samp{.}の後続の文字を3文字に切り詰める等、さまざまな変更を行う。"

#. type: defun
#: original_texis/files.texi:2852
msgid "The recommended way to use this function is to specify a name which fits the conventions of GNU and Unix systems, and pass it to @code{convert-standard-filename}."
msgstr "この関数でGNUとUnixシステムの慣習に適合する名前を指定して、それを@code{convert-standard-filename}に渡すのが推奨される使用方法である。"

#. type: cindex
#: original_texis/files.texi:2856
#, no-wrap
msgid "directory-oriented functions"
msgstr "directory-oriented functions"

#. type: cindex
#: original_texis/files.texi:2857
#, no-wrap
msgid "file names in directory"
msgstr "file names in directory"

#. type: Plain text
#: original_texis/files.texi:2861
msgid "A directory is a kind of file that contains other files entered under various names.  Directories are a feature of the file system."
msgstr "ディレクトリーとはファイルの一種であり、さまざまな名前のファイルを含んでいます。ディレクトリーはファイルシステムの機能です。"

#. type: Plain text
#: original_texis/files.texi:2866
msgid "Emacs can list the names of the files in a directory as a Lisp list, or display the names in a buffer using the @code{ls} shell command.  In the latter case, it can optionally display information about each file, depending on the options passed to the @code{ls} command."
msgstr "Emacsはディレクトリー内のファイル名をLispのリストとして一覧したり、シェルコマンド@code{ls}を使用してバッファー内にファイル名を表示することができます。後者の場合には、Emacsはオプションで各ファイルに関する情報も表示でき、それは@code{ls}コマンドに渡すオプションに依存します。"

#. type: defun
#: original_texis/files.texi:2867
#, no-wrap
msgid "directory-files directory &optional full-name match-regexp nosort"
msgstr "directory-files directory &optional full-name match-regexp nosort"

#. type: defun
#: original_texis/files.texi:2870
msgid "This function returns a list of the names of the files in the directory @var{directory}.  By default, the list is in alphabetical order."
msgstr "この関数はディレクトリー@var{directory}内のファイルの名前のリストをリターンする。デフォルトではリストはアルファベット順。"

#. type: defun
#: original_texis/files.texi:2874
msgid "If @var{full-name} is non-@code{nil}, the function returns the files' absolute file names.  Otherwise, it returns the names relative to the specified directory."
msgstr "この関数は@var{full-name}が非@code{nil}ならファイルの絶対ファイル名、それ以外なら指定されたディレクトリーにたいする相対ファイル名をリターンする。"

#. type: defun
#: original_texis/files.texi:2879
msgid "If @var{match-regexp} is non-@code{nil}, this function returns only those file names that contain a match for that regular expression---the other file names are excluded from the list.  On case-insensitive filesystems, the regular expression matching is case-insensitive."
msgstr "@var{match-regexp}が非@code{nil}なら、この関数はその正規表現にたいするマッチを含むファイル名だけをリターンして、それ以外のファイル名はリストから除外される。case(大文字小文字)を区別するファイルシステムでは、caseを区別する正規表現マッチングが行われる。"

#. type: defun
#: original_texis/files.texi:2886
msgid "If @var{nosort} is non-@code{nil}, @code{directory-files} does not sort the list, so you get the file names in no particular order.  Use this if you want the utmost possible speed and don't care what order the files are processed in.  If the order of processing is visible to the user, then the user will probably be happier if you do sort the names."
msgstr "@var{nosort}が非@code{nil}なら@code{directory-files}はリストをソートしないので、取得するファイル名に特定の順序はない。最大限の可能なスピードを得る必要がありファイル処理順を気にしなければこれを使用する。ユーザーから処理順が可視なら、名前をソートすれば多分ユーザーはより幸せになるだろう。"

#. type: group
#: original_texis/files.texi:2893
#, no-wrap
msgid ""
"(directory-files \"~lewis\")\n"
"     @result{} (\"#foo#\" \"#foo.el#\" \".\" \"..\"\n"
"         \"dired-mods.el\" \"files.texi\"\n"
"         \"files.texi.~1~\")\n"
msgstr ""
"(directory-files \"~lewis\")\n"
"     @result{} (\"#foo#\" \"#foo.el#\" \".\" \"..\"\n"
"         \"dired-mods.el\" \"files.texi\"\n"
"         \"files.texi.~1~\")\n"

#. type: defun
#: original_texis/files.texi:2898
msgid "An error is signaled if @var{directory} is not the name of a directory that can be read."
msgstr "@var{directory}が読み取り可能なディレクトリー名でなければエラーがシグナルされる。"

#. type: defun
#: original_texis/files.texi:2900
#, no-wrap
msgid "directory-files-recursively directory regexp &optional include-directories"
msgstr "directory-files-recursively directory regexp &optional include-directories"

#. type: defun
#: original_texis/files.texi:2914
msgid "Return all files under @var{directory} whose names match @var{regexp}.  This function searches the specified @var{directory} and its sub-directories, recursively, for files whose basenames (i.e., without the leading directories) match the specified @var{regexp}, and returns a list of the absolute file names of the matching files (@pxref{Relative File Names, absolute file names}).  The file names are returned in depth-first order, meaning that files in some sub-directory are returned before the files in its parent directory.  In addition, matching files found in each subdirectory are sorted alphabetically by their basenames.  By default, directories whose names match @var{regexp} are omitted from the list, but if the optional argument @var{include-directories} is non-@code{nil}, they are included."
msgstr "@var{regexp}にマッチする名前をもつ@var{directory}配下のすべてのファイルをリターンする。この関数はベースネーム(basename: 先行するディレクトリー部分を除外したファイル名)が@var{regexp}にマッチするファイルを、@var{directory}とそのサブディレクトリーを再帰的に検索して、マッチしたファイルの絶対ファイル名(@ref{Relative File Names, absolute file names}を参照)のリストをリターンする。ファイル名は深さ優先順でリターンされ、それは親ディレクトリーの前に任意のサブディレクトリー内のファイルが配置されることを意味する。加えて各ディレクトリー内で見つかったファイルはベースネームにもとづいてソートされる。デフォルトでは@var{regexp}にマッチする名前のディレクトリーはリストから省略されるが、オプション引数@var{include-directories}が非@code{nil}ならそれらも含まれる。"

#. type: defun
#: original_texis/files.texi:2916
#, no-wrap
msgid "directory-files-and-attributes directory &optional full-name match-regexp nosort id-format"
msgstr "directory-files-and-attributes directory &optional full-name match-regexp nosort id-format"

#. type: defun
#: original_texis/files.texi:2925
msgid "This is similar to @code{directory-files} in deciding which files to report on and how to report their names.  However, instead of returning a list of file names, it returns for each file a list @code{(@var{filename} . @var{attributes})}, where @var{attributes} is what @code{file-attributes} would return for that file.  The optional argument @var{id-format} has the same meaning as the corresponding argument to @code{file-attributes} (@pxref{Definition of file-attributes})."
msgstr "これはどのファイルを報告するかとファイル名を報告する方法において@code{directory-files}と似ている。しかしこの関数はファイル名のリストをリターンするかわりに、各ファイルごとにリスト@code{(@var{filename} . @var{attributes})}をリターンする。ここで@var{attributes}はそのファイルにたいして@code{file-attributes}がリターンするであろう値。オプション引数@var{id-format}は@code{file-attributes}の対応する引数と同じ意味をもつ(@ref{Definition of file-attributes}を参照)。"

#. type: defun
#: original_texis/files.texi:2927
#, no-wrap
msgid "file-expand-wildcards pattern &optional full"
msgstr "file-expand-wildcards pattern &optional full"

#. type: defun
#: original_texis/files.texi:2930
msgid "This function expands the wildcard pattern @var{pattern}, returning a list of file names that match it."
msgstr "この関数はワイルドカードパターン@var{pattern}を展開して、それにマッチするファイル名のリストをリターンする。"

#. type: defun
#: original_texis/files.texi:2933
msgid "If @var{pattern} is written as an absolute file name, the values are absolute also."
msgstr "絶対ファイル名として@var{pattern}が記述されると値も絶対ファイル名になる。"

#. type: defun
#: original_texis/files.texi:2938
msgid "If @var{pattern} is written as a relative file name, it is interpreted relative to the current default directory.  The file names returned are normally also relative to the current default directory.  However, if @var{full} is non-@code{nil}, they are absolute."
msgstr "@var{pattern}が相対ファイル名で記述されていれば、それはカレントデフォルトディレクトリーにたいして相対的に解釈される。通常はリターンされるファイル名もカレントデフォルトディレクトリーにたいする相対ファイル名になる。しかし@var{full}が非@code{nil}なら絶対ファイル名がリターンされる。"

#. type: defun
#: original_texis/files.texi:2940
#, no-wrap
msgid "insert-directory file switches &optional wildcard full-directory-p"
msgstr "insert-directory file switches &optional wildcard full-directory-p"

#. type: defun
#: original_texis/files.texi:2946
msgid "This function inserts (in the current buffer) a directory listing for directory @var{file}, formatted with @code{ls} according to @var{switches}.  It leaves point after the inserted text.  @var{switches} may be a string of options, or a list of strings representing individual options."
msgstr "この関数は@code{ls}の@var{switches}に対応するフォーマットで、(カレントバッファー内に)ディレクトリー@var{file}のディレクトリーリストを挿入する。これは挿入したテキストの後にポイントを残す。@var{switches}にはオプション文字列、または個別のオプションを表す文字列リストを指定できる。"

#. type: defun
#: original_texis/files.texi:2951
msgid "The argument @var{file} may be either a directory or a file specification including wildcard characters.  If @var{wildcard} is non-@code{nil}, that means treat @var{file} as a file specification with wildcards."
msgstr "引数@var{file}にはディレクトリー、またはワイルドカード文字を含むファイル名を指定できる。@var{wildcard}が非@code{nil}なら@var{file}はワイルドカードを伴うファイル指定として扱われることを意味する。"

#. type: defun
#: original_texis/files.texi:2958
msgid "If @var{full-directory-p} is non-@code{nil}, that means the directory listing is expected to show the full contents of a directory.  You should specify @code{t} when @var{file} is a directory and switches do not contain @samp{-d}.  (The @samp{-d} option to @code{ls} says to describe a directory itself as a file, rather than showing its contents.)"
msgstr "@var{full-directory-p}が非@code{nil}なら、ディレクトリーリストにたいしてディレクトリーの完全なコンテンツ表示を要求することを意味する。@var{file}がディレクトリーでスイッチに@samp{-d}が含まれないときには、@code{t}を指定すること(@code{ls}へのオプション@samp{-d}は、ディレクトリーのコンテンツではなくファイルとしてディレクトリーを表示するよう指定する)。"

#. type: defun
#: original_texis/files.texi:2963
msgid "On most systems, this function works by running a directory listing program whose name is in the variable @code{insert-directory-program}.  If @var{wildcard} is non-@code{nil}, it also runs the shell specified by @code{shell-file-name}, to expand the wildcards."
msgstr "ほとんどのシステムでは、この関数は変数@code{insert-directory-program}の名前のディレクトリーリスト用プログラムを実行することにより機能する。@var{wildcard}が非@code{nil}なら、ワイルドカード展開するために@code{shell-file-name}で指定されるシェルの実行も行う。"

#. type: defun
#: original_texis/files.texi:2967
msgid "MS-DOS and MS-Windows systems usually lack the standard Unix program @code{ls}, so this function emulates the standard Unix program @code{ls} with Lisp code."
msgstr "MS-DOSとMS-Windowsシステムは標準的なUnixプログラム@code{ls}を欠くので、この関数はLispコードで@code{ls}をエミュレートする。"

#. type: defun
#: original_texis/files.texi:2973
msgid "As a technical detail, when @var{switches} contains the long @samp{--dired} option, @code{insert-directory} treats it specially, for the sake of dired.  However, the normally equivalent short @samp{-D} option is just passed on to @code{insert-directory-program}, as any other option."
msgstr "技術的な詳細としては@var{switches}にロングオプション@samp{--dired}が含まれる際に、@code{insert-directory}はdiredのためにこれを特別に扱う。しかし他のオプションと同様、通常は等価なショートオプション@samp{-D}が単に@code{insert-directory-program}に渡されるだけである。"

#. type: defvar
#: original_texis/files.texi:2975
#, no-wrap
msgid "insert-directory-program"
msgstr "insert-directory-program"

#. type: defvar
#: original_texis/files.texi:2979
msgid "This variable's value is the program to run to generate a directory listing for the function @code{insert-directory}.  It is ignored on systems which generate the listing with Lisp code."
msgstr "この変数の値は関数@code{insert-directory}用にディレクトリーリストを生成するプログラムである。この値はLispコードでこのリストを生成するシステムでは無視される。"

#. type: section
#: original_texis/files.texi:2982
#, no-wrap
msgid "Creating, Copying and Deleting Directories"
msgstr "Creating, Copying and Deleting Directories"

#. type: cindex
#: original_texis/files.texi:2983
#, no-wrap
msgid "creating, copying and deleting directories"
msgstr "creating, copying and deleting directories"

#. type: Plain text
#: original_texis/files.texi:2990
msgid "Most Emacs Lisp file-manipulation functions get errors when used on files that are directories.  For example, you cannot delete a directory with @code{delete-file}.  These special functions exist to create and delete directories."
msgstr "Emacs Lispのファイル操作関数のほとんどは、ディレクトリーであるようなファイルに使用されたときはエラーとなります。たとえば@code{delete-file}でディレクトリーの削除はできません。以下のスペシャル関数はディレクトリーの作成と削除を行うために存在します。"

#. type: findex
#: original_texis/files.texi:2991
#, no-wrap
msgid "mkdir"
msgstr "mkdir"

#. type: deffn
#: original_texis/files.texi:2992
#, no-wrap
msgid "Command make-directory dirname &optional parents"
msgstr "Command make-directory dirname &optional parents"

#. type: deffn
#: original_texis/files.texi:2997
msgid "This command creates a directory named @var{dirname}.  If @var{parents} is non-@code{nil}, as is always the case in an interactive call, that means to create the parent directories first, if they don't already exist."
msgstr "このコマンドは@var{dirname}という名前のディレクトリーを作成する。@var{parents}が非@code{nil}の場合(インタラクティブな呼び出しでは常に非@code{nil})には、その親ディレクトリーがまだ存在しなければ最初にそれを作成することを意味する。"

#. type: deffn
#: original_texis/files.texi:2999
msgid "@code{mkdir} is an alias for this."
msgstr "@code{mkdir}はこれにたいするエイリアス。"

#. type: deffn
#: original_texis/files.texi:3001
#, no-wrap
msgid "Command copy-directory dirname newname &optional keep-time parents copy-contents"
msgstr "Command copy-directory dirname newname &optional keep-time parents copy-contents"

#. type: deffn
#: original_texis/files.texi:3006
msgid "This command copies the directory named @var{dirname} to @var{newname}.  If @var{newname} is a directory name, @var{dirname} will be copied to a subdirectory there.  @xref{Directory Names}."
msgstr "このコマンドは@var{dirname}という名前のディレクトリーを@var{newname}にコピーする。@var{newname}がディレクトリー名なら@var{dirname}はそれのサブディレクトリーにコピーされる。@ref{Directory Names}を参照のこと。"

#. type: deffn
#: original_texis/files.texi:3009
msgid "It always sets the file modes of the copied files to match the corresponding original file."
msgstr "これは常にコピーされるファイルのファイルモードを、対応する元のファイルモードと一致させる。"

#. type: deffn
#: original_texis/files.texi:3013
msgid "The third argument @var{keep-time} non-@code{nil} means to preserve the modification time of the copied files.  A prefix arg makes @var{keep-time} non-@code{nil}."
msgstr "3つ目の引数@var{keep-time}が非@code{nil}なら、それはコピーされるファイルの修正時刻を保持することを意味する。プレフィックス引数を与えると、@var{keep-time}は非@code{nil}になる。"

#. type: deffn
#: original_texis/files.texi:3017
msgid "The fourth argument @var{parents} says whether to create parent directories if they don't exist.  Interactively, this happens by default."
msgstr "4つ目の引数@var{parents}は、親ディレクトリーが存在しない場合に作成するかどうかを指定する。インタラクティブな場合には、これはデフォルトで発生する。"

#. type: deffn
#: original_texis/files.texi:3022
msgid "The fifth argument @var{copy-contents}, if non-@code{nil}, means to copy the contents of @var{dirname} directly into @var{newname} if the latter is a directory name, instead of copying @var{dirname} into it as a subdirectory."
msgstr "5つ目の引数@var{copy-contents}が非@code{nil}の場合には、それは@var{newname}がディレクトリー名ならば、そのサブディレクトリーとして@var{dirname}をコピーするかわりに@var{dirname}のコンテンツを@var{newname}にコピーする。"

#. type: deffn
#: original_texis/files.texi:3026
#, no-wrap
msgid "Command delete-directory dirname &optional recursive trash"
msgstr "Command delete-directory dirname &optional recursive trash"

#. type: deffn
#: original_texis/files.texi:3035
msgid "This command deletes the directory named @var{dirname}.  The function @code{delete-file} does not work for files that are directories; you must use @code{delete-directory} for them.  If @var{recursive} is @code{nil}, and the directory contains any files, @code{delete-directory} signals an error.  If recursive is non-@code{nil}, there is no error merely because the directory or its files are deleted by some other process before @code{delete-directory} gets to them."
msgstr "このコマンドは@var{dirname}という名前のディレクトリーを削除する。関数@code{delete-file}はディレクトリーであるようなファイルにたいしては機能しない。それらにたいしては@code{delete-directory}を使用しなければならない。@var{recursive}が@code{nil}でディレクトリー内にファイルが存在する場合には、@code{delete-directory}はエラーをシグナルする。@var{recursive}が非@code{nil}なら、@code{delete-directory}の処理前にそのディレクトリーやディレクトリーのファイルを他のプロセスが削除したという稀な状況を除いてエラーは発生しない。"

#. type: deffn
#: original_texis/files.texi:3038
msgid "@code{delete-directory} only follows symbolic links at the level of parent directories."
msgstr "@code{delete-directory}は親ディレクトリーの階層のシンボリックリンクだけをフォローする。"

#. type: section
#: original_texis/files.texi:3048
#, no-wrap
msgid "Making Certain File Names ``Magic''"
msgstr "Making Certain File Names ``Magic''"

#. type: cindex
#: original_texis/files.texi:3049
#, no-wrap
msgid "magic file names"
msgstr "magic file names"

#. type: Plain text
#: original_texis/files.texi:3055
msgid "You can implement special handling for certain file names.  This is called making those names @dfn{magic}.  The principal use for this feature is in implementing access to remote files (@pxref{Remote Files,, Remote Files, emacs, The GNU Emacs Manual})."
msgstr "特定のファイル名にたいして特別な処理を実装できます。これはそれらの名前にたいする@dfn{magic}化と呼ばれます。この機能は主にリモートファイルにたいするアクセスの実装用に使用されます(@ref{Remote Files,, Remote Files, emacs, The GNU Emacs Manual}を参照)。"

#. type: Plain text
#: original_texis/files.texi:3060
msgid "To define a kind of magic file name, you must supply a regular expression to define the class of names (all those that match the regular expression), plus a handler that implements all the primitive Emacs file operations for file names that match."
msgstr "magicファイル名を定義するには、名前クラスを定義するための正規表現とそれにマッチするファイル名用のEmacsファイル操作プリミティブすべてを実装するハンドラーを定義しなければなりません。"

#. type: cindex
#: original_texis/files.texi:3061
#, no-wrap
msgid "file handler"
msgstr "file handler"

#. type: vindex
#: original_texis/files.texi:3062
#, no-wrap
msgid "file-name-handler-alist"
msgstr "file-name-handler-alist"

#. type: Plain text
#: original_texis/files.texi:3066
msgid "The variable @code{file-name-handler-alist} holds a list of handlers, together with regular expressions that determine when to apply each handler.  Each element has this form:"
msgstr "変数@code{file-name-handler-alist}は各ハンドラーに適用するときを決定する正規表現とともにハンドラーのリストを保持します。各要素は以下の形式をもちます:"

#. type: example
#: original_texis/files.texi:3069
#, no-wrap
msgid "(@var{regexp} . @var{handler})\n"
msgstr "(@var{regexp} . @var{handler})\n"

#. type: Plain text
#: original_texis/files.texi:3076
msgid "All the Emacs primitives for file access and file name transformation check the given file name against @code{file-name-handler-alist}.  If the file name matches @var{regexp}, the primitives handle that file by calling @var{handler}."
msgstr "ファイルアクセスとファイル名変換にたいするすべてのEmacsプリミティブは、@code{file-name-handler-alist}にたいして与えられたファイル名をチェックします。そのファイル名が@var{regexp}にマッチしたら、そのプリミティブが@var{handler}を呼び出してファイルを処理します。"

#. type: Plain text
#: original_texis/files.texi:3081
msgid "The first argument given to @var{handler} is the name of the primitive, as a symbol; the remaining arguments are the arguments that were passed to that primitive.  (The first of these arguments is most often the file name itself.)  For example, if you do this:"
msgstr "@var{handler}の1つ目の引数には、プリミティブの名前をシンボルとして与えます。残りの引数はそのプリミティブに引数として渡されます(これらの引数の1つ目はほとんどの場合はファイル名自身)。たとえば以下を行って:"

#. type: example
#: original_texis/files.texi:3084
#, no-wrap
msgid "(file-exists-p @var{filename})\n"
msgstr "(file-exists-p @var{filename})\n"

#. type: Plain text
#: original_texis/files.texi:3089
msgid "and @var{filename} has handler @var{handler}, then @var{handler} is called like this:"
msgstr "@var{filename}がハンドラー@var{handler}をもつなら、@var{handler}は以下のように呼び出されます:"

#. type: example
#: original_texis/files.texi:3092
#, no-wrap
msgid "(funcall @var{handler} 'file-exists-p @var{filename})\n"
msgstr "(funcall @var{handler} 'file-exists-p @var{filename})\n"

#. type: Plain text
#: original_texis/files.texi:3097
msgid "When a function takes two or more arguments that must be file names, it checks each of those names for a handler.  For example, if you do this:"
msgstr "関数が2つ以上の引数を受け取る場合には、それらはファイル名でなければならず、関数はそれらのファイル名それぞれにたいしてハンドラーをチェックします。たとえば、"

#. type: example
#: original_texis/files.texi:3100
#, no-wrap
msgid "(expand-file-name @var{filename} @var{dirname})\n"
msgstr "(expand-file-name @var{filename} @var{dirname})\n"

#. type: Plain text
#: original_texis/files.texi:3106
msgid "then it checks for a handler for @var{filename} and then for a handler for @var{dirname}.  In either case, the @var{handler} is called like this:"
msgstr "以下を行うと、@var{filename}にたいするハンドラーをチェックした後に@var{dirname}にたいするハンドラーをチェックします。どちらの場合でも@var{handler}は以下のように呼び出されます:"

#. type: example
#: original_texis/files.texi:3109
#, no-wrap
msgid "(funcall @var{handler} 'expand-file-name @var{filename} @var{dirname})\n"
msgstr "(funcall @var{handler} 'expand-file-name @var{filename} @var{dirname})\n"

#. type: Plain text
#: original_texis/files.texi:3114
msgid "The @var{handler} then needs to figure out whether to handle @var{filename} or @var{dirname}."
msgstr "その後に@var{handler}は@var{filename}と@var{dirname}のいずれかを処理するか解決する必要があります。"

#. type: Plain text
#: original_texis/files.texi:3119
msgid "If the specified file name matches more than one handler, the one whose match starts last in the file name gets precedence.  This rule is chosen so that handlers for jobs such as uncompression are handled first, before handlers for jobs such as remote file access."
msgstr "指定されたファイル名が2つ以上のハンドラーにマッチする場合には、ファイル名の中で最後に開始するマッチが優先されます。リモートファイルアクセスのようなジョブにたいするハンドラーに先立って、解凍のようなジョブにたいするハンドラーが最初に処理されるようにこのルールが選択されました。"

#. type: Plain text
#: original_texis/files.texi:3121
msgid "Here are the operations that a magic file name handler gets to handle:"
msgstr "以下はmagicファイル名ハンドラーが処理する操作です:"

#. type: ifnottex
#: original_texis/files.texi:3176
msgid "@code{access-file}, @code{add-name-to-file}, @code{byte-compiler-base-file-name},@* @code{copy-directory}, @code{copy-file}, @code{delete-directory}, @code{delete-file}, @code{diff-latest-backup-file}, @code{directory-file-name}, @code{directory-files}, @code{directory-files-and-attributes}, @code{dired-compress-file}, @code{dired-uncache},@* @code{expand-file-name}, @code{file-accessible-directory-p}, @code{file-acl}, @code{file-attributes}, @code{file-directory-p}, @code{file-equal-p}, @code{file-executable-p}, @code{file-exists-p}, @code{file-in-directory-p}, @code{file-local-copy}, @code{file-modes}, @code{file-name-all-completions}, @code{file-name-as-directory}, @code{file-name-case-insensitive-p}, @code{file-name-completion}, @code{file-name-directory}, @code{file-name-nondirectory}, @code{file-name-sans-versions}, @code{file-newer-than-file-p}, @code{file-notify-add-watch}, @code{file-notify-rm-watch}, @code{file-notify-valid-p}, @code{file-ownership-preserved-p}, @code{file-readable-p}, @code{file-regular-p}, @code{file-remote-p}, @code{file-selinux-context}, @code{file-symlink-p}, @code{file-truename}, @code{file-writable-p}, @code{find-backup-file-name},@* @code{get-file-buffer}, @code{insert-directory}, @code{insert-file-contents},@* @code{load}, @code{make-auto-save-file-name}, @code{make-directory}, @code{make-directory-internal}, @code{make-nearby-temp-file}, @code{make-symbolic-link},@* @code{process-file}, @code{rename-file}, @code{set-file-acl}, @code{set-file-modes}, @code{set-file-selinux-context}, @code{set-file-times}, @code{set-visited-file-modtime}, @code{shell-command}, @code{start-file-process}, @code{substitute-in-file-name},@* @code{temporary-file-directory}, @code{unhandled-file-name-directory}, @code{vc-registered}, @code{verify-visited-file-modtime},@* @code{write-region}."
msgstr "@code{access-file}、@code{add-name-to-file}、@code{byte-compiler-base-file-name},@* @code{copy-directory}、@code{copy-file}、@code{delete-directory}、@code{delete-file}、@code{diff-latest-backup-file}、@code{directory-file-name}、@code{directory-files}、@code{directory-files-and-attributes}、@code{dired-compress-file}、@code{dired-uncache},@* @code{expand-file-name}、@code{file-accessible-directory-p}、@code{file-acl}、@code{file-attributes}、@code{file-directory-p}、@code{file-equal-p}、@code{file-executable-p}、@code{file-exists-p}、@code{file-in-directory-p}、@code{file-local-copy}、@code{file-modes}、@code{file-name-all-completions}、@code{file-name-as-directory}、@code{file-name-case-insensitive-p}、@code{file-name-completion}、@code{file-name-directory}、@code{file-name-nondirectory}、@code{file-name-sans-versions}、@code{file-newer-than-file-p}、@code{file-notify-add-watch}、@code{file-notify-rm-watch}、@code{file-notify-valid-p}、@code{file-ownership-preserved-p}、@code{file-readable-p}、@code{file-regular-p}、@code{file-remote-p}、@code{file-selinux-context}、@code{file-symlink-p}、@code{file-truename}、@code{file-writable-p}、@code{find-backup-file-name},@* @code{get-file-buffer}、@code{insert-directory}、@code{insert-file-contents},@* @code{load}、@code{make-auto-save-file-name}、@code{make-directory}、@code{make-directory-internal}、@code{make-nearby-temp-file}、@code{make-symbolic-link},@* @code{process-file}、@code{rename-file}、@code{set-file-acl}、@code{set-file-modes}、@code{set-file-selinux-context}、@code{set-file-times}、@code{set-visited-file-modtime}、@code{shell-command}、@code{start-file-process}、@code{substitute-in-file-name},@* @code{temporary-file-directory}、@code{unhandled-file-name-directory}、@code{vc-registered}、@code{verify-visited-file-modtime}、@* @code{write-region}."

#. type: flushleft
#: original_texis/files.texi:3230
#, no-wrap
msgid ""
"@code{access-file}, @code{add-name-to-file},\n"
"@code{byte-com@discretionary{}{}{}piler-base-file-name},\n"
"@code{copy-directory}, @code{copy-file},\n"
"@code{delete-directory}, @code{delete-file},\n"
"@code{diff-latest-backup-file},\n"
"@code{directory-file-name},\n"
"@code{directory-files},\n"
"@code{directory-files-and-at@discretionary{}{}{}tributes},\n"
"@code{dired-compress-file}, @code{dired-uncache},\n"
"@code{expand-file-name},\n"
"@code{file-accessible-direc@discretionary{}{}{}tory-p},\n"
"@code{file-acl},\n"
"@code{file-attributes},\n"
"@code{file-direc@discretionary{}{}{}tory-p},\n"
"@code{file-equal-p},\n"
"@code{file-executable-p}, @code{file-exists-p},\n"
"@code{file-in-directory-p},\n"
"@code{file-local-copy},\n"
"@code{file-modes}, @code{file-name-all-completions},\n"
"@code{file-name-as-directory},\n"
"@code{file-name-case-insensitive-p},\n"
"@code{file-name-completion},\n"
"@code{file-name-directory},\n"
"@code{file-name-nondirec@discretionary{}{}{}tory},\n"
"@code{file-name-sans-versions}, @code{file-newer-than-file-p},\n"
"@code{file-notify-add-watch}, @code{file-notify-rm-watch},\n"
"@code{file-notify-valid-p},\n"
"@code{file-ownership-pre@discretionary{}{}{}served-p},\n"
"@code{file-readable-p}, @code{file-regular-p},\n"
"@code{file-remote-p}, @code{file-selinux-context},\n"
"@code{file-symlink-p}, @code{file-truename}, @code{file-writable-p},\n"
"@code{find-backup-file-name},\n"
"@code{get-file-buffer},\n"
"@code{insert-directory},\n"
"@code{insert-file-contents},\n"
"@code{load},\n"
"@code{make-auto-save-file-name},\n"
"@code{make-direc@discretionary{}{}{}tory},\n"
"@code{make-direc@discretionary{}{}{}tory-internal},\n"
"@code{make-symbolic-link},\n"
"@code{process-file},\n"
"@code{rename-file}, @code{set-file-acl}, @code{set-file-modes},\n"
"@code{set-file-selinux-context}, @code{set-file-times},\n"
"@code{set-visited-file-modtime}, @code{shell-command},\n"
"@code{start-file-process},\n"
"@code{substitute-in-file-name},\n"
"@code{unhandled-file-name-directory},\n"
"@code{vc-regis@discretionary{}{}{}tered},\n"
"@code{verify-visited-file-modtime},\n"
"@code{write-region}.\n"
msgstr ""
"@code{access-file}、 @code{add-name-to-file}、\n"
"@code{byte-com@discretionary{}{}{}piler-base-file-name}、\n"
"@code{copy-directory}、 @code{copy-file}、\n"
"@code{delete-directory}、 @code{delete-file}、\n"
"@code{diff-latest-backup-file}、\n"
"@code{directory-file-name}、\n"
"@code{directory-files}、\n"
"@code{directory-files-and-at@discretionary{}{}{}tributes}、\n"
"@code{dired-compress-file}、 @code{dired-uncache}、\n"
"@code{expand-file-name}、\n"
"@code{file-accessible-direc@discretionary{}{}{}tory-p}、\n"
"@code{file-acl}、\n"
"@code{file-attributes}、\n"
"@code{file-direc@discretionary{}{}{}tory-p}、\n"
"@code{file-equal-p}、\n"
"@code{file-executable-p}、 @code{file-exists-p}、\n"
"@code{file-in-directory-p}、\n"
"@code{file-local-copy}、\n"
"@code{file-modes}、 @code{file-name-all-completions}、\n"
"@code{file-name-as-directory}、\n"
"@code{file-name-case-insensitive-p}、\n"
"@code{file-name-completion}、\n"
"@code{file-name-directory}、\n"
"@code{file-name-nondirec@discretionary{}{}{}tory}、\n"
"@code{file-name-sans-versions}、 @code{file-newer-than-file-p}、\n"
"@code{file-notify-add-watch}、 @code{file-notify-rm-watch}、\n"
"@code{file-notify-valid-p}、\n"
"@code{file-ownership-pre@discretionary{}{}{}served-p}、\n"
"@code{file-readable-p}、 @code{file-regular-p}、\n"
"@code{file-remote-p}、 @code{file-selinux-context}、\n"
"@code{file-symlink-p}、 @code{file-truename}、 @code{file-writable-p}、\n"
"@code{find-backup-file-name}、\n"
"@code{get-file-buffer}、\n"
"@code{insert-directory}、\n"
"@code{insert-file-contents}、\n"
"@code{load}、\n"
"@code{make-auto-save-file-name}、\n"
"@code{make-direc@discretionary{}{}{}tory}、\n"
"@code{make-direc@discretionary{}{}{}tory-internal}、\n"
"@code{make-symbolic-link}、\n"
"@code{process-file}、\n"
"@code{rename-file}、 @code{set-file-acl}、 @code{set-file-modes}、\n"
"@code{set-file-selinux-context}、 @code{set-file-times}、\n"
"@code{set-visited-file-modtime}、 @code{shell-command}、\n"
"@code{start-file-process}、\n"
"@code{substitute-in-file-name}、\n"
"@code{unhandled-file-name-directory}、\n"
"@code{vc-regis@discretionary{}{}{}tered}、\n"
"@code{verify-visited-file-modtime}、\n"
"@code{write-region}。\n"

#. type: Plain text
#: original_texis/files.texi:3237
msgid "Handlers for @code{insert-file-contents} typically need to clear the buffer's modified flag, with @code{(set-buffer-modified-p nil)}, if the @var{visit} argument is non-@code{nil}.  This also has the effect of unlocking the buffer if it is locked."
msgstr "@code{insert-file-contents}にたいするハンドラーは@var{visit}引数が非@code{nil}なら、通常は@code{(set-buffer-modified-p nil)}によりそのバッファーの変更フラグをクリアーする必要があります。これにはもしそのバッファーがロックされていたら、ロックを解除する効果もあります。"

#. type: Plain text
#: original_texis/files.texi:3244
msgid "The handler function must handle all of the above operations, and possibly others to be added in the future.  It need not implement all these operations itself---when it has nothing special to do for a certain operation, it can reinvoke the primitive, to handle the operation in the usual way.  It should always reinvoke the primitive for an operation it does not recognize.  Here's one way to do this:"
msgstr "ハンドラー関数は上記すべての操作を処理しなければならず、他の操作が将来追加される可能性もあります。これらの操作自体すべてを実装する必要はありません --- 特定の操作にたいして特別なことを行う必要がないときには、その操作を通常の方法で処理するように、そのプリミティブを再呼び出しできます。認識できない操作にたいしては、常にそのプリミティブを再呼び出しするべきです。以下はこれを行う方法の1つです:"

#. type: smallexample
#: original_texis/files.texi:3259
#, no-wrap
msgid ""
"(defun my-file-handler (operation &rest args)\n"
"  ;; @r{First check for the specific operations}\n"
"  ;; @r{that we have special handling for.}\n"
"  (cond ((eq operation 'insert-file-contents) @dots{})\n"
"        ((eq operation 'write-region) @dots{})\n"
"        @dots{}\n"
"        ;; @r{Handle any operation we don't know about.}\n"
"        (t (let ((inhibit-file-name-handlers\n"
"                  (cons 'my-file-handler\n"
"                        (and (eq inhibit-file-name-operation operation)\n"
"                             inhibit-file-name-handlers)))\n"
"                 (inhibit-file-name-operation operation))\n"
"             (apply operation args)))))\n"
msgstr ""
"(defun my-file-handler (operation &rest args)\n"
"  ;; @r{特別に処理する必要がある、}\n"
"  ;; @r{特別な操作を最初にチェックする}\n"
"  (cond ((eq operation 'insert-file-contents) @dots{})\n"
"        ((eq operation 'write-region) @dots{})\n"
"        @dots{}\n"
"        ;; @r{関知しないその他の操作を処理する}\n"
"        (t (let ((inhibit-file-name-handlers\n"
"                  (cons 'my-file-handler\n"
"                        (and (eq inhibit-file-name-operation operation)\n"
"                             inhibit-file-name-handlers)))\n"
"                 (inhibit-file-name-operation operation))\n"
"             (apply operation args)))))\n"

#. type: Plain text
#: original_texis/files.texi:3270
msgid "When a handler function decides to call the ordinary Emacs primitive for the operation at hand, it needs to prevent the primitive from calling the same handler once again, thus leading to an infinite recursion.  The example above shows how to do this, with the variables @code{inhibit-file-name-handlers} and @code{inhibit-file-name-operation}.  Be careful to use them exactly as shown above; the details are crucial for proper behavior in the case of multiple handlers, and for operations that have two file names that may each have handlers."
msgstr "ハンドラー関数が通常のEmacsプリミティブを呼び出す決定をした際には、無限再帰を引き起こすような同一ハンドラーからのプリミティブの再呼び出しを防ぐ必要があります。上記の例では変数@code{inhibit-file-name-handlers}と@code{inhibit-file-name-operation}によって、これを行う方法を示しています。上記の例のように、これらを正確に使用するよう注意してください。複数ハンドラーの正しい振る舞いと、それぞれがハンドラーをもつかもしれない2つのファイル名にたいする操作にたいする詳細は非常に重要です。"

#. type: kindex
#: original_texis/files.texi:3271
#, no-wrap
msgid "safe-magic @r{(property)}"
msgstr "safe-magic @r{(property)}"

#. type: Plain text
#: original_texis/files.texi:3280
msgid "Handlers that don't really do anything special for actual access to the file---such as the ones that implement completion of host names for remote file names---should have a non-@code{nil} @code{safe-magic} property.  For instance, Emacs normally protects directory names it finds in @code{PATH} from becoming magic, if they look like magic file names, by prefixing them with @samp{/:}.  But if the handler that would be used for them has a non-@code{nil} @code{safe-magic} property, the @samp{/:} is not added."
msgstr "ファイルへの実アクセスにたいして実際には特別なことを行わないハンドラー(たとえばリモートファイル名にたいしてホスト名の補完を実装するハンドラー等)は、@code{safe-magic}プロパティに非@code{nil}をもつべきです。たとえばEmacsは通常は@code{PATH}内で見い出されるようなディレクトリーがプレフィックス@samp{/:}によってmagicファイル名に見えるようなら、magicファイル名にならないように保護します。しかし@code{safe-magic}プロパティに非@code{nil}をもつハンドラーがそれらにたいして使用された場合には、@samp{/:}は追加されません。"

#. type: kindex
#: original_texis/files.texi:3281
#, no-wrap
msgid "operations @r{(property)}"
msgstr "operations @r{(property)}"

#. type: Plain text
#: original_texis/files.texi:3289
msgid "A file name handler can have an @code{operations} property to declare which operations it handles in a nontrivial way.  If this property has a non-@code{nil} value, it should be a list of operations; then only those operations will call the handler.  This avoids inefficiency, but its main purpose is for autoloaded handler functions, so that they won't be loaded except when they have real work to do."
msgstr "ファイル名ハンドラーは普通とは異なる方法でそれを処理(handle)するのがどの操作(operation)なのかを宣言するために、@code{operations}プロパティをもつことができます。このプロパティが非@code{nil}値をもつなら、それは操作のリストであるべきです。その場合には、それらの操作だけがハンドラーを呼び出すでしょう。これは無駄を省きますが、主な目的はオートロードされるハンドラー関数が実際に処理を行うとき以外はロードされないようにすることです。"

#. type: Plain text
#: original_texis/files.texi:3297
msgid "Simply deferring all operations to the usual primitives does not work.  For instance, if the file name handler applies to @code{file-exists-p}, then it must handle @code{load} itself, because the usual @code{load} code won't work properly in that case.  However, if the handler uses the @code{operations} property to say it doesn't handle @code{file-exists-p}, then it need not handle @code{load} nontrivially."
msgstr "通常のプリミティブにたいして単にすべての操作を延期しても機能しません。たとえばファイル名ハンドラーが@code{file-exists-p}にたいして適用された場合には、通常の@code{load}コードは正しく機能しないでしょうから、ハンドラー自身で@code{load}を処理しなければなりません。しかしハンドラーが@code{file-exists-p}プロパティを使用して@code{file-exists-p}を処理しないことを宣言した場合には、普通とは異なる方法で@code{load}を処理する必要はなくなります。"

#. type: defvar
#: original_texis/files.texi:3298
#, no-wrap
msgid "inhibit-file-name-handlers"
msgstr "inhibit-file-name-handlers"

#. type: defvar
#: original_texis/files.texi:3301
msgid "This variable holds a list of handlers whose use is presently inhibited for a certain operation."
msgstr "この変数は特定の操作にたいして現在のところ使用を抑制されているハンドラーのリストを保持する。"

#. type: defvar
#: original_texis/files.texi:3303
#, no-wrap
msgid "inhibit-file-name-operation"
msgstr "inhibit-file-name-operation"

#. type: defvar
#: original_texis/files.texi:3305
msgid "The operation for which certain handlers are presently inhibited."
msgstr "特定のハンドラーにたいしてその時点で抑制されている操作。"

#. type: defun
#: original_texis/files.texi:3307
#, no-wrap
msgid "find-file-name-handler file operation"
msgstr "find-file-name-handler file operation"

#. type: defun
#: original_texis/files.texi:3315
msgid "This function returns the handler function for file name @var{file}, or @code{nil} if there is none.  The argument @var{operation} should be the operation to be performed on the file---the value you will pass to the handler as its first argument when you call it.  If @var{operation} equals @code{inhibit-file-name-operation}, or if it is not found in the @code{operations} property of the handler, this function returns @code{nil}."
msgstr "この関数は@var{file}というファイル名にたいするハンドラー関数、それが存在しなければ@code{nil}をリターンする。引数@var{operation}はそのファイルを処理する操作であること。これはハンドラー呼び出し時に1つ目の引数として渡すことになる値である。@var{operation}が@code{inhibit-file-name-operation}と等しいか、そのハンドラーの@code{operations}内に存在しなければ、この関数は@code{nil}をリターンする。"

#. type: defun
#: original_texis/files.texi:3317
#, no-wrap
msgid "file-local-copy filename"
msgstr "file-local-copy filename"

#. type: defun
#: original_texis/files.texi:3325
msgid "This function copies file @var{filename} to an ordinary non-magic file on the local machine, if it isn't on the local machine already.  Magic file names should handle the @code{file-local-copy} operation if they refer to files on other machines.  A magic file name that is used for other purposes than remote file access should not handle @code{file-local-copy}; then this function will treat the file as local."
msgstr "この関数はファイル@var{filename}がまだローカルマシン上になければ、それをローカルマシン上の通常の非magicファイルにコピーする。magicファイル名は、それらが他のマシン上のファイルを参照する場合には、@code{file-local-copy}操作を処理するべきである。リモートファイルアクセス以外の目的にたいして使用されるmagicファイル名は、@code{file-local-copy}を処理するべきではない。この場合には関数はそのファイルをローカルファイルとして扱うだろう。"

#. type: defun
#: original_texis/files.texi:3329
msgid "If @var{filename} is local, whether magic or not, this function does nothing and returns @code{nil}.  Otherwise it returns the file name of the local copy file."
msgstr "@var{filename}がローカルなら、それがmagicか否かにかかわらずこの関数は何も行わずに@code{nil}をリターンする。それ以外ならローカルコピーファイルのファイル名をリターンする。"

#. type: defun
#: original_texis/files.texi:3331
#, no-wrap
msgid "file-remote-p filename &optional identification connected"
msgstr "file-remote-p filename &optional identification connected"

#. type: defun
#: original_texis/files.texi:3336
msgid "This function tests whether @var{filename} is a remote file.  If @var{filename} is local (not remote), the return value is @code{nil}.  If @var{filename} is indeed remote, the return value is a string that identifies the remote system."
msgstr "この関数は@var{filename}がリモートファイルかどうかをテストする。@var{filename}がローカル(リモートではない)ならリターン値は@code{nil}、@var{filename}が正にリモートならリターン値はそのリモートシステムを識別する文字列。"

#. type: defun
#: original_texis/files.texi:3341
msgid "This identifier string can include a host name and a user name, as well as characters designating the method used to access the remote system.  For example, the remote identifier string for the filename @code{/sudo::/some/file} is @code{/sudo:root@@localhost:}."
msgstr "この識別子文字列はホスト名とユーザー名、およびリモートシステムへのアクセスに使用されるメソッドを表す文字列も同様に含めることができる。たとえばファイル名@code{/sudo::/some/file}にたいするリモート識別子文字列は@code{/sudo:root@@localhost:}。"

#. type: defun
#: original_texis/files.texi:3348
msgid "If @code{file-remote-p} returns the same identifier for two different filenames, that means they are stored on the same file system and can be accessed locally with respect to each other.  This means, for example, that it is possible to start a remote process accessing both files at the same time.  Implementers of file handlers need to ensure this principle is valid."
msgstr "2つの異なるファイルにたいして@code{file-remote-p}が同じ識別子をリターンした場合には、それらが同じファイルシステム上に格納されていて互いに配慮しつつアクセス可能であることを意味する。これはたとえば同時に両方のファイルにアクセスするリモートプロセスを開始することが可能なことを意味する。ファイルハンドラーの実装者はこの方式を保証する必要がある。"

#. type: defun
#: original_texis/files.texi:3355
msgid "@var{identification} specifies which part of the identifier shall be returned as string.  @var{identification} can be the symbol @code{method}, @code{user} or @code{host}; any other value is handled like @code{nil} and means to return the complete identifier string.  In the example above, the remote @code{user} identifier string would be @code{root}."
msgstr "@var{identification}は文字列としてリターンされるべき識別子の一部を指定する。@var{identification}には@code{method}、@code{user}、@code{host}のシンボルを指定できる。他の値はすべて@code{nil}のように扱われて、それは完全な識別子文字列をリターンすることを意味する。上記の例ではリモートの@code{user}識別子文字列は@code{root}になるだろう。"

#. type: defun
#: original_texis/files.texi:3360
msgid "If @var{connected} is non-@code{nil}, this function returns @code{nil} even if @var{filename} is remote, if Emacs has no network connection to its host.  This is useful when you want to avoid the delay of making connections when they don't exist."
msgstr "@var{connected}が非@code{nil}なら、たとえ@var{filename}がリモートであってもEmacsがそのホストにたいする接続をもたなければ、この関数は@code{nil}をリターンする。これは接続が存在しない際の接続の遅延を回避したいときに有用。"

#. type: defun
#: original_texis/files.texi:3362
#, no-wrap
msgid "unhandled-file-name-directory filename"
msgstr "unhandled-file-name-directory filename"

#. type: defun
#: original_texis/files.texi:3369
msgid "This function returns the name of a directory that is not magic.  For a non-magic @var{filename} it returns the corresponding directory name (@pxref{Directory Names}).  For a magic @var{filename}, it invokes the file name handler, which therefore decides what value to return.  If @var{filename} is not accessible from a local process, then the file name handler should indicate that by returning @code{nil}."
msgstr "この関数は非magicのディレクトリーの名前をリターンする。これは非magicの@var{filename}には対応するディレクトリー名(@ref{Directory Names}を参照)をリターンする。magicの@var{filename}には、何の値をリターンするかを決定するためにファイル名ハンドラーを呼び出す。@var{filename}がローカルプロセスからアクセス不能なら、ファイル名ハンドラーは@code{nil}をリターンすることによってそれを示すこと。"

#. type: defun
#: original_texis/files.texi:3373
msgid "This is useful for running a subprocess; every subprocess must have a non-magic directory to serve as its current directory, and this function is a good way to come up with one."
msgstr "これはサブプロセスの実行に有用。すべてのサブプロセスは自身が所属するカレントディレクトリーとして非magicディレクトリーをもたなければならず、この関数はそれを導出するよい手段である。"

#. type: defun
#: original_texis/files.texi:3375
#, no-wrap
msgid "file-local-name filename"
msgstr "file-local-name filename"

#. type: defun
#: original_texis/files.texi:3380
msgid "This function returns the local part of file @var{filename}.  For a remote @var{filename}, it returns a file name which could be used directly as argument of a remote process.  If @var{filename} is local, this function returns the file name."
msgstr "この関数はファイル@var{filename}のローカル部分をリターンする。@var{filename}がリモートならリモートプロセスの引数として直接使用できるファイル名をリターンする。@var{filename}がリモートならこの関数はそのファイル名をリターンする。"

#. type: defopt
#: original_texis/files.texi:3382
#, no-wrap
msgid "remote-file-name-inhibit-cache"
msgstr "remote-file-name-inhibit-cache"

#. type: defopt
#: original_texis/files.texi:3386
msgid "The attributes of remote files can be cached for better performance.  If they are changed outside of Emacs's control, the cached values become invalid, and must be reread."
msgstr "リモートファイルの属性は、よりよいパフォーマンスのためにキャッシュすることができる。キャッシュがEmacsの制御外で変更されると、そのキャッシュ値は無効になり再読込しなければならない。"

#. type: defopt
#: original_texis/files.texi:3392
msgid "When this variable is set to @code{nil}, cached values are never expired.  Use this setting with caution, only if you are sure nothing other than Emacs ever changes the remote files.  If it is set to @code{t}, cached values are never used.  This is the safest value, but could result in performance degradation."
msgstr "この変数が@code{nil}にセットされているとキャッシュ値は決して失効しない。このセッティングはEmacs以外にリモートファイルを変更するものがないことが確実な場合のみ慎重に使用すること。これが@code{t}にセットされているとキャッシュ値は決して使用されない。これはもっとも安全な値であるがパフォーマンスは低下するかもしれない。"

#. type: defopt
#: original_texis/files.texi:3398
msgid "A compromise is to set it to a positive number.  This means that cached values are used for that amount of seconds since they were cached.  If a remote file is checked regularly, it might be a good idea to let-bind this variable to a value less than the time period between consecutive checks.  For example:"
msgstr "折衷的な値としてはこれを正の数字にセットする。これはキャッシュされてからその数字の秒数の間は、ャッシュ値を使用することを意味する。リモートファイルが定期的にチェックされる場合には、この変数を定期的なチェックの間隔より小さい値にletバインドするのは、よい考えかもしれない。たとえば:"

#. type: example
#: original_texis/files.texi:3406
#, no-wrap
msgid ""
"(defun display-time-file-nonempty-p (file)\n"
"  (let ((remote-file-name-inhibit-cache\n"
"         (- display-time-interval 5)))\n"
"    (and (file-exists-p file)\n"
"         (< 0 (nth 7 (file-attributes\n"
"                       (file-chase-links file)))))))\n"
msgstr ""
"(defun display-time-file-nonempty-p (file)\n"
"  (let ((remote-file-name-inhibit-cache\n"
"         (- display-time-interval 5)))\n"
"    (and (file-exists-p file)\n"
"         (< 0 (nth 7 (file-attributes\n"
"                       (file-chase-links file)))))))\n"

#. type: section
#: original_texis/files.texi:3410
#, no-wrap
msgid "File Format Conversion"
msgstr "File Format Conversion"

#. type: cindex
#: original_texis/files.texi:3412
#, no-wrap
msgid "file format conversion"
msgstr "file format conversion"

#. type: cindex
#: original_texis/files.texi:3413
#, no-wrap
msgid "encoding file formats"
msgstr "encoding file formats"

#. type: cindex
#: original_texis/files.texi:3414
#, no-wrap
msgid "decoding file formats"
msgstr "decoding file formats"

#. type: cindex
#: original_texis/files.texi:3415
#, no-wrap
msgid "text properties in files"
msgstr "text properties in files"

#. type: cindex
#: original_texis/files.texi:3416
#, no-wrap
msgid "saving text properties"
msgstr "saving text properties"

#. type: Plain text
#: original_texis/files.texi:3423
msgid "Emacs performs several steps to convert the data in a buffer (text, text properties, and possibly other information) to and from a representation suitable for storing into a file.  This section describes the fundamental functions that perform this @dfn{format conversion}, namely @code{insert-file-contents} for reading a file into a buffer, and @code{write-region} for writing a buffer into a file."
msgstr "Emacsはバッファー内のデータ(テキスト、テキストプロパティ、あるいはその他の情報)とファイルへの格納に適した表現との間で双方向の変換をするために複数のステップを処理します。このセクションでは、この@dfn{フォーマット変換(format conversion)}を行う基本的な関数、すなわちファイルをバッファーに読み込む@code{insert-file-contents}と、バッファーをファイルに書き込む@code{write-region}を説明します。"

#. type: menuentry
#: original_texis/files.texi:3428
msgid "Overview: Format Conversion Overview"
msgstr "Overview: Format Conversion Overview"

#. type: menuentry
#: original_texis/files.texi:3428
msgid "@code{insert-file-contents} and @code{write-region}."
msgstr "@code{insert-file-contents}と@code{write-region}"

#. type: menuentry
#: original_texis/files.texi:3428
msgid "Round-Trip: Format Conversion Round-Trip"
msgstr "Round-Trip: Format Conversion Round-Trip"

#. type: menuentry
#: original_texis/files.texi:3428
msgid "Using @code{format-alist}."
msgstr "@code{format-alist}の使用。"

#. type: menuentry
#: original_texis/files.texi:3428
msgid "Piecemeal: Format Conversion Piecemeal"
msgstr "Piecemeal: Format Conversion Piecemeal"

#. type: menuentry
#: original_texis/files.texi:3428
msgid "Specifying non-paired conversion."
msgstr "非ペアー変換の指定。"

#. type: node
#: original_texis/files.texi:3430
#, no-wrap
msgid "Format Conversion Overview"
msgstr "Format Conversion Overview"

#. type: subsection
#: original_texis/files.texi:3431
#, no-wrap
msgid "Overview"
msgstr "Overview"

#. type: Plain text
#: original_texis/files.texi:3434
msgid "The function @code{insert-file-contents}:"
msgstr "関数@code{insert-file-contents}:"

#. type: item
#: original_texis/files.texi:3436
#, no-wrap
msgid "initially, inserts bytes from the file into the buffer;"
msgstr "最初に、ファイルからバイトをバッファーに挿入して"

#. type: item
#: original_texis/files.texi:3437
#, no-wrap
msgid "decodes bytes to characters as appropriate;"
msgstr "バイトを適切な文字にデコードした後に"

#. type: item
#: original_texis/files.texi:3438
#, no-wrap
msgid "processes formats as defined by entries in @code{format-alist}; and"
msgstr "@code{format-alist}のエントリーで定義されているようにフォーマット処理してから"

#. type: item
#: original_texis/files.texi:3439
#, no-wrap
msgid "calls functions in @code{after-insert-file-functions}."
msgstr "@code{after-insert-file-functions}内の関数を呼び出す。"

#. type: Plain text
#: original_texis/files.texi:3444
msgid "The function @code{write-region}:"
msgstr "関数@code{write-region}:"

#. type: item
#: original_texis/files.texi:3446
#, no-wrap
msgid "initially, calls functions in @code{write-region-annotate-functions};"
msgstr "最初に@code{write-region-annotate-functions}内の関数を呼び出して"

#. type: item
#: original_texis/files.texi:3447
#, no-wrap
msgid "processes formats as defined by entries in @code{format-alist};"
msgstr "@code{format-alist}のエントリーで定義されているようにフォーマット処理してから"

#. type: item
#: original_texis/files.texi:3448
#, no-wrap
msgid "encodes characters to bytes as appropriate; and"
msgstr "文字を適切なバイトにエンコードした後に"

#. type: item
#: original_texis/files.texi:3449
#, no-wrap
msgid "modifies the file with the bytes."
msgstr "そのバイトでファイルを変更する。"

#. type: Plain text
#: original_texis/files.texi:3457
msgid "This shows the symmetry of the lowest-level operations; reading and writing handle things in opposite order.  The rest of this section describes the two facilities surrounding the three variables named above, as well as some related functions.  @ref{Coding Systems}, for details on character encoding and decoding."
msgstr "これはもっとも低レベルでの操作を対照的に示したもので、対象の読み取りと書き込みの処理が逆順で対応しています。このセクションの残りの部分では、上記で名前を挙げた3つの変数を取り巻く2つの機能と、関連するいくつかの関数を説明します。文字のエンコードとデコードについての詳細は@ref{Coding Systems}を参照してください。"

#. type: node
#: original_texis/files.texi:3458
#, no-wrap
msgid "Format Conversion Round-Trip"
msgstr "Format Conversion Round-Trip"

#. type: subsection
#: original_texis/files.texi:3459
#, no-wrap
msgid "Round-Trip Specification"
msgstr "Round-Trip Specification"

#. type: Plain text
#: original_texis/files.texi:3467
msgid "The most general of the two facilities is controlled by the variable @code{format-alist}, a list of @dfn{file format} specifications, which describe textual representations used in files for the data in an Emacs buffer.  The descriptions for reading and writing are paired, which is why we call this ``round-trip'' specification (@pxref{Format Conversion Piecemeal}, for non-paired specification)."
msgstr "読み取りと書き込みのもっとも一般的な機能は変数@code{format-alist}で制御されます。これは@dfn{ファイルフォーマット(file format)}仕様のリストで、Emacsバッファー内のデータにたいしてファイル内で使用されるテキスト表現を記述します。読み取りと書き込みの仕様記述はペアーになっており、わたしたちがそれを``ラウンドトリップ(round-trip)''仕様と呼ぶのはこれが理由です(非ペアー仕様については@ref{Format Conversion Piecemeal}を参照)。"

#. type: defvar
#: original_texis/files.texi:3468
#, no-wrap
msgid "format-alist"
msgstr "format-alist"

#. type: defvar
#: original_texis/files.texi:3471
msgid "This list contains one format definition for each defined file format.  Each format definition is a list of this form:"
msgstr "このリストには定義されるファイルフォーマットごとに1つのフォーマット定義が含まれる。フォーマット定義はそれぞれ以下の形式のリスト:"

#. type: example
#: original_texis/files.texi:3474
#, no-wrap
msgid "(@var{name} @var{doc-string} @var{regexp} @var{from-fn} @var{to-fn} @var{modify} @var{mode-fn} @var{preserve})\n"
msgstr "(@var{name} @var{doc-string} @var{regexp} @var{from-fn} @var{to-fn} @var{modify} @var{mode-fn} @var{preserve})\n"

#. type: cindex
#: original_texis/files.texi:3477
#, no-wrap
msgid "format definition"
msgstr "format definition"

#. type: Plain text
#: original_texis/files.texi:3480
msgid "Here is what the elements in a format definition mean:"
msgstr "以下はフォーマット定義内で要素がもつ意味:"

#. type: item
#: original_texis/files.texi:3482
#, no-wrap
msgid "name"
msgstr "name"

#. type: table
#: original_texis/files.texi:3484
msgid "The name of this format."
msgstr "フォーマットの名前。"

#. type: item
#: original_texis/files.texi:3485
#, no-wrap
msgid "doc-string"
msgstr "doc-string"

#. type: table
#: original_texis/files.texi:3487
msgid "A documentation string for the format."
msgstr "フォーマットのドキュメント文字列。"

#. type: item
#: original_texis/files.texi:3488
#, no-wrap
msgid "regexp"
msgstr "regexp"

#. type: table
#: original_texis/files.texi:3491
msgid "A regular expression which is used to recognize files represented in this format.  If @code{nil}, the format is never applied automatically."
msgstr "このフォーマットで表現されるファイルの認識に使用される正規表現。@code{nil}ならフォーマットが自動的に適用されることは決してない。"

#. type: item
#: original_texis/files.texi:3492
#, no-wrap
msgid "from-fn"
msgstr "from-fn"

#. type: table
#: original_texis/files.texi:3495
msgid "A shell command or function to decode data in this format (to convert file data into the usual Emacs data representation)."
msgstr "このフォーマットのデータをデコードする、(ファイルデータを通常のEmacsデータ表現に変換するための)シェルコマンドか関数。"

#. type: table
#: original_texis/files.texi:3498
msgid "A shell command is represented as a string; Emacs runs the command as a filter to perform the conversion."
msgstr "シェルコマンドは文字列として表され、Emacsはそのコマンドを変換処理用のフィルターとして実行する。"

#. type: table
#: original_texis/files.texi:3504
msgid "If @var{from-fn} is a function, it is called with two arguments, @var{begin} and @var{end}, which specify the part of the buffer it should convert.  It should convert the text by editing it in place.  Since this can change the length of the text, @var{from-fn} should return the modified end position."
msgstr "@var{from-fn}が関数なら、それは変換するべきバッファー部分を指定する2つの引数@var{begin}と@var{end}で呼び出される。これはインプレースでテキストを編集することにより変換を行うこと。これはテキスト長を変更する可能性があるので@var{from-fn}は変更されたend位置をリターンすること。"

#. type: table
#: original_texis/files.texi:3510
msgid "One responsibility of @var{from-fn} is to make sure that the beginning of the file no longer matches @var{regexp}.  Otherwise it is likely to get called again.  Also, @var{from-fn} must not involve buffers or files other than the one being decoded, otherwise the internal buffer used for formatting might be overwritten."
msgstr "ファイルの先頭が変換により@var{regexp}にマッチしないようにするのは@var{from-fn}の役目の1つである。そうでないとおそらく再度変換が呼び出される。さらに@var{from-fn}はデコードされるバッファーやバッファーではないこと。さもなければフォーマット用の内部バッファーが上書きされるかもしれない。"

#. type: item
#: original_texis/files.texi:3511
#, no-wrap
msgid "to-fn"
msgstr "to-fn"

#. type: table
#: original_texis/files.texi:3514
msgid "A shell command or function to encode data in this format---that is, to convert the usual Emacs data representation into this format."
msgstr "このフォーマットのデータをエンコード、すなわち通常のEmacsデータ表現をこのフォーマットに変換するためのシェルコマンドか関数。"

#. type: table
#: original_texis/files.texi:3517
msgid "If @var{to-fn} is a string, it is a shell command; Emacs runs the command as a filter to perform the conversion."
msgstr "@var{to-fn}が文字列ならそれはシェルコマンドである。Emacsは変換処理のためのフィルターとしてこのコマンドを実行する。"

#. type: table
#: original_texis/files.texi:3522
msgid "If @var{to-fn} is a function, it is called with three arguments: @var{begin} and @var{end}, which specify the part of the buffer it should convert, and @var{buffer}, which specifies which buffer.  There are two ways it can do the conversion:"
msgstr "@var{to-fn}が関数なら、それは3つの引数で呼び出される。@var{begin}と@var{end}は変換されるべきバッファー部分、@var{buffer}でそれがどのバッファーかを指定する。変換を行うには2つの方法がある:"

#. type: itemize
#: original_texis/files.texi:3527
msgid "By editing the buffer in place.  In this case, @var{to-fn} should return the end-position of the range of text, as modified."
msgstr "そのバッファー内でインプレースで編集を行う。@var{to-fn}はこの場合は変更にしたがいテキスト範囲のend位置をリターンすること。"

#. type: itemize
#: original_texis/files.texi:3534
msgid "By returning a list of annotations.  This is a list of elements of the form @code{(@var{position} . @var{string})}, where @var{position} is an integer specifying the relative position in the text to be written, and @var{string} is the annotation to add there.  The list must be sorted in order of position when @var{to-fn} returns it."
msgstr "注釈(annotation)のリストをリターンする。これは@code{(@var{position} . @var{string})}という形式の要素をもつリストで、@var{position}は書き込まれるテキスト内での相対位置を指定する整数、@var{string}はそこに追加される注釈である。このリストは@var{to-fn}がそれをリターンする際には、位置順でソートされていなければならない。"

#. type: itemize
#: original_texis/files.texi:3538
msgid "When @code{write-region} actually writes the text from the buffer to the file, it intermixes the specified annotations at the corresponding positions.  All this takes place without modifying the buffer."
msgstr "@code{write-region}が実際にバッファーからファイルにテキストを書き込む際には、指定された注釈を対応する位置に混合する。これはすべてバッファーを変更せずに行われる。"

#. type: table
#: original_texis/files.texi:3543
msgid "@var{to-fn} must not involve buffers or files other than the one being encoded, otherwise the internal buffer used for formatting might be overwritten."
msgstr "@var{from-fn}はデコードされるバッファーやバッファーではないこと。さもなければフォーマット用の内部バッファーが上書きされるかもしれない。"

#. type: item
#: original_texis/files.texi:3544
#, no-wrap
msgid "modify"
msgstr "modify"

#. type: table
#: original_texis/files.texi:3547
msgid "A flag, @code{t} if the encoding function modifies the buffer, and @code{nil} if it works by returning a list of annotations."
msgstr "フラグ。エンコード関数がバッファーを変更するなら@code{t}、注釈リストをリターンすることによって機能するなら@code{nil}。"

#. type: item
#: original_texis/files.texi:3548
#, no-wrap
msgid "mode-fn"
msgstr "mode-fn"

#. type: table
#: original_texis/files.texi:3552
msgid "A minor-mode function to call after visiting a file converted from this format.  The function is called with one argument, the integer 1; that tells a minor-mode function to enable the mode."
msgstr "このフォーマットから変換されたファイルをvisit後に呼び出されるマイナーモード関数。この関数は1つの引数で呼び出されて、それが整数1ならマイナーモード関数はそのモードを有効にする。"

#. type: item
#: original_texis/files.texi:3553
#, no-wrap
msgid "preserve"
msgstr "preserve"

#. type: table
#: original_texis/files.texi:3556
msgid "A flag, @code{t} if @code{format-write-file} should not remove this format from @code{buffer-file-format}."
msgstr "フラグ。@code{format-write-file}が@code{buffer-file-format}からこのフォーマットを取り除くべきでなければ@code{t}。"

#. type: Plain text
#: original_texis/files.texi:3564
msgid "The function @code{insert-file-contents} automatically recognizes file formats when it reads the specified file.  It checks the text of the beginning of the file against the regular expressions of the format definitions, and if it finds a match, it calls the decoding function for that format.  Then it checks all the known formats over again.  It keeps checking them until none of them is applicable."
msgstr "関数@code{insert-file-contents}は指定されたファイルを読み込む際にファイルフォーマットを自動的に認識します。これはフォーマット定義の正規表現にたいしてファイルの先頭テキストをチェックして、マッチが見つかったら、そのフォーマットにたいするデコード関数を呼び出します。その後は再度すべての既知のフォーマットをチェックします。適用できるフォーマットがない間はチェックを続行します。"

#. type: Plain text
#: original_texis/files.texi:3570
msgid "Visiting a file, with @code{find-file-noselect} or the commands that use it, performs conversion likewise (because it calls @code{insert-file-contents}); it also calls the mode function for each format that it decodes.  It stores a list of the format names in the buffer-local variable @code{buffer-file-format}."
msgstr "@code{find-file-noselect}やそれを使用するコマンドでファイルをvisitすることにより、同じように変換が行われます(内部で@code{insert-file-contents}を呼び出すため)。さらにそれをデコードする各フォーマットのモード関数も呼び出します。これはバッファーローカル変数@code{buffer-file-format}内にフォーマット名のリストを格納します。"

#. type: defvar
#: original_texis/files.texi:3571
#, no-wrap
msgid "buffer-file-format"
msgstr "buffer-file-format"

#. type: defvar
#: original_texis/files.texi:3576
msgid "This variable states the format of the visited file.  More precisely, this is a list of the file format names that were decoded in the course of visiting the current buffer's file.  It is always buffer-local in all buffers."
msgstr "この変数はvisitしているファイルのフォーマットを表す。より正確にはこれはカレントバッファーのファイルをvisitに起因するデコードのファイルフォーマット名のリストである。これはすべてのバッファーにたいして常にローカル。"

#. type: Plain text
#: original_texis/files.texi:3581
msgid "When @code{write-region} writes data into a file, it first calls the encoding functions for the formats listed in @code{buffer-file-format}, in the order of appearance in the list."
msgstr "@code{write-region}がデータをファイルに書き込む際には、まず@code{buffer-file-format}にリストされたフォーマットにたいするエンコード関数をリスト内での出現順に呼び出します。"

#. type: deffn
#: original_texis/files.texi:3582
#, no-wrap
msgid "Command format-write-file file format &optional confirm"
msgstr "Command format-write-file file format &optional confirm"

#. type: deffn
#: original_texis/files.texi:3594
msgid "This command writes the current buffer contents into the file @var{file} in a format based on @var{format}, which is a list of format names.  It constructs the actual format starting from @var{format}, then appending any elements from the value of @code{buffer-file-format} with a non-@code{nil} @var{preserve} flag (see above), if they are not already present in @var{format}.  It then updates @code{buffer-file-format} with this format, making it the default for future saves.  Except for the @var{format} argument, this command is similar to @code{write-file}.  In particular, @var{confirm} has the same meaning and interactive treatment as the corresponding argument to @code{write-file}.  @xref{Definition of write-file}."
msgstr "このコマンドはカレントバッファーのコンテンツをフォーマット名のリスト@var{format}にもとづいたフォーマットでファイル@var{file}に書き込む。これは@var{format}を起点に、@code{buffer-file-format}の値から@var{preserve}フラグ(上記参照)が非@code{nil}の要素にたいして、それがまだ@var{format}内に存在しなければ任意の個数それらを追加する。その後に将来の保存においてデフォルトとなるように、このフォーマットで@code{buffer-file-format}を更新する。@var{format}引数を除けばこのコマンドは@code{write-file}と似ている。特に@var{confirm}は@code{write-file}での対応する引数と、意味やinteractiveでの扱いが同じである。@ref{Definition of write-file}を参照のこと。"

#. type: deffn
#: original_texis/files.texi:3596
#, no-wrap
msgid "Command format-find-file file format"
msgstr "Command format-find-file file format"

#. type: deffn
#: original_texis/files.texi:3600
msgid "This command finds the file @var{file}, converting it according to format @var{format}.  It also makes @var{format} the default if the buffer is saved later."
msgstr "このコマンドはファイル@var{file}を探してそれをフォーマット@var{format}にしたがって変換する。これは後でそのバッファーを保存する場合に@var{format}をデフォルトにすることも行う。"

#. type: deffn
#: original_texis/files.texi:3604 original_texis/files.texi:3619
msgid "The argument @var{format} is a list of format names.  If @var{format} is @code{nil}, no conversion takes place.  Interactively, typing just @key{RET} for @var{format} specifies @code{nil}."
msgstr "引数@var{format}はフォーマット名のリスト。@var{format}が@code{nil}なら何の変換も行われない。interactiveに呼び出した場合には、@var{format}にたいして単に@key{RET}をタイプすると@code{nil}が指定される。"

#. type: deffn
#: original_texis/files.texi:3606
#, no-wrap
msgid "Command format-insert-file file format &optional beg end"
msgstr "Command format-insert-file file format &optional beg end"

#. type: deffn
#: original_texis/files.texi:3611
msgid "This command inserts the contents of file @var{file}, converting it according to format @var{format}.  If @var{beg} and @var{end} are non-@code{nil}, they specify which part of the file to read, as in @code{insert-file-contents} (@pxref{Reading from Files})."
msgstr "このコマンドはファイル@var{file}のコンテンツをフォーマット@var{format}にしたがって変換して挿入する。@var{beg}と@var{end}が非@code{nil}なら、それは@code{insert-file-contents}と同様、ファイルのどの部分を読み込むかを指定する(@ref{Reading from Files}を参照)。"

#. type: deffn
#: original_texis/files.texi:3615
msgid "The return value is like what @code{insert-file-contents} returns: a list of the absolute file name and the length of the data inserted (after conversion)."
msgstr "リターン値は絶対ファイル名のリスト、および挿入されたデータの長さ(変換後)であり、これは@code{insert-file-contents}がリターンするものと同様。"

#. type: defvar
#: original_texis/files.texi:3621
#, no-wrap
msgid "buffer-auto-save-file-format"
msgstr "buffer-auto-save-file-format"

#. type: defvar
#: original_texis/files.texi:3629
msgid "This variable specifies the format to use for auto-saving.  Its value is a list of format names, just like the value of @code{buffer-file-format}; however, it is used instead of @code{buffer-file-format} for writing auto-save files.  If the value is @code{t}, the default, auto-saving uses the same format as a regular save in the same buffer.  This variable is always buffer-local in all buffers."
msgstr "この変数は自動保存(auto-saving)にたいして使用するフォーマットを指定する。値は@code{buffer-file-format}と同様、ファイル名のリストだが、これはauto-saveファイルへの書き込みで@code{buffer-file-format}のかわりに使用される。値が@code{t}(デフォルト)なら自動保存は当バッファーの通常の保存時と同じフォーマットを使用する。この変数はすべてのバッファーにおいて常にバッファーローカル。"

#. type: node
#: original_texis/files.texi:3631
#, no-wrap
msgid "Format Conversion Piecemeal"
msgstr "Format Conversion Piecemeal"

#. type: subsection
#: original_texis/files.texi:3632
#, no-wrap
msgid "Piecemeal Specification"
msgstr "Piecemeal Specification"

#. type: Plain text
#: original_texis/files.texi:3638
msgid "In contrast to the round-trip specification described in the previous subsection (@pxref{Format Conversion Round-Trip}), you can use the variables @code{after-insert-file-functions} and @code{write-region-annotate-functions} to separately control the respective reading and writing conversions."
msgstr "前のサブセクション(@ref{Format Conversion Round-Trip}を参照)で説明したラウンドトリップ指定とは対照的に、変数@code{after-insert-file-functions}と@code{write-region-annotate-functions}を使用して読み取りと書き込みの変換を個別に制御できます。"

#. type: Plain text
#: original_texis/files.texi:3644
msgid "Conversion starts with one representation and produces another representation.  When there is only one conversion to do, there is no conflict about what to start with.  However, when there are multiple conversions involved, conflict may arise when two conversions need to start with the same data."
msgstr "変換はある表現を起点として他の表現を生成します。これを行う変換が1つだけのときは、何を起点とするかに関して競合は存在しません。しかし複数の変換呼び出しが存在する場合には、同じデータを起点にする必要がある2つの変換の間に競合が発生するかもしれません。"

#. type: Plain text
#: original_texis/files.texi:3652
msgid "This situation is best understood in the context of converting text properties during @code{write-region}.  For example, the character at position 42 in a buffer is @samp{X} with a text property @code{foo}.  If the conversion for @code{foo} is done by inserting into the buffer, say, @samp{FOO:}, then that changes the character at position 42 from @samp{X} to @samp{F}.  The next conversion will start with the wrong data straight away."
msgstr "この状況を理解するには、@code{write-region}中のテキストプロパティの変換コンテキストが最善です。たとえばあるバッファーの位置42の文字が@samp{X}で、それのテキストプロパティが@code{foo}だとします。@code{foo}にたいする変換が、たとえばそのバッファーに@samp{FOO:}を挿入することにより行われる場合には、それは位置42の文字@samp{X}を@samp{F}に変更します。そして次の変換は間違ったデータを起点に開始されるでしょう。"

#. type: Plain text
#: original_texis/files.texi:3657
msgid "To avoid conflict, cooperative conversions do not modify the buffer, but instead specify @dfn{annotations}, a list of elements of the form @code{(@var{position} . @var{string})}, sorted in order of increasing @var{position}."
msgstr "競合を避けるためには協調的な変換がバッファーを変更せずに、@var{position}昇順でソートされた@code{(@var{position} . @var{string})}という形式の要素をもつリストを@dfn{注釈(annotations)}に指定します。"

#. type: Plain text
#: original_texis/files.texi:3663
msgid "If there is more than one conversion, @code{write-region} merges their annotations destructively into one sorted list.  Later, when the text from the buffer is actually written to the file, it intermixes the specified annotations at the corresponding positions.  All this takes place without modifying the buffer."
msgstr "2つ以上の変換が存在する場合には、@code{write-region}はそれらの注釈を1つのソート済みリストに破壊的にマージします。後でそのバッファーのテキストを実際にファイルに書き込む際に、対応する位置にある指定された注釈を混合します。これはすべてバッファーを変更せずに行われます。"

#. type: Plain text
#: original_texis/files.texi:3679
msgid "In contrast, when reading, the annotations intermixed with the text are handled immediately.  @code{insert-file-contents} sets point to the beginning of some text to be converted, then calls the conversion functions with the length of that text.  These functions should always return with point at the beginning of the inserted text.  This approach makes sense for reading because annotations removed by the first converter can't be mistakenly processed by a later converter.  Each conversion function should scan for the annotations it recognizes, remove the annotation, modify the buffer text (to set a text property, for example), and return the updated length of the text, as it stands after those changes.  The value returned by one function becomes the argument to the next function."
msgstr "読み取り時にはこれとは対照的にそのテキストの混合された注釈は即座に処理されます。@code{insert-file-contents}は変更される何らかのテキストの先頭にポイントをセットしてから、そのテキストの長さで変換関数を呼び出します。これらの関数は常に挿入されるテキストの先頭のポイントをリターンするべきです。最初の変換により注釈が削除されても、その後の変換が誤って処理することはないので、このアプローチは読み取りに際しては正しく機能します。すべての変換関数は、それが認識する注釈のスキャン、その注釈の削除、バッファーテキストの変更(たとえばテキストプロパティのセット等)、およびそれらの変更に由来する更新されたテキスト長のリターンを行うべきです。１つの関数によりリターンされた値は次の関数への引数になります。"

#. type: defvar
#: original_texis/files.texi:3680
#, no-wrap
msgid "write-region-annotate-functions"
msgstr "write-region-annotate-functions"

#. type: defvar
#: original_texis/files.texi:3685
msgid "A list of functions for @code{write-region} to call.  Each function in the list is called with two arguments: the start and end of the region to be written.  These functions should not alter the contents of the buffer.  Instead, they should return annotations."
msgstr "@code{write-region}にたいして呼び出す関数のリスト。リスト内の各関数は書き込まれるリージョンの開始と終了の2つの引数で呼び出される。これらの関数はそのバッファーのコンテンツを変更するべきではない。かわりに注釈をリターンすること。"

#. type: defvar
#: original_texis/files.texi:3693
msgid "As a special case, a function may return with a different buffer current.  Emacs takes this to mean that the current buffer contains altered text to be output.  It therefore changes the @var{start} and @var{end} arguments of the @code{write-region} call, giving them the values of @code{point-min} and @code{point-max} in the new buffer, respectively.  It also discards all previous annotations, because they should have been dealt with by this function."
msgstr "特別なケースとして、関数がカレントと異なるバッファーをリターンするかもしれない。Emacsはこれを、出力される変更されたテキストをカレントバッファーが含むものとして理解する。つまりEmacsは@code{write-region}呼び出しの引数@var{start}と@var{end}を、新たなバッファーの@code{point-min}と@code{point-max}に変更して与える。さらに以前のすべての注釈はこの関数により処理されるのでEmacsはそれらの破棄も行う。"

#. type: defvar
#: original_texis/files.texi:3695
#, no-wrap
msgid "write-region-post-annotation-function"
msgstr "write-region-post-annotation-function"

#. type: defvar
#: original_texis/files.texi:3699
msgid "The value of this variable, if non-@code{nil}, should be a function.  This function is called, with no arguments, after @code{write-region} has completed."
msgstr "この変数の値が非@code{nil}なら、それは関数であること。この関数は@code{write-region}完了後に引数なしで呼び出される。"

#. type: defvar
#: original_texis/files.texi:3705
msgid "If any function in @code{write-region-annotate-functions} returns with a different buffer current, Emacs calls @code{write-region-post-annotation-function} more than once.  Emacs calls it with the last buffer that was current, and again with the buffer before that, and so on back to the original buffer."
msgstr "@code{write-region-annotate-functions}内のある関数がカレントと異なるバッファーをリターンした場合には、Emacsは@code{write-region-post-annotation-function}を複数回呼び出す。Emacsは最後にカレントだったバッファーでそれを呼び出し、その前にカレントだったバッファーで再度これを呼び出す、...のようにして元のバッファーに戻る。"

#. type: defvar
#: original_texis/files.texi:3710
msgid "Thus, a function in @code{write-region-annotate-functions} can create a buffer, give this variable the local value of @code{kill-buffer} in that buffer, set up the buffer with altered text, and make the buffer current.  The buffer will be killed after @code{write-region} is done."
msgstr "したがって@code{write-region-annotate-functions}内の関数は、バッファーを作成して、@code{kill-buffer}のそのバッファーでのローカル値にこの変数を与え、変更されたテキストでそのバッファーをセットアップして、そのバッファーをカレントにすることができる。そのバッファーは、@code{write-region}完了後にkillされるだろう。"

#. type: defvar
#: original_texis/files.texi:3712
#, no-wrap
msgid "after-insert-file-functions"
msgstr "after-insert-file-functions"

#. type: defvar
#: original_texis/files.texi:3720
msgid "Each function in this list is called by @code{insert-file-contents} with one argument, the number of characters inserted, and with point at the beginning of the inserted text.  Each function should leave point unchanged, and return the new character count describing the inserted text as modified by the function."
msgstr "このリスト内の各関数は、挿入されるテキストの先頭にポイントがある状態で、挿入される文字数を１つの引数として@code{insert-file-contents}により呼び出される。すべての関数はポイントを未変更のまま、その関数によって変更された挿入後テキストの新たな文字数をリターンすること。"

#. type: Plain text
#: original_texis/files.texi:3726
msgid "We invite users to write Lisp programs to store and retrieve text properties in files, using these hooks, and thus to experiment with various data formats and find good ones.  Eventually we hope users will produce good, general extensions we can install in Emacs."
msgstr "わたしたちは、ユーザーがファイル内にテキストプロパティを格納したりそれらを取得するために、そしてさまざまなデータフォーマットを体験することにより適切なフォーマットを見つけるために、これらのフックを使用してLispプログラムを記述することを推奨します。最終的にはわたしたちがEmacs内にインストールできる、良質で汎用性のある拡張をユーザーが開発することを望みます。"

#. type: Plain text
#: original_texis/files.texi:3730
msgid "We suggest not trying to handle arbitrary Lisp objects as text property names or values---because a program that general is probably difficult to write, and slow.  Instead, choose a set of possible data types that are reasonably flexible, and not too hard to encode."
msgstr "わたしたちはテキストプロパティの名前や値として、任意のLispオブジェクトの処理を試みることは推奨しません --- なぜなら汎用的なプログラムはおそらく記述が困難かつ低速だからです。かわりに十分な柔軟性をもちエンコードが難しすぎない、想定されるデータ型のセットを選択してください。"
