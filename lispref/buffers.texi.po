# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Emacs 26.1\n"
"POT-Creation-Date: 2020-03-08 09:40+0900\n"
"PO-Revision-Date: 2020-04-20 20:10+0900\n"
"Last-Translator: Ayanokoji Takesi <ayanokoji.takesi@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: original_texis/buffers.texi:6 original_texis/buffers.texi:7
#, no-wrap
msgid "Buffers"
msgstr "Buffers"

#. type: cindex
#: original_texis/buffers.texi:8
#, no-wrap
msgid "buffer"
msgstr "buffer"

#. type: Plain text
#: original_texis/buffers.texi:17
msgid "A @dfn{buffer} is a Lisp object containing text to be edited.  Buffers are used to hold the contents of files that are being visited; there may also be buffers that are not visiting files.  While several buffers may exist at one time, only one buffer is designated the @dfn{current buffer} at any time.  Most editing commands act on the contents of the current buffer.  Each buffer, including the current buffer, may or may not be displayed in any windows."
msgstr "@dfn{バッファー(buffer)}とは編集されるテキストを含んだLispオブジェクトのことです。バッファーはvisitされるファイルのコンテンツを保持するために使用されます。しかしファイルをvisitしないバッファーも存在します。一度に複数のバッファーが存在するかもしれませんが、@dfn{カレントバッファー(current buffer)}に指定できるのは常に1つのバッファーだけです。ほとんどの編集コマンドはカレントバッファーのコンテンツにたいして作用します。カレントバッファーを含むすべてのバッファーは任意のウィンドウ内に表示されるときもあれば、表示されない場合もあります。"

#. type: section
#: original_texis/buffers.texi:34 original_texis/buffers.texi:36
#: original_texis/buffers.texi:37
#, no-wrap
msgid "Buffer Basics"
msgstr "Buffer Basics"

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "What is a buffer?"
msgstr "バッファーとは?"

#. type: node
#: original_texis/buffers.texi:34 original_texis/buffers.texi:80
#, no-wrap
msgid "Current Buffer"
msgstr "Current Buffer"

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "Designating a buffer as current so that primitives will access its contents."
msgstr "バッファーをカレントに指定することにより、プリミティブはバッファーのコンテンツにアクセスする。"

#. type: section
#: original_texis/buffers.texi:34 original_texis/buffers.texi:247
#: original_texis/buffers.texi:248
#, no-wrap
msgid "Buffer Names"
msgstr "Buffer Names"

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "Accessing and changing buffer names."
msgstr "バッファー名にたいするアクセスと変更。"

#. type: section
#: original_texis/buffers.texi:34 original_texis/buffers.texi:366
#: original_texis/buffers.texi:367
#, no-wrap
msgid "Buffer File Name"
msgstr "Buffer File Name"

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "The buffer file name indicates which file is visited."
msgstr "バッファーファイル名は、どのファイルをvisitしているかを示す。"

#. type: section
#: original_texis/buffers.texi:34 original_texis/buffers.texi:514
#: original_texis/buffers.texi:515
#, no-wrap
msgid "Buffer Modification"
msgstr "Buffer Modification"

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "A buffer is @dfn{modified} if it needs to be saved."
msgstr "保存が必要ならバッファーは@dfn{変更されている(modified)}。"

#. type: node
#: original_texis/buffers.texi:34 original_texis/buffers.texi:590
#, no-wrap
msgid "Modification Time"
msgstr "Modification Time"

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "Determining whether the visited file was changed behind Emacs's back."
msgstr "Emacsの背後でvisitされているファイルが変更されたかどうかを判断する。"

#. type: node
#: original_texis/buffers.texi:34 original_texis/buffers.texi:690
#, no-wrap
msgid "Read Only Buffers"
msgstr "Read Only Buffers"

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "Modifying text is not allowed in a read-only buffer."
msgstr "読み取り専用バッファーでのテキスト変更は許されない。"

#. type: node
#: original_texis/buffers.texi:34 original_texis/buffers.texi:770
#, no-wrap
msgid "Buffer List"
msgstr "Buffer List"

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "How to look at all the existing buffers."
msgstr "すべての既存バッファーを閲覧する方法。"

#. type: section
#: original_texis/buffers.texi:34 original_texis/buffers.texi:930
#: original_texis/buffers.texi:931
#, no-wrap
msgid "Creating Buffers"
msgstr "Creating Buffers"

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "Functions that create buffers."
msgstr "バッファーを作成する関数。"

#. type: section
#: original_texis/buffers.texi:34 original_texis/buffers.texi:1000
#: original_texis/buffers.texi:1001
#, no-wrap
msgid "Killing Buffers"
msgstr "Killing Buffers"

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "Buffers exist until explicitly killed."
msgstr "明示的にkillされるまで、バッファーは存在する。"

#. type: section
#: original_texis/buffers.texi:34 original_texis/buffers.texi:1116
#: original_texis/buffers.texi:1117
#, no-wrap
msgid "Indirect Buffers"
msgstr "Indirect Buffers"

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "An indirect buffer shares text with some other buffer."
msgstr "インダイレクトバッファーは他のバッファーとテキストを共有する。"

#. type: node
#: original_texis/buffers.texi:34 original_texis/buffers.texi:1183
#, no-wrap
msgid "Swapping Text"
msgstr "Swapping Text"

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "Swapping text between two buffers."
msgstr "2つのバッファー間でのテキストの交換。"

#. type: node
#: original_texis/buffers.texi:34 original_texis/buffers.texi:1234
#, no-wrap
msgid "Buffer Gap"
msgstr "Buffer Gap"

#. type: menuentry
#: original_texis/buffers.texi:34
msgid "The gap in the buffer."
msgstr "バッファー内のギャップ。"

#. type: ifnottex
#: original_texis/buffers.texi:47
msgid "A @dfn{buffer} is a Lisp object containing text to be edited.  Buffers are used to hold the contents of files that are being visited; there may also be buffers that are not visiting files.  Although several buffers normally exist, only one buffer is designated the @dfn{current buffer} at any time.  Most editing commands act on the contents of the current buffer.  Each buffer, including the current buffer, may or may not be displayed in any windows."
msgstr "@dfn{バッファー(buffer)}とは編集されるテキストを含むLispオブジェクトのことです。バッファーはvisitされるファイルのコンテンツを保持するために使用されます。しかしファイルをvisitしないバッファーも存在します。一度に複数のバッファーが存在するかもしれませんが、@dfn{カレントバッファー(current buffer)}に指定できるのは常に1つのバッファーだけです。ほとんどの編集コマンドはカレントバッファーのコンテンツにたいして作用します。カレントバッファーを含むすべてのバッファーは、いずれかのウィンドウ内に表示されるときもあるし、表示されない場合もあります。"

#. type: Plain text
#: original_texis/buffers.texi:54
msgid "Buffers in Emacs editing are objects that have distinct names and hold text that can be edited.  Buffers appear to Lisp programs as a special data type.  You can think of the contents of a buffer as a string that you can extend; insertions and deletions may occur in any part of the buffer.  @xref{Text}."
msgstr "Emacs編集におけるバッファーとは個別に名前をもち、編集可能なテキストを保持するオブジェクトです。Lispプログラムにおけるバッファーはスペシャルデータ型として表されます。バッファーのコンテンツを拡張可能な文字列と考えることができます。挿入と削除はバッファー内の任意の箇所で発生し得ます。@ref{Text}を参照してください。"

#. type: Plain text
#: original_texis/buffers.texi:61
msgid "A Lisp buffer object contains numerous pieces of information.  Some of this information is directly accessible to the programmer through variables, while other information is accessible only through special-purpose functions.  For example, the visited file name is directly accessible through a variable, while the value of point is accessible only through a primitive function."
msgstr "Lispのバッファーオブジェクトは多くの情報要素を含んでいます。これらの情報のいくつかは変数を通じてプログラマーが直接アクセスできるのにたいして、その他の情報は特殊な目的のための関数を通じてのみアクセスすることができます。たとえばvisitされているファイルの名前は変数を通じて直接アクセスできますが、ポイント値はプリミティブ関数からのみアクセスできます。"

#. type: Plain text
#: original_texis/buffers.texi:69
msgid "Buffer-specific information that is directly accessible is stored in @dfn{buffer-local} variable bindings, which are variable values that are effective only in a particular buffer.  This feature allows each buffer to override the values of certain variables.  Most major modes override variables such as @code{fill-column} or @code{comment-column} in this way.  For more information about buffer-local variables and functions related to them, see @ref{Buffer-Local Variables}."
msgstr "直接アクセス可能なバッファー固有の情報は、@dfn{バッファーローカル(buffer-local)}な変数バインディング内に格納されます。これは特定のバッファー内だけで効力のある変数値のことです。この機能により、それぞれのバッファーは特定の変数の値をオーバーライドすることができます。ほとんどのメジャーモードはこの方法で@code{fill-column}や@code{comment-column}のような変数をオーバーライドしています。バッファーローカルな変数、およびそれらに関連する関数についての詳細は@ref{Buffer-Local Variables}を参照してください。"

#. type: Plain text
#: original_texis/buffers.texi:74
msgid "For functions and variables related to visiting files in buffers, see @ref{Visiting Files} and @ref{Saving Buffers}.  For functions and variables related to the display of buffers in windows, see @ref{Buffers and Windows}."
msgstr "バッファーからファイルをvisitする関数および変数については@ref{Visiting Files}と@ref{Saving Buffers}を参照してください。ウィンドウ内へのバッファー表示に関連する関数および変数については@ref{Buffers and Windows}を参照してください。"

#. type: defun
#: original_texis/buffers.texi:75
#, no-wrap
msgid "bufferp object"
msgstr "bufferp object"

#. type: defun
#: original_texis/buffers.texi:78
msgid "This function returns @code{t} if @var{object} is a buffer, @code{nil} otherwise."
msgstr "この関数は@var{object}がバッファーなら@code{t}、それ以外は@code{nil}をリターンする。"

#. type: section
#: original_texis/buffers.texi:81
#, no-wrap
msgid "The Current Buffer"
msgstr "The Current Buffer"

#. type: cindex
#: original_texis/buffers.texi:82
#, no-wrap
msgid "selecting a buffer"
msgstr "selecting a buffer"

#. type: cindex
#: original_texis/buffers.texi:83
#, no-wrap
msgid "changing to another buffer"
msgstr "changing to another buffer"

#. type: cindex
#: original_texis/buffers.texi:84
#, no-wrap
msgid "current buffer"
msgstr "current buffer"

#. type: Plain text
#: original_texis/buffers.texi:91
msgid "There are, in general, many buffers in an Emacs session.  At any time, one of them is designated the @dfn{current buffer}---the buffer in which most editing takes place.  Most of the primitives for examining or changing text operate implicitly on the current buffer (@pxref{Text})."
msgstr "一般的に1つのEmacsセッション内には多くのバッファーが存在します。常にそれらのうちの1つが@dfn{カレントバッファー(current buffer)}に指定されます。カレントバッファーとは、ほとんどの編集が行われるバッファーのことです。テキストを調べたり変更するプリミティブのほとんどは暗黙にカレントバッファーにたいして処理を行います(@ref{Text}を参照)。"

#. type: Plain text
#: original_texis/buffers.texi:97
msgid "Normally, the buffer displayed in the selected window is the current buffer, but this is not always so: a Lisp program can temporarily designate any buffer as current in order to operate on its contents, without changing what is displayed on the screen.  The most basic function for designating a current buffer is @code{set-buffer}."
msgstr "通常は選択されたウィンドウ内に表示されるバッファーがカレントバッファーですが、常にそうではありません。Lispプログラムはバッファーのコンテンツを処理するために、スクリーン上に表示されているものを変更することなく任意のバッファーを一時的にカレントに指定できます。カレントバッファーの指定にたいするもっとも基本的な関数は@code{set-buffer}です。"

#. type: defun
#: original_texis/buffers.texi:98
#, no-wrap
msgid "current-buffer"
msgstr "current-buffer"

#. type: defun
#: original_texis/buffers.texi:100
msgid "This function returns the current buffer."
msgstr "この関数はカレントバッファーをリターンする。"

#. type: group
#: original_texis/buffers.texi:105
#, no-wrap
msgid ""
"(current-buffer)\n"
"     @result{} #<buffer buffers.texi>\n"
msgstr ""
"(current-buffer)\n"
"     @result{} #<buffer buffers.texi>\n"

#. type: defun
#: original_texis/buffers.texi:109
#, no-wrap
msgid "set-buffer buffer-or-name"
msgstr "set-buffer buffer-or-name"

#. type: defun
#: original_texis/buffers.texi:113
msgid "This function makes @var{buffer-or-name} the current buffer.  @var{buffer-or-name} must be an existing buffer or the name of an existing buffer.  The return value is the buffer made current."
msgstr "この関数は@var{buffer-or-name}をカレントバッファーにする。@var{buffer-or-name}は既存のバッファー、または既存のバッファーの名前でなければならない。リターン値はカレントになったバッファー。"

#. type: defun
#: original_texis/buffers.texi:117
msgid "This function does not display the buffer in any window, so the user cannot necessarily see the buffer.  But Lisp programs will now operate on it."
msgstr "この関数はそのバッファーをどのウィンドウにも表示しないので、必然的にユーザーはそのバッファーを見ることはできない。しかしLispプログラムはその後に、そのバッファーにたいして処理を行うことになるだろう。"

#. type: Plain text
#: original_texis/buffers.texi:127
msgid "When an editing command returns to the editor command loop, Emacs automatically calls @code{set-buffer} on the buffer shown in the selected window.  This is to prevent confusion: it ensures that the buffer that the cursor is in, when Emacs reads a command, is the buffer to which that command applies (@pxref{Command Loop}).  Thus, you should not use @code{set-buffer} to switch visibly to a different buffer; for that, use the functions described in @ref{Switching Buffers}."
msgstr "編集コマンドがエディターコマンドループにリターンする際、Emacsは選択されたウィンドウ内に表示されているバッファーにたいして、自動的に@code{set-buffer}を呼び出します。これは混乱を防ぐためであり、これによりEmacsがコマンドを読み取るときにカーソルのあるバッファーが、コマンドを適用されるバッファーになることが保証されます(@ref{Command Loop}を参照)。したがって異なるバッファーを指示して切り替える場合には@code{set-buffer}を使用するべきではありません。これを行うためには@ref{Switching Buffers}で説明されている関数を使用してください。"

#. type: Plain text
#: original_texis/buffers.texi:134
msgid "When writing a Lisp function, do @emph{not} rely on this behavior of the command loop to restore the current buffer after an operation.  Editing commands can also be called as Lisp functions by other programs, not just from the command loop; it is convenient for the caller if the subroutine does not change which buffer is current (unless, of course, that is the subroutine's purpose)."
msgstr "Lisp関数を記述する際は、処理後にカレントバッファーをリストアするためにコマンドループのこの振る舞いに@emph{依存しないでください}。編集コマンドはコマンドループだけではなく、他のプログラムからLisp関数としても呼び出されます。呼び出し側にとっては、そのサブルーチンがカレントだったバッファーを変更しないほうが便利です(もちろんそれがサブルーチンの目的でない場合)。"

#. type: Plain text
#: original_texis/buffers.texi:138
msgid "To operate temporarily on another buffer, put the @code{set-buffer} within a @code{save-current-buffer} form.  Here, as an example, is a simplified version of the command @code{append-to-buffer}:"
msgstr "他のバッファーにたいして一時的に処理を行うには、@code{save-current-buffer}フォーム内に@code{set-buffer}を配置します。以下の例はコマンド@code{append-to-buffer}の簡略版です:"

#. type: group
#: original_texis/buffers.texi:148
#, no-wrap
msgid ""
"(defun append-to-buffer (buffer start end)\n"
"  \"Append the text of the region to BUFFER.\"\n"
"  (interactive \"BAppend to buffer: \\nr\")\n"
"  (let ((oldbuf (current-buffer)))\n"
"    (save-current-buffer\n"
"      (set-buffer (get-buffer-create buffer))\n"
"      (insert-buffer-substring oldbuf start end))))\n"
msgstr ""
"(defun append-to-buffer (buffer start end)\n"
"  \"リージョンのテキストをBUFFERに追加する\"\n"
"  (interactive \"BAppend to buffer: \\nr\")\n"
"  (let ((oldbuf (current-buffer)))\n"
"    (save-current-buffer\n"
"      (set-buffer (get-buffer-create buffer))\n"
"      (insert-buffer-substring oldbuf start end))))\n"

#. type: Plain text
#: original_texis/buffers.texi:157
msgid "Here, we bind a local variable to record the current buffer, and then @code{save-current-buffer} arranges to make it current again later.  Next, @code{set-buffer} makes the specified buffer current, and @code{insert-buffer-substring} copies the string from the original buffer to the specified (and now current) buffer."
msgstr "ここではカレントバッファーを記録するためにローカル変数にバインドしてから、後で@code{save-current-buffer}がそれを再びカレントにするようにアレンジしています。次に@code{set-buffer}が指定されたバッファーをカレントにして、@code{insert-buffer-substring}が元のバッファーの文字列を指定された(今はカレントの)バッファーにコピーします。"

#. type: Plain text
#: original_texis/buffers.texi:159
msgid "Alternatively, we can use the @code{with-current-buffer} macro:"
msgstr "かわりに@code{with-current-buffer}マクロを使用することもできます:"

#. type: group
#: original_texis/buffers.texi:168
#, no-wrap
msgid ""
"(defun append-to-buffer (buffer start end)\n"
"  \"Append the text of the region to BUFFER.\"\n"
"  (interactive \"BAppend to buffer: \\nr\")\n"
"  (let ((oldbuf (current-buffer)))\n"
"    (with-current-buffer (get-buffer-create buffer)\n"
"      (insert-buffer-substring oldbuf start end))))\n"
msgstr ""
"(defun append-to-buffer (buffer start end)\n"
"  \"BUFFERにリージョンのテキストを追加する\"\n"
"  (interactive \"BAppend to buffer: \\nr\")\n"
"  (let ((oldbuf (current-buffer)))\n"
"    (with-current-buffer (get-buffer-create buffer)\n"
"      (insert-buffer-substring oldbuf start end))))\n"

#. type: Plain text
#: original_texis/buffers.texi:176
msgid "In either case, if the buffer appended to happens to be displayed in some window, the next redisplay will show how its text has changed.  If it is not displayed in any window, you will not see the change immediately on the screen.  The command causes the buffer to become current temporarily, but does not cause it to be displayed."
msgstr "いずれのケースでも、追加されるバッファーが偶然他のウィンドウに表示されていると、次回の再表示でそのテキストがどのように変更されたか表示されるでしょう。どのウィンドウにも表示されていなければスクリーン上で即座に変更を目にすることはありません。コマンドはバッファーを一時的にカレントにしますが、そのことがバッファーの表示を誘発する訳ではありません。"

#. type: Plain text
#: original_texis/buffers.texi:182
msgid "If you make local bindings (with @code{let} or function arguments)  for a variable that may also have buffer-local bindings, make sure that the same buffer is current at the beginning and at the end of the local binding's scope.  Otherwise you might bind it in one buffer and unbind it in another!"
msgstr "バッファーローカルなバインディングをもつ変数にたいして、(@code{let}や関数引数などで)ローカルバインディングを作成する場合には、そのローカルバインディングのスコープの最初と最後で同じバッファーがカレントとなることを確認してください。そうしないと、あるバッファーではバインドして他のバッファーではバインドされないことになるかもしれません!"

#. type: Plain text
#: original_texis/buffers.texi:187
msgid "Do not rely on using @code{set-buffer} to change the current buffer back, because that won't do the job if a quit happens while the wrong buffer is current.  For instance, in the previous example, it would have been wrong to do this:"
msgstr "@code{set-buffer}の使用において、カレントバッファーが戻ることに依存しないでください。なぜなら間違ったバッファーがカレントのときにquitが発生した場合には、その処理は行われないでしょう。たとえば上記の例に倣うと以下は間違ったやり方です:"

#. type: group
#: original_texis/buffers.texi:194
#, no-wrap
msgid ""
"  (let ((oldbuf (current-buffer)))\n"
"    (set-buffer (get-buffer-create buffer))\n"
"    (insert-buffer-substring oldbuf start end)\n"
"    (set-buffer oldbuf))\n"
msgstr ""
"  (let ((oldbuf (current-buffer)))\n"
"    (set-buffer (get-buffer-create buffer))\n"
"    (insert-buffer-substring oldbuf start end)\n"
"    (set-buffer oldbuf))\n"

#. type: Plain text
#: original_texis/buffers.texi:201
msgid "Using @code{save-current-buffer} or @code{with-current-buffer}, as we did, correctly handles quitting, errors, and @code{throw}, as well as ordinary evaluation."
msgstr "例で示したように@code{save-current-buffer}や@code{with-current-buffer}を使用すれば、quitや@code{throw}を通常の評価と同様に処理できます。"

#. type: defspec
#: original_texis/buffers.texi:202
#, no-wrap
msgid "save-current-buffer body@dots{}"
msgstr "save-current-buffer body@dots{}"

#. type: defspec
#: original_texis/buffers.texi:208
msgid "The @code{save-current-buffer} special form saves the identity of the current buffer, evaluates the @var{body} forms, and finally restores that buffer as current.  The return value is the value of the last form in @var{body}.  The current buffer is restored even in case of an abnormal exit via @code{throw} or error (@pxref{Nonlocal Exits})."
msgstr "スペシャルフォーム@code{save-current-buffer}はカレントバッファーの識別を保存して@var{body}フォームを評価し、最後にそのバッファーをカレントにリストアする。リターン値は@var{body}内の最後のフォームの値。@code{throw}やエラーを通じた異常exitの場合にもカレントバッファーはリストアされる(@ref{Nonlocal Exits}を参照)。"

#. type: defspec
#: original_texis/buffers.texi:213
msgid "If the buffer that used to be current has been killed by the time of exit from @code{save-current-buffer}, then it is not made current again, of course.  Instead, whichever buffer was current just before exit remains current."
msgstr "カレントとして使用されていたバッファーが@code{save-current-buffer}によるexit時にkillされていたら、当然それが再びカレントとなることはない。かわりにexit直前にカレントバッファーが何であれ、それがカレントになる。"

#. type: defmac
#: original_texis/buffers.texi:215
#, no-wrap
msgid "with-current-buffer buffer-or-name body@dots{}"
msgstr "with-current-buffer buffer-or-name body@dots{}"

#. type: defmac
#: original_texis/buffers.texi:220
msgid "The @code{with-current-buffer} macro saves the identity of the current buffer, makes @var{buffer-or-name} current, evaluates the @var{body} forms, and finally restores the current buffer.  @var{buffer-or-name} must specify an existing buffer or the name of an existing buffer."
msgstr "@code{with-current-buffer}マクロはカレントバッファーの識別を保存して@var{buffer-or-name}をカレントにし、@var{body}フォームを評価してから最後にカレントバッファーをリストアする。@var{buffer-or-name}には既存のバッファー、または既存のバッファー名を指定しなければならない。"

#. type: defmac
#: original_texis/buffers.texi:224
msgid "The return value is the value of the last form in @var{body}.  The current buffer is restored even in case of an abnormal exit via @code{throw} or error (@pxref{Nonlocal Exits})."
msgstr "リターン値は@var{body}内の最後のフォームの値。@code{throw}やエラーを通じた異常exitの場合にも、カレントバッファーはリストアされる(@ref{Nonlocal Exits}を参照)。"

#. type: defmac
#: original_texis/buffers.texi:226
#, no-wrap
msgid "with-temp-buffer body@dots{}"
msgstr "with-temp-buffer body@dots{}"

#. type: anchor{#1}
#: original_texis/buffers.texi:235
msgid "Definition of with-temp-buffer"
msgstr "Definition of with-temp-buffer"

#. type: defmac
#: original_texis/buffers.texi:235
msgid "The @code{with-temp-buffer} macro evaluates the @var{body} forms with a temporary buffer as the current buffer.  It saves the identity of the current buffer, creates a temporary buffer and makes it current, evaluates the @var{body} forms, and finally restores the previous current buffer while killing the temporary buffer.  By default, undo information (@pxref{Undo}) is not recorded in the buffer created by this macro (but @var{body} can enable that, if needed)."
msgstr "@code{with-temp-buffer}マクロは一時的なバッファーをカレントバッファーとして@var{body}フォームを評価する。これはカレントバッファーの識別を保存して一時的なバッファーを作成、それをカレントとして@var{body}フォームを評価して、一時バッファーをkillする間に以前のカレントバッファーをリストアする。デフォルトではこのマクロにより作成されたバッファー内のアンドゥ情報(@ref{Undo}を参照)は記録されない(が必要なら@var{body}でそれを有効にできる)。"

#. type: defmac
#: original_texis/buffers.texi:239
msgid "The return value is the value of the last form in @var{body}.  You can return the contents of the temporary buffer by using @code{(buffer-string)} as the last form."
msgstr "リターン値は@var{body}内の最後のフォームの値。最後のフォームとして@code{(buffer-string)}を使用することにより、一時バッファーのコンテンツをリターンできる。"

#. type: defmac
#: original_texis/buffers.texi:242
msgid "The current buffer is restored even in case of an abnormal exit via @code{throw} or error (@pxref{Nonlocal Exits})."
msgstr "@code{throw}やエラーを通じた異常exitの場合にも、カレントバッファーはリストアされる(@ref{Nonlocal Exits}を参照)。"

#. type: defmac
#: original_texis/buffers.texi:245
msgid "See also @code{with-temp-file} in @ref{Definition of with-temp-file,, Writing to Files}."
msgstr "@ref{Definition of with-temp-file,, Writing to Files}の@code{with-temp-file}も参照のこと。"

#. type: cindex
#: original_texis/buffers.texi:249
#, no-wrap
msgid "buffer names"
msgstr "buffer names"

#. type: Plain text
#: original_texis/buffers.texi:257
msgid "Each buffer has a unique name, which is a string.  Many of the functions that work on buffers accept either a buffer or a buffer name as an argument.  Any argument called @var{buffer-or-name} is of this sort, and an error is signaled if it is neither a string nor a buffer.  Any argument called @var{buffer} must be an actual buffer object, not a name."
msgstr "それぞれのバッファーは文字列で表される一意な名前をもちます。バッファーにたいして機能する関数の多くは、引数としてバッファーとバッファー名の両方を受け入れます。@var{buffer-or-name}という名前の引数がこのタイプであり、それが文字列でもバッファーでもなければエラーがシグナルされます。@var{buffer}という名前の引数は名前ではなく実際のバッファーオブジェクトでなければなりません。"

#. type: cindex
#: original_texis/buffers.texi:258
#, no-wrap
msgid "hidden buffers"
msgstr "hidden buffers"

#. type: cindex
#: original_texis/buffers.texi:259
#, no-wrap
msgid "buffers without undo information"
msgstr "buffers without undo information"

#. type: Plain text
#: original_texis/buffers.texi:266
msgid "Buffers that are ephemeral and generally uninteresting to the user have names starting with a space, so that the @code{list-buffers} and @code{buffer-menu} commands don't mention them (but if such a buffer visits a file, it @strong{is} mentioned).  A name starting with space also initially disables recording undo information; see @ref{Undo}."
msgstr "短命でユーザーが関心をもたないようなバッファーは名前がスペースで始まり、それらについては@code{list-buffers}と@code{buffer-menu}コマンドは無視します(がファイルをvisitしているようなバッファーは@strong{無視されない})。スペースで始まる名前は初期状態ではアンドゥ情報の記録も無効になっています。@ref{Undo}を参照してください。"

#. type: defun
#: original_texis/buffers.texi:267
#, no-wrap
msgid "buffer-name &optional buffer"
msgstr "buffer-name &optional buffer"

#. type: defun
#: original_texis/buffers.texi:270
msgid "This function returns the name of @var{buffer} as a string.  @var{buffer} defaults to the current buffer."
msgstr "この関数は@var{buffer}の名前を文字列としてリターンする。@var{buffer}のデフォルトはカレントバッファー。"

#. type: defun
#: original_texis/buffers.texi:273
msgid "If @code{buffer-name} returns @code{nil}, it means that @var{buffer} has been killed.  @xref{Killing Buffers}."
msgstr "@code{buffer-name}が@code{nil}をリターンした場合、それは@var{buffer}がkillされていることを意味する。@ref{Killing Buffers}を参照のこと。"

#. type: group
#: original_texis/buffers.texi:278
#, no-wrap
msgid ""
"(buffer-name)\n"
"     @result{} \"buffers.texi\"\n"
msgstr ""
"(buffer-name)\n"
"     @result{} \"buffers.texi\"\n"

#. type: group
#: original_texis/buffers.texi:283
#, no-wrap
msgid ""
"(setq foo (get-buffer \"temp\"))\n"
"     @result{} #<buffer temp>\n"
msgstr ""
"(setq foo (get-buffer \"temp\"))\n"
"     @result{} #<buffer temp>\n"

#. type: group
#: original_texis/buffers.texi:287
#, no-wrap
msgid ""
"(kill-buffer foo)\n"
"     @result{} nil\n"
msgstr ""
"(kill-buffer foo)\n"
"     @result{} nil\n"

#. type: group
#: original_texis/buffers.texi:291
#, no-wrap
msgid ""
"(buffer-name foo)\n"
"     @result{} nil\n"
msgstr ""
"(buffer-name foo)\n"
"     @result{} nil\n"

#. type: group
#: original_texis/buffers.texi:295
#, no-wrap
msgid ""
"foo\n"
"     @result{} #<killed buffer>\n"
msgstr ""
"foo\n"
"     @result{} #<killed buffer>\n"

#. type: deffn
#: original_texis/buffers.texi:299
#, no-wrap
msgid "Command rename-buffer newname &optional unique"
msgstr "Command rename-buffer newname &optional unique"

#. type: deffn
#: original_texis/buffers.texi:302
msgid "This function renames the current buffer to @var{newname}.  An error is signaled if @var{newname} is not a string."
msgstr "この関数はカレントバッファーを@var{newname}にリネームする。@var{newname}が文字列でなければエラーをシグナルする。"

#. type: deffn
#: original_texis/buffers.texi:309
msgid "Ordinarily, @code{rename-buffer} signals an error if @var{newname} is already in use.  However, if @var{unique} is non-@code{nil}, it modifies @var{newname} to make a name that is not in use.  Interactively, you can make @var{unique} non-@code{nil} with a numeric prefix argument.  (This is how the command @code{rename-uniquely} is implemented.)"
msgstr "@var{newname}がすでに使用済みなら、@code{rename-buffer}は通常はエラーをシグナルする。しかし@var{unique}が非@code{nil}なら、未使用の名前となるように@var{newname}を変更する。interactiveに呼び出した場合は、プレフィックス数引数により@var{unique}に非@code{nil}を指定できる(この方法によってコマンド@code{rename-uniquely}は実装される)。"

#. type: deffn
#: original_texis/buffers.texi:311
msgid "This function returns the name actually given to the buffer."
msgstr "この関数は実際にバッファーに与えられた名前をリターンする。"

#. type: defun
#: original_texis/buffers.texi:313
#, no-wrap
msgid "get-buffer buffer-or-name"
msgstr "get-buffer buffer-or-name"

#. type: defun
#: original_texis/buffers.texi:319
msgid "This function returns the buffer specified by @var{buffer-or-name}.  If @var{buffer-or-name} is a string and there is no buffer with that name, the value is @code{nil}.  If @var{buffer-or-name} is a buffer, it is returned as given; that is not very useful, so the argument is usually a name.  For example:"
msgstr "この関数は@var{buffer-or-name}で指定されたバッファーをリターンする。@var{buffer-or-name}が文字列で、かつそのような名前のバッファーが存在しなければ値は@code{nil}。@var{buffer-or-name}がバッファーなら与えられたバッファーをリターンする。これは有用とは言い難く、引数は通常は名前である。たとえば:"

#. type: group
#: original_texis/buffers.texi:324
#, no-wrap
msgid ""
"(setq b (get-buffer \"lewis\"))\n"
"     @result{} #<buffer lewis>\n"
msgstr ""
"(setq b (get-buffer \"lewis\"))\n"
"     @result{} #<buffer lewis>\n"

#. type: group
#: original_texis/buffers.texi:328
#, no-wrap
msgid ""
"(get-buffer b)\n"
"     @result{} #<buffer lewis>\n"
msgstr ""
"(get-buffer b)\n"
"     @result{} #<buffer lewis>\n"

#. type: group
#: original_texis/buffers.texi:332
#, no-wrap
msgid ""
"(get-buffer \"Frazzle-nots\")\n"
"     @result{} nil\n"
msgstr ""
"(get-buffer \"Frazzle-nots\")\n"
"     @result{} nil\n"

#. type: defun
#: original_texis/buffers.texi:336
msgid "See also the function @code{get-buffer-create} in @ref{Creating Buffers}."
msgstr "@ref{Creating Buffers}の関数@code{get-buffer-create}も参照のこと。"

#. type: defun
#: original_texis/buffers.texi:339
#, no-wrap
msgid "generate-new-buffer-name starting-name &optional ignore"
msgstr "generate-new-buffer-name starting-name &optional ignore"

#. type: defun
#: original_texis/buffers.texi:345
msgid "This function returns a name that would be unique for a new buffer---but does not create the buffer.  It starts with @var{starting-name}, and produces a name not currently in use for any buffer by appending a number inside of @samp{<@dots{}>}.  It starts at 2 and keeps incrementing the number until it is not the name of an existing buffer."
msgstr "この関数は新たなバッファーにたいして一意となるような名前をリターンする --- がバッファーは作成しない。この名前は@var{starting-name}で始まり内部が数字であるような@samp{<@dots{}>}を追加することにより、すべてのバッファーでカレントで使用されていない名前を生成する。この数字は2で始まり、既存バッファーの名前でないような名前になる数字まで増加される。"

#. type: defun
#: original_texis/buffers.texi:352
msgid "If the optional second argument @var{ignore} is non-@code{nil}, it should be a string, a potential buffer name.  It means to consider that potential buffer acceptable, if it is tried, even it is the name of an existing buffer (which would normally be rejected).  Thus, if buffers named @samp{foo}, @samp{foo<2>}, @samp{foo<3>} and @samp{foo<4>} exist,"
msgstr "オプション引数@var{ignore}が非@code{nil}なら、それは潜在的にバッファー名であるような文字列であること。これは、たとえそれが(通常は拒絶されるであろう)既存バッファーの名前であっても、試みられた場合には潜在的に受容可能なバッファーとして考慮することを意味する。つまり@samp{foo}、@samp{foo<2>}、@samp{foo<3>}、@samp{foo<4>}という名前のバッファーが存在する場合には、"

#. type: example
#: original_texis/buffers.texi:360
#, no-wrap
msgid ""
"(generate-new-buffer-name \"foo\")\n"
"     @result{} \"foo<5>\"\n"
"(generate-new-buffer-name \"foo\" \"foo<3>\")\n"
"     @result{} \"foo<3>\"\n"
"(generate-new-buffer-name \"foo\" \"foo<6>\")\n"
"     @result{} \"foo<5>\"\n"
msgstr ""
"(generate-new-buffer-name \"foo\")\n"
"     @result{} \"foo<5>\"\n"
"(generate-new-buffer-name \"foo\" \"foo<3>\")\n"
"     @result{} \"foo<3>\"\n"
"(generate-new-buffer-name \"foo\" \"foo<6>\")\n"
"     @result{} \"foo<5>\"\n"

#. type: defun
#: original_texis/buffers.texi:364
msgid "See the related function @code{generate-new-buffer} in @ref{Creating Buffers}."
msgstr "@ref{Creating Buffers}の関連する関数@code{generate-new-buffer}も参照のこと。"

#. type: cindex
#: original_texis/buffers.texi:368
#, no-wrap
msgid "visited file"
msgstr "visited file"

#. type: cindex
#: original_texis/buffers.texi:369
#, no-wrap
msgid "buffer file name"
msgstr "buffer file name"

#. type: cindex
#: original_texis/buffers.texi:370
#, no-wrap
msgid "file name of buffer"
msgstr "file name of buffer"

#. type: Plain text
#: original_texis/buffers.texi:378
msgid "The @dfn{buffer file name} is the name of the file that is visited in that buffer.  When a buffer is not visiting a file, its buffer file name is @code{nil}.  Most of the time, the buffer name is the same as the nondirectory part of the buffer file name, but the buffer file name and the buffer name are distinct and can be set independently.  @xref{Visiting Files}."
msgstr "@dfn{バッファーファイル名(buffer file name)}とは、そのバッファーにvisitされているファイルの名前です。バッファーがファイルをvisitしていなければ、バッファーファイル名は@code{nil}です。バッファー名は大抵はバッファーファイル名の非ディレクトリーパートと同じですが、バッファーファイル名とバッファー名は別物であり個別にセットすることができます。@ref{Visiting Files}を参照してください。"

#. type: defun
#: original_texis/buffers.texi:379
#, no-wrap
msgid "buffer-file-name &optional buffer"
msgstr "buffer-file-name &optional buffer"

#. type: defun
#: original_texis/buffers.texi:384
msgid "This function returns the absolute file name of the file that @var{buffer} is visiting.  If @var{buffer} is not visiting any file, @code{buffer-file-name} returns @code{nil}.  If @var{buffer} is not supplied, it defaults to the current buffer."
msgstr "この関数は@var{buffer}がvisitしているファイルの絶対ファイル名をリターンする。@var{buffer}がファイルをvisitしていなければ、@code{buffer-file-name}は@code{nil}をリターンする。@var{buffer}が与えられない場合のデフォルトはカレントバッファー。"

#. type: group
#: original_texis/buffers.texi:389
#, no-wrap
msgid ""
"(buffer-file-name (other-buffer))\n"
"     @result{} \"/usr/user/lewis/manual/files.texi\"\n"
msgstr ""
"(buffer-file-name (other-buffer))\n"
"     @result{} \"/usr/user/lewis/manual/files.texi\"\n"

#. type: defvar
#: original_texis/buffers.texi:393
#, no-wrap
msgid "buffer-file-name"
msgstr "buffer-file-name"

#. type: defvar
#: original_texis/buffers.texi:398
msgid "This buffer-local variable contains the name of the file being visited in the current buffer, or @code{nil} if it is not visiting a file.  It is a permanent local variable, unaffected by @code{kill-all-local-variables}."
msgstr "このバッファーローカル変数はカレントバッファーにvisitされているファイルの名前、ファイルをvisitしていなければ@code{nil}。これは永続的なローカル変数であり@code{kill-all-local-variables}の影響を受けない。"

#. type: group
#: original_texis/buffers.texi:403
#, no-wrap
msgid ""
"buffer-file-name\n"
"     @result{} \"/usr/user/lewis/manual/buffers.texi\"\n"
msgstr ""
"buffer-file-name\n"
"     @result{} \"/usr/user/lewis/manual/buffers.texi\"\n"

#. type: defvar
#: original_texis/buffers.texi:411
msgid "It is risky to change this variable's value without doing various other things.  Normally it is better to use @code{set-visited-file-name} (see below); some of the things done there, such as changing the buffer name, are not strictly necessary, but others are essential to avoid confusing Emacs."
msgstr "他のさまざまな事項を変更せずにこの変数を変更するのは危険である。通常は@code{set-visited-file-name}を使用するほうがよい(以下参照)。バッファー名の変更などのような、そこで行われることのいくつかは絶対必要という訳ではないが、その他の事項はEmacsが混乱するのを防ぐために必要不可欠である。"

#. type: defvar
#: original_texis/buffers.texi:413
#, no-wrap
msgid "buffer-file-truename"
msgstr "buffer-file-truename"

#. type: defvar
#: original_texis/buffers.texi:419
msgid "This buffer-local variable holds the abbreviated truename of the file visited in the current buffer, or @code{nil} if no file is visited.  It is a permanent local, unaffected by @code{kill-all-local-variables}.  @xref{Truenames}, and @ref{abbreviate-file-name}."
msgstr "このバッファーローカル変数はカレントバッファーにvisitされているファイルの省略された形式の実名(truename)、ファイルをvisitしていなければ@code{nil}を保持する。これは永続的にローカルであり@code{kill-all-local-variables}の影響を受けない。@xref{Truenames}と@ref{abbreviate-file-name}を参照のこと。"

#. type: defvar
#: original_texis/buffers.texi:421
#, no-wrap
msgid "buffer-file-number"
msgstr "buffer-file-number"

#. type: defvar
#: original_texis/buffers.texi:426
msgid "This buffer-local variable holds the file number and directory device number of the file visited in the current buffer, or @code{nil} if no file or a nonexistent file is visited.  It is a permanent local, unaffected by @code{kill-all-local-variables}."
msgstr "このバッファーローカル変数はカレントバッファーにvisitされているファイルのファイル番号(file number)とデバイス番号(device number)、ファイルをvisitしていなければ@code{nil}を保持する。これは永続的にローカルであり@code{kill-all-local-variables}の影響を受けない。"

#. type: defvar
#: original_texis/buffers.texi:432
msgid "The value is normally a list of the form @code{(@var{filenum} @var{devnum})}.  This pair of numbers uniquely identifies the file among all files accessible on the system.  See the function @code{file-attributes}, in @ref{File Attributes}, for more information about them."
msgstr "値は通常は@code{(@var{filenum} @var{devnum})}のような形式のリスト。この番号ペアはシステム上でアクセス可能なすべてのファイルの中からファイルを一意に識別する。より詳細な情報は@ref{File Attributes}の@code{file-attributes}を参照のこと。"

#. type: defvar
#: original_texis/buffers.texi:435
msgid "If @code{buffer-file-name} is the name of a symbolic link, then both numbers refer to the recursive target."
msgstr "@code{buffer-file-name}がシンボリックリンク名なら、いずれの番号も再帰的なターゲットを参照する。"

#. type: defun
#: original_texis/buffers.texi:437
#, no-wrap
msgid "get-file-buffer filename"
msgstr "get-file-buffer filename"

#. type: defun
#: original_texis/buffers.texi:445
msgid "This function returns the buffer visiting file @var{filename}.  If there is no such buffer, it returns @code{nil}.  The argument @var{filename}, which must be a string, is expanded (@pxref{File Name Expansion}), then compared against the visited file names of all live buffers.  Note that the buffer's @code{buffer-file-name} must match the expansion of @var{filename} exactly.  This function will not recognize other names for the same file."
msgstr "この関数はファイル@var{filename}をvisitしているバッファーをリターンする。そのようなバッファーが存在しなければ@code{nil}をリターンする。引数@var{filename}は文字列でなければならず、展開(@ref{File Name Expansion}を参照)された後に、killされていないすべてのバッファーがvisitしているファイル名と比較される。バッファーの@code{buffer-file-name}は@var{filename}の展開形と正確にマッチしなければならないことに注意。この関数は同じファイルにたいする他の名前は認識しないだろう。"

#. type: group
#: original_texis/buffers.texi:450
#, no-wrap
msgid ""
"(get-file-buffer \"buffers.texi\")\n"
"    @result{} #<buffer buffers.texi>\n"
msgstr ""
"(get-file-buffer \"buffers.texi\")\n"
"    @result{} #<buffer buffers.texi>\n"

#. type: defun
#: original_texis/buffers.texi:456
msgid "In unusual circumstances, there can be more than one buffer visiting the same file name.  In such cases, this function returns the first such buffer in the buffer list."
msgstr "特殊な状況下では、複数のバッファーが同じファイル名をvisitすることがあり得る。そのような場合には、この関数はバッファーリスト内の最初に該当するバッファーをリターンする。"

#. type: defun
#: original_texis/buffers.texi:458
#, no-wrap
msgid "find-buffer-visiting filename &optional predicate"
msgstr "find-buffer-visiting filename &optional predicate"

#. type: defun
#: original_texis/buffers.texi:468
msgid "This is like @code{get-file-buffer}, except that it can return any buffer visiting the file @emph{possibly under a different name}.  That is, the buffer's @code{buffer-file-name} does not need to match the expansion of @var{filename} exactly, it only needs to refer to the same file.  If @var{predicate} is non-@code{nil}, it should be a function of one argument, a buffer visiting @var{filename}.  The buffer is only considered a suitable return value if @var{predicate} returns non-@code{nil}.  If it can not find a suitable buffer to return, @code{find-buffer-visiting} returns @code{nil}."
msgstr "これは@code{get-file-buffer}と似ているが、そのファイルを@emph{違う名前}でvisitしているかもしれないすべてのバッファーをリターンする。つまりバッファーの@code{buffer-file-name}は@var{filename}の展開形式と正確にマッチする必要はなく、同じファイルを参照することだけが要求される。@var{predicate}が非@code{nil}なら、それは@var{filename}をvisitしているバッファーを1つの引数とする関数であること。そのバッファーにたいして@var{predicate}が非@code{nil}をリターンした場合のみ適切なリターン値と判断される。リターンすべき適切なバッファーが見つからなければ、@code{find-buffer-visiting}は@code{nil}をリターンする。"

#. type: deffn
#: original_texis/buffers.texi:470
#, no-wrap
msgid "Command set-visited-file-name filename &optional no-query along-with-file"
msgstr "Command set-visited-file-name filename &optional no-query along-with-file"

#. type: deffn
#: original_texis/buffers.texi:475
msgid "If @var{filename} is a non-empty string, this function changes the name of the file visited in the current buffer to @var{filename}.  (If the buffer had no visited file, this gives it one.)  The @emph{next time} the buffer is saved it will go in the newly-specified file."
msgstr "@var{filename}が非空文字列なら、この関数はカレントバッファーにvisitされているファイルの名前を@var{filename}に変更する(バッファーがファイルをvisitしていなければvisitするファイルとして@var{filename}を与える)。そのバッファーにたいする@emph{次回}の保存では、新たに指定されたファイルに保存されるだろう。"

#. type: deffn
#: original_texis/buffers.texi:481
msgid "This command marks the buffer as modified, since it does not (as far as Emacs knows) match the contents of @var{filename}, even if it matched the former visited file.  It also renames the buffer to correspond to the new file name, unless the new name is already in use."
msgstr "このコマンドは、たとえそのバッファーのコンテンツがその前にvisitされていたファイルとマッチしていても、(Emacsが関知するかぎり) @var{filename}のコンテンツとはマッチしないのでバッファーが変更されている(modified)とマークする。これはその名前がすでに使用されていなければ、新たなファイル名に対応してバッファーをリネームする。"

#. type: deffn
#: original_texis/buffers.texi:486
msgid "If @var{filename} is @code{nil} or the empty string, that stands for ``no visited file''.  In this case, @code{set-visited-file-name} marks the buffer as having no visited file, without changing the buffer's modified flag."
msgstr "@var{filename}が@code{nil}か空文字列なら、それは``visitされているファイルがない''ことを意味する。この場合には@code{set-visited-file-name}はバッファーの変更フラグを変更することなく、そのバッファーがファイルをvisitしていないとマークする。"

#. type: deffn
#: original_texis/buffers.texi:494
msgid "Normally, this function asks the user for confirmation if there already is a buffer visiting @var{filename}.  If @var{no-query} is non-@code{nil}, that prevents asking this question.  If there already is a buffer visiting @var{filename}, and the user confirms or @var{no-query} is non-@code{nil}, this function makes the new buffer name unique by appending a number inside of @samp{<@dots{}>} to @var{filename}."
msgstr "この関数は@var{filename}をvisitしているバッファーがすでに存在する場合は、通常はユーザーに確認を求める。しかし@var{no-query}が非@code{nil}ならこの質問を行わない。@var{filename}をvisitしているバッファーがすでに存在し、かつユーザーが承認するか@var{no-query}が非@code{nil}なら、この関数は中に数字が入った@samp{<@dots{}>}を@var{filename}に追加して新たなバッファーの名前を一意にする。"

#. type: deffn
#: original_texis/buffers.texi:503
msgid "If @var{along-with-file} is non-@code{nil}, that means to assume that the former visited file has been renamed to @var{filename}.  In this case, the command does not change the buffer's modified flag, nor the buffer's recorded last file modification time as reported by @code{visited-file-modtime} (@pxref{Modification Time}).  If @var{along-with-file} is @code{nil}, this function clears the recorded last file modification time, after which @code{visited-file-modtime} returns zero."
msgstr "@var{along-with-file}が非@code{nil}なら、それは前にvisitされていたファイルが@var{filename}にリネームされたと想定することを意味する。この場合、コマンドはバッファーの修正フラグを変更せず、そのバッファーの記録されている最終ファイル変更時刻を@code{visited-file-modtime}が報告する時刻(@ref{Modification Time}を参照)で変更することもしない。@var{along-with-file}が@code{nil}なら、この関数は@code{visited-file-modtime}が0をリターンした後に、記録済みの最終ファイル変更時刻をクリアーする。"

#. type: deffn
#: original_texis/buffers.texi:506
msgid "When the function @code{set-visited-file-name} is called interactively, it prompts for @var{filename} in the minibuffer."
msgstr "関数@code{set-visited-file-name}がinteractiveに呼び出されたときはミニバッファー内で@var{filename}の入力を求める。"

#. type: defvar
#: original_texis/buffers.texi:508
#, no-wrap
msgid "list-buffers-directory"
msgstr "list-buffers-directory"

#. type: defvar
#: original_texis/buffers.texi:512
msgid "This buffer-local variable specifies a string to display in a buffer listing where the visited file name would go, for buffers that don't have a visited file name.  Dired buffers use this variable."
msgstr "このバッファーローカル変数はvisitしているファイル名をもたないバッファーにたいして、バッファーリスト中のvisitしているファイル名を表示する場所に表示する文字列を指定する。Diredバッファーはこの変数を使用する。"

#. type: cindex
#: original_texis/buffers.texi:516
#, no-wrap
msgid "buffer modification"
msgstr "buffer modification"

#. type: cindex
#: original_texis/buffers.texi:517
#, no-wrap
msgid "modification flag (of buffer)"
msgstr "modification flag (of buffer)"

#. type: Plain text
#: original_texis/buffers.texi:526
msgid "Emacs keeps a flag called the @dfn{modified flag} for each buffer, to record whether you have changed the text of the buffer.  This flag is set to @code{t} whenever you alter the contents of the buffer, and cleared to @code{nil} when you save it.  Thus, the flag shows whether there are unsaved changes.  The flag value is normally shown in the mode line (@pxref{Mode Line Variables}), and controls saving (@pxref{Saving Buffers}) and auto-saving (@pxref{Auto-Saving})."
msgstr "Emacsは各バッファーにたいしてバッファーのテキストを変更したかどうかを記録するために、@dfn{変更フラグ(modified flag)}と呼ばれるフラグを管理しています。このフラグはバッファーのコンテンツを変更すると常に@code{t}にセットされ、バッファーを保存したとき@code{nil}にクリアーされます。したがってこのフラグは保存されていない変更があるかどうかを表します。フラグの値は通常はモードライン内(@ref{Mode Line Variables}を参照)に表示され、保存(@ref{Saving Buffers}を参照)と自動保存(@ref{Auto-Saving}を参照)を制御します。"

#. type: Plain text
#: original_texis/buffers.texi:531
msgid "Some Lisp programs set the flag explicitly.  For example, the function @code{set-visited-file-name} sets the flag to @code{t}, because the text does not match the newly-visited file, even if it is unchanged from the file formerly visited."
msgstr "いくつかのLispプログラムは、このフラグを明示的にセットします。たとえば、関数@code{set-visited-file-name}は、このフラグを@code{t}にセットします。なぜなら、たとえその前にvisitしていたファイルが変更されていなくても、テキストは新たにvisitされたファイルとマッチしないからです。"

#. type: Plain text
#: original_texis/buffers.texi:534
msgid "The functions that modify the contents of buffers are described in @ref{Text}."
msgstr "バッファーのコンテンツを変更する関数は@ref{Text}で説明されています。"

#. type: defun
#: original_texis/buffers.texi:535
#, no-wrap
msgid "buffer-modified-p &optional buffer"
msgstr "buffer-modified-p &optional buffer"

#. type: defun
#: original_texis/buffers.texi:540
msgid "This function returns @code{t} if the buffer @var{buffer} has been modified since it was last read in from a file or saved, or @code{nil} otherwise.  If @var{buffer} is not supplied, the current buffer is tested."
msgstr "この関数はバッファー@var{buffer}が最後にファイルから読み込まれたか、あるいは保存されてから変更されていれば@code{t}、それ以外では@code{nil}をリターンする。@var{buffer}が与えられなければカレントバッファーがテストされる。"

#. type: defun
#: original_texis/buffers.texi:542
#, no-wrap
msgid "set-buffer-modified-p flag"
msgstr "set-buffer-modified-p flag"

#. type: defun
#: original_texis/buffers.texi:545
msgid "This function marks the current buffer as modified if @var{flag} is non-@code{nil}, or as unmodified if the flag is @code{nil}."
msgstr "この関数は@var{flag}が非@code{nil}ならカレントバッファーを変更済みとして、@code{nil}なら未変更としてマークする。"

#. type: defun
#: original_texis/buffers.texi:549
msgid "Another effect of calling this function is to cause unconditional redisplay of the mode line for the current buffer.  In fact, the function @code{force-mode-line-update} works by doing this:"
msgstr "この関数を呼び出すことによる別の効果は、それがカレントバッファーのモードラインの無条件な再表示を引き起こすことである。実際のところ関数@code{force-mode-line-update}は以下を行うことにより機能する:"

#. type: group
#: original_texis/buffers.texi:553
#, no-wrap
msgid "(set-buffer-modified-p (buffer-modified-p))\n"
msgstr "(set-buffer-modified-p (buffer-modified-p))\n"

#. type: defun
#: original_texis/buffers.texi:557
#, no-wrap
msgid "restore-buffer-modified-p flag"
msgstr "restore-buffer-modified-p flag"

#. type: defun
#: original_texis/buffers.texi:560
msgid "Like @code{set-buffer-modified-p}, but does not force redisplay of mode lines."
msgstr "@code{set-buffer-modified-p}と同様だがモードラインにたいする強制的な再表示を行わない点が異なる。"

#. type: deffn
#: original_texis/buffers.texi:562
#, no-wrap
msgid "Command not-modified &optional arg"
msgstr "Command not-modified &optional arg"

#. type: deffn
#: original_texis/buffers.texi:567
msgid "This command marks the current buffer as unmodified, and not needing to be saved.  If @var{arg} is non-@code{nil}, it marks the buffer as modified, so that it will be saved at the next suitable occasion.  Interactively, @var{arg} is the prefix argument."
msgstr "このコマンドはカレントバッファーが変更されておらず保存する必要がないとマークする。@var{arg}が非@code{nil}なら変更されているとマークするので、次回の適切なタイミングでバッファーは保存されるだろう。interactiveに呼び出された場合には、@var{arg}はプレフィックス引数。"

#. type: deffn
#: original_texis/buffers.texi:570
msgid "Don't use this function in programs, since it prints a message in the echo area; use @code{set-buffer-modified-p} (above) instead."
msgstr "この関数はエコーエリア内にメッセージをプリントするのでプログラム内で使用してはならない。かわりに@code{set-buffer-modified-p} (上述)を使用すること。"

#. type: defun
#: original_texis/buffers.texi:572
#, no-wrap
msgid "buffer-modified-tick &optional buffer"
msgstr "buffer-modified-tick &optional buffer"

#. type: defun
#: original_texis/buffers.texi:577
msgid "This function returns @var{buffer}'s modification-count.  This is a counter that increments every time the buffer is modified.  If @var{buffer} is @code{nil} (or omitted), the current buffer is used.  The counter can wrap around occasionally."
msgstr "この関数は@var{buffer}の変更カウント(modification-count)をリターンする。これはバッファーが変更されるたびに増加されるカウンター。@var{buffer}が@code{nil} (または省略)ならカレントバッファーが使用される。このカウンター0にラップアラウンド(wrap around: 最初に戻る )され得る。"

#. type: defun
#: original_texis/buffers.texi:579
#, no-wrap
msgid "buffer-chars-modified-tick &optional buffer"
msgstr "buffer-chars-modified-tick &optional buffer"

#. type: defun
#: original_texis/buffers.texi:588
msgid "This function returns @var{buffer}'s character-change modification-count.  Changes to text properties leave this counter unchanged; however, each time text is inserted or removed from the buffer, the counter is reset to the value that would be returned by @code{buffer-modified-tick}.  By comparing the values returned by two @code{buffer-chars-modified-tick} calls, you can tell whether a character change occurred in that buffer in between the calls.  If @var{buffer} is @code{nil} (or omitted), the current buffer is used."
msgstr "この関数は@var{buffer}の文字変更に関わる変更カウントをリターンする。テキストプロパティを変更してもこのカウンターは変化しない。しかしそのバッファーにテキストが挿入または削除されるたびに、このカウンターは@code{buffer-modified-tick}によりリターンされるであろう値にリセットされる。@code{buffer-chars-modified-tick}を2回呼び出してリターンされる値を比較することにより、その呼び出しの間にバッファー内で文字変更があったかどうかを知ることができる。@var{buffer}が@code{nil} (または省略)ならカレントバッファーが使用される。"

#. type: section
#: original_texis/buffers.texi:591
#, no-wrap
msgid "Buffer Modification Time"
msgstr "Buffer Modification Time"

#. type: cindex
#: original_texis/buffers.texi:592
#, no-wrap
msgid "comparing file modification time"
msgstr "comparing file modification time"

#. type: cindex
#: original_texis/buffers.texi:593
#, no-wrap
msgid "modification time of buffer"
msgstr "modification time of buffer"

#. type: Plain text
#: original_texis/buffers.texi:602
msgid "Suppose that you visit a file and make changes in its buffer, and meanwhile the file itself is changed on disk.  At this point, saving the buffer would overwrite the changes in the file.  Occasionally this may be what you want, but usually it would lose valuable information.  Emacs therefore checks the file's modification time using the functions described below before saving the file.  (@xref{File Attributes}, for how to examine a file's modification time.)"
msgstr "あるファイルをvisitしてそのバッファー内で変更を行い、その一方ではディスク上でファイル自身が変更されたとします。この時点でバッファーを保存するとファイル内の変更は上書きされるでしょう。これが正に望んでいる動作のときもありますが、通常は有用な情報が失われてしまいます。したがってEmacsはファイルを保存する前に、以下で説明する関数を使用してファイルの変更時刻をチェックします(ファイルの変更時刻を調べる方法は@ref{File Attributes}を参照)。"

#. type: defun
#: original_texis/buffers.texi:603
#, no-wrap
msgid "verify-visited-file-modtime &optional buffer"
msgstr "verify-visited-file-modtime &optional buffer"

#. type: defun
#: original_texis/buffers.texi:609
msgid "This function compares what @var{buffer} (by default, the current-buffer) has recorded for the modification time of its visited file against the actual modification time of the file as recorded by the operating system.  The two should be the same unless some other process has written the file since Emacs visited or saved it."
msgstr "この関数は@var{buffer}(デフォルトはカレントバッファー)にvisitされているファイルにたいして記録されている変更時刻と、オペレーティングシステムにより記録された実際の変更時刻を比較する。これら2つの時刻はEmacsがそのファイルをvisitか保存して以降、他のプロセスにより書き込みがされていなければ等しくなるはずである。"

#. type: defun
#: original_texis/buffers.texi:615
msgid "The function returns @code{t} if the last actual modification time and Emacs's recorded modification time are the same, @code{nil} otherwise.  It also returns @code{t} if the buffer has no recorded last modification time, that is if @code{visited-file-modtime} would return zero."
msgstr "この関数は実際の最終変更時刻とEmacsが記録した変更時刻が同じなら@code{t}、それ以外は@code{nil}をリターンする。そのバッファーが記録済みの最終変更時刻をもたない、すなわち@code{visited-file-modtime}が0をリターンするような場合にも@code{t}をリターンする。"

#. type: defun
#: original_texis/buffers.texi:622
msgid "It always returns @code{t} for buffers that are not visiting a file, even if @code{visited-file-modtime} returns a non-zero value.  For instance, it always returns @code{t} for dired buffers.  It returns @code{t} for buffers that are visiting a file that does not exist and never existed, but @code{nil} for file-visiting buffers whose file has been deleted."
msgstr "これはたとえ@code{visited-file-modtime}が非0の値をリターンしたとしても、ファイルをvisitしていないバッファーにたいしては常に@code{t}をリターンする。たとえばDiredバッファーにたいして、この関数は常に@code{t}をリターンする。また存在せず、 以前に存在したこともなかったファイルをvisitするバッファーにたいして@code{t}をリターンするが、visitしているファイルが削除されたバッファーにたいしては@code{nil}をリターンする。"

#. type: defun
#: original_texis/buffers.texi:624
#, no-wrap
msgid "clear-visited-file-modtime"
msgstr "clear-visited-file-modtime"

#. type: defun
#: original_texis/buffers.texi:629
msgid "This function clears out the record of the last modification time of the file being visited by the current buffer.  As a result, the next attempt to save this buffer will not complain of a discrepancy in file modification times."
msgstr "この関数はカレントバッファーによりvisitされているファイルの最終変更時刻の記録をクリアーする。結果としてこのバッファーにを次回の保存ではファイルの変更時刻の食い違いは報告されなくなる。"

#. type: defun
#: original_texis/buffers.texi:633
msgid "This function is called in @code{set-visited-file-name} and other exceptional places where the usual test to avoid overwriting a changed file should not be done."
msgstr "この関数は@code{set-visited-file-name}、および変更済みファイルの上書きを防ぐための通常テストを行わない例外的な箇所で呼び出される。"

#. type: defun
#: original_texis/buffers.texi:635
#, no-wrap
msgid "visited-file-modtime"
msgstr "visited-file-modtime"

#. type: defun
#: original_texis/buffers.texi:641
msgid "This function returns the current buffer's recorded last file modification time, as a list of the form @code{(@var{high} @var{low} @var{microsec} @var{picosec})}.  (This is the same format that @code{file-attributes} uses to return time values; @pxref{File Attributes}.)"
msgstr "この関数はカレントバッファーにたいして記録された最終ファイル変更時刻を@code{(@var{high} @var{low} @var{microsec} @var{picosec})}のような形式のリストでリターンする(これは@code{file-attributes}が時刻値をリターンするために使用するフォーマットと同じ。@ref{File Attributes}を参照)。"

#. type: defun
#: original_texis/buffers.texi:649
msgid "If the buffer has no recorded last modification time, this function returns zero.  This case occurs, for instance, if the buffer is not visiting a file or if the time has been explicitly cleared by @code{clear-visited-file-modtime}.  Note, however, that @code{visited-file-modtime} returns a list for some non-file buffers too.  For instance, in a Dired buffer listing a directory, it returns the last modification time of that directory, as recorded by Dired."
msgstr "バッファーが最終変更時刻の記録をもたなければこの関数は0をリターンする。これが発生するのは、たとえばバッファーがファイルをvisitしていなかったり、@code{clear-visited-file-modtime}で最終変更時刻が明示的にクリアーされた場合。しかし@code{visited-file-modtime}は、いくつかの非ファイルバッファーにたいするリストをリターンすることに注意。たとえばディレクトリーをリストするDiredバッファーでは、Diredが記録するそのディレクトリーの最終変更時刻がリターンされる。"

#. type: defun
#: original_texis/buffers.texi:651
msgid "If the buffer is not visiting a file, this function returns @minus{}1."
msgstr "バッファーがファイルをvisitしていなければ、この関数は@minus{}1をリターンする。"

#. type: defun
#: original_texis/buffers.texi:653
#, no-wrap
msgid "set-visited-file-modtime &optional time"
msgstr "set-visited-file-modtime &optional time"

#. type: defun
#: original_texis/buffers.texi:658
msgid "This function updates the buffer's record of the last modification time of the visited file, to the value specified by @var{time} if @var{time} is not @code{nil}, and otherwise to the last modification time of the visited file."
msgstr "この関数はバッファーがvisitしているファイルの最終変更時刻の記録を、@var{time}が非@code{nil}なら@var{time}、それ以外はvisitしているファイルの最終変更時刻に更新する。"

#. type: defun
#: original_texis/buffers.texi:663
msgid "If @var{time} is neither @code{nil} nor an integer flag returned by @code{visited-file-modtime}, it should have the form @code{(@var{high} @var{low} @var{microsec} @var{picosec})}, the format used by @code{current-time} (@pxref{Time of Day})."
msgstr "@var{time}が@code{nil}や@code{visited-file-modtime}がリターンする整数フラグでなければ、それは@code{current-time}で使用される形式@code{(@var{high} @var{low} @var{microsec} @var{picosec})}というフォーマットであること(@ref{Time of Day}を参照)。"

#. type: defun
#: original_texis/buffers.texi:667
msgid "This function is useful if the buffer was not read from the file normally, or if the file itself has been changed for some known benign reason."
msgstr "この関数はバッファーが通常のようにファイルから読み取られたものでない場合や、ファイル自身が害のない既知の理由により変更されている場合に有用。"

#. type: defun
#: original_texis/buffers.texi:669
#, no-wrap
msgid "ask-user-about-supersession-threat filename"
msgstr "ask-user-about-supersession-threat filename"

#. type: defun
#: original_texis/buffers.texi:676
msgid "This function is used to ask a user how to proceed after an attempt to modify a buffer visiting file @var{filename} when the file is newer than the buffer text.  Emacs detects this because the modification time of the file on disk is newer than the last save-time and its contents have changed.  This means some other program has probably altered the file."
msgstr "これはvisitしているファイル@var{filename}がバッファーのテキストより新しいときにバッファーの変更を試みた後に、ユーザーに処理方法を尋ねるために使用する関数。Emacsはディスク上のファイルの変更時刻がバッファーを最後に保存した時刻新しいかどうか、バッファーのコンテンツが変更されているかによりこれを検知する。これはおそらく他のプログラムがファイルを変更したことを意味する。"

#. type: kindex
#: original_texis/buffers.texi:677
#, no-wrap
msgid "file-supersession"
msgstr "file-supersession"

#. type: defun
#: original_texis/buffers.texi:682
msgid "Depending on the user's answer, the function may return normally, in which case the modification of the buffer proceeds, or it may signal a @code{file-supersession} error with data @code{(@var{filename})}, in which case the proposed buffer modification is not allowed."
msgstr "この関数が正常にリターンするかどうかは、ユーザーの応答に依存する。関数はバッファーの変更が処理された場合は正常にリターンし、バッファーの変更が許可されなかった場合はデータ@code{(@var{filename})}とともにエラー@code{file-supersession}をシグナルする。"

#. type: defun
#: original_texis/buffers.texi:686
msgid "This function is called automatically by Emacs on the proper occasions.  It exists so you can customize Emacs by redefining it.  See the file @file{userlock.el} for the standard definition."
msgstr "この関数は適切なタイミングでEmacsにより自動的に呼び出される。これは再定義することによりEmacsをカスタマイズ可能にするために存在する。標準的な定義はファイル@file{userlock.el}を参照のこと。"

#. type: defun
#: original_texis/buffers.texi:688
msgid "See also the file locking mechanism in @ref{File Locks}."
msgstr "@ref{File Locks}のファイルロックのメカニズムも参照されたい。"

#. type: section
#: original_texis/buffers.texi:691
#, no-wrap
msgid "Read-Only Buffers"
msgstr "Read-Only Buffers"

#. type: cindex
#: original_texis/buffers.texi:692
#, no-wrap
msgid "read-only buffer"
msgstr "read-only buffer"

#. type: cindex
#: original_texis/buffers.texi:693
#, no-wrap
msgid "buffer, read-only"
msgstr "buffer, read-only"

#. type: Plain text
#: original_texis/buffers.texi:698
msgid "If a buffer is @dfn{read-only}, then you cannot change its contents, although you may change your view of the contents by scrolling and narrowing."
msgstr "あるバッファーが@dfn{読み取り専用(read-only)}の場合には、たとえスクロールやナローイングによってファイルのコンテンツのビューを変更しても、そのコンテンツを変更することはできません。"

#. type: Plain text
#: original_texis/buffers.texi:700
msgid "Read-only buffers are used in two kinds of situations:"
msgstr "読み取り専用バッファーは、2つのタイプの状況において使用されます:"

#. type: itemize
#: original_texis/buffers.texi:704
msgid "A buffer visiting a write-protected file is normally read-only."
msgstr "書き込み保護されたファイルをvisitするバッファーは、通常は読み取り専用になる。"

#. type: itemize
#: original_texis/buffers.texi:709
msgid "Here, the purpose is to inform the user that editing the buffer with the aim of saving it in the file may be futile or undesirable.  The user who wants to change the buffer text despite this can do so after clearing the read-only flag with @kbd{C-x C-q}."
msgstr "ここでの目的はユーザーにたいしてそのファイルへの保存を意図したバッファーの編集が無益、または望ましくないかもしれないことを伝えることである。それにも関わらずバッファーのテキストの変更を望むユーザーは、@kbd{C-x C-q}で読み取り専用フラグをクリアーした後にこれを行うことができる。"

#. type: itemize
#: original_texis/buffers.texi:713
msgid "Modes such as Dired and Rmail make buffers read-only when altering the contents with the usual editing commands would probably be a mistake."
msgstr "DiredやRmailのようなモードは、通常の編集コマンドによるコンテンツの変更がおそらく間違いであるようなときにバッファーを読み取り専用にする。"

#. type: itemize
#: original_texis/buffers.texi:717
msgid "The special commands of these modes bind @code{buffer-read-only} to @code{nil} (with @code{let}) or bind @code{inhibit-read-only} to @code{t} around the places where they themselves change the text."
msgstr "このようなモードのスペシャルコマンドは、@code{buffer-read-only}を(@code{let}によって)@code{nil}にバインドしたり、テキストを変更する箇所では@code{inhibit-read-only}を@code{t}にバインドする。"

#. type: defvar
#: original_texis/buffers.texi:719
#, no-wrap
msgid "buffer-read-only"
msgstr "buffer-read-only"

#. type: defvar
#: original_texis/buffers.texi:724
msgid "This buffer-local variable specifies whether the buffer is read-only.  The buffer is read-only if this variable is non-@code{nil}.  However, characters that have the @code{inhibit-read-only} text property can still be modified.  @xref{Special Properties, inhibit-read-only}."
msgstr "このバッファーローカル変数は、そのバッファーが読み取り専用かどうかを指定する。この変数が非@code{nil}ならそのバッファーは読み取り専用。しかしテキストプロパティ@code{inhibit-read-only}をもつ文字は依然として編集可能。@ref{Special Properties, inhibit-read-only}を参照のこと。"

#. type: defvar
#: original_texis/buffers.texi:726
#, no-wrap
msgid "inhibit-read-only"
msgstr "inhibit-read-only"

#. type: defvar
#: original_texis/buffers.texi:732
msgid "If this variable is non-@code{nil}, then read-only buffers and, depending on the actual value, some or all read-only characters may be modified.  Read-only characters in a buffer are those that have a non-@code{nil} @code{read-only} text property.  @xref{Special Properties}, for more information about text properties."
msgstr "この変数が非@code{nil}なら、読み取り専用バッファー、およびその実際の値に依存して、一部もしくはすべての読み取り専用文字が変更されている。バッファー内の読み取り専用文字とはテキストプロパティ@code{read-only}が非@code{nil}の文字。テキストプロパティについての詳細は@ref{Special Properties}を参照のこと。"

#. type: defvar
#: original_texis/buffers.texi:737
msgid "If @code{inhibit-read-only} is @code{t}, all @code{read-only} character properties have no effect.  If @code{inhibit-read-only} is a list, then @code{read-only} character properties have no effect if they are members of the list (comparison is done with @code{eq})."
msgstr "@code{inhibit-read-only}が@code{t}なら、すべての@code{read-only}文字プロパティは効果がなくなる。@code{inhibit-read-only}がリストの場合には、@code{read-only}文字プロパティがリストのメンバーなら効果がなくなる(比較は@code{eq}で行われる)。"

#. type: deffn
#: original_texis/buffers.texi:739
#, no-wrap
msgid "Command read-only-mode &optional arg"
msgstr "Command read-only-mode &optional arg"

#. type: deffn
#: original_texis/buffers.texi:745
msgid "This is the mode command for Read Only minor mode, a buffer-local minor mode.  When the mode is enabled, @code{buffer-read-only} is non-@code{nil} in the buffer; when disabled, @code{buffer-read-only} is @code{nil} in the buffer.  The calling convention is the same as for other minor mode commands (@pxref{Minor Mode Conventions})."
msgstr "これはバッファーローカルなマイナーモードRead Onlyモードにたいするモードコマンド。このモードが有効なときは、そのバッファーの@code{buffer-read-only}は非@code{nil}。無効なときは、そのバッファーの@code{buffer-read-only}は@code{nil}。呼び出す際の慣習は、他のマイナーモードコマンドの慣習と同じ(@ref{Minor Mode Conventions}を参照)。"

#. type: deffn
#: original_texis/buffers.texi:752
msgid "This minor mode mainly serves as a wrapper for @code{buffer-read-only}; unlike most minor modes, there is no separate @code{read-only-mode} variable.  Even when Read Only mode is disabled, characters with non-@code{nil} @code{read-only} text properties remain read-only.  To temporarily ignore all read-only states, bind @code{inhibit-read-only}, as described above."
msgstr "このマイナーモードは他のマイナーモードとは異なり、主に@code{buffer-read-only}にたいするラッパーの役目を果たし、別個に@code{read-only-mode}変数は存在しない。Read Onlyモードが無効なときでも、@code{read-only}テキストプロパティが非@code{nil}の文字は読み取り専用のままである。一時的にすべての読み取り専用ステータスを無視するには上述の@code{inhibit-read-only}をバインドすること。"

#. type: deffn
#: original_texis/buffers.texi:758
msgid "When enabling Read Only mode, this mode command also enables View mode if the option @code{view-read-only} is non-@code{nil}.  @xref{Misc Buffer,,Miscellaneous Buffer Operations, emacs, The GNU Emacs Manual}.  When disabling Read Only mode, it disables View mode if View mode was enabled."
msgstr "Read Onlyモードを有効にする際、このモードコマンドはオプション@code{view-read-only}が非@code{nil}ならViewモードも有効にする。@ref{Misc Buffer,,Miscellaneous Buffer Operations, emacs, The GNU Emacs Manual}を参照のこと。Read Onlyモードを無効にする際に、もしもViewモードが有効ならViewモードも無効にする。"

#. type: defun
#: original_texis/buffers.texi:760
#, no-wrap
msgid "barf-if-buffer-read-only &optional position"
msgstr "barf-if-buffer-read-only &optional position"

#. type: defun
#: original_texis/buffers.texi:765
msgid "This function signals a @code{buffer-read-only} error if the current buffer is read-only.  If the text at @var{position} (which defaults to point) has the @code{inhibit-read-only} text property set, the error will not be raised."
msgstr "この関数はカレントバッファーが読み取り専用なら@code{buffer-read-only}エラーをシグナルする。@var{position} (デフォルトはポイント位置)のテキストのテキストプロパティ@code{inhibit-read-only}がセットされていればエラーは発生しないだろう。"

#. type: defun
#: original_texis/buffers.texi:768
msgid "@xref{Using Interactive}, for another way to signal an error if the current buffer is read-only."
msgstr "カレントバッファーが読み取り専用の場合にエラーをシグナルする他の方法については、@ref{Using Interactive}を参照のこと。"

#. type: section
#: original_texis/buffers.texi:771
#, no-wrap
msgid "The Buffer List"
msgstr "The Buffer List"

#. type: cindex
#: original_texis/buffers.texi:772
#, no-wrap
msgid "buffer list"
msgstr "buffer list"

#. type: cindex
#: original_texis/buffers.texi:773
#, no-wrap
msgid "listing all buffers"
msgstr "listing all buffers"

#. type: Plain text
#: original_texis/buffers.texi:780
msgid "The @dfn{buffer list} is a list of all live buffers.  The order of the buffers in this list is based primarily on how recently each buffer has been displayed in a window.  Several functions, notably @code{other-buffer}, use this ordering.  A buffer list displayed for the user also follows this order."
msgstr "@dfn{バッファーリスト(buffer list)}とは、すべての生きた(killされていない)バッファーのリストです。このリスト内のバッファーの順序は主に、それぞれのバッファーがウィンドウに表示されたのがどれほど最近なのかにもとづきます。いくつかの関数、特に@code{other-buffer}はこの順序を使用します。ユーザーに表示されるバッファーリストもこの順序にしたがいます。"

#. type: Plain text
#: original_texis/buffers.texi:789
msgid "Creating a buffer adds it to the end of the buffer list, and killing a buffer removes it from that list.  A buffer moves to the front of this list whenever it is chosen for display in a window (@pxref{Switching Buffers}) or a window displaying it is selected (@pxref{Selecting Windows}).  A buffer moves to the end of the list when it is buried (see @code{bury-buffer}, below).  There are no functions available to the Lisp programmer which directly manipulate the buffer list."
msgstr "バッファーを作成するとそれはバッファーリストの最後に追加され  バッファーをkillすることによってそのリストから削除されます。ウィンドウに表示するためにバッファーが選択されたとき(@ref{Switching Buffers}を参照)、あるいはバッファーを表示するウィンドウが選択されたとき(@ref{Selecting Windows}を参照)、そのバッファーは常にこのリストの先頭に移動します。バッファーがバリー(以下の@code{bury-buffer}を参照)されたときは、このリストの最後に移動します。バッファーリストを直接操作するために利用できるLispプログラマー向けの関数は存在しません。"

#. type: Plain text
#: original_texis/buffers.texi:797
msgid "In addition to the fundamental buffer list just described, Emacs maintains a local buffer list for each frame, in which the buffers that have been displayed (or had their windows selected) in that frame come first.  (This order is recorded in the frame's @code{buffer-list} frame parameter; see @ref{Buffer Parameters}.)  Buffers never displayed in that frame come afterward, ordered according to the fundamental buffer list."
msgstr "説明した基本バッファーリスト(fundamental buffer list)に加えて、Emacsはそれぞれのフレームにたいしてローカルバッファーリスト(local buffer list)を保守します。ローカルバッファーリストでは、そのフレーム内で表示されていた(または選択されたウィンドウの)バッファーが先頭になります(この順序はそのフレームのフレームパラメーター@code{buffer-list}に記録される。@ref{Buffer Parameters}を参照)。並び順は基本バッファーリストにならい、そのフレームでは表示されていないフレームは後になになります。。"

#. type: defun
#: original_texis/buffers.texi:798
#, no-wrap
msgid "buffer-list &optional frame"
msgstr "buffer-list &optional frame"

#. type: defun
#: original_texis/buffers.texi:802
msgid "This function returns the buffer list, including all buffers, even those whose names begin with a space.  The elements are actual buffers, not their names."
msgstr "この関数はすべてのバッファーを含むバッファーリストをリターンする(名前がスペースで始まるバッファーも含む)。リストの要素はバッファーの名前ではなく実際のバッファー。"

#. type: defun
#: original_texis/buffers.texi:807
msgid "If @var{frame} is a frame, this returns @var{frame}'s local buffer list.  If @var{frame} is @code{nil} or omitted, the fundamental buffer list is used: the buffers appear in order of most recent display or selection, regardless of which frames they were displayed on."
msgstr "@var{frame}がフレームなら、@var{frame}のローカルバッファーリストをリターンする。@var{frame}が@code{nil}か省略された場合は、基本バッファーリストが使用される。その場合には、そのバッファーを表示するフレームがどれかとは無関係に、もっとも最近に表示または選択されたバッファーの順になる。"

#. type: group
#: original_texis/buffers.texi:814
#, no-wrap
msgid ""
"(buffer-list)\n"
"     @result{} (#<buffer buffers.texi>\n"
"         #<buffer  *Minibuf-1*> #<buffer buffer.c>\n"
"         #<buffer *Help*> #<buffer TAGS>)\n"
msgstr ""
"(buffer-list)\n"
"     @result{} (#<buffer buffers.texi>\n"
"         #<buffer  *Minibuf-1*> #<buffer buffer.c>\n"
"         #<buffer *Help*> #<buffer TAGS>)\n"

#. type: group
#: original_texis/buffers.texi:822
#, no-wrap
msgid ""
";; @r{Note that the name of the minibuffer}\n"
";;   @r{begins with a space!}\n"
"(mapcar (function buffer-name) (buffer-list))\n"
"    @result{} (\"buffers.texi\" \" *Minibuf-1*\"\n"
"        \"buffer.c\" \"*Help*\" \"TAGS\")\n"
msgstr ""
";; @r{ミニバッファーの名前が}\n"
";;   @r{スペースで始まることに注意!}\n"
"(mapcar (function buffer-name) (buffer-list))\n"
"    @result{} (\"buffers.texi\" \" *Minibuf-1*\"\n"
"        \"buffer.c\" \"*Help*\" \"TAGS\")\n"

#. type: Plain text
#: original_texis/buffers.texi:830
msgid "The list returned by @code{buffer-list} is constructed specifically; it is not an internal Emacs data structure, and modifying it has no effect on the order of buffers.  If you want to change the order of buffers in the fundamental buffer list, here is an easy way:"
msgstr "@code{buffer-list}からリターンされるリストはそれ専用に構築されたリストであって、Emacsの内部的なデータ構造ではなく、それを変更してもバッファーの並び順に影響はありません。基本バッファーリスト内のバッファーの並び順を変更したい場合に簡単なのは以下の方法です:"

#. type: example
#: original_texis/buffers.texi:836
#, no-wrap
msgid ""
"(defun reorder-buffer-list (new-list)\n"
"  (while new-list\n"
"    (bury-buffer (car new-list))\n"
"    (setq new-list (cdr new-list))))\n"
msgstr ""
"(defun reorder-buffer-list (new-list)\n"
"  (while new-list\n"
"    (bury-buffer (car new-list))\n"
"    (setq new-list (cdr new-list))))\n"

#. type: Plain text
#: original_texis/buffers.texi:841
msgid "With this method, you can specify any order for the list, but there is no danger of losing a buffer or adding something that is not a valid live buffer."
msgstr "この方法により、バッファーを失ったり有効な生きたバッファー以外の何かを追加する危険を犯さずにリストに任意の並び順を指定できます。"

#. type: Plain text
#: original_texis/buffers.texi:845
msgid "To change the order or value of a specific frame's buffer list, set that frame's @code{buffer-list} parameter with @code{modify-frame-parameters} (@pxref{Parameter Access})."
msgstr "特定のフレームのバッファーリストの並び順や値を変更するには、@code{modify-frame-parameters}でそのフレームの@code{buffer-list}パラメーターをセットしてください(@ref{Parameter Access}を参照)。"

#. type: defun
#: original_texis/buffers.texi:846
#, no-wrap
msgid "other-buffer &optional buffer visible-ok frame"
msgstr "other-buffer &optional buffer visible-ok frame"

#. type: defun
#: original_texis/buffers.texi:852
msgid "This function returns the first buffer in the buffer list other than @var{buffer}.  Usually, this is the buffer appearing in the most recently selected window (in frame @var{frame} or else the selected frame, @pxref{Input Focus}), aside from @var{buffer}.  Buffers whose names start with a space are not considered at all."
msgstr "この関数はバッファーリスト中で@var{buffer}以外の最初のバッファーをリターンする。これは通常は選択されたウィンドウ(フレーム@var{frame}、または選択されたフレーム(@ref{Input Focus}を参照)にもっとも最近表示された@var{buffer}以外のバッファーである。名前がスペースで始まるバッファーは考慮されない。"

#. type: defun
#: original_texis/buffers.texi:857
msgid "If @var{buffer} is not supplied (or if it is not a live buffer), then @code{other-buffer} returns the first buffer in the selected frame's local buffer list.  (If @var{frame} is non-@code{nil}, it returns the first buffer in @var{frame}'s local buffer list instead.)"
msgstr "@var{buffer}が与えられない(または生きたバッファーでない)場合には、@code{other-buffer}は選択されたフレームのローカルバッファーリスト内の最初のバッファーをリターンする(@var{frame}が非@code{nil}なら@var{frame}のローカルバッファーリスト内の最初のバッファーをリターンする)。"

#. type: defun
#: original_texis/buffers.texi:862
msgid "If @var{frame} has a non-@code{nil} @code{buffer-predicate} parameter, then @code{other-buffer} uses that predicate to decide which buffers to consider.  It calls the predicate once for each buffer, and if the value is @code{nil}, that buffer is ignored.  @xref{Buffer Parameters}."
msgstr "@var{frame}が非@code{nil}の@code{buffer-predicate}パラメーターをもつ場合には、どのバッファーを考慮すべきかを決定するために@code{other-buffer}はその述語を使用する。これはそれぞれのバッファーごとにその述語を一度呼び出して、値が@code{nil}ならそのバッファーは無視される。@ref{Buffer Parameters}を参照のこと。"

#. type: defun
#: original_texis/buffers.texi:868
msgid "If @var{visible-ok} is @code{nil}, @code{other-buffer} avoids returning a buffer visible in any window on any visible frame, except as a last resort.  If @var{visible-ok} is non-@code{nil}, then it does not matter whether a buffer is displayed somewhere or not."
msgstr "@var{visible-ok}が@code{nil}なら@code{other-buffer}はやむを得ない場合を除き、任意の可視のフレーム上のウィンドウ内で可視のバッファーをリターンすることを避ける。@var{visible-ok}が非@code{nil}なら、バッファーがどこかで表示されているかどうかは問題にしない。"

#. type: defun
#: original_texis/buffers.texi:871
msgid "If no suitable buffer exists, the buffer @file{*scratch*} is returned (and created, if necessary)."
msgstr "適切なバッファーが存在しなければ、バッファー@file{*scratch*}を(必要なら作成して)リターンする。"

#. type: defun
#: original_texis/buffers.texi:873
#, no-wrap
msgid "last-buffer &optional buffer visible-ok frame"
msgstr "last-buffer &optional buffer visible-ok frame"

#. type: defun
#: original_texis/buffers.texi:877
msgid "This function returns the last buffer in @var{frame}'s buffer list other than @var{buffer}.  If @var{frame} is omitted or @code{nil}, it uses the selected frame's buffer list."
msgstr "この関数は@var{frame}のバッファーリスト内から@var{buffer}以外の最後のバッファーをリターンする。@var{frame}が省略または@code{nil}なら選択されたフレームのバッファーリストを使用する。"

#. type: defun
#: original_texis/buffers.texi:881
msgid "The argument @var{visible-ok} is handled as with @code{other-buffer}, see above.  If no suitable buffer can be found, the buffer @file{*scratch*} is returned."
msgstr "引数@var{visible-ok}は上述した@code{other-buffer}と同様に扱われる。適切なバッファーを見つけられなければバッファー@file{*scratch*}がリターンされる。"

#. type: deffn
#: original_texis/buffers.texi:883
#, no-wrap
msgid "Command bury-buffer &optional buffer-or-name"
msgstr "Command bury-buffer &optional buffer-or-name"

#. type: deffn
#: original_texis/buffers.texi:889
msgid "This command puts @var{buffer-or-name} at the end of the buffer list, without changing the order of any of the other buffers on the list.  This buffer therefore becomes the least desirable candidate for @code{other-buffer} to return.  The argument can be either a buffer itself or the name of one."
msgstr "このコマンドはバッファーリスト内の他のバッファーの並び順を変更することなく、@var{buffer-or-name}をバッファーリストの最後に配置する。つまりこのバッファーは@code{other-buffer}がリターンする候補でもっとも期待度が低くなる。引数はバッファー自身かバッファーの名前を指定できる。"

#. type: deffn
#: original_texis/buffers.texi:896
msgid "This function operates on each frame's @code{buffer-list} parameter as well as the fundamental buffer list; therefore, the buffer that you bury will come last in the value of @code{(buffer-list @var{frame})} and in the value of @code{(buffer-list)}.  In addition, it also puts the buffer at the end of the list of buffers of the selected window (@pxref{Window History}) provided it is shown in that window."
msgstr "この関数は基本バッファーリストと同様に、それぞれのフレームの@code{buffer-list}パラメーターを操作する。したがってバリー(bury: 埋める、隠す)したバッファーは@code{(buffer-list @var{frame})}と@code{(buffer-list)}の値の最後に置かれるだろう。さらにバッファーが選択されたウィンドウに表示されていれば、ウィンドウのバッファーリストの最後にバッファーを置くことも行う(@ref{Window History}を参照)。"

#. type: deffn
#: original_texis/buffers.texi:909
msgid "If @var{buffer-or-name} is @code{nil} or omitted, this means to bury the current buffer.  In addition, if the current buffer is displayed in the selected window, this makes sure that the window is either deleted or another buffer is shown in it.  More precisely, if the selected window is dedicated (@pxref{Dedicated Windows}) and there are other windows on its frame, the window is deleted.  If it is the only window on its frame and that frame is not the only frame on its terminal, the frame is dismissed by calling the function specified by @code{frame-auto-hide-function} (@pxref{Quitting Windows}).  Otherwise, it calls @code{switch-to-prev-buffer} (@pxref{Window History}) to show another buffer in that window.  If @var{buffer-or-name} is displayed in some other window, it remains displayed there."
msgstr "@var{buffer-or-name}が@code{nil}または省略された場合には、カレントバッファーをバリーすることを意味する。加えてカレントバッファーが選択されたウィンドウに表示されていれば、そのウィンドウを削除するか他のバッファーを表示する。より正確には選択されたウィンドウが専用(dedicated)のウィンドウ(@pxref{Dedicated Windows})であり、かつそのフレーム上に他のウィンドウが存在する場合には専用ウィンドウは削除される。それがフレーム上で唯一のウィンドウであり、かつそのフレームが端末上で唯一のフレームでなければ、そのフレームは@code{frame-auto-hide-function}で指定される関数を呼び出すことにより開放される(@ref{Quitting Windows}を参照)。それ以外の場合はに、他のバッファーをそのウィンドウ内に表示するために@code{switch-to-prev-buffer}を呼び出す(@ref{Window History}を参照)。@var{buffer-or-name}が他のウィンドウで表示されていれば、そのまま表示され続ける。"

#. type: deffn
#: original_texis/buffers.texi:912
msgid "To replace a buffer in all the windows that display it, use @code{replace-buffer-in-windows}, @xref{Buffers and Windows}."
msgstr "あるバッファーにたいして、それを表示するすべてのウィンドウでバッファーを置き換えるには@code{replace-buffer-in-windows}を使用する。@ref{Buffers and Windows}を参照のこと。"

#. type: deffn
#: original_texis/buffers.texi:914
#, no-wrap
msgid "Command unbury-buffer"
msgstr "Command unbury-buffer"

#. type: deffn
#: original_texis/buffers.texi:920
msgid "This command switches to the last buffer in the local buffer list of the selected frame.  More precisely, it calls the function @code{switch-to-buffer} (@pxref{Switching Buffers}), to display the buffer returned by @code{last-buffer} (see above), in the selected window."
msgstr "このコマンドは選択されたフレームのローカルバッファーリストの最後のバッファーに切り替える。より正確には選択されたウィンドウ内で、@code{last-buffer} (上記参照)がリターンするバッファーを表示するために関数@code{switch-to-buffer}を呼び出す(@ref{Switching Buffers}を参照)。"

#. type: defvar
#: original_texis/buffers.texi:922
#, no-wrap
msgid "buffer-list-update-hook"
msgstr "buffer-list-update-hook"

#. type: defvar
#: original_texis/buffers.texi:928
msgid "This is a normal hook run whenever the buffer list changes.  Functions (implicitly) running this hook are @code{get-buffer-create} (@pxref{Creating Buffers}), @code{rename-buffer} (@pxref{Buffer Names}), @code{kill-buffer} (@pxref{Killing Buffers}), @code{bury-buffer} (see above) and @code{select-window} (@pxref{Selecting Windows})."
msgstr "これはバッファーリストが変更されたときに常に実行されるノーマルフック。(暗黙に)このフックを実行する関数は@code{get-buffer-create} (@ref{Creating Buffers}を参照)、@code{rename-buffer} (@ref{Buffer Names}を参照)、@code{kill-buffer} (@ref{Killing Buffers}を参照)、@code{bury-buffer} (上記参照)、@code{select-window} (@ref{Selecting Windows}を参照)。"

#. type: cindex
#: original_texis/buffers.texi:932
#, no-wrap
msgid "creating buffers"
msgstr "creating buffers"

#. type: cindex
#: original_texis/buffers.texi:933
#, no-wrap
msgid "buffers, creating"
msgstr "buffers, creating"

#. type: Plain text
#: original_texis/buffers.texi:939
msgid "This section describes the two primitives for creating buffers.  @code{get-buffer-create} creates a buffer if it finds no existing buffer with the specified name; @code{generate-new-buffer} always creates a new buffer and gives it a unique name."
msgstr "このセクションではバッファーを作成する2つのプリミティブについて説明します。@code{get-buffer-create}は指定された名前の既存バッファーが見つからなければ作成します。@code{generate-new-buffer}は常に新たにバッファーを作成してそれに一意な名前を与えます。"

#. type: Plain text
#: original_texis/buffers.texi:944
msgid "Other functions you can use to create buffers include @code{with-output-to-temp-buffer} (@pxref{Temporary Displays}) and @code{create-file-buffer} (@pxref{Visiting Files}).  Starting a subprocess can also create a buffer (@pxref{Processes})."
msgstr "バッファーを作成するために使用できる他の関数には@code{with-output-to-temp-buffer} (@ref{Temporary Displays}を参照)、および@code{create-file-buffer} (@ref{Visiting Files}を参照)が含まれます。サブプロセスの開始によってもバッファーを作成することができます(@ref{Processes}を参照)。"

#. type: defun
#: original_texis/buffers.texi:945
#, no-wrap
msgid "get-buffer-create buffer-or-name"
msgstr "get-buffer-create buffer-or-name"

#. type: defun
#: original_texis/buffers.texi:949
msgid "This function returns a buffer named @var{buffer-or-name}.  The buffer returned does not become the current buffer---this function does not change which buffer is current."
msgstr "この関数は@var{buffer-or-name}という名前のバッファーをリターンする。リターンされたバッファーはカレントにならない --- この関数はカレントがどのバッファーであるかを変更しない。"

#. type: defun
#: original_texis/buffers.texi:955
msgid "@var{buffer-or-name} must be either a string or an existing buffer.  If it is a string and a live buffer with that name already exists, @code{get-buffer-create} returns that buffer.  If no such buffer exists, it creates a new buffer.  If @var{buffer-or-name} is a buffer instead of a string, it is returned as given, even if it is dead."
msgstr "@var{buffer-or-name}は文字列、または既存バッファーのいずれかでなければならない。これが文字列で、かつ既存の生きたバッファーの名前なら、@code{get-buffer-create}はそのバッファーをリターンする。そのようなバッファーが存在しなければ、新たにバッファーを作成する。@var{buffer-or-name}が文字列ではなくバッファーなら、たとえそのバッファーが生きていなくても与えられたバッファーをリターンする。"

#. type: group
#: original_texis/buffers.texi:960
#, no-wrap
msgid ""
"(get-buffer-create \"foo\")\n"
"     @result{} #<buffer foo>\n"
msgstr ""
"(get-buffer-create \"foo\")\n"
"     @result{} #<buffer foo>\n"

#. type: defun
#: original_texis/buffers.texi:967
msgid "The major mode for a newly created buffer is set to Fundamental mode.  (The default value of the variable @code{major-mode} is handled at a higher level; see @ref{Auto Major Mode}.)  If the name begins with a space, the buffer initially disables undo information recording (@pxref{Undo})."
msgstr "新たに作成されたバッファーにたいするメジャーモードはFundamentalモードにセットされる(変数@code{major-mode}のデフォルト値はより高いレベルで処理される。@ref{Auto Major Mode}を参照)。名前がスペースで始まる場合には、そのバッファーのアンドゥ情報の記録は初期状態では無効である(@ref{Undo}を参照)。"

#. type: defun
#: original_texis/buffers.texi:969
#, no-wrap
msgid "generate-new-buffer name"
msgstr "generate-new-buffer name"

#. type: defun
#: original_texis/buffers.texi:977
msgid "This function returns a newly created, empty buffer, but does not make it current.  The name of the buffer is generated by passing @var{name} to the function @code{generate-new-buffer-name} (@pxref{Buffer Names}).  Thus, if there is no buffer named @var{name}, then that is the name of the new buffer; if that name is in use, a suffix of the form @samp{<@var{n}>}, where @var{n} is an integer, is appended to @var{name}."
msgstr "この関数は新たに空のバッファーを作成してリターンするが、それをカレントにはしない。バッファーの名前は関数@code{generate-new-buffer-name}に@var{name}を渡すことにより生成される(@ref{Buffer Names}を参照)。つまり@var{name}という名前のバッファーが存在しなければ、それが新たなバッファーの名前になり、その名前が使用されていたら@samp{<@var{n}>}という形式のサフィックスが@var{name}に追加される。ここで@var{n}は整数。"

#. type: defun
#: original_texis/buffers.texi:979
msgid "An error is signaled if @var{name} is not a string."
msgstr "@var{name}が文字列でなければエラーがシグナルされる。"

#. type: group
#: original_texis/buffers.texi:984
#, no-wrap
msgid ""
"(generate-new-buffer \"bar\")\n"
"     @result{} #<buffer bar>\n"
msgstr ""
"(generate-new-buffer \"bar\")\n"
"     @result{} #<buffer bar>\n"

#. type: group
#: original_texis/buffers.texi:988
#, no-wrap
msgid ""
"(generate-new-buffer \"bar\")\n"
"     @result{} #<buffer bar<2>>\n"
msgstr ""
"(generate-new-buffer \"bar\")\n"
"     @result{} #<buffer bar<2>>\n"

#. type: group
#: original_texis/buffers.texi:992
#, no-wrap
msgid ""
"(generate-new-buffer \"bar\")\n"
"     @result{} #<buffer bar<3>>\n"
msgstr ""
"(generate-new-buffer \"bar\")\n"
"     @result{} #<buffer bar<3>>\n"

#. type: defun
#: original_texis/buffers.texi:998
msgid "The major mode for the new buffer is set to Fundamental mode.  The default value of the variable @code{major-mode} is handled at a higher level.  @xref{Auto Major Mode}."
msgstr "新たなバッファーにたいするメジャーモードはFundamentalモードにセットされる。変数@code{major-mode}のデフォルト値は、より高いレベルで処理される。@ref{Auto Major Mode}を参照のこと。"

#. type: cindex
#: original_texis/buffers.texi:1002
#, no-wrap
msgid "killing buffers"
msgstr "killing buffers"

#. type: cindex
#: original_texis/buffers.texi:1003
#, no-wrap
msgid "buffers, killing"
msgstr "buffers, killing"

#. type: Plain text
#: original_texis/buffers.texi:1007
msgid "@dfn{Killing a buffer} makes its name unknown to Emacs and makes the memory space it occupied available for other use."
msgstr "@dfn{バッファーのkill(Killing a buffer)}により、 そのバッファーの名前はEmacsにとって未知の名前となり、そのバッファーが占めていたメモリースペースは他の用途に使用できるようになります。"

#. type: Plain text
#: original_texis/buffers.texi:1013
msgid "The buffer object for the buffer that has been killed remains in existence as long as anything refers to it, but it is specially marked so that you cannot make it current or display it.  Killed buffers retain their identity, however; if you kill two distinct buffers, they remain distinct according to @code{eq} although both are dead."
msgstr "バッファーに対応するバッファーオブジェクトは、それを参照するものがあればkillされても存在し続けますが、それをカレントにしたり表示することができないように特別にマークされます。とはいえkillされたバッファーの同一性は保たれるので、2つの識別可能なバッファーをkillした場合には、たとえ両方死んだバッファーであっても@code{eq}による同一性は残ります。"

#. type: Plain text
#: original_texis/buffers.texi:1020
msgid "If you kill a buffer that is current or displayed in a window, Emacs automatically selects or displays some other buffer instead.  This means that killing a buffer can change the current buffer.  Therefore, when you kill a buffer, you should also take the precautions associated with changing the current buffer (unless you happen to know that the buffer being killed isn't current).  @xref{Current Buffer}."
msgstr "あるウィンドウ内においてカレント、あるいは表示されているバッファーをkillした場合、Emacsはかわりに他の何らかのバッファーを自動的に選択または表示します。これはバッファーのkillによってカレントバッファーが変更されることを意味します。したがってバッファーをkillする際には、(killされるバッファーがカレントを偶然知っていた場合を除き)カレントバッファーの変更に関しても事前に注意を払うべきです。@ref{Current Buffer}を参照してください。"

#. type: Plain text
#: original_texis/buffers.texi:1022
msgid "If you kill a buffer that is the base buffer of one or more indirect"
msgstr "1つ以上のインダイレクト"

#. type: iftex
#: original_texis/buffers.texi:1024
msgid "buffers,"
msgstr "バッファー"

#. type: ifnottex
#: original_texis/buffers.texi:1027
msgid "buffers (@pxref{Indirect Buffers}),"
msgstr "バッファー(@ref{Indirect Buffers}を参照)"

#. type: Plain text
#: original_texis/buffers.texi:1029
msgid "the indirect buffers are automatically killed as well."
msgstr "のベースとなるバッファーをkillした場合には、同様にインダイレクトバッファーも自動的にkillされます。"

#. type: cindex
#: original_texis/buffers.texi:1030
#, no-wrap
msgid "live buffer"
msgstr "live buffer"

#. type: Plain text
#: original_texis/buffers.texi:1035
msgid "The @code{buffer-name} of a buffer is @code{nil} if, and only if, the buffer is killed.  A buffer that has not been killed is called a @dfn{live} buffer.  To test whether a buffer is live or killed, use the function @code{buffer-live-p} (see below)."
msgstr "バッファーの@code{buffer-name}が@code{nil}の場合のみバッファーはkillされます。killされていないバッファーは@dfn{生きた(live)}バッファーと呼ばれます。あるバッファーにたいして、そのバッファーが生きているか、またはkillされているかを確認するには@code{buffer-live-p}を使用します(下記参照)。"

#. type: deffn
#: original_texis/buffers.texi:1036
#, no-wrap
msgid "Command kill-buffer &optional buffer-or-name"
msgstr "Command kill-buffer &optional buffer-or-name"

#. type: deffn
#: original_texis/buffers.texi:1041
msgid "This function kills the buffer @var{buffer-or-name}, freeing all its memory for other uses or to be returned to the operating system.  If @var{buffer-or-name} is @code{nil} or omitted, it kills the current buffer."
msgstr "この関数はバッファー@var{buffer-or-name}をkillして、そのバッファーのメモリーを他の用途のために開放、またはオペレーティングシステムに返却する。@var{buffer-or-name}が@code{nil}または省略された場合にはカレントバッファーをkillする。"

#. type: deffn
#: original_texis/buffers.texi:1045
msgid "Any processes that have this buffer as the @code{process-buffer} are sent the @code{SIGHUP} (hangup) signal, which normally causes them to terminate.  @xref{Signals to Processes}."
msgstr "そのバッファーを@code{process-buffer}として所有するすべてのプロセスには、通常はプロセスを終了させるシグナル@code{SIGHUP} (hangup)が送信される。@ref{Signals to Processes}を参照のこと。"

#. type: deffn
#: original_texis/buffers.texi:1051
msgid "If the buffer is visiting a file and contains unsaved changes, @code{kill-buffer} asks the user to confirm before the buffer is killed.  It does this even if not called interactively.  To prevent the request for confirmation, clear the modified flag before calling @code{kill-buffer}.  @xref{Buffer Modification}."
msgstr "バッファーがファイルをvisitしていて、かつ保存されていない変更が含まれる場合には、@code{kill-buffer}はバッファーをkillする前にユーザーにたいして確認を求める。これは@code{kill-buffer}がinteractiveに呼び出されていなくても行われる。この確認要求を抑制するには@code{kill-buffer}の呼び出し前に、変更フラグ(modified flag)をクリアーすればよい。@ref{Buffer Modification}を参照のこと。"

#. type: deffn
#: original_texis/buffers.texi:1054
msgid "This function calls @code{replace-buffer-in-windows} for cleaning up all windows currently displaying the buffer to be killed."
msgstr "killされるバッファーをカレントで表示しているすべてのバッファーをクリーンアップするために、この関数は@code{replace-buffer-in-windows}を呼び出す。"

#. type: deffn
#: original_texis/buffers.texi:1056
msgid "Killing a buffer that is already dead has no effect."
msgstr "すでに死んでいるバッファーをkillしても効果はない。"

#. type: deffn
#: original_texis/buffers.texi:1060
msgid "This function returns @code{t} if it actually killed the buffer.  It returns @code{nil} if the user refuses to confirm or if @var{buffer-or-name} was already dead."
msgstr "この関数は実際にバッファーをkillすると@code{t}をリターンする。ユーザーが確認で拒否を選択、または@var{buffer-or-name}がすでに死んでいる場合には@code{nil}をリターンする。"

#. type: smallexample
#: original_texis/buffers.texi:1065
#, no-wrap
msgid ""
"(kill-buffer \"foo.unchanged\")\n"
"     @result{} t\n"
"(kill-buffer \"foo.changed\")\n"
"\n"
msgstr ""
"(kill-buffer \"foo.unchanged\")\n"
"     @result{} t\n"
"(kill-buffer \"foo.changed\")\n"
"\n"

#. type: smallexample
#: original_texis/buffers.texi:1069
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"Buffer foo.changed modified; kill anyway? (yes or no) @kbd{yes}\n"
"---------- Buffer: Minibuffer ----------\n"
"\n"
msgstr ""
"---------- Buffer: Minibuffer ----------\n"
"Buffer foo.changed modified; kill anyway? (yes or no) @kbd{yes}\n"
"---------- Buffer: Minibuffer ----------\n"
"\n"

#. type: smallexample
#: original_texis/buffers.texi:1071
#, no-wrap
msgid "     @result{} t\n"
msgstr "     @result{} t\n"

#. type: defvar
#: original_texis/buffers.texi:1074
#, no-wrap
msgid "kill-buffer-query-functions"
msgstr "kill-buffer-query-functions"

#. type: defvar
#: original_texis/buffers.texi:1081
msgid "Before confirming unsaved changes, @code{kill-buffer} calls the functions in the list @code{kill-buffer-query-functions}, in order of appearance, with no arguments.  The buffer being killed is the current buffer when they are called.  The idea of this feature is that these functions will ask for confirmation from the user.  If any of them returns @code{nil}, @code{kill-buffer} spares the buffer's life."
msgstr "保存されていない変更について確認を求める前に、@code{kill-buffer}はリスト@code{kill-buffer-query-functions}内の関数を出現順に引数なしで呼び出す。それらが呼び出される際にはkillされるバッファーがカレントになる。この機能はこれらの関数がユーザーに確認を求めるというアイデアが元となっている。これらの関数のいずれかが@code{nil}をリターンしたら、@code{kill-buffer}はそのバッファーを殺さない。"

#. type: defvar
#: original_texis/buffers.texi:1083
#, no-wrap
msgid "kill-buffer-hook"
msgstr "kill-buffer-hook"

#. type: defvar
#: original_texis/buffers.texi:1089
msgid "This is a normal hook run by @code{kill-buffer} after asking all the questions it is going to ask, just before actually killing the buffer.  The buffer to be killed is current when the hook functions run.  @xref{Hooks}.  This variable is a permanent local, so its local binding is not cleared by changing major modes."
msgstr "これは尋ねることになっている質問をすべて終えた後、実際にバッファーをkillする直前に@code{kill-buffer}により実行されるノーマルフック。この変数は永続的にローカルであり、メジャーモードの変更により、そのローカルバインディングはクリアーされない。"

#. type: defopt
#: original_texis/buffers.texi:1091
#, no-wrap
msgid "buffer-offer-save"
msgstr "buffer-offer-save"

#. type: defopt
#: original_texis/buffers.texi:1102
msgid "This variable, if non-@code{nil} in a particular buffer, tells @code{save-buffers-kill-emacs} to offer to save that buffer, just as it offers to save file-visiting buffers.  If @code{save-some-buffers} is called with the second optional argument set to @code{t}, it will also offer to save the buffer.  Lastly, if this variable is set to the symbol @code{always}, both @code{save-buffers-kill-emacs} and @code{save-some-buffers} will always offer to save.  @xref{Definition of save-some-buffers}.  The variable @code{buffer-offer-save} automatically becomes buffer-local when set for any reason.  @xref{Buffer-Local Variables}."
msgstr "特定のバッファーにおいてこの変数が非@code{nil}なら、あたかもファイルをvisitするバッファーにたいして提案するときのように、バッファーの保存を提案するように@code{save-buffers-kill-emacs}に指示する。2つ目のオプション引数を@code{t}にセットして@code{save-some-buffers}を呼び出せばバッファーの保存も提案する。最後にこの変数をシンボル@code{always}にセットすると、@code{save-buffers-kill-emacs}と@code{save-some-buffers}は常に保存を提案する。@ref{Definition of save-some-buffers}を参照のこと。何らかの理由により変数@code{buffer-offer-save}がセットされると自動的にバッファーローカルになる。@ref{Buffer-Local Variables}を参照のこと。"

#. type: defvar
#: original_texis/buffers.texi:1104
#, no-wrap
msgid "buffer-save-without-query"
msgstr "buffer-save-without-query"

#. type: defvar
#: original_texis/buffers.texi:1109
msgid "This variable, if non-@code{nil} in a particular buffer, tells @code{save-buffers-kill-emacs} and @code{save-some-buffers} to save this buffer (if it's modified) without asking the user.  The variable automatically becomes buffer-local when set for any reason."
msgstr "特定のバッファーにおいてこの変数が非@code{nil}なら、@code{save-buffers-kill-emacs}と@code{save-some-buffers}は、(バッファーが変更されていれば)ユーザーに確認を求めることなくそのバッファーを保存する。何らかの理由によりこの変数をセットする際には自動的にバッファーローカルになる。"

#. type: defun
#: original_texis/buffers.texi:1111
#, no-wrap
msgid "buffer-live-p object"
msgstr "buffer-live-p object"

#. type: defun
#: original_texis/buffers.texi:1114
msgid "This function returns @code{t} if @var{object} is a live buffer (a buffer which has not been killed), @code{nil} otherwise."
msgstr "この関数は@var{object}が生きたバッファー(killされていないバッファー)なら@code{t}、それ以外は@code{nil}をリターンする。"

#. type: cindex
#: original_texis/buffers.texi:1118
#, no-wrap
msgid "indirect buffers"
msgstr "indirect buffers"

#. type: cindex
#: original_texis/buffers.texi:1119
#, no-wrap
msgid "base buffer"
msgstr "base buffer"

#. type: Plain text
#: original_texis/buffers.texi:1125
msgid "An @dfn{indirect buffer} shares the text of some other buffer, which is called the @dfn{base buffer} of the indirect buffer.  In some ways it is the analogue, for buffers, of a symbolic link among files.  The base buffer may not itself be an indirect buffer."
msgstr "@dfn{インダイレクトバッファー(indirect buffer: 間接バッファー)}とは、@dfn{ベースバッファー(base buffer)}と呼ばれる他のバッファーとテキストを共有します。いくつかの点においてインダイレクトバッファーはファイル間でのシンボリックリンクに類似しています。ベースバッファー自身はインダイレクトバッファーではない可能性があります。"

#. type: Plain text
#: original_texis/buffers.texi:1130
msgid "The text of the indirect buffer is always identical to the text of its base buffer; changes made by editing either one are visible immediately in the other.  This includes the text properties as well as the characters themselves."
msgstr "インダイレクトバッファーのテキストは、常にベースバッファーのテキストと同一です。編集により一方が変更されると、それは即座に他方のバッファーから可視になります。これには文字自体に加えてテキストプロパティも同様に含まれます。"

#. type: Plain text
#: original_texis/buffers.texi:1137
msgid "In all other respects, the indirect buffer and its base buffer are completely separate.  They have different names, independent values of point, independent narrowing, independent markers and overlays (though inserting or deleting text in either buffer relocates the markers and overlays for both), independent major modes, and independent buffer-local variable bindings."
msgstr "他のすべての観点において、インダイレクトバッファーとそのベースバッファーは完全に別物です。それらは別の名前、独自のポイント値、ナローイング、マーカー、オーバーレイ、メジャーモード、バッファーローカルな変数バインディングをもちます(ただしどちらかのバッファーでのテキストの挿入や削除を行うと両方のバッファーでマーカーとオーバーレイが再配置される)。"

#. type: Plain text
#: original_texis/buffers.texi:1141
msgid "An indirect buffer cannot visit a file, but its base buffer can.  If you try to save the indirect buffer, that actually saves the base buffer."
msgstr "インダイレクトバッファーはファイルをvisitできませんがベースバッファーには可能です。インダイレクトバッファーの保存を試みると、実際にはベースバッファーが保存されます。"

#. type: Plain text
#: original_texis/buffers.texi:1145
msgid "Killing an indirect buffer has no effect on its base buffer.  Killing the base buffer effectively kills the indirect buffer in that it cannot ever again be the current buffer."
msgstr "インダイレクトバッファーをkillしてもベースバッファーに影響はありません。ベースバッファーをkillするとインダイレクトバッファーはkillされて再びカレントバッファーにすることはできません。"

#. type: deffn
#: original_texis/buffers.texi:1146
#, no-wrap
msgid "Command make-indirect-buffer base-buffer name &optional clone"
msgstr "Command make-indirect-buffer base-buffer name &optional clone"

#. type: deffn
#: original_texis/buffers.texi:1151
msgid "This creates and returns an indirect buffer named @var{name} whose base buffer is @var{base-buffer}.  The argument @var{base-buffer} may be a live buffer or the name (a string) of an existing buffer.  If @var{name} is the name of an existing buffer, an error is signaled."
msgstr "これはベースバッファーが@var{base-buffer}であるような、@var{name}という名前のインダイレクトバッファーを作成してリターンする。引数@var{base-buffer}は生きたバッファー、または既存バッファーの名前(文字列)を指定できる。@var{name}が既存バッファーの名前ならエラーがシグナルされる。"

#. type: deffn
#: original_texis/buffers.texi:1157
msgid "If @var{clone} is non-@code{nil}, then the indirect buffer originally shares the state of @var{base-buffer} such as major mode, minor modes, buffer local variables and so on.  If @var{clone} is omitted or @code{nil} the indirect buffer's state is set to the default state for new buffers."
msgstr "@var{clone}が非@code{nil}ならインダイレクトバッファーは最初は@var{base-buffer}のメジャーモード、マイナーモード、バッファーローカル変数等の状態を共有する。@var{clone}が省略または@code{nil}なら、インダイレクトバッファーの情報は新たなバッファーにたいするデフォルト状態にセットされる。"

#. type: deffn
#: original_texis/buffers.texi:1162
msgid "If @var{base-buffer} is an indirect buffer, its base buffer is used as the base for the new buffer.  If, in addition, @var{clone} is non-@code{nil}, the initial state is copied from the actual base buffer, not from @var{base-buffer}."
msgstr "@var{base-buffer}がインダイレクトバッファーなら、新たなバッファーのベースとしてそれのベースバッファーが使用される。さらに@var{clone}が非@code{nil}なら、初期状態は@var{base-buffer}ではなく実際のベースバッファーからコピーされる。"

#. type: deffn
#: original_texis/buffers.texi:1164
#, no-wrap
msgid "Command clone-indirect-buffer newname display-flag &optional norecord"
msgstr "Command clone-indirect-buffer newname display-flag &optional norecord"

#. type: deffn
#: original_texis/buffers.texi:1169
msgid "This function creates and returns a new indirect buffer that shares the current buffer's base buffer and copies the rest of the current buffer's attributes.  (If the current buffer is not indirect, it is used as the base buffer.)"
msgstr "この関数はカレントバッファーのベースバッファーを共有するインダイレクトバッファーを新たに作成して、カレントバッファーの残りの属性をコピーしてリターンする(カレントバッファーがインダイレクトバッファーでなければそれがベースバッファーとして使用される)。"

#. type: deffn
#: original_texis/buffers.texi:1174
msgid "If @var{display-flag} is non-@code{nil}, that means to display the new buffer by calling @code{pop-to-buffer}.  If @var{norecord} is non-@code{nil}, that means not to put the new buffer to the front of the buffer list."
msgstr "@var{display-flag}が非@code{nil}なら、それは@code{pop-to-buffer}を呼び出すことにより新しいバッファーを表示することを意味する。@var{norecord}が非@code{nil}なら、それは新しいバッファーをバッファーリストの先頭に置かないことを意味する。"

#. type: defun
#: original_texis/buffers.texi:1176
#, no-wrap
msgid "buffer-base-buffer &optional buffer"
msgstr "buffer-base-buffer &optional buffer"

#. type: defun
#: original_texis/buffers.texi:1181
msgid "This function returns the base buffer of @var{buffer}, which defaults to the current buffer.  If @var{buffer} is not indirect, the value is @code{nil}.  Otherwise, the value is another buffer, which is never an indirect buffer."
msgstr "この関数は@var{buffer} (デフォルトはカレントバッファー)のベースバッファーをリターンする。@var{buffer}がインダイレクトバッファーでなければ値は@code{nil}、それ以外では値は他のバッファーとなり、そのバッファーがインダイレクトバッファーであることは決してない。"

#. type: section
#: original_texis/buffers.texi:1184
#, no-wrap
msgid "Swapping Text Between Two Buffers"
msgstr "Swapping Text Between Two Buffers"

#. type: cindex
#: original_texis/buffers.texi:1185
#, no-wrap
msgid "swap text between buffers"
msgstr "swap text between buffers"

#. type: cindex
#: original_texis/buffers.texi:1186
#, no-wrap
msgid "virtual buffers"
msgstr "virtual buffers"

#. type: Plain text
#: original_texis/buffers.texi:1192
msgid "Specialized modes sometimes need to let the user access from the same buffer several vastly different types of text.  For example, you may need to display a summary of the buffer text, in addition to letting the user access the text itself."
msgstr "特別なモードでは、ユーザーが同一のバッファーから複数の非常に異なったテキストにアクセスできるようにしなければならない場合があります。たとえばバッファーのテキストのサマリーを表示して、ユーザーがそのテキストにアクセスできるようにする場合です。"

#. type: Plain text
#: original_texis/buffers.texi:1199
msgid "This could be implemented with multiple buffers (kept in sync when the user edits the text), or with narrowing (@pxref{Narrowing}).  But these alternatives might sometimes become tedious or prohibitively expensive, especially if each type of text requires expensive buffer-global operations in order to provide correct display and editing commands."
msgstr "これは、(ユーザーがテキストを編集した際には同期を保つ)複数バッファーや、ナローイング(@ref{Narrowing}を参照)により実装することができるかもしれません。しかしこれらの候補案はときに退屈になりがちであり、特にそれぞれのテキストタイプが正しい表示と編集コマンドを提供するために高価なバッファーグローバル操作を要求する場合には、飛び抜けて高価になる場合があります。"

#. type: Plain text
#: original_texis/buffers.texi:1207
msgid "Emacs provides another facility for such modes: you can quickly swap buffer text between two buffers with @code{buffer-swap-text}.  This function is very fast because it doesn't move any text, it only changes the internal data structures of the buffer object to point to a different chunk of text.  Using it, you can pretend that a group of two or more buffers are actually a single virtual buffer that holds the contents of all the individual buffers together."
msgstr "Emacsはそのようなモードにたいして別の機能を提供します。@code{buffer-swap-text}を使用すれば、2つのバッファー間でバッファーテキストを素早く交換することができます。この関数はテキストの移動は行わずに異なるテキスト塊(text chunk)をポイントするように、バッファーオブジェクトの内部的なデータ構造だけを変更するため非常に高速です。これを使用することにより、2つ以上のバッファーグループから個々のバッファーのコンテンツすべてを併せもつような、単一の仮想バッファー(virtual buffer)が実在するように見せかけることができます。"

#. type: defun
#: original_texis/buffers.texi:1208
#, no-wrap
msgid "buffer-swap-text buffer"
msgstr "buffer-swap-text buffer"

#. type: defun
#: original_texis/buffers.texi:1213
msgid "This function swaps the text of the current buffer and that of its argument @var{buffer}.  It signals an error if one of the two buffers is an indirect buffer (@pxref{Indirect Buffers}) or is a base buffer of an indirect buffer."
msgstr "この関数はカレントバッファーのテキストと、引数@var{buffer}のテキストを交換する。2つのバッファーのいずれか一方がインダイレクトバッファー(@ref{Indirect Buffers}を参照)、またはインダイレクトバッファーのベースバッファーの場合はエラーをシグナルする。"

#. type: defun
#: original_texis/buffers.texi:1219
msgid "All the buffer properties that are related to the buffer text are swapped as well: the positions of point and mark, all the markers, the overlays, the text properties, the undo list, the value of the @code{enable-multibyte-characters} flag (@pxref{Text Representations, enable-multibyte-characters}), etc."
msgstr "バッファーテキストに関連するすべてのバッファープロパティ、つまりポイントとマークの位置、すべてのマーカーとオーバーレイ、テキストプロパティ、アンドゥリスト、@code{enable-multibyte-characters}フラグの値(@ref{Text Representations, enable-multibyte-characters}を参照)等も同様に交換される。"

#. type: defun
#: original_texis/buffers.texi:1225
msgid "@strong{Warning:} If this function is called from within a @code{save-excursion} form, the current buffer will be set to @var{buffer} upon leaving the form, since the marker used by @code{save-excursion} to save the position and buffer will be swapped as well."
msgstr "@strong{警告:} この関数を@code{save-excursion}内部で呼び出すと、位置とバッファーを保存するために@code{save-excursion}が使用するマーカーも同様に交換されるので、そのフォームを抜ける際にはカレントバッファーは@var{buffer}にセットされるだろう。"

#. type: Plain text
#: original_texis/buffers.texi:1233
msgid "If you use @code{buffer-swap-text} on a file-visiting buffer, you should set up a hook to save the buffer's original text rather than what it was swapped with.  @code{write-region-annotate-functions} works for this purpose.  You should probably set @code{buffer-saved-size} to @minus{}2 in the buffer, so that changes in the text it is swapped with will not interfere with auto-saving."
msgstr "ファイルをvisitしているバッファーに@code{buffer-swap-text}を使用する場合には、交換されたテキストではなくそのバッファーの元のテキストを保存するようにフックをセットアップするべきです。@code{write-region-annotate-functions}は正にこの目的のために機能します。そのバッファーの@code{buffer-saved-size}を、おそらく交換されたテキストにたいする変更が自動保存に干渉しないであろう、@minus{}2にセットするべきです。"

#. type: section
#: original_texis/buffers.texi:1235
#, no-wrap
msgid "The Buffer Gap"
msgstr "The Buffer Gap"

#. type: cindex
#: original_texis/buffers.texi:1236
#, no-wrap
msgid "buffer gap"
msgstr "buffer gap"

#. type: Plain text
#: original_texis/buffers.texi:1246
msgid "Emacs buffers are implemented using an invisible @dfn{gap} to make insertion and deletion faster.  Insertion works by filling in part of the gap, and deletion adds to the gap.  Of course, this means that the gap must first be moved to the locus of the insertion or deletion.  Emacs moves the gap only when you try to insert or delete.  This is why your first editing command in one part of a large buffer, after previously editing in another far-away part, sometimes involves a noticeable delay."
msgstr "Emacsのバッファーは挿入と削除を高速にするために不可視の@dfn{ギャップ(gap)}を使用して実装されています。挿入はギャップ部分を充填、削除はギャップを追加することにより機能します。もちろんこれは最初にギャップを挿入や削除の部位(locus)に移動しなければならないことを意味します。Emacsはユーザーが挿入か削除を試みたときだけギャップを移動します。大きなバッファー内の遠く離れた位置で編集した後に、他の箇所での最初の編集コマンドに無視できない遅延が発生する場合があるのはこれが理由です。"

#. type: Plain text
#: original_texis/buffers.texi:1250
msgid "This mechanism works invisibly, and Lisp code should never be affected by the gap's current location, but these functions are available for getting information about the gap status."
msgstr "このメカニズムは暗黙に機能するものであり、Lispコードはギャップのカレント位置に影響されるべきでは決してありませんが、以下の関数はギャップ状態に関する情報の取得に利用できます。"

#. type: defun
#: original_texis/buffers.texi:1251
#, no-wrap
msgid "gap-position"
msgstr "gap-position"

#. type: defun
#: original_texis/buffers.texi:1253
msgid "This function returns the current gap position in the current buffer."
msgstr "この関数はカレントバッファー内のギャップのカレント位置をリターンする。"

#. type: defun
#: original_texis/buffers.texi:1255
#, no-wrap
msgid "gap-size"
msgstr "gap-size"

#. type: defun
#: original_texis/buffers.texi:1257
msgid "This function returns the current gap size of the current buffer."
msgstr "この関数はカレントバッファー内のギャップのサイズをリターンする。"
