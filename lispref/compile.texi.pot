# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2024-08-24 20:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: original_texis/compile.texi:5 original_texis/compile.texi:6
#, no-wrap
msgid "Byte Compilation"
msgstr ""

#. type: cindex
#: original_texis/compile.texi:7
#, no-wrap
msgid "byte compilation"
msgstr ""

#. type: cindex
#: original_texis/compile.texi:8
#, no-wrap
msgid "byte-code"
msgstr ""

#. type: cindex
#: original_texis/compile.texi:9
#, no-wrap
msgid "compilation (Emacs Lisp)"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:16
msgid ""
"Emacs Lisp has a @dfn{compiler} that translates functions written in Lisp "
"into a special representation called @dfn{byte-code} that can be executed "
"more efficiently.  The compiler replaces Lisp function definitions with "
"byte-code.  When a byte-code function is called, its definition is evaluated "
"by the @dfn{byte-code interpreter}."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:22
msgid ""
"Because the byte-compiled code is evaluated by the byte-code interpreter, "
"instead of being executed directly by the machine's hardware (as true "
"compiled code is), byte-code is completely transportable from machine to "
"machine without recompilation.  It is not, however, as fast as true compiled "
"code."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:25
msgid ""
"In general, any version of Emacs can run byte-compiled code produced by "
"recent earlier versions of Emacs, but the reverse is not true."
msgstr ""

#. type: vindex
#: original_texis/compile.texi:26
#, no-wrap
msgid "no-byte-compile"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:29
msgid ""
"If you do not want a Lisp file to be compiled, ever, put a file-local "
"variable binding for @code{no-byte-compile} into it, like this:"
msgstr ""

#. type: example
#: original_texis/compile.texi:32
#, no-wrap
msgid ";; -*-no-byte-compile: t; -*-\n"
msgstr ""

#. type: node
#: original_texis/compile.texi:42 original_texis/compile.texi:44
#, no-wrap
msgid "Speed of Byte-Code"
msgstr ""

#. type: menuentry
#: original_texis/compile.texi:42
msgid "An example of speedup from byte compilation."
msgstr ""

#. type: node
#: original_texis/compile.texi:42 original_texis/compile.texi:81
#, no-wrap
msgid "Compilation Functions"
msgstr ""

#. type: menuentry
#: original_texis/compile.texi:42
msgid "Byte compilation functions."
msgstr ""

#. type: node
#: original_texis/compile.texi:42 original_texis/compile.texi:243
#, no-wrap
msgid "Docs and Compilation"
msgstr ""

#. type: menuentry
#: original_texis/compile.texi:42
msgid "Dynamic loading of documentation strings."
msgstr ""

#. type: node
#: original_texis/compile.texi:42 original_texis/compile.texi:291
#, no-wrap
msgid "Eval During Compile"
msgstr ""

#. type: menuentry
#: original_texis/compile.texi:42
msgid "Code to be evaluated when you compile."
msgstr ""

#. type: section
#: original_texis/compile.texi:42 original_texis/compile.texi:373
#: original_texis/compile.texi:374
#, no-wrap
msgid "Compiler Errors"
msgstr ""

#. type: menuentry
#: original_texis/compile.texi:42
msgid "Handling compiler error messages."
msgstr ""

#. type: node
#: original_texis/compile.texi:42 original_texis/compile.texi:490
#, no-wrap
msgid "Closure Objects"
msgstr ""

#. type: menuentry
#: original_texis/compile.texi:42
msgid "The data type used for byte-compiled functions."
msgstr ""

#. type: node
#: original_texis/compile.texi:42 original_texis/compile.texi:593
#, no-wrap
msgid "Disassembly"
msgstr ""

#. type: menuentry
#: original_texis/compile.texi:42
msgid "Disassembling byte-code; how to read byte-code."
msgstr ""

#. type: section
#: original_texis/compile.texi:45
#, no-wrap
msgid "Performance of Byte-Compiled Code"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:50
msgid ""
"A byte-compiled function is not as efficient as a primitive function written "
"in C, but runs much faster than the version written in Lisp.  Here is an "
"example:"
msgstr ""

#. type: group
#: original_texis/compile.texi:59
#, no-wrap
msgid ""
"(defun silly-loop (n)\n"
"  \"Return the time, in seconds, to run N iterations of a loop.\"\n"
"  (let ((t1 (float-time)))\n"
"    (while (> (setq n (1- n)) 0))\n"
"    (- (float-time) t1)))\n"
"@result{} silly-loop\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:64
#, no-wrap
msgid ""
"(silly-loop 50000000)\n"
"@result{} 5.200886011123657\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:69
#, no-wrap
msgid ""
"(byte-compile 'silly-loop)\n"
"@result{} @r{[Compiled code not shown]}\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:74
#, no-wrap
msgid ""
"(silly-loop 50000000)\n"
"@result{} 0.6239290237426758\n"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:80
msgid ""
"In this example, the interpreted code required more than 5 seconds to run, "
"whereas the byte-compiled code required less than 1 second.  These results "
"are representative, but actual results may vary."
msgstr ""

#. type: section
#: original_texis/compile.texi:82
#, no-wrap
msgid "Byte-Compilation Functions"
msgstr ""

#. type: cindex
#: original_texis/compile.texi:83
#, no-wrap
msgid "compilation functions"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:89
msgid ""
"You can byte-compile an individual function or macro definition with the "
"@code{byte-compile} function.  You can compile a whole file with "
"@code{byte-compile-file}, or several files with "
"@code{byte-recompile-directory} or @code{batch-byte-compile}."
msgstr ""

#. type: vindex
#: original_texis/compile.texi:90
#, no-wrap
msgid "byte-compile-debug"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:98
msgid ""
"Sometimes, the byte compiler produces warning and/or error messages "
"(@pxref{Compiler Errors}, for details).  These messages are normally "
"recorded in a buffer called @file{*Compile-Log*}, which uses Compilation "
"mode.  @xref{Compilation Mode,,,emacs, The GNU Emacs Manual}.  However, if "
"the variable @code{byte-compile-debug} is non-@code{nil}, error messages "
"will be signaled as Lisp errors instead (@pxref{Errors})."
msgstr ""

#. type: cindex
#: original_texis/compile.texi:99
#, no-wrap
msgid "macro compilation"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:112
msgid ""
"Be careful when writing macro calls in files that you intend to "
"byte-compile.  Since macro calls are expanded when they are compiled, the "
"macros need to be loaded into Emacs or the byte compiler will not do the "
"right thing.  The usual way to handle this is with @code{require} forms "
"which specify the files containing the needed macro definitions "
"(@pxref{Named Features}).  Normally, the byte compiler does not evaluate the "
"code that it is compiling, but it handles @code{require} forms specially, by "
"loading the specified libraries.  To avoid loading the macro definition "
"files when someone @emph{runs} the compiled program, write "
"@code{eval-when-compile} around the @code{require} calls (@pxref{Eval During "
"Compile}).  For more details, @xref{Compiling Macros}."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:116
msgid ""
"Inline (@code{defsubst}) functions are less troublesome; if you compile a "
"call to such a function before its definition is known, the call will still "
"work right, it will just run slower."
msgstr ""

#. type: defun
#: original_texis/compile.texi:117
#, no-wrap
msgid "byte-compile symbol"
msgstr ""

#. type: defun
#: original_texis/compile.texi:124
msgid ""
"This function byte-compiles the function definition of @var{symbol}, "
"replacing the previous definition with the compiled one.  The function "
"definition of @var{symbol} must be the actual code for the function; "
"@code{byte-compile} does not handle function indirection.  The return value "
"is the byte-code function object which is the compiled definition of "
"@var{symbol} (@pxref{Closure Objects})."
msgstr ""

#. type: group
#: original_texis/compile.texi:132
#, no-wrap
msgid ""
"(defun factorial (integer)\n"
"  \"Compute factorial of INTEGER.\"\n"
"  (if (= 1 integer) 1\n"
"    (* integer (factorial (1- integer)))))\n"
"@result{} factorial\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:141
#, no-wrap
msgid ""
"(byte-compile 'factorial)\n"
"@result{}\n"
"#[257\n"
"  \"\\211\\300U\\203^H^@@\\300\\207\\211\\301^BS!_\\207\"\n"
"  [1 factorial] 4\n"
"  \"Compute factorial of INTEGER.\\n\\n(fn INTEGER)\"]\n"
msgstr ""

#. type: defun
#: original_texis/compile.texi:149
msgid ""
"If @var{symbol}'s definition is a byte-code function object, "
"@code{byte-compile} does nothing and returns @code{nil}.  It does not "
"compile the symbol's definition again, since the original (non-compiled) "
"code has already been replaced in the symbol's function cell by the "
"byte-compiled code."
msgstr ""

#. type: defun
#: original_texis/compile.texi:153
msgid ""
"The argument to @code{byte-compile} can also be a @code{lambda} expression.  "
"In that case, the function returns the corresponding compiled code but does "
"not store it anywhere."
msgstr ""

#. type: deffn
#: original_texis/compile.texi:155
#, no-wrap
msgid "Command compile-defun &optional arg"
msgstr ""

#. type: deffn
#: original_texis/compile.texi:160
msgid ""
"This command reads the defun containing point, compiles it, and evaluates "
"the result.  If you use this on a defun that is actually a function "
"definition, the effect is to install a compiled version of that function."
msgstr ""

#. type: deffn
#: original_texis/compile.texi:164
msgid ""
"@code{compile-defun} normally displays the result of evaluation in the echo "
"area, but if @var{arg} is non-@code{nil}, it inserts the result in the "
"current buffer after the form it has compiled."
msgstr ""

#. type: deffn
#: original_texis/compile.texi:166
#, no-wrap
msgid "Command byte-compile-file filename"
msgstr ""

#. type: deffn
#: original_texis/compile.texi:171
msgid ""
"This function compiles a file of Lisp code named @var{filename} into a file "
"of byte-code.  The output file's name is made by changing the @samp{.el} "
"suffix into @samp{.elc}; if @var{filename} does not end in @samp{.el}, it "
"adds @samp{.elc} to the end of @var{filename}."
msgstr ""

#. type: deffn
#: original_texis/compile.texi:178
msgid ""
"Compilation works by reading the input file one form at a time.  If it is a "
"definition of a function or macro, the compiled function or macro definition "
"is written out.  Other forms are batched together, then each batch is "
"compiled, and written so that its compiled code will be executed when the "
"file is read.  All comments are discarded when the input file is read."
msgstr ""

#. type: deffn
#: original_texis/compile.texi:181
msgid ""
"This command returns @code{t} if there were no errors and @code{nil} "
"otherwise.  When called interactively, it prompts for the file name."
msgstr ""

#. type: group
#: original_texis/compile.texi:186
#, no-wrap
msgid ""
"$ ls -l push*\n"
"-rw-r--r-- 1 lewis lewis 791 Oct  5 20:31 push.el\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:191
#, no-wrap
msgid ""
"(byte-compile-file \"~/emacs/push.el\")\n"
"     @result{} t\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:197
#, no-wrap
msgid ""
"$ ls -l push*\n"
"-rw-r--r-- 1 lewis lewis 791 Oct  5 20:31 push.el\n"
"-rw-rw-rw- 1 lewis lewis 638 Oct  8 20:25 push.elc\n"
msgstr ""

#. type: deffn
#: original_texis/compile.texi:201
#, no-wrap
msgid ""
"Command byte-recompile-directory directory &optional flag force "
"follow-symlinks"
msgstr ""

#. type: cindex
#: original_texis/compile.texi:202
#, no-wrap
msgid "library compilation"
msgstr ""

#. type: deffn
#: original_texis/compile.texi:207
msgid ""
"This command recompiles every @samp{.el} file in @var{directory} (or its "
"subdirectories) that needs recompilation.  A file needs recompilation if a "
"@samp{.elc} file exists but is older than the @samp{.el} file."
msgstr ""

#. type: deffn
#: original_texis/compile.texi:213
msgid ""
"When a @samp{.el} file has no corresponding @samp{.elc} file, @var{flag} "
"says what to do.  If it is @code{nil}, this command ignores these files.  If "
"@var{flag} is 0, it compiles them.  If it is neither @code{nil} nor 0, it "
"asks the user whether to compile each such file, and asks about each "
"subdirectory as well."
msgstr ""

#. type: deffn
#: original_texis/compile.texi:216
msgid ""
"Interactively, @code{byte-recompile-directory} prompts for @var{directory} "
"and @var{flag} is the prefix argument."
msgstr ""

#. type: deffn
#: original_texis/compile.texi:219
msgid ""
"If @var{force} is non-@code{nil}, this command recompiles every @samp{.el} "
"file that has a @samp{.elc} file."
msgstr ""

#. type: deffn
#: original_texis/compile.texi:223
msgid ""
"This command will normally not compile @samp{.el} files that are symlinked.  "
"If the optional @var{follow-symlink} parameter is non-@code{nil}, symlinked "
"@samp{.el} will also be compiled."
msgstr ""

#. type: deffn
#: original_texis/compile.texi:225
msgid "The returned value is unpredictable."
msgstr ""

#. type: defun
#: original_texis/compile.texi:227
#, no-wrap
msgid "batch-byte-compile &optional noforce"
msgstr ""

#. type: defun
#: original_texis/compile.texi:234
msgid ""
"This function runs @code{byte-compile-file} on files specified on the "
"command line.  This function must be used only in a batch execution of "
"Emacs, as it kills Emacs on completion.  An error in one file does not "
"prevent processing of subsequent files, but no output file will be generated "
"for it, and the Emacs process will terminate with a nonzero status code."
msgstr ""

#. type: defun
#: original_texis/compile.texi:237
msgid ""
"If @var{noforce} is non-@code{nil}, this function does not recompile files "
"that have an up-to-date @samp{.elc} file."
msgstr ""

#. type: example
#: original_texis/compile.texi:240
#, no-wrap
msgid "$ emacs -batch -f batch-byte-compile *.el\n"
msgstr ""

#. type: section
#: original_texis/compile.texi:244
#, no-wrap
msgid "Documentation Strings and Compilation"
msgstr ""

#. type: cindex
#: original_texis/compile.texi:245
#, no-wrap
msgid "dynamic loading of documentation"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:252
msgid ""
"When Emacs loads functions and variables from a byte-compiled file, it "
"normally does not load their documentation strings into memory.  Each "
"documentation string is dynamically loaded from the byte-compiled file only "
"when needed.  This saves memory, and speeds up loading by skipping the "
"processing of the documentation strings."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:259
msgid ""
"This feature has a drawback: if you delete, move, or alter the compiled file "
"(such as by compiling a new version), Emacs may no longer be able to access "
"the documentation string of previously-loaded functions or variables.  Such "
"a problem normally only occurs if you build Emacs yourself, and happen to "
"edit and/or recompile the Lisp source files.  To solve it, just reload each "
"file after recompilation."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:263
msgid ""
"Dynamic loading of documentation strings from byte-compiled files is "
"determined, at compile time, for each byte-compiled file.  It can be "
"disabled via the option @code{byte-compile-dynamic-docstrings}."
msgstr ""

#. type: defopt
#: original_texis/compile.texi:264
#, no-wrap
msgid "byte-compile-dynamic-docstrings"
msgstr ""

#. type: defopt
#: original_texis/compile.texi:267
msgid ""
"If this is non-@code{nil}, the byte compiler generates compiled files that "
"are set up for dynamic loading of documentation strings."
msgstr ""

#. type: defopt
#: original_texis/compile.texi:271
msgid ""
"To disable the dynamic loading feature for a specific file, set this option "
"to @code{nil} in its header line (@pxref{File Variables, , Local Variables "
"in Files, emacs, The GNU Emacs Manual}), like this:"
msgstr ""

#. type: smallexample
#: original_texis/compile.texi:274
#, no-wrap
msgid "-*-byte-compile-dynamic-docstrings: nil;-*-\n"
msgstr ""

#. type: defopt
#: original_texis/compile.texi:279
msgid ""
"This is useful mainly if you expect to change the file, and you want Emacs "
"sessions that have already loaded it to keep working when the file changes."
msgstr ""

#. type: samp{#1}
#: original_texis/compile.texi:281
#, no-wrap
msgid "#@@@var{count}"
msgstr ""

#. type: samp{#1}
#: original_texis/compile.texi:282
#, no-wrap
msgid "#$"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:290
msgid ""
"Internally, the dynamic loading of documentation strings is accomplished by "
"writing compiled files with a special Lisp reader construct, "
"@samp{#@@@var{count}}.  This construct skips the next @var{count} "
"characters.  It also uses the @samp{#$} construct, which stands for the name "
"of this file, as a string.  Do not use these constructs in Lisp source "
"files; they are not designed to be clear to humans reading the file."
msgstr ""

#. type: section
#: original_texis/compile.texi:292
#, no-wrap
msgid "Evaluation During Compilation"
msgstr ""

#. type: cindex
#: original_texis/compile.texi:293
#, no-wrap
msgid "eval during compilation"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:297
msgid ""
"These features permit you to write code to be evaluated during compilation "
"of a program."
msgstr ""

#. type: defmac
#: original_texis/compile.texi:298
#, no-wrap
msgid "eval-and-compile body@dots{}"
msgstr ""

#. type: defmac
#: original_texis/compile.texi:301
msgid ""
"This form marks @var{body} to be evaluated both when you compile the "
"containing code and when you run it (whether compiled or not)."
msgstr ""

#. type: defmac
#: original_texis/compile.texi:307
msgid ""
"You can get a similar result by putting @var{body} in a separate file and "
"referring to that file with @code{require}.  That method is preferable when "
"@var{body} is large.  Effectively @code{require} is automatically "
"@code{eval-and-compile}, the package is loaded both when compiling and "
"executing."
msgstr ""

#. type: defmac
#: original_texis/compile.texi:311
msgid ""
"@code{autoload} is also effectively @code{eval-and-compile} too.  It's "
"recognized when compiling, so uses of such a function don't produce ``not "
"known to be defined'' warnings."
msgstr ""

#. type: defmac
#: original_texis/compile.texi:313
msgid "Most uses of @code{eval-and-compile} are fairly sophisticated."
msgstr ""

#. type: defmac
#: original_texis/compile.texi:318
msgid ""
"If a macro has a helper function to build its result, and that macro is used "
"both locally and outside the package, then @code{eval-and-compile} should be "
"used to get the helper both when compiling and then later when running."
msgstr ""

#. type: defmac
#: original_texis/compile.texi:323
msgid ""
"If functions are defined programmatically (with @code{fset} say), then "
"@code{eval-and-compile} can be used to have that done at compile-time as "
"well as run-time, so calls to those functions are checked (and warnings "
"about ``not known to be defined'' suppressed)."
msgstr ""

#. type: defmac
#: original_texis/compile.texi:325
#, no-wrap
msgid "eval-when-compile body@dots{}"
msgstr ""

#. type: defmac
#: original_texis/compile.texi:331
msgid ""
"This form marks @var{body} to be evaluated at compile time but not when the "
"compiled program is loaded.  The result of evaluation by the compiler "
"becomes a constant which appears in the compiled program.  If you load the "
"source file, rather than compiling it, @var{body} is evaluated normally."
msgstr ""

#. type: cindex
#: original_texis/compile.texi:332
#, no-wrap
msgid "compile-time constant"
msgstr ""

#. type: defmac
#: original_texis/compile.texi:335
msgid ""
"If you have a constant that needs some calculation to produce, "
"@code{eval-when-compile} can do that at compile-time.  For example,"
msgstr ""

#. type: lisp
#: original_texis/compile.texi:339
#, no-wrap
msgid ""
"(defvar gauss-schoolboy-problem\n"
"  (eval-when-compile (apply #'+ (number-sequence 1 100))))\n"
msgstr ""

#. type: cindex
#: original_texis/compile.texi:341
#, no-wrap
msgid "macros, at compile time"
msgstr ""

#. type: defmac
#: original_texis/compile.texi:345
msgid ""
"If you're using another package, but only need macros from it (the byte "
"compiler will expand those), then @code{eval-when-compile} can be used to "
"load it for compiling, but not executing.  For example,"
msgstr ""

#. type: lisp
#: original_texis/compile.texi:349
#, no-wrap
msgid ""
"(eval-when-compile\n"
"  (require 'my-macro-package))\n"
msgstr ""

#. type: defmac
#: original_texis/compile.texi:355
msgid ""
"The same sort of thing goes for macros and @code{defsubst} functions defined "
"locally and only for use within the file.  They are needed for compiling the "
"file, but in most cases they are not needed for execution of the compiled "
"file.  For example,"
msgstr ""

#. type: lisp
#: original_texis/compile.texi:361
#, no-wrap
msgid ""
"(eval-when-compile\n"
"  (unless (fboundp 'some-new-thing)\n"
"    (defmacro some-new-thing ()\n"
"      (compatibility code))))\n"
msgstr ""

#. type: defmac
#: original_texis/compile.texi:366
msgid ""
"This is often good for code that's only a fallback for compatibility with "
"other versions of Emacs."
msgstr ""

#. type: defmac
#: original_texis/compile.texi:371
msgid ""
"@strong{Common Lisp Note:} At top level, @code{eval-when-compile} is "
"analogous to the Common Lisp idiom @code{(eval-when (compile eval) "
"@dots{})}.  Elsewhere, the Common Lisp @samp{#.} reader macro (but not when "
"interpreting) is closer to what @code{eval-when-compile} does."
msgstr ""

#. type: cindex
#: original_texis/compile.texi:375
#, no-wrap
msgid "compiler errors"
msgstr ""

#. type: cindex
#: original_texis/compile.texi:376
#, no-wrap
msgid "byte-compiler errors"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:383
msgid ""
"Error and warning messages from byte compilation are printed in a buffer "
"named @file{*Compile-Log*}.  These messages include file names and line "
"numbers identifying the location of the problem.  The usual Emacs commands "
"for operating on compiler output can be used on these messages."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:392
msgid ""
"When an error is due to invalid syntax in the program, the byte compiler "
"might get confused about the error's exact location.  One way to investigate "
"is to switch to the buffer @w{@file{ *Compiler Input*}}.  (This buffer name "
"starts with a space, so it does not show up in the Buffer Menu.)  This "
"buffer contains the program being compiled, and point shows how far the byte "
"compiler was able to read; the cause of the error might be nearby.  "
"@xref{Syntax Errors}, for some tips for locating syntax errors."
msgstr ""

#. type: cindex
#: original_texis/compile.texi:393
#, no-wrap
msgid "byte-compiler warnings"
msgstr ""

#. type: cindex
#: original_texis/compile.texi:394
#, no-wrap
msgid "free variable, byte-compiler warning"
msgstr ""

#. type: cindex
#: original_texis/compile.texi:395
#, no-wrap
msgid "reference to free variable, compilation warning"
msgstr ""

#. type: cindex
#: original_texis/compile.texi:396
#, no-wrap
msgid "function not known to be defined, compilation warning"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:402
msgid ""
"A common type of warning issued by the byte compiler is for functions and "
"variables that were used but not defined.  Such warnings report the line "
"number for the end of the file, not the locations where the missing "
"functions or variables were used; to find these, you must search the file "
"manually."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:405
msgid ""
"If you are sure that a warning message about a missing function or variable "
"is unjustified, there are several ways to suppress it:"
msgstr ""

#. type: itemize
#: original_texis/compile.texi:411
msgid ""
"You can suppress the warning for a specific call to a function @var{func} by "
"conditionalizing it on an @code{fboundp} test, like this:"
msgstr ""

#. type: example
#: original_texis/compile.texi:414
#, no-wrap
msgid "(if (fboundp '@var{func}) ...(@var{func} ...)...)\n"
msgstr ""

#. type: itemize
#: original_texis/compile.texi:420
msgid ""
"The call to @var{func} must be in the @var{then-form} of the @code{if}, and "
"@var{func} must appear quoted in the call to @code{fboundp}.  (This feature "
"operates for @code{cond} as well.)"
msgstr ""

#. type: itemize
#: original_texis/compile.texi:425
msgid ""
"Likewise, you can suppress the warning for a specific use of a variable "
"@var{variable} by conditionalizing it on a @code{boundp} test:"
msgstr ""

#. type: example
#: original_texis/compile.texi:428
#, no-wrap
msgid "(if (boundp '@var{variable}) ...@var{variable}...)\n"
msgstr ""

#. type: itemize
#: original_texis/compile.texi:434
msgid ""
"The reference to @var{variable} must be in the @var{then-form} of the "
"@code{if}, and @var{variable} must appear quoted in the call to "
"@code{boundp}."
msgstr ""

#. type: itemize
#: original_texis/compile.texi:438
msgid ""
"You can tell the compiler that a function is defined using "
"@code{declare-function}.  @xref{Declaring Functions}."
msgstr ""

#. type: itemize
#: original_texis/compile.texi:445
msgid ""
"Likewise, you can tell the compiler that a variable is defined using "
"@code{defvar} with no initial value.  (Note that this marks the variable as "
"special, i.e.@: dynamically bound, but only within the current lexical "
"scope, or file if at top-level.)  @xref{Defining Variables}."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:449
msgid ""
"You can also suppress compiler warnings within a certain expression using "
"the @code{with-suppressed-warnings} macro:"
msgstr ""

#. type: defspec
#: original_texis/compile.texi:450
#, no-wrap
msgid "with-suppressed-warnings warnings body@dots{}"
msgstr ""

#. type: defspec
#: original_texis/compile.texi:457
msgid ""
"In execution, this is equivalent to @code{(progn @var{body}...)}, but the "
"compiler does not issue warnings for the specified conditions in "
"@var{body}.  @var{warnings} is an association list of warning symbols and "
"function/variable symbols they apply to.  For instance, if you wish to call "
"an obsolete function called @code{foo}, but want to suppress the compilation "
"warning, say:"
msgstr ""

#. type: lisp
#: original_texis/compile.texi:461
#, no-wrap
msgid ""
"(with-suppressed-warnings ((obsolete foo))\n"
"  (foo ...))\n"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:466
msgid ""
"For more coarse-grained suppression of compiler warnings, you can use the "
"@code{with-no-warnings} construct:"
msgstr ""

#. type: defspec
#: original_texis/compile.texi:470
#, no-wrap
msgid "with-no-warnings body@dots{}"
msgstr ""

#. type: defspec
#: original_texis/compile.texi:474
msgid ""
"In execution, this is equivalent to @code{(progn @var{body}...)}, but the "
"compiler does not issue warnings for anything that occurs inside @var{body}."
msgstr ""

#. type: defspec
#: original_texis/compile.texi:479
msgid ""
"We recommend that you use @code{with-suppressed-warnings} instead, but if "
"you do use this construct, that you use it around the smallest possible "
"piece of code to avoid missing possible warnings other than one you intend "
"to suppress."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:484
msgid ""
"Byte compiler warnings can be controlled more precisely by setting the "
"variable @code{byte-compile-warnings}.  See its documentation string for "
"details."
msgstr ""

#. type: vindex
#: original_texis/compile.texi:485
#, no-wrap
msgid "byte-compile-error-on-warn"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:489
msgid ""
"Sometimes you may wish the byte-compiler warnings to be reported using "
"@code{error}.  If so, set @code{byte-compile-error-on-warn} to a "
"non-@code{nil} value."
msgstr ""

#. type: section
#: original_texis/compile.texi:491
#, no-wrap
msgid "Closure Function Objects"
msgstr ""

#. type: cindex
#: original_texis/compile.texi:492
#, no-wrap
msgid "compiled function"
msgstr ""

#. type: cindex
#: original_texis/compile.texi:493
#, no-wrap
msgid "byte-code function"
msgstr ""

#. type: cindex
#: original_texis/compile.texi:494
#, no-wrap
msgid "byte-code object"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:501
msgid ""
"Byte-compiled functions use a special data type: they are closures.  "
"Closures are used both for byte-compiled Lisp functions as well as for "
"interpreted Lisp functions.  Whenever such an object appears as a function "
"to be called, Emacs uses the appropriate interpreter to execute either the "
"byte-code or the non-compiled Lisp code."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:508
msgid ""
"Internally, a closure is much like a vector; its elements can be accessed "
"using @code{aref}.  Its printed representation is like that for a vector, "
"with an additional @samp{#} before the opening @samp{[}.  It must have at "
"least three elements; there is no maximum number, but only the first six "
"elements have any normal use.  They are:"
msgstr ""

#. type: item
#: original_texis/compile.texi:510
#, no-wrap
msgid "argdesc"
msgstr ""

#. type: table
#: original_texis/compile.texi:518
msgid ""
"The descriptor of the arguments.  This can either be a list of arguments, as "
"described in @ref{Argument List}, or an integer encoding the required number "
"of arguments.  In the latter case, the value of the descriptor specifies the "
"minimum number of arguments in the bits zero to 6, and the maximum number of "
"arguments in bits 8 to 14.  If the argument list uses @code{&rest}, then bit "
"7 is set; otherwise it's cleared."
msgstr ""

#. type: table
#: original_texis/compile.texi:524
msgid ""
"When the closure is a byte-code function, if @var{argdesc} is a list, the "
"arguments will be dynamically bound before executing the byte code.  If "
"@var{argdesc} is an integer, the arguments will be instead pushed onto the "
"stack of the byte-code interpreter, before executing the code."
msgstr ""

#. type: item
#: original_texis/compile.texi:525
#, no-wrap
msgid "code"
msgstr ""

#. type: table
#: original_texis/compile.texi:529
msgid ""
"For interpreted functions, this element is the (non-empty) list of Lisp "
"forms that make up the function's body.  For byte-compiled functions, it is "
"the string containing the byte-code instructions."
msgstr ""

#. type: item
#: original_texis/compile.texi:530
#, no-wrap
msgid "constants"
msgstr ""

#. type: table
#: original_texis/compile.texi:537
msgid ""
"For byte-compiled functions, this holds the vector of Lisp objects "
"referenced by the byte code.  These include symbols used as function names "
"and variable names.  For interpreted functions, this is @code{nil} if the "
"function is using the old dynamically scoped dialect of Emacs Lisp, and "
"otherwise it holds the function's lexical environment."
msgstr ""

#. type: item
#: original_texis/compile.texi:538
#, no-wrap
msgid "stacksize"
msgstr ""

#. type: table
#: original_texis/compile.texi:541
msgid ""
"The maximum stack size this function needs.  This element is left unused for "
"interpreted functions."
msgstr ""

#. type: item
#: original_texis/compile.texi:542
#, no-wrap
msgid "docstring"
msgstr ""

#. type: table
#: original_texis/compile.texi:547
msgid ""
"The documentation string (if any); otherwise, @code{nil}.  The value may be "
"a number or a list, in case the documentation string is stored in a file.  "
"Use the function @code{documentation} to get the real documentation string "
"(@pxref{Accessing Documentation})."
msgstr ""

#. type: item
#: original_texis/compile.texi:548
#, no-wrap
msgid "interactive"
msgstr ""

#. type: table
#: original_texis/compile.texi:551
msgid ""
"The interactive spec (if any).  This can be a string or a Lisp expression.  "
"It is @code{nil} for a function that isn't interactive."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:556
msgid ""
"Here's an example of a byte-code function object, in printed "
"representation.  It is the definition of the command @code{backward-sexp}."
msgstr ""

#. type: example
#: original_texis/compile.texi:564
#, no-wrap
msgid ""
"#[256\n"
"  \"\\211\\204^G^@@\\300\\262^A\\301^A[!\\207\"\n"
"  [1 forward-sexp]\n"
"  3\n"
"  1793299\n"
"  \"^p\"]\n"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:568
msgid ""
"The primitive way to create a byte-code object is with "
"@code{make-byte-code}:"
msgstr ""

#. type: defun
#: original_texis/compile.texi:569
#, no-wrap
msgid "make-byte-code &rest elements"
msgstr ""

#. type: defun
#: original_texis/compile.texi:572
msgid ""
"This function constructs and returns a closure which represents the "
"byte-code function object with @var{elements} as its elements."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:578
msgid ""
"You should not try to come up with the elements for a byte-code function "
"yourself, because if they are inconsistent, Emacs may crash when you call "
"the function.  Always leave it to the byte compiler to create these objects; "
"it makes the elements consistent (we hope)."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:581
msgid ""
"The primitive way to create an interpreted function is with "
"@code{make-interpreted-closure}:"
msgstr ""

#. type: defun
#: original_texis/compile.texi:582
#, no-wrap
msgid "make-interpreted-closure args body env &optional docstring iform"
msgstr ""

#. type: defun
#: original_texis/compile.texi:591
msgid ""
"This function constructs and returns a closure representing the interpreted "
"function with arguments @var{args} and whose body is made of @var{body} "
"which must be a non-@code{nil} list of Lisp forms.  @var{env} is the lexical "
"environment in the same form as used with @code{eval} (@pxref{Eval}).  The "
"documentation @var{docstring} if non-@code{nil} should be a string, and the "
"interactive form @var{iform} if non-@code{nil} should be of the form "
"@w{@code{(interactive @var{arg-descriptor})}} (@pxref{Using Interactive})."
msgstr ""

#. type: section
#: original_texis/compile.texi:594
#, no-wrap
msgid "Disassembled Byte-Code"
msgstr ""

#. type: cindex
#: original_texis/compile.texi:595
#, no-wrap
msgid "disassembled byte-code"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:601
msgid ""
"People do not write byte-code; that job is left to the byte compiler.  But "
"we provide a disassembler to satisfy a cat-like curiosity.  The disassembler "
"converts the byte-compiled code into human-readable form."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:607
msgid ""
"The byte-code interpreter is implemented as a simple stack machine.  It "
"pushes values onto a stack of its own, then pops them off to use them in "
"calculations whose results are themselves pushed back on the stack.  When a "
"byte-code function returns, it pops a value off the stack and returns it as "
"the value of the function."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:611
msgid ""
"In addition to the stack, byte-code functions can use, bind, and set "
"ordinary Lisp variables, by transferring values between variables and the "
"stack."
msgstr ""

#. type: deffn
#: original_texis/compile.texi:612
#, no-wrap
msgid "Command disassemble object &optional buffer-or-name"
msgstr ""

#. type: deffn
#: original_texis/compile.texi:619
msgid ""
"This command displays the disassembled code for @var{object}.  In "
"interactive use, or if @var{buffer-or-name} is @code{nil} or omitted, the "
"output goes in a buffer named @file{*Disassemble*}.  If @var{buffer-or-name} "
"is non-@code{nil}, it must be a buffer or the name of an existing buffer.  "
"Then the output goes there, at point, and point is left before the output."
msgstr ""

#. type: deffn
#: original_texis/compile.texi:624
msgid ""
"The argument @var{object} can be a function name, a lambda expression "
"(@pxref{Lambda Expressions}), or a byte-code object (@pxref{Closure "
"Objects}).  If it is a lambda expression, @code{disassemble} compiles it and "
"disassembles the resulting compiled code."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:629
msgid ""
"Here are two examples of using the @code{disassemble} function.  We have "
"added explanatory comments to help you relate the byte-code to the Lisp "
"source; these do not appear in the output of @code{disassemble}."
msgstr ""

#. type: group
#: original_texis/compile.texi:637
#, no-wrap
msgid ""
"(defun factorial (integer)\n"
"  \"Compute factorial of an integer.\"\n"
"  (if (= 1 integer) 1\n"
"    (* integer (factorial (1- integer)))))\n"
"     @result{} factorial\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:642
#, no-wrap
msgid ""
"(factorial 4)\n"
"     @result{} 24\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:649
#, no-wrap
msgid ""
"(disassemble 'factorial)\n"
"     @print{} byte-code for factorial:\n"
" doc: Compute factorial of an integer.\n"
" args: (arg1)\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:655
#, no-wrap
msgid ""
"0   dup                   ; @r{Get the value of @code{integer} and}\n"
"                          ;   @r{push it onto the stack.}\n"
"1   constant 1            ; @r{Push 1 onto stack.}\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:659
#, no-wrap
msgid ""
"2   eqlsign               ; @r{Pop top two values off stack, compare}\n"
"                          ;   @r{them, and push result onto stack.}\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:665
#, no-wrap
msgid ""
"3   goto-if-nil 1         ; @r{Pop and test top of stack;}\n"
"                          ;   @r{if @code{nil}, go to 1, else continue.}\n"
"6   constant 1            ; @r{Push 1 onto top of stack.}\n"
"7   return                ; @r{Return the top element of the stack.}\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:675
#, no-wrap
msgid ""
"8:1 dup                   ; @r{Push value of @code{integer} onto stack.}\n"
"9   constant factorial    ; @r{Push @code{factorial} onto stack.}\n"
"10  stack-ref 2           ; @r{Push value of @code{integer} onto stack.}\n"
"11  sub1                  ; @r{Pop @code{integer}, decrement value,}\n"
"                          ;   @r{push new value onto stack.}\n"
"12  call     1            ; @r{Call function @code{factorial} using first}\n"
"                          ;   @r{(i.e., top) stack element as argument;}\n"
"                          ;   @r{push returned value onto stack.}\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:680
#, no-wrap
msgid ""
"13  mult                  ; @r{Pop top two values off stack, multiply}\n"
"                          ;   @r{them, and push result onto stack.}\n"
"14  return                ; @r{Return the top element of the stack.}\n"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:684
msgid "The @code{silly-loop} function is somewhat more complex:"
msgstr ""

#. type: group
#: original_texis/compile.texi:694
#, no-wrap
msgid ""
"(defun silly-loop (n)\n"
"  \"Return time before and after N iterations of a loop.\"\n"
"  (let ((t1 (current-time-string)))\n"
"    (while (> (setq n (1- n))\n"
"              0))\n"
"    (list t1 (current-time-string))))\n"
"     @result{} silly-loop\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:701
#, no-wrap
msgid ""
"(disassemble 'silly-loop)\n"
"     @print{} byte-code for silly-loop:\n"
" doc: Return time before and after N iterations of a loop.\n"
" args: (arg1)\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:706
#, no-wrap
msgid ""
"0   constant current-time-string  ; @r{Push @code{current-time-string}}\n"
"                                  ;   @r{onto top of stack.}\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:710
#, no-wrap
msgid ""
"1   call     0            ; @r{Call @code{current-time-string} with no}\n"
"                          ;   @r{argument, push result onto stack as "
"@code{t1}.}\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:715
#, no-wrap
msgid ""
"2:1 stack-ref 1           ; @r{Get value of the argument @code{n}}\n"
"                          ;   @r{and push the value on the stack.}\n"
"3   sub1                  ; @r{Subtract 1 from top of stack.}\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:721
#, no-wrap
msgid ""
"4   dup                   ; @r{Duplicate top of stack; i.e., copy the top}\n"
"                          ;   @r{of the stack and push copy onto stack.}\n"
"5   stack-set 3           ; @r{Pop the top of the stack,}\n"
"                          ;   @r{and set @code{n} to the value.}\n"
"\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:724
#, no-wrap
msgid ""
";; @r{(In effect, the sequence @code{dup stack-set} copies the top of}\n"
";; @r{the stack into the value of @code{n} without popping it.)}\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:731
#, no-wrap
msgid ""
"7   constant 0            ; @r{Push 0 onto stack.}\n"
"8   gtr                   ; @r{Pop top two values off stack,}\n"
"                          ;   @r{test if @var{n} is greater than 0}\n"
"                          ;   @r{and push result onto stack.}\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:736
#, no-wrap
msgid ""
"9   goto-if-not-nil 1     ; @r{Goto 1 if @code{n} > 0}\n"
"                          ;   @r{(this continues the while loop)}\n"
"                          ;   @r{else continue.}\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:742
#, no-wrap
msgid ""
"12  dup                   ; @r{Push value of @code{t1} onto stack.}\n"
"13  constant current-time-string  ; @r{Push @code{current-time-string}}\n"
"                                  ;   @r{onto the top of the stack.}\n"
"14  call     0            ; @r{Call @code{current-time-string} again.}\n"
msgstr ""

#. type: group
#: original_texis/compile.texi:747
#, no-wrap
msgid ""
"15  list2                 ; @r{Pop top two elements off stack, create a}\n"
"                          ;   @r{list of them, and push it onto stack.}\n"
"16  return                ; @r{Return value of the top of stack.}\n"
msgstr ""

#. type: node
#: original_texis/compile.texi:750
#, no-wrap
msgid "Native Compilation"
msgstr ""

#. type: chapter
#: original_texis/compile.texi:751
#, no-wrap
msgid "Compilation of Lisp to Native Code"
msgstr ""

#. type: cindex
#: original_texis/compile.texi:752
#, no-wrap
msgid "native compilation"
msgstr ""

#. type: cindex
#: original_texis/compile.texi:753
#, no-wrap
msgid "compilation to native code (Emacs Lisp)"
msgstr ""

#. type: cindex
#: original_texis/compile.texi:755
#, no-wrap
msgid "native code"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:764
msgid ""
"In addition to the byte-compilation, described in @ref{Byte Compilation, the "
"previous chapter}, Emacs can also optionally compile Lisp function "
"definitions into a true compiled code, known as @dfn{native code}.  This "
"feature uses the @file{libgccjit} library, which is part of the GCC "
"distribution, and requires that Emacs be built with support for using that "
"library.  It also requires GCC and Binutils (the assembler and linker) to be "
"available on your system for you to be able to native-compile Lisp code."
msgstr ""

#. type: vindex
#: original_texis/compile.texi:765
#, no-wrap
msgid "native-compile@r{, a Lisp feature}"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:769
msgid ""
"To determine whether the current Emacs process can produce and load "
"natively-compiled Lisp code, call @code{native-comp-available-p} "
"(@pxref{Native-Compilation Functions})."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:775
msgid ""
"Unlike byte-compiled code, natively-compiled Lisp code is executed directly "
"by the machine's hardware, and therefore runs at full speed that the host "
"CPU can provide.  The resulting speedup generally depends on what the Lisp "
"code does, but is usually 2.5 to 5 times faster than the corresponding "
"byte-compiled code."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:783
msgid ""
"Since native code is generally incompatible between different systems, the "
"natively-compiled code is @emph{not} transportable from one machine to "
"another, it can only be used on the same machine where it was produced or on "
"very similar ones (having the same CPU and run-time libraries).  The "
"transportability of natively-compiled code is the same as that of shared "
"libraries (@file{.so} or @file{.dll} files)."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:794
msgid ""
"Libraries of natively-compiled code include crucial dependencies on Emacs "
"Lisp primitives (@pxref{What Is a Function}) and their calling conventions, "
"and thus Emacs usually won't load natively-compiled code produced by earlier "
"or later Emacs versions; native compilation of the same Lisp code by a "
"different Emacs version will usually produce a natively-compiled library "
"under a unique file name that only that version of Emacs will be able to "
"load.  However, the use of unique file names enables several versions of the "
"same Lisp library natively-compiled by several different versions of Emacs "
"to be placed within the same directory."
msgstr ""

#. type: vindex
#: original_texis/compile.texi:795
#, no-wrap
msgid "no-native-compile"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:802
msgid ""
"A non-@code{nil} file-local variable binding of @code{no-byte-compile} "
"(@pxref{Byte Compilation}) also disables the native compilation of that "
"file.  In addition, a similar variable @code{no-native-compile} disables "
"just the native compilation of the file.  If both @code{no-byte-compile} and "
"@code{no-native-compile} are specified, the former takes precedence."
msgstr ""

#. type: cindex
#: original_texis/compile.texi:803
#, no-wrap
msgid "native compilation, prevent writing @file{*.eln} files"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:818
msgid ""
"Sometimes there could be a need to prevent the native compilation from "
"writing its results, the @file{*.eln} files, into a subdirectory of "
"@code{user-emacs-directory} (@pxref{Init File}).  You can do that by either "
"changing the value of @code{native-comp-eln-load-path} "
"(@pxref{Native-Compilation Variables}) or by temporarily pointing the "
"@env{HOME} environment variable to a non-existing directory.  Note that the "
"latter technique might still produce a small number of @file{*.eln} files if "
"Emacs needs to generate @dfn{trampolines}, which are used if Lisp primitives "
"are advised or redefined in your Lisp code that is being natively compiled.  "
"@xref{Native-Compilation Variables, trampolines}.  Alternatively, you can "
"specify that the @file{*.eln} files are written to a non-default directory "
"using the @code{startup-redirect-eln-cache} function; "
"@pxref{Native-Compilation Functions}."
msgstr ""

#. type: section
#: original_texis/compile.texi:822 original_texis/compile.texi:824
#: original_texis/compile.texi:825
#, no-wrap
msgid "Native-Compilation Functions"
msgstr ""

#. type: menuentry
#: original_texis/compile.texi:822
msgid "Functions to natively-compile Lisp."
msgstr ""

#. type: section
#: original_texis/compile.texi:822 original_texis/compile.texi:969
#: original_texis/compile.texi:970
#, no-wrap
msgid "Native-Compilation Variables"
msgstr ""

#. type: menuentry
#: original_texis/compile.texi:822
msgid "Variables controlling native compilation."
msgstr ""

#. type: cindex
#: original_texis/compile.texi:826
#, no-wrap
msgid "native-compilation functions"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:834
msgid ""
"Native-Compilation is implemented as a side effect of byte-compilation "
"(@pxref{Byte Compilation}).  Thus, compiling Lisp code natively always "
"produces its byte code as well, and therefore all the rules and caveats of "
"preparing Lisp code for byte compilation (@pxref{Compilation Functions}) are "
"valid for native-compilation as well."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:839
msgid ""
"You can natively-compile either a single function or macro definition, or a "
"whole file of Lisp code, with the @code{native-compile} function.  "
"Natively-compiling a file will produce the @file{.eln} file with native "
"code."
msgstr ""

#. type: findex
#: original_texis/compile.texi:840
#, no-wrap
msgid "native-comp-limple-mode"
msgstr ""

#. type: defopt
#: original_texis/compile.texi:841 original_texis/compile.texi:1032
#, no-wrap
msgid "native-comp-verbose"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:850
msgid ""
"Native compilation might produce warning or error messages; these are "
"normally recorded in the buffer called @file{*Native-compile-Log*}.  In "
"interactive sessions, it uses the special LIMPLE mode "
"(@code{native-comp-limple-mode}), which sets up @code{font-lock} as "
"appropriate for this log, and is otherwise the same as Fundamental mode.  "
"Logging of messages resulting from native-compilation can be controlled by "
"the @code{native-comp-verbose} variable (@pxref{Native-Compilation "
"Variables})."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:855
msgid ""
"When Emacs is run non-interactively, messages produced by native-compilation "
"are reported by calling @code{message} (@pxref{Displaying Messages}), and "
"are usually displayed on the standard error stream of the terminal from "
"which Emacs was invoked."
msgstr ""

#. type: defun
#: original_texis/compile.texi:856
#, no-wrap
msgid "native-compile function-or-file &optional output"
msgstr ""

#. type: defun
#: original_texis/compile.texi:867
msgid ""
"This function compiles @var{function-or-file} into native code.  The "
"argument @var{function-or-file} can be a function symbol, a Lisp form, or a "
"name (a string) of the file which contains the Emacs Lisp source code to "
"compile.  If the optional argument @var{output} is provided, it must be a "
"string specifying the name of the file to write the compiled code into.  "
"Otherwise, if @var{function-or-file} is a function or a Lisp form, this "
"function returns the compiled object, and if @var{function-or-file} is a "
"file name, the function returns the full absolute name of the file it "
"created for the compiled code.  The output file is by default given the "
"@file{.eln} extension."
msgstr ""

#. type: defun
#: original_texis/compile.texi:872
msgid ""
"This function runs the final phase of the native compilation, which invokes "
"GCC via @file{libgccjit}, in a separate subprocess, which invokes the same "
"Emacs executable as the process that called this function."
msgstr ""

#. type: defun
#: original_texis/compile.texi:874
#, no-wrap
msgid "batch-native-compile &optional for-tarball"
msgstr ""

#. type: defun
#: original_texis/compile.texi:888
msgid ""
"This function runs native-compilation on files specified on the Emacs "
"command line in batch mode.  It must be used only in a batch execution of "
"Emacs, as it kills Emacs upon completion of the compilation.  If one or more "
"of the files fail to compile, the Emacs process will attempt to compile all "
"the other files, and will terminate with a non-zero status code.  The "
"optional argument @var{for-tarball}, if non-@code{nil}, tells the function "
"to place the resulting @file{.eln} files in the last directory mentioned in "
"@code{native-comp-eln-load-path} (@pxref{Library Search}); this is meant to "
"be used as part of building an Emacs source tarball for the first time, when "
"the natively-compiled files, which are absent from the source tarball, "
"should be generated in the build tree instead of the user's cache directory."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:900
msgid ""
"Native compilation can be run entirely asynchronously, in a subprocess of "
"the main Emacs process.  This leaves the main Emacs process free to use "
"while the compilation runs in the background.  This is the method used by "
"Emacs to natively-compile any Lisp file or byte-compiled Lisp file that is "
"loaded into Emacs, when no natively-compiled file for it is available.  Note "
"that because of this use of a subprocess, native compilation may produce "
"warning and errors which byte-compilation does not, and Lisp code may thus "
"need to be modified to work correctly.  See "
"@code{native-comp-async-report-warnings-errors} in @pxref{Native-Compilation "
"Variables} for more details."
msgstr ""

#. type: defun
#: original_texis/compile.texi:901
#, no-wrap
msgid "native-compile-async files &optional recursively load selector"
msgstr ""

#. type: defun
#: original_texis/compile.texi:911
msgid ""
"This function compiles the named @var{files} asynchronously.  The argument "
"@var{files} should be a single file name (a string) or a list of one or more "
"file and/or directory names.  If directories are present in the list, the "
"optional argument @var{recursively} should be non-@code{nil} to cause the "
"compilation to recurse into those directories.  If @var{load} is "
"non-@code{nil}, Emacs will load each file that it succeeded to compile.  The "
"optional argument @var{selector} allows control of which of @var{files} will "
"be compiled; it can have one of the following values:"
msgstr ""

#. type: item
#: original_texis/compile.texi:913
#, no-wrap
msgid "@code{nil} or omitted"
msgstr ""

#. type: table
#: original_texis/compile.texi:915
msgid "Select all the files and directories in @var{files}."
msgstr ""

#. type: item
#: original_texis/compile.texi:915
#, no-wrap
msgid "a regular expression string"
msgstr ""

#. type: table
#: original_texis/compile.texi:917
msgid "Select the files and directories whose names match the regexp."
msgstr ""

#. type: item
#: original_texis/compile.texi:917
#, no-wrap
msgid "a function"
msgstr ""

#. type: table
#: original_texis/compile.texi:921
msgid ""
"A predicate function, which will be called with each file and directory in "
"@var{files}, and should return non-@code{nil} if the file or the directory "
"should be selected for compilation."
msgstr ""

#. type: defun
#: original_texis/compile.texi:928
msgid ""
"On systems with multiple CPU execution units, when @var{files} names more "
"than one file, this function will normally start several compilation "
"subprocesses in parallel, under the control of "
"@code{native-comp-async-jobs-number} (@pxref{Native-Compilation Variables})."
msgstr ""

#. type: deffn
#: original_texis/compile.texi:930
#, no-wrap
msgid "Command emacs-lisp-native-compile"
msgstr ""

#. type: deffn
#: original_texis/compile.texi:934
msgid ""
"This command compiles the file visited by the current buffer into native "
"code, if the file was changed since the last time it was natively-compiled."
msgstr ""

#. type: deffn
#: original_texis/compile.texi:936
#, no-wrap
msgid "Command emacs-lisp-native-compile-and-load"
msgstr ""

#. type: deffn
#: original_texis/compile.texi:940
msgid ""
"This command compiles the file visited by the current buffer into native "
"code, like @code{emacs-lisp-native-compile}, but it also loads the native "
"code when the compilation finishes."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:944
msgid ""
"The following function allows Lisp programs to test whether "
"native-compilation is available at runtime."
msgstr ""

#. type: defun
#: original_texis/compile.texi:945
#, no-wrap
msgid "native-comp-available-p"
msgstr ""

#. type: defun
#: original_texis/compile.texi:951
msgid ""
"This function returns non-@code{nil} if the running Emacs process has the "
"native-compilation support compiled into it.  On systems that load "
"@file{libgccjit} dynamically, it also makes sure that library is available "
"and can be loaded.  Lisp programs that need to know up front whether "
"native-compilation is available should use this predicate."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:958
msgid ""
"By default, asynchronous native compilation writes the @file{*.eln} files it "
"produces to a subdirectory of the first writable directory specified by the "
"@code{native-comp-eln-load-path} variable (@pxref{Native-Compilation "
"Variables}).  You can change this by using the following function in your "
"startup files:"
msgstr ""

#. type: defun
#: original_texis/compile.texi:959
#, no-wrap
msgid "startup-redirect-eln-cache cache-directory"
msgstr ""

#. type: defun
#: original_texis/compile.texi:967
msgid ""
"This function arranges for the asynchronous native compilation to write the "
"produced @file{*.eln} files to @var{cache-directory}, which must be a single "
"directory, a string.  It also destructively modifies "
"@code{native-comp-eln-load-path} such that its first element is "
"@var{cache-directory}.  If @var{cache-directory} is not an absolute file "
"name, it is interpreted relative to @code{user-emacs-directory} (@pxref{Init "
"File})."
msgstr ""

#. type: cindex
#: original_texis/compile.texi:971
#, no-wrap
msgid "native-compilation variables"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:975
msgid "This section documents the variables that control native-compilation."
msgstr ""

#. type: defopt
#: original_texis/compile.texi:976
#, no-wrap
msgid "native-comp-speed"
msgstr ""

#. type: defopt
#: original_texis/compile.texi:988
msgid ""
"This variable specifies the optimization level for native compilation.  Its "
"value should be a number between @minus{}1 and 3.  Values between 0 and 3 "
"specify the optimization levels equivalent to the corresponding compiler "
"@option{-O0}, @option{-O1}, etc.@: command-line options of the compiler.  "
"The value @minus{}1 means disable native-compilation: functions and files "
"will be only byte-compiled; however, the @file{*.eln} files will still be "
"produced, they will just contain the compiled code in bytecode form.  (This "
"can be achieved at function granularity by using the @w{@code{(declare "
"(speed -1))}} form, @pxref{Declare Form}.)  The default value is 2."
msgstr ""

#. type: defopt
#: original_texis/compile.texi:991
#, no-wrap
msgid "compilation-safety"
msgstr ""

#. type: defopt
#: original_texis/compile.texi:995
msgid ""
"This variable specifies the safety level to be used for the emitted native "
"code.  The value should be a number, either 0 or 1 with the following "
"meanings:"
msgstr ""

#. type: item
#: original_texis/compile.texi:997 original_texis/compile.texi:1016
#: original_texis/compile.texi:1041
#, no-wrap
msgid "0"
msgstr ""

#. type: table
#: original_texis/compile.texi:1001
msgid ""
"Emitted code can misbehave (up to even crashing Emacs) if a function's "
"declaration does not describe correctly what the function does or how it is "
"called, and the function is natively compiled."
msgstr ""

#. type: item
#: original_texis/compile.texi:1001 original_texis/compile.texi:1018
#: original_texis/compile.texi:1043
#, no-wrap
msgid "1"
msgstr ""

#. type: table
#: original_texis/compile.texi:1004
msgid ""
"Emitted code must be generated in a safe manner even if functions are "
"mis-declared."
msgstr ""

#. type: defopt
#: original_texis/compile.texi:1008
msgid ""
"This can also be controlled at a function granularity, by using the "
"@code{safety} @code{declare} form, @pxref{Declare Form}."
msgstr ""

#. type: defopt
#: original_texis/compile.texi:1010
#, no-wrap
msgid "native-comp-debug"
msgstr ""

#. type: defopt
#: original_texis/compile.texi:1014
msgid ""
"This variable specifies the level of debugging information produced by "
"native-compilation.  Its value should be a number between zero and 3, with "
"the following meaning:"
msgstr ""

#. type: table
#: original_texis/compile.texi:1018
msgid "No debugging output.  This is the default."
msgstr ""

#. type: table
#: original_texis/compile.texi:1021
msgid ""
"Emit debugging symbols with the native code.  This allows easier debugging "
"of the native code with debuggers such as @command{gdb}."
msgstr ""

#. type: item
#: original_texis/compile.texi:1021 original_texis/compile.texi:1045
#, no-wrap
msgid "2"
msgstr ""

#. type: table
#: original_texis/compile.texi:1023
msgid "Like 1, and in addition dump pseudo-C code."
msgstr ""

#. type: item
#: original_texis/compile.texi:1023 original_texis/compile.texi:1048
#, no-wrap
msgid "3"
msgstr ""

#. type: table
#: original_texis/compile.texi:1026
msgid ""
"Like 2, and in addition dump the GCC intermediate passes and "
"@file{libgccjit} log file."
msgstr ""

#. type: defopt
#: original_texis/compile.texi:1030
msgid ""
"When generated, the pseudo-C code is deposited in the same directory as the "
"corresponding @file{.eln} file."
msgstr ""

#. type: defopt
#: original_texis/compile.texi:1039
msgid ""
"This variable controls the verbosity of native-compilation by suppressing "
"some or all of the log messages emitted by it.  If its value is zero, the "
"default, all of the log messages are suppressed.  Setting it to a value "
"between 1 and 3 will allow logging of the messages whose level is above the "
"value.  The values have the following interpretations:"
msgstr ""

#. type: table
#: original_texis/compile.texi:1043
msgid "No logging.  This is the default."
msgstr ""

#. type: table
#: original_texis/compile.texi:1045
msgid "Log the final @acronym{LIMPLE} representation of the code."
msgstr ""

#. type: table
#: original_texis/compile.texi:1048
msgid ""
"Log the @acronym{LAP}, the final @acronym{LIMPLE}, and some additional pass "
"info."
msgstr ""

#. type: table
#: original_texis/compile.texi:1050
msgid "Maximum verbosity: log everything."
msgstr ""

#. type: defopt
#: original_texis/compile.texi:1053
#, no-wrap
msgid "native-comp-async-jobs-number"
msgstr ""

#. type: defopt
#: original_texis/compile.texi:1059
msgid ""
"This variable determines the maximum number of native-compilation "
"subprocesses that will be started simultaneously.  It should be a "
"non-negative number.  The default value is zero, which means use half the "
"number of the CPU execution units, or 1 if the CPU has only one execution "
"unit."
msgstr ""

#. type: defopt
#: original_texis/compile.texi:1061
#, no-wrap
msgid "native-comp-async-report-warnings-errors"
msgstr ""

#. type: defopt
#: original_texis/compile.texi:1068
msgid ""
"If this variable's value is non-@code{nil}, warnings and errors from "
"asynchronous native-compilation subprocesses are reported in the main Emacs "
"session in a buffer named @file{*Warnings*}.  The default value @code{t} "
"means display the resulting buffer.  To log warnings without popping up the "
"@file{*Warnings*} buffer, set this variable to @code{silent}."
msgstr ""

#. type: defopt
#: original_texis/compile.texi:1074
msgid ""
"A common cause for asynchronous native-compilation to produce warnings is "
"compiling a file that is missing some @code{require} of a necessary "
"feature.  The feature may be loaded into the main emacs, but because native "
"compilation always starts from a subprocess with a pristine environment, "
"that may not be true for the subprocess."
msgstr ""

#. type: defopt
#: original_texis/compile.texi:1076
#, no-wrap
msgid "native-comp-async-query-on-exit"
msgstr ""

#. type: defopt
#: original_texis/compile.texi:1082
msgid ""
"If this variable's value is non-@code{nil}, Emacs will query upon exiting "
"whether to exit and kill any asynchronous native-compilation subprocesses "
"that are still running, thus preventing the corresponding @file{.eln} files "
"from being written.  If the value is @code{nil}, the default, Emacs will "
"kill these subprocesses without querying."
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:1093
msgid ""
"The variable @code{native-comp-eln-load-path} holds the list of directories "
"where Emacs looks for the @file{*.eln} files (@pxref{Library Search}); in "
"that role it is the equivalent of @code{load-path} used to look for "
"@file{*.el} and @file{*.elc} files.  The directories in this list are also "
"used for writing the @file{*.eln} files produced by asynchronous "
"native-compilation; specifically, Emacs will write these files into the "
"first writable directory in the list.  Thus, you can control where "
"native-compilation stores the results by changing the value of this "
"variable."
msgstr ""

#. type: cindex
#: original_texis/compile.texi:1094
#, no-wrap
msgid "disable asynchronous native compilation"
msgstr ""

#. type: cindex
#: original_texis/compile.texi:1095
#, no-wrap
msgid "inhibit asynchronous native compilation"
msgstr ""

#. type: cindex
#: original_texis/compile.texi:1096
#, no-wrap
msgid "asynchronous native compilation, disable"
msgstr ""

#. type: defvar
#: original_texis/compile.texi:1097
#, no-wrap
msgid "native-comp-jit-compilation"
msgstr ""

#. type: defvar
#: original_texis/compile.texi:1107
msgid ""
"This variable, if non-@code{nil}, enables asynchronous (a.k.a.@: "
"@dfn{just-in-time}, or @acronym{JIT}) native compilation of the @file{*.elc} "
"files loaded by Emacs for which the corresponding @file{*.eln} files do not "
"already exist.  This JIT compilation uses separate Emacs sub-processes "
"running in batch mode, according to the value of "
"@code{native-comp-async-jobs-number}.  When the JIT compilation of a Lisp "
"file finishes successfully, the resulting @file{.eln} file is loaded and its "
"code replaces the definition of functions provided by the @file{.elc} file."
msgstr ""

#. type: cindex
#: original_texis/compile.texi:1109
#, no-wrap
msgid "trampolines, in native compilation"
msgstr ""

#. type: Plain text
#: original_texis/compile.texi:1115
msgid ""
"Setting the value of @code{native-comp-jit-compilation} to @code{nil} "
"disables JIT native compilation.  However, even when JIT native compilation "
"is disabled, Emacs might still need to start asynchronous native compilation "
"subprocesses to produce @dfn{trampolines}.  To control this, use a separate "
"variable, described below."
msgstr ""

#. type: defvar
#: original_texis/compile.texi:1116
#, no-wrap
msgid "native-comp-enable-subr-trampolines"
msgstr ""

#. type: defvar
#: original_texis/compile.texi:1132
msgid ""
"This variable controls generation of trampolines.  A trampoline is a small "
"piece of native code required to allow calling Lisp primitives, which were "
"advised or redefined, from Lisp code that was natively-compiled with "
"@code{native-comp-speed} set to 2 or greater.  Emacs stores the generated "
"trampolines on separate @file{*.eln} files.  By default, this variable's "
"value is @code{t}, which enables the generation of trampoline files; setting "
"it to @code{nil} disables the generation of trampolines.  Note that if a "
"trampoline needed for advising or redefining a primitive is not available "
"and cannot be generated, calls to that primitive from natively-compiled Lisp "
"will ignore redefinitions and advices, and will behave as if the primitive "
"was called directly from C.  Therefore, we don't recommend disabling the "
"trampoline generation, unless you know that all the trampolines needed by "
"your Lisp programs are already compiled and accessible to Emacs."
msgstr ""

#. type: defvar
#: original_texis/compile.texi:1145
msgid ""
"The value of this variable can also be a string, in which case it specifies "
"the name of a directory in which to store the generated trampoline "
"@file{*.eln} files, overriding the directories in "
"@code{native-comp-eln-load-path}.  This is useful if you want the "
"trampolines to be generated as needed, but don't want to store them under "
"the user's @env{HOME} directory or in the other public directories where "
"@file{*.eln} files are kept.  However, unlike with directories in "
"@code{native-comp-eln-load-path}, the trampolines will be stored in the "
"directory given by the value of this variable, not in its version-specific "
"subdirectory.  If the name of this directory is not absolute, it is "
"interpreted relative to @code{invocation-directory} (@pxref{System "
"Environment})"
msgstr ""

#. type: defvar
#: original_texis/compile.texi:1150
msgid ""
"If this variable is non-@code{nil}, and Emacs needs to produce a trampoline, "
"but it cannot find any writable directory to store the trampoline, it will "
"store it inside @code{temporary-file-directory} (@pxref{Unique File Names})."
msgstr ""

#. type: defvar
#: original_texis/compile.texi:1155
msgid ""
"Trampolines produced when no writable directory is found to store them, or "
"when this variable is a string, will only be available for the duration of "
"the current Emacs session, because Emacs doesn't look for trampolines in "
"either of these places."
msgstr ""
