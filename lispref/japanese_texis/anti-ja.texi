@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1999, 2002--2020 Free Software Foundation, Inc.
@c See the file elisp-ja.texi for copying conditions.

@c This node must have no pointers.

@node Antinews
@appendix Emacs 26のアンチニュース
@c Update the elisp-ja.texi Antinews menu entry with the above version number.

時代に逆らって生きるユーザーのために、以下はEmacsバージョン26.3へのダウングレードに関する情報です。@w{Emacs
@value{EMACSVER}}機能の不在による結果としての偉大なる単純さをぜひ堪能してください。

@itemize @bullet
@item
CレベルでのLispオヴジェクトは再びポインターから整数で実装されるようになりました。これはEmacs
Lispのユーザーにとっては小さなステップかもしれませんが、Cレベルで作業するEmacsユーザーにとっては大きな飛躍です。なぜならデバッガでLispオブジェクトを10進フォーマットで再び簡単にプリントできるようになったからです(デバッグ中ならとても簡単にできる)。これによりデバッガからEmacs関数を呼び出すのが簡単になり、Cコードで整数とLispオブジェクトを混ぜ合せるのが簡単になりました。

@item
配布用tarballからテストスーツを削除しました。わたしたちは今までに実行されたテストは、特にエンドユーザーにとって不必要と信じています。テストを削除することによりtarballのサイズは小さくなり、これは時代を遡るにつれてディスクスペースはより高価になっていくので重要なことなのです。

@item
ダイナミックモジュールのサポートはデフォルトで無効になりました。これによりEmacsが軽量化される(これ自体が価値あるゴール)とともに、モジュールサポートファイルのインストールに関する混乱と余計な複雑化、ランダム共有オブジェクトをEmacsに共有させてEmacsを混乱させる機会を削除しました。

@item
インストール済みパッケージは、initファイルのロード後にのみアクティブ化を行わなければなりません。これにはinitファイル内での明示的な@code{package-initialize}呼び出しが必要です。これはあなたのセッションのどこで、本当にパッケージを利用可能にしたいのかを、あなたに真剣に考えさせる点においてよい事なのです。利便性は素朴さによって踏破されるべきです!

@item
重要でなはい機能に関連するEmacsのコード量を削減するために、イメージのネイティブなローテーションとリサイズを削除しました。Emacs内部でイメージのリサイズやローテートを行いたければ、ImageMagickとともにEmacsをビルドする必要があります。これを失念する人がいるとは思えません。

@item
XFTフォントバックエンドによるカラーフォントの使用を再び有効化しました。わたしたちはそこかしこでランダムに発生するクラッシュよりも、これらのフォントの可用性のほうが重要だと考えます。特にEmojiを表示するためのこれらのフォントの使用は時代を遡るにつれて重要さを失い、Emacsのより過去のバージョンでは完全に消滅するはずだからです。

@item
関数@code{network-interface-list}はIPv4アドレスだけをリターンできるようになりました。わたしたちはIPv6がもたらす複雑性はその正当性を大きく凌駕すると考えており、その一方でIPv6は時代を逆行するにつれて完全に消え去ることが予想されていることから、IPv6の削除は正しい方向に向けたステップなのです。

@item
正規表現における繰り返しリミットは
@ifnottex
2**15 @minus{} 1に削減されました。
@end ifnottex
@tex
@math{2^{15}-1}に削減されました。
@end tex
わたしたちの想定では遠い過去へと向うにつれて、正規表現はよりシンプルになっていくはずです。

@item
コード単純化と複雑性低減のために、@code{executable-find}におけるリモートホストでのプログラム検索能力を削除しました。本当にこの機能が必要(何故に?)なら、いつでも独自のシェルスクリプトを記述してリモートホスト上で実行することができます。

@item
フェイス属性@code{:extend}は利用できなくなりました。すべてのフェイスのバックグラウンドカラーは、デフォルトでは行末を超えて拡張されます。これはフェイス管理を有意に簡略化と不必要なコードの増殖の削除、同様にフェイスの理解と使用を大幅に簡略化するはずです。

@item
@code{display-blink-cursor-p}および@code{display-symbol-keys-p}の述語を削除しました。これらが必要になるのは稀であり、@code{display-graphic-p}のような旧来の実証済みな適切なAPI呼び出しで簡単に置き換えることができます。追加ボーナスとしてこの機能に依存するLispプログラムを記述することにより、そのディスプレイ端末において真に必要な機能は何なのかを、プログラマーにより深く理解させることが保証されます。

@item
環境変数@env{HOME}の値内の相対ディレクトリーは、再びカレントバッファーの@code{default-directory}に相対的と解釈されるようになりました。こちらのほうがより単純であり、さらにバッファーが異なれば@env{HOME}が異なる場所に解決されるために、いくつかの興味深いアプリケーションが可能になります。

同様の理由により、既知のユーザー@samp{foo}が存在しなくても、@code{file-name-absolute-p}は@file{~foo}を再び絶対ファイル名とみなすようになりました。これはそのようなファイル名を使用するLispプログラムが、すべてのシステムにおいて、ユーザーが既知であるかどうかとは無関係に常に同じように機能することを意味します。

@item
@code{file-attributes}、@code{file-modes}、@code{file-newer-than-file-p}、およびその他のファイル関連のプリミティブは、基盤となる低レベルAPIの失敗時にはエラーをシグナルするかわりに再び@code{nil}をリターンするようになりました。エラーをシグナルする関数は、それを使用するLispプログラムにたいしてより複雑なコードを要求すると判断するとともに、@code{nil}をリターンするようにした際にはこの複雑性は不当であることを見出しました。

@item
同様に旧スタイルのバッククォートはエラーをシグナルするのではなく、警告を生成するようになりました。これでバッククォートを使用するプログラムからエラー処理を削除することができます。

@item
浮動小数点数のフォーマットは、数値が正確にフォーマットできないほど大きい場合にエラーをシグナルするかわりに、予測不可能な値を背景となる実装に生成させることにより高速化されました。わたしたちはEmacs
Lispプログラマーは浮動小数点値を扱う際には、自分が何を行っているかを常に承知していると信じています。

@item
関数@code{read-char-from-minibuffer}を削除しました。わたしたちはEmacs
Lispハッカーにとって座して別種のインタラクティブなQ&A関数を記述して、それを特定のケースごとに最適化するに優る喜びはないという認識の元に、ユーザーにたいして1文字の入力を尋ねる必要があるすべてのLispプログラムにとっては@code{read-char}で十分なはずだと判断しました。その結果としてそのような応答のヒストリーは提供されません(いずれにせよ、誰が何故に単一キーストロークのヒストリーを望むのか?)。

@item
関数@code{ngettext}を削除しました。時代を遡るにつれて英語以外の言語は普及しなくなり、それが便利であることは言うまでもないことなので、わたしたちはこの方向に向けて小さなステップを踏にだすとともに、イカしたボーナスとしてEmacsを簡略化しました。

@item
テキストモードフレームでのフォーカス変更通知はもはや認識されず、サポートされません。これでTTYフレーム上のそのような通知を受信する可能性を安全に無視できるようになりました。これはTTYフレーム上でのすべての非文字の入力イベントにたいするEmacsサポートの削除という長い道程に向けた小さな一歩です。

@item
@code{face-remapping-alist}内のフェイス仕様は同一バッファーを表示するウィンドウ間の差異とな無関係にバッファー固有であることが要求されます。これによりEmacsから不必要なコードの肥大化を防ぐとともに、フェイス処理がより単純化されます。

@item
フォーマット@samp{%o}および@samp{%x}は、あなたが期待通り常に符号なしの値を生成するようになりました。これによってあなたは背後にあるアーキテクチャーごとに異なるマシン表現(わたしたちはこれを何か価値のある機能とみなしている)を暴くことが可能になりました。

@item
わたしたちはもはやU+2018のような紛らわしい引用符を含むシンボルを@code{font-lock-warning-face}でハイライトしません。これらの検出には無視できない量のコードが必要であり、Lispプログラマーは自分が何をしているか常に承知していて、目障りで紛らわしい書体に煩わされる必要などないとわたしたちは固く信じています。

@item
関数@code{file-system-info}は@command{df}呼び出しと出力の解析が常に可能なことから、Posixプラットフォームで削除しました。

@item
@samp{base64url}エンコーディングを実装する関数は、通常のbase-64エンコーディングを適切に調整することで常にエミュレートできるので削除しました。Emacsの肥大化、およびこれのためにLispプログラマーにさらなるインターフェースの学習を強いる必要はありません。

@item
簡略化にたいする継続要求の一環として、他の多くの関数と変数が排除されました。
@end itemize
