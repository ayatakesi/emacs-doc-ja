@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================

@c -*- mode: texinfo; coding: utf-8 -*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990--1993, 1995, 1998--1999, 2001--2024 Free Software
@c Foundation, Inc.
@c See the file elisp-ja.texi for copying conditions.
@node Tips
@appendix ヒントと規約
@cindex tips for writing Lisp
@cindex standards of coding style
@cindex coding standards
@cindex best practices

  このチャプターでではEmacs Lispの追加機能については説明しません。かわりに以前のチャプターで説明した機能を効果的に使う方法、およびEmacs
Lispプログラマーがしたがうべき慣習を説明します。

@findex checkdoc
@findex checkdoc-current-buffer
@findex checkdoc-file
  以降で説明する慣習のいくつかはLispファイルのvisit時にコマンド@kbd{M-x checkdoc
@key{RET}}を実行することにより自動的にチェックできます。これはすべての慣習はチェックできませんし、与えられた警告すべてが必ずしも問題に対応する訳ではありませんが、それらすべてを検証することには価値があります。カレントバッファーの慣習をチェックするにはコマンド@kbd{M-x
checkdoc-current-buffer @key{RET}}、(たとえば@kbd{@w{M-x compile
@key{RET}}}で実行するコマンドとともに)batchモードでファイルをチェックしたければ@code{checkdoc-file}をかわりに使用してください。

@menu
* Coding Conventions::       明快で堅牢なプログラムにたいする慣習。
* Key Binding Conventions::  どのキーをどのプログラムにバインドすべきか。
* Programming Tips::         Emacsコードを円滑にEmacsに適合させる。
* Compilation Tips::         コンパイル済みコードの実行を高速にする。
* Warning Tips::             コンパイラー警告をオフにする。
* Documentation Tips::       読みやすいドキュメント文字列の記述。
* Comment Tips::             コメント記述の慣習。
* Library Headers::          ライブラリーパッケージにたいする標準的なヘッダー。
@end menu

@node Coding Conventions
@section Emacs Lispコーディング規約

@cindex coding conventions in Emacs Lisp
@cindex conventions for Emacs Lisp programs
  以下は幅広いユーザーを意図したEmacs Lispコードを記述する際にしたがうべき慣習です:

@itemize @bullet
@item
単なるパッケージのロードがEmacsの編集の挙動を変更するべききではない。コマンド、その機能を有効や無効にするコマンド、その呼び出しが含まれる。

この慣習はカスタム定義を含むすべてのファイルに必須である。そのようなファイルを慣習にしたがうために修正するのが非互換の変更を要するなら、構うことはないから非互換の修正を行うこと。先送りにしてはならない。

@item
他のLispプログラムと区別するための短い単語を選択すること。あなたのプログラム内のグローバルなシンボルすべて、すなわち変数、定数、関数の名前はその選択したプレフィクスで始まること。そのプレフィクスと名前の残りの部分はハイフン@samp{-}で区切る。Emacs
Lisp内のすべてのグローバル変数は同じネームスペース、関数はすべて別のネームスペースを共有するので、これの実践は名前の競合を回避する@footnote{Common
Lispスタイルのパッケージシステムの恩恵はコストを上回るとは考えられない。}。他のパッケージから使用されることを意図しない場合にはプレフィクスと名前を2つのハイフンで区切ること。

ユーザーの使用を意図したコマンド名では、何らかの単語がそのパッケージ名のプレフィクスの前にあると便利なことがある。たとえばわたしちの慣習ではオブジェクトをリストするコマンドの名前なら@samp{list-@var{something}}、すなわち@samp{frob}と呼ばれるパッケージのグローバルシンボルが@samp{frob-}で始まれば@samp{list-frobs}というコマンドをもつかもしれない。さらに関数や変数等を定義する構文が@samp{define-}で始まればより良く機能するので、名前内でそれらの後に名前プレフィクスを置くこと。

この勧告は@code{copy-list}のようなEmacs
Lisp内のプリミティブではなく、伝統的なLispプリミティブにさえ適用される。信じようと信じまいと@code{copy-list}を定義する尤もらしい方法は複数あるのだ。安全第一である。かわりに@code{foo-copy-list}や@code{mylib-copy-list}のような名前を生成するために、あなたの名前プレフィクスを追加しよう。

@code{twiddle-files}のような特定の名前でEmacsに追加されるべきだと考えている関数を記述する場合には、プログラム内でそれを名前で呼び出さないこと。プログラム内ではそれを@code{mylib-twiddle-files}で呼び出して、わたしたちがそれをEmacsに追加するため提案メールを、@samp{bug-gnu-emacs@@gnu.org}に送信すること。もし追加することになったときに、わたしたちは十分容易にその名前を変更できるだろう。

1つのプレフィクスで十分でなければ、それらに意味があるかぎり、あなたのパッケージは2つか3つの一般的なプレフィクス候補を使用できる。

@item
新しいコードでは@code{lexical-binding}を有効にすること、まだ有効にされていない既存のEmacs
Lispコードでは@code{lexical-binding}を有効にするよう変換することを推奨する。@ref{Selecting Lisp
Dialect}を参照のこと。

@item
個々のLispファイルすべての終端に@code{provide}呼出を配置すること。@ref{Named Features}を参照のこと。

@item
事前に他の特定のLispプログラムのロードを要するファイルはファイル先頭のコメントでそのように告げるべきである。また、それらが確実にロードされるように@code{require}を使用すること。@ref{Named
Features}を参照のこと。

@item
ファイル@var{foo}が別のファイル@var{bar}内で定義されたマクロを使用するが、@var{bar}内の他の関数や変数を何も使用しない場合には@var{foo}に以下の式を含めること:

@example
(eval-when-compile (require '@var{bar}))
@end example

@noindent
これは@var{foo}のバイトコンパイル直前に@var{bar}をロードするようEmacsに告げるので、そのマクロはコンパイル中は利用可能になる。@code{eval-when-compile}の使用によりコンパイル済みバージョンの@var{foo}が@emph{中古}なら@var{bar}のロードを避けられる。これはファイル内の最初のマクロ呼び出しの前に呼び出すこと。@ref{Compiling
Macros}を参照のこと。

@item
実行時に本当に必要でなければ、追加ライブラリーのロードを避けること。あなたのファイルが単に他のいくつかのライブラリーなしでは機能しないなら、トップレベルでそのライブラリーを単に@code{require}してこれを行うこと。しかしあなたのファイルがいくつかの独立した機能を含み、それらの1つか2つだけが余分なライブラリーを要するなら、トップレベルではなく関連する関数内部への@code{require}の配置を考慮すること。または必要時に余分のライブラリーをロードするために@code{autoload}ステートメントを使用すること。この方法ではあなたのファイルの該当部分を使用しない人は、余分なライブラリーをロードする必要がなくなる。

@item
Common
Lisp拡張が必要なら古い@code{cl}ライブラリーではなく、@code{cl-lib}ライブラリーを使うこと。@code{cl}ライブラリーは非推奨でありEmacsの将来バージョンでは削除されるだろう。

@item
メジャーモードを定義する際にはメジャーモードの慣習にしたがってほしい。@ref{Major Mode Conventions}を参照のこと。

@item
マイナーモードを定義する際にはマイナーモードの慣習にしたがってほしい。@ref{Minor Mode Conventions}を参照のこと。

@item
ある関数の目的が特定の条件の真偽を告げることであるなら、(述語である``predicate''を意味する)
@samp{p}で終わる名前を与えること。その名前が1単語なら単に@samp{p}、複数単語なら@samp{-p}を追加する。例は@code{framep}や@code{frame-live-p}。変数が述語関数でないなら、この@code{-p}サフィックスの使用を避けるよう推奨する。かわりに@code{-flag}サフィックスや@code{is-foo}のような名前を使用すること。

@item
ある変数の目的が単一の関数の格納にあるなら、@samp{-function}で終わる名前を与えること。ある変数の目的が関数のリストの格納にあるなら(たとえばその変数がフックなら)、フックの命名規約にしたがってほしい。@ref{Hooks}を参照のこと。

@item
@cindex unloading packages, preparing for
@code{unload-feature}を使用することで、通常は機能のロードにより行われる(フックへの関数追加のような)変更がアンドゥされる。しかし@var{feature}のロードが何か特殊で複雑なことを行う場合には、@code{@var{feature}-unload-function}という名前の関数を定義して、そのような特別な変更をアンドゥさせることができる。この関数が存在する場合には、@code{unload-feature}は自動的にそれを実行する。@ref{Unloading}を参照のこと。

@item
Emacsのプリミティブにエイリアスを定義するのは悪いアイデアである。かわりに通常は標準の名前を使用すること。エイリアスが有用になるかもしれないケースは後方互換性や可搬性を向上させる場合である。

@item
パッケージで別のバージョンのEmacsにたいする互換性のためにエイリアスや新たな関数の定義が必要なら、別のバージョンにあるそのままの名前ではなくパッケージのプレフィクスを名前に付加すること。以下はそのような互換性問題を多く提供するGnusでの例。

@example
(defalias 'gnus-point-at-bol
  (if (fboundp 'point-at-bol)
      'point-at-bol
    'line-beginning-position))
@end example

@item
Emacsのプリミティブの再定義やadviseは悪いアイデアである。これは特定のプログラムには正しいことを行うが結果として他のプロラムが破壊されるかもしれない。

@item
同様にあるLispパッケージで別のLispパッケージ内の関数にadviseするのも悪いアイデアである。

@item
ライブラリやパッケージでの@code{eval-after-load}と@code{with-eval-after-load}の使用を避けること(@ref{Hooks
for
Loading}を参照)。この機能は個人的なカスタマイズを意図している。Lispプログラム内でこれを使用すると別のLisp内ではそれが見えず、その挙動を変更するために不明瞭になる。これは別のパッケージ内の関数へのadviseと同様にデバッグの障害になる。

@item
Emacsの標準的な関数やライブラリープログラムの何かをファイルが置換するなら、そのファイル冒頭の主要コメントでどの関数が置換されるか、置換によりオリジナルと挙動がどのように異なるかを告げること。

@item
関数や変数を定義するコンストラクターは関数ではなくマクロにして名前は@samp{define-}で始まること。そのマクロは定義される名前を1つ目の引数で受け取ること。これは自動的に定義を探す種々のツールの助けとなる。マクロ自身の中でその名前を構築するのは、それらのツールを混乱させるので避けること。

@item
別のいくつかのシステムでは@samp{*}が先頭や終端にある変数名を選択する慣習がある。Emacs
Lispではその慣習を使用しないので、あなたのプログラム内でそれを使用しないでほしい(Emacsでは特別な目的をもつバッファーだけにそのような名前を使用する)。すべてのライブラリーが同じ慣習を使用するなら人はEmacsがより整合性があることを見い出すだろう。

@item
Emacs LispソースファイルのデフォルトのファイルコーディングシステムはUTFである(@ref{Text
Representations}を参照)。あなたのプログラムがUTF-8@emph{以外}の文字を含むような稀なケースでは、ソースファイル内の@samp{-*-}行かローカル変数リスト内で適切なコーディングシステムを指定すること。@ref{File
Variables, , Local Variables in Files, emacs, The GNU Emacs Manual}を参照のこと。

@item
デフォルトのインデントパラメーターでファイルをインデントすること。

@item
自分で行に閉カッコを配置するのを習慣としてはならない。Lispプログラマーはこれに当惑させられる。

@item
コピーを配布する場合は著作権表示と複製許可表示を配置してほしい。@ref{Library Headers}を参照のこと。

@item
ファイルやディレクトリーの名前を保持する変数(およびそれらをリターンする関数)では名前に@code{path}を使うことを避けて、かわりに@code{file}、@code{file-name}、@code{directory}を優先して使用すること。なぜならGNUコーディング規約では検索パス(ディレクトリー名のリスト)だけに@emph{path}という用語を用いることになっており、Emacsはそれを遵守するからである。

@end itemize

@node Key Binding Conventions
@section キーバインディング規約
@cindex key binding, conventions for
@cindex conventions for key bindings

@itemize @bullet
@item
@cindex mouse-2
@cindex references, following
Dired、Info、Compilation、Occurなどの多くのメジャーモードでは@dfn{ハイパーリンク}を含む読み取り専用テキストを処理するようデザインされている。そのようなメジャーモードはリンクをフォローするように@kbd{mouse-2}と@key{RET}を再定義すること。そのリンクが@code{mouse-1-click-follows-link}にしたがうように@code{follow-link}条件もセットアップすること。@ref{Clickable
Text}を参照のこと。そのようなクリック可能リンクを実装する簡便な手法については@ref{Buttons}を参照のこと。

@item
@cindex reserved keys
@cindex keys, reserved
Lispプログラム内のキーとして@kbd{C-c
@var{letter}}を定義してはならない。@kbd{C-c}とアルファベット(@acronym{ASCII}および非@acronym{ASCII}の大文字と小文字の両方)からなるシーケンスはユーザー用に予約済みである。これらはユーザー用として@strong{唯一}予約されたシーケンスなので阻害してはならない。

すべてのメジャーモードがこの慣習を尊重するよう変更するには多大な作業を要する。この慣習を捨て去ればそのような作業は不要になりユーザーは不便になるだろう。この慣習を遵守してほしい。

@item
修飾キーなしの@key{F5}から@key{F9}までのファンクションキーもユーザー定義用に予約済み。

@item
後にコントロールキーか数字が続く@kbd{C-c}シーケンスはメジャーモード用に予約済みである。

@item
後に@kbd{@{}、@kbd{@}}、@kbd{<}、@kbd{>}、
@kbd{:}、@kbd{;}が続く@kbd{C-c}シーケンスもメジャーモード用に予約済み。

@item
後に他の@acronym{ASCII}区切り文字やシンボル文字が続く@kbd{C-c}シーケンスはマイナーモードに割り当てられている。メジャーモード内でのそれらの使用は絶対禁止ではないが、もしそれを行えばそのメジャーモードがマイナーモードにより時々シャドーされるかもしれない。

@item
後にプレフィクス文字(@kbd{C-c}を含む)が続く@kbd{C-h}をバインドしてはならない。@kbd{C-h}をバインドしなければ、そのプレフィクス文字をもつサブコマンドをリストするためのヘルプ文字として自動的に利用可能になる。

@item
別の@key{ESC}が後に続く場合を除き@key{ESC}で終わるキーシーケンスをバインドしてはならない(つまり@kbd{@key{ESC}
@key{ESC}}で終わるキーシーケンスのバインドはOK)。

このルールの理由は任意のコンテキストにおける非プレフィクスであるような@key{ESC}のバインディングは、そのコンテキストにおいてファンクションキーとなるようなエスケープシーケンスの認識を阻害するからである。

@item
同様に@kbd{C-g}は一般的にはキーシーケンスのキャンセルに使用されるので、@kbd{C-g}で終わるキーシーケンスをバインドしてはならない。

@item
一時的なモードやユーザーが出入り可能な状態のような動作は、すべてエスケープ手段として@kbd{@key{ESC}
@key{ESC}}か@kbd{@key{ESC} @key{ESC} @key{ESC}}を定義すること。

通常のEmacsコマンドを受け入れる状態、より一般的には後にファンクションキーか矢印キーが続く@key{ESC}内のような状態は潜在的な意味をもつので@kbd{@key{ESC}
@key{ESC}}を定義してはならない。なぜならそれは@key{ESC}の後のエスケープシーケンスの認識を阻害するからである。これらの状態においては、エスケープ手段として@kbd{@key{ESC}
@key{ESC} @key{ESC}}を定義すること。それ以外ならかわりに@kbd{@key{ESC} @key{ESC}}を定義すること。
@end itemize

@node Programming Tips
@section Emacsプログラミングのヒント
@cindex programming conventions
@cindex conventions for Emacs programming

  以下の慣習にしたがうことによりあなたのプログラムが実行時によりEmacsに適合するようになります。

@itemize @bullet
@item
プログラム内で@code{next-line}や@code{previous-line}を使用してはならない。ほとんど常に@code{forward-line}のほうがより簡便であり、より予測可能かつ堅牢である。@ref{Text
Lines}を参照のこと。

@item
あなたのプログラム内でマークのセットが意図した機能でないなら、マークをセットする関数を呼び出してはならない。マークはユーザーレベルの機能なので、ユーザーの益となる値を提供する場合を除きマークの変更は間違いである。@ref{The
Mark}を参照のこと。

特に以下の関数は使用しないこと:

@itemize @bullet
@item
@code{beginning-of-buffer}、@code{end-of-buffer}
@item
@code{replace-string}、@code{replace-regexp}
@item
@code{insert-file}、@code{insert-buffer}
@end itemize

インタラクティブなユーザーを意図した別の機能がないのにポイントの移動、特定の文字列の置換、またはファイルやバッファーのコンテンツを挿入したいだけなら単純な1、2行のLispコードでそれらの関数を置き換えられる。

@item
ベクターを使用する特別な理由がある場合を除きベクターではなくリストを使用すること。Lispではベクターよりリストを操作する機能のほうが多く、リストを処理するほうが通常は簡便である。

要素の挿入や削除がなく(これはリストだけで可能)、ある程度のサイズがあって、(先頭か末尾から検索しない)ランダムアクセスがあるテーブルではベクターが有利。

@item
エコーエリア内にメッセージを表示する推奨方法は@code{princ}ではなく@code{message}関数。@ref{The Echo
Area}を参照のこと。

@item
エラーコンディションに遭遇したときは関数@code{error}
(または@code{signal})を呼び出すこと。関数@code{error}はリターンしない。@ref{Signaling
Errors}を参照のこと。

エラーの報告に@code{message}、@code{throw}、@code{sleep-for}、@code{beep}を使用しないこと。

@item
エラーメッセージは大文字で始まり、ピリオドや他の区切り文字で終わらないこと。

たとえ@code{debug-on-error}が@code{nil}であっても、ユーザーにエラーの発生元を伝えることが有用な場合もある。そのような場合には、エラーメッセージに小文字のLispシンボルを前置できる。たとえばエラーメッセージ``Invalid
input''を``some-function: Invalid input''となるように拡張できる。

@item
ミニバッファー内で@code{yes-or-no-p}か@code{y-or-n-p}で答えを求める質問を行う場合には大文字で始めて@samp{?}で終わること。

@item
ミニバッファーのプロンプトでデフォルト値を示すときは、カッコ内に単語@samp{default}を配置すること。これは以下のようになる:

@example
Enter the answer (default 42):
@end example

@item
@code{interactive}で引数リストを生成するLisp式を使用する場合には、リージョンやポジションの引数にたいして正しいデフォルト値を生成しようと試みではならない。それらの引数が指定されていなければかわりに@code{nil}を提供して、引数が@code{nil}のときに関数のbodyでデフォルト値を計算すること。たとえば以下のように記述する:

@example
(defun foo (pos)
  (interactive
   (list (if @var{specified} @var{specified-pos})))
  (unless pos (setq pos @var{default-pos}))
  ...)
@end example

@noindent
以下のようにはしない:

@example
(defun foo (pos)
  (interactive
   (list (if @var{specified} @var{specified-pos}
             @var{default-pos})))
  ...)
@end example

@noindent
これはそのコマンドを繰り返す場合に、そのときの状況にもとづいてデフォルト値が再計算されるからである。

interactiveの@samp{d}、@samp{m}、@samp{r}指定を使用する際にはコマンドを繰り返すときの引数値の再計算にたいして特別な段取りを行うので、このような注意事項を採用する必要はない。

@item
実行に長時間を要する多くのコマンドは開始時に@samp{Operating...}、完了時に@samp{Operating...done}のような何らかのメッセージを表示すること。これらのメッセージのスタイルは@samp{...}の周囲に@emph{スペース}を置かず、@samp{done}の後に@emph{ピリオド}を置かないよう一定に保ってほしい。そのようなメッセージを生成する簡便な方法は@ref{Progress}を参照のこと。

@item
再帰編集の使用を避けること。かわりにRmailの@kbd{e}コマンドが行うように、元のローカルキーマップに戻るよう定義したコマンドを含んだ新たなローカルキーマップを使用するか、単に別のバッファーにスイッチしてユーザーが自身で戻れるようにすること。@ref{Recursive
Editing}を参照のこと。
@end itemize

@node Compilation Tips
@section コンパイル済みコードを高速化ためのヒント
@cindex execution speed
@cindex speedups
@cindex tips for faster Lisp code

  以下はバイトコンパイル済みLispプログラムの実行速度を改善する方法です。

@itemize @bullet
@item
時間がどこで消費されているか見つかるためにプログラムのプロファイルを行う。@ref{Profiling}を参照のこと。

@item
可能なら常に再帰ではなく繰り返しを使用する。Emacs
Lispではコンパイル済み関数が別のコンパイル済み関数を呼び出すときでさえ関数呼び出しは低速である。

@item
プリミティブのリスト検索関数@code{memq}、@code{member}、@code{assq}、@code{assoc}は明示的な繰り返しより更に高速である。これらの検索プリミティブを使用できるようにデータ構造を再配置することにも価値が有り得る。

@item
特定のビルトイン関数は通常の関数呼び出しの必要を回避するようにバイトコンパイル済みコードでは特別に扱われる。別の候補案のかわりにこれらの関数を使用するのは良いアイデアである。コンパイラーにより特別に扱われる関数かどうかを確認するには@code{byte-compile}プロパティを調べればよい。そのプロパティが非@code{nil}ならその関数は特別に扱われる。

たとえば以下を入力すると@code{aref}が特別にコンパイルされえることが示される(@ref{Array Functions}を参照):

@example
@group
(get 'aref 'byte-compile)
     @result{} byte-compile-two-args
@end group
@end example

@noindent
この場合(および他の多くの場合)には、最初に@code{byte-compile}プロパティを定義する@file{bytecomp}ライブラリーをロードしなければならない。

@item
プログラム内で実行時間のある程度を占める小さい関数を呼び出すなら関数をinlineにする。これにより関数呼び出しのオーバーヘッドがなくなる。関数のinline化はプログラム変更の自由度を減少させるのでユーザーがスピードを気にするに足るほど低速であり、inline化により顕著に速度が改善されるのでなければ行ってはならない。@ref{Inline
Functions}を参照のこと。
@end itemize

@node Warning Tips
@section コンパイラー警告を回避するためのヒント
@cindex byte compiler warnings, how to avoid
@cindex warnings from byte compiler

@itemize @bullet
@item
以下のようにダミーの@code{defvar}定義を追加して未定義のフリー変数に関するコンパイラーの警告の回避を試みる:

@example
(defvar foo)
@end example

このような定義はファイル内での変数@code{foo}の使用にたいしてコンパイラーが警告しないようにする以外に影響はない。

@item
同様に@code{declare-function}ステートメントを使用して、@emph{定義されるこが既知}な未定義関数に関するコンパイラーの警告の回避を試みる(@ref{Declaring
Functions}を参照)。

@item
特定のファイルから多くの関数、マクロ、変数を使用する場合には、それらに関するコンパイラー警告を回避するために、以下のようにパッケージに@code{require}を追加できる(@ref{Named
Features, require}を参照):

@example
(require 'foo)
@end example

@noindent
何らかののファイルのマクロだけが必要ならコンパイル時だけrequireできる(@ref{Eval During Compile}を参照)。たとえば、

@example
(eval-when-compile
  (require 'foo))
@end example

@item
ある関数内で変数をバインドして別の関数内で使用やセットする場合には、その変数が定義をもたなければ別関数に関してコンパイラーは警告を行う。しかしその変数が短い名前をもつ場合には、Lispパッケージは短い変数名を定義するべきではないので定義の追加により不明瞭になるかもしれない。行うべき正しい方法はパッケージ内の他の関数や変数に使用されている名前プレフィクスで始まるように変数をリネームすることである。

@item
警告を回避する最後の手段は通常なら間違いであるが、その使用法では間違いではないと解っている何かを行う際には@code{with-no-warnings}の内側に置くこと。@ref{Compiler
Errors}を参照のこと。
@end itemize

@node Documentation Tips
@section ドキュメント文字列のヒント
@cindex documentation strings, conventions and tips
@cindex tips for documentation strings
@cindex conventions for documentation strings

@findex checkdoc-minor-mode
  以下はドキュメント文字列記述に関するいくつかのヒントと慣習です。コマンド@kbd{M-x
checkdoc-minor-mode}を実行すれば慣習の多くをチェックできます。

@itemize @bullet
@item
ユーザーが理解することを意図したすべての関数、コマン、変数はドキュント文字列をもつこと。

@item
Lispプログラムの内部的な変数とサブルーチンは同様にドキュメント文字列をもつことができる。ドキュメント文字列は実行中のEmacs内で非常に僅かなスペースしか占めない。

@item
Format the documentation string so that it fits in an Emacs window on an
80-column screen.  It is a good idea for most lines to be no wider than 60
characters.  The first line should not be wider than 74 characters, or it
will look bad in the output of @code{apropos}.

@vindex emacs-lisp-docstring-fill-column
見栄えがよくなるならそのテキストをフィルできる。Emacs
Lispモードは@code{emacs-lisp-docstring-fill-column}で指定された幅にドキュメント文字列をフィルする。しかしドキュメント文字列の行ブレークを注意深く調整すればドキュメント文字列の可読性をより向上できることがある。ドキュメント文字列が長い場合にはセクション間に空行を使用すること。

@item
ドキュンメント文字列の最初の行は、それ自身が要約となるような1つか2つの完全なセンテンスから成り立つこと。@kbd{M-x
apropos}は最初の行だけを表示するので、その行のコンテンツ単独で完結していなければ結果の見栄えは悪くなる。特に最初の行は大文字で始めてピリオドで終わること。

関数では``これは何を行う関数か?''、変数では``これは何を意味する変数か?''という問いにたいして1行目で簡潔に答える必要がある。これらの問いにたいしてその関数や変数のユーザーや呼び出し元が理解できる方法で答えるのが望ましい。特に関数のコードの動作を列挙して何を行なうかを示す@emph{のではなく}、それらの動作の役割りと関数の責任について説明すること。

ドキュメント文字列を1行に制限しないこと。その関数や変数の使用法の詳細を説明する必要に応じてその分の行数を使用すること。テキストの残りの部分にたいしても完全なセンテンスを使用してほしい。

@item
ユーザーが無効化されたコマンドの使用を試みる際には、Emacsはそれのドキュメント文字列の最初のパラグラフ(最初の空行までのすべて)だけを表示する。もし望むなら、その表示をより有用になるように最初の空行の前に何の情報を含めるか選択できる。

@item
最初の行ではその関数のすべての重要な引数(特に必須な引数)と、関数呼び出しで記述される順にそれらに言及すること。その関数が多くの引数をもつなら最初の行でそれらすべてに言及するのは不可能である。この場合にはもっとも重要な引数を含む最初の引数数個について最初の行で言及すること。

@item
ある関数のドキュメント文字列がその関数の引数の値に言及する際には、引数を大文字にした名前が引数の値であるかのように使用すること。つまり関数@code{eval}のドキュメント文字列では最初の引数の名前が@code{form}なので@samp{FORM}で参照する:

@example
Evaluate FORM and return its value.
@end example

同様にリストやベクターのサブユニットへの分解で、それらのいくつかを異なるように示すような際にはメタ構文変数(metasyntactic
variables)を大文字で記述すること。以下の例の@samp{KEY}と@samp{VALUE}はこれの実践例:

@example
The argument TABLE should be an alist whose elements
have the form (KEY . VALUE).  Here, KEY is ...
@end example

@item
ドキュメント文字列内でLispシンボルに言及する際にはcase(大文字小文字)を絶対に変更しないこと。そのシンボルの名前が@code{foo}なら``Foo''ではなく``foo''(``Foo''は違うシンボル)。

これは関数の引数の値の記述ポリシーと反するように見えるかもしれないが矛盾は実際には存在しない。引数の@emph{value}はその関数が値の保持に使用する@emph{symbol}と同じではない。

これによりセンテンス先頭に小文字を置くことになり、それが煩しいならセンテンス開始がシンボルにならないようにセンテンスを書き換えること。

@item
ドキュメント文字列の開始と終了に空白文字を使用しないこと。

@item
ソースコード内の後続行のテキスト、最初の行と揃うようにドキュメント文字列の後続行を@strong{インデントしてはならない}。これはソースコードでは見栄えがよいがユーザーがドキュメトを閲覧する際は奇妙な見栄えになる。開始のダブルクォーテーションの前のインデントは文字列の一部には含まれないことを忘れないこと!

@cindex lispref/text-ja.texi.po
@cindex apostrophe, quoting in documentation strings
@cindex grave accent, quoting in documentation strings
@cindex lispref/text-ja.texi.po
@item
ドキュメントにおいてASCIIのアポストロフィやグレイブアクセントを表示する必要がある際には、ドキュメントの文字列リテラルに@samp{\\='}や@samp{\\=`}を使えば文字はそのまま表示される。

@item
ドキュメント文字列ではLispシンボルではないような式はそれら自身を表しているかもしれないのでクォートしてはならない。たとえば@samp{Return
the list `(NAME TYPE RANGE)' ...}や@samp{Return the list \\='(NAME TYPE
RANGE) ...}ではなく@samp{Return the list (NAME TYPE RANGE) ...}と記述すること。

@anchor{Docstring hyperlinks}
@item
@cindex curly quotes
@cindex curved quotes
ドキュメント文字列がLispシンボルを参照する際には、それがプリントされるとき(通常は小文字を意味する)のように前にグレイブアクセント@samp{`}、後にアポストロフィー@samp{'}を記述すること。例外が2つある。@code{t}と@code{nil}は前後の区切り記号を記述しない。たとえば:

@example
CODE can be `lambda', nil, or t.
@end example

これらのドキュメント文字列をEmacsが表示する際には、文字の表示がサポートされていれば通常は@samp{`} (グレイブアクセント)に@samp{‘}
(左シングルクォーテーションマーク)、@samp{'} (アポストロフィー)に@samp{’}
(右シングルクォーテーションマーク)を表示することに注意。@ref{Keys in Documentation}を参照のこと。
(このセクションの以前のバージョンでは、doc文字列で非@acronym{ASCII}のシングルクォーテーションマークを推奨するバージョンがありましたが、このような文字をサポートしない端末におけるヘルプ文字列の表示が破壊されるので現在は推奨されていません。)

@cindex hyperlinks in documentation strings
Helpモードはシングルクォートされたシンボル名がドキュメント文字列で使用されている際には、それが関数と変数のいずれかの定義をもっていれば自動的にハイパーリンクを作成する。これらの機能を使用するために何か特別なことを行う必要はない。しかしあるシンボルが関数と変数の両方の定義をもち一方だけを参照したい場合には、そのシンボル名の直前に@samp{variable}、@samp{option}、@samp{function}、@samp{command}の単語のいずれかを記述してそれを指定できる(これらの指示語の識別では大文字小文字に差はない)。たとえば以下を記述すると

@example
This function sets the variable `buffer-file-name'.
@end example

@noindent
これのハイパーリンクは@code{buffer-file-name}の変数のドキュメントだけを参照して関数のドキュメントは参照しない。

あるシンボルが関数および/または変数の定義をもつがドキュメントしているシンボルの使用とそれらが無関係なら、すべてのハイパーリンク作成を防ぐためにシンボル名の前に単語@samp{symbol}か@samp{program}を記述できる。たとえば、

@example
If the argument KIND-OF-RESULT is the symbol `list',
this function returns a list of all the objects
that satisfy the criterion.
@end example

@noindent
これは無関係な関数@code{list}のドキュメントにハイパーリンクを作成しない。

変数ドキュメントがない変数には、通常はハイパーリンクは作成されない。そのような変数の前に単語@samp{variable}と@samp{option}のいずれかを記述すればハイパーリンクの作成を強制できる。

フェイスにたいするハイパーリンクはフェイスの前か後に単語@samp{face}があれば作成される。この場合にはたとえそのシンボルが変数や関数として定義されていてもフェイスのドキュメントだけが表示される。

Infoドキュメントにハイパーリンクを作成するには、@samp{info node}、@samp{Info node}、@samp{info
anchor}、@samp{Info
anchor}のいずれかの後Infoのノード(かアンカー)をシングルクォートして記述する。Infoファイル名のデフォルトは@samp{emacs}。たとえば、

@smallexample
See Info node `Font Lock' and Info node `(elisp)Font Lock Basics'.
@end smallexample

manページにハイパーリンクを作成するには@samp{Man page},@samp{man page}、@samp{man page
for}のいずれかの後にシングルクォートされた名前記述する。たとえば、

@smallexample
See the man page `chmod(1)' for details.
@end smallexample

@noindent
manページInfoドキュメントのほうが常に好ましいので、リンク可能なInfoマニュアルがあるならリンクすること。たとえば@command{chmod}はGNU
Coreutilsマニュアルにドキュメントされているので、manページよりそれにリンクするほうがよい。

カスタマイゼーショングループをリンクするには、@samp{customization
group}を前置してシングルクォートしたグループ名を記述する(各単語の先頭文字のcaseは区別しない)。たとえば、

@smallexample
See the customization group `whitespace' for details.
@end smallexample

最後にURLのハイパーリンクを作成するには@samp{URL}の後にURLをシングルクォートして記述する。たとえば、

@smallexample
The GNU project website has more information (see URL
`https://www.gnu.org/').
@end smallexample

@item
ドキュメント文字列内に直接キーシーケンスを記述しないこと。かわりに、それらを表すために@samp{\\[@dots{}]}構文を使用すること。たとえば@samp{C-f}と記述するかわりに@samp{\\[forward-char]}と記述する。Emacsがドキュメント文字列を表示する際には何であれカレントで@code{forward-char}にバインドされたキーに置き換える(これは通常は@samp{C-f}だがユーザーがキーバインディングを変更していれば何か他の文字かもしれない)。@ref{Keys
in Documentation}を参照のこと。

@item
メジャーモードのドキュメント文字列ではグローバルマップではなく、そのモードのローカルマップを参照したいだろう。したがってどのキーマップを使用するか指定するために、ドキュメント文字列内で一度@samp{\\<@dots{}>}構文を使用する。最初に@samp{\\[@dots{}]}を使用する前、センテンスの途中以外でこれを行うこと(マップがロードされていないと、マップへの参照はまだマップが定義されていないことを示すセンテンスに置き換えられるだろう)。@samp{\\<@dots{}>}の内部のテキストはメジャーモードにたいするローカルキーマップを含む変数名であること。

@samp{\\[@dots{}]}を使用するたびに、僅かだがドキュメント文字列の表示が低速になる。これらを大量に使用すると僅かな低速化が積み重なり、特に低速なシステムでは有意なものとなるかもしれない。したがってこれらの過度な使用は推奨しない(同一ドキュメント内で同じコマンドへの複数参照の使用を避けるよう試みる等)。

@item
一貫性を保つために関数のドキュメント文字列の最初のセンテンス内の動詞は、命令形で表すこと。たとえば``Return the cons of A and
B.@:''、好みによっては``Returns the cons of A and
B@.''を使用する。通常は最初のパラグラフの残りの部分にたいして同様に行っても見栄えがよい。各センテンスが叙実的で適切な主題をもつなら後続のパラグラフの見栄えはよくなる。

@item
yes-or-no述語であるような関数のドキュメント文字列は、何が真を構成するか明示的に示すために、``Return t
if''のような単語で始まること。単語``return''は小文字の``t''で開始される幾分紛らわしい可能性のあるセンテンスを避ける。

@item
ドキュメント文字列は受動態ではなく能動態、未来形ではなく現在形で記述すること。たとえば``A list containing A and B will
be returned.''ではなく、``Return a list containing A and B.@:''と記述すること。

@item
不必要な``cause''(や同等の単語)の使用を避けること。``Cause Emacs to display text in
boldface''ではなく、単に``Display text in boldface''と記述すること。

@item
多くの人にとってなじみがなくtypoと間違えるであろうから、``iff''(``if and only
if''を意味する数学用語)の使用を避けること。ほとんどの場合には、その意味は単なる``if''で明快である。それ以外ではその意味を伝える代替えフレーズを探すよう試みること。

@item
``for example(たとえば)''に``e.g.''、``that
is(つまり)''に``i.e.''、``number(数値)''に``no.''、``compare(比較)''/``see
also(参照)''に``cf.''、``with respect
to(に関しては)''にたいする``w.r.t.''のような略語の使用は可能なかぎり避けるよう努力すること。ほとんど常に展開されたバージョンのほうが読み易い@footnote{わたしたちは時折これを使用しますが、やりすぎないでください。}。

@item
特定のモードや状況でのみコマンドに意味がある際にはドキュメント文字列内でそれに言及すること。たとえば@code{dired-find-file}のドキュメントは:

@example
In Dired, visit the file or directory named on this line.
@end example

@item
ユーザーがセットしたいと望むかもしれないオプションを表す変数を定義する際には@code{defcustom}を使用すること。@ref{Defining
Variables}を参照のこと。

@item
yes-or-noフラグであるような変数のドキュメント文字列は、すべての非@code{nil}値が等価であることを明確にして、@code{nil}と非@code{nil}が何を意味するかを明示的に示すために``Non-nil
means''のような単語で始めること。

@item
ドキュメント文字列内の開カッコで始まる行は、以下のように開カッコの前へのバックスラッシュの記述を考慮すること:

@example
The argument FOO can be either a number
\(a buffer position) or a string (a file name).
@end example

これは@samp{(}をdefunの開始として扱う27.1より古いバージョンのEmacsでのバグを回避する(@ref{Defuns,, Defuns,
emacs, The GNU Emacs
Manual}を参照)。コードを古いバージョンのEmacsで編集する誰かをあなたが予期せぬのなら、この回避策は必要ない。
@end itemize

@node Comment Tips
@section コメント記述のヒント
@cindex comments, Lisp convention for
@cindex conventions for Lisp comments

  コメントにたいして以下の慣習を推奨します:

@table @samp
@item ;
1つのセミコロン@samp{;}で始まるコメントはソースコードの右側の同じ列にすべて揃えられる。そのようなコメントは通常はその行のコードがどのように処理を行うかを説明する。たとえば:

@smallexample
@group
(setq base-version-list                 ; There was a base
      (assoc (substring fn 0 start-vn)  ; version to which
             file-version-assoc-list))  ; this looks like
                                        ; a subversion.
@end group
@end smallexample

@item ;;
2つのセミコロン@samp{;;}で始まるコメントはコードと同じインデントレベルで揃えられる。そのようなコメントは通常はその後の行の目的や、その箇所でのプログラムの状態を説明する。たとえば:

@smallexample
@group
(prog1 (setq auto-fill-function
             @dots{}
             @dots{}
  ;; Update mode line.
  (force-mode-line-update)))
@end group
@end smallexample

わたしたちは通常は関数の外側のコメントにも2つのセミコロンを使用する。

@smallexample
@group
;; This Lisp code is run in Emacs when it is to operate as
;; a server for other processes.
@end group
@end smallexample

関数がドキュメント文字列をもたなければ、かわりにその関数の直前にその関数が何を行うかと、正しく呼び出す方法を説明する2つのセミコロンのコメントをもつこと。各引数の意味と引数で可能な値をその関数が解釈する方法を正確に説明すること。しかしそのようなコメントはドキュメント文字列に変換するほうがはるかに優れている。

@item ;;;

3つ(かそれ以上)のセミコロン@samp{;;;}で始まるコメントは左マージンから始まる。わたしたちはOutlineマイナーモードのheading(ヘッダー)とみなされるべきコメントにそれらを使用している。デフォルトでは少なくとも(後に1つの空白文字と非空白文字が続く)3つのセミコロンはsectionのヘッダーとみなして、2つ以下のセミコロンで始まるものはみなさない。

(歴史的に3連セミコロンのコメントは関数内の行のコメントアウトに使用されたきたが、この用途では2つだけのセミコロン使用を推奨し、3連セミコロンの使用は推奨しない。これは2連セミコロンを使用して関数全体をコメントアウトする際にも適用される。)

セミコロン3つはトップレベルのセクション、4つはサブセクション、5つはサブサブセクション、のように使用される。

ライブラリーは通常はトップレベルのセクションを少なくとも4つもつ。たとえばこれらのセクションすべてが隠されているときは:

@smallexample
@group
;;; backquote.el --- implement the ` Lisp construct...
;;; Commentary:...
;;; Code:...
;;; backquote.el ends here
@end group
@end smallexample

(テキストが後続することがあってはならない最後の行は、ある意味セクションヘッダーではない。これは最終的にはファイル終端をマークする。)

長いライブラリーではコードを複数セクションに分割するのが賢明である。これは@samp{Code:}セクションを複数のサブセクションに分割することで行うことができる。長い間、これが推奨される唯一のアプローチであったとはいえ、多くの人が複数のトップレベルセクションの使用を選択してきた。あなたはいずれかのスタイルを選択できる。

トップレベルのコードセクションの複数使用には、ネスティングレベルの追加導入を避けるという利点があるが、それはすべてのコードが@samp{Code}という名前のセクションに含まれていないという不体裁な結果をも意味する。これを避けるためには、そのセクション内部にコードを何も配置しないこと。この方法により、それをセクションヘッダーではなくセパレーターとみなすことができる。

この問題に対象するためにヘッダーをコロンや他の句読点で終了させないことを最後に推奨しておく。歴史的な理由により@samp{Code:}と@samp{Commentary:}のヘッダーはコロンで終わるが、何にせよ他のヘッダーに同じことを行わないことをお勧めする。

@end table

@noindent
一般的に言うとコマンド@kbd{M-;}
(@code{comment-dwim})は適切なタイプのコメントを自動的に開始するか、セミコロンの数に応じて既存のコメントを正しい位置にインデントします。@ref{Comments,,
Manipulating Comments, emacs, The GNU Emacs Manual}を参照してください。

@node Library Headers
@section Emacsライブラリーのヘッダーの慣習
@cindex header comments
@cindex library header comments
@cindex conventions for library header comments

  Emacsにはセクションに分割してそれの記述者のような情報を与えるために、Lispライブラリー内で特別なコメントを使用する慣習があります。それらのアイテムにたいして標準的なフォーマットを使用すれば、ツール(や人)が関連する情報を抽出するのが簡単になります。このセクションでは以下の例を出発点にこれらの慣習を説明します。

@smallexample
@group
;;; foo.el --- Support for the Foo programming language  -*- lexical-binding: t; -*-

;; Copyright (C) 2010-2021 Your Name
@end group

;; Author: Your Name <yourname@@example.com>
;; Maintainer: Someone Else <someone@@example.com>
;; Created: 14 Jul 2010
@group
;; Keywords: languages
;; URL: https://example.com/foo

;; This file is not part of GNU Emacs.

;; This file is free software@dots{}
@dots{}
;; along with this file.  If not, see <https://www.gnu.org/licenses/>.
@end group
@end smallexample

  一番最初の行は以下のフォーマットをもつべきです:

@example
;;; @var{filename} --- @var{description}  -*- lexical-binding: t; -*-
@end example

@noindent
この説明は1行に収まる必要があります。そのファイルで更に変数をセットするために@samp{-*-}指定が必要なら、@code{lexical-binding}の後に配置してください。これにより最初の行が長くなりすぎるようなら、そのファイル終端でLocal
Variablesセクションを使用してください。

  The copyright notice usually lists your name (if you wrote the file).  If
you have an employer who claims copyright on your work, you might need to
list them instead.  Do not say that the copyright holder is the Free
Software Foundation (or that the file is part of GNU Emacs) unless your file
has been accepted into the Emacs distribution or GNU ELPA.  For more
information on the form of copyright and license notices, see
@uref{https://www.gnu.org/licenses/gpl-howto.html, the guide on the GNU
website}.

  著作権表示の後は、それぞれが@samp{;; @var{header-name}:}で始まる複数の@dfn{ヘッダーコメント(header
comment)}を記述します。以下は慣習的に利用できる@var{header-name}のテーブルです:

@table @samp
@item Author
このヘッダーは少なくともそのライブラリーの主要な作者の名前とemailアドレスを示す。複数の作者がいる場合には前に@code{;;}とタブか少なくとも2つのスペースがある継続行で彼らをリストする。わたしたちは@samp{<@dots{}>}という形式で連絡用emailアドレスを含めることを推奨する。たとえば:

@smallexample
@group
;; Author: Your Name <yourname@@example.com>
;;      Someone Else <someone@@example.com>
;;      Another Person <another@@example.com>
@end group
@end smallexample

@item Maintainer
このヘッダーはAuthorヘッダーと同じフォーマット。これは現在そのファイルを保守(バグレポートへの応答等)をする人(か人々)をリストする。

MaintainerヘッダーがなければAuthorヘッダーの人(複数可)がMaintainerとみなされる。Emacs内のいくつかのファイルは、そのファイルのオリジナル作者がもはや責任をもっておらずEmacsの一部として保守されていることを意味するために、Maintainerに@samp{emacs-devel@@gnu.org}を使用している。

@item Created
このオプションの行はファイルのオリジナルの作成日付を与えるもので歴史的な興味のためだけに存在する。

@item Version
個々のLispプログラムにたいしてバージョン番号を記録したいならこの行に配置する。Emacsとともに配布されたLispファイルはEmacsのバージョン番号自体が同じ役割を果たすので一般的には@samp{Version}ヘッダーをもたない。複数ファイルのコレクションを配布する場合には、各ファイルではなく主となるファイルにバージョンを記述することを推奨する。

@item Keywords
@vindex checkdoc-package-keywords-flag
@findex checkdoc-package-keywords
この行はヘルプコマンド@code{finder-by-keyword}でリストするキーワード。意味のあるキーワードのリストの確認にこのコマンドを使用してほしい。コマンド@kbd{M-x
checkdoc-package-keywords
@key{RET}}は@code{finder-known-keywords}にないすべてのキーワードを探して表示する。変数@code{checkdoc-package-keywords-flag}を非@code{nil}にセットすると、checkdocコマンドはチェックにキーワード検証を含める。

このフィールドはトピックでパッケージを探す人が、あなたのパッケージを見つける手段となる。キーワードを分割するにはスペースとカンマの両方を使用できる。

人はしばしばこのフィールドを単にFinder(訳注:
@code{finder-by-keyword}がオープンするバッファー)に関連したキーワードではなくパッケージを説明する任意のキーワードを記述する箇所だとみなすのは不運なことだ。

@item URL
@itemx Homepage
この行はライブラリーのウェブサイトを示す。

@item Package-Version
@samp{Version}がパッケージマネージャーによる使用に適切でなければ、パッケージは@samp{Package-Version}を定義でき、かわりにこれが使用される。これは@samp{Version}がRCSや@code{version-to-list}でパース不能な何かであるようなら手軽である。@ref{Packaging
Basics}を参照のこと。

@item Package-Requires
これが存在する場合にはカレントパッケージが正しく動作するために依存するパッケージを示す。@ref{Packaging
Basics}を参照のこと。これは(パッケージの完全なセットがダウンロードされることを確実にするために)ダウンロード時と、(すべての依存パッケージがあるときだけパッケージがアクティブになることを確実にするために)アクティブ化の両方でパッケージマネージャーにより使用される。

このフォーマットは単一行からなるリストのリスト。サブリストの@code{car}はそれぞれパッケージの名前(シンボル)、@code{cadr}は@code{version-to-list}でパース可能な許容し得る最小のバージョン番号(文字列)。バージョンが欠落したエントリー(単なるシンボルやある要素のサブリストであるようなエントリー)はバージョンが"0"のエントリーと等価。たとえば:

@smallexample
;; Package-Requires: ((gnus "1.0") (bubbles "2.7.2") cl-lib (seq))
@end smallexample

Emacs
27より古いバージョンをサポートする必要がないパッケージは、以下のように@samp{Package-Requires}ヘッダーを複数行に分割できる:

@smallexample
@group
;; Package-Requires: ((emacs "27.1")
;;                    (compat "29.1.4.1"))
@end group
@end smallexample

@noindent
このフォーマットにおいても@samp{Package-Requires}と同じ行でリストを開始する必要があることに注意。

パッケージのコードは自動的に、実行中のEmacsのカレントのバージョン番号をもつ@samp{emacs}という名前のパッケージを定義する。これはパッケージが要求するEmacsの最小のバージョンに使用できる。
@end table

  ほぼすべてのLispライブラリーは@samp{Author}と@samp{Keywords}のヘッダーコメント行をもつべきです。適切なら他のものを使用してください。ヘッダー行内で別のヘッダー行の名前も使用できます。これらは標準的な意味をもたないので害になることを行うことはできません。

  わたしたちはライブラリーファイルのコンテンツを分割するために追加の提携コメントを使用します。これらは空行で他のものと分離されている必要があります。以下はそれらのテーブルです:

@cindex commentary, in a Lisp library
@table @samp
@item ;;; Commentary:
これはライブラリーが機能する方法を説明する、概論コメントを開始する。これは複製許諾の直後にあり@samp{Change
Log}、@samp{History}、@samp{Code}のコメント行で終端されていること。このテキストはFinderパッケージで使用されるのでそのコンテキスト内で有意であること。

@item ;;; Change Log:
これは時間とともにそのファイルに加えられたオプションの変更ログを開始する。このセクションに過剰な情報を配置してはならない。(Emacsが行うように)バージョンコントロールシステムの詳細ログや個別の@file{ChangeLog}ファイルに留めるほうがよい。@samp{History}は@samp{Change
Log}の代替え。

@item ;;; Code:
これはプログラムの実際のコードを開始する。

@item ;;; @var{filename} ends here
これは@dfn{フッター行(footer
line)}。これはそのファイルの終端にある。これの目的はフッター行の欠落から、人がファイルの切り詰められたバージョンを検知することを可能にする。
@end table
