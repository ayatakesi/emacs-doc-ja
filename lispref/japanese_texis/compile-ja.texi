@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================

@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990--1994, 2001--2024 Free Software Foundation, Inc.
@c See the file elisp-ja.texi for copying conditions.
@node Byte Compilation
@chapter バイトコンパイル
@cindex byte compilation
@cindex byte-code
@cindex compilation (Emacs Lisp)

  Emacs
LispにはLispで記述された関数をより効率的に実行できる、@dfn{バイトコード(byte-code)}と呼ばれる特別な表現に翻訳する@dfn{コンパイラー(compiler)}があります。コンパイラーはLispの関数定義をバイトコードに置き換えます。バイトコード関数が呼び出されたとき、その定義は@dfn{バイトコードインタープリター(byte-code
interpreter)}により評価されます。

  バイトコンパイルされたコードは、(本当のコンパイル済みコードのように)そのマシンのハードウェアによって直接実行されるのではなく、バイトコンパイラーによって評価されるため、バイトコードはリコンパイルしなくてもマシン間での完全な可搬性を有します。しかし本当にコンパイルされたコードほど高速ではありません。

  一般的に任意のバージョンのEmacsはそれ以前のバージョンのEmacsにより生成されたバイトコンパイル済みコードを実行できますが、その逆は成り立ちません。

@vindex no-byte-compile
  あるLispファイルを常にコンパイルせずに実行したい場合は、以下のように@code{no-byte-compile}をバインドするファイルローカル変数を配置します:

@example
;; -*-no-byte-compile: t; -*-
@end example

@menu
* Speed of Byte-Code::       バイトコンパイルによるスピードアップ例。
* Compilation Functions::    バイトコンパイル関数。
* Docs and Compilation::     ドキュメント文字列のダイナミックロード。
* Eval During Compile::      コンパイル時に評価されるコード。
* Compiler Errors::          コンパイラーのエラーメッセージの扱い。
* Closure Objects::          バイトコンパイル済み関数に使用されるデータ型。
* Disassembly::              バイトコードの逆アセンブル; 
                               バイトコードの読み方。
@end menu

@node Speed of Byte-Code
@section バイトコンパイル済みコードのパフォーマンス

  バイトコンパイルされた関数はCで記述されたプリミティブ関数ほど効率的ではありませんが、Lispで記述されたバージョンよりは高速に実行されます。以下は例です:

@example
@group
(defun silly-loop (n)
  "ループをN回繰り返し実行して時間を秒でリターンする"
  (let ((t1 (float-time)))
    (while (> (setq n (1- n)) 0))
    (- (float-time) t1)))
@result{} silly-loop
@end group

@group
(silly-loop 50000000)
@result{} 5.200886011123657
@end group

@group
(byte-compile 'silly-loop)
@result{} @r{[コンパイルされたコードは表示されない]}
@end group

@group
(silly-loop 50000000)
@result{} 0.6239290237426758
@end group
@end example

  この例ではインタープリターによる実行には5秒以上を要しますが、バイトコンパイルされたコードは1秒未満です。これは典型的な結果例ですが、実際の結果はさまざまでしょう。

@node Compilation Functions
@section バイトコンパイル関数
@cindex compilation functions

  @code{byte-compile}により、関数やマクロを個別にバイトコンパイルできます。@code{byte-compile-file}でファイル全体、@code{byte-recompile-directory}または@code{batch-byte-compile}で複数ファイルをコンパイルできます。

@vindex byte-compile-debug
  バイトコンパイラーが警告および/またはエラーメッセージを生成することもあります(詳細は@ref{Compiler
Errors}を参照)。これらのメッセージは通常はCompilationモードが使用する@file{*Compile-Log*}と呼ばれるバッファーに記録されます。@ref{Compilation
Mode,,,emacs, The GNU Emacs
Manual}を参照してください。しかし変数@code{byte-compile-debug}が非@code{nil}ならエラーメッセージはLispエラーとしてシグナルされます(@ref{Errors}を参照)。

@cindex macro compilation
  バイトコンパイルを意図したファイル内にマクロ呼び出しを記述する際には注意が必要です。マクロ呼び出しはコンパイル時に展開されるので、そのマクロはEmacsにロードされる必要があります(さもないとバイトコンパイラーが正しく処理しないだろう)。これを処理する通常の方法は、必要なマクロ定義を含むファイルを@code{require}フォームで指定することです。バイトコンパイラーは通常はコンパイルするコードを評価しませんが、@code{require}フォームは指定されたライブラリーをロードすることにより特別に扱われます。誰かがコンパイルされたプログラムを@emph{実行}する際にマクロ定義ファイルのロードを回避するためには、@code{require}呼び出しの周囲に@code{eval-when-compile}を記述します(@ref{Eval
During Compile}を参照)。詳細は@ref{Compiling Macros}を参照してください。

  インライン関数(@code{defsubst})はこれほど面倒ではありません。定義が判明する前にそのような関数呼び出しをコンパイルした場合でも、その呼び出しは低速になるだけで正しく機能するでしょう。

@defun byte-compile symbol
この関数は@var{symbol}の関数定義をバイトコンパイルして、以前の定義をコンパイルされた定義に置き換える。@var{symbol}の関数定義は、その関数にたいする実際のコードでなければならない。@code{byte-compile}はインダイレクト関数を処理しない。リターン値は、@var{symbol}のコンパイルされた定義であるようなバイトコード関数ブジェクト(@ref{Closure
Objects}を参照)。

@example
@group
(defun factorial (integer)
  "INTEGERの階乗を計算する。"
  (if (= 1 integer) 1
    (* integer (factorial (1- integer)))))
@result{} factorial
@end group

@group
(byte-compile 'factorial)
@result{}
#[257
  "\211\300U\203^H^@@\300\207\211\301^BS!_\207"
  [1 factorial] 4
  "Compute factorial of INTEGER.\n\n(fn INTEGER)"]
@end group
@end example

@var{symbol}の定義がバイトコード関数オブジェクトなら、@code{byte-compile}は何も行わず@code{nil}をリターンする。そのシンボルの関数セル内の(コンパイルされていない)オリジナルのコードはすでにバイトコンパイルされたコードに置き換えられているので、シンボルの定義の再コンパイルはしない。

@code{byte-compile}の引数として@code{lambda}式も指定できる。この場合、関数は対応するコンパイル済みコードをリターンするが、それはどこにも格納されない。
@end defun

@deffn Command compile-defun &optional arg
このコマンドはポイントを含むdefunを読み取りそれをコンパイルして結果を評価する。実際に関数定義であるようなdefunでこれを使用した場合には、その関数のコンパイル済みバージョンをインストールする効果がある。

@code{compile-defun}は通常は評価した結果をエコーエリアに表示するが、@var{arg}が非@code{nil}ならフォームをコンパイルした後にカレントバッファーに結果を挿入する。
@end deffn

@deffn Command byte-compile-file filename
この関数は@var{filename}という名前のLispコードファイルを、バイトコードのファイルにコンパイルする。出力となるファイルの名前は、サフィックス@samp{.el}を@samp{.elc}に変更することにより作成される。@var{filename}が@samp{.el}で終了しない場合には、@samp{.elc}を@var{filename}の最後に付け足す。

コンパイルは入力ファイルから1つのフォームを逐次読み取ることにより機能する。フォームが関数かマクロなら、コンパイル済みの関数かマクロが書き込まれる。それ以外のフォームはまとめられて、まとめられたものごとにコンパイルされて、そのファイルが読まれたとき実行されるようにコンパイルされたコードが書き込まれる。入力ファイルを読み取る際には、すべてのコメントは無視される。

このコマンドはエラーがなければ@code{t}、それ以外は@code{nil}をリターンする。インタラクティブに呼び出されたときは、ファイル名の入力をもとめる。

@example
@group
$ ls -l push*
-rw-r--r-- 1 lewis lewis 791 Oct  5 20:31 push.el
@end group

@group
(byte-compile-file "~/emacs/push.el")
     @result{} t
@end group

@group
$ ls -l push*
-rw-r--r-- 1 lewis lewis 791 Oct  5 20:31 push.el
-rw-rw-rw- 1 lewis lewis 638 Oct  8 20:25 push.elc
@end group
@end example
@end deffn

@deffn Command byte-recompile-directory directory &optional flag force follow-symlinks
@cindex library compilation
このコマンドは@var{directory}(またはそのサブディレクトリー)内の、リコンパイルを要するすべての@samp{.el}ファイルをリコンパイルする。@samp{.elc}ファイルが存在して、それが@samp{.el}より古いファイルは、リコンパイルが必要となる。

@samp{.el}ファイルに対応する@samp{.elc}ファイルが存在しない場合に何を行うかを@var{flag}で指定する。@code{nil}なら、このコマンドはこれらのファイルを無視する。@var{flag}が0なら、それらをコンパイルする。@code{nil}と0以外なら、それらのファイルをコンパイルするかユーザーに尋ねて、同様にそれぞれのサブディレクトリーについても尋ねる。

インタラクティブに呼び出されると、@code{byte-recompile-directory}は@var{directory}の入力を求めて、@var{flag}はプレフィクス引数となる。

@var{force}が非@code{nil}なら、このコマンドは@samp{.elc}ファイルが存在するすべての@samp{.el}ファイルをリコンパイルする。

このコマンドは通常はシンボリックリンクであるような@samp{.el}ファイルをコンパイルしない。オプションの@var{follow-symlink}パラメーターが非@code{nil}なら、シンボリックリンクされた@samp{.el}もコンパイルされる。

リターン値は不定。
@end deffn

@defun batch-byte-compile &optional noforce
この関数はコマンドラインで指定されたファイルにたいして@code{byte-compile-file}を実行する。この関数は処理が完了するとEmacsをkillするので、Emacsのバッチ実行でのみ使用しなければならない。1つのファイルでエラーが発生しても、それによって後続のファイルにたいする処理が妨げられることはないが、そのファイルにたいする出力ファイルは生成されず、Emacsプロセスは0以外のステータスコードで終了する。

@var{noforce}が非@code{nil}なら、この関数は最新の@samp{.elc}ファイルがあるファイルをリコンパイルしない。

@example
$ emacs -batch -f batch-byte-compile *.el
@end example
@end defun

@node Docs and Compilation
@section ドキュメント文字列とコンパイル
@cindex dynamic loading of documentation

  Emacsがバイトコンパイルされたファイルから関数や変数をロードする際、通常はメモリー内にそれらのドキュメント文字列をロードしません。それぞれのドキュメント文字列は、必要なときだけバイトコンパイルされたファイルからダイナミック(dynamic:
動的)にロードされます。ドキュメント文字列の処理をスキップすることにより、メモリーが節約されてロードが高速になります。

  この機能には欠点があります。コンパイル済みのファイルを削除や移動、または(新しいバージョンのコンパイル等で)変更した場合、Emacsは以前にロードした関数や変数のドキュメント文字列にアクセスできなくなるでしょう。このような問題は通常なら、あなた自身がEmacsをビルドしたときに、そのLispファイルを編集および/またはリコンパイルしたときだけ発生します。この問題は、リコンパイル後にそれぞれのファイルをリロードするだけで解決します。

  バイトコンパイルされたファイルからのドキュメント文字列のダイナミックロードは、バイトコンパイルされたファイルごとにコンパイル時に解決されます。これはオプション@code{byte-compile-dynamic-docstrings}で無効にできます。

@defopt byte-compile-dynamic-docstrings
これが非@code{nil}なら、バイトコンパイラーはドキュメント文字列をダイナミックロードするようにセットアップしたコンパイル済みファイルを生成する。

特定のファイルでダイナミックロード機能を無効にするには、以下のようにヘッダー行でこのオプションに@code{nil}をセットする(@ref{File
Variables, , Local Variables in Files, emacs, The GNU Emacs Manual}を参照)。

@smallexample
-*-byte-compile-dynamic-docstrings: nil;-*-
@end smallexample

これは主として、あるファイルを変更しようとしていて、そのファイルをすでにロード済みのEmacsセッションがファイルを変更した際にも正しく機能し続けることを望む場合に有用である。
@end defopt

@cindex @samp{#@@@var{count}}
@cindex @samp{#$}
内部的にはドキュメント文字列のダイナミックロードは、特殊なLispリーダー構文@samp{#@@@var{count}}とともにコンパイル済みファイルに書き込むことによって達成される。この構文は次の@var{count}文字をスキップする。さらに@samp{#$}構文も使用され、これはこのファイルの名前(文字列)を意味する。これらの構文をLispソースファイル内で使用しないこと。これらは人間がファイルを読む際に明確であるようにデザインされていない。

@node Eval During Compile
@section コンパイル中の評価
@cindex eval during compilation

  これらの機能によりプログラムのコンパイル中に評価されるコードを記述できます。

@defmac eval-and-compile body@dots{}
このフォームはそれを含むコードがコンパイルされるとき、および(コンパイルされているかいないかに関わらず)実行されるときの両方で@var{body}が評価されるようにマークする。

@var{body}を別のファイルに配置して、そのファイルを@code{require}で参照すれば同様の結果が得られる。これは@var{body}が大きいときに望ましい方法である。事実上、@code{require}は自動的に@code{eval-and-compile}されて、そのパッケージはコンパイル時と実行時の両方でロードされる。

@code{autoload}も実際は@code{eval-and-compile}される。これはコンパイル時に認識されるので、そのような関数の使用により警告``not
known to be defined''は生成されない。

ほとんどの@code{eval-and-compile}の使用は、完全に妥当であると言えよう。

あるマクロがマクロの結果を構築するためのヘルパー関数をもち、そのマクロがそのパッケージにたいしてローカルと外部の両方で使用される場合には、コンパイル時と後の実行時にそのヘルパー関数を取得するために@code{eval-and-compile}を使用すること。

これは関数がプログラム的に(@code{fset}で)定義されている場合には、コンパイル時と実行時にプログラム的な定義を行わせてそれらの関数の呼び出しをチェックするためにも使用できる(``not
known to be defined''の警告は抑制される)。
@end defmac

@defmac eval-when-compile body@dots{}
このフォームは@var{body}がコンパイル時に評価され、コンパイルされたプログラムがロードされるときは評価されないようにマークする。コンパイラーによる評価の結果はコンパイル済みのプログラム内の定数となる。ソースファイルをコンパイルではなくロードすると、@var{body}は通常どおり評価される。

@cindex compile-time constant
生成するために何らかの計算が必要な定数があるなら、@code{eval-when-compile}はコンパイル時にそれを行なうことができる。たとえば、

@lisp
(defvar gauss-schoolboy-problem
  (eval-when-compile (apply #'+ (number-sequence 1 100))))
@end lisp

@cindex macros, at compile time
他のパッケージを使用しているが、そのパッケージのマクロ(バイトコンパイラーはそれらを展開します)だけが必要なら、それらを実行せずにコンパイル用にロードさせるために@code{eval-when-compile}を使用できる。たとえば、

@lisp
(eval-when-compile
  (require 'my-macro-package))
@end lisp

これらの事項は、マクロと@code{defsubst}関数がローカルに定義されていて、そのファイル内だけで使用されることを要求する。これらはそのファイルのコンパイルに必要だが、コンパイル済みファイルの実行には、ほとんどの場合必要ない。たとえば、

@lisp
(eval-when-compile
  (unless (fboundp 'some-new-thing)
    (defmacro some-new-thing ()
      (compatibility code))))
@end lisp

@noindent
これは大抵は他のバージョンのEmacsとの互換性の保証のためのコードにたいしてのみ有用である。

@strong{Common Lispに関する注意:} トップレベルでは、@code{eval-when-compile}はCommon
Lispのイディオム@code{(eval-when (compile eval) @dots{})}に類似する。トップレベル以外では、Common
Lispのリーダーマクロ@samp{#.}(ただし解釈時を除く)が、@code{eval-when-compile}と近いことを行う。
@end defmac

@node Compiler Errors
@section コンパイラーのエラー
@cindex compiler errors
@cindex byte-compiler errors

  バイトコンパイルのエラーメッセージと警告メッセージは、@file{*Compile-Log*}という名前のバッファーにプリントされます。これらのメッセージには、問題となる箇所を示すファイル名と行番号が含まれます。これらのメッセージにたいして、コンパイラー出力を操作する通常のEmacsコマンドが使用できます。

  あるエラーがプログラムのシンタックスに由来する場合、バイトコンパイラーはエラーの正確な位置の取得に際して混乱するかもしれません。バッファー@w{@file{
*Compiler Input*}}.にスイッチするのは、これを調べ1つの方法です(このバッファー名はスペースで始まるので、Buffer
Menuに表示されない)。このバッファーにはコンパイルされたプログラムと、バイトコンパイラーが読み取った箇所からポイントがどれほど離れているかが含まれ、エラーの原因はその近傍の可能性があります。シンタックスエラーを見つけるヒントについては、@ref{Syntax
Errors}を参照してください。

@cindex byte-compiler warnings
@cindex free variable, byte-compiler warning
@cindex reference to free variable, compilation warning
@cindex function not known to be defined, compilation warning
  定義されていない関数や変数の使用は、バイトコンパイラーにより報告される警告のタイプとしては一般的です。そのような警告では、定義されていない関数や変数を使用した位置ではなく、そのファイルの最後の行の行番号が報告されるので、それを見つけるには手作業で検索しなければなりません。

  定義のない関数や変数の警告が間違いだと確信できる場合には、警告を抑制する方法がいくつかあります:

@itemize @bullet
@item
関数@var{func}への特定の呼び出しにたいする警告は、それを条件式@code{fboundp}でテストすることで抑制できる:

@example
(if (fboundp '@var{func}) ...(@var{func} ...)...)
@end example

@noindent
@var{func}への呼び出しは@code{if}文の@var{then-form}内になければならず、@var{func}は@code{fboundp}呼び出し内でクォートされていなければならない(この機能は@code{cond}でも同様に機能する)。

@item
同じように、変数@var{variable}の特定の使用についの警告を、条件式内の@code{boundp}テストで抑制できる:

@example
(if (boundp '@var{variable}) ...@var{variable}...)
@end example

@noindent
@var{variable}への参照は@code{if}文の@var{then-form}内になければならず、@var{variable}は@code{boundp}呼び出し内でクォートされていなければならない。

@item
コンパイラーに関数が@code{declare-function}を使用して定義されていると告げることができる。@ref{Declaring
Functions}を参照のこと。

@item
同じように変数が初期値なしの@code{defvar}を使用して定義されているとコンパイラーに告げることができる(カレントレキシカルスコープ、またはトップレベルにあればファイルでのみダイナミックにバインドされているとして変数を特別な変数としてマークすることに注意。@ref{Defining
Variables}を参照のこと。
@end itemize

  @code{with-suppressed-warnings}マクロを使用して特定の式にたいするコンパイラーの警告を抑制することもできます:

@defspec with-suppressed-warnings warnings body@dots{}
これは実行においては@code{(progn
@var{body}...)}と等価だが、コンパイラーは@var{body}内の指定したコンディションにたいする警告を発しない。@var{warnings}は警告シンボルと、それらを適用する関数/変数シンボルの連想リスト。たとえば@code{foo}という時代遅れ(obsolete)の関数を呼び出したいがコンパイル時の警告を抑止したければ、以下のようにする:

@lisp
(with-suppressed-warnings ((obsolete foo))
  (foo ...))
@end lisp
@end defspec

コンパイラー警告の抑制をより粗く行うには@code{with-no-warnings}構文を使用できます:

@c This is implemented with a defun, but conceptually it is
@c a special form.

@defspec with-no-warnings body@dots{}
これは実行時には@code{(progn
@var{body}...)}と等価だが、コンパイラーは@var{body}の中で起こるいかなる事項にたいしても警告を発しない。

わたしたちはかわりに@code{with-suppressed-warnings}の使用を推奨するが、この構文を使用する場合には、あなたが抑制したいと意図する警告以外の警告を失わないようにするために、可能な限り小さいコード断片にたいしてこの構文を使用すること。
@end defspec

  変数@code{byte-compile-warnings}をセットすることにより、コンパイラーの警告をより詳細に制御できます。詳細は変数のドキュメント文字列を参照してください。

@vindex byte-compile-error-on-warn
  @code{error}を使用してバイトコンパイラーの警告が報告されることを望む場合があるかもしれません。そのような場合には@code{byte-compile-error-on-warn}を非@code{nil}値にセットしてください。

@node Closure Objects
@section クロージャ関数オブジェクト
@cindex compiled function
@cindex byte-code function
@cindex byte-code object

  バイトコンパイルされた関数はクロージャという特別なデータタイプを使用します。クロージャはバイトコンパイル済み関数だけではなく、インタープリトされるLisp関数でも使用されます。そのようなオブジェクトが呼び出す関数として出現した際には、Emacsはバイトコンパイル済みコードまたは非コンパイル済みコードのいずれかを実行するために、常に適切なインタープリターを使用します。

  内部的にはクロージャはベクターとよく似ています。バイトコード関数オブジェクトの要素には@code{aref}を通じてアクセスできます。バイトコード関数オブジェクトのプリント表現(printed
representation)はベクターと似ていて、開き@samp{[}の前に@samp{#}が追加されます。バイト関数オブジェクトは少なくとも4つの要素をもたねばならず、その要素数に上限はありません。しかし通常使用されるのは最初の6要素です。これらは:

@table @var
@item argdesc
引数の記述子(descriptor)。これは@ref{Argument
List}で説明されるような引数のリスト、または要求される引数の個数をエンコードする整数のいずれかである。後者の場合、その記述子の値は0ビットから6ビットで引数の最小個数、8ビットから14ビットで引数の最大個数を指定する。引数リストが@code{&rest}を使用するなら7ビットがセットされて、それい以外ならクリアーされる。

クロージャがバイトコンパイル済み関数で@var{argdesc}がリストなら、そのバイトコード実行前に引数はダイナミックにバインドされる。@var{argdesc}が整数なら、引数リストはそのバイトコード実行前にバイトコーピンタープリンターのスタックにpushされる。

@item code
インタープリターに解釈される関数にたいして、この要素は関数のbodyを形成するLispフォームからなるリスト。バイトコンパイル済み関数にたいしてはバイトコード命令を含んだ文字列。

@item constants
バイトコンパイル済み関数にたいしては、これはコードによって参照されるLispオブジェクトのベクターを保持する。これには関数の名前や変数の名前として用いられるシンボルが含まれる。インタープリターに解釈される関数にたいしては、その関数がダイナミックなスコープをもつ古いEmacs
Lisp方言を使用していれば@code{nil}、そうでなければその関数のレキシカル環境を保持する。

@item stacksize
この関数が要するスタックの最大サイズ。インタープリターに解釈される関数の場合には、この要素は未使用のまま。

@item docstring
(もしあれば)ドキュメント文字列。それ以外は@code{nil}。ドキュメント文字列がファイルに格納されている場合、値は数字かリストかもしれない。本当のドキュメント文字列の取得には、関数@code{documentation}を使用する(@ref{Accessing
Documentation}を参照)。

@item interactive
(もしあれば)インタラクティブ仕様。文字列かLisp式。インタラクティブでない関数では@code{nil}。
@end table

以下はバイトコード関数オブジェクトのプリント表現の例です。これはコマンド@code{backward-sexp}の定義です。

@example
#[256
  "\211\204^G^@@\300\262^A\301^A[!\207"
  [1 forward-sexp]
  3
  1793299
  "^p"]
@end example

  バイトコードオブジェクトを作成するプリミティブな方法は@code{make-byte-code}です:

@defun make-byte-code &rest elements
この関数は@var{elements}を要素とするバイトコードオブジェクトを表すクロージャを構築してリターンする。
@end defun

  あなた自身で要素を収集してバイトコード関数を構築しないでください。それらが矛盾する場合、その関数の呼び出しによりEmacsがクラッシュするかもしれません。これらのオブジェクトの作成は常にバイトコンパイラーにまかせてください。(願わくば)バイトコンパイラーは要素を矛盾なく構築します。

インタープリターに解釈される関数を作成するプリミティブな方法は@code{make-interpreted-closure}です:

@defun make-interpreted-closure args body env &optional docstring iform
この関数は引数が@var{args}、bodyが@var{body}
(非@code{nil}なLispフォームのリストでなければならない)から形成されるような、インタープリターに解釈される関数を表すクロージャを構築してリターンする。@var{env}は@code{eval}
(@ref{Eval}を参照)で使用されるのと同じ形成によるレキシカル環境。ドキュメント@var{docstring}が非@code{nil}なら文字列でなければならず、インタラクティブなフォーム@var{iform}が非@code{nil}なら、@w{@code{(interactive
@var{arg-descriptor})}}のようなフォームであること(@ref{Using Interactive}を参照)。
@end defun

@node Disassembly
@section 逆アセンブルされたバイトコード
@cindex disassembled byte-code

  人はバイトコードを記述しません。それはバイトコンパイラーの仕事です。しかし好奇心を満たすために、わたしたちはディスアセンブラを提供しています。ディスアセンブラはバイトコードを人間が読めるフォームに変換します。

  バイトコードインタープリターは、シンプルなスタックマシンとして実装されています。これは値を自身のスタックにpushして、計算で使用するためにそれらをpopして取り出し、その結果を再びそのスタックにpushして戻します。バイトコード関数がリターンするときは、スタックから値をpopして取り出し、その関数の値としてリターンします。

  それに加えてスタックとバイトコード関数は、値を変数とスタック間で転送することにより、普通のLisp変数を使用したり、バインドやセットを行うことができます。

@deffn Command disassemble object &optional buffer-or-name
このコマンドは@var{object}にたいするディスアセンブルされたコードを表示する。インタラクティブに使用した場合、または@var{buffer-or-name}が@code{nil}か省略された場合は、@file{*Disassemble*}という名前のバッファーに出力します。@var{buffer-or-name}が非@code{nil}なら、それはバッファーもしくは既存のバッファーの名前でなければならない。その場合は、そのバッファーのポイント位置に出力され、ポイントは出力の前に残りされる。

引数@var{object}には関数名、ラムダ式(@ref{Lambda
Expressions}を参照)、またはバイトコードオブジェクト(@ref{Closure
Objects}を参照)を指定できる。ラムダ式なら@code{disassemble}はそれをコンパイルしてから、そのコンパイル済みコードをディスアセンブルする。
@end deffn

  以下に@code{disassemble}関数を使用した例を2つ示します。バイトコードとLispソースを関連付ける助けとなるように、説明的なコメントを追加してあります。これらのコメントは@code{disassemble}の出力にはありません。

@example
@group
(defun factorial (integer)
  "Compute factorial of an integer."
  (if (= 1 integer) 1
    (* integer (factorial (1- integer)))))
     @result{} factorial
@end group

@group
(factorial 4)
     @result{} 24
@end group

@group
(disassemble 'factorial)
     @print{} byte-code for factorial:
 doc: Compute factorial of an integer.
 args: (arg1)
@end group

@group
0   dup                   ; @r{@code{integer}の値を取得して}
                          ;   @r{それをスタック上にpushする}
1   constant 1            ; @r{スタック上に1をpushする}
@end group
@group
2   eqlsign               ; @r{2つの値をスタックからpopして取り出し、}
                          ;   @r{それらを比較して結果をスタック上にpushする}
@end group
@group
3   goto-if-nil 1         ; @r{スタックのトップをpopしてテストする}
                          ;   @r{@code{nil}なら1へ、それ以外はcontinue}
6   constant 1            ; @r{スタックのトップに1をpushする}
7   return                ; @r{スタックのトップの要素をリターンする}
@end group
@group
8:1 dup                   ; @r{@code{integer}の値をスタック上にpushする}
9   constant factorial    ; @r{@code{factorial}をスタック上にpushする}
10  stack-ref 2           ; @r{@code{integer}の値をスタック上にpushする}
11  sub1                  ; @r{@code{integer}をpopして値をデクリメントする}
                          ;   @r{スタック上に新しい値をpushする}
12  call     1            ; @r{スタックの最初(トップ)の要素を引数として}
                          ;   @r{関数@code{factorial}を呼び出す}
                          ;   @r{リターン値をスタック上にpushする}
@end group
@group
13 mult                   ; @r{スタックのトップ2要素をpopして取り出し乗じ}
                          ;   @r{結果をスタック上にpushする}
14 return                 ; @r{スタックのトップ要素をリターンする}
@end group
@end example

@code{silly-loop}は幾分複雑です:

@example
@group
(defun silly-loop (n)
  "Return time before and after N iterations of a loop."
  (let ((t1 (current-time-string)))
    (while (> (setq n (1- n))
              0))
    (list t1 (current-time-string))))
     @result{} silly-loop
@end group

@group
(disassemble 'silly-loop)
     @print{} byte-code for silly-loop:
 doc: Return time before and after N iterations of a loop.
 args: (arg1)
@end group

@group
0   constant current-time-string  ; @r{@code{current-time-string}を}
                                  ;   @r{スタック上のトップにpushする}
@end group
@group
1   call     0            ; @r{引数なしで@code{current-time-string}を呼び出して}
                          ;   @r{結果を@code{t1}のようにスタック上にpushする}
@end group
@group
2:1 stack-ref 1           ; @r{引数@code{n}の値を取得して}
                          ;   @r{その値をスタック上にpushする}
3   sub1                  ; @r{スタックのトップから1を減ずる}
@end group
@group
4   dup                   ; @r{スタックのトップを複製する}
                          ;   @r{つまりスタックのトップをコピーしてスタック上にpushする}
5   stack-set 3           ; ; @r{スタックのトップをpopして}
                          ;   @r{@code{n}にその値をセットする}

;; @r{(要はシーケンス@code{dup stack-set}はpopせずに}
;; @r{ スタックのトップを@code{n}の値にコピーする)}
@end group

@group
7   constant 0            ; @r{スタック上に0をpushする}
8   gtr                   ; @r{スタックのトップ2値をpopして取り出し}
                          ;   @r{@var{n}が0より大かテストし}
                          ;   @r{結果をスタック上にpushする}
@end group
@group
9   goto-if-not-nil 1     ; @r{@code{n} > 0なら1へ}
                          ;   @r{(これはwhile-loopを継続する)}
                          ;   @r{それ以外はcontinue}
@end group
@group
12  dup                   ; @r{@code{t1}の値をスタック上にpushする}
13  constant current-time-string  ; @r{@code{current-time-string}を}
                                  ;   @r{スタックのトップにpushする}
14  call     0            ; @r{再度@code{current-time-string}を呼び出す}
@end group
@group
15  list2                 ; @r{スタックのトップ2要素をpopして取り出し}
                          ;   @r{それらのリストを作りスタック上にpushする}
16  return                ; @r{スタックのトップの値をリターンする}
@end group
@end example

@node Native Compilation
@chapter Lispからネイティブコードへのコンパイル
@cindex native compilation
@cindex compilation to native code (Emacs Lisp)

@cindex native code
  @ref{Byte Compilation, the previous
chapter}で述べたバイトコンパイルに加えて、EmacsではオプションでLisp関数定義を@dfn{ネイティブコード(native
code)}として知られている真のコンパイル済みコードにコンパイルすることもできます。この機能はGCCディストリビューションの一部である@file{libgccjit}を使用しており、そのライブラリー使用のサポートと共にEmacsがビルドされている必要があります。更にネイティブコンパイルされたLispコードを利用可能にするために、システムにGCCとBinutils(アセンブラとリンカ)がインストールされている必要があります。

@vindex native-compile@r{, a Lisp feature}
  Emacsのカレントプロセスでネイティブコンパイル済みLispコードの生成およびロードが可能かどうか判断するには、@code{native-comp-available-p}
(@ref{Native-Compilation Functions}を参照)を呼び出してください。

  バイトコンパイル済みコードとは異なり、ネイティブコンパイル済みLispコードはマシンのハードウェアにより直接実行されるので、ホストCPUが提供できる最高スピードで実行されます。このスピードアップの結果は一般的にはそのLispコードが何を行うかに依りますが、対応するバイトコンパイル済みコードに比べて、通常は2.5から5倍高速になります。

  一般的に異なるシステム間ではネイティブコードに互換性はないので、あるマシンから別のマシンへのネイティブコンパイル済みコードの可搬性は@emph{ありません}。ネイティブコンパイル済みコードはそれを生成したのと同じマシン、もしくは類似のマシン(同一のCPUおよびランタイムライブラリー)でのみ使用できます。ネイティブコンパイル済みコードの可搬性は、共有ライブラリー(@file{.so}や@file{.dll}のファイル)の可搬性と同様です。

  ネイティブコンパイル済みコードのライブラリーにはEmacs Lispプリミティブ(@ref{What Is a
Function}を参照)とそれらの呼び出し規約に関して重大な依存性が含まれているので、Emacsは通常はバージョンの異なるEmacsが生成したネイティブコンパイル済みコードをロードしません。同一のLispコードで異なるバージョンのEmacsがネイティブコンパイルしたコードは、ネイティブコンパイル済みライブラリーをそのバージョンのEmacsだけがロードできる一意なファイル名で生成します。しかし一意なファイル名の使用により、複数の異なるバージョンのEmacsによりネイティブコンパイルされた同じLispライブラリーの複数のバージョンの同一ディレクトリーへの配置が有効になります。

@vindex no-native-compile
  ファイルローカル変数として@code{no-byte-compile}に非@code{nil}をバインドしても、そのファイルのネイティブコンパイルが無効になります。加えて同様の変数@code{no-native-compile}は、ファイルのネイティブコンパイルだけを無効にします。@code{no-byte-compile}と@code{no-native-compile}の両方が指定された場合には、前者が優先されます。

@cindex native compilation, prevent writing @file{*.eln} files
  ネイティブコンパイルによる@code{user-emacs-directory}のサブディレクトリー内の@file{*.eln}ファイルへの結果の書き込みを防がなければならない場合もあるかもしれません。これは@code{native-comp-eln-load-path}の値を変更するか(@ref{Native-Compilation
Variables}を参照)、あるいは環境変数@env{HOME}が一時的に既存ディレクトリー以外を指すようにすることで行うことができます。後者のテクニックはEmacsが@dfn{トランポリン(trampolines)}を生成する必要がある場合(Lispコード内においてLispプリミティブをネイティブにコンパイルするためにアドバイスまたは再定義する際に用いられる)には、依然として少数の@file{*.eln}ファイルを生成するかもしれないことに注意が必要です。@ref{Native-Compilation
Variables,
trampolines}を参照してください。かわりに@code{startup-redirect-eln-cache}関数を使用してデフォルト以外のディレクトリーに@file{*.eln}ファイルを書き込むよう指定できます。@ref{Native-Compilation
Functions}を参照してください。

@menu
* Native-Compilation Functions::  Lispをネイティブコンパイルする関数。
* Native-Compilation Variables::  ネイティブコンパイルを制御する変数。
@end menu

@node Native-Compilation Functions
@section ネイティブコンパイル関数
@cindex native-compilation functions

   ネイティブコンパイルはバイトコンパイル(@ref{Byte
Compilation}を参照)の副作用として実装されています。したがってLispコードをネイティブコンパイルすると、同様にバイトコードが常に生成されるため、バイトコンパイル用にLispコードを準備する際の規則や注意事項(@ref{Compilation
Functions}を参照)は、ネイティブコンパイルでも同じようにすべて有効です。

   @code{native-compile}関数により単一の関数やマクロ、あるいはLispコードのファイル全体をネイティブコンパイルできます。ファイルをネイティブコンパイルすると、それに対応するネイティブコードの@file{.eln}ファイルが生成されます。

@findex native-comp-limple-mode
@vindex native-comp-verbose
  ネイティブコンパイルでは警告やエラーが生成されるかもしれません。これらは通常は@file{*Native-compile-Log*}と呼ばれるバッファーに記録されます。このバッファーではインタラクティブなセッションではLIMPLEという特別なモードが使用されます。このモードではログにたいして適切な@code{font-lock}ロックをセットアップされて、それ以外はFundamentalモードと同じです。ネイティブコンパイルの結果メッセージのロギングは変数@code{native-comp-verbose}で制御できます(@ref{Native-Compilation
Variables}を参照)。

  Emacsが非インタラクティブに実行されている際には、ネイティブコンパイルによって生成されたメッセージは@code{message}
(@ref{Displaying
Messages}を参照)の呼び出しによって報告されます。これは通常はEmacsを呼び出した端末の標準エラーストリームに表示されます。

@defun native-compile function-or-file &optional output
この関数は@var{function-or-file}をネイティブコードにコンパイルする。引数@var{function-or-file}にはコンパイルする関数シンボル、Lispフォーム、またはEmacs
Lispソースコードを含むファイル名(文字列)を指定できる。オプション引数@var{output}が与えられた場合には、コンパイル済みコードを書き込むファイルの名前を指定する文字列でなければならない。それ以外の場合には、@var{function-or-file}が関数かLispフォームならコンパイル済みオブジェクト、ファイル名ならコンパイル済みコード用に作成したファイルの完全な絶対ファイル名をリターンする。出力ファイルにはデフォルトで拡張子@file{.eln}が与えられる。

この関数は@file{libgccjit}を通じて別のサブプロセス内でGCCを呼び出すネイティブコンパイルの最終フェーズを実行する。これはこの関数を呼び出したプロセスとして、同じEmacs実行可能形式を呼び出す。
@end defun

@defun batch-native-compile &optional for-tarball
この関数はbatchモードでEmacsのコマンドラインで指定されたファイルにたいしてネイティブコンパイルを実行する。これはコンパイル完了によりEmacsをkillするので、Emacsのバッチ実行でのみ使用しなければならない。1つ以上のファイルでコンパイルが失敗すると、Emacsプロセスはそれ以外のすべてのファイルのコンパイルを試みて、非0のexitステータスで終了する。オプション引数@var{for-tarball}が非@code{nil}なら、この関数はコンパイルした結果の@file{.eln}ファイルを@code{native-comp-eln-load-path}に記述された最後のディレクトリーに配置する(@ref{Library
Search}を参照)。これは初回にEmacsソースtarballをビルドするときに、ソースtarballに含まれていないネイティブコンパイル済みファイルをユーザーのキャッシュディレクトリーではなくビルドツリー内に生成する必要がある際に使用されることを意図している。
@end defun

ネイティブコンパイルはメインのEmacsプロセスのサブプロセス中で、全体を非同期に実行できます。これによりバックグラウンドでコンパイルを実行する間、メインのEmacsプロセスをフリーにできます。これはEmacsにロードされた任意のLispファイルやバイトコンパイル済みLispファイルを、Emacsがネイティブコンパイルするために使用する手法です。サブプロセスをこのように使用することによって、ネイティブコンパイルではバイトコンパイルでは発生しない警告やエラーが生成されるかもしれず、それ故に正しく機能するようにLispコードの修整が必要かもしれないことに注意してください。詳細は@ref{Native-Compilation
Variables}の@code{native-comp-async-report-warnings-errors}を参照してください。

@defun native-compile-async files &optional recursively load selector
この関数は@var{files}という名前のファイルを非同期にコンパイルする。引数@var{files}は単一のファイル名(文字列)、または1つ以上のファイルおよび/またはディレクトリー名のリストであること。このリスト中にディレクトリーが与えられた場合には、それらのディレクトリー内で再帰的にコンパイルするように、オプション引数@var{recursively}は非@code{nil}であること。@var{load}が非@code{nil}なら、Emacsはコンパイルが成功したそれぞれのファイルをロードする。オプション引数@var{selector}により@var{files}のどれをコンパイルするか制御できる。これには以下のいずれかの値を指定できる:

@table @asis
@item @code{nil}または省略
@var{files}内のすべてのファイルとディレクトリーを選択。
@item 正規表現文字列
このregexpに名前がマッチするファイルとディレクトリーを選択。
@item 関数
@var{files}内のファイルおよびディレクトリーそれぞれにたいして呼び出される述語関数。そのファイルまたはディレクトリーを選択する必要があるなら非@code{nil}をリターンすること。
@end table

複数のCPU実行ユニットをもつシステムでは、この関数は@var{files}が複数のファイル名の際には、通常は@code{native-comp-async-jobs-number}
(@ref{Native-Compilation Variables}を参照)の制御の下で複数のコンパイル用サブプロセスを並行で開始する。
@end defun

@deffn Command emacs-lisp-native-compile
このコマンドはカレントバッファーによってvisitされているファイルが最後にネイティブコンパイルされてから変更されていればネイティブコードにコンパイルする。
@end deffn

@deffn Command emacs-lisp-native-compile-and-load
このコマンドは@code{emacs-lisp-native-compile}と同様にカレントバッファーによってvisitされているファイルをネイティブコードにコンパイルするが、コンパイル完了時にネイティブコードのロードも行う。
@end deffn

  以下の関数により、実行時にネイティブコンパイルが利用可能かどうかをLispプログラムがテストできます。

@defun native-comp-available-p
この関数は実行中のEmacsにネイティブコンパイルのサポートがコンパイルされていれば非@code{nil}をリターンする。@file{libgccjit}を動的にロードするシステムでは、ライブラリーｇ利用できロードできることも確認する。ネイティブコンパイルが利用可能か事前に知る必要があるLispプログラムはこの述語を使用すること。
@end defun

  非同期なネイティブコンパイルは@code{native-comp-eln-load-path}変数(@ref{Native-Compilation
Variables}を参照)で指定された最初の書き込み可能なディレクトリーのサブディレクトリーに生成した@file{*.eln}ファイルを書き込む。スタートアップファイルで以下の関数を使用してこれを変更できる:

@defun startup-redirect-eln-cache cache-directory
この関数は非同期なネイティブコンパイルが@var{cache-directory}
(単一のディレクトリーを表す文字列)に生成した@file{*.eln}ファイルを書き込むように手配する。更に@code{native-comp-eln-load-path}の最初の要素が@var{cache-directory}になるように破壊的な変更も行う。@var{cache-directory}が絶対ファイル名でなければ、@code{user-emacs-directory}
(@ref{Init File})。を参照から相対的なファイル名と解釈する。
@end defun

@node Native-Compilation Variables
@section ネイティブコンパイル関数
@cindex native-compilation variables

  このセクションではネイティブコンパイルを制御する変数について述べます。

@defopt native-comp-speed
この変数はネイティブコンパイルの最適化レベルを指定する。値は@minus{}1から3の数値であること。値0から3はコンパイラーの対応する最適化レベル@option{-O0}、@option{-O1}、...のコマンドラインオプションと等しい。値@minus{}1はネイティブコンパイルの無効化を意味する。この場合には関数およびファイルはバイトコンパイルされる。ただしバイトコード形式でコンパイルされたコードだけを含む@file{*.eln}ファイルは依然として生成される(@w{@code{(declare
(speed -1))}}を使えばこれを関数単位で行うこともできる。@ref{Declare Form}を参照)。デフォルト値は2。
@end defopt

@anchor{compilation-safety}
@defopt compilation-safety
This variable specifies the safety level to be used for the emitted native
code.  The value should be a number, either 0 or 1 with the following
meanings:

@table @asis
@item 0
Emitted code can misbehave (up to even crashing Emacs) if a function's
declaration does not describe correctly what the function does or how it is
called, and the function is natively compiled.
@item 1
Emitted code must be generated in a safe manner even if functions are
mis-declared.
@end table

This can also be controlled at a function granularity, by using the
@code{safety} @code{declare} form, @pxref{Declare Form}.
@end defopt

@defopt native-comp-debug
この変数はネイティブコンパイルが生成するデバッグ情報のレベルを指定する。値は0から3の数値で、以下のような意味をもつ:

@table @asis
@item 0
デバッグ出力なし。これがデフォルト。
@item 1
ネイティブコードでデバッグシンボルを発行する。これは@command{gdb}のようなデバッガによるネイティブコードの電話を容易にする。
@item 2
1と同様だが、更に疑似Cコードをダンプする。
@item 3
2と同様、更にGCC中間パス(GCC intermediate passes)と@file{libgccjit}ログファイルをダンプする。
@end table

When generated, the pseudo-C code is deposited in the same directory as the
corresponding @file{.eln} file.
@end defopt

@defopt native-comp-verbose
この変数はネイティブコンパイルが発行する一部またはすべてのログメッセージを抑制することにより、ネイティブコンパイルの冗長性(verbosity)を制御する。値が0(デフォルト)なら、ログメッセージはすべて抑制される。1から3の値をセットすることにより、レベルが上述の値であるようなメッセージのロギングを可能にする。値には以下のような解釈がある:

@table @asis
@item 0
ログなし。これがデフォルト。
@item 1
コードの最終的な@acronym{LIMPLE}表現をログ。
@item 2
@acronym{LAP}、最終的な@acronym{LIMPLE}、および追加のパス情報をログ。
@item 3
最大の冗長性。すべてをログ。
@end table
@end defopt

@defopt native-comp-async-jobs-number
この変数は同時に開始するネイティブコンパイルのサブプロセスの最大数を決定する。非負の数値であること。デフォルト値0はCPU実行ユニットの半数の使用、1は単一の実行ユニットの使用を意味する。
@end defopt

@defopt native-comp-async-report-warnings-errors
この変数の値が非@code{nil}なら、ネイティブコンパイルの非同期サブプロセスからの警告とエラーは、メインのEmacsセッションの@file{*Warnings*}という名前のバッファーに報告される。デフォルト値の@code{t}はそのバッファーへの表示を意味する。@file{*Warnings*}バッファーをポップアップせずに警告をログするには、この変数に@code{silent}をセットすればよい。

  非同期ネイティブコンパイルで警告が生成されるのは、必要な機能にたいする@code{require}が欠落したファイルのコンパイルが原因であることが多い。この機能はメインのEmacsにロードされるかもしれないが、ネイティブコンパイルは常にサブプロセスから初期状態の環境で開始されるので、サブプロセスではロードされないかもしれない。
@end defopt

@defopt native-comp-async-query-on-exit
この変数の値が非@code{nil}なら、Emacsはexitに際して実行中のネイティブコンパイルの非同期サブプロセスをすべてkillしてexitするかどうかを尋ねる(対応する@file{.eln}ファイルへの書き込みを防ぐため)。値が@code{nil}
(デフォルト)なら、Emacsは問い合わせを行わずにそれらのサブプロセスをkillする。
@end defopt

変数@code{native-comp-eln-load-path}はEmacsが@file{*.eln}ファイルを探すディレクトリーのリストを保持します(@ref{Library
Search}を参照)。これは役割りの面では@file{*.el}や@file{*.elc}のファイルを探すために使用される@code{load-path}と同じです。このリストにあるディレクトリーは非同期のネイティブコンパイルによって生成された@file{*.eln}ファイルの書き込みにも使用されます。特にEmacsはこのリスト中の最初に書き込み可能なディレクトリーにファイルを書き込むでしょう。したがってこの変数の値を変更することで、ネイティブコンパイルが結果を格納する場所を制御することができます。

@cindex disable asynchronous native compilation
@cindex inhibit asynchronous native compilation
@cindex asynchronous native compilation, disable
@defvar native-comp-jit-compilation
この変数が非@code{nil}であれば、対応する@file{*.eln}がまだ存在しないEmacsにロード済みの@file{*.elc}の非同期(別名@dfn{just-in-time}、あるいは@acronym{JIT})なネイティブコンパイルを有効にする。このJITコンパイルは@code{native-comp-async-jobs-number}の値に応じて、batchモードで走行する別個のEmacsサブプロセスを使用する。LispファイルのJITコンパイルが、成功裏に終了した際にはコンパイル結果の@file{.eln}ファイルがロードされて、@file{.elc}ファイルによって提供されていた関数定義をコンパイルしたコードで置き換える。
@end defvar

@cindex trampolines, in native compilation
  @code{native-comp-jit-compilation}の値を@code{nil}にセットすることによって、JITネイティブコンパイルが無効になります。ただしたとえJITネイティブコンパイルを無効にしても、@dfn{トランポリン(trampolines)}を生成するために依然としてEmacsは非同期ネイティブコンパイルを開始する必要があるかもしれません。これを制御するためには、以下で説明する別の変数を使用します。

@defvar native-comp-enable-subr-trampolines
この変数はトランポリンの生成を制御する。トランポリンとは@code{native-comp-speed}が2以上でネイティブコンパイルされたLispコードから、アドバイスまたは再定義されたLispプリミティブの呼び出しを許すために必要な小さいネイティブコード片のこと。Emacsは生成されたトランポリンを別の@file{*.eln}ファイルに格納する。この変数のデフォルトの値はトランポリンファイルの生成を有効にする@code{t}だが、値を@code{nil}にセットすることでトランポリンの生成が無効になる。プリミティブにたいするアドバイスや再定義に必要となるトランポリンが利用できなければ、ネイティブコンパイルされたLispからのプリミティブ呼び出しでは再定義とアドバイスは無視されて、プリミティブは直接Cから呼び出されたかのように振る舞うことに注意。したがってあなたのLispプログラムに必要なトランポリンすべてがコンパイル済みでEmacsからアクセス可能であることが不明なら、トランポリン生成の無効化は推奨しない。

この変数の値は文字列でもよく、その場合には生成されたトランポリンである@file{*.eln}ファイルを格納するディレクトリー名を指定する。このディレクトリー名は@code{native-comp-eln-load-path}のディレクトリーをオーバーライドする。これは必要に応じてトランポリンを生成したいものの、ユーザーの@env{HOME}ディレクトリーや@file{*.eln}が保持されるその他のパブリックディレクトリーの配下には格納したくない場合に役に立つ。ただし@code{native-comp-eln-load-path}内のディレクトリーとは異なり、トランポリンはバージョン固有のサブディレクトリーではなくこの変数で与えられたディレクトリーに格納されることになる。このディレクトリーが絶対名でなければ、@code{invocation-directory}
(@ref{System Environment}を参照)に相対的なディレクトリー名と解釈される。

この変数が非@code{nil}、かつEmacsがトランポリンの生成を要するもののトランポリンを格納するための書き込み可能ディレクトリーが見つからない場合には、トランポリンを@code{temporary-file-directory}
(@ref{Unique File Names}を参照)の内部に格納する。

格納するための書き込み可能ディレクトリーが見つからない、あるいはこの変数の値が文字列の際に生成されたトランポリンは、Emacsのカレントセッションの間のみ利用できる。なぜならEmacsはいずれの場所からもトランポリンを探さないからである。
@end defvar
