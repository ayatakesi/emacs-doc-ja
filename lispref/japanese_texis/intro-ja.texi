@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================

@c -*-coding: utf-8-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990--1994, 2001--2024 Free Software Foundation, Inc.
@c See the file elisp-ja.texi for copying conditions.

@node Introduction
@chapter イントロダクション

  GNU Emacsテキストエディターのほとんどの部分は、Emacs Lispと呼ばれるプログラミング言語で記述されています。新しいコードをEmacs
Lispで記述して、このエディターの拡張としてインストールできます。しかしEmacs
Lispは、単なる拡張言語を越える言語であり、それ自体で完全なコンピュータープログラミング言語です。他のプログラミング言語で行なうすべてのことに、この言語を使用できます。

  Emacs
Lispはエディターの中で使用するようにデザインされているので、テキストのスキャンやパースのための特別な機能をもち、同様にファイル、バッファー、ディスプレイ、サブプロセスを処理する機能をもちます。Emacs
Lispは編集機能と密に統合されています。つまり編集コマンドはLispプログラムから簡単に呼び出せる関数で、カスタマイズのためのパラメーターは普通のLisp変数です。

  このマニュアルはEmacs Lispの完全な記述を試みます。初心者のためのEmacs Lispのイントロダクションは、Free Software
Foundationからも出版されている、Bob Chassellの@cite{An Introduction to Emacs Lisp
Programming}を参照してください。このマニュアルは、Emacsを使用した編集に熟知していることを前提としています。これの基本的な情報については、@cite{The
GNU Emacs Manual}を参照してください。

  おおまかに言うと、前の方のチャプターでは多くのプログラミング言語の機能にたいして、Emacs
Lispでの対応する機能を説明し、後の方のチャプターではEmacs Lispに特異な機能や、編集に特化した関連する機能を説明します。

  これは
@iftex
@ifset VERSION
エディション@value{VERSION}
@end ifset
@end iftex
Emacs @value{EMACSVER}に対応した@cite{GNU Emacs Lisp Reference Manual}です。

@menu
* Caveats::                  不備な点と、助けを求める方法。
* Lisp History::             Maclispを後継するEmacs Lisp。
* Conventions::              このマニュアルのフォーマット方法。
* Version Info::             実行中のEmacsのバージョンは?
* Acknowledgments::          このマニュアルの著者、編集者、スポンサー。
@end menu

@node Caveats
@section 注意事項
@cindex bugs in this manual

  このマニュアルは幾多のドラフトを経てきました。ほとんど完璧ではありますが、不備がないとも言えません。(ほとんどの特定のモードのように)それらが副次的であるとか、まだ記述されていないという理由により、カバーされていないトピックもあります。わたしたちがそれらを完璧に扱うことはできないので、いくつかの部分は意図的に省略しました。

  このマニュアルは、それがカバーしている事柄については完全に正しくあるべきあり、故に特定の説明テキスト、チャプターやセクションの順番にたいしての批判にオープンであるべきです。判りにくかったり、このマニュアルでカバーされていない何かを学ぶためにソースを見たり実地から学ぶ必要があるなら、このマニュアルはおそらく訂正されるべきなのかもしれません。どうかわたしたちにそれを教えてください。

@iftex
  このマニュアルを使用するときは、訂正のためにページにマークしてください。そうすれば後でそれを探して、わたしたちに送ることができます。関数や関数グループの単純で現実的な例を思いついたときは、ぜひそれを記述して送ってください。それが妥当ならチャプター名、セクション名、関数名への参照をコメントしてください。なぜならページ番号やチャプター番号、セクション番号は変更されるので、あなたが言及しているテキストを探すのに問題が生じるかもしれないからです。あなたが訂正を求めるエディションのバージョンも示してください。
@end iftex
@ifnottex

このマニュアルを使用するときは、間違いを見つけたらすぐに訂正を送ってください。関数または関数グループの単純な現実例を考えたときは、ぜひそれを記述して送ってください。それが妥当ならコメントでノード名と関数名や変数名を参照してください。あなたが訂正を求めるエディションのバージョンも示してください。
@end ifnottex

@cindex bugs
@cindex suggestions
コメントや訂正の送信には、@kbd{M-x report-emacs-bug}を使用するようお願いします。詳細については、 @ref{Bugs,,
Reporting Bugs, emacs, The GNU Emacs Manual}を参照してください。

@node Lisp History
@section Lispの歴史
@cindex Lisp history

  Lisp(LISt Processing language: リスト処理言語)は、MIT(Massachusetts Institute of
Technology: マサチューセッツ工科大学)で、AI(artificial intelligence:
人工知能)の研究のために、1950年代末に最初に開発されました。Lisp言語の強力なパワーは、編集コマンドの記述のような、他の目的にも適っています。

@cindex Maclisp
@cindex Common Lisp
  長年の間に何ダースものLisp実装が構築されてきて、それらのそれぞれに特異な点があります。これらの多くは、1960年代にMITのProject
MACで記述された、Maclispに影響を受けています。最終的に、Maclisp後裔の実装者は共同して、Common
Lispと呼ばれる標準のLispシステムを開発しました。その間にMITのGerry SussmanとGuy
Steeleにより、簡潔ながらとても強力なLisp方言の、Schemeが開発されました。

  GNU Emacs LispはMaclispから多く、Common Lispから少し影響を受けています。Common
Lispを知っている場合、多くの類似点に気づくでしょう。しかしCommon Lispの多くの機能は、GNU
Emacsが要求するメモリー量を削減するために、省略または単純化されています。ときには劇的に単純化されているために、Common
Lispユーザーは混乱するかもしれません。わたしたちは時折GNU Emacs LispがCommon Lispと異なるか示すでしょう。Common
Lispを知らない場合、それについて心配する必要はありません。このマニュアルは、それ自体で自己完結しています。

@pindex cl
  @file{cl-lib}ライブラリーを通じて、Common Lispをかなりエミュレートできます。@ref{Top,, Overview, cl,
Common Lisp Extensions}を参照してください。

  Emacs
LispはSchemeの影響は受けていません。しかしGNUプロジェクトにはGuileと呼ばれるScheme実装があります。拡張が必要な新しいGNUソフトウェアーでは、Guileを使用します。

@node Conventions
@section Lispの歴史

このセクションでは、このマニュアルで使用する表記規約を説明します。あなたはこのセクションをスキップして、後から参照したいと思うかもしれません。

@menu
* Some Terms::               このマニュアルで使用する用語の説明。
* nil and t::                シンボル@code{nil}と@code{t}の使用方法。
* Evaluation Notation::      評価の例で使用するフォーマット。
* Printing Notation::        テキストのプリント例で使用するフォーマット。
* Error Messages::           エラー例で使用するフォーマット。
* Buffer Text Notation::     例のバッファー内容で使用するフォーマット。
* Format of Descriptions::   関数や変数などの説明にたいする表記。
@end menu

@node Some Terms
@subsection Lispの歴史

  このマニュアルでは、``Lispリーダー''および``Lispプリンター''という用語で、Lispのテキスト表現を実際のLispオブジェクトに変換したり、その逆を行なうLispルーチンを参照します。詳細については、@ref{Printed
Representation}を参照してください。あなた、つまりこのマニュアルを読んでいる人のことはプログラマーと考えて``あなた''と呼びます。``ユーザー''とは、あなたの記述したものも含めて、Lispプログラムを使用する人を指します。

@cindex typographic conventions
  Lispコードの例は、@code{(list 1 2 3)}のようなフォーマットです。メタ構文変数(metasyntactic
variables)を表す名前や、説明されている関数の引数名前は、@var{first-number}のようにフォーマットされています。

@node nil and t
@subsection @code{nil}と@code{t}
@cindex truth value
@cindex boolean

@cindex @code{nil}
@cindex false
  Emacs
Lispでは、シンボル@code{nil}には3つの異なる意味があります。1つ目は@samp{nil}という名前のシンボル、2つ目は論理値の@var{false}、3つ目は空リスト
--- つまり要素が0のリストです。変数として使用した場合、@code{nil}は常に値@code{nil}をもちます。

  Lispリーダーに関する限り、@samp{()}と@samp{nil}は同一です。これらは同じオブジェクト、つまりシンボル@code{nil}を意味します。このシンボルを異なる方法で記述するのは、完全に人間の読み手を意図したものです。Lispリーダーが@samp{()}か@samp{nil}のどちらかを読み取った後は、プログラマーが実際にどちらの表現で記述したかを判断する方法はありません。

  このマニュアルでは、空リストを意味することを強調したいときは@code{()}と記述し、論理値の@var{false}を意味することを強調したいときは@code{nil}と記述します。この慣習はLispプログラムで使用してもよいでしょう。

@example
(cons 'foo ())                ; @r{空リストを強調}
(setq foo-flag nil)           ; @r{論理値の@var{false}を強調}
@end example

@cindex @code{t}
@cindex true
  論理値が期待されているコンテキストでは、非@code{nil}は@var{true}と判断されます。しかし論理値の@var{true}を表す好ましい方法は@code{t}です。@var{true}を表す値を選択する必要があり、他に選択の根拠がない場合は@code{t}を使用してください。シンボル@code{t}は、常に値@code{t}をもちます。

  Emacs
Lispでの@code{nil}と@code{t}は、常に自分自身を評価する特別なシンボルです。そのためプログラムでこれらを定数として使用する場合、クォートする必要はありません。これらの値の変更を試みると、結果は@code{setting-constant}エラーとなります。@ref{Constant
Variables}を参照してください。

@defun booleanp object
@var{object}が2つの正規のブーリーン値(@code{t}か@code{nil})のいずれかなら、非@code{nil}をリターンする。
@end defun

@node Evaluation Notation
@subsection 評価の表記
@cindex evaluation notation
@cindex documentation notation
@cindex notation

  評価できるLisp式のことを@dfn{フォーム(form)}と呼びます。フォームの評価により、これは結果として常にLispオブジェクトを生成します。このマニュアルの例では、これを@samp{@result{}}で表します:

@example
(car '(1 2))
     @result{} 1
@end example

@noindent
これは``@code{(car '(1 2))}を評価すると、1になる''と読むことができます。

  フォームがマクロ呼び出しの場合、それは評価されるための新たなLispフォームに展開されます。展開された結果は@samp{@expansion{}}で表します。わたしたちは展開されたフォームの評価し結果を示すこともあれば、示さない場合もあります。

@example
(third '(a b c))
     @expansion{} (car (cdr (cdr '(a b c))))
     @result{} c
@end example

  1つのフォームを説明するために、同じ結果を生成する別のフォームを示すこともあります。完全に等価な2つのフォームは、@samp{@equiv{}}で表します。

@example
(make-sparse-keymap) @equiv{} (list 'keymap)
@end example

@node Printing Notation
@subsection プリントの表記
@cindex printing notation

  このマニュアルの例の多くは、それらが評価されるときにテキストをプリントします。(@file{*scratch*}バッファーのような)Lisp
Interactionバッファーで閉カッコの後で@kbd{C-j}をタイプすることによりコード例を実行する場合には、プリントされるテキストはそのバッファーに挿入されます。(関数@code{eval-region}での評価のように)他の方法でコード例を実行する場合、プリントされるテキストはエコーエリアに表示されます。

  このマニュアルの例はプリントされるテキストがどこに出力されるかに関わらず、それを@samp{@print{}}で表します。フォームを評価することにより戻される値は、@samp{@result{}}とともに後続の行で示します。

@example
@group
(progn (prin1 'foo) (princ "\n") (prin1 'bar))
     @print{} foo
     @print{} bar
     @result{} bar
@end group
@end example

@node Error Messages
@subsection エラーメッセージ
@cindex error message notation

  エラーをシグナルする例もあります。これは通常、エコーエリアにエラーメッセージを表示します。エラーメッセージの行は@samp{@error{}}で始まります。@samp{@error{}}自体は、エコーエリアに表示されないことに注意してください。

@example
(+ 23 'x)
@error{} Wrong type argument: number-or-marker-p, x
@end example

@node Buffer Text Notation
@subsection バッファーテキストの表記
@cindex buffer text notation

  バッファー内容の変更を説明する例もあます。それらの例では、そのテキストのbefore(以前)とafter(以後)のバージョンを示します。それらの例では、バッファー内容の該当する部分を、ダッシュを用いた2行の破線(バッファー名を含む)で示します。さらに、@samp{@point{}}はポイントの位置を表します(もちろんポイントのシンボルはバッファーのテキストの一部ではなく、ポイントが現在配されている2つの文字の@emph{間}の位置を表す)。

@example
---------- Buffer: foo ----------
This is the @point{}contents of foo.
---------- Buffer: foo ----------

(insert "changed ")
     @result{} nil
---------- Buffer: foo ----------
This is the changed @point{}contents of foo.
---------- Buffer: foo ----------
@end example

@node Format of Descriptions
@subsection 説明のフォーマット
@cindex description format

  このマニュアルでは関数(function)、変数(variable)、コマンド(command)、ユーザーオプション(user
option)、スペシャルフォーム(special
form)を、統一されたフォーマットで記述します。記述の最初の行には、そのアイテムの名前と、もしあれば引数(argument)が続きます。
@ifnottex
そのアイテムの属するカテゴリー(function、variableなど)は、行の先頭に表示します。
@end ifnottex
@iftex
そのアイテムの属するカテゴリー(function、variableなど)は、ページの右マージンの隣にプリントされます。
@end iftex
それ以降の行は説明行で、例を含む場合もあります。

@menu
* A Sample Function Description::  架空の関数@code{foo}にたいする記述例。
* A Sample Variable Description::  架空の変数@code{electric-future-map}にたいする記述例。
@end menu

@node A Sample Function Description
@subsubsection 関数の説明例
@cindex function descriptions
@cindex command descriptions
@cindex macro descriptions
@cindex special form descriptions

  関数の記述では、関数の名前が最初に記述されます。同じ行に引数の名前のリストが続きます。引数の値を参照するために、引数の名前は記述の本文にも使用されます。

  引数リストの中にキーワード@code{&optional}がある場合、その後の引数が省略可能であることを示します(省略された引数のデフォルトは@code{nil})。その関数を呼び出すときは、@code{&optional}を記述しないでください。

  キーワード@code{&rest}(これの後には1つの引数名を続けなければならない)は、その後に任意の引数を続けることができることを表します。@code{&rest}の後に記述された引数名の値には、その関数に渡された残りのすべての引数がリストとしてセットされます。この関数を呼び出すときは、@code{&rest}を記述しないでください。

  以下は@code{foo}という架空の関数(function)の説明です:

@defun foo integer1 &optional integer2 &rest integers
関数@code{foo}は@var{integer2}から@var{integer1}を減じてから、その結果に残りすべての引数を加える。@var{integer2}が与えられなかった場合、デフォルトして数値19が使用される。

@example
(foo 1 5 3 9)
     @result{} 16
(foo 5)
     @result{} 14
@end example

@need 1500
より一般的には、

@example
(foo @var{w} @var{x} @var{y}@dots{})
@equiv{}
(+ (- @var{x} @var{w}) @var{y}@dots{})
@end example
@end defun

  慣例として引数の名前には、(たとえば@var{integer}、@var{integer1}、@var{buffer}のような)期待されるタイプ名が含まれます。(@var{buffers}のような)複数形のタイプは、しばしばその型のオブジェクトのリストを意味します。@var{object}のような引き数名は、それが任意の型であることを表します(Emacsオブジェクトタイプのリストは@ref{Lisp
Data
Types}を参照)。他の名前をもつ引数(たとえば@var{new-file})はその関数に固有の引数で、関数がドキュメント文字列をもつ場合、引数のタイプはその中で説明されるべきです(@ref{Documentation}を参照)。

  @code{&optional}や@code{&rest}により修飾される引数のより完全な説明は、@ref{Lambda
Expressions}を参照してください。

  コマンド(command)、マクロ(macro)、スペシャルフォーム(special
form)の説明も同じフォーマットですが、@samp{Function}が@samp{Command}、@samp{Macro}、@samp{Special
Form}に置き換えられます。コマンドはとは単に、インタラクティブ(interactive:
対話的)に呼び出すことができる関数です。マクロは関数とは違う方法(引数は評価されない)で引数を処理しますが、同じ方法で記述します。

  マクロとスペシャルフォームにたいする説明には、特定のオプション引数や繰り替えされる引数のために、より複雑な表記が使用されます。なぜなら引数リストが、より複雑な方法で別の引数に分離されるからです。@samp{@r{[}@var{optional-arg}@r{]}}は@var{optional-arg}がオプションであることを意味し、@samp{@var{repeated-args}@dots{}}は0個以上の引数を表します。カッコ(parentheses)は、複数の引数をリスト構造の追加レベルにグループ化するのに使用されます。以下は例です:

@defspec count-loop (var [from to [inc]]) body@dots{}
この架空のスペシャルフォームは、
@var{body}フォームを実行してから変数@var{var}をインクリメントするループを実装します。最初の繰り返しでは変数は値@var{from}をもちます。以降の繰り返しでは、変数は1(@var{inc}が与えられた場合は@var{inc})増分されます。@var{var}が@var{to}に等しい場合、@var{body}を実行する前にループをexitします。以下は例です:

@example
(count-loop (i 0 10)
  (prin1 i) (princ " ")
  (prin1 (aref vector i))
  (terpri))
@end example

@var{from}と@var{to}が省略された場合、ループを実行する前に@var{var}に@code{nil}がバインドされ、繰り返しの先頭において@var{var}が非@code{nil}の場合は、ループをexitします。以下は例です:

@example
(count-loop (done)
  (if (pending)
      (fixit)
    (setq done t)))
@end example

このスペシャルフォームでは、引数@var{from}と@var{to}はオプションですが、両方を指定するか未指定にするかのいずれかでなければなりません。これらの引数が与えられた場合には、オプションで@var{inc}も同様に指定することができます。これらの引数は、フォームのすべての残りの要素を含む@var{body}と区別するために、引数@var{var}とともにリストにグループ化されます。
@end defspec

@node A Sample Variable Description
@subsubsection 変数の説明例
@cindex variable descriptions
@cindex option descriptions

  @dfn{変数(variable)}とは、オブジェクトに@dfn{バインド(bind)}される名前です(@dfn{セット(set)}とも言う)。変数がバインドされたオブジェクトのことを@dfn{値(value)}と呼びます。このような場合には、その変数が値をもつという言い方もします。ほとんどすべての変数はユーザーがセットすることができますが、特にユーザーが変更できる特定の変数も存在し、これらは@dfn{ユーザーオプション(user
options)}と呼ばれます。通常の変数およびユーザーオプションは、関数と同様のフォーマットを使用して説明されますが、それらには引数がありません。

  以下は架空の変数@code{electric-future-map}の説明です。

@defvar electric-future-map
この変数の値はElectric Command
Futureモードで使用される完全なキーマップである。このマップ内の関数により、まだ実行を考えていないコマンドの編集が可能になる。
@end defvar

  ユーザーオプションも同じフォーマットをもちますが、@samp{Variable}が@samp{User Option}に置き換えられます。

@node Version Info
@section バージョンの情報

  以下の機能は、使用しているEmacsに関する情報を提供します。

@deffn Command emacs-version &optional here
この関数は実行しているEmacsのバージョンを説明する文字列をreturnすす。これはバグレポートにこの文字列を含めるときに有用である。

@smallexample
@group
(emacs-version)
  @result{} "GNU Emacs 26.1 (build 1, x86_64-unknown-linux-gnu,
             GTK+ Version 3.16) of 2017-06-01"
@end group
@end smallexample

@var{here}が非@code{nil}ならテキストをバッファーのポイントの前に挿入して、@code{nil}をリターンする。この関数がインタラクティブに呼び出すと、同じ情報をエコーエリアに出力する。プレフィクス引数を与えると、@var{here}が非@code{nil}になる。
@end deffn

@defvar emacs-build-time
この変数の値はEmacsがビルドされた日時を示す。値は@code{current-time}の形式(@ref{Time of
Day}を参照)、その情報が利用できなければ@code{nil}。

@example
@group
emacs-build-time
     @result{} (25194 55894 8547 617000)
@end group
@end example
(Emacsのビルド時に@code{current-time-list}が@code{nil}なら、タイムスタンプは@code{(1651169878008547617
. 1000000000)}になる。)
@end defvar

@defvar emacs-version
この変数の値は実行中のEmacsのバージョンであり、@code{"26.1"}のような文字列。@code{"26.0.91"}のように3つの数値コンポーネントをもつ値はリリース版ではなくテストバージョンであることを示す(Emacs
26.1より前では@code{"25.1.1"}のように文字列の最後に余分な整数コンポーネントが含まれていたが、これは現在は@code{emacs-build-number}に格納される)。
@end defvar

@defvar emacs-major-version
Emacsのメジャーバージョン番号を示す整数。Emacs 23.1では値は23。
@end defvar

@defvar emacs-minor-version
Emacsのマイナーバージョン番号を示す整数。Emacs 23.1では値は1。
@end defvar

@defvar emacs-build-number
これは同一のディレクトリーにおいてEmacsが(クリーニングなしで)ビルドされるたびに増分される整数。これはEmacsの開発時だけに関係のある変数。
@end defvar

@defvar emacs-repository-version
Emacsがビルドされたレポジトリのリビジョン番号を与える文字列。Emacsがリビジョンコントロール外部でビルドされた場合の値は@code{nil}。
@end defvar

@defvar emacs-repository-branch
Emacsがビルドされたレポジトリブランチを与える文字列。ほとんどの場合は@code{"master"}。Emacsがリビジョンコントロール外部でビルドされた場合の値は@code{nil}。
@end defvar

@node Acknowledgments
@section 謝辞

  このマニュアルは当初、Robert Krawitz、Bil Lewis、Dan
LaLiberte、Richard@tie{}M. Stallman、Chris
Welty、およびGNUマニュアルグループのボランティアにより、数年を費やして記述されました。Robert@tie{}J.
Chassellはこのマニュアルのレビューと編集をDefense Advanced Research Projects Agency、ARPA
Order 6082のサポートのもとに手助けしてくれ、Computational Logic, IncのWarren@tie{}A. Hunt,
Jr.によりアレンジされました。それ以降も追加のセクションがMiles Bader、Lars Brinkhoff、Chong
Yidong、Kenichi Handa、Lute Kamstra、Juri Linkov、Glenn Morris、Thien-Thi
Nguyen、Dan Nicolaescu、Martin Rudalics、Kim F. Storm、Luc Teirlinck、Eli
Zaretskii、およびその他の人たちにより記述されました。

  Drew Adams、Juanma Barranquero、Karl Berry、Jim Blandy、Bard Bloom、Stephane
Boucher、David Boyes、Alan Carroll、Richard Davis、Lawrence R. Dodd、Peter
Doornbosch、David A. Duff、Chris Eich、Beverly Erlebacher、David Eckelkamp、Ralf
Fassel、Eirik Fuller、Stephen Gildea、Bob Glickstein、Eric Hanchrow、Jesper
Harder、George Hartzell、Nathan Hess、Masayuki Ida、Dan Jacobson、Jak Kirman、Bob
Knighten、Frederick M. Korz、Joe Lammens、Glenn M. Lewis、K. Richard
Magill、Brian Marick、Roland McGrath、Stefan Monnier、Skip Montanaro、John
Gardiner Myers、Thomas A. Peterson、Francesco Potortì、Friedrich
Pukelsheim、Arnold D. Robbins、Raul Rockwell、Jason Rumney、Per
Starbäck、Shinichirou Sugou、Kimmo Suominen、Edward Tharp、Bill Trost、Rickard
Westman、Jean White、Eduard Wiebe、Matthew Wilding、Carl Witty、Dale Worley、Rusty
Wright、David D. Zuhnにより訂正が提供されました。

  より完全な貢献者のリストは、Emacsソースレポジトリの関連する変更ログエントリーを参照してください。
