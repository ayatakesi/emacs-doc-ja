@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================

@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990--1995, 1999, 2001--2024 Free Software Foundation,
@c Inc.
@c See the file elisp-ja.texi for copying conditions.
@node Backups and Auto-Saving
@chapter バックアップと自動保存
@cindex backups and auto-saving

  バックアップファイルとauto-save(自動保存)ファイルは、Emacsのクラッシュやユーザー自身のエラーからユーザーの保護を試みるための2つの手段です。自動保存(auto-saving)はカレントの編集セッションを開始した以降のテキストを保存します。一方バックアップファイルはカレントセッションの前のファイルコンテンツを保存します。

@menu
* Backup Files::             バックアップファイルの作成と名前選択の方法。
* Auto-Saving::              auto-saveファイルの作成と名前選択の方法。
* Reverting::                @code{revert-buffer}とその動作のカスタマイズ方法。
@end menu

@node Backup Files
@section ファイルのバックアップ
@cindex backup file

  @dfn{バックアップファイル(backup
file)}とは編集中ファイルの古いコンテンツのコピーです。Emacsはvisitされているファイルにバッファーを最初に保存するときにバックアップファイルを作成します。したがってバックアップファイルには、通常はカレント編集セッションの前にあったファイルのコンテンツが含まれています。バックアップファイルを一度存在したら、そのコンテンツは変更されずに残ります。

  バックアップは通常はvisitされているファイルを新たな名前にリネームすることによって作成されます。オプションでバックアップファイルがvisitされているファイルをコピーすることにより作成されるように指定できます。この選択により、複数の名前をもつファイルの場合に違いが生じます。また編集中のファイルの所有者が元のオーナーのままか、それとも編集ユーザーになるかにも影響し得ます。

  デフォルトではEmacsは編集中のファイルごとに単一のバックアップファイルを作成します。かわりに番号付きバックアップ(numbered
backup)を要求することもできます。その場合には新たなバックアップファイルそれぞれが新たな名前を得ます。必要なくなったときには古い番号付きバックアップを削除したり、Emacsにそれらを自動的に削除させることもできます。

  性能的な理由によりオペレーティングシステムはバックアップファイルのコンテンツを二次ストレージに即座に書き込まないかもしれず、オリジナルデータとバックアップデータのいずれかが変更されるまでバックアップデータをエイリアスするかもしれません。@ref{Files
and Storage}を参照してください。

@menu
* Making Backups::           Emacsがバックアップファイルを作成する方法とタイミング。
* Rename or Copy::           2つの選択肢: 
                               古いファイルのリネームとコピー。
* Numbered Backups::         ソースファイルごとに複数のバックアップを保持する。
* Backup Names::             バックアップファイル名の計算方法とカスタマイズ。
@end menu

@node Making Backups
@subsection バックアップファイルの作成
@cindex making backup files

@defun backup-buffer
  この関数は、もしそれが適切ならカレントバッファーにvisitされているファイルのバックアップを作成する。これは最初のバッファー保存を行う前に@code{save-buffer}により呼び出される。

リネームによりバックアップが作成されると、リターン値は(@var{modes} @var{extra-alist}
@var{backupname})という形式のコンスセルになる。ここで@var{modes}は@code{file-modes}
(@ref{Testing
Accessibility}を参照)でリターンされるような元ファイルのモードビット、@var{extra-alist}は@code{file-extended-attributes}
(@ref{Extended
Attributes}を参照)によりリターンされるような元ファイルの拡張属性を示すalist、そして@var{backupname}はバックアップの名前。

他のすべての場合(コピーによりバックアップが作成された、またはバックアップが作成されなかった)には、この関数は@code{nil}をリターンする。
@end defun

@defvar buffer-backed-up
  このバッファーローカル変数は、そのバッファーのファイルがバッファーによりバックアップされたかどうかを明示する。非@code{nil}ならバックアップファイルは書き込み済み、それ以外なら(バックアップが有効なら)次回保存時にファイルはバックアップされる。この変数は永続的にローカルであり@code{kill-all-local-variables}はこれを変更しない。
@end defvar

@defopt make-backup-files
この変数はバックアップファイルを作成するかどうかを決定する。非@code{nil}なら、Emacsは初回保存時にすべてのファイルのバックアップを作成する
--- ただし@code{backup-inhibited}が@code{nil}の場合(以下参照)。

以下の例はRmailバッファーだけで変数@code{make-backup-files}を変更して、それ以外では変更しない方法を示す。この変数を@code{nil}にセットすると、Emacsはそれらのファイルのバックアップ作成をストップするのでディスク容量の消費を節約するだろう(あなたはこのコードをinitファイルに配置したいと思うかもしれない)。

@smallexample
@group
(add-hook 'rmail-mode-hook
          (lambda () (setq-local make-backup-files nil)))
@end group
@end smallexample
@end defopt

@defvar backup-enable-predicate
この変数の値は、あるファイルがバックアップファイルをもつべきかどうかを決定するために、特定のタイミングで呼び出される関数ある。この関数は判断対象の絶対ファイル名という1つの引数を受け取る。この関数が@code{nil}をリターンすると、そのファイルにたいするバックアップは無効になる。それ以外なら、このセクション内の他の変数がバックアップ作成の是非と方法を指定する。

@findex normal-backup-enable-predicate
デフォルト値は@code{normal-backup-enable-predicate}で、これは@code{temporary-file-directory}と@code{small-temporary-file-directory}内のファイルをチェックする。
@end defvar

@defvar backup-inhibited
この変数が非@code{nil}ならバックアップは抑制される。これはvisitされているファイル名にたいする@code{backup-enable-predicate}のテスト結果を記録する。さらにvisitされているファイルにたいするバックアップ抑制にもとづいたその他の機構からも使用され得る。たとえばVCはバージョンコントロールシステムに管理されるファイルのバックアップを防ぐために、この変数を非@code{nil}にセットする。

これは永続的にローカルなのでメジャーモード変更により値は失われない。メジャーモードはこの変数ではなく、かわりに@code{make-backup-files}をセットすること。
@end defvar

@defopt backup-directory-alist
この変数の値はファイル名パターンとバックアップディレクトリーのalist。各要素は以下の形式をもつ
@smallexample
(@var{regexp} . @var{directory})
@end smallexample

@noindent
この場合には名前が@var{regexp}にマッチするファイルのバックアップが、@var{directory}内に作成されるだろう。@var{directory}には相対ディレクトリーか絶対ディレクトリーを指定できる。絶対ディレクトリーなら、マッチするすべてのファイルが同じディレクトリー内にバックアップされる。このディレクトリー内でのファイル名はクラッシュを避けるために、バックアップされるファイルの完全名のすべてのディレクトリー区切りが@samp{!}に変更される。結果の名前を切り詰めるファイルシステムでは、これは正しく機能しないだろう。

すべてのバックアップが単一のディレクトリーで行われる一般的なケースでは、alistは@samp{"."}と適切なディレクトリーからなるペアーという単一の要素を含むこと。

この変数が@code{nil}(デフォルト)、またはファイル名のマッチに失敗するとバックアップは元のファイルのディレクトリーに作成される。

長いファイル名がないMS-DOSファイルシステムでは、この変数は常に無視される。
@end defopt

@defopt make-backup-file-name-function
この変数の値はバックアップファイル名を作成する関数。関数@code{make-backup-file-name}はこれを呼び出す。@ref{Backup
Names,, Naming Backup Files}を参照のこと。

特定のファイルにたいして特別なことを行うために、これをバッファーローカルにすることもできる。変更する場合には、@code{backup-file-name-p}と@code{file-name-sans-versions}を変更する必要もあるかもしれない。
@end defopt


@node Rename or Copy
@subsection リネームかコピーのどちらでバックアップするか?
@cindex backup files, rename or copy

  Emacsのバックアップファイル作成には2つの方法があります:

@itemize @bullet
@item
Emacsは元のファイルをリネームすることができ、それがバックアップファイルになる。その後、バッファーの保存は新たなファイルに書き込まれる。この手順の後には、元ファイルの他のすべての名前(ハードリンク)はバックアップファイルを参照することになる。新たなファイルの所有者は編集を行っているユーザーになり、グループはそのディレクトリー内でそのユーザーが新たなファイルを書き込んだときのデフォルトのグループになる。

@item
Emacsは元のファイルをバックアップファイルにコピーでき、新たな内容はその後は元のファイルに上書きされる。この手順の後は、元のファイルの他のすべての名前(ハードリンク)は、そのファイルの(更新された)カレントバージョンを参照し続ける。ファイルの所有者とグループは変更されない。
@end itemize

  デフォルトの方法は1つ目のリネームです。

  変数@code{backup-by-copying}が非@code{nil}なら、それは2つ目の方法、つまり元のファイルをコピーして新たなバッファー内容で上書きすることを意味します。変数@code{file-precious-flag}が非@code{nil}の場合にも、(メイン機能の副作用として)この効果があります。@ref{Saving
Buffers}を参照してください。

@defopt backup-by-copying
この変数が非@code{nil}なら、Emacsは常にコピーによりバックアップファイルを作成する。デフォルトは@code{nil}。
@end defopt

  以下の3つの変数が非@code{nil}の際は、ある特定のケースに2つ目の方法が使用されます。その特定のケースに該当しないファイルの処理には影響はありません。

@defopt backup-by-copying-when-linked
この変数が非@code{nil}なら、Emacsは複数名(ハードリンク)をもつファイルにたいしてコピーによりバックアップを作成する。デフォルトは@code{nil}。

@code{backup-by-copying}が非@code{nil}なら常にコピーによりバックアップが作成されるので、この変数は@code{backup-by-copying}が@code{nil}のときだけ意味がある。
@end defopt

@defopt backup-by-copying-when-mismatch
この変数が非@code{nil}(デフォルト)なら、リネームによりファイルの所有者やグループが変更されるケースではEmacsはコピーによりバックアップを作成する。

リネームによりファイルの所有者やグループが変更されなければ、値に効果はない。つまり、そのディレクトリーで新たに作成されるファイルにたいするデフォルトのグループに属するユーザーにより所有されるファイルが該当する。

@code{backup-by-copying}が非@code{nil}なら常にコピーによりバックアップが作成されるので、この変数は@code{backup-by-copying}が@code{nil}のときだけ意味がある。
@end defopt

@defopt backup-by-copying-when-privileged-mismatch
この変数が非@code{nil}なら、特定のユーザーIDおよびグループIDの値(具体的には特定の値以下のID数値)にたいしてのみ、@code{backup-by-copying-when-mismatch}と同じように振る舞うことを指定する。変数にはその数値をセットする。

したがってファイル所有者の変更を防ぐ必要がある際には、@code{backup-by-copying-when-privileged-mismatch}を0にセットすればスーパーユーザーとグループ0だけがコピーによるバックアップを行うことができる。

デフォルトは200。
@end defopt

@node Numbered Backups
@subsection 番号つきバックアップファイルの作成と削除
@cindex numbered backups

  ファイルの名前が@file{foo}なら、番号付きバックアップのバージョン名は@file{foo.~@var{v}~}となります。@var{v}は@file{foo.~1~}、@file{foo.~2~}、@file{foo.~3~}、@dots{}、@file{foo.~259~}のように、さまざまな整数です。

@defopt version-control
この変数は単一の非番号付きバックアップファイルを作成するか、それとも複数の番号付きバックアップを作成するかを制御する。

@table @asis
@item @code{nil}
visitされたファイルが番号付きバックアップなら番号付きバックアップを作成して、それ以外は作成しない。これがデフォルト。

@item @code{never}
番号付きバックアップを作成しない。

@item @var{anything else}
番号付きバックアップを作成する。
@end table
@end defopt

  番号付きバックアップを使用することにより、バックアップのバージョン番号は最終的には非常に大きな番号になるので、それらを削除しなければなりません。Emacsはこれを自動で行うことができ、ユーザーに削除するか確認することもできます。

@defopt kept-new-versions
この変数の値は新たな番号付きバックアップが作成された際に保持するべき、もっとも新しいバージョンの個数。新たに作成されたバックアップもカウントされる。デフォルトは2。
@end defopt

@defopt kept-old-versions
この変数の値は新たな番号付きバックアップが作成された際に保持するべき、もっとも古いバージョンの個数。デフォルトは2。
@end defopt

  番号が1、2、3、5、7のバックアップがあり、かつこれらの変数が値2をもつ場合には、番号が1と2のバックアップは古いバージョンとして保持されて、番号が5と7のバックアップは新しいバージョンとして保持される。そして番号が3のバックアップは余分なバックアップとなる。関数@code{find-backup-file-name}
(@ref{Backup
Names}を参照)は、どのバージョンのバックアップを削除するかを決定する役目を負うが、この関数自身がバックアップを削除する訳ではない。

@defopt delete-old-versions
この変数が@code{t}なら、ファイルの保存により余分なバージョンのバックアップは暗黙に削除される。@code{nil}なら余分なバックアップの削除前に確認を求めるて、それ以外なら余分なバックアップは削除されないことを意味する。
@end defopt

@defopt dired-kept-versions
この変数はDired内のコマンド@kbd{.}
(ピリオド。@code{dired-clean-directory})で、もっとも新しいバージョンのバックアップをいくつ保持するかを指定する。これは新たにバックアップファイルを作成する際に@code{kept-new-versions}を指定するのと同等。デフォルトは2。
@end defopt

@node Backup Names
@subsection バックアップファイルの命名
@cindex naming backup files

  このセクションでは、主にバックアップファイルの命名規則を再定義してカスタマイズできる関数を記載します。これらの1つを変更した場合には、おそらく残りも変更する必要があります。

@defun backup-file-name-p filename
この関数は@var{filename}がバックアップファイルとして利用可能なら非@code{nil}値をリターンする。これは名前のチェックだけを行って、@var{filename}という名前のファイルが存在するかどうかはチェックしない。

@smallexample
@group
(backup-file-name-p "foo")
     @result{} nil
@end group
@group
(backup-file-name-p "foo~")
     @result{} 3
@end group
@end smallexample

この関数の標準的な定義は、以下のようになる:

@smallexample
@group
(defun backup-file-name-p (file)
  "FILEがバックアップファイルなら\
(番号付きか否かに関わらず)非nilをリターンする"
  (string-match "~\\'" file))
@end group
@end smallexample

@noindent
このようにファイル名が@samp{~}で終われば、この関数は非@code{nil}値をリターンする(ドキュメント文字列を分割するために1行目でバックスラッシュを使用しているが、これはドキュメント文字列内で単一行を生成する)。

この単純な式はカスタマイズのための再定義を簡便にするために、個々の関数内に配置されている。
@end defun

@defun make-backup-file-name filename
この関数はファイル@var{filename}の非番号付きバックアップファイル名として使用される文字列をリターンする。Unixではこれは単に@var{filename}にチルダを追加する。

ほとんどのオペレーティングシステムでは、この関数の標準的な定義は以下のようになる:

@smallexample
@group
(defun make-backup-file-name (file)
  "FILEにたいして非番号付きバックアップファイル名を作成する"
  (concat file "~"))
@end group
@end smallexample

この関数を再定義することにより、バックアップファイルの命名規則を変更できる。以下はチルダの追加に加えて、先頭に@samp{.}を追加するように@code{make-backup-file-name}を再定義する例:

@smallexample
@group
(defun make-backup-file-name (filename)
  (expand-file-name
    (concat "." (file-name-nondirectory filename) "~")
    (file-name-directory filename)))
@end group

@group
(make-backup-file-name "backups-ja.texi")
     @result{} ".backups-ja.texi~"
@end group
@end smallexample

Diredコマンドのいくつかを含むEmacsの一部では、バックアップファイル名が@samp{~}で終わることを仮定している。この規則にしたがわない場合、深刻な問題とはならないだろうが、それらのコマンドが若干好ましくない結果をもたらすかもしれない。
@end defun

@defun find-backup-file-name filename
この関数は@var{filename}の新たなバックアップファイル用のファイル名を計算する。これは特定の既存バックアップファイルにたいする削除の提案も行うかもしれない。@code{find-backup-file-name}は@sc{car}が新たなバックアップファイル名、@sc{cdr}が削除を提案するバックアップファイルのリストであるようなリストをリターンする。値には@code{nil}も指定でき、これはバックアップが作成されないことを意味する。

@code{kept-old-versions}と@code{kept-new-versions}の2つの変数は、どのバージョンのバックアップを保持するべきかを決定する。この関数は値の@sc{cdr}から該当するバージョンを除外することによってそれらを保持する。@ref{Numbered
Backups}を参照のこと。

以下の例の値は新しいバックアップファイルに使用する名前が@file{~rms/foo.~5~}、@file{~rms/foo.~3~}は呼び出し側が削除を検討するべき余分なバージョンであることを示している。

@smallexample
@group
(find-backup-file-name "~rms/foo")
     @result{} ("~rms/foo.~5~" "~rms/foo.~3~")
@end group
@end smallexample
@end defun

@defun file-backup-file-names filename
この関数は@var{filename}にたいするバックアップファイルすべてのリスト、それらが存在しなければ@code{nil}をリターンする。ファイルは更新日時(modification
time)にたいして降順でソートされるので、もっとも最近に更新されたファイルが最初になる。
@end defun

@defun file-newest-backup filename
この関数は@code{file-backup-file-names}がリターンするリストの最初の要素をリターンする。

ファイル比較関数のいくつかは、自動的にもっとも最近のバックアップを比較できるようにこの関数を使用している。
@end defun

@node Auto-Saving
@section 自動保存
@c @cindex auto-saving   Lots of symbols starting with auto-save here.

  Emacsは、visitしているすべてのファイルを定期的に保存します。これは@dfn{自動保存(auto-saving)}と呼ばれます。自動保存はシステムがクラッシュした場合に失われる作業量を、一定の作業量以下にします。デフォルトでは自動保存は300キーストロークごと、またはidleになった30秒後に発生します。自動保存に関するユーザー向けの情報については@ref{Auto
Save, Auto Save, Auto-Saving: Protection Against Disasters, emacs, The GNU
Emacs Manual}を参照してください。ここでは自動保存の実装に使用される関数と、それらを制御する変数について説明します。

@defvar buffer-auto-save-file-name
このバッファーローカル変数はカレントバッファーの自動保存に使用されるファイル名。そのバッファーが自動保存されるべきでなければ@code{nil}。

@example
@group
buffer-auto-save-file-name
     @result{} "/xcssun/users/rms/lewis/#backups-ja.texi#"
@end group
@end example
@end defvar

@deffn Command auto-save-mode arg
これはバッファーローカルなマイナーモードであるAuto Saveモードにたいするモードコマンド。Auto
Saveモードが有効なときはそのバッファーで自動保存が有効。呼び出し方法は他のマイナーモードと同様(@ref{Minor Mode
Conventions}を参照)。

ほとんどのマイナーモードと異なり@code{auto-save-mode}変数は存在しない。@code{buffer-auto-save-file-name}が非@code{nil}で@code{buffer-saved-size}(以下参照)が非0ならAuto
Saveモードが有効。
@end deffn

@defvar auto-save-file-name-transforms
この変数はバッファーにたいしてauto-saveファイル名を作成する前にバッファーのファイル名に適用する変換(transform)をリストする。

この変換はそれぞれ@w{@code{(@var{regexp} @var{replacement}
[@var{uniquify}])}}という形式のリスト。@var{regexp}はファイル名にたいしてマッチを行う正規表現であり、マッチしたらマッチ部分を@var{replacement}で置き換えるために@code{replace-match}が使用される。オプション要素@var{uniquify}が非@code{nil}なら、クラッシュを回避するために変換ファイルのディレクトリー部分(クラッシュ回避のためにディレクトリー区切り文字はすべて@samp{!}に変更)とバッファーのファイル名を結合してauto-saveファイル名を構築する(ファイルシステムが結果となるファイルを切り詰める場合には正しく機能しないだろう)。

@var{uniquify}が@code{secure-hash-algorithms}のメンバーのいずれかなら、バッファーのファイル名に@code{secure-hash}を適用することによって、Emacsはauto-saveファイルのディレクトリー部分以外を構築する。これは極端に長いファイル名というリスクを回避する。

リストにあるすべての変換をリスト順に試行する。いずれかの変換が適用されたらそれが最終結果となり、それ以上の変換は試みられない。

デフォルト値ではリモートファイルのauto-saveファイルは一時ディレクトリーに置くようセットアップされている(@ref{Unique File
Names}を参照)。

長いファイル名がないMS-DOSファイルシステムでは、この変数は常に無視される。
@end defvar

@defun auto-save-file-name-p filename
この関数は@var{filename}がauto-saveファイルのような文字列なら非@code{nil}をリターンする。先頭と末尾がハッシュマーク(@samp{#})であるような名前はauto-saveファイルの可能性があるという、auto-saveファイルにたいする通常の命名規則を想定する。引数@var{filename}はディレクトリーパートを含まないこと。

@example
@group
(make-auto-save-file-name)
     @result{} "/xcssun/users/rms/lewis/#backups-ja.texi#"
@end group
@group
(auto-save-file-name-p "#backups-ja.texi#")
     @result{} 0
@end group
@group
(auto-save-file-name-p "backups-ja.texi")
     @result{} nil
@end group
@end example
@end defun

@defun make-auto-save-file-name
この関数はカレントバッファーの自動保存に使用されるファイル名をリターンする。これはファイル名の先頭と末尾にハッシュマーク(@samp{#})を単に追加する。この関数は変数@code{auto-save-visited-file-name}(以下参照)を調べない。呼び出し側はまずその変数をチェックすること。

@example
@group
(make-auto-save-file-name)
     @result{} "/xcssun/users/rms/lewis/#backups-ja.texi#"
@end group
@end example
@end defun

@defopt auto-save-visited-file-name
この変数が非@code{nil}ならEmacsはvisit中のファイルにバッファーを自動保存する。つまり自動保存は編集中ファイルと同じファイルにたいして行われる。この変数は通常は@code{nil}なので、auto-saveファイルは@code{make-auto-save-file-name}で作成された別の名前をもつ。

この変数の値を変更した際、バッファー内でauto-saveモードを再度有効にするまで、既存バッファーにたいして新たな値は効果をもたない。すでにauto-saveモードが有効なら、再度@code{auto-save-mode}が呼び出されるまで同じファイルに自動保存が行われる。

この変数を非@code{nil}にセットしても自動保存とバッファーの保存は異なるという事実は変わらないことに注意(@ref{Saving
Buffers}で説明したフックはバッファーが自動保存された際には@emph{実行されない})。
@end defopt

@defun recent-auto-save-p
この関数はカレントバッファーが最後に読み込み、または保存されて以降に自動保存されていれば@code{t}をリターンする。
@end defun

@defun set-buffer-auto-saved
この関数はカレントバッファーを自動保存済みとマークする。そのバッファーは、バッファーテキストが再度変更されるまで自動保存されないだろう。この関数は@code{nil}をリターンする。
@end defun

@defopt auto-save-interval
この変数の値は自動保存の頻度を入力イベント数で指定する。この分の入力イベント読み取りごとに、Emacsは自動保存が有効なすべてのバッファーにたいして自動保存を行う。これを0にするとタイプした文字数にもとづいた自動保存は無効になる。
@end defopt

@defopt auto-save-timeout
この変数の値は自動保存が発生すべきidle時間の秒数。この秒数分ユーザーが休止するたびに、Emacsは自動保存が有効なすべてのバッファーにたいして自動保存を行う(カレントバッファーが非常に大きければ、指定されたタイムアウトはサイズ増加とともに増加される因子で乗ぜられる。この因子は1MBのバッファーにたいしておよそ4)。

値が0か@code{nil}ならidle時間にもとづいた自動保存は行われず、@code{auto-save-interval}で指定される入力イベント数の後のみ自動保存が行われる。
@end defopt

@defvar auto-save-hook
このノーマルフックは自動保存が行われようとするたびに毎回実行される。
@end defvar

@defopt auto-save-default
この変数が非@code{nil}ならファイルをvisitするバッファーの自動保存がデフォルトで有効になり、それ以外では有効にならない。
@end defopt

@deffn Command do-auto-save &optional no-message current-only
この関数は自動保存される必要があるすべてのバッファーを自動保存する。これは自動保存が有効なバッファーであり、かつ前回の自動保存以降に変更されたすべてのバッファーを保存する。

いずれかのバッファーが自動保存される場合には、@code{do-auto-save}は自動保存が行われる間、通常はそれを示すメッセージ@samp{Auto-saving...}をエコーエリアに表示する。しかし@var{no-message}が非@code{nil}ならこのメッセージは抑制される。

@var{current-only}が非@code{nil}なら、カレントバッファーだけが自動保存される。
@end deffn

@defun delete-auto-save-file-if-necessary &optional force
この関数は@code{delete-auto-save-files}が非@code{nil}ならカレントバッファーのauto-saveファイルを削除する。これはバッファー保存時に毎回呼び出される。

この関数は@var{force}が@code{nil}なら最後に本当の保存が行われて以降、カレントEmacsセッションにより書き込まれたファイルだけを削除する。
@end defun

@defopt delete-auto-save-files
この変数は関数@code{delete-auto-save-file-if-necessary}により使用される。これが非@code{nil}なら、Emacsは(visitされているファイルに)本当に保存が行われたときにauto-saveファイルを削除する。これはディスク容量を節約してディレクトリーを整理する。
@end defopt

@defun rename-auto-save-file
この関数はvisitされているファイルの名前が変更されていればカレントバッファーのauto-saveファイルの名前を調整する。これはカレントEmacsセッションでauto-saveファイルが作成されていれば、既存のauto-saveファイルのリネームも行う。visitされているファイルの名前が変更されていなければ、この関数は何も行わない。
@end defun

@defvar buffer-saved-size
このバッファーローカル変数の値はカレントバッファーが最後に読み取り、保存、または自動保存されたときのバッファーの長さ。これはサイズの大幅な減少の検知に使用され、それに応じて自動保存がオフに切り替えられる。

@minus{}1なら、それはサイズの大幅な減少によりそのバッファーの自動保存が一時的に停止されていることを意味する。明示的な保存によりこの変数に正の値が格納されて、自動保存が再び有効になる。自動保存をオフやオンに切り替えることによってもこの変数は更新されるので、サイズの大幅な減少は忘れられさられる。

@minus{}2なら、特にバッファーサイズの変更により一時的に自動保存を停止されないように、そのバッファーがバッファーサイズの変更を無視することを意味する。。
@end defvar

@defvar auto-save-list-file-name
この変数は、(非@code{nil}なら)すべてのauto-saveファイルの名前を記録するファイルを指定する。Emacsが自動保存を行うたびには自動保存が有効な各バッファーごとに2行ずつ書き込みを行う。1行目はvisitされているファイルの名前(ファイルをvisitしないバッファーの場合は空)、2行目はauto-saveファイルの名前を示す。

Emacsを正常にexitした際にこのファイルは削除される。Emacsがクラッシュした場合にはこのファイルを調べることにより、失われるはずだった作業を含んだすべてのauto-saveファイルを探すことができる。@code{recover-session}コマンドはそれらを見つけるためにこのファイルを使用する。

このファイルにたいするデフォルト名は、ユーザーのホームディレクトリーにある@samp{.saves-}で始まるファイルを指定する。この名前にはEmacsのプロセス@acronym{ID}とホスト名も含まれる。
@end defvar

@defopt auto-save-list-file-prefix
initファイルを読み込んだ後、(@code{nil}にセット済みでなければ)Emacsはこのプレフィックスにもとづいたホスト名とプロセスIDを追加して、@code{auto-save-list-file-name}を初期化する。initファイル内でこれを@code{nil}にセットした場合には、Emacsは@code{auto-save-list-file-name}を初期化しない。
@end defopt

@node Reverting
@section リバート
@cindex reverting buffers

  あるファイルにたいして大きな変更を行った後、気が変わって元に戻したくなった場合は、@code{revert-buffer}コマンドでそのファイルの以前のバージョンを読み込むことにより、それらの変更を取り消すことができます。詳細は、@ref{Reverting,
, Reverting a Buffer, emacs, The GNU Emacs Manual}を参照してください。

@deffn Command revert-buffer &optional ignore-auto noconfirm preserve-modes
このコマンドはバッファーのテキストをディスク上のvisitされているファイルのテキストで置き換える。これによりファイルがvisitや保存された以降に行ったすべての変更はアンドゥ(undo:
取り消し)される。

デフォルトでは、最新のauto-saveファイルのほうがvisitされているファイルより新しく引数@var{ignore-auto}が@code{nil}なら、@code{revert-buffer}はユーザーにたいしてかわりにauto-saveファイルを使用するかどうか確認を求める。このコマンドをinteractiveに呼び出したときプレフィックス数引数が指定されていなければ、@var{ignore-auto}は@code{t}となる。つまりinteractive呼び出しは、デフォルトではauto-saveファイルのチェックを行わない。

@code{revert-buffer}は通常はバッファーを変更する前に確認を求める。しかし引数@var{noconfirm}が非@code{nil}なら@code{revert-buffer}は確認を求めない。

このコマンドは通常は@code{normal-mode}を使用することにより、そのバッファーのメジャーモードとマイナーモードを再初期化する。しかし@var{preserve-modes}が非@code{nil}ならモードは変更されずに残る。

リバート(revert:
戻す、復元する)は@code{insert-file-contents}の置き換え機能を使用することにより、バッファー内のマーカー位置の保持を試みる。バッファーのコンテンツとファイルのコンテンツがリバート操作を行う前と等しければリバートはすべてのマーカーを保持する。等しくなければリバートによってバッファーは変更される。この場合は、(もしあれば)バッファーの最初と最後にある未変更のテキスト内にあるマーカーは保持される。他のマーカーを保持してもそれらは正しくないだろう。

ファイル以外のソースからリバートする際には、通常はマーカーは保持されないが、これは@code{revert-buffer-function}の個別の実装次第である。
@end deffn

@defvar revert-buffer-in-progress-p
@code{revert-buffer}は処理を行っている間、この変数を非@code{nil}値にバインドする。
@end defvar

このセクションの残りの部分で説明する変数をセットすることにより、@code{revert-buffer}が処理方法をカスタマイズできます。

@defopt revert-without-query
この変数は問い合わせなしでリバートされるファイルのリストを保持する。値は正規表現のリスト。visitされているファイルの名前がこれらの正規表現のいずれかにマッチし、かつバッファーが未変更だがディスク上のファイルは変更されていれば、@code{revert-buffer}はユーザーに確認を求めることなくファイルをリバートする。
@end defopt

  いくつかのメジャーモードは以下の変数をローカルにバインドすることにより@code{revert-buffer}をカスタマイズします:

@defvar revert-buffer-function
@anchor{Definition of revert-buffer-function}
この変数の値はそのバッファーをリバートするために使用する関数。これはリバート処理を行うために2つのオプション引数をとる関数であること。2つのオプション引数@var{ignore-auto}と@var{noconfirm}は@code{revert-buffer}が受け取る引数である。

Diredモードのような編集されるテキストにファイルのコンテンツが含まれず他の方式によって再生成され得るモードは、この変数のバッファーローカル値にコンテンツを再生成する特別な関数を与えることができる。
@end defvar

@defvar revert-buffer-insert-file-contents-function
この変数の値はそのバッファーをリバートする際に更新されたコンテンツの挿入に使用される関数を指定する。その関数は2つの引数を受け取る。1つ目は使用するファイル名で2つ目が@code{t}なら、ユーザーはauto-saveファイルの読み込みにたいして確認を求められる。

@code{revert-buffer-function}のかわりにこの変数をモードが変更する理由は、@code{revert-buffer}が行残りの処理(ユーザーへの確認、アンドゥリストのクリアー、適切なメジャーモードの決定、以下のフックの実行)にたいする重複や置き換えを避けるためである。
@end defvar

@defvar before-revert-hook
このノーマルフックは変更されたコンテンツを挿入する前に、デフォルトの@code{revert-buffer-function}により実行される。カスタマイズした@code{revert-buffer-function}は、このフックを実行するかどうか判らない。
@end defvar

@defvar after-revert-hook
このノーマルフックは変更されたコンテンツを挿入した後に、デフォルトの@code{revert-buffer-function}によって実行される。カスタマイズした@code{revert-buffer-function}は、このフックを実行するかどうか判らない。
@end defvar

@defvar revert-buffer-restore-functions
この変数の値にはバッファー状態を保存する関数のリストを指定する。revert操作の前には、このリストの関数が引数なしで呼び出される。これらの関数はそれぞれ何らかの特定状態(たとえばread-only状態など)を保持するラムダをリターンすること。revert操作の後にはリスト順にラムダが順番に呼び出される。これらのラムダはそれぞれrevertされるバッファーにたいして保存された状態をリストアすること。
@end defvar

Emacsはバッファーを自動的にリバートできます。これはファイルをvisitしているバッファーにはデフォルトで行われます。以下では新たなタイプのバッファーにたいして自動リバートのサポートを追加する方法を説明します。

そのようなバッファーはまず適切に定義された@code{revert-buffer-function}と@code{buffer-stale-function}をもたなければなりません。

@defvar buffer-stale-function
この変数の値はバッファーがリバートを要するかどうかをチェックするために呼び出される関数を指定する。デフォルト値では、修正時刻をチェックすることによりファイルをvisitするバッファーだけを処理する。ファイルをvisitしないバッファーにはオプション引数を1つ受け取るカスタム関数が必要になる。この関数はバッファーをリバートする必要があれば非@code{nil}をリターンする。関数の呼び出し時にはそのバッファーがカレントになる。

この関数は主として自動リバートを意図しているが、他の用途にも使用できる。たとえば自動リバートが有効でなければ、ユーザーにバッファーのリバートが必要なバッファーを警告するために使用できる。@var{noconfirm}引数の背景にあるアイデアは、ユーザーへの確認なしでバッファーがリバートされるようなら@code{t}、関数がバッファーの期限切れをユーザーに警告する。特に自動リバートにおける使用では@var{noconfirm}は@code{t}になる。関数が自動リバートにたいしてのみ使用されるようなら@var{noconfirm}引数は無視できる。

(Buffer Menuのように) @code{auto-revert-interval}秒ごとに自動リバートをしたければバッファーのモード関数で:

@example
(setq-local buffer-stale-function
     (lambda (&optional noconfirm) 'fast))
@end example

@noindent
を使用する。

特別なリターン値@samp{fast}はリバートの必要性はチェックしていないがバッファーのリバートは高速であることを告げる。さらに@code{auto-revert-verbose}が非@code{nil}でもリバートメッセージを何もプリントしないようにAuto
Revertに指示する。@code{auto-revert-interval}秒ごとのリバートメッセージが非常に煩雑になり得ることから、これは重要である。自動リバート以外の目的でこの関数が考慮される場合には、リターン値が提供する情報は有用になるかもしれない。
@end defvar

バッファーが適切な@code{revert-buffer-function}と@code{buffer-stale-function}をもった後にも、通常はいくつかの問題が残ります。

未変更とマークされた場合のみバッファーは自動リバートされます。したがって種々の関数はリバートにより失われるかもしれない情報をバッファーが含む場合や、ユーザーがバッファーにたいして作業を行っていて自動リバートがユーザーにとって不便だと確信できる理由がある場合にのみバッファーを変更済みとマークすることを保証する必要があるでしょう。バッファーの変更状態を手動で調整することによりユーザーは常にこれをオーバーライドできます。これをサポートするために、未変更とマークされたバッファーでの@code{revert-buffer-function}呼び出しでは、常にバッファーの未変更とマークされた状態を保つ必要があります。

自動リバートの結果としてその前後で連続してポイントがジャンプしないことを保証することが重要です。もちろんバッファーが根本的に変更されればポイントの移動は必然的かもしれません。

@code{revert-buffer-function}が@code{auto-revert-verbose}が@code{t}の場合に表示されるAuto
Revert自身のメッセージを不必要に重複してプリントしないことと、@code{auto-revert-verbose}にたいする@code{nil}値を効果的にオーバーライドすることを保証する必要があります。したがって自動リバートにたいするモードの調整には、このようなメッセージを取り除くことを要する場合が多々あります。とりわけこれは@code{auto-revert-interval}秒ごとに自動的にリバートされるバッファーにおいて重要です。

新しい自動リバートがEmacsの一部であるなら、@code{global-auto-revert-non-file-buffers}のドキュメント文字列でそれに言及するべきです。

同様にEmacsマニュアル内に追加でドキュメントするべきです。
