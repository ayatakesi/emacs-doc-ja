@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================

@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990--1995, 1998--1999, 2001--2024 Free Software
@c Foundation, Inc.
@c See the file elisp-ja.texi for copying conditions.
@node Buffers
@chapter バッファー
@cindex buffer

  @dfn{バッファー(buffer)}とは編集されるテキストを含んだLispオブジェクトのことです。バッファーはvisitされるファイルのコンテンツを保持するために使用されます。しかしファイルをvisitしないバッファーも存在します。一度に複数のバッファーが存在するかもしれませんが、@dfn{カレントバッファー(current
buffer)}に指定できるのは常に1つのバッファーだけです。ほとんどの編集コマンドはカレントバッファーのコンテンツにたいして作用します。カレントバッファーを含むすべてのバッファーは任意のウィンドウ内に表示されるときもあれば、表示されない場合もあります。

@menu
* Buffer Basics::            バッファーとは?
* Current Buffer::           バッファーをカレントに指定することにより、プリミティブはバッファーのコンテンツにアクセスする。
* Buffer Names::             バッファー名にたいするアクセスと変更。
* Buffer File Name::         バッファーファイル名は、どのファイルをvisitしているかを示す。
* Buffer Modification::      保存が必要ならバッファーは@dfn{変更されている(modified)}。
* Modification Time::        Emacsの背後でvisitされているファイルが変更されたかどうかを判断する。
* Read Only Buffers::        読み取り専用バッファーでのテキスト変更は許されない。
* Buffer List::              すべての既存バッファーを閲覧する方法。
* Creating Buffers::         バッファーを作成する関数。
* Killing Buffers::          明示的にkillされるまで、バッファーは存在する。
* Indirect Buffers::         インダイレクトバッファーは他のバッファーとテキストを共有する。
* Swapping Text::            2つのバッファー間でのテキストの交換。
* Buffer Gap::               バッファー内のギャップ。
@end menu

@node Buffer Basics
@section バッファーの基礎

@ifnottex
  @dfn{バッファー(buffer)}とは編集されるテキストを含むLispオブジェクトのことです。バッファーはvisitされるファイルのコンテンツを保持するために使用されます。しかしファイルをvisitしないバッファーも存在します。一度に複数のバッファーが存在するかもしれませんが、@dfn{カレントバッファー(current
buffer)}に指定できるのは常に1つのバッファーだけです。ほとんどの編集コマンドはカレントバッファーのコンテンツにたいして作用します。カレントバッファーを含むすべてのバッファーは、いずれかのウィンドウ内に表示されるときもあるし、表示されない場合もあります。
@end ifnottex

  Emacs編集におけるバッファーとは個別に名前をもち、編集可能なテキストを保持するオブジェクトです。Lispプログラムにおけるバッファーはスペシャルデータ型として表されます。バッファーのコンテンツを拡張可能な文字列と考えることができます。挿入と削除はバッファー内の任意の箇所で発生し得ます。@ref{Text}を参照してください。

  Lispのバッファーオブジェクトは多くの情報要素を含んでいます。これらの情報のいくつかは変数を通じてプログラマーが直接アクセスできるのにたいして、その他の情報は特殊な目的のための関数を通じてのみアクセスすることができます。たとえばvisitされているファイルの名前は変数を通じて直接アクセスできますが、ポイント値はプリミティブ関数からのみアクセスできます。

  直接アクセス可能なバッファー固有の情報は、@dfn{バッファーローカル(buffer-local)}な変数バインディング内に格納されます。これは特定のバッファー内だけで効力のある変数値のことです。この機能により、それぞれのバッファーは特定の変数の値をオーバーライドすることができます。ほとんどのメジャーモードはこの方法で@code{fill-column}や@code{comment-column}のような変数をオーバーライドしています。バッファーローカルな変数、およびそれらに関連する関数についての詳細は@ref{Buffer-Local
Variables}を参照してください。

  バッファーからファイルをvisitする関数および変数については@ref{Visiting Files}と@ref{Saving
Buffers}を参照してください。ウィンドウ内へのバッファー表示に関連する関数および変数については@ref{Buffers and
Windows}を参照してください。

@defun bufferp object
この関数は@var{object}がバッファーなら@code{t}、それ以外は@code{nil}をリターンする。
@end defun

@node Current Buffer
@section カレントバッファー
@cindex selecting a buffer
@cindex changing to another buffer
@cindex current buffer

  一般的に1つのEmacsセッション内には多くのバッファーが存在します。常にそれらのうちの1つが@dfn{カレントバッファー(current
buffer)}に指定されます。カレントバッファーとは、ほとんどの編集が行われるバッファーのことです。テキストを調べたり変更するプリミティブのほとんどは暗黙にカレントバッファーにたいして処理を行います(@ref{Text}を参照)。

  通常は選択されたウィンドウ(@ref{Selecting
Windows}を参照)の中に表示されるバッファーがカレントバッファーですが、常にそうであるとは言えません。Lispプログラムはバッファーのコンテンツを処理するために、スクリーン上に表示されているものを変更することなく任意のバッファーを一時的にカレントに指定できます。カレントバッファーの指定にたいするもっとも基本的な関数は@code{set-buffer}です。

@defun current-buffer
この関数はカレントバッファーをリターンする。

@example
@group
(current-buffer)
     @result{} #<buffer buffers-ja.texi>
@end group
@end example
@end defun

@defun set-buffer buffer-or-name
この関数は@var{buffer-or-name}をカレントバッファーにする。@var{buffer-or-name}は既存のバッファー、または既存のバッファーの名前でなければならない。リターン値はカレントになったバッファー。

この関数はそのバッファーをどのウィンドウにも表示しないので、必然的にユーザーはそのバッファーを見ることはできない。しかしLispプログラムはその後に、そのバッファーにたいして処理を行うことになるだろう。
@end defun

  編集コマンドがエディターコマンドループにリターンする際、Emacsは選択されたウィンドウ(@ref{Selecting
Windows}を参照)の中に表示されているバッファーにたいして、自動的に@code{set-buffer}を呼び出します。これは混乱を防ぐためであり、これによりEmacsがコマンドを読み取るときにカーソルのあるバッファーが、コマンドを適用されるバッファーになることが保証されます(@ref{Command
Loop}を参照)。したがって異なるバッファーを指示して切り替える場合には@code{set-buffer}を使用するべきではありません。これを行うためには@ref{Switching
Buffers}で説明されている関数を使用してください。

  Lisp関数を記述する際は、処理後にカレントバッファーをリストアするためにコマンドループのこの振る舞いに@emph{依存しないでください}。編集コマンドはコマンドループだけではなく、他のプログラムからLisp関数としても呼び出されます。呼び出し側にとっては、そのサブルーチンがカレントだったバッファーを変更しないほうが便利です(もちろんそれがサブルーチンの目的でない場合)。

  他のバッファーにたいして一時的に処理を行うには、@code{save-current-buffer}フォーム内に@code{set-buffer}を配置します。以下の例はコマンド@code{append-to-buffer}の簡略版です:

@example
@group
(defun append-to-buffer (buffer start end)
  "リージョンのテキストをBUFFERに追加する"
  (interactive "BAppend to buffer: \nr")
  (let ((oldbuf (current-buffer)))
    (save-current-buffer
      (set-buffer (get-buffer-create buffer))
      (insert-buffer-substring oldbuf start end))))
@end group
@end example

@noindent
ここではカレントバッファーを記録するためにローカル変数にバインドしてから、後で@code{save-current-buffer}がそれを再びカレントにするようにアレンジしています。次に@code{set-buffer}が指定されたバッファーをカレントにして、@code{insert-buffer-substring}が元のバッファーの文字列を指定された(今はカレントの)バッファーにコピーします。

  かわりに@code{with-current-buffer}マクロを使用することもできます:

@example
@group
(defun append-to-buffer (buffer start end)
  "BUFFERにリージョンのテキストを追加する"
  (interactive "BAppend to buffer: \nr")
  (let ((oldbuf (current-buffer)))
    (with-current-buffer (get-buffer-create buffer)
      (insert-buffer-substring oldbuf start end))))
@end group
@end example

  いずれのケースでも、追加されるバッファーが偶然他のウィンドウに表示されていると、次回の再表示でそのテキストがどのように変更されたか表示されるでしょう。どのウィンドウにも表示されていなければスクリーン上で即座に変更を目にすることはありません。コマンドはバッファーを一時的にカレントにしますが、そのことがバッファーの表示を誘発する訳ではありません。

  バッファーローカルなバインディングをもつ変数にたいして、(@code{let}や関数引数などで)ローカルバインディングを作成する場合には、そのローカルバインディングのスコープの最初と最後で同じバッファーがカレントとなることを確認してください。そうしないと、あるバッファーではバインドして他のバッファーではバインドされないことになるかもしれません!

  @code{set-buffer}の使用において、カレントバッファーが戻ることに依存しないでください。なぜなら間違ったバッファーがカレントのときにquitが発生した場合には、その処理は行われないでしょう。たとえば上記の例に倣うと以下は間違ったやり方です:

@example
@group
  (let ((oldbuf (current-buffer)))
    (set-buffer (get-buffer-create buffer))
    (insert-buffer-substring oldbuf start end)
    (set-buffer oldbuf))
@end group
@end example

@noindent
例で示したように@code{save-current-buffer}や@code{with-current-buffer}を使用すれば、quitや@code{throw}を通常の評価と同様に処理できます。

@defspec save-current-buffer body@dots{}
スペシャルフォーム@code{save-current-buffer}はカレントバッファーの識別を保存して@var{body}フォームを評価し、最後にそのバッファーをカレントにリストアする。リターン値は@var{body}内の最後のフォームの値。@code{throw}やエラーを通じた異常exitの場合にもカレントバッファーはリストアされる(@ref{Nonlocal
Exits}を参照)。

カレントとして使用されていたバッファーが@code{save-current-buffer}によるexit時にkillされていたら、当然それが再びカレントとなることはない。かわりにexit直前にカレントバッファーが何であれ、それがカレントになる。
@end defspec

@defmac with-current-buffer buffer-or-name body@dots{}
@code{with-current-buffer}マクロはカレントバッファーの識別を保存して@var{buffer-or-name}をカレントにし、@var{body}フォームを評価してから最後にカレントバッファーをリストアする。@var{buffer-or-name}には既存のバッファー、または既存のバッファー名を指定しなければならない。

リターン値は@var{body}内の最後のフォームの値。@code{throw}やエラーを通じた異常exitの場合にも、カレントバッファーはリストアされる(@ref{Nonlocal
Exits}を参照)。
@end defmac

@defmac with-temp-buffer body@dots{}
@anchor{Definition of with-temp-buffer}
@code{with-temp-buffer}マクロは一時的なバッファーをカレントバッファーとして@var{body}フォームを評価する。これはカレントバッファーの識別を保存して一時的なバッファーを作成、それをカレントとして@var{body}フォームを評価して、一時バッファーをkillする間に以前のカレントバッファーをリストアする。

@cindex undo in temporary buffers
@cindex @code{kill-buffer-hook} in temporary buffers
@cindex @code{kill-buffer-query-functions} in temporary buffers
@cindex @code{buffer-list-update-hook} in temporary buffers
このマクロが作成したバッファーでは、デフォルトではアンドゥ情報(@ref{Undo}を参照)は記録されない(が必要なら@var{body}で有効にできる)。また一時バッファーは@code{kill-buffer-hook}、@code{kill-buffer-query-functions}
(@ref{Killing Buffers}を参照)、@code{buffer-list-update-hook} (@ref{Buffer
List}を参照)のフックも実行しない。

リターン値は@var{body}内の最後のフォームの値。最後のフォームとして@code{(buffer-string)}を使用することにより、一時バッファーのコンテンツをリターンできる。

@code{throw}やエラーを通じた異常exitの場合にも、カレントバッファーはリストアされる(@ref{Nonlocal Exits}を参照)。

@ref{Definition of with-temp-file,, Writing to
Files}の@code{with-temp-file}も参照のこと。
@end defmac

@node Buffer Names
@section バッファーの名前
@cindex buffer names

  それぞれのバッファーは文字列で表される一意な名前をもちます。バッファーにたいして機能する関数の多くは、引数としてバッファーとバッファー名の両方を受け入れます。@var{buffer-or-name}という名前の引数がこのタイプであり、それが文字列でもバッファーでもなければエラーがシグナルされます。@var{buffer}という名前の引数は名前ではなく実際のバッファーオブジェクトでなければなりません。

@cindex hidden buffers
@cindex buffers without undo information
  短命でユーザーが関心をもたないようなバッファーは名前がスペースで始まり、それらについては@code{list-buffers}と@code{buffer-menu}コマンドは無視します(がファイルをvisitしているようなバッファーは@strong{無視されない})。スペースで始まる名前は初期状態ではアンドゥ情報の記録も無効になっています。@ref{Undo}を参照してください。

@defun buffer-name &optional buffer
この関数は@var{buffer}の名前を文字列としてリターンする。@var{buffer}のデフォルトはカレントバッファー。

@code{buffer-name}が@code{nil}をリターンした場合、それは@var{buffer}がkillされていることを意味する。@ref{Killing
Buffers}を参照のこと。

@example
@group
(buffer-name)
     @result{} "buffers-ja.texi"
@end group

@group
(setq foo (get-buffer "temp"))
     @result{} #<buffer temp>
@end group
@group
(kill-buffer foo)
     @result{} nil
@end group
@group
(buffer-name foo)
     @result{} nil
@end group
@group
foo
     @result{} #<killed buffer>
@end group
@end example
@end defun

@deffn Command rename-buffer newname &optional unique
この関数はカレントバッファーを@var{newname}にリネームする。@var{newname}が文字列でなければエラーをシグナルする。

@var{newname}がすでに使用済みなら、@code{rename-buffer}は通常はエラーをシグナルする。しかし@var{unique}が非@code{nil}なら、未使用の名前となるように@var{newname}を変更する。interactiveに呼び出した場合は、プレフィックス数引数により@var{unique}に非@code{nil}を指定できる(この方法によってコマンド@code{rename-uniquely}は実装される)。

この関数は実際にバッファーに与えられた名前をリターンする。
@end deffn

@defun get-buffer buffer-or-name
この関数は@var{buffer-or-name}で指定されたバッファーをリターンする。@var{buffer-or-name}が文字列で、かつそのような名前のバッファーが存在しなければ値は@code{nil}。@var{buffer-or-name}がバッファーなら与えられたバッファーをリターンする。これは有用とは言い難く、引数は通常は名前である。たとえば:

@example
@group
(setq b (get-buffer "lewis"))
     @result{} #<buffer lewis>
@end group
@group
(get-buffer b)
     @result{} #<buffer lewis>
@end group
@group
(get-buffer "Frazzle-nots")
     @result{} nil
@end group
@end example

@ref{Creating Buffers}の関数@code{get-buffer-create}も参照のこと。
@end defun

@defun generate-new-buffer-name starting-name &optional ignore
この関数は新たなバッファーにたいして一意となるような名前をリターンする ---
がバッファーは作成しない。この名前は@var{starting-name}で始まり内部が数字であるような@samp{<@dots{}>}を追加することにより、すべてのバッファーでカレントで使用されていない名前を生成する。この数字は2で始まり、既存バッファーの名前でないような名前になる数字まで増加される。

オプション引数@var{ignore}が非@code{nil}なら、それは潜在的にバッファー名であるような文字列であること。これは、たとえそれが(通常は拒絶されるであろう)既存バッファーの名前であっても、試みられた場合には潜在的に受容可能なバッファーとして考慮することを意味する。つまり@samp{foo}、@samp{foo<2>}、@samp{foo<3>}、@samp{foo<4>}という名前のバッファーが存在する場合には、

@example
(generate-new-buffer-name "foo")
     @result{} "foo<5>"
(generate-new-buffer-name "foo" "foo<3>")
     @result{} "foo<3>"
(generate-new-buffer-name "foo" "foo<6>")
     @result{} "foo<5>"
@end example

@ref{Creating Buffers}の関連する関数@code{generate-new-buffer}も参照のこと。
@end defun

@defun buffer-last-name &optional buffer
この関数は前の@var{buffer}
(killされた、あるいは最後以降に改名されたバッファー)の名前をリターンする。nilか省略の場合の@var{buffer}のデフォルトはカレントバッファー。
@end defun

@node Buffer File Name
@section バッファーのファイル名
@cindex visited file
@cindex buffer file name
@cindex file name of buffer

  @dfn{バッファーファイル名(buffer file
name)}とは、そのバッファーにvisitされているファイルの名前です。バッファーがファイルをvisitしていなければ、バッファーファイル名は@code{nil}です。バッファー名は大抵はバッファーファイル名の非ディレクトリーパートと同じですが、バッファーファイル名とバッファー名は別物であり個別にセットすることができます。@ref{Visiting
Files}を参照してください。

@defun buffer-file-name &optional buffer
この関数は@var{buffer}がvisitしているファイルの絶対ファイル名をリターンする。@var{buffer}がファイルをvisitしていなければ、@code{buffer-file-name}は@code{nil}をリターンする。@var{buffer}が与えられない場合のデフォルトはカレントバッファー。

@example
@group
(buffer-file-name (other-buffer))
     @result{} "/usr/user/lewis/manual/files-ja.texi"
@end group
@end example
@end defun

@defvar buffer-file-name
このバッファーローカル変数はカレントバッファーにvisitされているファイルの名前、ファイルをvisitしていなければ@code{nil}。これは永続的なローカル変数であり@code{kill-all-local-variables}の影響を受けない。

@example
@group
buffer-file-name
     @result{} "/usr/user/lewis/manual/buffers-ja.texi"
@end group
@end example

他のさまざまな事項を変更せずにこの変数を変更するのは危険である。通常は@code{set-visited-file-name}を使用するほうがよい(以下参照)。バッファー名の変更などのような、そこで行われることのいくつかは絶対必要という訳ではないが、その他の事項はEmacsが混乱するのを防ぐために必要不可欠である。
@end defvar

@defvar buffer-file-truename
このバッファーローカル変数はカレントバッファーにvisitされているファイルの省略された形式の実名(truename)、ファイルをvisitしていなければ@code{nil}を保持する。これは永続的にローカルであり@code{kill-all-local-variables}の影響を受けない。@xref{Truenames}と@ref{abbreviate-file-name}を参照のこと。
@end defvar

@defvar buffer-file-number
このバッファーローカル変数はカレントバッファーにvisitされているファイルのinode番号とディレクトリーデバイス識別子、ファイルをvisitしていなければ@code{nil}を保持する。これは永続的にローカルであり@code{kill-all-local-variables}の影響を受けない。

値は通常は@code{(@var{inodenum} @var{device})}のような形式のリスト。このタプル(tuple:
組)はシステム上でアクセス可能なすべてのファイルの中からファイルを一意に識別する。より詳細な情報は@ref{File
Attributes}の@code{file-attributes}を参照のこと。

@code{buffer-file-name}がシンボリックリンク名なら、@var{inodenum}と@var{device}の両方がリンクのターゲットを再帰的に参照する。
@end defvar

@defun get-file-buffer filename
この関数はファイル@var{filename}をvisitしているバッファーをリターンする。そのようなバッファーが存在しなければ@code{nil}をリターンする。引数@var{filename}は文字列でなければならず、展開(@ref{File
Name
Expansion}を参照)された後に、killされていないすべてのバッファーがvisitしているファイル名と比較される。バッファーの@code{buffer-file-name}は@var{filename}の展開形と正確にマッチしなければならないことに注意。この関数は同じファイルにたいする他の名前は認識しないだろう。

@example
@group
(get-file-buffer "buffers-ja.texi")
    @result{} #<buffer buffers-ja.texi>
@end group
@end example

特殊な状況下では、複数のバッファーが同じファイル名をvisitすることがあり得る。そのような場合には、この関数はバッファーリスト内の最初に該当するバッファーをリターンする。
@end defun

@defun find-buffer-visiting filename &optional predicate
これは@code{get-file-buffer}と似ているが、そのファイルを@emph{違う名前}でvisitしているかもしれないすべてのバッファーをリターンする。つまりバッファーの@code{buffer-file-name}は@var{filename}の展開形式と正確にマッチする必要はなく、同じファイルを参照することだけが要求される。@var{predicate}が非@code{nil}なら、それは@var{filename}をvisitしているバッファーを1つの引数とする関数であること。そのバッファーにたいして@var{predicate}が非@code{nil}をリターンした場合のみ適切なリターン値と判断される。リターンすべき適切なバッファーが見つからなければ、@code{find-buffer-visiting}は@code{nil}をリターンする。
@end defun

@deffn Command set-visited-file-name filename &optional no-query along-with-file
@var{filename}が非空文字列なら、この関数はカレントバッファーにvisitされているファイルの名前を@var{filename}に変更する(バッファーがファイルをvisitしていなければvisitするファイルとして@var{filename}を与える)。そのバッファーにたいする@emph{次回}の保存では、新たに指定されたファイルに保存されるだろう。

このコマンドは、たとえそのバッファーのコンテンツがその前にvisitされていたファイルとマッチしていても、(Emacsが関知するかぎり)
@var{filename}のコンテンツとはマッチしないのでバッファーが変更されている(modified)とマークする。これはその名前がすでに使用されていなければ、新たなファイル名に対応してバッファーをリネームする。

@var{filename}が@code{nil}か空文字列なら、それは``visitされているファイルがない''ことを意味する。この場合には@code{set-visited-file-name}はバッファーの変更フラグを変更することなく、そのバッファーがファイルをvisitしていないとマークする。

この関数は@var{filename}をvisitしているバッファーがすでに存在する場合は、通常はユーザーに確認を求める。しかし@var{no-query}が非@code{nil}ならこの質問を行わない。@var{filename}をvisitしているバッファーがすでに存在し、かつユーザーが承認するか@var{no-query}が非@code{nil}なら、この関数は中に数字が入った@samp{<@dots{}>}を@var{filename}に追加して新たなバッファーの名前を一意にする。

@var{along-with-file}が非@code{nil}なら、それは前にvisitされていたファイルが@var{filename}にリネームされたと想定することを意味する。この場合、コマンドはバッファーの修正フラグを変更せず、そのバッファーの記録されている最終ファイル変更時刻を@code{visited-file-modtime}が報告する時刻(@ref{Modification
Time}を参照)で変更することもしない。@var{along-with-file}が@code{nil}なら、この関数は@code{visited-file-modtime}が0をリターンした後に、記録済みの最終ファイル変更時刻をクリアーする。

関数@code{set-visited-file-name}がinteractiveに呼び出されたときはミニバッファー内で@var{filename}の入力を求める。
@end deffn

@defvar list-buffers-directory
このバッファーローカル変数はvisitしているファイル名をもたないバッファーにたいして、バッファーリスト中のvisitしているファイル名を表示する場所に表示する文字列を指定する。Diredバッファーはこの変数を使用する。
@end defvar

@node Buffer Modification
@section バッファーの変更
@cindex buffer modification
@cindex modification flag (of buffer)

  Emacsは各バッファーにたいしてバッファーのテキストを変更したかどうかを記録するために、@dfn{変更フラグ(modified
flag)}と呼ばれるフラグを管理しています。このフラグはバッファーのコンテンツを変更すると常に@code{t}にセットされ、バッファーを保存したとき@code{nil}にクリアーされます。したがってこのフラグは保存されていない変更があるかどうかを表します。フラグの値は通常はモードライン内(@ref{Mode
Line Variables}を参照)に表示され、保存(@ref{Saving
Buffers}を参照)と自動保存(@ref{Auto-Saving}を参照)を制御します。

  いくつかのLispプログラムは、このフラグを明示的にセットします。たとえば、関数@code{set-visited-file-name}は、このフラグを@code{t}にセットします。なぜなら、たとえその前にvisitしていたファイルが変更されていなくても、テキストは新たにvisitされたファイルとマッチしないからです。

  バッファーのコンテンツを変更する関数は@ref{Text}で説明されています。

@defun buffer-modified-p &optional buffer
この関数は@var{buffer}が最後に読み込まれた、あるいは保存されて以降に変更されていれば非@code{nil}、そうでなければ@code{nil}をリターンする。@var{buffer}が最後に変更されて以降に自動保存されていれば、この関数はシンボル@code{autosaved}をリターンする。@var{buffer}が@var{buffer}か省略の際のデフォルトはカレントバッファー。
@end defun

@defun set-buffer-modified-p flag
この関数は@var{flag}が非@code{nil}ならカレントバッファーを変更済みとして、@code{nil}なら未変更としてマークする。

この関数を呼び出すことによる別の効果は、それがカレントバッファーのモードラインの無条件な再表示を引き起こすことである。実際のところ関数@code{force-mode-line-update}は以下を行うことにより機能する:

@example
@group
(set-buffer-modified-p (buffer-modified-p))
@end group
@end example
@end defun

@defun restore-buffer-modified-p flag
@code{set-buffer-modified-p}と同様だがモードラインの再表示を強制しない。この関数の@var{flag}の値にシンボル@code{autosaved}も指定できる。これによりバッファーは変更されていること、そして最後に変更された後にauto-saveされているものとしてマークされる。
@end defun

@deffn Command not-modified &optional arg
このコマンドはカレントバッファーが変更されておらず保存する必要がないとマークする。@var{arg}が非@code{nil}なら変更されているとマークするので、次回の適切なタイミングでバッファーは保存されるだろう。interactiveに呼び出された場合には、@var{arg}はプレフィックス引数。

この関数はエコーエリア内にメッセージをプリントするのでプログラム内で使用してはならない。かわりに@code{set-buffer-modified-p}
(上述)を使用すること。
@end deffn

@defun buffer-modified-tick &optional buffer
この関数は@var{buffer}の変更カウント(modification-count)をリターンする。これはバッファーが変更されるたびに増加されるカウンター。@var{buffer}が@code{nil}
(または省略)ならカレントバッファーが使用される。
@end defun

@defun buffer-chars-modified-tick &optional buffer
この関数は@var{buffer}の文字変更に関わる変更カウントをリターンする。テキストプロパティを変更してもこのカウンターは変化しない。しかしそのバッファーにテキストが挿入または削除されるたびに、このカウンターは@code{buffer-modified-tick}によりリターンされるであろう値にリセットされる。@code{buffer-chars-modified-tick}を2回呼び出してリターンされる値を比較することにより、その呼び出しの間にバッファー内で文字変更があったかどうかを知ることができる。@var{buffer}が@code{nil}
(または省略)ならカレントバッファーが使用される。
@end defun

テキストプロパティの変更の等、バッファーのテキストを実際には変更しない方法でバッファーを変更することを要する場合があります。プログラムがフックやバッファー変更にたいするリアクションを何もトリガーせずにバッファーを変更する必要がある場合には、@code{with-silent-modifications}マクロを使用します。

@defmac with-silent-modifications body@dots{}
バッファーを変更しないように装って@var{body}を実行する。これにはバッファーのファイルがロックされているかどうかのチェック(@ref{File
Locks}を参照)、バッファーの変更フック(@ref{Change
Hooks}を参照)等が含まれる。(バッファーのテキストプロパティとは対照的に)@var{body}が実際にバッファーテキストを変更する場合にはアンドゥするデータが破損するかもしれないことに注意。
@end defmac

@node Modification Time
@section バッファーの変更 Time
@cindex comparing file modification time
@cindex modification time of buffer

  あるファイルをvisitしてそのバッファー内で変更を行い、その一方ではディスク上でファイル自身が変更されたとします。この時点でバッファーを保存するとファイル内の変更は上書きされるでしょう。これが正に望んでいる動作のときもありますが、通常は有用な情報が失われてしまいます。したがってEmacsはファイルを保存する前に、以下で説明する関数を使用してファイルの変更時刻をチェックします(ファイルの変更時刻を調べる方法は@ref{File
Attributes}を参照)。

@defun verify-visited-file-modtime &optional buffer
この関数は@var{buffer}(デフォルトはカレントバッファー)にvisitされているファイルにたいして記録されている変更時刻と、オペレーティングシステムにより記録された実際の変更時刻を比較する。これら2つの時刻はEmacsがそのファイルをvisitか保存して以降、他のプロセスにより書き込みがされていなければ等しくなるはずである。

この関数は実際の最終変更時刻とEmacsが記録した変更時刻が同じなら@code{t}、それ以外は@code{nil}をリターンする。そのバッファーが記録済みの最終変更時刻をもたない、すなわち@code{visited-file-modtime}が0をリターンするような場合にも@code{t}をリターンする。

これはたとえ@code{visited-file-modtime}が非0の値をリターンしたとしても、ファイルをvisitしていないバッファーにたいしては常に@code{t}をリターンする。たとえばDiredバッファーにたいして、この関数は常に@code{t}をリターンする。また存在せず、
以前に存在したこともなかったファイルをvisitするバッファーにたいして@code{t}をリターンするが、visitしているファイルが削除されたバッファーにたいしては@code{nil}をリターンする。
@end defun

@defun clear-visited-file-modtime
この関数はカレントバッファーによりvisitされているファイルの最終変更時刻の記録をクリアーする。結果としてこのバッファーにを次回の保存ではファイルの変更時刻の食い違いは報告されなくなる。

この関数は@code{set-visited-file-name}、および変更済みファイルの上書きを防ぐための通常テストを行わない例外的な箇所で呼び出される。
@end defun

@defun visited-file-modtime
この関数はカレントバッファーにたいして記録された最終ファイル変更時刻をLispタイムスタンプ(@ref{Time of
Day}を参照)としてリターンする。

バッファーが最終変更時刻の記録をもたなければこの関数は0をリターンする。これが発生するのは、たとえばバッファーがファイルをvisitしていなかったり、@code{clear-visited-file-modtime}で最終変更時刻が明示的にクリアーされた場合。しかし@code{visited-file-modtime}は、いくつかの非ファイルバッファーにたいするタイムスタンプをリターンすることに注意。たとえばディレクトリーをリストするDiredバッファーでは、Diredが記録するそのディレクトリーの最終変更時刻がリターンされる。

バッファーが存在しないファイルをvisitしている場合には、この関数は@minus{}1をリターンする。
@end defun

@defun set-visited-file-modtime &optional time
この関数はバッファーがvisitしているファイルの最終変更時刻の記録を、@var{time}が非@code{nil}なら@var{time}、それ以外はvisitしているファイルの最終変更時刻に更新する。

@var{time}が@code{nil}や@code{visited-file-modtime}がリターンする整数フラグでなければ、それはLispのtime値であること(@ref{Time
of Day}を参照)。

この関数はバッファーが通常のようにファイルから読み取られたものでない場合や、ファイル自身が害のない既知の理由により変更されている場合に有用。
@end defun

@defun ask-user-about-supersession-threat filename
これはvisitしているファイル@var{filename}がバッファーのテキストより新しいときにバッファーの変更を試みた後に、ユーザーに処理方法を尋ねるために使用する関数。Emacsはディスク上のファイルの変更時刻がバッファーを最後に保存した時刻新しいかどうか、バッファーのコンテンツが変更されているかによりこれを検知する。これはおそらく他のプログラムがファイルを変更したことを意味する。

@kindex file-supersession
この関数が正常にリターンするかどうかは、ユーザーの応答に依存する。関数はバッファーの変更が処理された場合は正常にリターンし、バッファーの変更が許可されなかった場合はデータ@code{(@var{filename})}とともにエラー@code{file-supersession}をシグナルする。

この関数は適切なタイミングでEmacsにより自動的に呼び出される。これは再定義することによりEmacsをカスタマイズ可能にするために存在する。標準的な定義はファイル@file{userlock.el}を参照のこと。

@ref{File Locks}のファイルロックのメカニズムも参照されたい。
@end defun

@node Read Only Buffers
@section 読み取り専用のバッファー
@cindex read-only buffer
@cindex buffer, read-only

  あるバッファーが@dfn{読み取り専用(read-only)}の場合には、たとえスクロールやナローイングによってファイルのコンテンツのビューを変更しても、そのコンテンツを変更することはできません。

  読み取り専用バッファーは、2つのタイプの状況において使用されます:

@itemize @bullet
@item
書き込み保護されたファイルをvisitするバッファーは、通常は読み取り専用になる。

ここでの目的はユーザーにたいしてそのファイルへの保存を意図したバッファーの編集が無益、または望ましくないかもしれないことを伝えることである。それにも関わらずバッファーのテキストの変更を望むユーザーは、@kbd{C-x
C-q}で読み取り専用フラグをクリアーした後にこれを行うことができる。

@item
DiredやRmailのようなモードは、通常の編集コマンドによるコンテンツの変更がおそらく間違いであるようなときにバッファーを読み取り専用にする。

このようなモードのスペシャルコマンドは、@code{buffer-read-only}を(@code{let}によって)@code{nil}にバインドしたり、テキストを変更する箇所では@code{inhibit-read-only}を@code{t}にバインドする。
@end itemize

@defvar buffer-read-only
このバッファーローカル変数は、そのバッファーが読み取り専用かどうかを指定する。この変数が非@code{nil}ならそのバッファーは読み取り専用。しかしテキストプロパティ@code{inhibit-read-only}をもつ文字は依然として編集可能。@ref{Special
Properties, inhibit-read-only}を参照のこと。
@end defvar

@defvar inhibit-read-only
この変数が非@code{nil}なら、読み取り専用バッファー、およびその実際の値に依存して、一部もしくはすべての読み取り専用文字が変更されている。バッファー内の読み取り専用文字とはテキストプロパティ@code{read-only}が非@code{nil}の文字。テキストプロパティについての詳細は@ref{Special
Properties}を参照のこと。

@code{inhibit-read-only}が@code{t}なら、すべての@code{read-only}文字プロパティは効果がなくなる。@code{inhibit-read-only}がリストの場合には、@code{read-only}文字プロパティがリストのメンバーなら効果がなくなる(比較は@code{eq}で行われる)。
@end defvar

@deffn Command read-only-mode &optional arg
これはバッファーローカルなマイナーモードRead
Onlyモードにたいするモードコマンド。このモードが有効なときは、そのバッファーの@code{buffer-read-only}は非@code{nil}。無効なときは、そのバッファーの@code{buffer-read-only}は@code{nil}。呼び出す際の慣習は、他のマイナーモードコマンドの慣習と同じ(@ref{Minor
Mode Conventions}を参照)。

このマイナーモードは他のマイナーモードとは異なり、主に@code{buffer-read-only}にたいするラッパーの役目を果たし、別個に@code{read-only-mode}変数は存在しない。Read
Onlyモードが無効なときでも、@code{read-only}テキストプロパティが非@code{nil}の文字は読み取り専用のままである。一時的にすべての読み取り専用ステータスを無視するには上述の@code{inhibit-read-only}をバインドすること。

Read
Onlyモードを有効にする際、このモードコマンドはオプション@code{view-read-only}が非@code{nil}ならViewモードも有効にする。@ref{Misc
Buffer,,Miscellaneous Buffer Operations, emacs, The GNU Emacs
Manual}を参照のこと。Read Onlyモードを無効にする際に、もしもViewモードが有効ならViewモードも無効にする。
@end deffn

@defun barf-if-buffer-read-only &optional position
この関数はカレントバッファーが読み取り専用なら@code{buffer-read-only}エラーをシグナルする。@var{position}
(デフォルトはポイント位置)のテキストのテキストプロパティ@code{inhibit-read-only}がセットされていればエラーは発生しないだろう。

カレントバッファーが読み取り専用の場合にエラーをシグナルする他の方法については、@ref{Using Interactive}を参照のこと。
@end defun

@node Buffer List
@section バッファーリスト
@cindex buffer list
@cindex listing all buffers

  @dfn{バッファーリスト(buffer
list)}とは、すべての生きた(killされていない)バッファーのリストです。このリスト内のバッファーの順序は主に、それぞれのバッファーがウィンドウに表示されたのがどれほど最近なのかにもとづきます。いくつかの関数、特に@code{other-buffer}はこの順序を使用します。ユーザーに表示されるバッファーリストもこの順序にしたがいます。

  バッファーを作成するとそれはバッファーリストの最後に追加され
バッファーをkillすることによってそのリストから削除されます。ウィンドウに表示するためにバッファーが選択されたとき(@ref{Switching
Buffers}を参照)、あるいはバッファーを表示するウィンドウが選択されたとき(@ref{Selecting
Windows}を参照)、そのバッファーは常にこのリストの先頭に移動します。バッファーがバリー(以下の@code{bury-buffer}を参照)されたときは、このリストの最後に移動します。バッファーリストを直接操作するために利用できるLispプログラマー向けの関数は存在しません。

  説明した基本バッファーリスト(fundamental buffer
list)に加えて、Emacsはそれぞれのフレームにたいしてローカルバッファーリスト(local buffer
list)を保守します。ローカルバッファーリストでは、そのフレーム内で表示されていた(または選択されたウィンドウの)バッファーが先頭になります(この順序はそのフレームのフレームパラメーター@code{buffer-list}に記録される。@ref{Buffer
Parameters}を参照)。並び順は基本バッファーリストにならい、そのフレームでは表示されていないフレームは後になになります。。

@defun buffer-list &optional frame
この関数はすべてのバッファーを含むバッファーリストをリターンする(名前がスペースで始まるバッファーも含む)。リストの要素はバッファーの名前ではなく実際のバッファー。

@var{frame}がフレームなら、@var{frame}のローカルバッファーリストをリターンする。@var{frame}が@code{nil}か省略された場合は、基本バッファーリストが使用される。その場合には、そのバッファーを表示するフレームがどれかとは無関係に、もっとも最近に表示または選択されたバッファーの順になる。

@example
@group
(buffer-list)
     @result{} (#<buffer buffers-ja.texi>
         #<buffer  *Minibuf-1*> #<buffer buffer.c>
         #<buffer *Help*> #<buffer TAGS>)
@end group

@group
;; @r{ミニバッファーの名前が}
;;   @r{スペースで始まることに注意!}
(mapcar #'buffer-name (buffer-list))
    @result{} ("buffers-ja.texi" " *Minibuf-1*"
        "buffer.c" "*Help*" "TAGS")
@end group
@end example
@end defun

  @code{buffer-list}からリターンされるリストはそれ専用に構築されたリストであって、Emacsの内部的なデータ構造ではなく、それを変更してもバッファーの並び順に影響はありません。基本バッファーリスト内のバッファーの並び順を変更したい場合に簡単なのは以下の方法です:

@example
(defun reorder-buffer-list (new-list)
  (while new-list
    (bury-buffer (car new-list))
    (setq new-list (cdr new-list))))
@end example

  この方法により、バッファーを失ったり有効な生きたバッファー以外の何かを追加する危険を犯さずにリストに任意の並び順を指定できます。

  特定のフレームのバッファーリストの並び順や値を変更するには、@code{modify-frame-parameters}でそのフレームの@code{buffer-list}パラメーターをセットしてください(@ref{Parameter
Access}を参照)。

@defun other-buffer &optional buffer visible-ok frame
この関数はバッファーリスト中で@var{buffer}以外の最初のバッファーをリターンする。これは通常は選択されたウィンドウ(フレーム@var{frame}、または選択されたフレーム(@ref{Input
Focus}を参照)にもっとも最近表示された@var{buffer}以外のバッファーである。名前がスペースで始まるバッファーは考慮されない。

@var{buffer}が与えられない(または生きたバッファーでない)場合には、@code{other-buffer}は選択されたフレームのローカルバッファーリスト内の最初のバッファーをリターンする(@var{frame}が非@code{nil}なら@var{frame}のローカルバッファーリスト内の最初のバッファーをリターンする)。

@var{frame}が非@code{nil}の@code{buffer-predicate}パラメーターをもつ場合には、どのバッファーを考慮すべきかを決定するために@code{other-buffer}はその述語を使用する。これはそれぞれのバッファーごとにその述語を一度呼び出して、値が@code{nil}ならそのバッファーは無視される。@ref{Buffer
Parameters}を参照のこと。

@var{visible-ok}が@code{nil}なら@code{other-buffer}はやむを得ない場合を除き、任意の可視のフレーム上のウィンドウ内で可視のバッファーをリターンすることを避ける。@var{visible-ok}が非@code{nil}なら、バッファーがどこかで表示されているかどうかは問題にしない。

適切なバッファーが存在しなければ、バッファー@file{*scratch*}を(必要なら作成して)リターンする。
@end defun

@defun last-buffer &optional buffer visible-ok frame
この関数は@var{frame}のバッファーリスト内から@var{buffer}以外の最後のバッファーをリターンする。@var{frame}が省略または@code{nil}なら選択されたフレームのバッファーリストを使用する。

引数@var{visible-ok}は上述した@code{other-buffer}と同様に扱われる。適切なバッファーを見つけられなければバッファー@file{*scratch*}がリターンされる。
@end defun

@deffn Command bury-buffer &optional buffer-or-name
このコマンドはバッファーリスト内の他のバッファーの並び順を変更することなく、@var{buffer-or-name}をバッファーリストの最後に配置する。つまりこのバッファーは@code{other-buffer}がリターンする候補でもっとも期待度が低くなる。引数はバッファー自身かバッファーの名前を指定できる。

この関数は基本バッファーリストと同様に、それぞれのフレームの@code{buffer-list}パラメーターを操作する。したがってバリー(bury:
埋める、隠す)したバッファーは@code{(buffer-list
@var{frame})}と@code{(buffer-list)}の値の最後に置かれるだろう。さらにバッファーが選択されたウィンドウに表示されていれば、ウィンドウのバッファーリストの最後にバッファーを置くことも行う(@ref{Window
History}を参照)。

@var{buffer-or-name}が@code{nil}または省略された場合には、カレントバッファーをバリーすることを意味する。加えてカレントバッファーが選択されたウィンドウ(@ref{Selecting
Windows}を参照)に表示されていれば、そのウィンドウを削除するか他のバッファーを表示する。より正確には選択されたウィンドウが専用(dedicated)のウィンドウ(@pxref{Dedicated
Windows})であり、かつそのフレーム上に他のウィンドウが存在する場合には専用ウィンドウは削除される。それがフレーム上で唯一のウィンドウであり、かつそのフレームが端末上で唯一のフレームでなければ、そのフレームは@code{frame-auto-hide-function}で指定される関数を呼び出すことにより開放される(@ref{Quitting
Windows}を参照)。それ以外の場合はに、他のバッファーをそのウィンドウ内に表示するために@code{switch-to-prev-buffer}を呼び出す(@ref{Window
History}を参照)。@var{buffer-or-name}が他のウィンドウで表示されていれば、そのまま表示され続ける。

あるバッファーにたいして、それを表示するすべてのウィンドウでバッファーを置き換えるには@code{replace-buffer-in-windows}を使用する。@ref{Buffers
and Windows}を参照のこと。
@end deffn

@deffn Command unbury-buffer
このコマンドは選択されたフレームのローカルバッファーリストの最後のバッファーに切り替える。より正確には選択されたウィンドウ内で、@code{last-buffer}
(上記参照)がリターンするバッファーを表示するために関数@code{switch-to-buffer}を呼び出す(@ref{Switching
Buffers}を参照)。
@end deffn

@defvar buffer-list-update-hook
これはバッファーリストが変更されたときに常に実行されるノーマルフック。(暗黙に)このフックを実行する関数は@code{get-buffer-create}
(@ref{Creating Buffers}を参照)、@code{rename-buffer} (@ref{Buffer
Names}を参照)、@code{kill-buffer} (@ref{Killing Buffers}を参照)、@code{bury-buffer}
(上記参照)、@code{select-window} (@ref{Selecting
Windows}を参照)。このフックは@code{get-buffer-create}や@code{generate-new-buffer}で@var{inhibit-buffer-hooks}引数に非@code{nil}を指定して作成した内部バッファーや一時バッファーには実行されない。

このフックが実行する関数は無限再帰を引き起こすので、@code{nil}の@var{norecord}引数による@code{select-window}の呼び出しは避けること。
@end defvar

@defun buffer-match-p condition buffer-or-name &rest args
この関数は@code{buffer-or-name}で指定されたバッファーが@var{condition}の指定を満足するかチェックする。オプション引数@var{args}は@var{condition}の述語関数に渡される。有効な@var{condition}は以下のいずれか:
@itemize @bullet{}
@item
文字列。正規表現として解釈される。この正規表現がファイル名にマッチすれば、そのバッファーは条件を満たす。
@item
述語関数。バッファーがマッチすれば非@code{nil}をリターンすること。この関数は1つ目の引数として@var{buffer-or-name}、その後に@var{args}を引数として呼び出される。
@item
コンスセル@code{(@var{oper} . @var{expr})}。@var{oper}は以下のいずれか
@table @code
@item (not @var{cond})
そのバッファーと@code{args}では@code{buffer-match-p}が偽となるような@var{cond}なら真。
@item (or @var{conds}@dots{})
@var{conds}内の@emph{いずれか}の条件にたいして、そのバッファーと@code{args}ならば@code{buffer-match-p}が真になれば真。
@item (and @var{conds}@dots{})
@var{conds}内の@emph{すべて}の条件にたいして、そのバッファーと@code{args}ならば@code{buffer-match-p}が真になれば真。
@item derived-mode
そのバッファーのメジャーモードが@var{expr}から派生していれば満たされる。この条件はバッファーにたいしてそのメジャーモードが設定される前に@code{buffer-match-p}が呼び出されている場合には、マッチの報告に失敗するかもしれないことに注意。
@item major-mode
そのバッファーのメジャーモードが@var{expr}なら真。どちらでも機能するのなら@code{derived-mode}の使用を推奨する。この条件はバッファーにたいしてそのメジャーモードが設定される前に@code{buffer-match-p}が呼び出されている場合には、マッチの報告に失敗するかもしれないことに注意。
@end table
@item t
どのバッファーでも真。@code{""}(空文字列)、@code{(and)}(empty conjunction: 空論理積)を使いやすくした代替え。
@end itemize
@end defun

@defun match-buffers condition &optional buffer-list &rest args
この関数は@var{condition}を満たすすべてのバッファーのリスト、マッチするバッファーがなければ@code{nil}をリターンする。引数@var{condition}は上述の@code{buffer-match-p}と同様に定義される。デフォルトではすべてのバッファーを考慮するが、オプション引数@code{buffer-list}
(考慮すべきバッファーのリスト)を通じて制限できる。残りの引数@var{args}は、@code{buffer-match-p}と同じ方法によって@var{condition}に渡される。
@end defun

@node Creating Buffers
@section バッファーの作成
@cindex creating buffers
@cindex buffers, creating

  このセクションではバッファーを作成する2つのプリミティブについて説明します。@code{get-buffer-create}は指定された名前の既存バッファーが見つからなければ作成します。@code{generate-new-buffer}は常に新たにバッファーを作成してそれに一意な名前を与えます。

  どちらの関数もオプション引数@var{inhibit-buffer-hooks}を受け取ります。これが非@code{nil}なら、これらの関数が作成したバッファーは@code{kill-buffer-hook}、@code{kill-buffer-query-functions}
(@ref{Killing Buffers}を参照)、@code{buffer-list-update-hook} (@ref{Buffer
List}を参照)のフックを実行しません。これはユーザーに提示されたり他のアプリケーションに渡されることが決してない、内部バッファーや一時バッファーの速度低下を避けるためです。

  バッファーを作成するために使用できる他の関数には@code{with-output-to-temp-buffer} (@ref{Temporary
Displays}を参照)、および@code{create-file-buffer} (@ref{Visiting
Files}を参照)が含まれます。サブプロセスの開始によってもバッファーを作成することができます(@ref{Processes}を参照)。

@defun get-buffer-create buffer-or-name &optional inhibit-buffer-hooks
この関数は@var{buffer-or-name}という名前のバッファーをリターンする。リターンされたバッファーはカレントにならない ---
この関数はカレントがどのバッファーであるかを変更しない。

@var{buffer-or-name}は文字列、または既存バッファーのいずれかでなければならない。これが文字列で、かつ既存の生きたバッファーの名前なら、@code{get-buffer-create}はそのバッファーをリターンする。そのようなバッファーが存在しなければ、新たにバッファーを作成する。@var{buffer-or-name}が文字列ではなくバッファーなら、たとえそのバッファーが生きていなくても与えられたバッファーをリターンする。

@example
@group
(get-buffer-create "foo")
     @result{} #<buffer foo>
@end group
@end example

新たに作成されたバッファーにたいするメジャーモードはFundamentalモードにセットされる(変数@code{major-mode}のデフォルト値はより高いレベルで処理される。@ref{Auto
Major
Mode}を参照)。名前がスペースで始まる場合には、そのバッファーのアンドゥ情報の記録は初期状態では無効である(@ref{Undo}を参照)。
@end defun

@defun generate-new-buffer name &optional inhibit-buffer-hooks
この関数は新たに空のバッファーを作成してリターンするが、それをカレントにはしない。バッファーの名前は関数@code{generate-new-buffer-name}に@var{name}を渡すことにより生成される(@ref{Buffer
Names}を参照)。つまり@var{name}という名前のバッファーが存在しなければ、それが新たなバッファーの名前になり、その名前が使用されていたら@samp{<@var{n}>}という形式のサフィックスが@var{name}に追加される。ここで@var{n}は整数。

@var{name}が文字列でなければエラーがシグナルされる。

@example
@group
(generate-new-buffer "bar")
     @result{} #<buffer bar>
@end group
@group
(generate-new-buffer "bar")
     @result{} #<buffer bar<2>>
@end group
@group
(generate-new-buffer "bar")
     @result{} #<buffer bar<3>>
@end group
@end example

新たなバッファーにたいするメジャーモードはFundamentalモードにセットされる。変数@code{major-mode}のデフォルト値は、より高いレベルで処理される。@ref{Auto
Major Mode}を参照のこと。
@end defun

@node Killing Buffers
@section バッファーのkill
@cindex killing buffers
@cindex buffers, killing

  @dfn{バッファーのkill(Killing a buffer)}により、
そのバッファーの名前はEmacsにとって未知の名前となり、そのバッファーが占めていたメモリースペースは他の用途に使用できるようになります。

  バッファーに対応するバッファーオブジェクトは、それを参照するものがあればkillされても存在し続けますが、それをカレントにしたり表示することができないように特別にマークされます。とはいえkillされたバッファーの同一性は保たれるので、2つの識別可能なバッファーをkillした場合には、たとえ両方死んだバッファーであっても@code{eq}による同一性は残ります。

  あるウィンドウ内においてカレント、あるいは表示されているバッファーをkillした場合、Emacsはかわりに他の何らかのバッファーを自動的に選択または表示します。これはバッファーのkillによってカレントバッファーが変更されることを意味します。したがってバッファーをkillする際には、(killされるバッファーがカレントを偶然知っていた場合を除き)カレントバッファーの変更に関しても事前に注意を払うべきです。@ref{Current
Buffer}を参照してください。

  1つ以上のインダイレクト
@iftex
バッファー
@end iftex
@ifnottex
バッファー(@ref{Indirect Buffers}を参照)
@end ifnottex
のベースとなるバッファーをkillした場合には、同様にインダイレクトバッファーも自動的にkillされます。

@cindex live buffer
  バッファーの@code{buffer-name}が@code{nil}の場合のみバッファーはkillされます。killされていないバッファーは@dfn{生きた(live)}バッファーと呼ばれます。あるバッファーにたいして、そのバッファーが生きているか、またはkillされているかを確認するには@code{buffer-live-p}を使用します(下記参照)。

@deffn Command kill-buffer &optional buffer-or-name
この関数はバッファー@var{buffer-or-name}をkillして、そのバッファーのメモリーを他の用途のために開放、またはオペレーティングシステムに返却する。@var{buffer-or-name}が@code{nil}または省略された場合にはカレントバッファーをkillする。

そのバッファーを@code{process-buffer}として所有するすべてのプロセスには、通常はプロセスを終了させるシグナル@code{SIGHUP}
(hangup)が送信される。@ref{Signals to Processes}を参照のこと。

バッファーがファイルをvisitしていて、かつ保存されていない変更が含まれる場合には、@code{kill-buffer}はバッファーをkillする前にユーザーにたいして確認を求める。これは@code{kill-buffer}がinteractiveに呼び出されていなくても行われる。この確認要求を抑制するには@code{kill-buffer}の呼び出し前に、変更フラグ(modified
flag)をクリアーすればよい。@ref{Buffer Modification}を参照のこと。

killされるバッファーをカレントで表示しているすべてのバッファーをクリーンアップするために、この関数は@code{replace-buffer-in-windows}を呼び出す。

すでに死んでいるバッファーをkillしても効果はない。

この関数は実際にバッファーをkillすると@code{t}をリターンする。ユーザーが確認で拒否を選択、または@var{buffer-or-name}がすでに死んでいる場合には@code{nil}をリターンする。

@smallexample
(kill-buffer "foo.unchanged")
     @result{} t
(kill-buffer "foo.changed")

---------- Buffer: Minibuffer ----------
Buffer foo.changed modified; kill anyway? (yes or no) @kbd{yes}
---------- Buffer: Minibuffer ----------

     @result{} t
@end smallexample
@end deffn

@defvar kill-buffer-query-functions
保存されていない変更について確認を求める前に、@code{kill-buffer}はリスト@code{kill-buffer-query-functions}内の関数を出現順に引数なしで呼び出す。それらが呼び出される際にはkillされるバッファーがカレントになる。この機能はこれらの関数がユーザーに確認を求めるというアイデアが元となっている。これらの関数のいずれかが@code{nil}をリターンしたら、@code{kill-buffer}はそのバッファーを殺さない。

このフックは非@code{nil}の@var{inhibit-buffer-hooks}引数の@code{get-buffer-create}または@code{generate-new-buffer}で作成された内部バッファーや一時バッファーにたいしては実行されない。
@end defvar

@defvar kill-buffer-hook
これは尋ねることになっている質問をすべて終えた後、実際にバッファーをkillする直前に@code{kill-buffer}により実行されるノーマルフック。この変数は永続的にローカルであり、メジャーモードの変更により、そのローカルバインディングはクリアーされない。

このフックは非@code{nil}の@var{inhibit-buffer-hooks}引数の@code{get-buffer-create}または@code{generate-new-buffer}で作成された内部バッファーや一時バッファーにたいしては実行されない。
@end defvar

@defopt buffer-offer-save
特定のバッファーにおいてこの変数が非@code{nil}なら、あたかもファイルをvisitするバッファーにたいして提案するときのように、バッファーの保存を提案するように@code{save-buffers-kill-emacs}に指示する。2つ目のオプション引数を@code{t}にセットして@code{save-some-buffers}を呼び出せばバッファーの保存も提案する。最後にこの変数をシンボル@code{always}にセットすると、@code{save-buffers-kill-emacs}と@code{save-some-buffers}は常に保存を提案する。@ref{Definition
of
save-some-buffers}を参照のこと。何らかの理由により変数@code{buffer-offer-save}がセットされると自動的にバッファーローカルになる。@ref{Buffer-Local
Variables}を参照のこと。
@end defopt

@defvar buffer-save-without-query
特定のバッファーにおいてこの変数が非@code{nil}なら、@code{save-buffers-kill-emacs}と@code{save-some-buffers}は、(バッファーが変更されていれば)ユーザーに確認を求めることなくそのバッファーを保存する。何らかの理由によりこの変数をセットする際には自動的にバッファーローカルになる。
@end defvar

@defun buffer-live-p object
この関数は@var{object}が生きたバッファー(killされていないバッファー)なら@code{t}、それ以外は@code{nil}をリターンする。
@end defun

@node Indirect Buffers
@section インダイレクトバッファー
@cindex indirect buffers
@cindex base buffer

  @dfn{インダイレクトバッファー(indirect buffer: 間接バッファー)}とは、@dfn{ベースバッファー(base
buffer)}と呼ばれる他のバッファーとテキストを共有します。いくつかの点においてインダイレクトバッファーはファイル間でのシンボリックリンクに類似しています。ベースバッファー自身はインダイレクトバッファーではない可能性があります。

  インダイレクトバッファーのテキストは、常にベースバッファーのテキストと同一です。編集により一方が変更されると、それは即座に他方のバッファーから可視になります。これには文字自体に加えてテキストプロパティも同様に含まれます。

  他のすべての観点において、インダイレクトバッファーとそのベースバッファーは完全に別物です。それらは別の名前、独自のポイント値、ナローイング、マーカー、オーバーレイ、メジャーモード、バッファーローカルな変数バインディングをもちます(ただしどちらかのバッファーでのテキストの挿入や削除を行うと両方のバッファーでマーカーとオーバーレイが再配置される)。

  インダイレクトバッファーはファイルをvisitできませんがベースバッファーには可能です。インダイレクトバッファーの保存を試みると、実際にはベースバッファーが保存されます。

  インダイレクトバッファーをkillしてもベースバッファーに影響はありません。ベースバッファーをkillするとインダイレクトバッファーはkillされて再びカレントバッファーにすることはできません。

@deffn Command make-indirect-buffer base-buffer name &optional clone inhibit-buffer-hooks
これはベースバッファーが@var{base-buffer}であるような、@var{name}という名前のインダイレクトバッファーを作成してリターンする。引数@var{base-buffer}は生きたバッファー、または既存バッファーの名前(文字列)を指定できる。@var{name}が既存バッファーの名前ならエラーがシグナルされる。

@var{clone}が非@code{nil}ならインダイレクトバッファーは最初は@var{base-buffer}のメジャーモード、マイナーモード、バッファーローカル変数等の状態を共有する。@var{clone}が省略または@code{nil}なら、インダイレクトバッファーの情報は新たなバッファーにたいするデフォルト状態にセットされる。

@var{base-buffer}がインダイレクトバッファーなら、新たなバッファーのベースとしてそれのベースバッファーが使用される。さらに@var{clone}が非@code{nil}なら、初期状態は@var{base-buffer}ではなく実際のベースバッファーからコピーされる。

@var{inhibit-buffer-hooks}の意味については@ref{Creating Buffers}を参照のこと。
@end deffn

@deffn Command clone-indirect-buffer newname display-flag &optional norecord
この関数はカレントバッファーのベースバッファーを共有するインダイレクトバッファーを新たに作成して、カレントバッファーの残りの属性をコピーしてリターンする(カレントバッファーがインダイレクトバッファーでなければそれがベースバッファーとして使用される)。

@var{display-flag}が非@code{nil}
(インタラクティブな呼び出しでは常に非@code{nil})なら、それは@code{pop-to-buffer}を呼び出すことにより新しいバッファーを表示することを意味する。@var{norecord}が非@code{nil}なら、それは新しいバッファーをバッファーリストの先頭に置かないことを意味する。
@end deffn

@defun buffer-base-buffer &optional buffer
この関数は@var{buffer}
(デフォルトはカレントバッファー)のベースバッファーをリターンする。@var{buffer}がインダイレクトバッファーでなければ値は@code{nil}、それ以外では値は他のバッファーとなり、そのバッファーがインダイレクトバッファーであることは決してない。
@end defun

@node Swapping Text
@section 2つのバッファー間でのテキストの交換
@cindex swap text between buffers
@cindex virtual buffers

  特別なモードでは、ユーザーが同一のバッファーから複数の非常に異なったテキストにアクセスできるようにしなければならない場合があります。たとえばバッファーのテキストのサマリーを表示して、ユーザーがそのテキストにアクセスできるようにする場合です。

  これは、(ユーザーがテキストを編集した際には同期を保つ)複数バッファーや、ナローイング(@ref{Narrowing}を参照)により実装することができるかもしれません。しかしこれらの候補案はときに退屈になりがちであり、特にそれぞれのテキストタイプが正しい表示と編集コマンドを提供するために高価なバッファーグローバル操作を要求する場合には、飛び抜けて高価になる場合があります。

  Emacsはそのようなモードにたいして別の機能を提供します。@code{buffer-swap-text}を使用すれば、2つのバッファー間でバッファーテキストを素早く交換することができます。この関数はテキストの移動は行わずに異なるテキスト塊(text
chunk)をポイントするように、バッファーオブジェクトの内部的なデータ構造だけを変更するため非常に高速です。これを使用することにより、2つ以上のバッファーグループから個々のバッファーのコンテンツすべてを併せもつような、単一の仮想バッファー(virtual
buffer)が実在するように見せかけることができます。

@defun buffer-swap-text buffer
この関数はカレントバッファーのテキストと、引数@var{buffer}のテキストを交換する。2つのバッファーのいずれか一方がインダイレクトバッファー(@ref{Indirect
Buffers}を参照)、またはインダイレクトバッファーのベースバッファーの場合はエラーをシグナルする。

バッファーテキストに関連するすべてのバッファープロパティ、つまりポイントとマークの位置、すべてのマーカーとオーバーレイ、テキストプロパティ、アンドゥリスト、@code{enable-multibyte-characters}フラグの値(@ref{Text
Representations, enable-multibyte-characters}を参照)等も同様に交換される。

@strong{警告:}
この関数を@code{save-excursion}内部で呼び出すと、位置とバッファーを保存するために@code{save-excursion}が使用するマーカーも同様に交換されるので、そのフォームを抜ける際にはカレントバッファーは@var{buffer}にセットされるだろう。
@end defun

  ファイルをvisitしているバッファーに@code{buffer-swap-text}を使用する場合には、交換されたテキストではなくそのバッファーの元のテキストを保存するようにフックをセットアップするべきです。@code{write-region-annotate-functions}は正にこの目的のために機能します。そのバッファーの@code{buffer-saved-size}を、おそらく交換されたテキストにたいする変更が自動保存に干渉しないであろう、@minus{}2にセットするべきです。

@node Buffer Gap
@section バッファーのギャップ
@cindex buffer gap

  Emacsのバッファーは挿入と削除を高速にするために不可視の@dfn{ギャップ(gap)}を使用して実装されています。挿入はギャップ部分を充填、削除はギャップを追加することにより機能します。もちろんこれは最初にギャップを挿入や削除の部位(locus)に移動しなければならないことを意味します。Emacsはユーザーが挿入か削除を試みたときだけギャップを移動します。大きなバッファー内の遠く離れた位置で編集した後に、他の箇所での最初の編集コマンドに無視できない遅延が発生する場合があるのはこれが理由です。

  このメカニズムは暗黙に機能するものであり、Lispコードはギャップのカレント位置に影響されるべきでは決してありませんが、以下の関数はギャップ状態に関する情報の取得に利用できます。

@defun gap-position
この関数はカレントバッファー内のギャップのカレント位置をリターンする。
@end defun

@defun gap-size
この関数はカレントバッファー内のギャップのサイズをリターンする。
@end defun
