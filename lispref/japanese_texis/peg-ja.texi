@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990--1995, 1998--1999, 2001--2024 Free Software
@c Foundation, Inc.
@c See the file elisp-ja.texi for copying conditions.
@node Parsing Expression Grammars
@chapter 式グラマーの解析
@cindex text parsing
@cindex parsing expression grammar
@cindex PEG

  Emacs Lisp provides several tools for parsing and matching text, from
regular expressions (@pxref{Regular Expressions}) to full left-to-right
(a.k.a.@: @acronym{LL}) grammar parsers (@pxref{Top,, Bovine parser
development,bovine}).  @dfn{Parsing Expression Grammars} (@acronym{PEG}) are
another approach to text parsing that offer more structure and composability
than regular expressions, but less complexity than context-free grammars.

@acronym{PEG} (Parsing Expression Grammar:
パース式グラマー、解析式構文)は言語内の文字列を認識する一連のルールという観点から形式言語を記述します。Emacsでは@acronym{PEG}パーサーは名前つきルールとして定義されており、ルールはそれぞれテキストパターンにたいするマッチおよび/または他のルールへの参照を含んでいます。パースは関数@code{peg-run}またはマクロ@code{peg-parse}
(以下参照)によって初期化されて、与えられた一連のルールを用いてカレントバッファーのポイントの後にあるテキストのパースを行います。

@cindex parsing expression
@cindex root, of parsing expression grammar
@cindex entry-point, of parsing expression grammar
Each rule in a @acronym{PEG} is referred to as a @dfn{parsing expression}
(@acronym{PEX}), and can be specified a literal string, a regexp-like
character range or set, a peg-specific construct resembling an Emacs Lisp
function call, a reference to another rule, or a combination of any of
these.  A grammar is expressed as a tree of rules in which one rule is
typically treated as a ``root'' or ``entry-point'' rule.  For instance:

@example
@group
((number sign digit (* digit))
 (sign   (or "+" "-" ""))
 (digit  [0-9]))
@end group
@end example

グラマーを一度定義してしまえば、それを使ってカレントバッファーのポイントの後にあるテキストさまざまな方法でパースできます。一番シンプルなのは@code{peg-parse}マクロでしょう:

@defmac peg-parse &rest pexs
ポイント位置で@var{pexs}をマッチする。
@end defmac

@example
@group
(peg-parse
  (number sign digit (* digit))
  (sign   (or "+" "-" ""))
  (digit  [0-9]))
@end group
@end example

このマクロはソースコード内にルールを直接記述しなければならないので、シンプルですが柔軟性があります。他の関数やマクロを組み合わせて使用すれば、さらなる柔軟性を獲得することができるでしょう。

@defmac with-peg-rules rules &rest body
@var{rules}
(@acronym{PEX}のリスト)の効力の下で@var{body}を実行する。@var{BODY}内では@code{peg-run}呼び出しによってパースが開始される。
@end defmac

@defun peg-run peg-matcher &optional failure-function success-function
この関数は、名前つきルールに@code{peg}
(以下参照)を呼び出した結果(通常は大きなグラマーのエントリーポイント)である単一の@var{peg-matcher}を受け取る。

パースの最後にパースの結果に応じて@var{failure-function}か@var{success-function}のいずれかが呼び出される。@var{success-function}が提供された場合には、唯一の引数としてパース中のスタック上のすべてのアクションを実行する無名関数を受け取る関数であること。デフォルトではこの関数は単にそのまま実行される。パースが失敗した場合には、パース中に失敗した@acronym{PEG}式のリストとともに@var{failure-function}として提供された関数が呼び出される。このリストはデフォルトでは破棄される。
@end defun

@code{peg-run}に渡される@var{peg-matcher}は@code{peg}を呼び出すことによって生成されます:

@defmac peg &rest pexs
@var{pexs}を@code{peg-run}に渡すのに適した単一のpeg-matcherに変換する。
@end defmac

上述した@code{peg-parse}の例はこれらの関数への一連の呼び出しを展開したものであり、以下のようにして完全に記述することができます:

@example
@group
(with-peg-rules
    ((number sign digit (* digit))
     (sign   (or "+" "-" ""))
     (digit  [0-9]))
  (peg-run (peg number)))
@end group
@end example

このアプローチではパースの``エントリーポイント''にたいするより明白な制御、および異なるソースのルールを組み合わせることが可能になります。

マクロ@code{define-peg-rule}を使用すれば、より@code{defun}に似た構文を用いて個別にルールを定義することもできます:

@defmac define-peg-rule name args &rest pexs
引数@var{args}を受け取りポイント位置に@var{pexs}をマッチするPEGルールとして@var{name}を定義する。
@end defmac

たとえば:

@example
@group
(define-peg-rule digit ()
  [0-9])
@end group
@end example

PEGルールにたいして@code{funcall}することにより、ルールに引数を提供できます(@ref{PEX Definitions}を参照)。

別の可能性として挙げられるのは、@code{define-peg-ruleset}により名前つきルールセットを定義する方法です。

@defmac define-peg-ruleset name &rest rules
@var{rules}にたいする識別子として@var{name}を定義する。
@end defmac

@example
@group
(define-peg-ruleset number-grammar
        '((number sign digit (* digit))
          digit  ;; 上記定義への参照
          (sign (or "+" "-" ""))))
@end group
@end example

この方法で定義したルールおよびルールセットは、後で@code{peg-run}や@code{with-peg-rules}での呼び出しにおいて名前で参照できます:

@example
@group
(with-peg-rules number-grammar
  (peg-run (peg number)))
@end group
@end example

デフォルトでは@code{peg-run}や@code{peg-parse}の呼び出しによって出力は生成されず、パースによって単にポイントが移動するだけです。パースした文字列をリターンしたりそれにもとづいたアクションを行う場合には、ルールに@dfn{(actions)}を含めることができます。@ref{Parsing
Actions}を参照してください。

@menu
* PEX Definitions::          PEXルールの構文。
* Parsing Actions::          成功したパースにたいするアクションの実行。
* Writing PEG Rules::        パースルール記述のヒント。
@end menu

@node PEX Definitions
@section PEX定義

以下の構文を使用してパース式を定義できます:

@table @code
@item (and @var{e1} @var{e2}@dots{})
すべてマッチしなければならない@acronym{PEX}のシーケンス。@code{and}フォームはオプションであり暗黙。

@item (or @var{e1} @var{e2}@dots{})
順位付けされた選択肢、すなわちElispの場合と同じように順に試行されて最初に成功したマッチが使用される。これは複数マッチ間の選択が不定なコンテキストフリーグラマー(ontext-free
grammar: 文脈自由文法)とは別物であることに注意。

@item (any)
regexpにおける``.''のように任意の1文字にマッチ。

@item @var{string}
リテラル文字列。

@item (char @var{c})
Elispの文字リテラルのような単一の文字@var{c}。

@item (* @var{e})
regexpにおける@samp{*}のように、式@var{e}の0個以上のインスタンス。常に``欲張り(greedy)''なマッチ。

@item (+ @var{e})
regexpにおける@samp{+}のように、式@var{e}の1個以上のインスタンス。常に``欲張り(greedy)''なマッチ。

@item (opt @var{e})
regexpにおける@samp{?}のように、式@var{e}の0個または1個のインスタンス。

@item @var{symbol}
前に定義されたPEGルールを表すシンボル。

@item (range @var{ch1} @var{ch2})
regexpにおける@samp{[@var{ch1}-@var{ch2}]}のように、@var{ch1}と@var{ch2}の間の文字範囲。

@item [@var{ch1}-@var{ch2} "+*" ?x]
範囲、文字リテラル、文字列を含むことができる文字セット。

@item [ascii cntrl]
名前つき文字クラスのリスト。

@item (syntax-class @var{name})
単一の文字クラス。

@item (funcall @var{e} @var{args}@dots{})
引数@var{args}で@acronym{PEX}の(前に@code{define-peg-rule}で定義された) @var{e}を呼び出す。

@item (null)
空文字列。
@end table

以下はアンカーやテストとして使用される式です。これらはポイントを移動しませんが、パース処理(@ref{Writing PEG
Rules}を参照)を制御する手段として使用できる、制限つきのマッチを行うためのブーリアン値をリターンします。

@table @code
@item (bob)
バッファー先頭。

@item (eob)
バッファー終端。

@item (bol)
行頭。

@item (eol)
行末。

@item (bow)
単語の先頭。

@item (eow)
単語の終端。

@item (bos)
シンボルの先頭。

@item (eos)
シンボルの終端。

@item (if @var{e})
ポイント以降を@acronym{PEX}の@var{e}でパースして成功なら非@code{nil}をリターン(ポイントは移動しない)。

@item (not @var{e})
ポイント以降を@acronym{PEX}の@var{e}でパースして失敗なら非@code{nil}をリターン(ポイントは移動しない)。

@item (guard @var{exp})
Lisp式の@var{exp}の値をブーリアン値として扱う。
@end table

@vindex peg-char-classes
文字クラスにマッチングは、正規表現における文字クラス(@ref{Top,, Character
Classes,elisp}を参照)と等価な@code{peg-char-classes}の名前つきクラスを参照できます。

@node Parsing Actions
@section アクションの解析

@cindex parsing actions
@cindex parsing stack
デフォルトではパース処理はカレントバッファーのポイントを単に移動して、最終的にはパースが成功すれば@code{t}、失敗すれば@code{nil}をリターンします。パースしたテキスト内の特定のポイントで任意のElispを実行できる@dfn{パースアクション(parsing
actions)}を定義することも可能です。これらのアクションはオプションで、@dfn{パーススタック(parsing
stack)}と呼ばれるパースプロセスによってリターンされる値リストに影響を与えることができます。これらのアクションはパースプロセスが最終的に成功した場合のみ実行(および値のリターン)されます。失敗した場合にはアクションのコードは何も実行されません。

アクションはルール定義のどこでも追加できます。アクションは先頭にバッククォートを記述することでパース式とは区別されます。バッククォートの後には2つのハイフン(@samp{--})をどこかに含んだカッコの括りが続きます。ハイフン左側のシンボルにはスタックからポップされた値にバインドされます(幾分ラムダ式の引数リストに似ている)。ハイフン右側のコードが生成した値はスタックへとプッシュされます(ラムダのリターン値と似ている)。たとえば前述したグラマーはパースした数値を実際の整数としてリターンするアクションに拡張できます:

@example
@group
(with-peg-rules ((number sign digit (* digit
                                       `(a b -- (+ (* a 10) b)))
                         `(sign val -- (* sign val)))
                 (sign (or (and "+" `(-- 1))
                           (and "-" `(-- -1))
                           (and ""  `(-- 1))))
                 (digit [0-9] `(-- (- (char-before) ?0))))
  (peg-run (peg number)))
@end group
@end example

値をポップしてリターンする前に、スタックには値が存在しなければなりません。アクションの左項にバインドするスタック値が不足している場合には、不足している項にたいして@code{nil}がバインドされるでしょう。スタックに値をプッシュするのはアクションの右項だけです。左項しかないアクションはスタックの値を消費(と破棄)するだけです。パースの最後でスタック値はフラットなリストとしてリターンされます。

(単にポイントを移動するのではなく)@acronym{PEX}がマッチした文字列をリターンさせるために、以下のようなルールを用いるグラマーを記述できます:

@example
@group
(one-word
  `(-- (point))
  (+ [word])
  `(start -- (buffer-substring start (point))))
@end group
@end example

@noindent
上記1つ目のアクションはポイントの初期値をスタックにプッシュしています。アクションの間に記述された@acronym{PEX}によって、ポイントが次の単語の上に移動します。2つ目のアクションにより、前の値をスタックからポップします(その値は変数@code{start}にバインドされてから、バッファーからの部分文字列抽出に使用されて、抽出された文字列はスタックにプッシュされる)。これははよくあるパターンなので上述の処理、および他の一般的なシナリオを正確こなす略記関数を@acronym{PEG}が提供しています。

@table @code
@findex substring (a PEG shorthand)
@item (substring @var{e})
@acronym{PEX}の@var{e}をマッチして、マッチした文字列をスタックにプッシュする。

@findex region (a PEG shorthand)
@item (region @var{e})
@var{e}をマッチして、マッチしたリージョンの開始と終了をスタックにプッシュする。

@findex replace (a PEG shorthand)
@item (replace @var{e} @var{replacement})
@var{e}をマッチして、マッチしたリージョンを文字列@var{replacement}で置き換える。

@findex list (a PEG shorthand)
@item (list @var{e})
@var{e}をマッチして、@var{e}
(とその部分式)が生成した値をリストに収集、そのリストをスタックにプッシュする。スタック値は通常はフラットなリストとしてリターンされる(この方法により複数の値を一緒に``グループ化''される)。
@end table

@node Writing PEG Rules
@section PEGルールの記述
@cindex PEG rules, pitfalls
@cindex Parsing Expression Grammar, pitfalls in rules

PEGルールを記述する際には、それが貪欲であることに留意する必要があります。可変量のテキストを消費し得るルールは、たとえそれを行うことによって通常であればマッチするような後続のルールが失敗することになろうとも、可能なかぎり最大の量のテキストを常に消費します。たとえば以下のルールが成功することは決してあり得ません:

@example
(forest (+ "tree" (* [blank])) "tree" (eol))
@end example

@noindent
@w{@code{(+ "tree" (*
[blank]))}}という@acronym{PEX}は、最後にマッチさせる@samp{tree}を残さず、単語@samp{tree}の繰り返しすべてを消費します。

このような状況においては述語とguard
(すなわち式@code{not}、@code{if}、@code{guard})を用いて挙動を制限することによって望ましい結果を得ることができます。たとえば:

@example
(forest (+ "tree" (* [blank])) (not (eol)) "tree" (eol))
@end example

@noindent
@code{if}および@code{not}はポイントを移動せずにパース式を受け取って、ブーリアンとして解釈できる演算子です。@code{guard}演算子の内容は通常のLisp(@acronym{PEX}ではない)として評価されてブーリアン値をリターンされるはずです。@code{nil}値の場合にはマッチは失敗です。

他の期待していない振る舞いとしては、たとえ最終的に失敗するパースであってもパースによって可能なかぎり遠くにポイントが移動してしまう可能性があることです。以下のルール:

@example
(end-game "game" (eob))
@end example

@noindent
このルールをポイント後にテキスト``game
over''を含んだバッファーで実行すると、ポイントを``game''の直後に移動してからパースを中止して@code{nil}をリターンするでしょう。パースが成功した場合には常に@code{t}、あるいはパーススタックのコンテキストをリターンします。
