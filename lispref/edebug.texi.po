# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Emacs-24.5\n"
"POT-Creation-Date: 2019-10-14 22:48+0900\n"
"PO-Revision-Date: 2019-11-02 14:49+0900\n"
"Last-Translator: Ayanokoji Takesi <ayanokoji.takesi@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: section
#: original_texis/edebug.texi:13 original_texis/edebug.texi:14
#, no-wrap
msgid "Edebug"
msgstr "Edebug"

#. type: cindex
#: original_texis/edebug.texi:15
#, no-wrap
msgid "Edebug debugging facility"
msgstr "Edebug debugging facility"

#. type: Plain text
#: original_texis/edebug.texi:19
msgid "Edebug is a source-level debugger for Emacs Lisp programs, with which you can:"
msgstr "EdebugはEmacs Lispプログラムにたいするソースレベルデバッガです。これにより以下のことができます:"

#. type: itemize
#: original_texis/edebug.texi:23
msgid "Step through evaluation, stopping before and after each expression."
msgstr "式の前後でストップして評価をステップで実行する。"

#. type: itemize
#: original_texis/edebug.texi:26
msgid "Set conditional or unconditional breakpoints."
msgstr "条件付きまたは無条件のbreakpointのセット。"

#. type: itemize
#: original_texis/edebug.texi:29
msgid "Stop when a specified condition is true (the global break event)."
msgstr "指定された条件がtrueならストップする(グローバルbreakpoint)。"

#. type: itemize
#: original_texis/edebug.texi:33
msgid "Trace slow or fast, stopping briefly at each stop point, or at each breakpoint."
msgstr "ストップポイントごとに停止したり、breakpointごとに簡単に停止して低速または高速にトレースを行う。"

#. type: itemize
#: original_texis/edebug.texi:37
msgid "Display expression results and evaluate expressions as if outside of Edebug."
msgstr "Edebug外部であるかのように式の結果を表示して、式を評価する。"

#. type: itemize
#: original_texis/edebug.texi:41
msgid "Automatically re-evaluate a list of expressions and display their results each time Edebug updates the display."
msgstr "式のリストを自動的に再評価して、Edebugがディスプレイを更新するたびにそれらの結果を表示する。"

#. type: itemize
#: original_texis/edebug.texi:44
msgid "Output trace information on function calls and returns."
msgstr "関数呼び出しとリターンのトレース情報を出力する。"

#. type: itemize
#: original_texis/edebug.texi:47
msgid "Stop when an error occurs."
msgstr "エラー発生時にストップする。"

#. type: itemize
#: original_texis/edebug.texi:50
msgid "Display a backtrace, omitting Edebug's own frames."
msgstr "Edebug自身のフレームを除外してbacktraceを表示する。"

#. type: itemize
#: original_texis/edebug.texi:53
msgid "Specify argument evaluation for macros and defining forms."
msgstr "マクロとフォームの定義で引数の評価を指定する。"

#. type: itemize
#: original_texis/edebug.texi:56
msgid "Obtain rudimentary coverage testing and frequency counts."
msgstr "初歩的なカバレッジテストと頻度数の取得。"

#. type: Plain text
#: original_texis/edebug.texi:60
msgid "The first three sections below should tell you enough about Edebug to start using it."
msgstr "以下の初めの3つのセクションは、Edebugの使用を開始するために十分な説明を行います。"

#. type: subsection
#: original_texis/edebug.texi:80 original_texis/edebug.texi:82
#: original_texis/edebug.texi:83
#, no-wrap
msgid "Using Edebug"
msgstr "Using Edebug"

#. type: menuentry
#: original_texis/edebug.texi:80
msgid "Introduction to use of Edebug."
msgstr "Edebug使用のための手引き。"

#. type: node
#: original_texis/edebug.texi:80 original_texis/edebug.texi:152
#, no-wrap
msgid "Instrumenting"
msgstr "Instrumenting"

#. type: menuentry
#: original_texis/edebug.texi:80
msgid "You must instrument your code in order to debug it with Edebug."
msgstr "Edebugでデバッグするために、コードをインストルメント(計装)しなければならないe"

#. type: menuentry
#: original_texis/edebug.texi:80
msgid "Modes: Edebug Execution Modes"
msgstr "Modes: Edebug Execution Modes"

#. type: menuentry
#: original_texis/edebug.texi:80
msgid "Execution modes, stopping more or less often."
msgstr "多かれ少なかれ、ストップする実行モード。"

#. type: subsection
#: original_texis/edebug.texi:80 original_texis/edebug.texi:328
#: original_texis/edebug.texi:329
#, no-wrap
msgid "Jumping"
msgstr "Jumping"

#. type: menuentry
#: original_texis/edebug.texi:80
msgid "Commands to jump to a specified place."
msgstr "特定の位置にジャンプするコマンド。"

#. type: menuentry
#: original_texis/edebug.texi:80
msgid "Misc: Edebug Misc"
msgstr "Misc: Edebug Misc"

#. type: menuentry
#: original_texis/edebug.texi:80
msgid "Miscellaneous commands."
msgstr "さまざまなコマンド。"

#. type: subsection
#: original_texis/edebug.texi:80 original_texis/edebug.texi:442
#: original_texis/edebug.texi:443
#, no-wrap
msgid "Breaks"
msgstr "Breaks"

#. type: menuentry
#: original_texis/edebug.texi:80
msgid "Setting breakpoints to make the program stop."
msgstr "プログラムをストップさせるbreakpointのセット。"

#. type: subsection
#: original_texis/edebug.texi:80 original_texis/edebug.texi:570
#: original_texis/edebug.texi:571
#, no-wrap
msgid "Trapping Errors"
msgstr "Trapping Errors"

#. type: menuentry
#: original_texis/edebug.texi:80
msgid "Trapping errors with Edebug."
msgstr "Edebugでのエラーのトラップ。"

#. type: menuentry
#: original_texis/edebug.texi:80
msgid "Views: Edebug Views"
msgstr "Views: Edebug Views"

#. type: menuentry
#: original_texis/edebug.texi:80
msgid "Views inside and outside of Edebug."
msgstr "Edebugの内側と外側のビュー。"

#. type: menuentry
#: original_texis/edebug.texi:80
msgid "Eval: Edebug Eval"
msgstr "Eval: Edebug Eval"

#. type: menuentry
#: original_texis/edebug.texi:80
msgid "Evaluating expressions within Edebug."
msgstr "Edebugでの式の評価。"

#. type: node
#: original_texis/edebug.texi:80 original_texis/edebug.texi:678
#, no-wrap
msgid "Eval List"
msgstr "Eval List"

#. type: menuentry
#: original_texis/edebug.texi:80
msgid "Expressions whose values are displayed each time you enter Edebug."
msgstr "Edebugにエンターするたびに値が表示される式。"

#. type: subsection
#: original_texis/edebug.texi:80 original_texis/edebug.texi:782
#: original_texis/edebug.texi:783
#, no-wrap
msgid "Printing in Edebug"
msgstr "Printing in Edebug"

#. type: menuentry
#: original_texis/edebug.texi:80
msgid "Customization of printing."
msgstr "プリントのカスタマイズ。"

#. type: subsection
#: original_texis/edebug.texi:80 original_texis/edebug.texi:834
#: original_texis/edebug.texi:835
#, no-wrap
msgid "Trace Buffer"
msgstr "Trace Buffer"

#. type: menuentry
#: original_texis/edebug.texi:80
msgid "How to produce trace output in a buffer."
msgstr "バッファー内で採れを生成する方法。"

#. type: subsection
#: original_texis/edebug.texi:80 original_texis/edebug.texi:881
#: original_texis/edebug.texi:882
#, no-wrap
msgid "Coverage Testing"
msgstr "Coverage Testing"

#. type: menuentry
#: original_texis/edebug.texi:80
msgid "How to test evaluation coverage."
msgstr "評価をカバレッジテストする方法。"

#. type: subsection
#: original_texis/edebug.texi:80 original_texis/edebug.texi:952
#: original_texis/edebug.texi:953
#, no-wrap
msgid "The Outside Context"
msgstr "The Outside Context"

#. type: menuentry
#: original_texis/edebug.texi:80
msgid "Data that Edebug saves and restores."
msgstr "Edebugが保存およびリストアするデータ。"

#. type: subsection
#: original_texis/edebug.texi:80 original_texis/edebug.texi:1089
#: original_texis/edebug.texi:1090
#, no-wrap
msgid "Edebug and Macros"
msgstr "Edebug and Macros"

#. type: menuentry
#: original_texis/edebug.texi:80
msgid "Specifying how to handle macro calls."
msgstr "マクロ呼び出しをハンドルする方法の指定。"

#. type: menuentry
#: original_texis/edebug.texi:80
msgid "Options: Edebug Options"
msgstr "Options: Edebug Options"

#. type: menuentry
#: original_texis/edebug.texi:80
msgid "Option variables for customizing Edebug."
msgstr "Edebugをカスタマイズするオプション変数。"

#. type: Plain text
#: original_texis/edebug.texi:90
msgid "To debug a Lisp program with Edebug, you must first @dfn{instrument} the Lisp code that you want to debug.  A simple way to do this is to first move point into the definition of a function or macro and then do @kbd{C-u C-M-x} (@code{eval-defun} with a prefix argument).  See @ref{Instrumenting}, for alternative ways to instrument code."
msgstr "EdebugでLispプログラムをデバッグするには、最初にデバッグしたいLispコードを@dfn{インストルメント(instrument: 計装)}しなければなりません。これを行なうもっともシンプルな方法は、関数またはマクロの定義に移動して@kbd{C-u C-M-x}(プレフィクス引数を指定した@code{eval-defun})を行います。コードをインストルメントする他の手段については、@ref{Instrumenting}を参照してください。"

#. type: Plain text
#: original_texis/edebug.texi:97
msgid "Once a function is instrumented, any call to the function activates Edebug.  Depending on which Edebug execution mode you have selected, activating Edebug may stop execution and let you step through the function, or it may update the display and continue execution while checking for debugging commands.  The default execution mode is step, which stops execution.  @xref{Edebug Execution Modes}."
msgstr "一度関数をインストルメントすると、その関数にたいする任意の呼び出しによってEdebugがアクティブになります。Edebugがアクティブになると、どのEdebug実行モードを選択したかに依存して、その関数をステップ実行できるように実行がストップされるか、ディスプレイを更新してデバッグコマンドにたいするチェックの間、実行が継続されます。デフォルトの実行モードstepで、これは実行をストップします。@ref{Edebug Execution Modes}を参照してください。"

#. type: Plain text
#: original_texis/edebug.texi:101
msgid "Within Edebug, you normally view an Emacs buffer showing the source of the Lisp code you are debugging.  This is referred to as the @dfn{source code buffer}, and it is temporarily read-only."
msgstr "Edebugでは通常は、デバッグしているLispコードをEmacsバッファーで閲覧します。これを@dfn{ソースコードバッファー(source code buffer)}と呼び、バッファーは一時的に読み取り専用になります。"

#. type: Plain text
#: original_texis/edebug.texi:105
msgid "An arrow in the left fringe indicates the line where the function is executing.  Point initially shows where within the line the function is executing, but this ceases to be true if you move point yourself."
msgstr "左フリンジの矢印は、その関数で実行されている行を示します。ポイントは最初はその関数の実行されている行にありますが、ポイントを移動するとこれは真ではなくなります。"

#. type: Plain text
#: original_texis/edebug.texi:109
msgid "If you instrument the definition of @code{fac} (shown below) and then execute @code{(fac 3)}, here is what you would normally see.  Point is at the open-parenthesis before @code{if}."
msgstr "以下は@code{fac}の定義(以下を参照)をインストルメントして@code{(fac 3)}を実行した場合に通常目にするものです。ポイントは@code{if}の前の開きカッコにあります。"

#. type: example
#: original_texis/edebug.texi:115
#, no-wrap
msgid ""
"(defun fac (n)\n"
"=>@point{}(if (< 0 n)\n"
"      (* n (fac (1- n)))\n"
"    1))\n"
msgstr ""
"(defun fac (n)\n"
"=>@point{}(if (< 0 n)\n"
"      (* n (fac (1- n)))\n"
"    1))\n"

#. type: cindex
#: original_texis/edebug.texi:117
#, no-wrap
msgid "stop points"
msgstr "stop points"

#. type: Plain text
#: original_texis/edebug.texi:123
msgid "The places within a function where Edebug can stop execution are called @dfn{stop points}.  These occur both before and after each subexpression that is a list, and also after each variable reference.  Here we use periods to show the stop points in the function @code{fac}:"
msgstr "関数内でEdebugが実行をストップできる位置のことを、@dfn{ストップポイント(stop points)}と呼びます。ストップポイントはリストであるような部分式の前後、および変数参照の後でも発生します。以下は関数@code{fac}内のストップポイントをピリオドで示したものです:"

#. type: example
#: original_texis/edebug.texi:129
#, no-wrap
msgid ""
"(defun fac (n)\n"
"  .(if .(< 0 n.).\n"
"      .(* n. .(fac .(1- n.).).).\n"
"    1).)\n"
msgstr ""
"(defun fac (n)\n"
"  .(if .(< 0 n.).\n"
"      .(* n. .(fac .(1- n.).).).\n"
"    1).)\n"

#. type: Plain text
#: original_texis/edebug.texi:136
msgid "The special commands of Edebug are available in the source code buffer in addition to the commands of Emacs Lisp mode.  For example, you can type the Edebug command @key{SPC} to execute until the next stop point.  If you type @key{SPC} once after entry to @code{fac}, here is the display you will see:"
msgstr "Emacs Lispモードのコマンドに加えて、ソースコードバッファーではEdebugのスペシャルコマンドが利用できます。たとえばEdebugコマンド@key{SPC}で次のストップポイントまで実行することができます。@code{fac}にエントリーした後に一度@key{SPC}とタイプした場合は、以下のように表示されるでしょう:"

#. type: example
#: original_texis/edebug.texi:142
#, no-wrap
msgid ""
"(defun fac (n)\n"
"=>(if @point{}(< 0 n)\n"
"      (* n (fac (1- n)))\n"
"    1))\n"
msgstr ""
"(defun fac (n)\n"
"=>(if @point{}(< 0 n)\n"
"      (* n (fac (1- n)))\n"
"    1))\n"

#. type: Plain text
#: original_texis/edebug.texi:146
msgid "When Edebug stops execution after an expression, it displays the expression's value in the echo area."
msgstr "式の後でEdebugが実行をストップしたときは、エコーエリアにその式の値が表示されます。"

#. type: Plain text
#: original_texis/edebug.texi:151
msgid "Other frequently used commands are @kbd{b} to set a breakpoint at a stop point, @kbd{g} to execute until a breakpoint is reached, and @kbd{q} to exit Edebug and return to the top-level command loop.  Type @kbd{?} to display a list of all Edebug commands."
msgstr "他にも頻繁に使用されるコマンドとして、ストップポイントにbreakpointをセットする@kbd{b}、breakpointに達するまで実行する@kbd{g}、Edebugをexitしてトップレベルのコマンドループにリターンする@kbd{q}があります。また@kbd{?}とタイプするとすべてのEdebugコマンドがリストされます。"

#. type: subsection
#: original_texis/edebug.texi:153
#, no-wrap
msgid "Instrumenting for Edebug"
msgstr "Instrumenting for Edebug"

#. type: cindex
#: original_texis/edebug.texi:154
#, no-wrap
msgid "instrumenting for Edebug"
msgstr "instrumenting for Edebug"

#. type: Plain text
#: original_texis/edebug.texi:159
msgid "In order to use Edebug to debug Lisp code, you must first @dfn{instrument} the code.  Instrumenting code inserts additional code into it, to invoke Edebug at the proper places."
msgstr "LispコードのデバッグにEdebugを使用するためには、最初にそのコードを@dfn{インストルメント(instrument: 計装)}しなければなりません。コードをインストルメントすると、適切な位置でEdebugを呼び出すために追加コードが挿入されます。"

#. type: kindex
#: original_texis/edebug.texi:160
#, no-wrap
msgid "C-M-x"
msgstr "C-M-x"

#. type: findex
#: original_texis/edebug.texi:161
#, no-wrap
msgid "eval-defun (Edebug)"
msgstr "eval-defun (Edebug)"

#. type: Plain text
#: original_texis/edebug.texi:171
msgid "When you invoke command @kbd{C-M-x} (@code{eval-defun}) with a prefix argument on a function definition, it instruments the definition before evaluating it.  (This does not modify the source code itself.)  If the variable @code{edebug-all-defs} is non-@code{nil}, that inverts the meaning of the prefix argument: in this case, @kbd{C-M-x} instruments the definition @emph{unless} it has a prefix argument.  The default value of @code{edebug-all-defs} is @code{nil}.  The command @kbd{M-x edebug-all-defs} toggles the value of the variable @code{edebug-all-defs}."
msgstr "関数定義でプレフィクス引数とともにコマンド@kbd{C-M-x} (@code{eval-defun})を呼び出すと、それを評価する前にその定義をインストルメントします(ソースコード自体は変更しない)。変数@code{edebug-all-defs}が非@code{nil}ならプレフィクス引数の意味を反転します。この場合は、@kbd{C-M-x}はプレフィクス引数が@emph{なければ}その定義をインストルメントします。@code{edebug-all-defs}のデフォルト値は@code{nil}です。コマンド@kbd{M-x edebug-all-defs}は変数@code{edebug-all-defs}の値を切り替えます。"

#. type: findex
#: original_texis/edebug.texi:172
#, no-wrap
msgid "eval-region @r{(Edebug)}"
msgstr "eval-region @r{(Edebug)}"

#. type: findex
#: original_texis/edebug.texi:173
#, no-wrap
msgid "eval-buffer @r{(Edebug)}"
msgstr "eval-buffer @r{(Edebug)}"

#. type: findex
#: original_texis/edebug.texi:174
#, no-wrap
msgid "eval-current-buffer @r{(Edebug)}"
msgstr "eval-current-buffer @r{(Edebug)}"

#. type: Plain text
#: original_texis/edebug.texi:182
msgid "If @code{edebug-all-defs} is non-@code{nil}, then the commands @code{eval-region}, @code{eval-current-buffer}, and @code{eval-buffer} also instrument any definitions they evaluate.  Similarly, @code{edebug-all-forms} controls whether @code{eval-region} should instrument @emph{any} form, even non-defining forms.  This doesn't apply to loading or evaluations in the minibuffer.  The command @kbd{M-x edebug-all-forms} toggles this option."
msgstr "@code{edebug-all-defs}が非@code{nil}なら@code{eval-region}、@code{eval-current-buffer}、@code{eval-buffer}もそれらが評価する定義をインストルメントします。同様に@code{edebug-all-forms}は、@code{eval-region}が(非定義フォームさえ含む@emph{あらゆる}フォームをインストルメントするべきかを制御します。これはミニバッファー内でのロードや評価には適用されません。コマンド@kbd{M-x edebug-all-forms}はこのオプションを切り替えます。"

#. type: findex
#: original_texis/edebug.texi:183
#, no-wrap
msgid "edebug-eval-top-level-form"
msgstr "edebug-eval-top-level-form"

#. type: findex
#: original_texis/edebug.texi:184
#, no-wrap
msgid "edebug-defun"
msgstr "edebug-defun"

#. type: Plain text
#: original_texis/edebug.texi:189
msgid "Another command, @kbd{M-x edebug-eval-top-level-form}, is available to instrument any top-level form regardless of the values of @code{edebug-all-defs} and @code{edebug-all-forms}.  @code{edebug-defun} is an alias for @code{edebug-eval-top-level-form}."
msgstr "他にもコマンド@kbd{M-x edebug-eval-top-level-form}が利用でき、これは@code{edebug-all-defs}や@code{edebug-all-forms}の値に関わらずトップレベルのすべてのフォームをインストルメントします。@code{edebug-defun}は@code{edebug-eval-top-level-form}のエイリアスです。"

#. type: Plain text
#: original_texis/edebug.texi:199
msgid "While Edebug is active, the command @kbd{I} (@code{edebug-instrument-callee}) instruments the definition of the function or macro called by the list form after point, if it is not already instrumented.  This is possible only if Edebug knows where to find the source for that function; for this reason, after loading Edebug, @code{eval-region} records the position of every definition it evaluates, even if not instrumenting it.  See also the @kbd{i} command (@pxref{Jumping}), which steps into the call after instrumenting the function."
msgstr "Edebugがアクティブのの間、コマンド@kbd{I}(@code{edebug-instrument-callee})はポイント後のリストフォームに呼び出される関数およびマクロ定義がまだインストルメントされていなければ、それらをインストルメントします。これはそのファイルのソースの場所をEdebugが知っている場合だけ可能です。この理由によりEdebugロード後は、たとえ評価する定義をインストルメントしない場合でも、@code{eval-region}は評価するすべての定義の位置を記録します。インストルメント済み関数呼び出しにステップインする@kbd{i}コマンドも参照してください(@ref{Jumping}を参照)。"

#. type: Plain text
#: original_texis/edebug.texi:206
msgid "Edebug knows how to instrument all the standard special forms, @code{interactive} forms with an expression argument, anonymous lambda expressions, and other defining forms.  However, Edebug cannot determine on its own what a user-defined macro will do with the arguments of a macro call, so you must provide that information using Edebug specifications; for details, @pxref{Edebug and Macros}."
msgstr "Edebugはすべての標準スペシャルフォーム、式引数をもつ@code{interactive}フォーム、無名ラムダ式、およびその他の定義フォームのインストルメント方法を知っています。しかしEdebugはユーザー定義マクロが引数にたいして何を行うかを判断できないので、Edebug仕様を使用してその情報を与えなければなりません。詳細は@ref{Edebug and Macros}を参照してください。"

#. type: Plain text
#: original_texis/edebug.texi:211
msgid "When Edebug is about to instrument code for the first time in a session, it runs the hook @code{edebug-setup-hook}, then sets it to @code{nil}.  You can use this to load Edebug specifications associated with a package you are using, but only when you use Edebug."
msgstr "Edebugがセッション内で最初にコードをインストルメントしようとするときは、フック@code{edebug-setup-hook}を実行してからそれに@code{nil}をセットします。使おうとしているパッケージに結びつけてEdebug仕様をロードするためにこれを使用できますが、それはEdebugを使用するときだけ機能します。"

#. type: findex
#: original_texis/edebug.texi:212
#, no-wrap
msgid "eval-expression @r{(Edebug)}"
msgstr "eval-expression @r{(Edebug)}"

#. type: Plain text
#: original_texis/edebug.texi:218
msgid "To remove instrumentation from a definition, simply re-evaluate its definition in a way that does not instrument.  There are two ways of evaluating forms that never instrument them: from a file with @code{load}, and from the minibuffer with @code{eval-expression} (@kbd{M-:})."
msgstr "定義からインストルメントを削除するには、単にインストルメントを行わない方法でその定義を再評価するだけです。フォームを絶対にインストルメントせずに評価するには2つの方法があります。それはファイルからの@code{load}による評価と、ミニバッファーからの@code{eval-expression}(@kbd{M-:})による評価です。"

#. type: Plain text
#: original_texis/edebug.texi:222
msgid "If Edebug detects a syntax error while instrumenting, it leaves point at the erroneous code and signals an @code{invalid-read-syntax} error."
msgstr "Edebugがインストルメント中にシンタックスエラー(syntax error: 構文エラー)を検知した場合は、間違ったコードの箇所にポイントを残して@code{invalid-read-syntax}エラーをシグナルします。"

#. type: Plain text
#: original_texis/edebug.texi:225
msgid "@xref{Edebug Eval}, for other evaluation functions available inside of Edebug."
msgstr "Edebug内で利用可能な他の評価関数については、@ref{Edebug Eval}を参照してください。"

#. type: subsection
#: original_texis/edebug.texi:226 original_texis/edebug.texi:227
#, no-wrap
msgid "Edebug Execution Modes"
msgstr "Edebug Execution Modes"

#. type: cindex
#: original_texis/edebug.texi:229
#, no-wrap
msgid "Edebug execution modes"
msgstr "Edebug execution modes"

#. type: Plain text
#: original_texis/edebug.texi:237
msgid "Edebug supports several execution modes for running the program you are debugging.  We call these alternatives @dfn{Edebug execution modes}; do not confuse them with major or minor modes.  The current Edebug execution mode determines how far Edebug continues execution before stopping---whether it stops at each stop point, or continues to the next breakpoint, for example---and how much Edebug displays the progress of the evaluation before it stops."
msgstr "Edebugはデバッグするプログラムの実行にたいして、いくつかの実行モードをサポートします。これらの実行モードを@dfn{Edebug実行モード(Edebug execution modes)}と呼びます。これらをメジャーモードやマイナーモードと混同しないでください。カレントのEdebug実行モードは、プログラムをストップする前にEdebugがどれだけ実行を継続するか --- たとえばストップポイントごとにストップ、あるいは次のbreakpointまで継続など --- 、およびストップする前にEdebugがどれだけ進捗を表示するかを決定します。"

#. type: Plain text
#: original_texis/edebug.texi:242
msgid "Normally, you specify the Edebug execution mode by typing a command to continue the program in a certain mode.  Here is a table of these commands; all except for @kbd{S} resume execution of the program, at least for a certain distance."
msgstr "Edebug実行モードは、通常はある特定のモードでプログラムを継続させるコマンドをタイプすることによって指定します。以下はそれらのコマンドのテーブルです。@kbd{S}以外のコマンドはプログラムの実行を再開して、少なくともある長さの間だけは実行を継続します。"

#. type: item
#: original_texis/edebug.texi:244
#, no-wrap
msgid "S"
msgstr "S"

#. type: table
#: original_texis/edebug.texi:248
msgid "Stop: don't execute any more of the program, but wait for more Edebug commands (@code{edebug-stop})."
msgstr "Stop(ストップ): これ以上プログラムを実行しないでEdebugのコマンドを待つ(@code{edebug-stop})。"

#. type: key{#1}
#: original_texis/edebug.texi:249
#, no-wrap
msgid "SPC"
msgstr "SPC"

#. type: table
#: original_texis/edebug.texi:251
msgid "Step: stop at the next stop point encountered (@code{edebug-step-mode})."
msgstr "Step(ステップ): 次のストップポイントでストップする(@code{edebug-step-mode})。"

#. type: item
#: original_texis/edebug.texi:252
#, no-wrap
msgid "n"
msgstr "n"

#. type: table
#: original_texis/edebug.texi:256
msgid "Next: stop at the next stop point encountered after an expression (@code{edebug-next-mode}).  Also see @code{edebug-forward-sexp} in @ref{Jumping}."
msgstr "Next(次へ): 式の後にある次のストップポイントでストップする(@code{edebug-next-mode})。@ref{Jumping}の@code{edebug-forward-sexp}も参照のこと。"

#. type: code{#1}
#: original_texis/edebug.texi:257 original_texis/edebug.texi:1161
#, no-wrap
msgid "t"
msgstr "t"

#. type: table
#: original_texis/edebug.texi:260
msgid "Trace: pause (normally one second) at each Edebug stop point (@code{edebug-trace-mode})."
msgstr "Trace(トレース): Edebugのストップポイントごとにpause(通常は1秒)する(@code{edebug-trace-mode})。"

#. type: item
#: original_texis/edebug.texi:261
#, no-wrap
msgid "T"
msgstr "T"

#. type: table
#: original_texis/edebug.texi:264
msgid "Rapid trace: update the display at each stop point, but don't actually pause (@code{edebug-Trace-fast-mode})."
msgstr "Rapid trace(高速でトレース):ストップポイントごとに表示を更新するが、実際にpauseはしない(@code{edebug-Trace-fast-mode})。"

#. type: item
#: original_texis/edebug.texi:265
#, no-wrap
msgid "g"
msgstr "g"

#. type: table
#: original_texis/edebug.texi:267
msgid "Go: run until the next breakpoint (@code{edebug-go-mode}).  @xref{Breakpoints}."
msgstr "Go(進む): 次のbreakpointまで実行する(@code{edebug-go-mode})。@ref{Breakpoints}を参照のこと。"

#. type: item
#: original_texis/edebug.texi:268
#, no-wrap
msgid "c"
msgstr "c"

#. type: table
#: original_texis/edebug.texi:271
msgid "Continue: pause one second at each breakpoint, and then continue (@code{edebug-continue-mode})."
msgstr "Continue(継続): breakpointごとにpauseしてから継続する(@code{edebug-continue-mode})。"

#. type: item
#: original_texis/edebug.texi:272
#, no-wrap
msgid "C"
msgstr "C"

#. type: table
#: original_texis/edebug.texi:275
msgid "Rapid continue: move point to each breakpoint, but don't pause (@code{edebug-Continue-fast-mode})."
msgstr "Rapid continue(高速で継続): ポイントを各breakpointへ移動するがpauseしない(@code{edebug-Continue-fast-mode})。"

#. type: item
#: original_texis/edebug.texi:276
#, no-wrap
msgid "G"
msgstr "G"

#. type: table
#: original_texis/edebug.texi:279
msgid "Go non-stop: ignore breakpoints (@code{edebug-Go-nonstop-mode}).  You can still stop the program by typing @kbd{S}, or any editing command."
msgstr "Go non-stop(ストップせず進む): breakpointを無視する(@code{edebug-Go-nonstop-mode})。まだ@kbd{S}やその他の編集コマンドでプログラムをストップするのは可能。"

#. type: Plain text
#: original_texis/edebug.texi:283
msgid "In general, the execution modes earlier in the above list run the program more slowly or stop sooner than the modes later in the list."
msgstr "一般的に上記リストの最初のほうにある実行モードは後のほうの実行モードに比べて、プログラムをより低速に実行するか、すぐにストップさせます。"

#. type: Plain text
#: original_texis/edebug.texi:291
msgid "When you enter a new Edebug level, Edebug will normally stop at the first instrumented function it encounters.  If you prefer to stop only at a break point, or not at all (for example, when gathering coverage data), change the value of @code{edebug-initial-mode} from its default @code{step} to @code{go}, or @code{Go-nonstop}, or one of its other values (@pxref{Edebug Options}).  You can do this readily with @kbd{C-x C-a C-m} (@code{edebug-set-initial-mode}):"
msgstr "新たなEdebugレベルにエンターしたとき、Edebugは通常は最初に遭遇したインストルメント済みの関数でストップするでしょう。breakpointでのみストップするか、(たとえばカバレッジデータ収集時など)ストップさせないようにするには、@code{edebug-initial-mode}の値をデフォルトの@code{step}から@code{go}か@code{Go-nonstop}、あるいはその他の値に変更してください(@ref{Edebug Options}を参照)。@kbd{C-x C-a C-m} (@code{edebug-set-initial-mode})でこれを容易に行うことができます:"

#. type: deffn
#: original_texis/edebug.texi:292
#, no-wrap
msgid "Command edebug-set-initial-mode"
msgstr "Command edebug-set-initial-mode"

#. type: kindex
#: original_texis/edebug.texi:293
#, no-wrap
msgid "C-x C-a C-m"
msgstr "C-x C-a C-m"

#. type: deffn
#: original_texis/edebug.texi:298
msgid "This command, bound to @kbd{C-x C-a C-m}, sets @code{edebug-initial-mode}.  It prompts you for a key to indicate the mode.  You should enter one of the eight keys listed above, which sets the corresponding mode."
msgstr "@kbd{C-x C-a C-m}にバインドされるこのコマンドは@code{edebug-initial-mode}をセットする。これはモードを示すキーの入力を求める。対応するモードをセットする上述8つのキーのいずれかを入力すること。"

#. type: Plain text
#: original_texis/edebug.texi:303
msgid "Note that you may reenter the same Edebug level several times if, for example, an instrumented function is called several times from one command."
msgstr "たとえば１つのコマンドからインストルメント済みの関数が複数回呼び出されたら、同じEdebugレベルに再エンターするかもしれないことに注意してください。"

#. type: Plain text
#: original_texis/edebug.texi:309
msgid "While executing or tracing, you can interrupt the execution by typing any Edebug command.  Edebug stops the program at the next stop point and then executes the command you typed.  For example, typing @kbd{t} during execution switches to trace mode at the next stop point.  You can use @kbd{S} to stop execution without doing anything else."
msgstr "実行中とトレース中は、任意のEdebugコマンドをタイプすることによって実行をインタラプト(interrupt: 中断、割り込み)できます。Edebugは次のストップポイントでプログラムをストップしてからタイプされたコマンドを実行します。たとえば実行中に@kbd{t}をタイプすると、次のストップポイントでトレースモードに切り替えます。@kbd{S}を使用すれば他に何も行わずに実行をストップできます。"

#. type: Plain text
#: original_texis/edebug.texi:314
msgid "If your function happens to read input, a character you type intending to interrupt execution may be read by the function instead.  You can avoid such unintended results by paying attention to when your program wants input."
msgstr "関数でたまたま読み取り入力が発生した場合には、実行のインタラプトを意図してタイプされた文字は、かわりにその関数により読み取られます。そのプログラムが入力を欲するタイミングに注意を払うことで、そのような意図せぬ結果を避けることができます。"

#. type: cindex
#: original_texis/edebug.texi:315
#, no-wrap
msgid "keyboard macros (Edebug)"
msgstr "keyboard macros (Edebug)"

#. type: Plain text
#: original_texis/edebug.texi:322
msgid "Keyboard macros containing the commands in this section do not completely work: exiting from Edebug, to resume the program, loses track of the keyboard macro.  This is not easy to fix.  Also, defining or executing a keyboard macro outside of Edebug does not affect commands inside Edebug.  This is usually an advantage.  See also the @code{edebug-continue-kbd-macro} option in @ref{Edebug Options}."
msgstr "このセクションのコマンドを含むキーボードマクロは、完全には機能しません。プログラムを再開するためにEdebugからexitすると、キーボードマクロの追跡記録は失われます。これに対処するのは簡単ではありません。またEdebug外部でキーボードマクロを定義または実行しても、Edebug内部のコマンドに影響しません。通常これは利点です。@ref{Edebug Options}内の@code{edebug-continue-kbd-macro}オプションも参照してください。"

#. type: defopt
#: original_texis/edebug.texi:323
#, no-wrap
msgid "edebug-sit-for-seconds"
msgstr "edebug-sit-for-seconds"

#. type: defopt
#: original_texis/edebug.texi:326
msgid "This option specifies how many seconds to wait between execution steps in trace mode or continue mode.  The default is 1 second."
msgstr "このオプションはtraceモードとcontinueモードで実行ステップの間を何秒待つか指定する。デフォルトは1秒。"

#. type: Plain text
#: original_texis/edebug.texi:336
msgid "The commands described in this section execute until they reach a specified location.  All except @kbd{i} make a temporary breakpoint to establish the place to stop, then switch to go mode.  Any other breakpoint reached before the intended stop point will also stop execution.  @xref{Breakpoints}, for the details on breakpoints."
msgstr "このセクションで説明するコマンドは、指定された場所に達するまで実行を続けます。@kbd{i}を除くすべてのコマンドは、ストップ場所を確立するために一時的なbreakpointを作成してからgoモードにスイッチします。意図されたストップポイントの前にある他のストップポイントに達した場合にも実行はストップします。breakpointの詳細は、@ref{Breakpoints}を参照してください。"

#. type: Plain text
#: original_texis/edebug.texi:340
msgid "These commands may fail to work as expected in case of nonlocal exit, as that can bypass the temporary breakpoint where you expected the program to stop."
msgstr "以下のコマンドでは、非ローカルexitはプログラムのストップを望む一時的なbreakpointをバイパスできるので、期待どおり機能しないかもしれません。"

#. type: item
#: original_texis/edebug.texi:342
#, no-wrap
msgid "h"
msgstr "h"

#. type: table
#: original_texis/edebug.texi:344
msgid "Proceed to the stop point near where point is (@code{edebug-goto-here})."
msgstr "ポイントがある場所の近くのストップポイントへ実行を進める(@code{edebug-goto-here})。"

#. type: item
#: original_texis/edebug.texi:345
#, no-wrap
msgid "f"
msgstr "f"

#. type: table
#: original_texis/edebug.texi:348
msgid "Run the program for one expression (@code{edebug-forward-sexp})."
msgstr "プログラムの式を1つ実行する(@code{edebug-forward-sexp})。"

#. type: item
#: original_texis/edebug.texi:349
#, no-wrap
msgid "o"
msgstr "o"

#. type: table
#: original_texis/edebug.texi:351
msgid "Run the program until the end of the containing sexp (@code{edebug-step-out})."
msgstr "sexpを含む終端までプログラムを実行する(@code{edebug-step-out})。"

#. type: item
#: original_texis/edebug.texi:352
#, no-wrap
msgid "i"
msgstr "i"

#. type: table
#: original_texis/edebug.texi:355
msgid "Step into the function or macro called by the form after point (@code{edebug-step-in})."
msgstr "ポイントの後のフォームから呼び出された関数かマクロにステップインする(@code{edebug-step-in})。"

#. type: Plain text
#: original_texis/edebug.texi:359
msgid "The @kbd{h} command proceeds to the stop point at or after the current location of point, using a temporary breakpoint."
msgstr "@kbd{h}コマンドは一時的なbreakpointを使用してポイントのカレント位置、またはその後のストップポイントまで処理を進めます。"

#. type: Plain text
#: original_texis/edebug.texi:364
msgid "The @kbd{f} command runs the program forward over one expression.  More precisely, it sets a temporary breakpoint at the position that @code{forward-sexp} would reach, then executes in go mode so that the program will stop at breakpoints."
msgstr "@kbd{f}コマンドは式を1つ飛び越してプログラムを実行します。より正確には@code{forward-sexp}により到達できる位置に一時的なbreakpointをセットしてからgoモードで実行するので、プログラムはそのbreakpointでストップすることになります。"

#. type: Plain text
#: original_texis/edebug.texi:369
msgid "With a prefix argument @var{n}, the temporary breakpoint is placed @var{n} sexps beyond point.  If the containing list ends before @var{n} more elements, then the place to stop is after the containing expression."
msgstr "プレフィクス引数@var{n}とともに使用すると、ポイントから@var{n}個のsexp(s-expression: S式)を超えた場所に一時的なbreakpointをセットします。ポイントを含むリストが@var{n}より少ない要素で終わるような場合には、ストップ箇所はポイントが含まれる式の後になります。"

#. type: Plain text
#: original_texis/edebug.texi:373
msgid "You must check that the position @code{forward-sexp} finds is a place that the program will really get to.  In @code{cond}, for example, this may not be true."
msgstr "@code{forward-sexp}が見つける位置が、プログラムを実際にストップさせたい位置なのかチェックしなければなりません。たとえば@code{cond}内ではこれは正しくないかもしれません。"

#. type: Plain text
#: original_texis/edebug.texi:378
msgid "For flexibility, the @kbd{f} command does @code{forward-sexp} starting at point, rather than at the stop point.  If you want to execute one expression @emph{from the current stop point}, first type @kbd{w} (@code{edebug-where}) to move point there, and then type @kbd{f}."
msgstr "@kbd{f}コマンドは柔軟性を与えるために、@code{forward-sexp}をストップポイントではなくポイント位置から開始します。@emph{カレントのストップポイント}から1つの式を実行したい場合には、まずそこにポイントを移動するために@kbd{w}(@code{edebug-where})をタイプして、それから@kbd{f}をタイプしてください。"

#. type: Plain text
#: original_texis/edebug.texi:386
msgid "The @kbd{o} command continues out of an expression.  It places a temporary breakpoint at the end of the sexp containing point.  If the containing sexp is a function definition itself, @kbd{o} continues until just before the last sexp in the definition.  If that is where you are now, it returns from the function and then stops.  In other words, this command does not exit the currently executing function unless you are positioned after the last sexp."
msgstr "@kbd{o}コマンドは、式の外側で実行を継続します。これはポイントを含む式の最後に一時的なbreakpointを配置します。ポイントを含むsexpが関数定義なら@kbd{o}はその定義内の最後のsexpの直前まで実行を継続します。もし定義内の最後のsexpの直前にポイントがある場合は、その関数からリターンしてからストップします。言い換えるとこのコマンドは最後のsexpの後にポイントがなければ、カレントで実行中の関数からexitしません。"

#. type: Plain text
#: original_texis/edebug.texi:392
msgid "The @kbd{i} command steps into the function or macro called by the list form after point, and stops at its first stop point.  Note that the form need not be the one about to be evaluated.  But if the form is a function call about to be evaluated, remember to use this command before any of the arguments are evaluated, since otherwise it will be too late."
msgstr "@kbd{i}コマンドは、ポイントの後のリストフォームに呼び出された関数やマクロにステップインします。そのフォームは評価されようとしているものの1つである必要はないことに注意してください。しかしそのフォームが評価されようとしている関数呼び出しなら、引数が何も評価されないうちにこのコマンドを使用しないと、遅すぎることを覚えておいてください。"

#. type: Plain text
#: original_texis/edebug.texi:397
msgid "The @kbd{i} command instruments the function or macro it's supposed to step into, if it isn't instrumented already.  This is convenient, but keep in mind that the function or macro remains instrumented unless you explicitly arrange to deinstrument it."
msgstr "@kbd{i}コマンドはステップインしようとしている関数やマクロがまだインストルメントされていなければ、それらをインストルメントします。これは便利かもしれませんが、それらを明示的に非インストルメントしなければ、その関数やマクロはインストルメントされたままになることを覚えておいてください。"

#. type: node
#: original_texis/edebug.texi:398
#, no-wrap
msgid "Edebug Misc"
msgstr "Edebug Misc"

#. type: subsection
#: original_texis/edebug.texi:399
#, no-wrap
msgid "Miscellaneous Edebug Commands"
msgstr "Miscellaneous Edebug Commands"

#. type: Plain text
#: original_texis/edebug.texi:402
msgid "Some miscellaneous Edebug commands are described here."
msgstr "ここではその他のEdebugコマンドを説明します。"

#. type: item
#: original_texis/edebug.texi:404
#, no-wrap
msgid "?"
msgstr "?"

#. type: table
#: original_texis/edebug.texi:406
msgid "Display the help message for Edebug (@code{edebug-help})."
msgstr "Edebugのヘルプメッセージを表示する(@code{edebug-help})。"

#. type: item
#: original_texis/edebug.texi:407
#, no-wrap
msgid "C-]"
msgstr "C-]"

#. type: table
#: original_texis/edebug.texi:410
msgid "Abort one level back to the previous command level (@code{abort-recursive-edit})."
msgstr "1レベルを中断して以前のコマンドレベルへ戻る(@code{abort-recursive-edit})。"

#. type: item
#: original_texis/edebug.texi:411
#, no-wrap
msgid "q"
msgstr "q"

#. type: table
#: original_texis/edebug.texi:417
msgid "Return to the top level editor command loop (@code{top-level}).  This exits all recursive editing levels, including all levels of Edebug activity.  However, instrumented code protected with @code{unwind-protect} or @code{condition-case} forms may resume debugging."
msgstr "エディターのトップレベルのコマンドループにリターンする(@code{top-level})。これはすべてのレベルのEdebugアクティビティを含むすべての再帰編集レベルをexitする。しかしフォーム@code{unwind-protect}か@code{condition-case}で保護されたインストルメント済みのコードはデバッグを再開するかもしれない。"

#. type: item
#: original_texis/edebug.texi:418
#, no-wrap
msgid "Q"
msgstr "Q"

#. type: table
#: original_texis/edebug.texi:421
msgid "Like @kbd{q}, but don't stop even for protected code (@code{edebug-top-level-nonstop})."
msgstr "@kbd{q}と同様だが、保護されたコードでもストップしない(@code{edebug-top-level-nonstop})。"

#. type: item
#: original_texis/edebug.texi:422
#, no-wrap
msgid "r"
msgstr "r"

#. type: table
#: original_texis/edebug.texi:425
msgid "Redisplay the most recently known expression result in the echo area (@code{edebug-previous-result})."
msgstr "エコーエリアにもっとも最近の既知のコマンドを再表示する(@code{edebug-previous-result})。"

#. type: item
#: original_texis/edebug.texi:426
#, no-wrap
msgid "d"
msgstr "d"

#. type: table
#: original_texis/edebug.texi:429
msgid "Display a backtrace, excluding Edebug's own functions for clarity (@code{edebug-backtrace})."
msgstr "backtraceを表示するが、明確であるようにEdebug自身の関数は除外される(@code{edebug-backtrace})。"

#. type: table
#: original_texis/edebug.texi:432
msgid "You cannot use debugger commands in the backtrace buffer in Edebug as you would in the standard debugger."
msgstr "Edebugのbacktraceバッファーでは、標準デバッガ内のようにバッガコマンドは使用できない。"

#. type: table
#: original_texis/edebug.texi:435
msgid "The backtrace buffer is killed automatically when you continue execution."
msgstr "実行を継続したときにbacktraceバッファーは自動的にkillされる。"

#. type: Plain text
#: original_texis/edebug.texi:441
msgid "You can invoke commands from Edebug that activate Edebug again recursively.  Whenever Edebug is active, you can quit to the top level with @kbd{q} or abort one recursive edit level with @kbd{C-]}.  You can display a backtrace of all the pending evaluations with @kbd{d}."
msgstr "Edebugから再帰的にEdebugをアクティブにするコマンドを呼び出すことができます。Edebugがアクティブなときは常に@kbd{q}によトップレベルの終了、または@kbd{C-]}による再帰編集1レベルの中断ができます。@kbd{d}によってすべての未解決な評価のbacktraceを表示できます。"

#. type: Plain text
#: original_texis/edebug.texi:448
msgid "Edebug's step mode stops execution when the next stop point is reached.  There are three other ways to stop Edebug execution once it has started: breakpoints, the global break condition, and source breakpoints."
msgstr "Edebugのstepモードは、次のストップポイントに達したときに実行をストップします。一度開始されたEdebugの実行をストップするには、他に3つの方法があります。それはbreakpoint、グローバルbreak条件、およびソースbreakpointです。"

#. type: node
#: original_texis/edebug.texi:453 original_texis/edebug.texi:455
#, no-wrap
msgid "Breakpoints"
msgstr "Breakpoints"

#. type: menuentry
#: original_texis/edebug.texi:453
msgid "Breakpoints at stop points."
msgstr "ストップポイントのbreakpoint。"

#. type: subsubsection
#: original_texis/edebug.texi:453 original_texis/edebug.texi:518
#: original_texis/edebug.texi:519
#, no-wrap
msgid "Global Break Condition"
msgstr "Global Break Condition"

#. type: menuentry
#: original_texis/edebug.texi:453
msgid "Breaking on an event."
msgstr "イベントによるbreak。"

#. type: subsubsection
#: original_texis/edebug.texi:453 original_texis/edebug.texi:541
#: original_texis/edebug.texi:542
#, no-wrap
msgid "Source Breakpoints"
msgstr "Source Breakpoints"

#. type: menuentry
#: original_texis/edebug.texi:453
msgid "Embedding breakpoints in source code."
msgstr "ソースコードに埋め込まれたbreakpoint。"

#. type: subsubsection
#: original_texis/edebug.texi:456
#, no-wrap
msgid "Edebug Breakpoints"
msgstr "Edebug Breakpoints"

#. type: cindex
#: original_texis/edebug.texi:458
#, no-wrap
msgid "breakpoints (Edebug)"
msgstr "breakpoints (Edebug)"

#. type: Plain text
#: original_texis/edebug.texi:465
msgid "While using Edebug, you can specify @dfn{breakpoints} in the program you are testing: these are places where execution should stop.  You can set a breakpoint at any stop point, as defined in @ref{Using Edebug}.  For setting and unsetting breakpoints, the stop point that is affected is the first one at or after point in the source code buffer.  Here are the Edebug commands for breakpoints:"
msgstr "Edebugを使用しているときは、テスト中のプログラム内に@dfn{breakpoint}を指定できます。breakpointとは実行がストップされる場所のことです。@ref{Using Edebug}で定義されている任意のストップポイントにbreakpointをセットできます。breakpointのセットと解除で影響を受けるストップポイントは、ソースコードバッファー内でポイント位置、またはポイント位置の後の最初のストップポイントです。以下はEdebugのbreakpoint用のコマンドです:"

#. type: item
#: original_texis/edebug.texi:467
#, no-wrap
msgid "b"
msgstr "b"

#. type: table
#: original_texis/edebug.texi:472
msgid "Set a breakpoint at the stop point at or after point (@code{edebug-set-breakpoint}).  If you use a prefix argument, the breakpoint is temporary---it turns off the first time it stops the program."
msgstr "ポイント位置、またはポイント位置の後のストップポイントにbreakpointをセットする(@code{edebug-set-breakpoint})。プレフィクス引数を使用すると、それは一時的なbreakpointとなり、プログラムが最初にそこで停止したときに解除される。"

#. type: item
#: original_texis/edebug.texi:473
#, no-wrap
msgid "u"
msgstr "u"

#. type: table
#: original_texis/edebug.texi:476
msgid "Unset the breakpoint (if any) at the stop point at or after point (@code{edebug-unset-breakpoint})."
msgstr "(もしあれば)ポイント位置、またはポイント位置の後のストップポイントにあるbreakpointを解除(unset)する(@code{edebug-unset-breakpoint})。"

#. type: item
#: original_texis/edebug.texi:477
#, no-wrap
msgid "x @var{condition} @key{RET}"
msgstr "x @var{condition} @key{RET}"

#. type: table
#: original_texis/edebug.texi:482
msgid "Set a conditional breakpoint which stops the program only if evaluating @var{condition} produces a non-@code{nil} value (@code{edebug-set-conditional-breakpoint}).  With a prefix argument, the breakpoint is temporary."
msgstr "@var{condition}を評価して非@code{nil}値になる場合だけプログラムをストップする条件付きbreakpointをセットする(@code{edebug-set-conditional-breakpoint})。プレフィクス引数を指定すると一時的なbreakpointになる。"

#. type: item
#: original_texis/edebug.texi:483
#, no-wrap
msgid "B"
msgstr "B"

#. type: table
#: original_texis/edebug.texi:486
msgid "Move point to the next breakpoint in the current definition (@code{edebug-next-breakpoint})."
msgstr "カレント定義内の次のbreakpointにポイントを移動する(@code{edebug-next-breakpoint})。"

#. type: Plain text
#: original_texis/edebug.texi:492
msgid "While in Edebug, you can set a breakpoint with @kbd{b} and unset one with @kbd{u}.  First move point to the Edebug stop point of your choice, then type @kbd{b} or @kbd{u} to set or unset a breakpoint there.  Unsetting a breakpoint where none has been set has no effect."
msgstr "Edebug内では@kbd{b}でbreakpointをセットして、@kbd{u}でそれを解除できます。最初に望ましいストップポイントにポイントを移動してから、そこにbreakpointをセットまたは解除するために@kbd{b}または@kbd{u}をタイプします。breakpointがない場所でbreakpointを解除しても影響はありません。"

#. type: Plain text
#: original_texis/edebug.texi:495
msgid "Re-evaluating or reinstrumenting a definition removes all of its previous breakpoints."
msgstr "ある定義の再評価や再インストルメントを行うと、以前のbreakpointはすべて削除されます。"

#. type: Plain text
#: original_texis/edebug.texi:503
msgid "A @dfn{conditional breakpoint} tests a condition each time the program gets there.  Any errors that occur as a result of evaluating the condition are ignored, as if the result were @code{nil}.  To set a conditional breakpoint, use @kbd{x}, and specify the condition expression in the minibuffer.  Setting a conditional breakpoint at a stop point that has a previously established conditional breakpoint puts the previous condition expression in the minibuffer so you can edit it."
msgstr "@dfn{条件付きbreakpoint(conditional breakpoint)}は、プログラムがそこに達するたびに条件をテストします。条件を評価した結果エラーが発生した場合、エラーは無視されて結果は@code{nil}になります。条件付きbreakpointをセットするには@kbd{x}を使用して、ミニバッファーで条件式を指定します。以前にセットされた条件付きbreakpointがあるストップポイントに条件付きbreakpointをセットすると、以前の条件式がミニバッファーに配置されるのでそれを編集できます。"

#. type: Plain text
#: original_texis/edebug.texi:508
msgid "You can make a conditional or unconditional breakpoint @dfn{temporary} by using a prefix argument with the command to set the breakpoint.  When a temporary breakpoint stops the program, it is automatically unset."
msgstr "プレフィクス引数を指定してbreakpointをセットするコマンドを使用することによって、@dfn{一時的}な条件付きbreakpoint、および無条件のbreakpointを作成できます。一時的なbreakpointによりプログラムがストップしたとき、そのbreakpointは自動的に解除されます。"

#. type: Plain text
#: original_texis/edebug.texi:511
msgid "Edebug always stops or pauses at a breakpoint, except when the Edebug mode is Go-nonstop.  In that mode, it ignores breakpoints entirely."
msgstr "Go-nonstopモードを除き、Edebugは常にbreakpointでストップ、またはpauseします。Go-nonstopモードではbreakpointは完全に無視されます。"

#. type: Plain text
#: original_texis/edebug.texi:517
msgid "To find out where your breakpoints are, use the @kbd{B} command, which moves point to the next breakpoint following point, within the same function, or to the first breakpoint if there are no following breakpoints.  This command does not continue execution---it just moves point in the buffer."
msgstr "breakpointがどこにあるか探すには@kbd{B}コマンドを使用します。このコマンドは同じ関数内からポイント以降にある次のbreakpoint(ポイント以降にbreakpointが存在しなければ最初のbreakpoint)にポイントを移動します。このコマンドは実行を継続せずに、単にバッファー内のポイントを移動します。"

#. type: cindex
#: original_texis/edebug.texi:521
#, no-wrap
msgid "stopping on events"
msgstr "stopping on events"

#. type: cindex
#: original_texis/edebug.texi:522
#, no-wrap
msgid "global break condition"
msgstr "global break condition"

#. type: Plain text
#: original_texis/edebug.texi:529
msgid "A @dfn{global break condition} stops execution when a specified condition is satisfied, no matter where that may occur.  Edebug evaluates the global break condition at every stop point; if it evaluates to a non-@code{nil} value, then execution stops or pauses depending on the execution mode, as if a breakpoint had been hit.  If evaluating the condition gets an error, execution does not stop."
msgstr "@dfn{グローバルbreak条件(global break condition)}は指定された条件が満たされたとき、それがどこで発生したかによらず、実行をストップします。Edebugは、すべてのストップポイントでグローバルbreak条件を評価します。これが非@code{nil}値に評価された場合は、あたかもそのストップポイントにbreakpointがあったかのように、実行をストップまたはpauseします(実行モードによる)。条件の評価でエラーを取得した場合は、実行をストップしません。"

#. type: findex
#: original_texis/edebug.texi:530
#, no-wrap
msgid "edebug-set-global-break-condition"
msgstr "edebug-set-global-break-condition"

#. type: Plain text
#: original_texis/edebug.texi:536
msgid "The condition expression is stored in @code{edebug-global-break-condition}.  You can specify a new expression using the @kbd{X} command from the source code buffer while Edebug is active, or using @kbd{C-x X X} from any buffer at any time, as long as Edebug is loaded (@code{edebug-set-global-break-condition})."
msgstr "条件式は@code{edebug-global-break-condition}に格納されます。Edebugがアクティブなときにソースバッファーから@kbd{X}コマンドを使用するか、Edebugがロードされている間は任意のバッファーから任意のタイミングで@kbd{C-x X X}(@code{edebug-set-global-break-condition})を使用して新たな式を指定できます。"

#. type: Plain text
#: original_texis/edebug.texi:540
msgid "The global break condition is the simplest way to find where in your code some event occurs, but it makes code run much more slowly.  So you should reset the condition to @code{nil} when not using it."
msgstr "グローバルbreak条件は、コード内のどこでイベントが発生したかを見つけるもっともシンプルな方法ですが、コードの実行は遅くなります。そのため使用しないときは条件を@code{nil}にリセットするべきです。"

#. type: findex
#: original_texis/edebug.texi:544
#, no-wrap
msgid "edebug"
msgstr "edebug"

#. type: cindex
#: original_texis/edebug.texi:545
#, no-wrap
msgid "source breakpoints"
msgstr "source breakpoints"

#. type: Plain text
#: original_texis/edebug.texi:553
msgid "All breakpoints in a definition are forgotten each time you reinstrument it.  If you wish to make a breakpoint that won't be forgotten, you can write a @dfn{source breakpoint}, which is simply a call to the function @code{edebug} in your source code.  You can, of course, make such a call conditional.  For example, in the @code{fac} function, you can insert the first line as shown below, to stop when the argument reaches zero:"
msgstr "定義内のすべてのbreakpointは、それをインストルメントするたびに失われます。breakpointが失われないようにしたければソースコード内で単に関数@code{edebug}を呼び出す@dfn{ソースbreakpoint(source breakpoint)}を記述できます。もちろんそのような呼び出しを条件付きすることにもできます。たとえば@code{fac}関数内に以下のような行を1行目に挿入して、引数が0になったときストップさせることができます:"

#. type: example
#: original_texis/edebug.texi:560
#, no-wrap
msgid ""
"(defun fac (n)\n"
"  (if (= n 0) (edebug))\n"
"  (if (< 0 n)\n"
"      (* n (fac (1- n)))\n"
"    1))\n"
msgstr ""
"(defun fac (n)\n"
"  (if (= n 0) (edebug))\n"
"  (if (< 0 n)\n"
"      (* n (fac (1- n)))\n"
"    1))\n"

#. type: Plain text
#: original_texis/edebug.texi:565
msgid "When the @code{fac} definition is instrumented and the function is called, the call to @code{edebug} acts as a breakpoint.  Depending on the execution mode, Edebug stops or pauses there."
msgstr "@code{fac}の定義がインストルメントされて呼び出されたとき、@code{edebug}呼び出しはbreakpointとして振る舞います。実行モードに応じてEdebugはそこでストップまたはpauseします。"

#. type: Plain text
#: original_texis/edebug.texi:569
msgid "If no instrumented code is being executed when @code{edebug} is called, that function calls @code{debug}."
msgstr "@code{edebug}が呼び出されたときにインストルメント済みのコードが実行されていなければ、この関数は@code{debug}を呼び出します。"

#. type: Plain text
#: original_texis/edebug.texi:578
msgid "Emacs normally displays an error message when an error is signaled and not handled with @code{condition-case}.  While Edebug is active and executing instrumented code, it normally responds to all unhandled errors.  You can customize this with the options @code{edebug-on-error} and @code{edebug-on-quit}; see @ref{Edebug Options}."
msgstr "エラーがシグナルされて、それが@code{condition-case}でハンドルされていないとき、Emacsは通常はエラーメッセージを表示します。Edebugがアクティブでインストルメント済みコードの実行中は、ハンドルされていないエラーには通常はEdebugが対応します。オプション@code{edebug-on-error}と@code{edebug-on-quit}でこれをカスタマイズできます。@ref{Edebug Options}を参照してください。"

#. type: Plain text
#: original_texis/edebug.texi:585
msgid "When Edebug responds to an error, it shows the last stop point encountered before the error.  This may be the location of a call to a function which was not instrumented, and within which the error actually occurred.  For an unbound variable error, the last known stop point might be quite distant from the offending variable reference.  In that case, you might want to display a full backtrace (@pxref{Edebug Misc})."
msgstr "Edebugがエラーに対応するときは、エラー発生箇所の前にある最後のストップポイントを表示します。この場所はインストルメントされていない関数の呼び出しであったり、その関数内で実際にエラーが発生したのかもしれません。バインドされていない変数に関するエラーの場合は、最後の既知のストップポイントは、その不正な変数参照から遠く離れた場所にあるかもしれません。そのような場合には完全なbacktraceを表示したいと思うでしょう(@ref{Edebug Misc}を参照)。"

#. type: Plain text
#: original_texis/edebug.texi:591
msgid "If you change @code{debug-on-error} or @code{debug-on-quit} while Edebug is active, these changes will be forgotten when Edebug becomes inactive.  Furthermore, during Edebug's recursive edit, these variables are bound to the values they had outside of Edebug."
msgstr "Edebugがアクティブの間に@code{debug-on-error}か@code{debug-on-quit}を変更すると、それらの変更はEdebugが非アクティブになったとき失われます。さらにEdebugの再帰編集の間、これらの変数はEdebugの外部でもっていた値にバインドされます。"

#. type: subsection
#: original_texis/edebug.texi:592 original_texis/edebug.texi:593
#, no-wrap
msgid "Edebug Views"
msgstr "Edebug Views"

#. type: Plain text
#: original_texis/edebug.texi:599
msgid "These Edebug commands let you view aspects of the buffer and window status as they were before entry to Edebug.  The outside window configuration is the collection of windows and contents that were in effect outside of Edebug."
msgstr "これらのEdebugコマンドは、Edebugにエントリーする前のバッファーの外観とウィンドウの状態を調べるコマンドです。外部のウィンドウ構成はウィンドウのコレクションとその内容であり、それらは実際にはEdebugの外部にあります。"

#. type: item
#: original_texis/edebug.texi:601
#, no-wrap
msgid "v"
msgstr "v"

#. type: table
#: original_texis/edebug.texi:604
msgid "Switch to viewing the outside window configuration (@code{edebug-view-outside}).  Type @kbd{C-x X w} to return to Edebug."
msgstr "外部のウィンドウ構成ビューに切り替える(@code{edebug-view-outside})。Edebugにリターンするには@kbd{C-x X w}をタイプする。"

#. type: item
#: original_texis/edebug.texi:605
#, no-wrap
msgid "p"
msgstr "p"

#. type: table
#: original_texis/edebug.texi:610
msgid "Temporarily display the outside current buffer with point at its outside position (@code{edebug-bounce-point}), pausing for one second before returning to Edebug.  With a prefix argument @var{n}, pause for @var{n} seconds instead."
msgstr "一時的に外部のカレントバッファーを表示して、ポイントもその外部の位置になる(@code{edebug-bounce-point})。Edebugにリターンする前に1秒 pauseする。プレフィクス引数@var{n}を指定すると、かわりに@var{n}秒 pauseする。"

#. type: item
#: original_texis/edebug.texi:611
#, no-wrap
msgid "w"
msgstr "w"

#. type: table
#: original_texis/edebug.texi:614
msgid "Move point back to the current stop point in the source code buffer (@code{edebug-where})."
msgstr "ソースコードバッファー内のカレントストップポイントにポイントを戻す(@code{edebug-where})。"

#. type: table
#: original_texis/edebug.texi:618
msgid "If you use this command in a different window displaying the same buffer, that window will be used instead to display the current definition in the future."
msgstr "このコマンドを同じバッファーを表示する異なるウィンドウで使用すると、そのウィンドウは将来カレント定義を表示するために代用される。"

#. type: item
#: original_texis/edebug.texi:619
#, no-wrap
msgid "W"
msgstr "W"

#. type: table
#: original_texis/edebug.texi:623
msgid "Toggle whether Edebug saves and restores the outside window configuration (@code{edebug-toggle-save-windows})."
msgstr "Edebugが外部のウィンドウ構成の保存とリストアを行うかどうかを切り替える(@code{edebug-toggle-save-windows})。"

#. type: table
#: original_texis/edebug.texi:627
msgid "With a prefix argument, @code{W} only toggles saving and restoring of the selected window.  To specify a window that is not displaying the source code buffer, you must use @kbd{C-x X W} from the global keymap."
msgstr "プレフィクス引数を指定すると、@code{W}は選択されたウィンドウの保存とリストアだけを切り替える。ソースコードバッファーを表示していないウィンドウを指定するには、グローバルキーマップから@kbd{C-x X W}を使用しなければならない。"

#. type: Plain text
#: original_texis/edebug.texi:632
msgid "You can view the outside window configuration with @kbd{v} or just bounce to the point in the current buffer with @kbd{p}, even if it is not normally displayed."
msgstr "@kbd{v}、または単に@kbd{p}でカレントバッファーにポイントを反跳させれば、たとえ通常は表示されないウィンドウでも外部のウィンドウ構成を調べることができます。"

#. type: Plain text
#: original_texis/edebug.texi:637
msgid "After moving point, you may wish to jump back to the stop point.  You can do that with @kbd{w} from a source code buffer.  You can jump back to the stop point in the source code buffer from any buffer using @kbd{C-x X w}."
msgstr "ポイントを移動した後にストップポイントに戻りたいときがあるかもしれません。これはソースコードバッファーから@kbd{w}で行うことができます。どのバッファーにいても@kbd{C-x X w}を使用すれば、ソースコードバッファー内のストップポイントに戻ることができます。"

#. type: Plain text
#: original_texis/edebug.texi:645
msgid "Each time you use @kbd{W} to turn saving @emph{off}, Edebug forgets the saved outside window configuration---so that even if you turn saving back @emph{on}, the current window configuration remains unchanged when you next exit Edebug (by continuing the program).  However, the automatic redisplay of @file{*edebug*} and @file{*edebug-trace*} may conflict with the buffers you wish to see unless you have enough windows open."
msgstr "保存を@emph{オフ}にするために@kbd{W}を使用するたびに、Edebugは外部のウィンドウ構成を忘れます。そのためたとえ保存を@emph{オン}に戻しても、(プログラムを実行することによって)次にEdebugをexitしたとき、カレントウィンドウ構成は変更されないまま残ります。しかし十分な数のウィンドウをオープンしていない場合には、@file{*edebug*}と@file{*edebug-trace*}の再表示があなたが見たいバッファーと競合するかもしれません。"

#. type: node
#: original_texis/edebug.texi:646
#, no-wrap
msgid "Edebug Eval"
msgstr "Edebug Eval"

#. type: subsection
#: original_texis/edebug.texi:647
#, no-wrap
msgid "Evaluation"
msgstr "Evaluation"

#. type: Plain text
#: original_texis/edebug.texi:655
msgid "While within Edebug, you can evaluate expressions as if Edebug were not running.  Edebug tries to be invisible to the expression's evaluation and printing.  Evaluation of expressions that cause side effects will work as expected, except for changes to data that Edebug explicitly saves and restores.  @xref{The Outside Context}, for details on this process."
msgstr "Edebug内では、まるでEdebugが実行されていないかのように式を評価できます。式の評価とプリントに際して、Edebugは不可視になるよう試みます。副作用をもつ式の評価は、Edebugが明示的に保存とリストアを行うデータへの変更を除いて期待したとおり機能するでしょう。このプロセスの詳細は、@ref{The Outside Context}を参照してください。"

#. type: item
#: original_texis/edebug.texi:657
#, no-wrap
msgid "e @var{exp} @key{RET}"
msgstr "e @var{exp} @key{RET}"

#. type: table
#: original_texis/edebug.texi:661
msgid "Evaluate expression @var{exp} in the context outside of Edebug (@code{edebug-eval-expression}).  That is, Edebug tries to minimize its interference with the evaluation."
msgstr "Edebugのコンテキスト外で式@var{exp}を評価する(@code{edebug-eval-expression})。つまり、Edebugはその式への干渉を最小限にしようと努める。"

#. type: item
#: original_texis/edebug.texi:662
#, no-wrap
msgid "M-: @var{exp} @key{RET}"
msgstr "M-: @var{exp} @key{RET}"

#. type: table
#: original_texis/edebug.texi:665
msgid "Evaluate expression @var{exp} in the context of Edebug itself (@code{eval-expression})."
msgstr "Edebug自身のコンテキスト内で式@var{exp}を評価する(@code{eval-expression})。"

#. type: item
#: original_texis/edebug.texi:666 original_texis/edebug.texi:701
#, no-wrap
msgid "C-x C-e"
msgstr "C-x C-e"

#. type: table
#: original_texis/edebug.texi:669 original_texis/edebug.texi:704
msgid "Evaluate the expression before point, in the context outside of Edebug (@code{edebug-eval-last-sexp})."
msgstr "Edebugのコンテキスト外でポイントの前の式を評価する(@code{edebug-eval-last-sexp})。"

#. type: cindex
#: original_texis/edebug.texi:671
#, no-wrap
msgid "lexical binding (Edebug)"
msgstr "lexical binding (Edebug)"

#. type: Plain text
#: original_texis/edebug.texi:677
msgid "Edebug supports evaluation of expressions containing references to lexically bound symbols created by the following constructs in @file{cl.el}: @code{lexical-let}, @code{macrolet}, and @code{symbol-macrolet}."
msgstr "Edebugは@file{cl.el}内の構文(@code{lexical-let}、@code{macrolet}、@code{symbol-macrolet})によって作成された、レキシカル(lexical)にバインドされたシンボルへの参照を含む式の評価をサポートします。"

#. type: subsection
#: original_texis/edebug.texi:679
#, no-wrap
msgid "Evaluation List Buffer"
msgstr "Evaluation List Buffer"

#. type: Plain text
#: original_texis/edebug.texi:685
msgid "You can use the @dfn{evaluation list buffer}, called @file{*edebug*}, to evaluate expressions interactively.  You can also set up the @dfn{evaluation list} of expressions to be evaluated automatically each time Edebug updates the display."
msgstr "式をインタラクティブに評価するために、@file{*edebug*}と呼ばれる@dfn{評価リストバッファー(evaluation list buffer)}を使用できます。Edebugがディスプレイを更新するたびに自動的に評価される、式の@dfn{評価リスト(evaluation list)}もセットアップできます。"

#. type: item
#: original_texis/edebug.texi:687
#, no-wrap
msgid "E"
msgstr "E"

#. type: table
#: original_texis/edebug.texi:690
msgid "Switch to the evaluation list buffer @file{*edebug*} (@code{edebug-visit-eval-list})."
msgstr "評価リストバッファー@file{*edebug*}に切り替える(@code{edebug-visit-eval-list})。"

#. type: Plain text
#: original_texis/edebug.texi:695
msgid "In the @file{*edebug*} buffer you can use the commands of Lisp Interaction mode (@pxref{Lisp Interaction,,, emacs, The GNU Emacs Manual}) as well as these special commands:"
msgstr "@file{*edebug*}バッファーでは、以下の特別なコマンドと同様にLisp Interactionモード(@ref{Lisp Interaction,,, emacs, The GNU Emacs Manual}を参照)のコマンドも使用できます。"

#. type: item
#: original_texis/edebug.texi:697
#, no-wrap
msgid "C-j"
msgstr "C-j"

#. type: table
#: original_texis/edebug.texi:700
msgid "Evaluate the expression before point, in the outside context, and insert the value in the buffer (@code{edebug-eval-print-last-sexp})."
msgstr "ポイントの前の式をコンテキスト外で評価して、その値をバッファーに挿入する(@code{edebug-eval-print-last-sexp})。"

#. type: item
#: original_texis/edebug.texi:705
#, no-wrap
msgid "C-c C-u"
msgstr "C-c C-u"

#. type: table
#: original_texis/edebug.texi:708
msgid "Build a new evaluation list from the contents of the buffer (@code{edebug-update-eval-list})."
msgstr "バッファー内のコンテンツから新たに評価リストを構築する(@code{edebug-update-eval-list})。"

#. type: item
#: original_texis/edebug.texi:709
#, no-wrap
msgid "C-c C-d"
msgstr "C-c C-d"

#. type: table
#: original_texis/edebug.texi:712
msgid "Delete the evaluation list group that point is in (@code{edebug-delete-eval-item})."
msgstr "ポイントのある評価リストグループを削除する(@code{edebug-delete-eval-item})。"

#. type: item
#: original_texis/edebug.texi:713
#, no-wrap
msgid "C-c C-w"
msgstr "C-c C-w"

#. type: table
#: original_texis/edebug.texi:716
msgid "Switch back to the source code buffer at the current stop point (@code{edebug-where})."
msgstr "ソースコードバッファーに切り替えてカレントストップポイントに戻る(@code{edebug-where})。"

#. type: Plain text
#: original_texis/edebug.texi:721
msgid "You can evaluate expressions in the evaluation list window with @kbd{C-j} or @kbd{C-x C-e}, just as you would in @file{*scratch*}; but they are evaluated in the context outside of Edebug."
msgstr "評価リストウィンドウ内では、@file{*scratch*}にいるときと同様に@kbd{C-j}や@kbd{C-x C-e}で式を評価できますが、それらはEdebugのコンテキスト外で評価されます。"

#. type: Plain text
#: original_texis/edebug.texi:725
msgid "The expressions you enter interactively (and their results) are lost when you continue execution; but you can set up an @dfn{evaluation list} consisting of expressions to be evaluated each time execution stops."
msgstr "インタラクティブに入力した式(と結果)は、実行を継続すると失われます。しかし実行がストップされるたびに評価されるように、式から構成される@dfn{評価リスト}をセットアップできます。"

#. type: cindex
#: original_texis/edebug.texi:726
#, no-wrap
msgid "evaluation list group"
msgstr "evaluation list group"

#. type: Plain text
#: original_texis/edebug.texi:730
msgid "To do this, write one or more @dfn{evaluation list groups} in the evaluation list buffer.  An evaluation list group consists of one or more Lisp expressions.  Groups are separated by comment lines."
msgstr "これを行なうには、評価リストバッファー内で1つ以上の@dfn{評価リストグループ(evaluation list group)}を記述します。評価リストグループは1つ以上のLisp式から構成されます。グループはコメント行で区切られます。"

#. type: Plain text
#: original_texis/edebug.texi:735
msgid "The command @kbd{C-c C-u} (@code{edebug-update-eval-list}) rebuilds the evaluation list, scanning the buffer and using the first expression of each group.  (The idea is that the second expression of the group is the value previously computed and displayed.)"
msgstr "コマンド@kbd{C-c C-u}(@code{edebug-update-eval-list})はバッファーをスキャンして、各グループの最初の式を使用して評価リストを再構築します(これはグループの2つ目の式は以前に計算、表示されている値だという発想からである)。"

#. type: Plain text
#: original_texis/edebug.texi:741
msgid "Each entry to Edebug redisplays the evaluation list by inserting each expression in the buffer, followed by its current value.  It also inserts comment lines so that each expression becomes its own group.  Thus, if you type @kbd{C-c C-u} again without changing the buffer text, the evaluation list is effectively unchanged."
msgstr "Edebugにエントリーするたびに、評価リストの各式(および式の後に式のカレント値)をバッファーに挿入して再表示します。これはコメント行も挿入するので、各式はそのグループの一員となります。したがってバッファーのテキストを変更せずに@kbd{C-c C-u}とタイプすると、評価リストは実際には変更されません。"

#. type: Plain text
#: original_texis/edebug.texi:746
msgid "If an error occurs during an evaluation from the evaluation list, the error message is displayed in a string as if it were the result.  Therefore, expressions using variables that are not currently valid do not interrupt your debugging."
msgstr "評価リストからの評価の間にエラーが発生すると、それが式の結果であるかのようにエラーメッセージが文字列で表示されます。したがってカレントで無効な変数を使用する式によって、デバッグが中断されることはありません。"

#. type: Plain text
#: original_texis/edebug.texi:749
msgid "Here is an example of what the evaluation list window looks like after several expressions have been added to it:"
msgstr "以下はいくつかの式を評価リストウィンドウに追加したとき、どのように見えるかの例です:"

#. type: smallexample
#: original_texis/edebug.texi:769
#, no-wrap
msgid ""
"(current-buffer)\n"
"#<buffer *scratch*>\n"
";---------------------------------------------------------------\n"
"(selected-window)\n"
"#<window 16 on *scratch*>\n"
";---------------------------------------------------------------\n"
"(point)\n"
"196\n"
";---------------------------------------------------------------\n"
"bad-var\n"
"\"Symbol's value as variable is void: bad-var\"\n"
";---------------------------------------------------------------\n"
"(recursion-depth)\n"
"0\n"
";---------------------------------------------------------------\n"
"this-command\n"
"eval-last-sexp\n"
";---------------------------------------------------------------\n"
msgstr ""
"(current-buffer)\n"
"#<buffer *scratch*>\n"
";---------------------------------------------------------------\n"
"(selected-window)\n"
"#<window 16 on *scratch*>\n"
";---------------------------------------------------------------\n"
"(point)\n"
"196\n"
";---------------------------------------------------------------\n"
"bad-var\n"
"\"Symbol's value as variable is void: bad-var\"\n"
";---------------------------------------------------------------\n"
"(recursion-depth)\n"
"0\n"
";---------------------------------------------------------------\n"
"this-command\n"
"eval-last-sexp\n"
";---------------------------------------------------------------\n"

#. type: Plain text
#: original_texis/edebug.texi:777
msgid "To delete a group, move point into it and type @kbd{C-c C-d}, or simply delete the text for the group and update the evaluation list with @kbd{C-c C-u}.  To add a new expression to the evaluation list, insert the expression at a suitable place, insert a new comment line, then type @kbd{C-c C-u}.  You need not insert dashes in the comment line---its contents don't matter."
msgstr "グループを削除するにはグループ内にポイントを移動して@kbd{C-c C-d}をタイプするか、単にグループのテキストを削除して@kbd{C-c C-u}で評価リストを更新します。評価リストに新たな式を追加するには、適切な箇所にその式を挿入して新たなコメント行を挿入してから@kbd{C-c C-u}をタイプします。コメント行にダッシュを挿入する必要はありません --- 内容は関係ないのです。"

#. type: Plain text
#: original_texis/edebug.texi:781
msgid "After selecting @file{*edebug*}, you can return to the source code buffer with @kbd{C-c C-w}.  The @file{*edebug*} buffer is killed when you continue execution, and recreated next time it is needed."
msgstr "@file{*edebug*}を選択した後に@kbd{C-c C-w}でソースコードバッファーにリターンできます。@file{*edebug*}は実行を継続したときにkillされて、次回必要となったときに再作成されます。"

#. type: cindex
#: original_texis/edebug.texi:785
#, no-wrap
msgid "printing (Edebug)"
msgstr "printing (Edebug)"

#. type: cindex
#: original_texis/edebug.texi:786
#, no-wrap
msgid "printing circular structures"
msgstr "printing circular structures"

#. type: pindex
#: original_texis/edebug.texi:787
#, no-wrap
msgid "cust-print"
msgstr "cust-print"

#. type: Plain text
#: original_texis/edebug.texi:790
msgid "If an expression in your program produces a value containing circular list structure, you may get an error when Edebug attempts to print it."
msgstr "プログラム内の式が循環リスト構造(circular list structure)を含む値を生成する場合は、Edebugがそれをプリントしようとしたときエラーとなるかもしれません。"

#. type: Plain text
#: original_texis/edebug.texi:797
msgid "One way to cope with circular structure is to set @code{print-length} or @code{print-level} to truncate the printing.  Edebug does this for you; it binds @code{print-length} and @code{print-level} to the values of the variables @code{edebug-print-length} and @code{edebug-print-level} (so long as they have non-@code{nil} values).  @xref{Output Variables}."
msgstr "循環構造への対処の1つとして、@code{print-length}と@code{print-level}にプリントの切り詰めをセットする方法があります。Edebugは変数@code{edebug-print-length}と@code{edebug-print-level}の値(非@code{nil}値なら)を、これらの変数にバインドします。@ref{Output Variables}を参照してください。"

#. type: defopt
#: original_texis/edebug.texi:798
#, no-wrap
msgid "edebug-print-length"
msgstr "edebug-print-length"

#. type: defopt
#: original_texis/edebug.texi:801
msgid "If non-@code{nil}, Edebug binds @code{print-length} to this value while printing results.  The default value is @code{50}."
msgstr "非@code{nil}なら結果をプリントするときEdebugは@code{print-length}をこの値にバインドする。デフォルト値は@code{50}。"

#. type: defopt
#: original_texis/edebug.texi:803
#, no-wrap
msgid "edebug-print-level"
msgstr "edebug-print-level"

#. type: defopt
#: original_texis/edebug.texi:806
msgid "If non-@code{nil}, Edebug binds @code{print-level} to this value while printing results.  The default value is @code{50}."
msgstr "非@code{nil}なら結果をプリントするときEdebugは@code{print-level}をこの値にバインドする。デフォルト値は@code{50}。"

#. type: Plain text
#: original_texis/edebug.texi:811
msgid "You can also print circular structures and structures that share elements more informatively by binding @code{print-circle} to a non-@code{nil} value."
msgstr "@code{print-circle}を非@code{nil}値にバインドして、循環構造や要素を共有する構造にたいして、より参考になる情報をプリントするよういにすることもできます。"

#. type: Plain text
#: original_texis/edebug.texi:813
msgid "Here is an example of code that creates a circular structure:"
msgstr "以下は循環構造を作成するコードの例です:"

#. type: example
#: original_texis/edebug.texi:817
#, no-wrap
msgid ""
"(setq a '(x y))\n"
"(setcar a a)\n"
msgstr ""
"(setq a '(x y))\n"
"(setcar a a)\n"

#. type: Plain text
#: original_texis/edebug.texi:825
msgid "Custom printing prints this as @samp{Result: #1=(#1# y)}.  The @samp{#1=} notation labels the structure that follows it with the label @samp{1}, and the @samp{#1#} notation references the previously labeled structure.  This notation is used for any shared elements of lists or vectors."
msgstr "カスタムプリントはこれを@samp{Result: #1=(#1# y)}のようにプリントします。@samp{#1=}という表記はその後の構造をラベル@samp{1}とラベル付けして、@samp{#1#}表記はその前にラベル付けされた構造を参照しています。この表記はリストとベクターの任意の共有要素に使用されます。"

#. type: defopt
#: original_texis/edebug.texi:826
#, no-wrap
msgid "edebug-print-circle"
msgstr "edebug-print-circle"

#. type: defopt
#: original_texis/edebug.texi:829
msgid "If non-@code{nil}, Edebug binds @code{print-circle} to this value while printing results.  The default value is @code{t}."
msgstr "非@code{nil}なら結果をプリントするときEdebugは@code{print-circle}をこの値にバインドする。デフォルト値は@code{t}。"

#. type: Plain text
#: original_texis/edebug.texi:833
msgid "Other programs can also use custom printing; see @file{cust-print.el} for details."
msgstr "他のプログラムもカスタムプリントを使用できます。詳細は@file{cust-print.el}を参照してください。"

#. type: cindex
#: original_texis/edebug.texi:836
#, no-wrap
msgid "trace buffer"
msgstr "trace buffer"

#. type: Plain text
#: original_texis/edebug.texi:842
msgid "Edebug can record an execution trace, storing it in a buffer named @file{*edebug-trace*}.  This is a log of function calls and returns, showing the function names and their arguments and values.  To enable trace recording, set @code{edebug-trace} to a non-@code{nil} value."
msgstr "Edebugは実行トレースを@file{*edebug-trace*}という名前のバッファーに格納して記録できます。実行トレースとは関数呼び出しとリターンのログのことで関数名と引数、および値を確認できます。トレースレコードを有効にするには、@code{edebug-trace}を非@code{nil}値にセットしてください。"

#. type: Plain text
#: original_texis/edebug.texi:845
msgid "Making a trace buffer is not the same thing as using trace execution mode (@pxref{Edebug Execution Modes})."
msgstr "トレースバッファーの作成は実行モードのトレースの使用(@ref{Edebug Execution Modes}を参照)と同じではありません。"

#. type: Plain text
#: original_texis/edebug.texi:851
msgid "When trace recording is enabled, each function entry and exit adds lines to the trace buffer.  A function entry record consists of @samp{::::@{}, followed by the function name and argument values.  A function exit record consists of @samp{::::@}}, followed by the function name and result of the function."
msgstr "トレースレコードが有効なときは、関数へのエントリーとexitのたびにトレースバッファーに行が追加されます。関数エントリーレコードは@samp{::::@{}、および関数名と引数の値によって構成されます。関数のexitレコードは@samp{::::@}}、および関数名と関数の結果によって構成されます。"

#. type: Plain text
#: original_texis/edebug.texi:855
msgid "The number of @samp{:}s in an entry shows its recursion depth.  You can use the braces in the trace buffer to find the matching beginning or end of function calls."
msgstr "@samp{:}の数は関数エントリーの再帰レベルを表します。トレースバッファーでは関数呼び出しの開始と終了の検索に@samp{@{}と@samp{@}}を使用できます。"

#. type: findex
#: original_texis/edebug.texi:856
#, no-wrap
msgid "edebug-print-trace-before"
msgstr "edebug-print-trace-before"

#. type: findex
#: original_texis/edebug.texi:857
#, no-wrap
msgid "edebug-print-trace-after"
msgstr "edebug-print-trace-after"

#. type: Plain text
#: original_texis/edebug.texi:861
msgid "You can customize trace recording for function entry and exit by redefining the functions @code{edebug-print-trace-before} and @code{edebug-print-trace-after}."
msgstr "関数@code{edebug-print-trace-before}と@code{edebug-print-trace-after}を再定義することによって、関数エントリーと関数exitのトレースレコードをカスタマイズできます。"

#. type: defmac
#: original_texis/edebug.texi:862
#, no-wrap
msgid "edebug-tracing string body@dots{}"
msgstr "edebug-tracing string body@dots{}"

#. type: defmac
#: original_texis/edebug.texi:868
msgid "This macro requests additional trace information around the execution of the @var{body} forms.  The argument @var{string} specifies text to put in the trace buffer, after the @samp{@{} or @samp{@}}.  All the arguments are evaluated, and @code{edebug-tracing} returns the value of the last form in @var{body}."
msgstr "このマクロは@var{body}フォームの実行活動にたいして追加のトレース情報をリクエストする。引数@var{string}はトレースバッファーに配置する@samp{@{}と@samp{@}}の後のテキストを指定する。すべての引数は評価されて、@code{edebug-tracing}は@var{body}内の最後のフォームの値をリターンする。"

#. type: defun
#: original_texis/edebug.texi:870
#, no-wrap
msgid "edebug-trace format-string &rest format-args"
msgstr "edebug-trace format-string &rest format-args"

#. type: defun
#: original_texis/edebug.texi:874
msgid "This function inserts text in the trace buffer.  It computes the text with @code{(apply 'format @var{format-string} @var{format-args})}.  It also appends a newline to separate entries."
msgstr "この関数はトレースバッファーにテキストを挿入する。テキストは@code{(apply 'format @var{format-string} @var{format-args})}によって計算される。エントリー間の区切りとして改行も付け加える。"

#. type: Plain text
#: original_texis/edebug.texi:880
msgid "@code{edebug-tracing} and @code{edebug-trace} insert lines in the trace buffer whenever they are called, even if Edebug is not active.  Adding text to the trace buffer also scrolls its window to show the last lines inserted."
msgstr "@code{edebug-tracing}と@code{edebug-trace}は、たとえEdebugが非アクティブでも、呼び出されたときは常にトレースバッファーに行を挿入します。トレースバッファーへのテキストの追加により、挿入された最後の行が見えるようにウィンドウもスクロールします。"

#. type: cindex
#: original_texis/edebug.texi:884
#, no-wrap
msgid "coverage testing (Edebug)"
msgstr "coverage testing (Edebug)"

#. type: cindex
#: original_texis/edebug.texi:885
#, no-wrap
msgid "frequency counts"
msgstr "frequency counts"

#. type: cindex
#: original_texis/edebug.texi:886
#, no-wrap
msgid "performance analysis"
msgstr "performance analysis"

#. type: Plain text
#: original_texis/edebug.texi:889
msgid "Edebug provides rudimentary coverage testing and display of execution frequency."
msgstr "Edebugは基本的なカバレッジテスト(coverage test)と実行頻度(execution frequency)の表示を提供します。"

#. type: Plain text
#: original_texis/edebug.texi:897
msgid "Coverage testing works by comparing the result of each expression with the previous result; each form in the program is considered covered if it has returned two different values since you began testing coverage in the current Emacs session.  Thus, to do coverage testing on your program, execute it under various conditions and note whether it behaves correctly; Edebug will tell you when you have tried enough different conditions that each form has returned two different values."
msgstr "カバレッジテストは、すべての式の結果と以前の結果を比較することによって機能します。プログラム内の各フォームがカレントEmacsセッション内でカバレッジテストを開始して以降に、2つの異なる値をリターンしたら、それらのフォームはカバーされたと判断されます。したがってプログラムにカバレッジテストを行なうには、そのプログラムをさまざまなコンディション下で実行して、プログラムが正しく振る舞うかに注目します。異なるコンディション下で十分にテストして、すべてのフォームが異なる2つの値をリターンしたとき、Edebugはそのことを告げるでしょう。"

#. type: Plain text
#: original_texis/edebug.texi:903
msgid "Coverage testing makes execution slower, so it is only done if @code{edebug-test-coverage} is non-@code{nil}.  Frequency counting is performed for all executions of an instrumented function, even if the execution mode is Go-nonstop, and regardless of whether coverage testing is enabled."
msgstr "カバレッジテストにより実行速度が低下するので、@code{edebug-test-coverage}が非@code{nil}のときだけカバレッジテストが行なわれます。頻度計数(frequency count)はたとえ実行モードがGo-nonstopでも、カバレッジテストが有効か無効かに関わらずすべての式にたいして行われます。"

#. type: kindex
#: original_texis/edebug.texi:904
#, no-wrap
msgid "C-x X ="
msgstr "C-x X ="

#. type: findex
#: original_texis/edebug.texi:905
#, no-wrap
msgid "edebug-temp-display-freq-count"
msgstr "edebug-temp-display-freq-count"

#. type: Plain text
#: original_texis/edebug.texi:910
msgid "Use @kbd{C-x X =} (@code{edebug-display-freq-count}) to display both the coverage information and the frequency counts for a definition.  Just @kbd{=} (@code{edebug-temp-display-freq-count}) displays the same information temporarily, only until you type another key."
msgstr "定義にたいするカバレッジ情報と頻度数の両方を表示するには@kbd{C-x X =} (@code{edebug-display-freq-count})を使用します。単に@kbd{=} (@code{edebug-temp-display-freq-count})とすると、他のキーをタイプするまでの間だけ一時的に同様の情報を表示します。"

#. type: deffn
#: original_texis/edebug.texi:911
#, no-wrap
msgid "Command edebug-display-freq-count"
msgstr "Command edebug-display-freq-count"

#. type: deffn
#: original_texis/edebug.texi:914
msgid "This command displays the frequency count data for each line of the current definition."
msgstr "このコマンドはカレント定義の各行の頻度数を表示する。"

#. type: deffn
#: original_texis/edebug.texi:921
msgid "It inserts frequency counts as comment lines after each line of code.  You can undo all insertions with one @code{undo} command.  The counts appear under the @samp{(} before an expression or the @samp{)} after an expression, or on the last character of a variable.  To simplify the display, a count is not shown if it is equal to the count of an earlier expression on the same line."
msgstr "このコマンドはコードの各行の下にコメント行として頻度数を挿入する。1回の@code{undo}コマンドですべての挿入をアンドゥできる。頻度数は式の前の@samp{(}か式の後の@samp{)}、または変数の最後の文字の下に表示される。表示をシンプルにするために同一行にたいして式の以前頻度数と頻度数が同じ場合は表示しない。"

#. type: deffn
#: original_texis/edebug.texi:925
msgid "The character @samp{=} following the count for an expression says that the expression has returned the same value each time it was evaluated.  In other words, it is not yet covered for coverage testing purposes."
msgstr "ある式にたいする頻度数の後に文字@samp{=}がある場合は、その式が評価されるたびに同じ値を毎回リターンしていることを表す。言い換えるとカバレッジテストの目的からは、その式はまだカバーされていないということである。"

#. type: deffn
#: original_texis/edebug.texi:928
msgid "To clear the frequency count and coverage data for a definition, simply reinstrument it with @code{eval-defun}."
msgstr "ある定義にたいして頻度数とカバレッジデータを明確にするには、単に@code{eval-defun}で再インストルメントすればよい。"

#. type: Plain text
#: original_texis/edebug.texi:933
msgid "For example, after evaluating @code{(fac 5)} with a source breakpoint, and setting @code{edebug-test-coverage} to @code{t}, when the breakpoint is reached, the frequency data looks like this:"
msgstr "たとえばソースのbreakpointで@code{(fac 5)}を評価した後に@code{edebug-test-coverage}を@code{t}にセットすると、breakpointに達したときの頻度データは以下のようになります:"

#. type: example
#: original_texis/edebug.texi:944
#, no-wrap
msgid ""
"(defun fac (n)\n"
"  (if (= n 0) (edebug))\n"
";#6           1      = =5\n"
"  (if (< 0 n)\n"
";#5         =\n"
"      (* n (fac (1- n)))\n"
";#    5               0\n"
"    1))\n"
";#   0\n"
msgstr ""
"(defun fac (n)\n"
"  (if (= n 0) (edebug))\n"
";#6           1      = =5\n"
"  (if (< 0 n)\n"
";#5         =\n"
"      (* n (fac (1- n)))\n"
";#    5               0\n"
"    1))\n"
";#   0\n"

#. type: Plain text
#: original_texis/edebug.texi:950
msgid "The comment lines show that @code{fac} was called 6 times.  The first @code{if} statement returned 5 times with the same result each time; the same is true of the condition on the second @code{if}.  The recursive call of @code{fac} did not return at all."
msgstr "コメント行は@code{fac}が6回呼び出されたことを表しています。最初の@code{if}命令は毎回同じ結果を5回リターンしています。同じ結果という意味では2つ目の@code{if}の条件にも当てはまります。@code{fac}の再帰呼び出しは結局リターンしません。"

#. type: Plain text
#: original_texis/edebug.texi:961
msgid "Edebug tries to be transparent to the program you are debugging, but it does not succeed completely.  Edebug also tries to be transparent when you evaluate expressions with @kbd{e} or with the evaluation list buffer, by temporarily restoring the outside context.  This section explains precisely what context Edebug restores, and how Edebug fails to be completely transparent."
msgstr "Edebugはデバッグ中のプログラムにたいして透過的であろうと努めますが完全には達成されません。Edebugは@kbd{e}や評価リストバッファーで式を評価するときにも、一時的に外部のコンテキストをリストアして透明化を試みます。このセクションではEdebugがリストアするコンテキストと、Edebugが完全に透過的になるのに失敗する理由を正確に説明します。"

#. type: subsubsection
#: original_texis/edebug.texi:966 original_texis/edebug.texi:968
#: original_texis/edebug.texi:969
#, no-wrap
msgid "Checking Whether to Stop"
msgstr "Checking Whether to Stop"

#. type: menuentry
#: original_texis/edebug.texi:966
msgid "When Edebug decides what to do."
msgstr "何を行うかをEdebugが決定するタイミング。"

#. type: subsubsection
#: original_texis/edebug.texi:966 original_texis/edebug.texi:988
#: original_texis/edebug.texi:989
#, no-wrap
msgid "Edebug Display Update"
msgstr "Edebug Display Update"

#. type: menuentry
#: original_texis/edebug.texi:966
msgid "When Edebug updates the display."
msgstr "Edebugがディスプレイを更新するタイミング。"

#. type: subsubsection
#: original_texis/edebug.texi:966 original_texis/edebug.texi:1043
#: original_texis/edebug.texi:1044
#, no-wrap
msgid "Edebug Recursive Edit"
msgstr "Edebug Recursive Edit"

#. type: menuentry
#: original_texis/edebug.texi:966
msgid "When Edebug stops execution."
msgstr "Edebugが実行をストップするタイミング。"

#. type: Plain text
#: original_texis/edebug.texi:974
msgid "Whenever Edebug is entered, it needs to save and restore certain data before even deciding whether to make trace information or stop the program."
msgstr "Edebugにエンターするときは常に特定のデータの保存とリストアを行なう必要があり、それはトレース情報を作成するか、あるいはプログラムを停止するかを決定する前に行なう必要があります。"

#. type: itemize
#: original_texis/edebug.texi:980
msgid "@code{max-lisp-eval-depth} and @code{max-specpdl-size} are both increased to reduce Edebug's impact on the stack.  You could, however, still run out of stack space when using Edebug."
msgstr "@code{max-lisp-eval-depth}と@code{max-specpdl-size}は、Edebugがスタックに与える影響の低減効果を高める。しかしそれでもEdebug使用時にスタック空間を使い切ってしまうことがあり得る。"

#. type: itemize
#: original_texis/edebug.texi:985
msgid "The state of keyboard macro execution is saved and restored.  While Edebug is active, @code{executing-kbd-macro} is bound to @code{nil} unless @code{edebug-continue-kbd-macro} is non-@code{nil}."
msgstr "キーボードマクロの実行状態の保存とリストアが行われる。Edebugがアクティブの間、@code{edebug-continue-kbd-macro}が@code{nil}なら@code{executing-kbd-macro}が@code{nil}にバインドされる。"

#. type: Plain text
#: original_texis/edebug.texi:997
msgid "When Edebug needs to display something (e.g., in trace mode), it saves the current window configuration from outside Edebug (@pxref{Window Configurations}).  When you exit Edebug, it restores the previous window configuration."
msgstr "(たとえばtraceモードなどで)Edebugが何かを表示する必要があるときは、Edebugの外部からカレントウィンドウ構成(@ref{Window Configurations}を参照)を保存します。Edebugをexitするときに、以前のウィンドウ構成がリストアされます。"

#. type: Plain text
#: original_texis/edebug.texi:1004
msgid "Emacs redisplays only when it pauses.  Usually, when you continue execution, the program re-enters Edebug at a breakpoint or after stepping, without pausing or reading input in between.  In such cases, Emacs never gets a chance to redisplay the outside configuration.  Consequently, what you see is the same window configuration as the last time Edebug was active, with no interruption."
msgstr "Emacsはpause時だけ再表示を行います。通常は実行を継続すると、そのプログラムはbreakpointかステップ実行後にEdebugに再エンターして、その間にpauseや入力の読み取りはありません。そのような場合、Emacsが外部の構成を再表示する機会は決してありません。結果としてユーザーが目にするウィンドウ構成は、前回Edebugが中断なしでアクティブだったときのウィンドウ構成と同じになります。"

#. type: Plain text
#: original_texis/edebug.texi:1008
msgid "Entry to Edebug for displaying something also saves and restores the following data (though some of them are deliberately not restored if an error or quit signal occurs)."
msgstr "何かを表示するためにEdebugにエントリーすることにより、(たとえこれらのうちのいくつかは、エラーやquitがシグナルされたときは故意にリストアしないデータだとしても)以下のデータも保存とリストアが行われます。"

#. type: cindex
#: original_texis/edebug.texi:1011
#, no-wrap
msgid "current buffer point and mark (Edebug)"
msgstr "current buffer point and mark (Edebug)"

#. type: itemize
#: original_texis/edebug.texi:1014
msgid "Which buffer is current, and the positions of point and the mark in the current buffer, are saved and restored."
msgstr "カレントバッファー、およびカレントバッファー内のポイントとマークの位置が保存およびリストアされる。"

#. type: cindex
#: original_texis/edebug.texi:1016
#, no-wrap
msgid "window configuration (Edebug)"
msgstr "window configuration (Edebug)"

#. type: itemize
#: original_texis/edebug.texi:1019
msgid "The outside window configuration is saved and restored if @code{edebug-save-windows} is non-@code{nil} (@pxref{Edebug Options})."
msgstr "@code{edebug-save-windows}が非@code{nil}なら、外部のウィンドウ構成の保存とリストアが行われる(@ref{Edebug Options}を参照)。"

#. type: itemize
#: original_texis/edebug.texi:1025
msgid "The window configuration is not restored on error or quit, but the outside selected window @emph{is} reselected even on error or quit in case a @code{save-excursion} is active.  If the value of @code{edebug-save-windows} is a list, only the listed windows are saved and restored."
msgstr "エラーやquitではウィンドウ構成はリストアされないが、@code{save-excursion}がアクティブなら、たとえエラーやquitのときでも外部の選択されたウィンドウが@emph{再選択される}。@code{edebug-save-windows}の値がリストなら、それにリストされたウィンドウだけが保存およびリストアされる。"

#. type: itemize
#: original_texis/edebug.texi:1028
msgid "The window start and horizontal scrolling of the source code buffer are not restored, however, so that the display remains coherent within Edebug."
msgstr "ただしソースコードバッファーのウィンドウの開始位置と水平スクロールはリストアされないので、表示はEdebug内で整合性が保たれたままとなる。"

#. type: itemize
#: original_texis/edebug.texi:1032
msgid "The value of point in each displayed buffer is saved and restored if @code{edebug-save-displayed-buffer-points} is non-@code{nil}."
msgstr "@code{edebug-save-displayed-buffer-points}が非@code{nil}なら、表示されているそれぞれのバッファー内のポイント値は保存およびリストアされる。"

#. type: itemize
#: original_texis/edebug.texi:1037
msgid "The variables @code{overlay-arrow-position} and @code{overlay-arrow-string} are saved and restored, so you can safely invoke Edebug from the recursive edit elsewhere in the same buffer."
msgstr "変数@code{overlay-arrow-position}と@code{overlay-arrow-string}は保存とリストアが行われるので、同じバッファー内の他の場所の再帰編集から安全にEdebugを呼び出せる。"

#. type: itemize
#: original_texis/edebug.texi:1041
msgid "@code{cursor-in-echo-area} is locally bound to @code{nil} so that the cursor shows up in the window."
msgstr "@code{cursor-in-echo-area}は@code{nil}にローカルにバインドされるのでカーソルはそのウィンドウ内に現れる。"

#. type: Plain text
#: original_texis/edebug.texi:1048
msgid "When Edebug is entered and actually reads commands from the user, it saves (and later restores) these additional data:"
msgstr "Edebugにエンターしてユーザーのコマンドが実際に読み取られるとき、Edebugは以下の追加データを保存(および後でリストア)します:"

#. type: itemize
#: original_texis/edebug.texi:1052
msgid "The current match data.  @xref{Match Data}."
msgstr "カレントマッチデータ。@ref{Match Data}を参照のこと。"

#. type: itemize
#: original_texis/edebug.texi:1059
msgid "The variables @code{last-command}, @code{this-command}, @code{last-command-event}, @code{last-input-event}, @code{last-event-frame}, @code{last-nonmenu-event}, and @code{track-mouse}.  Commands in Edebug do not affect these variables outside of Edebug."
msgstr "変数@code{last-command}、@code{this-command}、@code{last-command-event}、@code{last-input-event}、@code{last-event-frame}、@code{last-nonmenu-event}、@code{track-mouse}。Edebug内のコマンドはEdebug外部のこれらの変数に影響をあたえない。"

#. type: itemize
#: original_texis/edebug.texi:1063
msgid "Executing commands within Edebug can change the key sequence that would be returned by @code{this-command-keys}, and there is no way to reset the key sequence from Lisp."
msgstr "Edebug内でのコマンド実行は@code{this-command-keys}によりリターンされるキーシーケンスを変更でき、Lispからそのキーシーケンスをリセットする方法はない。"

#. type: itemize
#: original_texis/edebug.texi:1068
msgid "Edebug cannot save and restore the value of @code{unread-command-events}.  Entering Edebug while this variable has a nontrivial value can interfere with execution of the program you are debugging."
msgstr "Edebugは@code{unread-command-events}の値の保存とリストアができない。この変数が重要な値をもつときにEdebugにエンターすると、デバッグ中のプログラムの実行に干渉する可能性がある。"

#. type: itemize
#: original_texis/edebug.texi:1072
msgid "Complex commands executed while in Edebug are added to the variable @code{command-history}.  In rare cases this can alter execution."
msgstr "Edebug内で実行された複雑なコマンドは変数@code{command-history}に追加される。これは稀に実行に影響を与える。"

#. type: itemize
#: original_texis/edebug.texi:1077
msgid "Within Edebug, the recursion depth appears one deeper than the recursion depth outside Edebug.  This is not true of the automatically updated evaluation list window."
msgstr "Edebug内では再帰の深さがEdebug外部の再帰の深さより1つ深くなる。これは自動的に更新される評価リストウィンドウでは異なる。"

#. type: itemize
#: original_texis/edebug.texi:1082
msgid "@code{standard-output} and @code{standard-input} are bound to @code{nil} by the @code{recursive-edit}, but Edebug temporarily restores them during evaluations."
msgstr "@code{standard-output}と@code{standard-input}は、@code{recursive-edit}によって@code{nil}にバインドされるがEdebugは評価の間それらを一時的にリストアする。"

#. type: itemize
#: original_texis/edebug.texi:1087
msgid "The state of keyboard macro definition is saved and restored.  While Edebug is active, @code{defining-kbd-macro} is bound to @code{edebug-continue-kbd-macro}."
msgstr "キーボードマクロ定義の状態は保存およびリストアされる。Edebugがアクティブの間、@code{defining-kbd-macro}は@code{edebug-continue-kbd-macro}にバインドされる。"

#. type: Plain text
#: original_texis/edebug.texi:1094
msgid "To make Edebug properly instrument expressions that call macros, some extra care is needed.  This subsection explains the details."
msgstr "Edebugが正しくマクロを呼び出す式をインストルメントするには、いくつかの特定な配慮が必要になります。このサブセクションでは、その詳細を説明します。"

#. type: subsubsection
#: original_texis/edebug.texi:1100 original_texis/edebug.texi:1102
#: original_texis/edebug.texi:1103
#, no-wrap
msgid "Instrumenting Macro Calls"
msgstr "Instrumenting Macro Calls"

#. type: menuentry
#: original_texis/edebug.texi:1100
msgid "The basic problem."
msgstr "基本的な問題点。"

#. type: subsubsection
#: original_texis/edebug.texi:1100 original_texis/edebug.texi:1189
#: original_texis/edebug.texi:1190
#, no-wrap
msgid "Specification List"
msgstr "Specification List"

#. type: menuentry
#: original_texis/edebug.texi:1100
msgid "How to specify complex patterns of evaluation."
msgstr "式の複雑なパターンを指定する方法。"

#. type: node
#: original_texis/edebug.texi:1100 original_texis/edebug.texi:1399
#, no-wrap
msgid "Backtracking"
msgstr "Backtracking"

#. type: menuentry
#: original_texis/edebug.texi:1100
msgid "What Edebug does when matching fails."
msgstr "マッチに失敗したときEdebugが行なうこと。"

#. type: subsubsection
#: original_texis/edebug.texi:1100 original_texis/edebug.texi:1440
#: original_texis/edebug.texi:1441
#, no-wrap
msgid "Specification Examples"
msgstr "Specification Examples"

#. type: menuentry
#: original_texis/edebug.texi:1100
msgid "To help understand specifications."
msgstr "Edebug仕様を理解するために。"

#. type: Plain text
#: original_texis/edebug.texi:1111
msgid "When Edebug instruments an expression that calls a Lisp macro, it needs additional information about the macro to do the job properly.  This is because there is no a-priori way to tell which subexpressions of the macro call are forms to be evaluated.  (Evaluation may occur explicitly in the macro body, or when the resulting expansion is evaluated, or any time later.)"
msgstr "EdebugがLispマクロを呼び出す式をインストルメントするときは、正しくインストルメントを行なうために、そのマクロに関して追加の情報が必要になります。これはマクロ呼び出しのどの部分式(subexpression)が評価されるフォームなのか推測する方法がないからです(評価はマクロのbodyで明示的に発生するかもしれないし、展開結果が評価されるとき、または任意のタイミングで行われるかもしれない)。"

#. type: Plain text
#: original_texis/edebug.texi:1117
msgid "Therefore, you must define an Edebug specification for each macro that Edebug will encounter, to explain the format of calls to that macro.  To do this, add a @code{debug} declaration to the macro definition.  Here is a simple example that shows the specification for the @code{for} example macro (@pxref{Argument Evaluation})."
msgstr "したがってEdebugが処理するかもしれないすべてのマクロにたいして、そのマクロの呼び出しフォーマットを説明するためのEdebug仕様(Edebug specification)を定義しなければなりません。これを行なうにはマクロ定義に@code{debug}宣言を追加します。以下はマクロ例@code{for}(@ref{Argument Evaluation}を参照)にたいする簡単な仕様の例です。"

#. type: smallexample
#: original_texis/edebug.texi:1124
#, no-wrap
msgid ""
"(defmacro for (var from init to final do &rest body)\n"
"  \"Execute a simple \\\"for\\\" loop.\n"
"For example, (for i from 1 to 10 do (print i)).\"\n"
"  (declare (debug (symbolp \"from\" form \"to\" form \"do\" &rest form)))\n"
"  ...)\n"
msgstr ""
"(defmacro for (var from init to final do &rest body)\n"
"  \"Execute a simple \\\"for\\\" loop.\n"
"For example, (for i from 1 to 10 do (print i)).\"\n"
"  (declare (debug (symbolp \"from\" form \"to\" form \"do\" &rest form)))\n"
"  ...)\n"

#. type: Plain text
#: original_texis/edebug.texi:1132
msgid "The Edebug specification says which parts of a call to the macro are forms to be evaluated.  For simple macros, the specification often looks very similar to the formal argument list of the macro definition, but specifications are much more general than macro arguments.  @xref{Defining Macros}, for more explanation of the @code{declare} form."
msgstr "このEdebug仕様はマクロ呼び出しのどの部分が評価されるフォームなのかを示しています。単純なマクロにたいするEdebug仕様は、そのマクロ定義の正式な引数リストに酷似している場合がありますが、Edebug仕様はマクロ引数に比べてより汎的です。@code{declare}フォームの詳細は@ref{Defining Macros}を参照してください。"

#. type: Plain text
#: original_texis/edebug.texi:1141
msgid "Take care to ensure that the specifications are known to Edebug when you instrument code.  If you are instrumenting a function from a file that uses @code{eval-when-compile} to require another file containing macro definitions, you may need to explicitly load that file."
msgstr "コードをインストルメントするときには、Edebugに仕様が確実に解るように注意してください。マクロ定義を含む他のファイルを要求するために@code{eval-when-compile}を使用するファイルから関数をインストルメントする場合には、そのファイルを明示的にロードする必要があるかもしれません。"

#. type: Plain text
#: original_texis/edebug.texi:1147
msgid "You can also define an edebug specification for a macro separately from the macro definition with @code{def-edebug-spec}.  Adding @code{debug} declarations is preferred, and more convenient, for macro definitions in Lisp, but @code{def-edebug-spec} makes it possible to define Edebug specifications for special forms implemented in C."
msgstr "@code{def-edebug-spec}によりマクロ定義から個々のマクロにたいしてEdebug仕様を定義することもできます。Lispで記述されたマクロ定義にたいしては@code{debug}宣言を追加するほうが好ましく便利でもありますが、@code{def-edebug-spec}ではCで実装されたスペシャルフォームにたいしてEdebug仕様を定義することが可能になります。"

#. type: defmac
#: original_texis/edebug.texi:1148
#, no-wrap
msgid "def-edebug-spec macro specification"
msgstr "def-edebug-spec macro specification"

#. type: defmac
#: original_texis/edebug.texi:1152
msgid "Specify which expressions of a call to macro @var{macro} are forms to be evaluated.  @var{specification} should be the edebug specification.  Neither argument is evaluated."
msgstr "マクロ@var{macro}呼び出しのどの式が評価される式かを指定する。@var{specification}はEdebug仕様である。どちらの引数も評価されない。"

#. type: defmac
#: original_texis/edebug.texi:1155
msgid "The @var{macro} argument can actually be any symbol, not just a macro name."
msgstr "引数@var{macro}には単なるマクロ名ではない、任意の実シンボルを指定できる。"

#. type: Plain text
#: original_texis/edebug.texi:1159
msgid "Here is a table of the possibilities for @var{specification} and how each directs processing of arguments."
msgstr "以下は@var{specification}に指定できるシンボルと、引数を処理する方法のテーブルです。"

#. type: table
#: original_texis/edebug.texi:1163
msgid "All arguments are instrumented for evaluation."
msgstr "すべての引数は評価のためにインストルメントされる。"

#. type: code{#1}
#: original_texis/edebug.texi:1164
#, no-wrap
msgid "0"
msgstr "0"

#. type: table
#: original_texis/edebug.texi:1166
msgid "None of the arguments is instrumented."
msgstr "引数はインストルメントされない。"

#. type: item
#: original_texis/edebug.texi:1167
#, no-wrap
msgid "a symbol"
msgstr "シンボル"

#. type: table
#: original_texis/edebug.texi:1171
msgid "The symbol must have an Edebug specification, which is used instead.  This indirection is repeated until another kind of specification is found.  This allows you to inherit the specification from another macro."
msgstr "そのシンボルはかわりに使用されるEdebug仕様をもたなければならない。このインダイレクションは他の種類の仕様が見つかるまで繰り返される。これによって他のマクロの仕様を継承できる。"

#. type: item
#: original_texis/edebug.texi:1172
#, no-wrap
msgid "a list"
msgstr "リスト"

#. type: table
#: original_texis/edebug.texi:1176
msgid "The elements of the list describe the types of the arguments of a calling form.  The possible elements of a specification list are described in the following sections."
msgstr "リストの要素はフォーム呼び出しの引数の型を記述する。仕様リストに指定できる要素については以降のセクションを参照のこと。"

#. type: Plain text
#: original_texis/edebug.texi:1181
msgid "If a macro has no Edebug specification, neither through a @code{debug} declaration nor through a @code{def-edebug-spec} call, the variable @code{edebug-eval-macro-args} comes into play."
msgstr "マクロがEdebug仕様をもたなければ、@code{debug}宣言および@code{def-edebug-spec}呼び出しのどちらを介しても、変数@code{edebug-eval-macro-args}が効果を発揮します。"

#. type: defopt
#: original_texis/edebug.texi:1182
#, no-wrap
msgid "edebug-eval-macro-args"
msgstr "edebug-eval-macro-args"

#. type: defopt
#: original_texis/edebug.texi:1187
msgid "This controls the way Edebug treats macro arguments with no explicit Edebug specification.  If it is @code{nil} (the default), none of the arguments is instrumented for evaluation.  Otherwise, all arguments are instrumented."
msgstr "これはEdebugが明示的なEdebug仕様をもたないマクロ引数を扱う方法を制御する。@code{nil}(デフォルト)なら引数は評価のためにインストルメントされない。それ以外ばらすべての引数がインストルメントされる。"

#. type: cindex
#: original_texis/edebug.texi:1192
#, no-wrap
msgid "Edebug specification list"
msgstr "Edebug specification list"

#. type: Plain text
#: original_texis/edebug.texi:1199
msgid "A @dfn{specification list} is required for an Edebug specification if some arguments of a macro call are evaluated while others are not.  Some elements in a specification list match one or more arguments, but others modify the processing of all following elements.  The latter, called @dfn{specification keywords}, are symbols beginning with @samp{&} (such as @code{&optional})."
msgstr "あるマクロ呼び出しにおいて、いくつかの引数は評価されても、それ以外の引数は評価されないような場合には、Edebug仕様のために@dfn{仕様リスト(specification list)}が必要となります。仕様リスト内のいくつかの要素は1つ以上の引数にマッチしますが、それ以外の要素は以降に続くすべての引数の処理を変更します。後者は@dfn{仕様キーワード(specification keywords)}と呼ばれ、(@code{&optional}のように)@samp{&}で始まるシンボルです。"

#. type: Plain text
#: original_texis/edebug.texi:1205
msgid "A specification list may contain sublists, which match arguments that are themselves lists, or it may contain vectors used for grouping.  Sublists and groups thus subdivide the specification list into a hierarchy of levels.  Specification keywords apply only to the remainder of the sublist or group they are contained in."
msgstr "仕様リストはそれ自身がリストであるような引数にマッチする部分リスト(sublist)、あるいはグループ化に使用されるベクターを含むかもしれません。したがって部分式とグループは仕様リストをレベル階層に細分化します。仕様キーワードは部分式やグループを含むものの残りに適用されます。"

#. type: Plain text
#: original_texis/edebug.texi:1209
msgid "When a specification list involves alternatives or repetition, matching it against an actual macro call may require backtracking.  For more details, @pxref{Backtracking}."
msgstr "仕様リストに選択肢や繰り返しが含まれる場合は、実際のマクロの呼び出しのマッチでバックトラックが要求されるかもしれません。詳細は@ref{Backtracking}を参照してください。"

#. type: Plain text
#: original_texis/edebug.texi:1214
msgid "Edebug specifications provide the power of regular expression matching, plus some context-free grammar constructs: the matching of sublists with balanced parentheses, recursive processing of forms, and recursion via indirect specifications."
msgstr "Edebug仕様はバランスのとれたカッコで括られた部分式へのマッチ、フォームの再帰処理、インダイレクト仕様を通じた再帰等の、正規表現によるマッチングとコンテキストに依存しない文法構成を提供します。"

#. type: Plain text
#: original_texis/edebug.texi:1218
msgid "Here's a table of the possible elements of a specification list, with their meanings (see @ref{Specification Examples}, for the referenced examples):"
msgstr "以下は仕様リストに使用できる要素と、その意味についてのテーブルです(使用例は@ref{Specification Examples}を参照):"

#. type: item
#: original_texis/edebug.texi:1220
#, no-wrap
msgid "sexp"
msgstr "sexp"

#. type: table
#: original_texis/edebug.texi:1223
msgid "A single unevaluated Lisp object, which is not instrumented."
msgstr "評価されない単一のLispオブジェクト。インストルメントされない。"

#. type: item
#: original_texis/edebug.texi:1224
#, no-wrap
msgid "form"
msgstr "form"

#. type: table
#: original_texis/edebug.texi:1226
msgid "A single evaluated expression, which is instrumented."
msgstr "評価される単一のLispオブジェクト。インストルメントされる。"

#. type: item
#: original_texis/edebug.texi:1227
#, no-wrap
msgid "place"
msgstr "place"

#. type: table
#: original_texis/edebug.texi:1229
msgid "A generalized variable.  @xref{Generalized Variables}."
msgstr "汎変数(generalized variable)。@ref{Generalized Variables}を参照のこと。"

#. type: item
#: original_texis/edebug.texi:1230
#, no-wrap
msgid "body"
msgstr "body"

#. type: table
#: original_texis/edebug.texi:1232
msgid "Short for @code{&rest form}.  See @code{&rest} below."
msgstr "@code{&rest form}の省略形。以下の@code{&rest}を参照のこと。"

#. type: item
#: original_texis/edebug.texi:1233
#, no-wrap
msgid "function-form"
msgstr "function-form"

#. type: table
#: original_texis/edebug.texi:1240
msgid "A function form: either a quoted function symbol, a quoted lambda expression, or a form (that should evaluate to a function symbol or lambda expression).  This is useful when an argument that's a lambda expression might be quoted with @code{quote} rather than @code{function}, since it instruments the body of the lambda expression either way."
msgstr "関数フォーム。クォートされた関数シンボル、クォートされたラムダ式、または(関数シンボルかラムダ式に評価される)フォームのいずれか。これはラムダ式のbodyをいずれかの方法でインストルメントするので、@code{function}よりも@code{quote}でクォートされたラムダ式の引数にたいして有用。"

#. type: item
#: original_texis/edebug.texi:1241
#, no-wrap
msgid "lambda-expr"
msgstr "lambda-expr"

#. type: table
#: original_texis/edebug.texi:1243
msgid "A lambda expression with no quoting."
msgstr "クォートされないラムダ式。"

#. type: item
#: original_texis/edebug.texi:1244
#, no-wrap
msgid "&optional"
msgstr "&optional"

#. type: table
#: original_texis/edebug.texi:1248
msgid "All following elements in the specification list are optional; as soon as one does not match, Edebug stops matching at this level."
msgstr "仕様リスト内の後続の要素はオプション。マッチしない要素が出現するとEdebugはこのレベルのマッチングを停止する。"

#. type: table
#: original_texis/edebug.texi:1253
msgid "To make just a few elements optional, followed by non-optional elements, use @code{[&optional @var{specs}@dots{}]}.  To specify that several elements must all match or none, use @code{&optional [@var{specs}@dots{}]}.  See the @code{defun} example."
msgstr "後続が非オプションの要素であるような数個の要素をオプションにするだけなら、@code{[&optional @var{specs}@dots{}]}を使用する。複数の要素すべてのマッチや非マッチを指定するには、@code{&optional [@var{specs}@dots{}]}を使用する。@code{defun}の例を参照のこと。"

#. type: item
#: original_texis/edebug.texi:1254
#, no-wrap
msgid "&rest"
msgstr "&rest"

#. type: table
#: original_texis/edebug.texi:1260
msgid "All following elements in the specification list are repeated zero or more times.  In the last repetition, however, it is not a problem if the expression runs out before matching all of the elements of the specification list."
msgstr "仕様リスト内の後続のすべての要素は0回以上繰り返される。しかし最後の繰り返しでは、仕様リスト内のすべての要素にたいするマッチングの前に式が終了しても問題はない。"

#. type: table
#: original_texis/edebug.texi:1264
msgid "To repeat only a few elements, use @code{[&rest @var{specs}@dots{}]}.  To specify several elements that must all match on every repetition, use @code{&rest [@var{specs}@dots{}]}."
msgstr "数個の要素を繰り返すには@code{[&rest @var{specs}@dots{}]}を使用する。各繰り返しにおいてすべてマッチしなければならない複数要素を指定するには、@code{&rest [@var{specs}@dots{}]}を使用する。"

#. type: item
#: original_texis/edebug.texi:1265
#, no-wrap
msgid "&or"
msgstr "&or"

#. type: table
#: original_texis/edebug.texi:1270
msgid "Each of the following elements in the specification list is an alternative.  One of the alternatives must match, or the @code{&or} specification fails."
msgstr "仕様リスト内の後続の各要素は選択肢である。選択肢の1つがマッチしなければならず、マッチしなければ@code{&or}仕様は失敗する。"

#. type: table
#: original_texis/edebug.texi:1274
msgid "Each list element following @code{&or} is a single alternative.  To group two or more list elements as a single alternative, enclose them in @code{[@dots{}]}."
msgstr "@code{&or}に続く各リスト要素は単一の選択肢である。複数のリスト要素を単一の選択肢にグループ化するには、それらを@code{[@dots{}]}で括る。"

#. type: item
#: original_texis/edebug.texi:1275
#, no-wrap
msgid "&not"
msgstr "&not"

#. type: table
#: original_texis/edebug.texi:1281
msgid "Each of the following elements is matched as alternatives as if by using @code{&or}, but if any of them match, the specification fails.  If none of them match, nothing is matched, but the @code{&not} specification succeeds."
msgstr "後続の各要素は@code{&or}が使用されたときのように選択肢にマッチするが、要素がマッチしたら失敗となる。マッチする要素がなければ何もマッチされないが@code{&not}仕様は成功となる。"

#. type: item
#: original_texis/edebug.texi:1284
#, no-wrap
msgid "&define"
msgstr "&define"

#. type: table
#: original_texis/edebug.texi:1291
msgid "Indicates that the specification is for a defining form.  The defining form itself is not instrumented (that is, Edebug does not stop before and after the defining form), but forms inside it typically will be instrumented.  The @code{&define} keyword should be the first element in a list specification."
msgstr "フォーム定義にたいする仕様であることを示す。フォーム定義自体はインストルメントされない(つまりEdebugはフォーム定義の前後でストップしない)が、フォーム内部は通常はインストルメントされるであろう。@code{&define}キーワードはリスト仕様の最初の要素であること。"

#. type: item
#: original_texis/edebug.texi:1292
#, no-wrap
msgid "nil"
msgstr "nil"

#. type: table
#: original_texis/edebug.texi:1296
msgid "This is successful when there are no more arguments to match at the current argument list level; otherwise it fails.  See sublist specifications and the backquote example."
msgstr "カレント引数レベルでマッチさせる引数が存在しなければ成功し、それ以外は失敗する。部分リスト仕様とバッククォートの例を参照のこと。"

#. type: item
#: original_texis/edebug.texi:1297
#, no-wrap
msgid "gate"
msgstr "gate"

#. type: cindex
#: original_texis/edebug.texi:1298
#, no-wrap
msgid "preventing backtracking"
msgstr "preventing backtracking"

#. type: table
#: original_texis/edebug.texi:1303
msgid "No argument is matched but backtracking through the gate is disabled while matching the remainder of the specifications at this level.  This is primarily used to generate more specific syntax error messages.  See @ref{Backtracking}, for more details.  Also see the @code{let} example."
msgstr "引数はマッチされないがgateを通じたバックトラックは、このレベルの仕様の残りをマッチングする間は無効にされる。これは主に特定の構文エラーメッセージを一般化するために使用される。詳細は@ref{Backtracking}、および@code{let}の例も参照のこと。"

#. type: var{#1}
#: original_texis/edebug.texi:1304
#, no-wrap
msgid "other-symbol"
msgstr "other-symbol"

#. type: cindex
#: original_texis/edebug.texi:1305
#, no-wrap
msgid "indirect specifications"
msgstr "indirect specifications"

#. type: table
#: original_texis/edebug.texi:1308
msgid "Any other symbol in a specification list may be a predicate or an indirect specification."
msgstr "仕様リスト内のその他の要素は、述語(predicate)かインダイレクト仕様(indirect specification)である。"

#. type: table
#: original_texis/edebug.texi:1314
msgid "If the symbol has an Edebug specification, this @dfn{indirect specification} should be either a list specification that is used in place of the symbol, or a function that is called to process the arguments.  The specification may be defined with @code{def-edebug-spec} just as for macros.  See the @code{defun} example."
msgstr "シンボルがEdebug仕様をもつなら、@dfn{インダイレクト仕様(indirect specification)}はシンボル位置に使用されるリスト仕様か、引数を処理するための関数のいずれかである。この仕様はマクロにたいする@code{def-edebug-spec}のように定義される。@code{defun}の例を参照のこと。"

#. type: table
#: original_texis/edebug.texi:1318
msgid "Otherwise, the symbol should be a predicate.  The predicate is called with the argument, and if the predicate returns @code{nil}, the specification fails and the argument is not instrumented."
msgstr "それ以外ならシンボルは述語(predicate)である。述語は引数とともに呼び出されて@code{nil}をリターンしたら、その仕様は失敗して引数はインストルメントされない。"

#. type: table
#: original_texis/edebug.texi:1321
msgid "Some suitable predicates include @code{symbolp}, @code{integerp}, @code{stringp}, @code{vectorp}, and @code{atom}."
msgstr "適切な述語としては@code{symbolp}、@code{integerp}、@code{stringp}、@code{vectorp}、@code{atom}が含まれる。"

#. type: item
#: original_texis/edebug.texi:1322
#, no-wrap
msgid "[@var{elements}@dots{}]"
msgstr "[@var{elements}@dots{}]"

#. type: cindex
#: original_texis/edebug.texi:1323
#, no-wrap
msgid "[@dots{}] (Edebug)"
msgstr "[@dots{}] (Edebug)"

#. type: table
#: original_texis/edebug.texi:1326
msgid "A vector of elements groups the elements into a single @dfn{group specification}.  Its meaning has nothing to do with vectors."
msgstr "要素のベクターは要素を単一の@dfn{グループ仕様(group specification)}にグループ化する。このグループ仕様はベクター自体には何も行わない。"

#. type: item
#: original_texis/edebug.texi:1327
#, no-wrap
msgid "\"@var{string}\""
msgstr "\"@var{string}\""

#. type: table
#: original_texis/edebug.texi:1331
msgid "The argument should be a symbol named @var{string}.  This specification is equivalent to the quoted symbol, @code{'@var{symbol}}, where the name of @var{symbol} is the @var{string}, but the string form is preferred."
msgstr "引数は@var{string}という名前のシンボルである。この仕様は@var{symbol}の名前が@var{string}であるようなクォートされたシンボル@code{'@var{symbol}}と等価だが、文字列形式のほうが好ましい。"

#. type: item
#: original_texis/edebug.texi:1332
#, no-wrap
msgid "(vector @var{elements}@dots{})"
msgstr "(vector @var{elements}@dots{})"

#. type: table
#: original_texis/edebug.texi:1335
msgid "The argument should be a vector whose elements must match the @var{elements} in the specification.  See the backquote example."
msgstr "引数は要素が仕様内の@var{elements}にマッチするようなベクターである。バッククォートの例を参照のこと。"

#. type: item
#: original_texis/edebug.texi:1336
#, no-wrap
msgid "(@var{elements}@dots{})"
msgstr "(@var{elements}@dots{})"

#. type: table
#: original_texis/edebug.texi:1339
msgid "Any other list is a @dfn{sublist specification} and the argument must be a list whose elements match the specification @var{elements}."
msgstr "他のリストは@dfn{部分リスト仕様(sublist specification)}であり、引数は要素が仕様の@var{elements}にマッチするリストでなければならない。"

#. type: cindex
#: original_texis/edebug.texi:1340
#, no-wrap
msgid "dotted lists (Edebug)"
msgstr "dotted lists (Edebug)"

#. type: table
#: original_texis/edebug.texi:1349
msgid "A sublist specification may be a dotted list and the corresponding list argument may then be a dotted list.  Alternatively, the last @sc{cdr} of a dotted list specification may be another sublist specification (via a grouping or an indirect specification, e.g., @code{(spec .  [(more specs@dots{})])}) whose elements match the non-dotted list arguments.  This is useful in recursive specifications such as in the backquote example.  Also see the description of a @code{nil} specification above for terminating such recursion."
msgstr "部分リスト仕様はドットリスト(dotted list)かもしれず、その場合対応するリスト引数はドットリストである。かわりにドットリスト仕様の最後の@sc{cdr}が、(グループ化やインダイレクト仕様による)他の部分リスト仕様かもしれない(たとえば要素が非ドットリストにマッチする@code{(spec . [(more specs@dots{})])}))。これはバッククォートの例のような再帰仕様に有用。このような再帰を終了させるには上述の@code{nil}仕様も参照のこと。"

#. type: table
#: original_texis/edebug.texi:1354
msgid "Note that a sublist specification written as @code{(specs .  nil)} is equivalent to @code{(specs)}, and @code{(specs .  (sublist-elements@dots{}))} is equivalent to @code{(specs sublist-elements@dots{})}."
msgstr "@code{(specs .  nil)}のように記述された部分リスト仕様は@code{(specs)}、@code{(specs .  (sublist-elements@dots{}))}は@code{(specs sublist-elements@dots{})}と等価であることに注意。"

#. type: Plain text
#: original_texis/edebug.texi:1360
msgid "Here is a list of additional specifications that may appear only after @code{&define}.  See the @code{defun} example."
msgstr "以下は@code{&define}の後だけに出現する追加仕様のリストです。@code{defun}の例を参照してください。"

#. type: item
#: original_texis/edebug.texi:1362
#, no-wrap
msgid "name"
msgstr "name"

#. type: table
#: original_texis/edebug.texi:1364
msgid "The argument, a symbol, is the name of the defining form."
msgstr "引数(シンボル)は定義フォームの名前。"

#. type: table
#: original_texis/edebug.texi:1367
msgid "A defining form is not required to have a name field; and it may have multiple name fields."
msgstr "定義フォームは名前フィールドをもつ必要はなく、複数の名前フィールドをもつかもしれない。"

#. type: item
#: original_texis/edebug.texi:1368
#, no-wrap
msgid ":name"
msgstr ":name"

#. type: table
#: original_texis/edebug.texi:1374
msgid "This construct does not actually match an argument.  The element following @code{:name} should be a symbol; it is used as an additional name component for the definition.  You can use this to add a unique, static component to the name of the definition.  It may be used more than once."
msgstr "この構文は引数に実際のマッチは行わない。@code{:name}の後の要素はシンボルであり、その定義の追加の名前要素として使用される。定義名に一意で静的な要素を加えるためにこれを使用できる。複数回使用できる。"

#. type: item
#: original_texis/edebug.texi:1375
#, no-wrap
msgid "arg"
msgstr "arg"

#. type: table
#: original_texis/edebug.texi:1379
msgid "The argument, a symbol, is the name of an argument of the defining form.  However, lambda-list keywords (symbols starting with @samp{&})  are not allowed."
msgstr "引数(シンボル)は定義フォームの引数の名前である。しかしlambda-listキーワード(@samp{&}で始まるシンボル)は許されない。"

#. type: item
#: original_texis/edebug.texi:1380
#, no-wrap
msgid "lambda-list"
msgstr "lambda-list"

#. type: cindex
#: original_texis/edebug.texi:1381
#, no-wrap
msgid "lambda-list (Edebug)"
msgstr "lambda-list (Edebug)"

#. type: table
#: original_texis/edebug.texi:1383
msgid "This matches a lambda list---the argument list of a lambda expression."
msgstr "これはラムダリスト(ラムダ式の引数リスト)にマッチする。"

#. type: item
#: original_texis/edebug.texi:1384
#, no-wrap
msgid "def-body"
msgstr "def-body"

#. type: table
#: original_texis/edebug.texi:1390
msgid "The argument is the body of code in a definition.  This is like @code{body}, described above, but a definition body must be instrumented with a different Edebug call that looks up information associated with the definition.  Use @code{def-body} for the highest level list of forms within the definition."
msgstr "引数は定義内のコードのbodyである。これは上述の@code{body}と似ているが、定義のbodyはその定義に関連する情報を照会する別のEdebug呼び出しでインストルメントされていなければならない。定義内のより高位レベルのフォームリストには@code{def-body}を使用する。"

#. type: item
#: original_texis/edebug.texi:1391
#, no-wrap
msgid "def-form"
msgstr "def-form"

#. type: table
#: original_texis/edebug.texi:1397
msgid "The argument is a single, highest-level form in a definition.  This is like @code{def-body}, except it is used to match a single form rather than a list of forms.  As a special case, @code{def-form} also means that tracing information is not output when the form is executed.  See the @code{interactive} example."
msgstr "引数は定義内のもっとも高位レベルの単一フォームである。これは@code{def-body}と似ているが、フォームリストではなく単一フォームのマッチに使用される。特別なケースとして@code{def-form}はフォームが実行されるときトレース情報を出力しないことも意味する。@code{interactive}の例を参照のこと。"

#. type: subsubsection
#: original_texis/edebug.texi:1400
#, no-wrap
msgid "Backtracking in Specifications"
msgstr "Backtracking in Specifications"

#. type: cindex
#: original_texis/edebug.texi:1402
#, no-wrap
msgid "backtracking"
msgstr "backtracking"

#. type: cindex
#: original_texis/edebug.texi:1403
#, no-wrap
msgid "syntax error (Edebug)"
msgstr "syntax error (Edebug)"

#. type: Plain text
#: original_texis/edebug.texi:1410
msgid "If a specification fails to match at some point, this does not necessarily mean a syntax error will be signaled; instead, @dfn{backtracking} will take place until all alternatives have been exhausted.  Eventually every element of the argument list must be matched by some element in the specification, and every required element in the specification must match some argument."
msgstr "あるポイント位置で仕様がマッチに失敗しても、構文エラーがシグナルされるとは限りません。そのかわり@dfn{バックトラッッキング(backtracking)}が開始されます。バックトラックはすべての選択肢をマッチングするまで行なわれます。最終的に引数リストのすべての要素は仕様内の要素のいずれかとマッチしなければならず、仕様内の必須要素は引数のいずれかとマッチしなければなりません。"

#. type: Plain text
#: original_texis/edebug.texi:1421
msgid "When a syntax error is detected, it might not be reported until much later, after higher-level alternatives have been exhausted, and with the point positioned further from the real error.  But if backtracking is disabled when an error occurs, it can be reported immediately.  Note that backtracking is also reenabled automatically in several situations; when a new alternative is established by @code{&optional}, @code{&rest}, or @code{&or}, or at the start of processing a sublist, group, or indirect specification.  The effect of enabling or disabling backtracking is limited to the remainder of the level currently being processed and lower levels."
msgstr "構文エラーが検出されてもその時点では報告されず、より高位レベルの選択肢のマッチングが終わった後、実際のエラー箇所から離れたポイント位置でエラーが報告されるかもしれません。しかしエラー発生時にバックトラックが無効ならエラーは即座に報告されるでしょう。ある状況ではバックトラックも自動的に再有効化されることに注意してください。@code{&optional}、@code{&rest}、@code{&or}により新たな選択肢が設定されたとき、または部分リスト、グループ、インダイレクト仕様が開始されたときはバックトラックが自動的に有効になります。バックトラックを有効、または無効にした場合の影響は、現在処理中のレベルの残り要素と低位レベルに限定されます。"

#. type: Plain text
#: original_texis/edebug.texi:1426
msgid "Backtracking is disabled while matching any of the form specifications (that is, @code{form}, @code{body}, @code{def-form}, and @code{def-body}).  These specifications will match any form so any error must be in the form itself rather than at a higher level."
msgstr "何らかのフォーム仕様(すなわち@code{form}、@code{body}、@code{def-form}、@code{def-body})をマッチングする間、バックトラックは無効になっています。これらの仕様は任意のフォームにマッチするので、何らかのエラーが発生するとしたらそれは高位レベルではなく、そのフォーム自体の内部でなければなりません。"

#. type: Plain text
#: original_texis/edebug.texi:1433
msgid "Backtracking is also disabled after successfully matching a quoted symbol or string specification, since this usually indicates a recognized construct.  But if you have a set of alternative constructs that all begin with the same symbol, you can usually work around this constraint by factoring the symbol out of the alternatives, e.g., @code{[\"foo\" &or [first case] [second case] ...]}."
msgstr "バックトラックはクォートされたシンボルや文字列仕様とのマッチに成功した後にも無効になります。なぜなら通常これは構文成が認識されたことを示すからです。しかし同じシンボルで始まる一連の選択肢構文がある場合には、たとえば@code{[\"foo\" &or [first case] [second case] ...]}のように、通常は選択肢の外部にそのシンボルをファクタリングすることによりこの制約に対処できます。"

#. type: Plain text
#: original_texis/edebug.texi:1439
msgid "Most needs are satisfied by these two ways that backtracking is automatically disabled, but occasionally it is useful to explicitly disable backtracking by using the @code{gate} specification.  This is useful when you know that no higher alternatives could apply.  See the example of the @code{let} specification."
msgstr "ほとんどのニーズは、バックトラックを自動的に無効にする、これら2つの方法で満足させることができますが、@code{gate}仕様を使用して明示的にバックトラックを無効にするほうが便利なときもあります。これは高位に適用可能な選択肢が存在しないことが分かっている場合に有用です。@code{let}仕様の例を参照してください。"

#. type: Plain text
#: original_texis/edebug.texi:1445
msgid "It may be easier to understand Edebug specifications by studying the examples provided here."
msgstr "以下で提供する例から学ぶことにより、Edebug仕様の理解が容易になるでしょう。"

#. type: Plain text
#: original_texis/edebug.texi:1450
msgid "A @code{let} special form has a sequence of bindings and a body.  Each of the bindings is either a symbol or a sublist with a symbol and optional expression.  In the specification below, notice the @code{gate} inside of the sublist to prevent backtracking once a sublist is found."
msgstr "スペシャルフォーム@code{let}は、バインディングとbodyのシーケンスをもちます。各バインディングはそシンボル、またはシンボルとオプションの部分リストです。以下の仕様では部分リストを見つけたらバックトラックを抑止するために、部分リスト内の@code{gate}があることに注目してください。"

#. type: example
#: original_texis/edebug.texi:1465
#, no-wrap
msgid ""
"(def-edebug-spec let\n"
"  ((&rest\n"
"    &or symbolp (gate symbolp &optional form))\n"
"   body))\n"
msgstr ""
"(def-edebug-spec let\n"
"  ((&rest\n"
"    &or symbolp (gate symbolp &optional form))\n"
"   body))\n"

#. type: Plain text
#: original_texis/edebug.texi:1473
msgid "Edebug uses the following specifications for @code{defun} and the associated argument list and @code{interactive} specifications.  It is necessary to handle interactive forms specially since an expression argument is actually evaluated outside of the function body.  (The specification for @code{defmacro} is very similar to that for @code{defun}, but allows for the @code{declare} statement.)"
msgstr "Edebugは@code{defun}および関連する引数リスト、@code{interactive}仕様にたいして以下の仕様を使用します。式の引数はその関数bodyの外部で実際に評価されるので、interactiveフォームは特別に処理する必要があります。(@code{defmacro}にたいする仕様は@code{defun}にたいする仕様と酷似するが@code{declare}命令文が許される)"

#. type: smallexample
#: original_texis/edebug.texi:1480
#, no-wrap
msgid ""
"(def-edebug-spec defun\n"
"  (&define name lambda-list\n"
"           [&optional stringp]   ; @r{Match the doc string, if present.}\n"
"           [&optional (\"interactive\" interactive)]\n"
"           def-body))\n"
"\n"
msgstr ""
"(def-edebug-spec defun\n"
"  (&define name lambda-list\n"
"           [&optional stringp]   ; @r{ドキュメント文字列が与えられた場合はマッチする。}\n"
"           [&optional (\"interactive\" interactive)]\n"
"           def-body))\n"
"\n"

#. type: smallexample
#: original_texis/edebug.texi:1486
#, no-wrap
msgid ""
"(def-edebug-spec lambda-list\n"
"  (([&rest arg]\n"
"    [&optional [\"&optional\" arg &rest arg]]\n"
"    &optional [\"&rest\" arg]\n"
"    )))\n"
"\n"
msgstr ""
"(def-edebug-spec lambda-list\n"
"  (([&rest arg]\n"
"    [&optional [\"&optional\" arg &rest arg]]\n"
"    &optional [\"&rest\" arg]\n"
"    )))\n"
"\n"

#. type: smallexample
#: original_texis/edebug.texi:1489
#, no-wrap
msgid ""
"(def-edebug-spec interactive\n"
"  (&optional &or stringp def-form))    ; @r{Notice: @code{def-form}}\n"
msgstr ""
"(def-edebug-spec interactive\n"
"  (&optional &or stringp def-form))    ; @r{@code{def-form}に注目}\n"

#. type: Plain text
#: original_texis/edebug.texi:1497
msgid "The specification for backquote below illustrates how to match dotted lists and use @code{nil} to terminate recursion.  It also illustrates how components of a vector may be matched.  (The actual specification defined by Edebug is a little different, and does not support dotted lists because doing so causes very deep recursion that could fail.)"
msgstr "以下のバッククォートにたいする仕様はドットリストにマッチさせる方法と、@code{nil}を使用して再帰を終了させる方法を説明するための例です。またベクターのコンポーネントをマッチさせる方法も示しています(Edebugにより定義される実際の仕様は少し異なり、失敗するかもしれない非常に深い再帰を引き起こすためドットリストについてはサポートしない)。"

#. type: smallexample
#: original_texis/edebug.texi:1500
#, no-wrap
msgid ""
"(def-edebug-spec \\` (backquote-form))   ; @r{Alias just for clarity.}\n"
"\n"
msgstr "(def-edebug-spec \\` (backquote-form))   ; @r{単なる明確化用エイリアス}\n\n"

#. type: smallexample
#: original_texis/edebug.texi:1506
#, no-wrap
msgid ""
"(def-edebug-spec backquote-form\n"
"  (&or ([&or \",\" \",@@\"] &or (\"quote\" backquote-form) form)\n"
"       (backquote-form . [&or nil backquote-form])\n"
"       (vector &rest backquote-form)\n"
"       sexp))\n"
msgstr ""
"(def-edebug-spec backquote-form\n"
"  (&or ([&or \",\" \",@@\"] &or (\"quote\" backquote-form) form)\n"
"       (backquote-form . [&or nil backquote-form])\n"
"       (vector &rest backquote-form)\n"
"       sexp))\n"

#. type: subsection
#: original_texis/edebug.texi:1509 original_texis/edebug.texi:1510
#, no-wrap
msgid "Edebug Options"
msgstr "Edebug Options"

#. type: Plain text
#: original_texis/edebug.texi:1516
msgid "These options affect the behavior of Edebug:"
msgstr "以下のオプションはEdebugの動作に影響を与えます:"

#. type: defopt
#: original_texis/edebug.texi:1517
#, no-wrap
msgid "edebug-setup-hook"
msgstr "edebug-setup-hook"

#. type: defopt
#: original_texis/edebug.texi:1524
msgid "Functions to call before Edebug is used.  Each time it is set to a new value, Edebug will call those functions once and then reset @code{edebug-setup-hook} to @code{nil}.  You could use this to load up Edebug specifications associated with a package you are using, but only when you also use Edebug.  @xref{Instrumenting}."
msgstr "Edebugが使用される前に呼び出される関数。この関数は毎回新たな値をセットする。Edebugはこれらの関数を一度呼び出したら、その後に@code{edebug-setup-hook}を@code{nil}にリセットする。使用するパッケージに関係するEdebug仕様をロードするために使用でｄきるがそれはEdebugを使用するときだけである。@ref{Instrumenting}を参照のこと。"

#. type: defopt
#: original_texis/edebug.texi:1526
#, no-wrap
msgid "edebug-all-defs"
msgstr "edebug-all-defs"

#. type: defopt
#: original_texis/edebug.texi:1531
msgid "If this is non-@code{nil}, normal evaluation of defining forms such as @code{defun} and @code{defmacro} instruments them for Edebug.  This applies to @code{eval-defun}, @code{eval-region}, @code{eval-buffer}, and @code{eval-current-buffer}."
msgstr "これが非@code{nil}の場合に@code{defun}や@code{defmacro}のような定義フォームの普通に評価すると、Edebug用にインストルメントされる。これは@code{eval-defun}、@code{eval-region}、@code{eval-buffer}、and @code{eval-current-buffer}に適用される。"

#. type: defopt
#: original_texis/edebug.texi:1534
msgid "Use the command @kbd{M-x edebug-all-defs} to toggle the value of this option.  @xref{Instrumenting}."
msgstr "このオプションの切り替えにはコマンド@kbd{M-x edebug-all-defs}を使用する。@ref{Instrumenting}を参照のこと。"

#. type: defopt
#: original_texis/edebug.texi:1536
#, no-wrap
msgid "edebug-all-forms"
msgstr "edebug-all-forms"

#. type: defopt
#: original_texis/edebug.texi:1541
msgid "If this is non-@code{nil}, the commands @code{eval-defun}, @code{eval-region}, @code{eval-buffer}, and @code{eval-current-buffer} instrument all forms, even those that don't define anything.  This doesn't apply to loading or evaluations in the minibuffer."
msgstr "これが非@code{nil}の場合には@code{eval-defun}、@code{eval-region}、@code{eval-buffer}、@code{eval-current-buffer}はたとえフォームが何も定義していなくても、すべてのフォームをインストルメントする。これはロードとミニバッファー内の評価には適用されない。"

#. type: defopt
#: original_texis/edebug.texi:1544
msgid "Use the command @kbd{M-x edebug-all-forms} to toggle the value of this option.  @xref{Instrumenting}."
msgstr "このオプションの切り替えにはコマンド@kbd{M-x edebug-all-forms}を使用する。@ref{Instrumenting}を参照のこと。"

#. type: defopt
#: original_texis/edebug.texi:1546
#, no-wrap
msgid "edebug-save-windows"
msgstr "edebug-save-windows"

#. type: defopt
#: original_texis/edebug.texi:1551
msgid "If this is non-@code{nil}, Edebug saves and restores the window configuration.  That takes some time, so if your program does not care what happens to the window configurations, it is better to set this variable to @code{nil}."
msgstr "これが非@code{nil}なら、Edebugはウィンドウ構成の保存とリストアを行なう。これにはある程度の時間を要するので、ウィンドウ構成に何が起こってもプログラムに関係なければ、この変数を@code{nil}にセットしたほうがよい。"

#. type: defopt
#: original_texis/edebug.texi:1554
msgid "If the value is a list, only the listed windows are saved and restored."
msgstr "値がリストならリストされたウィンドウだけが保存およびリストアされる。"

#. type: defopt
#: original_texis/edebug.texi:1557
msgid "You can use the @kbd{W} command in Edebug to change this variable interactively.  @xref{Edebug Display Update}."
msgstr "Edebug内ではこの変数をインタラクティブに変更するために@kbd{W}コマンドを使用できる。@ref{Edebug Display Update}を参照のこと。"

#. type: defopt
#: original_texis/edebug.texi:1559
#, no-wrap
msgid "edebug-save-displayed-buffer-points"
msgstr "edebug-save-displayed-buffer-points"

#. type: defopt
#: original_texis/edebug.texi:1562
msgid "If this is non-@code{nil}, Edebug saves and restores point in all displayed buffers."
msgstr "これが非@code{nil}ならEdebugは表示されているすべてのバッファー内のポイントを保存およびリストアする。"

#. type: defopt
#: original_texis/edebug.texi:1567
msgid "Saving and restoring point in other buffers is necessary if you are debugging code that changes the point of a buffer that is displayed in a non-selected window.  If Edebug or the user then selects the window, point in that buffer will move to the window's value of point."
msgstr "選択されていないウィンドウ内に表示されているバッファーのポイントを変更するコードをデバッグしている場合は、他のバッファーのポイントを保存およびリストアする必要がある。その後にEdebugまたはユーザーがそのウィンドウを選択した場合は、そのバッファー内のポイントはそのウィンドウのポイント値に移動される。"

#. type: defopt
#: original_texis/edebug.texi:1571
msgid "Saving and restoring point in all buffers is expensive, since it requires selecting each window twice, so enable this only if you need it.  @xref{Edebug Display Update}."
msgstr "すべてのバッファー内のポイントの保存とリストアは、それぞれのウィンドウを2回選択する必要があり高価な処理なので、必要なときだけ有効にする。@ref{Edebug Display Update}を参照のこと。"

#. type: defopt
#: original_texis/edebug.texi:1573
#, no-wrap
msgid "edebug-initial-mode"
msgstr "edebug-initial-mode"

#. type: defopt
#: original_texis/edebug.texi:1578
msgid "If this variable is non-@code{nil}, it specifies the initial execution mode for Edebug when it is first activated.  Possible values are @code{step}, @code{next}, @code{go}, @code{Go-nonstop}, @code{trace}, @code{Trace-fast}, @code{continue}, and @code{Continue-fast}."
msgstr "この変数が非@code{nil}なら、Edebugが最初にアクティブになったときのEdebugの最初の実行モードを指定する。指定できる値は@code{step}、@code{next}、@code{go}、@code{Go-nonstop}、@code{trace}、@code{Trace-fast}、@code{continue}、@code{Continue-fast}。"

#. type: defopt
#: original_texis/edebug.texi:1582
msgid "The default value is @code{step}.  This variable can be set interactively with @kbd{C-x C-a C-m} (@code{edebug-set-initial-mode}).  @xref{Edebug Execution Modes}."
msgstr "デフォルト値は@code{step}。この変数は@kbd{C-x C-a C-m}でインタラクティブにセットできる。@ref{Edebug Execution Modes}を参照のこと。"

#. type: defopt
#: original_texis/edebug.texi:1584
#, no-wrap
msgid "edebug-trace"
msgstr "edebug-trace"

#. type: defopt
#: original_texis/edebug.texi:1588
msgid "If this is non-@code{nil}, trace each function entry and exit.  Tracing output is displayed in a buffer named @file{*edebug-trace*}, one function entry or exit per line, indented by the recursion level."
msgstr "これが非@code{nil}なら各関数のエントリーとexitをトレースする。トレース出力は関数のエントリーとexitを行ごとに、再帰レベルにしたがって@file{*edebug-trace*}という名前のバッファーに表示される。"

#. type: defopt
#: original_texis/edebug.texi:1590
msgid "Also see @code{edebug-tracing}, in @ref{Trace Buffer}."
msgstr "@ref{Trace Buffer}の@code{edebug-tracing}も参照されたい。"

#. type: defopt
#: original_texis/edebug.texi:1592
#, no-wrap
msgid "edebug-test-coverage"
msgstr "edebug-test-coverage"

#. type: defopt
#: original_texis/edebug.texi:1595
msgid "If non-@code{nil}, Edebug tests coverage of all expressions debugged.  @xref{Coverage Testing}."
msgstr "非@code{nil}ならEdebugはデバッグされるすべての式のカバレッジをテストする。@ref{Coverage Testing}を参照のこと。"

#. type: defopt
#: original_texis/edebug.texi:1597
#, no-wrap
msgid "edebug-continue-kbd-macro"
msgstr "edebug-continue-kbd-macro"

#. type: defopt
#: original_texis/edebug.texi:1602
msgid "If non-@code{nil}, continue defining or executing any keyboard macro that is executing outside of Edebug.  Use this with caution since it is not debugged.  @xref{Edebug Execution Modes}."
msgstr "非@code{nil}ならEdebug外部で実行されている任意のキーボードマクロの定義または実行を継続する。これはデバッグされないので慎重に使用すること。@ref{Edebug Execution Modes}を参照されたい。"

#. type: defopt
#: original_texis/edebug.texi:1604
#, no-wrap
msgid "edebug-unwrap-results"
msgstr "edebug-unwrap-results"

#. type: defopt
#: original_texis/edebug.texi:1611
msgid "If non-@code{nil}, Edebug tries to remove any of its own instrumentation when showing the results of expressions.  This is relevant when debugging macros where the results of expressions are themselves instrumented expressions.  As a very artificial example, suppose that the example function @code{fac} has been instrumented, and consider a macro of the form:"
msgstr "非@code{nil}ならEdebugは式の結果を表示するときに、その式自体のインストルメント結果の削除を試みる。マクロをデバッグするときは、式の結果自体がインストルメントされた式になるということに関連するオプションである。実際的な例ではないが、サンプル例の関数@code{fac}がインストルメントされたとき、そのフォームのマクロを考えてみるとよい。"

#. type: smallexample
#: original_texis/edebug.texi:1617
#, no-wrap
msgid ""
"(defmacro test () \"Edebug example.\"\n"
"  (if (symbol-function 'fac)\n"
"      @dots{}))\n"
msgstr ""
"(defmacro test () \"Edebug example.\"\n"
"  (if (symbol-function 'fac)\n"
"      @dots{}))\n"

#. type: defopt
#: original_texis/edebug.texi:1625
msgid "If you instrument the @code{test} macro and step through it, then by default the result of the @code{symbol-function} call has numerous @code{edebug-after} and @code{edebug-before} forms, which can make it difficult to see the actual result.  If @code{edebug-unwrap-results} is non-@code{nil}, Edebug tries to remove these forms from the result."
msgstr "@code{test}マクロをインストルメントしてステップ実行すると、デフォルトでは@code{symbol-function}呼び出しは多数の@code{edebug-after}フォームと@code{edebug-before}フォームをもつことになり、それにより実際の結果の確認が難しくなり得る。@code{edebug-unwrap-results}が非@code{nil}ならEdebugは結果からこれらのフォームの削除を試みる。"

#. type: defopt
#: original_texis/edebug.texi:1627
#, no-wrap
msgid "edebug-on-error"
msgstr "edebug-on-error"

#. type: defopt
#: original_texis/edebug.texi:1631
msgid "Edebug binds @code{debug-on-error} to this value, if @code{debug-on-error} was previously @code{nil}.  @xref{Trapping Errors}."
msgstr "@code{debug-on-error}が以前@code{nil}だったら、Edebugは@code{debug-on-error}をこの値にバインドする。@ref{Trapping Errors}を参照のこと。"

#. type: defopt
#: original_texis/edebug.texi:1633
#, no-wrap
msgid "edebug-on-quit"
msgstr "edebug-on-quit"

#. type: defopt
#: original_texis/edebug.texi:1637
msgid "Edebug binds @code{debug-on-quit} to this value, if @code{debug-on-quit} was previously @code{nil}.  @xref{Trapping Errors}."
msgstr "@code{debug-on-quit}の以前の値が@code{nil}なら、Edebugは@code{debug-on-quit}にこの値をバインドする。@ref{Trapping Errors}を参照のこと。"

#. type: Plain text
#: original_texis/edebug.texi:1644
msgid "If you change the values of @code{edebug-on-error} or @code{edebug-on-quit} while Edebug is active, their values won't be used until the @emph{next} time Edebug is invoked via a new command."
msgstr "Edebugがアクティブな間に@code{edebug-on-error}か@code{edebug-on-quit}の値を変更したら、@emph{次回}に新たなコマンドを通じてEdebugが呼び出されるまでこれらの値は使用されない。"

#. type: defopt
#: original_texis/edebug.texi:1645
#, no-wrap
msgid "edebug-global-break-condition"
msgstr "edebug-global-break-condition"

#. type: defopt
#: original_texis/edebug.texi:1649
msgid "If non-@code{nil}, an expression to test for at every stop point.  If the result is non-@code{nil}, then break.  Errors are ignored.  @xref{Global Break Condition}."
msgstr "非@code{nil}なら、値はすべてのステップポイントでテストされる式である。式の結果が@code{nil}ならbreakする。エラーは無視される。@ref{Global Break Condition}を参照のこと。"
