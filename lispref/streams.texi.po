#. type: node
#: original_texis/streams.texi:6
#, no-wrap
msgid "Read and Print"
msgstr ""

#. type: chapter
#: original_texis/streams.texi:7
#, no-wrap
msgid "Reading and Printing Lisp Objects"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:12
msgid "@dfn{Printing} and @dfn{reading} are the operations of converting Lisp objects to textual form and vice versa.  They use the printed representations and read syntax described in @ref{Lisp Data Types}."
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:16
msgid "This chapter describes the Lisp functions for reading and printing.  It also describes @dfn{streams}, which specify where to get the text (if reading) or where to put it (if printing)."
msgstr ""

#. type: node
#: original_texis/streams.texi:25 original_texis/streams.texi:27
#, no-wrap
msgid "Streams Intro"
msgstr ""

#. type: menuentry
#: original_texis/streams.texi:25
msgid "Overview of streams, reading and printing."
msgstr ""

#. type: section
#: original_texis/streams.texi:25 original_texis/streams.texi:76
#: original_texis/streams.texi:77
#, no-wrap
msgid "Input Streams"
msgstr ""

#. type: menuentry
#: original_texis/streams.texi:25
msgid "Various data types that can be used as input streams."
msgstr ""

#. type: section
#: original_texis/streams.texi:25 original_texis/streams.texi:269
#: original_texis/streams.texi:270
#, no-wrap
msgid "Input Functions"
msgstr ""

#. type: menuentry
#: original_texis/streams.texi:25
msgid "Functions to read Lisp objects from text."
msgstr ""

#. type: section
#: original_texis/streams.texi:25 original_texis/streams.texi:380
#: original_texis/streams.texi:381
#, no-wrap
msgid "Output Streams"
msgstr ""

#. type: menuentry
#: original_texis/streams.texi:25
msgid "Various data types that can be used as output streams."
msgstr ""

#. type: section
#: original_texis/streams.texi:25 original_texis/streams.texi:570
#: original_texis/streams.texi:571
#, no-wrap
msgid "Output Functions"
msgstr ""

#. type: menuentry
#: original_texis/streams.texi:25
msgid "Functions to print Lisp objects as text."
msgstr ""

#. type: node
#: original_texis/streams.texi:25 original_texis/streams.texi:769
#, no-wrap
msgid "Output Variables"
msgstr ""

#. type: menuentry
#: original_texis/streams.texi:25
msgid "Variables that control what the printing functions do."
msgstr ""

#. type: node
#: original_texis/streams.texi:25 original_texis/streams.texi:993
#, no-wrap
msgid "Output Overrides"
msgstr ""

#. type: menuentry
#: original_texis/streams.texi:25
msgid "Overriding output variables."
msgstr ""

#. type: section
#: original_texis/streams.texi:28
#, no-wrap
msgid "Introduction to Reading and Printing"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:29
#, no-wrap
msgid "Lisp reader"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:30
#, no-wrap
msgid "printing"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:31
#, no-wrap
msgid "reading"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:39
msgid "@dfn{Reading} a Lisp object means parsing a Lisp expression in textual form and producing a corresponding Lisp object.  This is how Lisp programs get into Lisp from files of Lisp code.  We call the text the @dfn{read syntax} of the object.  For example, the text @samp{(a .@: 5)} is the read syntax for a cons cell whose @sc{car} is @code{a} and whose @sc{cdr} is the number 5."
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:44
msgid "@dfn{Printing} a Lisp object means producing text that represents that object---converting the object to its @dfn{printed representation} (@pxref{Printed Representation}).  Printing the cons cell described above produces the text @samp{(a .@: 5)}."
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:54
msgid "Reading and printing are more or less inverse operations: printing the object that results from reading a given piece of text often produces the same text, and reading the text that results from printing an object usually produces a similar-looking object.  For example, printing the symbol @code{foo} produces the text @samp{foo}, and reading that text returns the symbol @code{foo}.  Printing a list whose elements are @code{a} and @code{b} produces the text @samp{(a b)}, and reading that text produces a list (but not the same list) with elements @code{a} and @code{b}."
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:57
msgid "However, these two operations are not precisely inverse to each other.  There are three kinds of exceptions:"
msgstr ""

#. type: itemize
#: original_texis/streams.texi:64
msgid "Printing can produce text that cannot be read.  For example, buffers, windows, frames, subprocesses and markers print as text that starts with @samp{#}; if you try to read this text, you get an error.  There is no way to read those data types."
msgstr ""

#. type: itemize
#: original_texis/streams.texi:70
msgid "One object can have multiple textual representations.  For example, @samp{1} and @samp{01} represent the same integer, and @samp{(a b)} and @samp{(a .@: (b))} represent the same list.  Reading will accept any of the alternatives, but printing must choose one of them."
msgstr ""

#. type: itemize
#: original_texis/streams.texi:74
msgid "Comments can appear at certain points in the middle of an object's read sequence without affecting the result of reading it."
msgstr ""

#. type: cindex
#: original_texis/streams.texi:78
#, no-wrap
msgid "stream (for reading)"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:79
#, no-wrap
msgid "input stream"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:85
msgid "Most of the Lisp functions for reading text take an @dfn{input stream} as an argument.  The input stream specifies where or how to get the characters of the text to be read.  Here are the possible types of input stream:"
msgstr ""

#. type: var{#1}
#: original_texis/streams.texi:87 original_texis/streams.texi:390
#, no-wrap
msgid "buffer"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:88
#, no-wrap
msgid "buffer input stream"
msgstr ""

#. type: table
#: original_texis/streams.texi:91
msgid "The input characters are read from @var{buffer}, starting with the character directly after point.  Point advances as characters are read."
msgstr ""

#. type: var{#1}
#: original_texis/streams.texi:92 original_texis/streams.texi:395
#, no-wrap
msgid "marker"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:93
#, no-wrap
msgid "marker input stream"
msgstr ""

#. type: table
#: original_texis/streams.texi:98
msgid "The input characters are read from the buffer that @var{marker} is in, starting with the character directly after the marker.  The marker position advances as characters are read.  The value of point in the buffer has no effect when the stream is a marker."
msgstr ""

#. type: var{#1}
#: original_texis/streams.texi:99
#, no-wrap
msgid "string"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:100
#, no-wrap
msgid "string input stream"
msgstr ""

#. type: table
#: original_texis/streams.texi:103
msgid "The input characters are taken from @var{string}, starting at the first character in the string and using as many characters as required."
msgstr ""

#. type: var{#1}
#: original_texis/streams.texi:104 original_texis/streams.texi:405
#, no-wrap
msgid "function"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:105
#, no-wrap
msgid "function input stream"
msgstr ""

#. type: table
#: original_texis/streams.texi:108
msgid "The input characters are generated by @var{function}, which must support two kinds of calls:"
msgstr ""

#. type: itemize
#: original_texis/streams.texi:112
msgid "When it is called with no arguments, it should return the next character."
msgstr ""

#. type: itemize
#: original_texis/streams.texi:120
msgid "When it is called with one argument (always a character), @var{function} should save the argument and arrange to return it on the next call.  This is called @dfn{unreading} the character; it happens when the Lisp reader reads one character too many and wants to put it back where it came from.  In this case, it makes no difference what value @var{function} returns."
msgstr ""

#. type: code{#1}
#: original_texis/streams.texi:122 original_texis/streams.texi:412
#, no-wrap
msgid "t"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:123
#, no-wrap
msgid "@code{t} input stream"
msgstr ""

#. type: table
#: original_texis/streams.texi:129
msgid "@code{t} used as a stream means that the input is read from the minibuffer.  In fact, the minibuffer is invoked once and the text given by the user is made into a string that is then used as the input stream.  If Emacs is running in batch mode (@pxref{Batch Mode}), standard input is used instead of the minibuffer.  For example,"
msgstr ""

#. type: example
#: original_texis/streams.texi:131
#, no-wrap
msgid "(message \"%s\" (read t))\n"
msgstr ""

#. type: table
#: original_texis/streams.texi:134
msgid "will in batch mode read a Lisp expression from standard input and print the result to standard output."
msgstr ""

#. type: code{#1}
#: original_texis/streams.texi:135 original_texis/streams.texi:418
#, no-wrap
msgid "nil"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:136
#, no-wrap
msgid "@code{nil} input stream"
msgstr ""

#. type: table
#: original_texis/streams.texi:140
msgid "@code{nil} supplied as an input stream means to use the value of @code{standard-input} instead; that value is the @dfn{default input stream}, and must be a non-@code{nil} input stream."
msgstr ""

#. type: var{#1}
#: original_texis/streams.texi:141 original_texis/streams.texi:424
#, no-wrap
msgid "symbol"
msgstr ""

#. type: table
#: original_texis/streams.texi:144
msgid "A symbol as input stream is equivalent to the symbol's function definition (if any)."
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:148
msgid "Here is an example of reading from a stream that is a buffer, showing where point is located before and after:"
msgstr ""

#. type: group
#: original_texis/streams.texi:154
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This@point{} is the contents of foo.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:159
#, no-wrap
msgid ""
"(read (get-buffer \"foo\"))\n"
"     @result{} is\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:163
#, no-wrap
msgid ""
"(read (get-buffer \"foo\"))\n"
"     @result{} the\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:169
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the@point{} contents of foo.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:175
msgid "Note that the first read skips a space.  Reading skips any amount of whitespace preceding the significant text."
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:179
msgid "Here is an example of reading from a stream that is a marker, initially positioned at the beginning of the buffer shown.  The value read is the symbol @code{This}."
msgstr ""

#. type: group
#: original_texis/streams.texi:186
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of foo.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:191
#, no-wrap
msgid ""
"(setq m (set-marker (make-marker) 1 (get-buffer \"foo\")))\n"
"     @result{} #<marker at 1 in foo>\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:195
#, no-wrap
msgid ""
"(read m)\n"
"     @result{} This\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:199
#, no-wrap
msgid ""
"m\n"
"     @result{} #<marker at 5 in foo>   ;; @r{Before the first space.}\n"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:203
msgid "Here we read from the contents of a string:"
msgstr ""

#. type: group
#: original_texis/streams.texi:208
#, no-wrap
msgid ""
"(read \"(When in) the course\")\n"
"     @result{} (When in)\n"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:215
msgid "The following example reads from the minibuffer.  The prompt is: @w{@samp{Lisp expression: }}.  (That is always the prompt used when you read from the stream @code{t}.)  The user's input is shown following the prompt."
msgstr ""

#. type: group
#: original_texis/streams.texi:223
#, no-wrap
msgid ""
"(read t)\n"
"     @result{} 23\n"
"---------- Buffer: Minibuffer ----------\n"
"Lisp expression: @kbd{23 @key{RET}}\n"
"---------- Buffer: Minibuffer ----------\n"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:231
msgid "Finally, here is an example of a stream that is a function, named @code{useless-stream}.  Before we use the stream, we initialize the variable @code{useless-list} to a list of characters.  Then each call to the function @code{useless-stream} obtains the next character in the list or unreads a character by adding it to the front of the list."
msgstr ""

#. type: group
#: original_texis/streams.texi:236
#, no-wrap
msgid ""
"(setq useless-list (append \"XY()\" nil))\n"
"     @result{} (88 89 40 41)\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:245
#, no-wrap
msgid ""
"(defun useless-stream (&optional unread)\n"
"  (if unread\n"
"      (setq useless-list (cons unread useless-list))\n"
"    (prog1 (car useless-list)\n"
"           (setq useless-list (cdr useless-list)))))\n"
"     @result{} useless-stream\n"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:250
msgid "Now we read using the stream thus constructed:"
msgstr ""

#. type: group
#: original_texis/streams.texi:255
#, no-wrap
msgid ""
"(read 'useless-stream)\n"
"     @result{} XY\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:260
#, no-wrap
msgid ""
"useless-list\n"
"     @result{} (40 41)\n"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:268
msgid "Note that the open and close parentheses remain in the list.  The Lisp reader encountered the open parenthesis, decided that it ended the input, and unread it.  Another attempt to read from the stream at this point would read @samp{()} and return @code{nil}."
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:274
msgid "This section describes the Lisp functions and variables that pertain to reading."
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:278
msgid "In the functions below, @var{stream} stands for an input stream (see the previous section).  If @var{stream} is @code{nil} or omitted, it defaults to the value of @code{standard-input}."
msgstr ""

#. type: kindex
#: original_texis/streams.texi:279
#, no-wrap
msgid "end-of-file"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:282
msgid "An @code{end-of-file} error is signaled if reading encounters an unterminated list, vector, or string."
msgstr ""

#. type: defun
#: original_texis/streams.texi:283
#, no-wrap
msgid "read &optional stream"
msgstr ""

#. type: defun
#: original_texis/streams.texi:286
msgid "This function reads one textual Lisp expression from @var{stream}, returning it as a Lisp object.  This is the basic Lisp input function."
msgstr ""

#. type: defun
#: original_texis/streams.texi:288
#, no-wrap
msgid "read-from-string string &optional start end"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:289
#, no-wrap
msgid "string to object"
msgstr ""

#. type: defun
#: original_texis/streams.texi:294
msgid "This function reads the first textual Lisp expression from the text in @var{string}.  It returns a cons cell whose @sc{car} is that expression, and whose @sc{cdr} is an integer giving the position of the next remaining character in the string (i.e., the first one not read)."
msgstr ""

#. type: defun
#: original_texis/streams.texi:299
msgid "If @var{start} is supplied, then reading begins at index @var{start} in the string (where the first character is at index 0).  If you specify @var{end}, then reading is forced to stop just before that index, as if the rest of the string were not there."
msgstr ""

#. type: defun
#: original_texis/streams.texi:301
msgid "For example:"
msgstr ""

#. type: group
#: original_texis/streams.texi:306
#, no-wrap
msgid ""
"(read-from-string \"(setq x 55) (setq y 5)\")\n"
"     @result{} ((setq x 55) . 11)\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:310
#, no-wrap
msgid ""
"(read-from-string \"\\\"A short string\\\"\")\n"
"     @result{} (\"A short string\" . 16)\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:316
#, no-wrap
msgid ""
";; @r{Read starting at the first character.}\n"
"(read-from-string \"(list 112)\" 0)\n"
"     @result{} ((list 112) . 10)\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:321
#, no-wrap
msgid ""
";; @r{Read starting at the second character.}\n"
"(read-from-string \"(list 112)\" 1)\n"
"     @result{} (list . 5)\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:327
#, no-wrap
msgid ""
";; @r{Read starting at the seventh character,}\n"
";;   @r{and stopping at the ninth.}\n"
"(read-from-string \"(list 112)\" 6 8)\n"
"     @result{} (11 . 8)\n"
msgstr ""

#. type: defun
#: original_texis/streams.texi:331
#, no-wrap
msgid "read-positioning-symbols &optional stream"
msgstr ""

#. type: defun
#: original_texis/streams.texi:338
msgid "This function reads one textual expression from @var{stream}, like @code{read} does, but additionally positions the read symbols to the positions in @var{stream} where they occurred.  Only the symbol @code{nil} is not positioned, this for efficiency reasons.  @xref{Symbols with Position}.  This function is used by the byte compiler."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:340
#, no-wrap
msgid "standard-input"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:344
msgid "This variable holds the default input stream---the stream that @code{read} uses when the @var{stream} argument is @code{nil}.  The default is @code{t}, meaning use the minibuffer."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:346
#, no-wrap
msgid "read-circle"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:350
msgid "If non-@code{nil}, this variable enables the reading of circular and shared structures.  @xref{Circular Objects}.  Its default value is @code{t}."
msgstr ""

#. type: cindex
#: original_texis/streams.texi:352
#, no-wrap
msgid "binary I/O in batch mode"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:360
msgid "When reading or writing from the standard input/output streams of the Emacs process in batch mode, it is sometimes required to make sure any arbitrary binary data will be read/written verbatim, and/or that no translation of newlines to or from CR-LF pairs is performed.  This issue does not exist on POSIX hosts, only on MS-Windows and MS-DOS@.  The following function allows you to control the I/O mode of any standard stream of the Emacs process."
msgstr ""

#. type: defun
#: original_texis/streams.texi:361
#, no-wrap
msgid "set-binary-mode stream mode"
msgstr ""

#. type: defun
#: original_texis/streams.texi:369
msgid "Switch @var{stream} into binary or text I/O mode.  If @var{mode} is non-@code{nil}, switch to binary mode, otherwise switch to text mode.  The value of @var{stream} can be one of @code{stdin}, @code{stdout}, or @code{stderr}.  This function flushes any pending output data of @var{stream} as a side effect, and returns the previous value of I/O mode for @var{stream}.  On POSIX hosts, it always returns a non-@code{nil} value and does nothing except flushing pending output."
msgstr ""

#. type: defun
#: original_texis/streams.texi:371
#, no-wrap
msgid "readablep object"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:372
#, no-wrap
msgid "readable syntax"
msgstr ""

#. type: defun
#: original_texis/streams.texi:378
msgid "This predicate says whether @var{object} has @dfn{readable syntax}, i.e., it can be written out and then read back by the Emacs Lisp reader.  If it can't, this function returns @code{nil}; if it can, this function returns a printed representation (via @code{prin1}, @pxref{Output Functions}) of @var{object}."
msgstr ""

#. type: cindex
#: original_texis/streams.texi:382
#, no-wrap
msgid "stream (for printing)"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:383
#, no-wrap
msgid "output stream"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:388
msgid "An output stream specifies what to do with the characters produced by printing.  Most print functions accept an output stream as an optional argument.  Here are the possible types of output stream:"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:391
#, no-wrap
msgid "buffer output stream"
msgstr ""

#. type: table
#: original_texis/streams.texi:394
msgid "The output characters are inserted into @var{buffer} at point.  Point advances as characters are inserted."
msgstr ""

#. type: cindex
#: original_texis/streams.texi:396
#, no-wrap
msgid "marker output stream"
msgstr ""

#. type: table
#: original_texis/streams.texi:404
msgid "The output characters are inserted into the buffer that @var{marker} points into, at the marker position.  The marker position advances as characters are inserted.  The value of point in the buffer has no effect on printing when the stream is a marker, and this kind of printing does not move point (except that if the marker points at or before the position of point, point advances with the surrounding text, as usual)."
msgstr ""

#. type: cindex
#: original_texis/streams.texi:406
#, no-wrap
msgid "function output stream"
msgstr ""

#. type: table
#: original_texis/streams.texi:411
msgid "The output characters are passed to @var{function}, which is responsible for storing them away.  It is called with a single character as argument, as many times as there are characters to be output, and is responsible for storing the characters wherever you want to put them."
msgstr ""

#. type: cindex
#: original_texis/streams.texi:413
#, no-wrap
msgid "@code{t} output stream"
msgstr ""

#. type: table
#: original_texis/streams.texi:417
msgid "The output characters are displayed in the echo area.  If Emacs is running in batch mode (@pxref{Batch Mode}), the output is written to the standard output descriptor instead."
msgstr ""

#. type: cindex
#: original_texis/streams.texi:419
#, no-wrap
msgid "@code{nil} output stream"
msgstr ""

#. type: table
#: original_texis/streams.texi:423
msgid "@code{nil} specified as an output stream means to use the value of the @code{standard-output} variable instead; that value is the @dfn{default output stream}, and must not be @code{nil}."
msgstr ""

#. type: table
#: original_texis/streams.texi:427
msgid "A symbol as output stream is equivalent to the symbol's function definition (if any)."
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:432
msgid "Many of the valid output streams are also valid as input streams.  The difference between input and output streams is therefore more a matter of how you use a Lisp object, than of different types of object."
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:437
msgid "Here is an example of a buffer used as an output stream.  Point is initially located as shown immediately before the @samp{h} in @samp{the}.  At the end, point is located directly before that same @samp{h}."
msgstr ""

#. type: cindex
#: original_texis/streams.texi:438
#, no-wrap
msgid "print example"
msgstr ""

#. type: group
#: original_texis/streams.texi:444
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is t@point{}he contents of foo.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: example
#: original_texis/streams.texi:448
#, no-wrap
msgid ""
"(print \"This is the output\" (get-buffer \"foo\"))\n"
"     @result{} \"This is the output\"\n"
"\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:455
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is t\n"
"\"This is the output\"\n"
"@point{}he contents of foo.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:464
msgid "Now we show a use of a marker as an output stream.  Initially, the marker is in buffer @code{foo}, between the @samp{t} and the @samp{h} in the word @samp{the}.  At the end, the marker has advanced over the inserted text so that it remains positioned before the same @samp{h}.  Note that the location of point, shown in the usual fashion, has no effect."
msgstr ""

#. type: group
#: original_texis/streams.texi:470
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the @point{}output\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:475
#, no-wrap
msgid ""
"(setq m (copy-marker 10))\n"
"     @result{} #<marker at 10 in foo>\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:480
#, no-wrap
msgid ""
"(print \"More output for foo.\" m)\n"
"     @result{} \"More output for foo.\"\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:488
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is t\n"
"\"More output for foo.\"\n"
"he @point{}output\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:493
#, no-wrap
msgid ""
"m\n"
"     @result{} #<marker at 34 in foo>\n"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:497
msgid "The following example shows output to the echo area:"
msgstr ""

#. type: group
#: original_texis/streams.texi:505
#, no-wrap
msgid ""
"(print \"Echo Area output\" t)\n"
"     @result{} \"Echo Area output\"\n"
"---------- Echo Area ----------\n"
"\"Echo Area output\"\n"
"---------- Echo Area ----------\n"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:513
msgid "Finally, we show the use of a function as an output stream.  The function @code{eat-output} takes each character that it is given and conses it onto the front of the list @code{last-output} (@pxref{Building Lists}).  At the end, the list contains all the characters output, but in reverse order."
msgstr ""

#. type: group
#: original_texis/streams.texi:518
#, no-wrap
msgid ""
"(setq last-output nil)\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:524
#, no-wrap
msgid ""
"(defun eat-output (c)\n"
"  (setq last-output (cons c last-output)))\n"
"     @result{} eat-output\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:529
#, no-wrap
msgid ""
"(print \"This is the output\" #'eat-output)\n"
"     @result{} \"This is the output\"\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:535
#, no-wrap
msgid ""
"last-output\n"
"     @result{} (10 34 116 117 112 116 117 111 32 101 104\n"
"    116 32 115 105 32 115 105 104 84 34 10)\n"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:540
msgid "Now we can put the output in the proper order by reversing the list:"
msgstr ""

#. type: group
#: original_texis/streams.texi:547
#, no-wrap
msgid ""
"(concat (nreverse last-output))\n"
"     @result{} \"\n"
"\\\"This is the output\\\"\n"
"\"\n"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:553
msgid "Calling @code{concat} converts the list to a string so you can see its contents more clearly."
msgstr ""

#. type: cindex
#: original_texis/streams.texi:554
#, no-wrap
msgid "@code{stderr} stream, use for debugging"
msgstr ""

#. type: anchor{#1}
#: original_texis/streams.texi:556
msgid "external-debugging-output"
msgstr ""

#. type: defun
#: original_texis/streams.texi:556
#, no-wrap
msgid "external-debugging-output character"
msgstr ""

#. type: defun
#: original_texis/streams.texi:559
msgid "This function can be useful as an output stream when debugging.  It writes @var{character} to the standard error stream."
msgstr ""

#. type: defun
#: original_texis/streams.texi:561
msgid "For example"
msgstr ""

#. type: group
#: original_texis/streams.texi:566
#, no-wrap
msgid ""
"(print \"This is the output\" #'external-debugging-output)\n"
"@print{} This is the output\n"
"@result{} \"This is the output\"\n"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:575
msgid "This section describes the Lisp functions for printing Lisp objects---converting objects into their printed representation."
msgstr ""

#. type: cindex
#: original_texis/streams.texi:576
#, no-wrap
msgid "@samp{\"} in printing"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:577
#, no-wrap
msgid "@samp{\\} in printing"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:578
#, no-wrap
msgid "quoting characters in printing"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:579
#, no-wrap
msgid "escape characters in printing"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:587
msgid "Some of the Emacs printing functions add quoting characters to the output when necessary so that it can be read properly.  The quoting characters used are @samp{\"} and @samp{\\}; they distinguish strings from symbols, and prevent punctuation characters in strings and symbols from being taken as delimiters when reading.  @xref{Printed Representation}, for full details.  You specify quoting or no quoting by the choice of printing function."
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:593
msgid "If the text is to be read back into Lisp, then you should print with quoting characters to avoid ambiguity.  Likewise, if the purpose is to describe a Lisp object clearly for a Lisp programmer.  However, if the purpose of the output is to look nice for humans, then it is usually better to print without quoting."
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:601
msgid "Lisp objects can refer to themselves.  Printing a self-referential object in the normal way would require an infinite amount of text, and the attempt could cause infinite recursion.  Emacs detects such recursion and prints @samp{#@var{level}} instead of recursively printing an object already being printed.  For example, here @samp{#0} indicates a recursive reference to the object at level 0 of the current print operation:"
msgstr ""

#. type: example
#: original_texis/streams.texi:607
#, no-wrap
msgid ""
"(setq foo (list nil))\n"
"     @result{} (nil)\n"
"(setcar foo foo)\n"
"     @result{} (#0)\n"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:614
msgid "In the functions below, @var{stream} stands for an output stream.  (See the previous section for a description of output streams.  Also @xref{external-debugging-output}, a useful stream value for debugging.)  If @var{stream} is @code{nil} or omitted, it defaults to the value of @code{standard-output}."
msgstr ""

#. type: defun
#: original_texis/streams.texi:615
#, no-wrap
msgid "print object &optional stream"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:616
#, no-wrap
msgid "Lisp printer"
msgstr ""

#. type: defun
#: original_texis/streams.texi:621
msgid "The @code{print} function is a convenient way of printing.  It outputs the printed representation of @var{object} to @var{stream}, printing in addition one newline before @var{object} and another after it.  Quoting characters are used.  @code{print} returns @var{object}.  For example:"
msgstr ""

#. type: group
#: original_texis/streams.texi:634
#, no-wrap
msgid ""
"(progn (print 'The\\ cat\\ in)\n"
"       (print \"the hat\")\n"
"       (print \" came back\"))\n"
"     @print{}\n"
"     @print{} The\\ cat\\ in\n"
"     @print{}\n"
"     @print{} \"the hat\"\n"
"     @print{}\n"
"     @print{} \" came back\"\n"
"     @result{} \" came back\"\n"
msgstr ""

#. type: defun
#: original_texis/streams.texi:638
#, no-wrap
msgid "prin1 object &optional stream overrides"
msgstr ""

#. type: defun
#: original_texis/streams.texi:643
msgid "This function outputs the printed representation of @var{object} to @var{stream}.  It does not print newlines to separate output as @code{print} does, but it does use quoting characters just like @code{print}.  It returns @var{object}."
msgstr ""

#. type: group
#: original_texis/streams.texi:651
#, no-wrap
msgid ""
"(progn (prin1 'The\\ cat\\ in)\n"
"       (prin1 \"the hat\")\n"
"       (prin1 \" came back\"))\n"
"     @print{} The\\ cat\\ in\"the hat\"\" came back\"\n"
"     @result{} \" came back\"\n"
msgstr ""

#. type: defun
#: original_texis/streams.texi:657
msgid "If @var{overrides} is non-@code{nil}, it should either be @code{t} (which tells @code{prin1} to use the defaults for all printer related variables), or a list of settings.  @xref{Output Overrides}, for details."
msgstr ""

#. type: defun
#: original_texis/streams.texi:659
#, no-wrap
msgid "princ object &optional stream"
msgstr ""

#. type: defun
#: original_texis/streams.texi:662
msgid "This function outputs the printed representation of @var{object} to @var{stream}.  It returns @var{object}."
msgstr ""

#. type: defun
#: original_texis/streams.texi:667
msgid "This function is intended to produce output that is readable by people, not by @code{read}, so it doesn't insert quoting characters and doesn't put double-quotes around the contents of strings.  It does not add any spacing between calls."
msgstr ""

#. type: group
#: original_texis/streams.texi:675
#, no-wrap
msgid ""
"(progn\n"
"  (princ 'The\\ cat)\n"
"  (princ \" in the \\\"hat\\\"\"))\n"
"     @print{} The cat in the \"hat\"\n"
"     @result{} \" in the \\\"hat\\\"\"\n"
msgstr ""

#. type: defun
#: original_texis/streams.texi:679
#, no-wrap
msgid "terpri &optional stream ensure"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:680
#, no-wrap
msgid "newline in print"
msgstr ""

#. type: defun
#: original_texis/streams.texi:686
msgid "This function outputs a newline to @var{stream}.  The name stands for ``terminate print''.  If @var{ensure} is non-@code{nil} no newline is printed if @var{stream} is already at the beginning of a line.  Note in this case @var{stream} can not be a function and an error is signaled if it is.  This function returns @code{t} if a newline is printed."
msgstr ""

#. type: defun
#: original_texis/streams.texi:688
#, no-wrap
msgid "write-char character &optional stream"
msgstr ""

#. type: defun
#: original_texis/streams.texi:691
msgid "This function outputs @var{character} to @var{stream}.  It returns @var{character}."
msgstr ""

#. type: defun
#: original_texis/streams.texi:693
#, no-wrap
msgid "flush-standard-output"
msgstr ""

#. type: defun
#: original_texis/streams.texi:700
msgid "If you have Emacs-based batch scripts that send output to the terminal, Emacs will automatically display the output whenever you write a newline characters to @code{standard-output}.  This function allows you to flush to @code{standard-output} without sending a newline character first, which enables you to display incomplete lines."
msgstr ""

#. type: defun
#: original_texis/streams.texi:702
#, no-wrap
msgid "prin1-to-string object &optional noescape overrides"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:703
#, no-wrap
msgid "object to string"
msgstr ""

#. type: defun
#: original_texis/streams.texi:706
msgid "This function returns a string containing the text that @code{prin1} would have printed for the same argument."
msgstr ""

#. type: group
#: original_texis/streams.texi:711
#, no-wrap
msgid ""
"(prin1-to-string 'foo)\n"
"     @result{} \"foo\"\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:715
#, no-wrap
msgid ""
"(prin1-to-string (mark-marker))\n"
"     @result{} \"#<marker at 2773 in strings.texi>\"\n"
msgstr ""

#. type: example
#: original_texis/streams.texi:720
#, no-wrap
msgid ""
"If @var{overrides} is non-@code{nil}, it should either be @code{t}\n"
"(which tells @code{prin1} to use the defaults for all printer related\n"
"variables), or a list of settings.  @xref{Output Overrides}, for details.\n"
msgstr ""

#. type: defun
#: original_texis/streams.texi:725
msgid "If @var{noescape} is non-@code{nil}, that inhibits use of quoting characters in the output.  (This argument is supported in Emacs versions 19 and later.)"
msgstr ""

#. type: group
#: original_texis/streams.texi:730
#, no-wrap
msgid ""
"(prin1-to-string \"foo\")\n"
"     @result{} \"\\\"foo\\\"\"\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:734
#, no-wrap
msgid ""
"(prin1-to-string \"foo\" t)\n"
"     @result{} \"foo\"\n"
msgstr ""

#. type: defun
#: original_texis/streams.texi:739
msgid "See @code{format}, in @ref{Formatting Strings}, for other ways to obtain the printed representation of a Lisp object as a string."
msgstr ""

#. type: defmac
#: original_texis/streams.texi:741
#, no-wrap
msgid "with-output-to-string body@dots{}"
msgstr ""

#. type: defmac
#: original_texis/streams.texi:744
msgid "This macro executes the @var{body} forms with @code{standard-output} set up to feed output into a string.  Then it returns that string."
msgstr ""

#. type: defmac
#: original_texis/streams.texi:746
msgid "For example, if the current buffer name is @samp{foo},"
msgstr ""

#. type: example
#: original_texis/streams.texi:751
#, no-wrap
msgid ""
"(with-output-to-string\n"
"  (princ \"The buffer is \")\n"
"  (princ (buffer-name)))\n"
msgstr ""

#. type: defmac
#: original_texis/streams.texi:755
msgid "returns @code{\"The buffer is foo\"}."
msgstr ""

#. type: cindex
#: original_texis/streams.texi:757
#, no-wrap
msgid "pretty-printer"
msgstr ""

#. type: defun
#: original_texis/streams.texi:758
#, no-wrap
msgid "pp object &optional stream"
msgstr ""

#. type: defun
#: original_texis/streams.texi:762
msgid "This function outputs @var{object} to @var{stream}, just like @code{prin1}, but does it in a prettier way.  That is, it'll indent and fill the object to make it more readable for humans."
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:768
msgid "If you need to use binary I/O in batch mode, e.g., use the functions described in this section to write out arbitrary binary data or avoid conversion of newlines on non-POSIX hosts, see @ref{Input Functions, set-binary-mode}."
msgstr ""

#. type: section
#: original_texis/streams.texi:770
#, no-wrap
msgid "Variables Affecting Output"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:771
#, no-wrap
msgid "output-controlling variables"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:773
#, no-wrap
msgid "standard-output"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:777
msgid "The value of this variable is the default output stream---the stream that print functions use when the @var{stream} argument is @code{nil}.  The default is @code{t}, meaning display in the echo area."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:779
#, no-wrap
msgid "print-quoted"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:784
msgid "If this is non-@code{nil}, that means to print quoted forms using abbreviated reader syntax, e.g., @code{(quote foo)} prints as @code{'foo}, and @code{(function foo)} as @code{#'foo}.  The default is @code{t}."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:786
#, no-wrap
msgid "print-escape-newlines"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:787
#, no-wrap
msgid "@samp{\\n} in print"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:788
#, no-wrap
msgid "escape characters"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:792
msgid "If this variable is non-@code{nil}, then newline characters in strings are printed as @samp{\\n} and formfeeds are printed as @samp{\\f}.  Normally these characters are printed as actual newlines and formfeeds."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:796
msgid "This variable affects the print functions @code{prin1} and @code{print} that print with quoting.  It does not affect @code{princ}.  Here is an example using @code{prin1}:"
msgstr ""

#. type: group
#: original_texis/streams.texi:804
#, no-wrap
msgid ""
"(prin1 \"a\\nb\")\n"
"     @print{} \"a\n"
"     @print{} b\"\n"
"     @result{} \"a\n"
"b\"\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:812
#, no-wrap
msgid ""
"(let ((print-escape-newlines t))\n"
"  (prin1 \"a\\nb\"))\n"
"     @print{} \"a\\nb\"\n"
"     @result{} \"a\n"
"b\"\n"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:819
msgid "In the second expression, the local binding of @code{print-escape-newlines} is in effect during the call to @code{prin1}, but not during the printing of the result."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:821
#, no-wrap
msgid "print-escape-control-characters"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:827
msgid "If this variable is non-@code{nil}, control characters in strings are printed as backslash sequences by the print functions @code{prin1} and @code{print} that print with quoting.  If this variable and @code{print-escape-newlines} are both non-@code{nil}, the latter takes precedences for newlines and formfeeds."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:829
#, no-wrap
msgid "print-escape-nonascii"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:834
msgid "If this variable is non-@code{nil}, then unibyte non-@acronym{ASCII} characters in strings are unconditionally printed as backslash sequences by the print functions @code{prin1} and @code{print} that print with quoting."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:838
msgid "Those functions also use backslash sequences for unibyte non-@acronym{ASCII} characters, regardless of the value of this variable, when the output stream is a multibyte buffer or a marker pointing into one."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:840
#, no-wrap
msgid "print-escape-multibyte"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:845
msgid "If this variable is non-@code{nil}, then multibyte non-@acronym{ASCII} characters in strings are unconditionally printed as backslash sequences by the print functions @code{prin1} and @code{print} that print with quoting."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:850
msgid "Those functions also use backslash sequences for multibyte non-@acronym{ASCII} characters, regardless of the value of this variable, when the output stream is a unibyte buffer or a marker pointing into one."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:852
#, no-wrap
msgid "print-charset-text-property"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:856
msgid "This variable controls printing of `charset' text property on printing a string.  The value should be @code{nil}, @code{t}, or @code{default}."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:859
msgid "If the value is @code{nil}, @code{charset} text properties are never printed.  If @code{t}, they are always printed."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:865
msgid "If the value is @code{default}, only print @code{charset} text properties if there is an ``unexpected'' @code{charset} property.  For ascii characters, all charsets are considered ``expected''.  Otherwise, the expected @code{charset} property of a character is given by @code{char-charset}."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:867
#, no-wrap
msgid "print-length"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:868
#, no-wrap
msgid "printing limits"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:872
msgid "The value of this variable is the maximum number of elements to print in any list, vector or bool-vector.  If an object being printed has more than this many elements, it is abbreviated with an ellipsis."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:874
msgid "If the value is @code{nil} (the default), then there is no limit."
msgstr ""

#. type: group
#: original_texis/streams.texi:879
#, no-wrap
msgid ""
"(setq print-length 2)\n"
"     @result{} 2\n"
msgstr ""

#. type: group
#: original_texis/streams.texi:884
#, no-wrap
msgid ""
"(print '(1 2 3 4 5))\n"
"     @print{} (1 2 ...)\n"
"     @result{} (1 2 ...)\n"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:888
#, no-wrap
msgid "print-level"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:893
msgid "The value of this variable is the maximum depth of nesting of parentheses and brackets when printed.  Any list or vector at a depth exceeding this limit is abbreviated with an ellipsis.  A value of @code{nil} (which is the default) means no limit."
msgstr ""

#. type: defopt
#: original_texis/streams.texi:895
#, no-wrap
msgid "eval-expression-print-length"
msgstr ""

#. type: defoptx
#: original_texis/streams.texi:896
#, no-wrap
msgid "eval-expression-print-level"
msgstr ""

#. type: defopt
#: original_texis/streams.texi:901
msgid "These are the values for @code{print-length} and @code{print-level} used by @code{eval-expression}, and thus, indirectly, by many interactive evaluation commands (@pxref{Lisp Eval,, Evaluating Emacs Lisp Expressions, emacs, The GNU Emacs Manual})."
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:905
msgid "These variables are used for detecting and reporting circular and shared structure:"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:906
#, no-wrap
msgid "print-circle"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:909
msgid "If non-@code{nil}, this variable enables detection of circular and shared structure in printing.  @xref{Circular Objects}."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:911
#, no-wrap
msgid "print-unreadable-function"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:914
msgid "By default, Emacs prints unreadable objects as @samp{#<...>\"}.  For instance:"
msgstr ""

#. type: example
#: original_texis/streams.texi:918
#, no-wrap
msgid ""
"(prin1-to-string (make-marker))\n"
"     @result{} \"#<marker in no buffer>\"\n"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:924
msgid "If this variable is non-@code{nil}, it should be a function that will be called to handle printing of these objects.  The function will be called with two arguments: the object and the @var{noescape} flag used by the printing functions (@pxref{Output Functions})."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:928
msgid "The function should return either @code{nil} (print the object as usual), or a string (which will be printed), or any other object (don't print the object).  For instance:"
msgstr ""

#. type: example
#: original_texis/streams.texi:934
#, no-wrap
msgid ""
"(let ((print-unreadable-function\n"
"       (lambda (object escape) \"hello\")))\n"
"  (prin1-to-string (make-marker)))\n"
"     @result{} \"hello\"\n"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:937
#, no-wrap
msgid "print-gensym"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:942
msgid "If non-@code{nil}, this variable enables detection of uninterned symbols (@pxref{Creating Symbols}) in printing.  When this is enabled, uninterned symbols print with the prefix @samp{#:}, which tells the Lisp reader to produce an uninterned symbol."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:944
#, no-wrap
msgid "print-continuous-numbering"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:951
msgid "If non-@code{nil}, that means number continuously across print calls.  This affects the numbers printed for @samp{#@var{n}=} labels and @samp{#@var{m}#} references.  Don't set this variable with @code{setq}; you should only bind it temporarily to @code{t} with @code{let}.  When you do that, you should also bind @code{print-number-table} to @code{nil}."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:953
#, no-wrap
msgid "print-number-table"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:957
msgid "This variable holds a vector used internally by printing to implement the @code{print-circle} feature.  You should not use it except to bind it to @code{nil} when you bind @code{print-continuous-numbering}."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:959
#, no-wrap
msgid "float-output-format"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:963
msgid "This variable specifies how to print floating-point numbers.  The default is @code{nil}, meaning use the shortest output that represents the number without losing information."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:968
msgid "To control output format more precisely, you can put a string in this variable.  The string should hold a @samp{%}-specification to be used in the C function @code{sprintf}.  For further restrictions on what you can use, see the variable's documentation string."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:970
#, no-wrap
msgid "print-integers-as-characters"
msgstr ""

#. type: defvar
#: original_texis/streams.texi:976
msgid "When this variable is non-@code{nil}, integers that represent graphic base characters will be printed using Lisp character syntax (@pxref{Basic Char Syntax}).  Other numbers are printed the usual way.  For example, the list @code{(4 65 -1 10)} would be printed as @samp{(4 ?A -1 ?\\n)}."
msgstr ""

#. type: defvar
#: original_texis/streams.texi:982
msgid "More precisely, values printed in character syntax are those representing characters belonging to the Unicode general categories Letter, Number, Punctuation, Symbol and Private-use (@pxref{Character Properties}), as well as the control characters having their own escape syntax such as newline."
msgstr ""

#. type: defopt
#: original_texis/streams.texi:984
#, no-wrap
msgid "pp-default-function"
msgstr ""

#. type: defopt
#: original_texis/streams.texi:991
msgid "This user variable specifies the function used by @code{pp} to prettify its output.  By default it uses @code{pp-fill} which attempts to strike a good balance between speed and generating natural looking output that fits within @code{fill-column}.  The previous default was @code{pp-28}, which tends to be faster but generate output that looks less natural and is less compact."
msgstr ""

#. type: section
#: original_texis/streams.texi:994
#, no-wrap
msgid "Overriding Output Variables"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:995
#, no-wrap
msgid "overrides, in output functions"
msgstr ""

#. type: cindex
#: original_texis/streams.texi:996
#, no-wrap
msgid "output variables, overriding"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:1005
msgid "The previous section (@pxref{Output Variables}) lists the numerous variables that control how the Emacs Lisp printer formats data for outputs.  These are generally available for users to change, but sometimes you want to output data in the default format, or override the user settings in some other way.  For instance, if you're storing Emacs Lisp data in a file, you don't want that data to be shortened by a @code{print-length} setting."
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:1014
msgid "The @code{prin1} and @code{prin1-to-string} functions therefore have an optional @var{overrides} argument.  This argument can either be @code{t} (which means that all printing variables should be reset to the default values), or a list of settings for some of the variables.  Each element in the list can be either @code{t} (which means ``reset to defaults'', and will usually be the first element of the list), or a pair whose @code{car} is a symbol that stands for an output variable and whose @code{cdr} is the value for that variable."
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:1016
msgid "For instance, this prints using nothing but defaults:"
msgstr ""

#. type: lisp
#: original_texis/streams.texi:1019
#, no-wrap
msgid "(prin1 object nil t)\n"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:1023
msgid "This prints @var{object} using the current printing settings, but overrides the value of @code{print-length} to be 5:"
msgstr ""

#. type: lisp
#: original_texis/streams.texi:1026
#, no-wrap
msgid "(prin1 object nil '((length . 5)))\n"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:1030
msgid "And finally, this prints @var{object} using only default settings, but with @code{print-length} bound to 5:"
msgstr ""

#. type: lisp
#: original_texis/streams.texi:1033
#, no-wrap
msgid "(prin1 object nil '(t (length . 5)))\n"
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:1037
msgid "Below is a list of symbols that can be used, and which variables they map to:"
msgstr ""

#. type: item
#: original_texis/streams.texi:1039
#, no-wrap
msgid "length"
msgstr ""

#. type: table
#: original_texis/streams.texi:1041
msgid "This overrides @code{print-length}."
msgstr ""

#. type: item
#: original_texis/streams.texi:1041
#, no-wrap
msgid "level"
msgstr ""

#. type: table
#: original_texis/streams.texi:1043
msgid "This overrides @code{print-level}."
msgstr ""

#. type: item
#: original_texis/streams.texi:1043
#, no-wrap
msgid "circle"
msgstr ""

#. type: table
#: original_texis/streams.texi:1045
msgid "This overrides @code{print-circle}."
msgstr ""

#. type: item
#: original_texis/streams.texi:1045
#, no-wrap
msgid "quoted"
msgstr ""

#. type: table
#: original_texis/streams.texi:1047
msgid "This overrides @code{print-quoted}."
msgstr ""

#. type: item
#: original_texis/streams.texi:1047
#, no-wrap
msgid "escape-newlines"
msgstr ""

#. type: table
#: original_texis/streams.texi:1049
msgid "This overrides @code{print-escape-newlines}."
msgstr ""

#. type: item
#: original_texis/streams.texi:1049
#, no-wrap
msgid "escape-control-characters"
msgstr ""

#. type: table
#: original_texis/streams.texi:1051
msgid "This overrides @code{print-escape-control-characters}."
msgstr ""

#. type: item
#: original_texis/streams.texi:1051
#, no-wrap
msgid "escape-nonascii"
msgstr ""

#. type: table
#: original_texis/streams.texi:1053
msgid "This overrides @code{print-escape-nonascii}."
msgstr ""

#. type: item
#: original_texis/streams.texi:1053
#, no-wrap
msgid "escape-multibyte"
msgstr ""

#. type: table
#: original_texis/streams.texi:1055
msgid "This overrides @code{print-escape-multibyte}."
msgstr ""

#. type: item
#: original_texis/streams.texi:1055
#, no-wrap
msgid "charset-text-property"
msgstr ""

#. type: table
#: original_texis/streams.texi:1057
msgid "This overrides @code{print-charset-text-property}."
msgstr ""

#. type: item
#: original_texis/streams.texi:1057
#, no-wrap
msgid "unreadeable-function"
msgstr ""

#. type: table
#: original_texis/streams.texi:1059
msgid "This overrides @code{print-unreadable-function}."
msgstr ""

#. type: item
#: original_texis/streams.texi:1059
#, no-wrap
msgid "gensym"
msgstr ""

#. type: table
#: original_texis/streams.texi:1061
msgid "This overrides @code{print-gensym}."
msgstr ""

#. type: item
#: original_texis/streams.texi:1061
#, no-wrap
msgid "continuous-numbering"
msgstr ""

#. type: table
#: original_texis/streams.texi:1063
msgid "This overrides @code{print-continuous-numbering}."
msgstr ""

#. type: item
#: original_texis/streams.texi:1063
#, no-wrap
msgid "number-table"
msgstr ""

#. type: table
#: original_texis/streams.texi:1065
msgid "This overrides @code{print-number-table}."
msgstr ""

#. type: item
#: original_texis/streams.texi:1065
#, no-wrap
msgid "float-format"
msgstr ""

#. type: table
#: original_texis/streams.texi:1067
msgid "This overrides @code{float-output-format}."
msgstr ""

#. type: item
#: original_texis/streams.texi:1067
#, no-wrap
msgid "integers-as-characters"
msgstr ""

#. type: table
#: original_texis/streams.texi:1069
msgid "This overrides @code{print-integers-as-characters}."
msgstr ""

#. type: Plain text
#: original_texis/streams.texi:1072
msgid "In the future, more overrides may be offered that do not map directly to a variable, but can only be used via this parameter."
msgstr ""
