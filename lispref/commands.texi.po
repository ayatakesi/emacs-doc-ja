# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Emacs 26.1\n"
"POT-Creation-Date: 2024-06-30 07:14+0000\n"
"PO-Revision-Date: 2024-06-27 12:42+0900\n"
"Last-Translator: Ayanokoji Takesi <ayanokoji.takesi@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"00:42+0900\n"

#. type: chapter
#: original_texis/commands.texi:6 original_texis/commands.texi:7
#, no-wrap
msgid "Command Loop"
msgstr "Command Loop"

#. type: cindex
#: original_texis/commands.texi:8
#, no-wrap
msgid "editor command loop"
msgstr "editor command loop"

#. type: cindex
#: original_texis/commands.texi:9
#, no-wrap
msgid "command loop"
msgstr "command loop"

#. type: Plain text
#: original_texis/commands.texi:15
msgid "When you run Emacs, it enters the @dfn{editor command loop} almost immediately.  This loop reads key sequences, executes their definitions, and displays the results.  In this chapter, we describe how these things are done, and the subroutines that allow Lisp programs to do them."
msgstr "Emacsを実行すると、ほぼ即座に@dfn{エディターコマンドループ(editor command loop)}に移行します。このループはキーシーケンスを読み取り、それらの定義を実行して結果を表示します。このチャプターではこれらが行われる方法と、Lispプログラムがこれらを行えるようにするサブルーチンを説明します。"

#. type: node
#: original_texis/commands.texi:34 original_texis/commands.texi:36
#, no-wrap
msgid "Command Overview"
msgstr "Command Overview"

#. type: menuentry
#: original_texis/commands.texi:34
msgid "How the command loop reads commands."
msgstr "コマンドループがコマンドを読み取る方法。"

#. type: section
#: original_texis/commands.texi:34 original_texis/commands.texi:108
#: original_texis/commands.texi:109
#, no-wrap
msgid "Defining Commands"
msgstr "Defining Commands"

#. type: menuentry
#: original_texis/commands.texi:34
msgid "Specifying how a function should read arguments."
msgstr "関数が引数を読み取る方法を指定する。"

#. type: section
#: original_texis/commands.texi:34 original_texis/commands.texi:786
#: original_texis/commands.texi:787
#, no-wrap
msgid "Interactive Call"
msgstr "Interactive Call"

#. type: menuentry
#: original_texis/commands.texi:34
msgid "Calling a command, so that it will read arguments."
msgstr "引数を読み取るようにコマンドを呼び出す。"

#. type: node
#: original_texis/commands.texi:34 original_texis/commands.texi:958
#, no-wrap
msgid "Distinguish Interactive"
msgstr "Distinguish Interactive"

#. type: menuentry
#: original_texis/commands.texi:34
msgid "Making a command distinguish interactive calls."
msgstr "インタラクティブな呼び出しとコマンドを区別する。"

#. type: node
#: original_texis/commands.texi:34 original_texis/commands.texi:1048
#, no-wrap
msgid "Command Loop Info"
msgstr "Command Loop Info"

#. type: menuentry
#: original_texis/commands.texi:34
msgid "Variables set by the command loop for you to examine."
msgstr "検証用にコマンドループによりセットされる変数。"

#. type: node
#: original_texis/commands.texi:34 original_texis/commands.texi:1299
#, no-wrap
msgid "Adjusting Point"
msgstr "Adjusting Point"

#. type: menuentry
#: original_texis/commands.texi:34
msgid "Adjustment of point after a command."
msgstr "コマンドの後にポイント位置を調整する。"

#. type: section
#: original_texis/commands.texi:34 original_texis/commands.texi:1330
#: original_texis/commands.texi:1331
#, no-wrap
msgid "Input Events"
msgstr "Input Events"

#. type: menuentry
#: original_texis/commands.texi:34
msgid "What input looks like when you read it."
msgstr "入力を読み取るとき、入力がどのように見えるか。"

#. type: section
#: original_texis/commands.texi:34 original_texis/commands.texi:2952
#: original_texis/commands.texi:2953
#, no-wrap
msgid "Reading Input"
msgstr "Reading Input"

#. type: menuentry
#: original_texis/commands.texi:34
msgid "How to read input events from the keyboard or mouse."
msgstr "キーボードやマウスからの入力イベントを読み取る方法。"

#. type: section
#: original_texis/commands.texi:34 original_texis/commands.texi:3652
#: original_texis/commands.texi:3653
#, no-wrap
msgid "Special Events"
msgstr "Special Events"

#. type: menuentry
#: original_texis/commands.texi:34
msgid "Events processed immediately and individually."
msgstr "即座かつ個別に処理されるイベント。"

#. type: node
#: original_texis/commands.texi:34 original_texis/commands.texi:3680
#, no-wrap
msgid "Waiting"
msgstr "Waiting"

#. type: menuentry
#: original_texis/commands.texi:34
msgid "Waiting for user input or elapsed time."
msgstr "ユーザー入力または経過時間の待機。"

#. type: section
#: original_texis/commands.texi:34 original_texis/commands.texi:3741
#: original_texis/commands.texi:3742
#, no-wrap
msgid "Quitting"
msgstr "Quitting"

#. type: menuentry
#: original_texis/commands.texi:34
msgid "How @kbd{C-g} works.  How to catch or defer quitting."
msgstr "@kbd{C-g}が機能する方法。quitのcatchや延期する方法。"

#. type: section
#: original_texis/commands.texi:34 original_texis/commands.texi:3873
#: original_texis/commands.texi:3874
#, no-wrap
msgid "Prefix Command Arguments"
msgstr "Prefix Command Arguments"

#. type: menuentry
#: original_texis/commands.texi:34
msgid "How the commands to set prefix args work."
msgstr "コマンドがプレフィクス引数が機能するようにセットするための方法。"

#. type: section
#: original_texis/commands.texi:34 original_texis/commands.texi:4013
#: original_texis/commands.texi:4014
#, no-wrap
msgid "Recursive Editing"
msgstr "Recursive Editing"

#. type: menuentry
#: original_texis/commands.texi:34
msgid "Entering a recursive edit, and why you usually shouldn't."
msgstr "再帰編集への移行と、なぜ通常は再帰編集を行うべきでないのか。"

#. type: section
#: original_texis/commands.texi:34 original_texis/commands.texi:4136
#: original_texis/commands.texi:4137
#, no-wrap
msgid "Disabling Commands"
msgstr "Disabling Commands"

#. type: menuentry
#: original_texis/commands.texi:34
msgid "How the command loop handles disabled commands."
msgstr "コマンドループが無効なコマンドを扱う方法。"

#. type: section
#: original_texis/commands.texi:34 original_texis/commands.texi:4206
#: original_texis/commands.texi:4207
#, no-wrap
msgid "Command History"
msgstr "Command History"

#. type: menuentry
#: original_texis/commands.texi:34
msgid "How the command history is set up, and how accessed."
msgstr "コマンドヒストリーがセットアップされる方法と、どのようにアクセスされるか。"

#. type: section
#: original_texis/commands.texi:34 original_texis/commands.texi:4249
#: original_texis/commands.texi:4250
#, no-wrap
msgid "Keyboard Macros"
msgstr "Keyboard Macros"

#. type: menuentry
#: original_texis/commands.texi:34
msgid "How keyboard macros are implemented."
msgstr "キーボードマクロが実装される方法。"

#. type: section
#: original_texis/commands.texi:37
#, no-wrap
msgid "Command Loop Overview"
msgstr "Command Loop Overview"

#. type: Plain text
#: original_texis/commands.texi:46
msgid "The first thing the command loop must do is read a key sequence, which is a sequence of input events that translates into a command.  It does this by calling the function @code{read-key-sequence}.  Lisp programs can also call this function (@pxref{Key Sequence Input}).  They can also read input at a lower level with @code{read-key} or @code{read-event} (@pxref{Reading One Event}), or discard pending input with @code{discard-input} (@pxref{Event Input Misc})."
msgstr "コマンドループが最初に行わなければならないのはキーシーケンスの読み取りです。キーシーケンスはコマンドに変換される入力イベントのシーケンスです。これは関数@code{read-key-sequence}を呼び出すことによって行われます。Lispプログラムもこの関数を呼び出すことができます(@ref{Key Sequence Input}を参照)。これらはより低レベルの@code{read-key}や@code{read-event} (@ref{Reading One Event})で入力を読み取ったり、@code{discard-input} (@ref{Event Input Misc}を参照)で保留中の入力を無視することもできます。"

#. type: Plain text
#: original_texis/commands.texi:53
msgid "The key sequence is translated into a command through the currently active keymaps.  @xref{Key Lookup}, for information on how this is done.  The result should be a keyboard macro or an interactively callable function.  If the key is @kbd{M-x}, then it reads the name of another command, which it then calls.  This is done by the command @code{execute-extended-command} (@pxref{Interactive Call})."
msgstr "キーシーケンスはカレントでアクティブなキーマップを通じてコマンドに変換されます。これが行われる方法については@ref{Key Lookup}を参照してください。結果はキーボードマクロかインタラクティブに呼び出し可能な関数になります。キーが@kbd{M-x}なら他のコマンドの名前を読み取って、それを呼び出します。これはコマンド@code{execute-extended-command} (@ref{Interactive Call}を参照)により行われます。"

#. type: Plain text
#: original_texis/commands.texi:56
msgid "Prior to executing the command, Emacs runs @code{undo-boundary} to create an undo boundary.  @xref{Maintaining Undo}."
msgstr "コマンドの実行に先立ち、Emacsはアンドゥ境界(undo boundary)を作成するために@code{undo-boundary}を実行します。@ref{Maintaining Undo}を参照してください。"

#. type: Plain text
#: original_texis/commands.texi:68
msgid "To execute a command, Emacs first reads its arguments by calling @code{command-execute} (@pxref{Interactive Call}).  For commands written in Lisp, the @code{interactive} specification says how to read the arguments.  This may use the prefix argument (@pxref{Prefix Command Arguments}) or may read with prompting in the minibuffer (@pxref{Minibuffers}).  For example, the command @code{find-file} has an @code{interactive} specification which says to read a file name using the minibuffer.  The function body of @code{find-file} does not use the minibuffer, so if you call @code{find-file} as a function from Lisp code, you must supply the file name string as an ordinary Lisp function argument."
msgstr "コマンドを実行するために、Emacsはまず@code{command-execute}を呼び出してコマンドの引数を読み取ります(@ref{Interactive Call}を参照)。Lispで記述されたコマンドについては、@code{interactive}指定で引数を読み取る方法を指定します。これはプレフィクス引数(@ref{Prefix Command Arguments}を参照)を使用したり、ミニバッファー内(@ref{Minibuffers}を参照)で確認を求めて読み取りを行うかもしれません。たとえばコマンド@code{find-file}には@code{interactive}指定があり、これはミニバッファーを使用してファイル名を読み取ることを指定します。@code{find-file}の関数bodyはミニバッファーを使用しないので、Lispコードから関数として@code{find-file}を呼び出す場合には、通常のLisp関数引数としてファイル名を文字列で与えなければなりません。"

#. type: Plain text
#: original_texis/commands.texi:72
msgid "If the command is a keyboard macro (i.e., a string or vector), Emacs executes it using @code{execute-kbd-macro} (@pxref{Keyboard Macros})."
msgstr "コマンドがキーボードマクロ(文字列やベクター)なら、Emacsは@code{execute-kbd-macro}を使用してそれを実行します(@ref{Keyboard Macros}を参照)。"

#. type: defvar
#: original_texis/commands.texi:73
#, no-wrap
msgid "pre-command-hook"
msgstr "pre-command-hook"

#. type: defvar
#: original_texis/commands.texi:78
msgid "This normal hook is run by the editor command loop before it executes each command.  At that time, @code{this-command} contains the command that is about to run, and @code{last-command} describes the previous command.  @xref{Command Loop Info}."
msgstr "このノーマルフックはコマンドを実行する前に、エディターコマンドループにより実行される。その際、@code{this-command}には実行しようとするコマンドが含まれ、@code{last-command}には前のコマンドが記述される。@ref{Command Loop Info}を参照のこと。"

#. type: defvar
#: original_texis/commands.texi:80
#, no-wrap
msgid "post-command-hook"
msgstr "post-command-hook"

#. type: defvar
#: original_texis/commands.texi:86
msgid "This normal hook is run by the editor command loop after it executes each command (including commands terminated prematurely by quitting or by errors).  At that time, @code{this-command} refers to the command that just ran, and @code{last-command} refers to the command before that."
msgstr "このノーマルフックはコマンドを実行した後(quitやエラーにより早期に終了させられたコマンドを含む)に、エディターコマンドループにより実行される。その際、@code{this-command}は正に実行されたコマンド、@code{last-command}は前に実行されたコマンドを参照する。"

#. type: defvar
#: original_texis/commands.texi:90
msgid "This hook is also run when Emacs first enters the command loop (at which point @code{this-command} and @code{last-command} are both @code{nil})."
msgstr "このフックはEmacsが最初にコマンドループにエンターしたときにも実行される(その時点では@code{this-command}と@code{last-command}はいずれも@code{nil})。"

#. type: Plain text
#: original_texis/commands.texi:97
msgid "Quitting is suppressed while running @code{pre-command-hook} and @code{post-command-hook}.  If an error happens while executing one of these hooks, it does not terminate execution of the hook; instead the error is silenced and the function in which the error occurred is removed from the hook."
msgstr "@code{pre-command-hook}と@code{post-command-hook}の実行中は、quitは抑制されます。これらのフックのいずれかを実行中にエラーが発生しても、そのエラーはフックの実行を終了させません。そのかわりにエラーは黙殺されて、エラーが発生した関数はそのフックから取り除かれます。"

#. type: Plain text
#: original_texis/commands.texi:101
msgid "A request coming into the Emacs server (@pxref{Emacs Server,,, emacs, The GNU Emacs Manual}) runs these two hooks just as a keyboard command does."
msgstr "Emacsサーバー(@ref{Emacs Server,,, emacs, The GNU Emacs Manual}を参照)に届くリクエストは、キーボードコマンドが行うのと同じように、これらの2つのフックを実行します。"

#. type: Plain text
#: original_texis/commands.texi:107
msgid "Note that, when the buffer text includes very long lines, these two hooks are called as if they were in a @code{with-restriction} form (@pxref{Narrowing}), with a @code{long-line-optimizations-in-command-hooks} label and with the buffer narrowed to a portion around point."
msgstr "バッファーのテキストに非常に長い行が含まれている場合には、これら2つのフックはあたかもポイント周辺の一部にナローイングされて、@code{long-line-optimizations-in-command-hooks}のラベルが付された@code{with-restriction}フォーム(@ref{Narrowing}を参照)の内部であるかのように呼び出されることに注意してください。"

#. type: cindex
#: original_texis/commands.texi:110
#, no-wrap
msgid "defining commands"
msgstr "defining commands"

#. type: cindex
#: original_texis/commands.texi:111
#, no-wrap
msgid "commands, defining"
msgstr "commands, defining"

#. type: cindex
#: original_texis/commands.texi:112
#, no-wrap
msgid "functions, making them interactive"
msgstr "functions, making them interactive"

#. type: cindex
#: original_texis/commands.texi:113
#, no-wrap
msgid "interactive function"
msgstr "interactive function"

#. type: Plain text
#: original_texis/commands.texi:124
msgid "The special form @code{interactive} turns a Lisp function into a command.  The @code{interactive} form must be located at top-level in the function body, usually as the first form in the body; this applies to both lambda expressions (@pxref{Lambda Expressions}) and @code{defun} forms (@pxref{Defining Functions}).  This form does nothing during the actual execution of the function; its presence serves as a flag, telling the Emacs command loop that the function can be called interactively.  The argument of the @code{interactive} form specifies how the arguments for an interactive call should be read."
msgstr "スペシャルフォーム@code{interactive}はLisp関数をコマンドに変更します。@code{interactive}フォームは関数bodyのトップレベルに置かなければならず、通常はbody内の最初のフォームとして記述されます。これはラムダ式(@ref{Lambda Expressions}を参照)と@code{defun} (@ref{Defining Functions}を参照)の両方を受け入れます。このフォームはその関数が実際に実行される間は何も行いません。このフォームの存在はフラグとしての役割りをもち、Emacsコマンドループにたいしてその関数がインタラクティブに呼び出せることを告げます。@code{interactive}フォームの引数はインタラクティブな呼び出しが引数を読み取る方法を指定します。"

#. type: cindex
#: original_texis/commands.texi:125
#, no-wrap
msgid "@code{interactive-form} property"
msgstr "@code{interactive-form} property"

#. type: Plain text
#: original_texis/commands.texi:130
msgid "Alternatively, an @code{interactive} form may be specified in a function symbol's @code{interactive-form} property.  A non-@code{nil} value for this property takes precedence over any @code{interactive} form in the function body itself.  This feature is seldom used."
msgstr "@code{interactive}フォームのかわりに、関数シンボルの@code{interactive-form}プロパティで指定されることもあります。このプロパティが非@code{nil}値なら、関数body内の@code{interactive}フォームより優先されます。この機能はほとんど使用されません。"

#. type: anchor{#1}
#: original_texis/commands.texi:132
msgid "The interactive-only property"
msgstr "The interactive-only property"

#. type: cindex
#: original_texis/commands.texi:132
#, no-wrap
msgid "@code{interactive-only} property"
msgstr "@code{interactive-only} property"

#. type: Plain text
#: original_texis/commands.texi:144
msgid "Sometimes, a function is only intended to be called interactively, never directly from Lisp.  In that case, give the function a non-@code{nil} @code{interactive-only} property, either directly or via @code{declare} (@pxref{Declare Form}).  This causes the byte compiler to warn if the command is called from Lisp.  The output of @code{describe-function} will include similar information.  The value of the property can be: a string, which the byte-compiler will use directly in its warning (it should end with a period, and not start with a capital, e.g., @code{\"use (system-name) instead.\"}); @code{t}; any other symbol, which should be an alternative function to use in Lisp code."
msgstr "インタラクティブに呼び出されることだけを意図していて、決してLispから直接呼び出されない関数が時折あります。この場合には、直接あるいは@code{declare} (@ref{Declare Form}を参照)を通じて、その関数の@code{interactive-only}プロパティに非@code{nil}を与えます。これにより、そのコマンドがLispから呼び出されるとバイトコンパイラーが警告を発します。@code{describe-function}の出力にはこれに類似する情報が含まれます。このプロパティの値には文字列、@code{t}、または任意のシンボルを指定できます。文字列なら、それはバイトコンパイラーによる警告内で直接使用されます(最初は大文字でなくピリオドで終端される文字列であること。たとえば@code{\"use (system-name) instead.\"})。シンボルなら、それはLispコード内で使用されるかわりの関数です。"

#. type: Plain text
#: original_texis/commands.texi:147
msgid "Generic functions (@pxref{Generic Functions}) cannot be turned into commands by adding the @code{interactive} form to them."
msgstr "ジェネリック関数(@ref{Generic Functions}を参照)に@code{interactive}フォームを追加してコマンドにすることはできません。"

#. type: node
#: original_texis/commands.texi:155 original_texis/commands.texi:157
#, no-wrap
msgid "Using Interactive"
msgstr "Using Interactive"

#. type: menuentry
#: original_texis/commands.texi:155
msgid "General rules for @code{interactive}."
msgstr "@code{interactive}にたいする一般的なルール。"

#. type: node
#: original_texis/commands.texi:155 original_texis/commands.texi:342
#, no-wrap
msgid "Interactive Codes"
msgstr "Interactive Codes"

#. type: menuentry
#: original_texis/commands.texi:155
msgid "The standard letter-codes for reading arguments in various ways."
msgstr "さまざまな方法で引数を読み取る標準的な文字のコード。"

#. type: node
#: original_texis/commands.texi:155 original_texis/commands.texi:575
#, no-wrap
msgid "Interactive Examples"
msgstr "Interactive Examples"

#. type: menuentry
#: original_texis/commands.texi:155
msgid "Examples of how to read interactive arguments."
msgstr "インタラクティブ引数を読み取る方法の例。"

#. type: node
#: original_texis/commands.texi:155 original_texis/commands.texi:627
#, no-wrap
msgid "Command Modes"
msgstr "Command Modes"

#. type: menuentry
#: original_texis/commands.texi:155
msgid "Specifying that commands are for a specific mode."
msgstr "特定モード用コマンドの指定。"

#. type: node
#: original_texis/commands.texi:155 original_texis/commands.texi:710
#, no-wrap
msgid "Generic Commands"
msgstr "Generic Commands"

#. type: menuentry
#: original_texis/commands.texi:155
msgid "Select among command alternatives."
msgstr "コマンド選択肢からの選択。"

#. type: subsection
#: original_texis/commands.texi:158
#, no-wrap
msgid "Using @code{interactive}"
msgstr "Using @code{interactive}"

#. type: cindex
#: original_texis/commands.texi:159
#, no-wrap
msgid "arguments, interactive entry"
msgstr "arguments, interactive entry"

#. type: cindex
#: original_texis/commands.texi:160
#, no-wrap
msgid "interactive spec, using"
msgstr "interactive spec, using"

#. type: Plain text
#: original_texis/commands.texi:165
msgid "This section describes how to write the @code{interactive} form that makes a Lisp function an interactively-callable command, and how to examine a command's @code{interactive} form."
msgstr "このセクションでは、Lisp関数をインタラクティブに呼び出し可能なコマンドにする@code{interactive}フォームの記述方法と、コマンドの@code{interactive}フォームの検証方法について説明します。"

#. type: defspec
#: original_texis/commands.texi:166
#, no-wrap
msgid "interactive &optional arg-descriptor &rest modes"
msgstr "interactive &optional arg-descriptor &rest modes"

#. type: defspec
#: original_texis/commands.texi:172
msgid "This special form declares that a function is a command, and that it may therefore be called interactively (via @kbd{M-x} or by entering a key sequence bound to it).  The argument @var{arg-descriptor} declares how to compute the arguments to the command when the command is called interactively."
msgstr "このスペシャルフォームは関数がコマンドであり、したがって(@kbd{M-x}を通じて、またはそのコマンドにバインドされたキーシーケンスをエンターすることにより)インタラクティブに呼び出すことができることを宣言する。引数@var{arg-descriptor}は、そのコマンドがインタラクティブに呼び出されたときに引数を計算する方法を宣言する。"

#. type: defspec
#: original_texis/commands.texi:176
msgid "A command may be called from Lisp programs like any other function, but then the caller supplies the arguments and @var{arg-descriptor} has no effect."
msgstr "コマンドは他の関数と同じようにLisp関数から呼び出されるかもしれないが、その場合には呼び出し側は引数を提供して、@var{arg-descriptor}は効果をもたない。"

#. type: cindex
#: original_texis/commands.texi:177
#, no-wrap
msgid "@code{interactive-form}, symbol property"
msgstr "@code{interactive-form}, symbol property"

#. type: defspec
#: original_texis/commands.texi:186
msgid "The @code{interactive} form must be located at top-level in the function body, or in the function symbol's @code{interactive-form} property (@pxref{Symbol Properties}).  It has its effect because the command loop looks for it before calling the function (@pxref{Interactive Call}).  Once the function is called, all its body forms are executed; at this time, if the @code{interactive} form occurs within the body, the form simply returns @code{nil} without even evaluating its argument."
msgstr "@code{interactive}フォームは関数body内のトップレベルに置くか、関数シンボルの@code{interactive-form}プロパティ((@ref{Symbol Properties})を参照)になければならない。これはコマンドループが関数を呼び出す前にinteractiveフォームを調べることにより効果をもつ(@ref{Interactive Call}を参照)。一度関数が呼び出されると関数body内のすべてのフォームが実行される。このときbody内に@code{interactive}フォームが出現しても、そのフォームは引数の評価さえされず単に@code{nil}をリターンする。"

#. type: defspec
#: original_texis/commands.texi:190
msgid "The @var{modes} list allows specifying which modes the command is meant to be used in.  See @ref{Command Modes} for more details about the effect of specifying @var{modes}, and when to use it."
msgstr "@var{modes}リストではコマンドの使用を意図したモードを指定できる。@var{modes}指定の効果と使用するタイミングに関する詳細は@ref{Command Modes}を参照のこと。"

#. type: defspec
#: original_texis/commands.texi:198
msgid "By convention, you should put the @code{interactive} form in the function body, as the first top-level form.  If there is an @code{interactive} form in both the @code{interactive-form} symbol property and the function body, the former takes precedence.  The @code{interactive-form} symbol property can be used to add an interactive form to an existing function, or change how its arguments are processed interactively, without redefining the function."
msgstr "慣例により@code{interactive}フォームは関数body内の最初のトップレベルフォームとするべきである。@code{interactive}フォームがシンボルの@code{interactive-form}プロパティと関数bodyの両方に存在する場合には前者が優先される。@code{interactive-form}フォームは既存の関数にinteractiveフォームを追加したり、その関数を再定義することなく引数をインタラクティブに処理する方法を変更するために使用できる。"

#. type: Plain text
#: original_texis/commands.texi:201
msgid "There are three possibilities for the argument @var{arg-descriptor}:"
msgstr "引数@var{arg-descriptor}は以下の3つの可能性があります:"

#. type: itemize
#: original_texis/commands.texi:207
msgid "It may be omitted or @code{nil}; then the command is called with no arguments.  This leads quickly to an error if the command requires one or more arguments."
msgstr "省略または@code{nil}ならコマンドは引数なしで呼び出される。コマンドが1つ以上の引数を要求する場合は即座にエラーとなる。"

#. type: itemize
#: original_texis/commands.texi:214
msgid "It may be a string; its contents are a sequence of elements separated by newlines, one for each argument@footnote{Some elements actually supply two arguments.}.  Each element consists of a code character (@pxref{Interactive Codes}) optionally followed by a prompt (which some code characters use and some ignore).  Here is an example:"
msgstr "文字列なら、その文字列の内容は改行で区切られた要素シーケンスであり、1つの要素が1つの引数に対応する@footnote{いくつかの要素は実際に2つの引数を提供します。}。各要素はコード文字(@ref{Interactive Codes}を参照)と、オプションでその後のプロンプト(コード文字として使用される文字やコード文字としては無視されるものもある)により構成される。以下は例である:"

#. type: smallexample
#: original_texis/commands.texi:217
#, no-wrap
msgid "(interactive \"P\\nbFrobnicate buffer: \")\n"
msgstr "(interactive \"P\\nbFrobnicate buffer: \")\n"

#. type: itemize
#: original_texis/commands.texi:225
msgid "The code letter @samp{P} sets the command's first argument to the raw command prefix (@pxref{Prefix Command Arguments}).  @samp{bFrobnicate buffer: } prompts the user with @samp{Frobnicate buffer: } to enter the name of an existing buffer, which becomes the second and final argument."
msgstr "コード文字@samp{P}はそのコマンドの1つ目の引数をrawコマンドプレフィクス(@ref{Prefix Command Arguments}を参照)にセットする。@samp{bFrobnicate buffer: }は、ユーザーに@samp{Frobnicate buffer: }のプロンプトを示して既存のバッファーの名前の入力を促し、これは2つ目かつ最後の引数になる。"

#. type: itemize
#: original_texis/commands.texi:231
msgid "The prompt string can use @samp{%} to include previous argument values (starting with the first argument) in the prompt.  This is done using @code{format-message} (@pxref{Formatting Strings}).  For example, here is how you could read the name of an existing buffer followed by a new name to give to that buffer:"
msgstr "プロンプト文字列には、プロンプト内の前の引数(1つ目の引数から始まる)の値を含めるために@samp{%}を使用できる。これは@code{format-message} (@ref{Formatting Strings}を参照)を使用して行われる。たとえば以下は既存のバッファーの名前を読み取って、その後にそのバッファーに与える新たな名前を読み取る例である:"

#. type: group
#: original_texis/commands.texi:235
#, no-wrap
msgid "(interactive \"bBuffer to rename: \\nsRename buffer %s to: \")\n"
msgstr "(interactive \"bBuffer to rename: \\nsRename buffer %s to: \")\n"

#. type: cindex
#: original_texis/commands.texi:238
#, no-wrap
msgid "@samp{*} in @code{interactive}"
msgstr "@samp{*} in @code{interactive}"

#. type: cindex
#: original_texis/commands.texi:239
#, no-wrap
msgid "read-only buffers in interactive"
msgstr "read-only buffers in interactive"

#. type: itemize
#: original_texis/commands.texi:242
msgid "If @samp{*} appears at the beginning of the string, then an error is signaled if the buffer is read-only."
msgstr "文字列の先頭に@samp{*}がある場合、そのバッファーが読み取り専用ならエラーがシグナルされる。"

#. type: cindex
#: original_texis/commands.texi:243
#, no-wrap
msgid "@samp{@@} in @code{interactive}"
msgstr "@samp{@@} in @code{interactive}"

#. type: itemize
#: original_texis/commands.texi:248
msgid "If @samp{@@} appears at the beginning of the string, and if the key sequence used to invoke the command includes any mouse events, then the window associated with the first of those events is selected before the command is run."
msgstr "文字列の先頭が@samp{@@}で、そのコマンドの呼び出しに使用されたキーシーケンスに何らかのマウスイベントが含まれる場合は、そのコマンドを実行する前に、それらのうち最初のイベントに結びつくウィンドウが選択される。"

#. type: cindex
#: original_texis/commands.texi:249
#, no-wrap
msgid "@samp{^} in @code{interactive}"
msgstr "@samp{^} in @code{interactive}"

#. type: cindex
#: original_texis/commands.texi:250
#, no-wrap
msgid "shift-selection, and @code{interactive} spec"
msgstr "shift-selection, and @code{interactive} spec"

#. type: itemize
#: original_texis/commands.texi:259
msgid "If @samp{^} appears at the beginning of the string, and if the command was invoked through @dfn{shift-translation}, set the mark and activate the region temporarily, or extend an already active region, before the command is run.  If the command was invoked without shift-translation, and the region is temporarily active, deactivate the region before the command is run.  Shift-translation is controlled on the user level by @code{shift-select-mode}; see @ref{Shift Selection,,, emacs, The GNU Emacs Manual}."
msgstr "文字列の先頭が@samp{^}で、そのコマンドが@dfn{シフト転換(shift-translation)}を通じて呼び出された場合は、そのコマンドを実行する前にマークをセットして一時的にリージョンをアクティブにするか、すでにアクティブなリージョンを拡張する。コマンドがシフト転換なしで呼び出されて、リージョンが一時的にアクティブな場合は、コマンドを実行する前にそのリージョンを非アクティブにする。シフト転換は@code{shift-select-mode}によりユーザーレベルで制御される。@ref{Shift Selection,,, emacs, The GNU Emacs Manual}を参照のこと。"

#. type: itemize
#: original_texis/commands.texi:264
msgid "You can use @samp{*}, @samp{@@}, and @code{^} together; the order does not matter.  Actual reading of arguments is controlled by the rest of the prompt string (starting with the first character that is not @samp{*}, @samp{@@}, or @samp{^})."
msgstr "@samp{*}、@samp{@@}、@code{^}は一緒に使用でき、その場合は順序に意味はない。実際の引数の読み取りは残りのプロンプト文字列(@samp{*}、@samp{@@}、@code{^}以外の最初の文字以降)により制御される。"

#. type: itemize
#: original_texis/commands.texi:271
msgid "It may be a Lisp expression that is not a string; then it should be a form that is evaluated to get a list of arguments to pass to the command.  Usually this form will call various functions to read input from the user, most often through the minibuffer (@pxref{Minibuffers})  or directly from the keyboard (@pxref{Reading Input})."
msgstr "文字列以外のLisp式なら、そのコマンドに渡す引数リストを取得するために評価されるフォームである。このフォームは通常はユーザーから入力を読み取るためにさまざまな関数を呼び出し、そのためにほとんどの場合はミニバッファー(@ref{Minibuffers}を参照)を通じてか、キーボードから直接読み取りを行う(@ref{Reading Input}を参照)。"

#. type: itemize
#: original_texis/commands.texi:278
msgid "Providing point or the mark as an argument value is also common, but if you do this @emph{and} read input (whether using the minibuffer or not), be sure to get the integer values of point or the mark after reading.  The current buffer may be receiving subprocess output; if subprocess output arrives while the command is waiting for input, it could relocate point and the mark."
msgstr "引数値としてポイントやマークを提供するのも一般的だが、何かを行い@emph{かつ}(ミニバッファー使用の有無に関わらず)入力を読み取る場合には、読み取りの前にポイント値またはマーク値の整数を確実に取得しておくこと。カレントバッファーはサブプロセスの出力を受信するかもしれず、コマンドが入力を待つ間にサブプロセス出力が到着すると、ポイントやマークの再配置が起こり得る。"

#. type: itemize
#: original_texis/commands.texi:280
msgid "Here's an example of what @emph{not} to do:"
msgstr "以下は行っては@emph{いけない}例である:"

#. type: smallexample
#: original_texis/commands.texi:285
#, no-wrap
msgid ""
"(interactive\n"
" (list (region-beginning) (region-end)\n"
"       (read-string \"Foo: \" nil 'my-history)))\n"
msgstr ""
"(interactive\n"
" (list (region-beginning) (region-end)\n"
"       (read-string \"Foo: \" nil 'my-history)))\n"

#. type: itemize
#: original_texis/commands.texi:290
msgid "Here's how to avoid the problem, by examining point and the mark after reading the keyboard input:"
msgstr "これにたいして以下はキーボード入力を読み取った後にポイントとマークを調べることにより、上記の問題を避ける例である:"

#. type: smallexample
#: original_texis/commands.texi:295
#, no-wrap
msgid ""
"(interactive\n"
" (let ((string (read-string \"Foo: \" nil 'my-history)))\n"
"   (list (region-beginning) (region-end) string)))\n"
msgstr ""
"(interactive\n"
" (let ((string (read-string \"Foo: \" nil 'my-history)))\n"
"   (list (region-beginning) (region-end) string)))\n"

#. type: itemize
#: original_texis/commands.texi:302
msgid "@strong{Warning:} the argument values should not include any data types that can't be printed and then read.  Some facilities save @code{command-history} in a file to be read in the subsequent sessions; if a command's arguments contain a data type that prints using @samp{#<@dots{}>} syntax, those facilities won't work."
msgstr "@strong{警告:} 引数値にはプリントや読み取りが不可能なデータ型を含めないこと。いくつかの機能は後続のセッションに読み込ませるために@code{command-history}をファイルに保存する。コマンドの引数に@samp{#<@dots{}>}構文を使用してプリントされるデータ型が含まれていると、それらの機能は動作しなくなるだろう。"

#. type: itemize
#: original_texis/commands.texi:310
msgid "There are, however, a few exceptions: it is ok to use a limited set of expressions such as @code{(point)}, @code{(mark)}, @code{(region-beginning)}, and @code{(region-end)}, because Emacs recognizes them specially and puts the expression (rather than its value) into the command history.  To see whether the expression you wrote is one of these exceptions, run the command, then examine @code{(car command-history)}."
msgstr "しかしこれには少数の例外がある。@code{(point)}、@code{(mark)}、@code{(region-beginning)}、@code{(region-end)}などの一連の式に限定して使用することに問題はない。なぜならEmacsはこれらを特別に認識して、コマンドヒストリー内に(値ではなく)その式を配置すからである。記述した式がこれらの例外に含まれるかどうか確認するには、コマンドを実行した後に@code{(car command-history)}を調べればよい。"

#. type: cindex
#: original_texis/commands.texi:312
#, no-wrap
msgid "examining the @code{interactive} form"
msgstr "examining the @code{interactive} form"

#. type: defun
#: original_texis/commands.texi:313
#, no-wrap
msgid "interactive-form function"
msgstr "interactive-form function"

#. type: defun
#: original_texis/commands.texi:323
msgid "This function returns the @code{interactive} form of @var{function}.  If @var{function} is an interactively callable function (@pxref{Interactive Call}), the value is the command's @code{interactive} form @code{(interactive @var{spec})}, which specifies how to compute its arguments.  Otherwise, the value is @code{nil}.  If @var{function} is a symbol, its function definition is used.  When called on an OClosure, the work is delegated to the generic function @code{oclosure-interactive-form}."
msgstr "この関数は@var{function}の@code{interactive}フォームをリターンする。@var{function}がインタラクティブに呼び出し可能な関数(@ref{Interactive Call}を参照)なら、値はそのコマンドの引数を計算する方法を指定する@code{interactive}フォーム(@code{(interactive @var{spec})})である。それ以外なら値は@code{nil}。@var{function}がシンボルなら、そのシンボルの関数定義が使用される。OClosureで呼び出された場合には、処理はジェネリック関数@code{oclosure-interactive-form}に委譲される。"

#. type: defun
#: original_texis/commands.texi:325
#, no-wrap
msgid "oclosure-interactive-form function"
msgstr "oclosure-interactive-form function"

#. type: defun
#: original_texis/commands.texi:332
msgid "Just like @code{interactive-form}, this function takes a command and returns its interactive form.  The difference is that it is a generic function and it is only called when @var{function} is an OClosure (@pxref{OClosures}).  The purpose is to make it possible for some OClosure types to compute their interactive forms dynamically instead of carrying it in one of their slots."
msgstr "この関数は@code{interactive-form}と同様にコマンドを受け取り、そのインタラクティブなフォームをリターンする。これがジェネリック関数であること、そして@var{function}がOClosureのときだけ呼び出される点が異なる。この関数の目的は一部のOClosureタイプ(@ref{OClosures}を参照)にたいしてそれらのスロットの1つにインタラクティブフォームを格納するのではなく、動的なインタラクティブフォームの計算を可能にすることにある。"

#. type: defun
#: original_texis/commands.texi:340
msgid "This is used for example for @code{kmacro} functions in order to reduce their memory size, since they all share the same interactive form.  It is also used for @code{advice} functions, where the interactive form is computed from the interactive forms of its components, so as to make this computation more lazily and to correctly adjust the interactive form when one of its component's is redefined."
msgstr "これはたとえばすべての@code{kmacro}は同じインタラクティブフォームを共有するので、@code{kmacro}に用いることでメモリーサイズを削減できる。インタラクティブフォームが関数のコンポーネントのインタラクティブフォームから計算される@code{advice}関数においても、いずれかのコンポーネントが再定義された際の計算を更に遅延でき、かつインタラクティブフォームをより正確に調整できる。"

#. type: subsection
#: original_texis/commands.texi:343
#, no-wrap
msgid "Code Characters for @code{interactive}"
msgstr "Code Characters for @code{interactive}"

#. type: cindex
#: original_texis/commands.texi:344
#, no-wrap
msgid "interactive code description"
msgstr "interactive code description"

#. type: cindex
#: original_texis/commands.texi:345
#, no-wrap
msgid "description for interactive codes"
msgstr "description for interactive codes"

#. type: cindex
#: original_texis/commands.texi:346
#, no-wrap
msgid "codes, interactive, description of"
msgstr "codes, interactive, description of"

#. type: cindex
#: original_texis/commands.texi:347
#, no-wrap
msgid "characters for interactive codes"
msgstr "characters for interactive codes"

#. type: Plain text
#: original_texis/commands.texi:351
msgid "The code character descriptions below contain a number of key words, defined here as follows:"
msgstr "ここで説明されているコード文字には、以下で定義されるいくつかのキーワードが含まれています:"

#. type: item
#: original_texis/commands.texi:353
#, no-wrap
msgid "Completion"
msgstr "Completion"

#. type: cindex
#: original_texis/commands.texi:354
#, no-wrap
msgid "interactive completion"
msgstr "interactive completion"

#. type: table
#: original_texis/commands.texi:358
msgid "Provide completion.  @key{TAB}, @key{SPC}, and @key{RET} perform name completion because the argument is read using @code{completing-read} (@pxref{Completion}).  @kbd{?} displays a list of possible completions."
msgstr "補完を提供する。@key{TAB}、@key{SPC}、@key{RET}は@code{completing-read} (@ref{Completion}を参照)を使用して引数を読み取って名前の補完を行う。@kbd{?}で利用可能な補完リストを表示する。"

#. type: item
#: original_texis/commands.texi:359
#, no-wrap
msgid "Existing"
msgstr "Existing"

#. type: table
#: original_texis/commands.texi:363
msgid "Require the name of an existing object.  An invalid name is not accepted; the commands to exit the minibuffer do not exit if the current input is not valid."
msgstr "既存オブジェクトの名前を要求する。無効な名前は受け付けられない。カレント入力が有効でなければ、ミニバッファーをexitするコマンドはexitしない。"

#. type: item
#: original_texis/commands.texi:364
#, no-wrap
msgid "Default"
msgstr "Default"

#. type: cindex
#: original_texis/commands.texi:365
#, no-wrap
msgid "default argument string"
msgstr "default argument string"

#. type: table
#: original_texis/commands.texi:368
msgid "A default value of some sort is used if the user enters no text in the minibuffer.  The default depends on the code character."
msgstr "ユーザーがテキストを何もエンターしなければ、ある種のデフォルト値が使用される。デフォルトはコード文字に依存する。"

#. type: item
#: original_texis/commands.texi:369
#, no-wrap
msgid "No I/O"
msgstr "No I/O"

#. type: table
#: original_texis/commands.texi:373
msgid "This code letter computes an argument without reading any input.  Therefore, it does not use a prompt string, and any prompt string you supply is ignored."
msgstr "このコード文字は入力を読み取らずに引数を計算する。したがってプロンプト文字列を使用せず、与えられたプロンプト文字列は無視される。"

#. type: table
#: original_texis/commands.texi:376
msgid "Even though the code letter doesn't use a prompt string, you must follow it with a newline if it is not the last code character in the string."
msgstr "たとえそのコード文字がプロンプト文字列を使用しなくても、それが文字列内で最後のコード文字でなければ、その後に改行を付加しなければならない。"

#. type: item
#: original_texis/commands.texi:377
#, no-wrap
msgid "Prompt"
msgstr "Prompt"

#. type: table
#: original_texis/commands.texi:380
msgid "A prompt immediately follows the code character.  The prompt ends either with the end of the string or with a newline."
msgstr "コード文字の直後にプロンプトが続く。プロンプトの終端は文字列の終端、または改行。"

#. type: item
#: original_texis/commands.texi:381
#, no-wrap
msgid "Special"
msgstr "Special"

#. type: table
#: original_texis/commands.texi:385
msgid "This code character is meaningful only at the beginning of the interactive string, and it does not look for a prompt or a newline.  It is a single, isolated character."
msgstr "このコード文字はインタラクティブ文字列の先頭にあるときのみ意味があり、プロンプトと改行を要求しない。単一の独立した文字。"

#. type: cindex
#: original_texis/commands.texi:387
#, no-wrap
msgid "reading interactive arguments"
msgstr "reading interactive arguments"

#. type: Plain text
#: original_texis/commands.texi:389
msgid "Here are the code character descriptions for use with @code{interactive}:"
msgstr "以下は@code{interactive}で使用されるコード文字です:"

#. type: item
#: original_texis/commands.texi:391
#, no-wrap
msgid "*"
msgstr "*"

#. type: table
#: original_texis/commands.texi:393
msgid "Signal an error if the current buffer is read-only.  Special."
msgstr "カレントバッファーが読み取り専用ならエラーをシグナルする。[Special]"

#. type: item
#: original_texis/commands.texi:394
#, no-wrap
msgid "@@"
msgstr "@@"

#. type: table
#: original_texis/commands.texi:397
msgid "Select the window mentioned in the first mouse event in the key sequence that invoked this command.  Special."
msgstr "このコマンドを呼び出したキーシーケンス内の最初のマウスイベントに関連するウィンドウを選択する。[Special]"

#. type: item
#: original_texis/commands.texi:398
#, no-wrap
msgid "^"
msgstr "^"

#. type: table
#: original_texis/commands.texi:404
msgid "If the command was invoked through shift-translation, set the mark and activate the region temporarily, or extend an already active region, before the command is run.  If the command was invoked without shift-translation, and the region is temporarily active, deactivate the region before the command is run.  Special."
msgstr "シフト転換を通じてコマンドが呼び出された場合はコマンドを実行する前に、マークをセットして一時的にリージョンをアクティブにするか、すでにリージョンがアクティブならリージョンを拡張する。シフト転換を通じずにコマンドが呼び出されて、リージョンが一時的にアクティブならコマンドを実行する前にそのリージョンを非アクティブにする。[Special]"

#. type: item
#: original_texis/commands.texi:405
#, no-wrap
msgid "a"
msgstr "a"

#. type: table
#: original_texis/commands.texi:408
msgid "A function name (i.e., a symbol satisfying @code{fboundp}).  Existing, Completion, Prompt."
msgstr "関数名(@code{fboundp}を満足するシンボル)。[Existing]、[Completion]、[Prompt]"

#. type: item
#: original_texis/commands.texi:409
#, no-wrap
msgid "b"
msgstr "b"

#. type: table
#: original_texis/commands.texi:413
msgid "The name of an existing buffer.  By default, uses the name of the current buffer (@pxref{Buffers}).  Existing, Completion, Default, Prompt."
msgstr "既存バッファーの名前。デフォルトではカレントバッファー(@ref{Buffers}を参照)の名前を使用する。[Existing]、[Completion]、[Default]、[Prompt]"

#. type: item
#: original_texis/commands.texi:414
#, no-wrap
msgid "B"
msgstr "B"

#. type: table
#: original_texis/commands.texi:418
msgid "A buffer name.  The buffer need not exist.  By default, uses the name of a recently used buffer other than the current buffer.  Completion, Default, Prompt."
msgstr "バッファー名。そのバッファーが存在する必要はない。デフォルトではカレントバッファーではなくもっとも最近使用されたバッファーの名前を使用する。[Completion]、[Default]、[Prompt]"

#. type: item
#: original_texis/commands.texi:419
#, no-wrap
msgid "c"
msgstr "c"

#. type: table
#: original_texis/commands.texi:421
msgid "A character.  The cursor does not move into the echo area.  Prompt."
msgstr "文字。カーソルはエコーエリアに移動しない。[Prompt]"

#. type: item
#: original_texis/commands.texi:422
#, no-wrap
msgid "C"
msgstr "C"

#. type: table
#: original_texis/commands.texi:425
msgid "A command name (i.e., a symbol satisfying @code{commandp}).  Existing, Completion, Prompt."
msgstr "コマンド名(@code{commandp}を満足するシンボル)。[Existing]、[Completion]、[Prompt]"

#. type: item
#: original_texis/commands.texi:426
#, no-wrap
msgid "d"
msgstr "d"

#. type: cindex
#: original_texis/commands.texi:427
#, no-wrap
msgid "position argument"
msgstr "position argument"

#. type: table
#: original_texis/commands.texi:429
msgid "The position of point, as an integer (@pxref{Point}).  No I/O."
msgstr "ポイント位置の整数(@ref{Point}を参照)。[No I/O]"

#. type: item
#: original_texis/commands.texi:430
#, no-wrap
msgid "D"
msgstr "D"

#. type: table
#: original_texis/commands.texi:434
msgid "A directory.  The default is the current default directory of the current buffer, @code{default-directory} (@pxref{File Name Expansion}).  Existing, Completion, Default, Prompt."
msgstr "ディレクトリー。デフォルトはカレントバッファーのカレントのデフォルトディレクトリー@code{default-directory} (@ref{File Name Expansion}を参照)。[Existing]、[Completion]、[Default]、[Prompt]"

#. type: item
#: original_texis/commands.texi:435
#, no-wrap
msgid "e"
msgstr "e"

#. type: table
#: original_texis/commands.texi:439
msgid "The first or next non-keyboard event in the key sequence that invoked the command.  More precisely, @samp{e} gets events that are lists, so you can look at the data in the lists.  @xref{Input Events}.  No I/O."
msgstr "そのコマンドを呼び出したキーシーケンス内の1つ目か2つ目の非キーボードイベント。より正確には、@samp{e}はリストとしてイベントを取得するので、リスト内のデータを調べることができる。@ref{Input Events}を参照のこと。[No I/O]"

#. type: table
#: original_texis/commands.texi:444
msgid "You use @samp{e} for mouse events and for special system events (@pxref{Misc Events}).  The event list that the command receives depends on the event.  @xref{Input Events}, which describes the forms of the list for each event in the corresponding subsections."
msgstr "@samp{e}はマウスイベント、および特別なシステムイベント(@ref{Misc Events}を参照)にたいして使用する。コマンドが受け取るイベントリストは、そのイベントに依存する。@ref{Input Events}ではそれぞれのイベントのリスト形式を、対応するサブセクションでそれぞれ説明しているので参されたい。"

#. type: table
#: original_texis/commands.texi:450
msgid "You can use @samp{e} more than once in a single command's interactive specification.  If the key sequence that invoked the command has @var{n} events that are lists, the @var{n}th @samp{e} provides the @var{n}th such event.  Events that are not lists, such as function keys and @acronym{ASCII} characters, do not count where @samp{e} is concerned."
msgstr "1つのコマンドのinteractive仕様の中で@samp{e}を複数回使用できる。そのコマンドを呼び出したキーシーケンスがイベント@var{n}(リスト)をもつなら、@samp{e}の@var{n}番目がそのイベントを提供する。フンクションキーや@acronym{ASCII}文字のようなリスト以外のイベントは、@samp{e}に関連するイベントとしてカウントされない。"

#. type: item
#: original_texis/commands.texi:451
#, no-wrap
msgid "f"
msgstr "f"

#. type: table
#: original_texis/commands.texi:455
msgid "A file name of an existing file (@pxref{File Names}).  @xref{Reading File Names}, for details about default values.  Existing, Completion, Default, Prompt."
msgstr "既存ファイルのファイル名(@ref{File Names}を参照)。デフォルト値の詳細については@ref{Reading File Names}を参照のこと。[Existing]、[Completion]、[Default]、[Prompt]"

#. type: item
#: original_texis/commands.texi:456
#, no-wrap
msgid "F"
msgstr "F"

#. type: table
#: original_texis/commands.texi:458
msgid "A file name.  The file need not exist.  Completion, Default, Prompt."
msgstr "ファイル名。ファイルが存在している必要はない。[Completion]、[Default]、[Prompt]"

#. type: item
#: original_texis/commands.texi:459
#, no-wrap
msgid "G"
msgstr "G"

#. type: table
#: original_texis/commands.texi:463
msgid "A file name.  The file need not exist.  If the user enters just a directory name, then the value is just that directory name, with no file name within the directory added.  Completion, Default, Prompt."
msgstr "ファイル名。ファイルが存在している必要はない。ユーザーがディレクトリー名だけをエンターしたら値はそのディレクトリー名となり、そのディレクトリー名にファイル名は追加されない。[Completion]、[Default]、[Prompt]"

#. type: item
#: original_texis/commands.texi:464
#, no-wrap
msgid "i"
msgstr "i"

#. type: table
#: original_texis/commands.texi:467
msgid "An irrelevant argument.  This code always supplies @code{nil} as the argument's value.  No I/O."
msgstr "無関係な引数。このコード文字は引数値として常に@code{nil}を与える。[No I/O]"

#. type: item
#: original_texis/commands.texi:468
#, no-wrap
msgid "k"
msgstr "k"

#. type: table
#: original_texis/commands.texi:473
msgid "A key sequence (@pxref{Key Sequences}).  This keeps reading events until a command (or undefined command) is found in the current key maps.  The key sequence argument is represented as a string or vector.  The cursor does not move into the echo area.  Prompt."
msgstr "キーシーケンス(@ref{Key Sequences}を参照)。これはカレントキーマップ内でコマンド(または未定義のコマンド)が見つかるまで、イベントを読み取り続ける。キーシーケンス引数は文字列かベクターで表される。カーソルはエコーエリアに移動しない。[Prompt]"

#. type: table
#: original_texis/commands.texi:477
msgid "If @samp{k} reads a key sequence that ends with a down-event, it also reads and discards the following up-event.  You can get access to that up-event with the @samp{U} code character."
msgstr "@samp{k}が(マウスの)down-eventで終わるキーシーケンスを読み取ると、後続の(マウスの)up-eventも読み取ってそれを廃棄する。コード文字@samp{U}によりup-eventへのアクセスを得られる。"

#. type: table
#: original_texis/commands.texi:480
msgid "This kind of input is used by commands such as @code{describe-key} and @code{keymap-global-set}."
msgstr "この種の入力は@code{describe-key}や@code{keymap-global-set}のようなコマンドにより使用される。"

#. type: item
#: original_texis/commands.texi:481
#, no-wrap
msgid "K"
msgstr "K"

#. type: table
#: original_texis/commands.texi:489
msgid "A key sequence on a form that can be used as input to functions like @code{keymap-set}.  This works like @samp{k}, except that it suppresses, for the last input event in the key sequence, the conversions that are normally used (when necessary) to convert an undefined key into a defined one (@pxref{Key Sequence Input}), so this form is usually used when prompting for a new key sequence that is to be bound to a command."
msgstr "@code{keymap-set}のような関数の入力として使用されるフォーム上のキーシーケンス。これは@samp{k}と同じように機能するが、キーシーケンス内の最後の入力イベントにたいして、通常は(必要なら)使用される未定義キーから定義済みキーへの変換(@ref{Key Sequence Input}を参照)を抑制する。そのためこのフォームは、通常はコマンドにバインドするために新たなキーシーケンスの入力を求める際に使用される。"

#. type: item
#: original_texis/commands.texi:490
#, no-wrap
msgid "m"
msgstr "m"

#. type: cindex
#: original_texis/commands.texi:491
#, no-wrap
msgid "marker argument"
msgstr "marker argument"

#. type: table
#: original_texis/commands.texi:493
msgid "The position of the mark, as an integer.  No I/O."
msgstr "マーク位置の整数。[No I/O]"

#. type: item
#: original_texis/commands.texi:494
#, no-wrap
msgid "M"
msgstr "M"

#. type: table
#: original_texis/commands.texi:498
msgid "Arbitrary text, read in the minibuffer using the current buffer's input method, and returned as a string (@pxref{Input Methods,,, emacs, The GNU Emacs Manual}).  Prompt."
msgstr "任意のテキスト。ミニバッファー内でカレントバッファーの入力メソッド(@ref{Input Methods,,, emacs, The GNU Emacs Manual}を参照)を使用して読み取りを行い、それを文字列でリターンする。[Prompt]"

#. type: item
#: original_texis/commands.texi:499
#, no-wrap
msgid "n"
msgstr "n"

#. type: table
#: original_texis/commands.texi:503
msgid "A number, read with the minibuffer.  If the input is not a number, the user has to try again.  @samp{n} never uses the prefix argument.  Prompt."
msgstr "数字。ミニバッファーで読み取られる。入力が数字でなければユーザーは再試行する必要がある。@samp{n}は決してプレフィクス引数を使用しない。[Prompt]"

#. type: item
#: original_texis/commands.texi:504
#, no-wrap
msgid "N"
msgstr "N"

#. type: table
#: original_texis/commands.texi:508
msgid "The numeric prefix argument; but if there is no prefix argument, read a number as with @kbd{n}.  The value is always a number.  @xref{Prefix Command Arguments}.  Prompt."
msgstr "数引数(numeric prefix argument)。ただしプレフィクス引数がなければ@kbd{n}のように数字を読み取る。値は常に数字。@ref{Prefix Command Arguments}を参照のこと。[Prompt]"

#. type: item
#: original_texis/commands.texi:509
#, no-wrap
msgid "p"
msgstr "p"

#. type: cindex
#: original_texis/commands.texi:510
#, no-wrap
msgid "numeric prefix argument usage"
msgstr "numeric prefix argument usage"

#. type: table
#: original_texis/commands.texi:513
msgid "The numeric prefix argument.  (Note that this @samp{p} is lower case.)  No I/O."
msgstr "数引数(小文字の@samp{p}であることに注意)。[No I/O]"

#. type: item
#: original_texis/commands.texi:514
#, no-wrap
msgid "P"
msgstr "P"

#. type: cindex
#: original_texis/commands.texi:515
#, no-wrap
msgid "raw prefix argument usage"
msgstr "raw prefix argument usage"

#. type: table
#: original_texis/commands.texi:518
msgid "The raw prefix argument.  (Note that this @samp{P} is upper case.)  No I/O."
msgstr "rawプレフィクス引数(大文字の@samp{P}であることに注意)。[No I/O]"

#. type: item
#: original_texis/commands.texi:519
#, no-wrap
msgid "r"
msgstr "r"

#. type: cindex
#: original_texis/commands.texi:520
#, no-wrap
msgid "region argument"
msgstr "region argument"

#. type: table
#: original_texis/commands.texi:528
msgid "Point and the mark, as two numeric arguments, smallest first.  This is the only code letter that specifies two successive arguments rather than one.  This will signal an error if the mark is not set in the buffer which is current when the command is invoked.  If Transient Mark mode is turned on (@pxref{The Mark}) --- as it is by default --- and user option @code{mark-even-if-inactive} is @code{nil}, Emacs will signal an error even if the mark @emph{is} set, but is inactive.  No I/O."
msgstr "2つの数引数(ポイントとマーク)。小さいほうが先。これは1つではなく連続する2つの引数を指定する唯一のコード文字である。コマンド呼び出し時にカレントなバッファーにマークがセットされていなければエラーをシグナルする。Transient Markモード(@ref{The Mark}を参照)がオン(デフォルト)かつユーザーオプション@code{mark-even-if-inactive}が@code{nil}の場合には、たとえマークが@emph{セット}されていても非アクティブならEmacsはエラーをシグナルする。[No I/O]"

#. type: item
#: original_texis/commands.texi:529
#, no-wrap
msgid "s"
msgstr "s"

#. type: table
#: original_texis/commands.texi:534
msgid "Arbitrary text, read in the minibuffer and returned as a string (@pxref{Text from Minibuffer}).  Terminate the input with either @kbd{C-j} or @key{RET}.  (@kbd{C-q} may be used to include either of these characters in the input.)  Prompt."
msgstr "任意のテキスト。ミニバッファー内で読み取りを行って文字列としてリターンする(@ref{Text from Minibuffer}を参照)。@kbd{C-j}か@key{RET}で入力を終端する(これらの文字を入力に含めるために@kbd{C-q}を使用できる)。[Prompt]"

#. type: item
#: original_texis/commands.texi:535
#, no-wrap
msgid "S"
msgstr "S"

#. type: table
#: original_texis/commands.texi:540
msgid "An interned symbol whose name is read in the minibuffer.  Terminate the input with either @kbd{C-j} or @key{RET}.  Other characters that normally terminate a symbol (e.g., whitespace, parentheses and brackets) do not do so here.  Prompt."
msgstr "intern済みのシンボル。名前はミニバッファー内で読み取られる。@kbd{C-j}か@key{RET}で入力を終端する。ここでは通常はシンボルを終端するその他の文字(たとえば空白文字、丸カッコ、角カッコ)では終端されない。[Prompt]"

#. type: item
#: original_texis/commands.texi:541
#, no-wrap
msgid "U"
msgstr "U"

#. type: table
#: original_texis/commands.texi:546
msgid "A key sequence or @code{nil}.  Can be used after a @samp{k} or @samp{K} argument to get the up-event that was discarded (if any)  after @samp{k} or @samp{K} read a down-event.  If no up-event has been discarded, @samp{U} provides @code{nil} as the argument.  No I/O."
msgstr "キーシーケンスか@code{nil}。@samp{k}(または@samp{K})が読み取った後に、(もしあれば)捨てられる(マウスの)up-eventを取得するために、引数@samp{k}(または@samp{K})の後で使用され得る。捨てられたup-eventが存在しなければ、@samp{U}は引数として@code{nil}を提供する。[No I/O]"

#. type: item
#: original_texis/commands.texi:547
#, no-wrap
msgid "v"
msgstr "v"

#. type: table
#: original_texis/commands.texi:552
msgid "A variable declared to be a user option (i.e., satisfying the predicate @code{custom-variable-p}).  This reads the variable using @code{read-variable}.  @xref{Definition of read-variable}.  Existing, Completion, Prompt."
msgstr "ユーザーオプションとして宣言された変数(述語@code{custom-variable-p}を満足する)。これは@code{read-variable}を使用して変数を読み取る。@ref{Definition of read-variable}を参照のこと。[Existing]、[Completion]、[Prompt]"

#. type: item
#: original_texis/commands.texi:553
#, no-wrap
msgid "x"
msgstr "x"

#. type: table
#: original_texis/commands.texi:557
msgid "A Lisp object, specified with its read syntax, terminated with a @kbd{C-j} or @key{RET}.  The object is not evaluated.  @xref{Object from Minibuffer}.  Prompt."
msgstr "Lispオブジェクト。そのオブジェクトの入力構文により指定され、@kbd{C-j}か@key{RET}で終端される。オブジェクトは評価されない。@ref{Object from Minibuffer}を参照のこと。[Prompt]"

#. type: item
#: original_texis/commands.texi:558
#, no-wrap
msgid "X"
msgstr "X"

#. type: cindex
#: original_texis/commands.texi:559
#, no-wrap
msgid "evaluated expression argument"
msgstr "evaluated expression argument"

#. type: table
#: original_texis/commands.texi:563
msgid "A Lisp form's value.  @samp{X} reads as @samp{x} does, then evaluates the form so that its value becomes the argument for the command.  Prompt."
msgstr "Lispフォームの値。@samp{X}は@samp{x}のように読み取りを行いフォームを評価して、その値がコマンドの引数になる。[Prompt]"

#. type: item
#: original_texis/commands.texi:564
#, no-wrap
msgid "z"
msgstr "z"

#. type: table
#: original_texis/commands.texi:568
msgid "A coding system name (a symbol).  If the user enters null input, the argument value is @code{nil}.  @xref{Coding Systems}.  Completion, Existing, Prompt."
msgstr "コーディングシステム名(シンボル)。ユーザーがnull入力をエンターすると、引数値は@code{nil}になる。@ref{Coding Systems}を参照のこと。[Completion]、[Existing]、[Prompt]"

#. type: item
#: original_texis/commands.texi:569
#, no-wrap
msgid "Z"
msgstr "Z"

#. type: table
#: original_texis/commands.texi:573
msgid "A coding system name (a symbol)---but only if this command has a prefix argument.  With no prefix argument, @samp{Z} provides @code{nil} as the argument value.  Completion, Existing, Prompt."
msgstr "コマンドにプレフィクス引数があればコーディングシステム名。プレフィクス引数がなければ@samp{Z}は引数値として@code{nil}を提供する。[Completion]、[Existing]、[Prompt]"

#. type: subsection
#: original_texis/commands.texi:576
#, no-wrap
msgid "Examples of Using @code{interactive}"
msgstr "Examples of Using @code{interactive}"

#. type: cindex
#: original_texis/commands.texi:577
#, no-wrap
msgid "examples of using @code{interactive}"
msgstr "examples of using @code{interactive}"

#. type: cindex
#: original_texis/commands.texi:578
#, no-wrap
msgid "@code{interactive}, examples of using"
msgstr "@code{interactive}, examples of using"

#. type: Plain text
#: original_texis/commands.texi:581
msgid "Here are some examples of @code{interactive}:"
msgstr "以下に@code{interactive}の例をいくつか示します:"

#. type: group
#: original_texis/commands.texi:588
#, no-wrap
msgid ""
"(defun foo1 ()              ; @r{@code{foo1} takes no arguments,}\n"
"    (interactive)           ;   @r{just moves forward two words.}\n"
"    (forward-word 2))\n"
"     @result{} foo1\n"
msgstr ""
"(defun foo1 ()              ; @r{@code{foo1}は1つの引数をとり}\n"
"    (interactive)           ;   @r{単に2単語分前に移動する}\n"
"    (forward-word 2))\n"
"     @result{} foo1\n"

#. type: group
#: original_texis/commands.texi:597
#, no-wrap
msgid ""
"(defun foo2 (n)             ; @r{@code{foo2} takes one argument,}\n"
"    (interactive \"^p\")      ;   @r{which is the numeric prefix.}\n"
"                            ; @r{under @code{shift-select-mode},}\n"
"                            ;   @r{will activate or extend region.}\n"
"    (forward-word (* 2 n)))\n"
"     @result{} foo2\n"
msgstr ""
"(defun foo2 (n)             ; @r{@code{foo2}は引数を1つとる}\n"
"    (interactive \"^p\")      ;   @r{引数は数引数}\n"
"                            ; @r{@code{shift-select-mode}では、}\n"
"                            ;   @r{リージョンをアクティブにするか、拡張する}\n"
"    (forward-word (* 2 n)))\n"
"     @result{} foo2\n"

#. type: group
#: original_texis/commands.texi:604
#, no-wrap
msgid ""
"(defun foo3 (n)             ; @r{@code{foo3} takes one argument,}\n"
"    (interactive \"nCount:\") ;   @r{which is read with the Minibuffer.}\n"
"    (forward-word (* 2 n)))\n"
"     @result{} foo3\n"
msgstr ""
"(defun foo3 (n)             ; @r{@code{foo3}は引数を1つとる}\n"
"    (interactive \"nCount:\") ;   @r{引数はミニバッファーで読み取られる}\n"
"    (forward-word (* 2 n)))\n"
"     @result{} foo3\n"

#. type: group
#: original_texis/commands.texi:610
#, no-wrap
msgid ""
"(defun three-b (b1 b2 b3)\n"
"  \"Select three existing buffers.\n"
"Put them into three windows, selecting the last one.\"\n"
msgstr ""
"(defun three-b (b1 b2 b3)\n"
"  \"Select three existing buffers.\n"
"Put them into three windows, selecting the last one.\"\n"

#. type: example
#: original_texis/commands.texi:621
#, no-wrap
msgid ""
"    (interactive \"bBuffer1:\\nbBuffer2:\\nbBuffer3:\")\n"
"    (delete-other-windows)\n"
"    (split-window (selected-window) 8)\n"
"    (switch-to-buffer b1)\n"
"    (other-window 1)\n"
"    (split-window (selected-window) 8)\n"
"    (switch-to-buffer b2)\n"
"    (other-window 1)\n"
"    (switch-to-buffer b3))\n"
"     @result{} three-b\n"
msgstr ""
"    (interactive \"bBuffer1:\\nbBuffer2:\\nbBuffer3:\")\n"
"    (delete-other-windows)\n"
"    (split-window (selected-window) 8)\n"
"    (switch-to-buffer b1)\n"
"    (other-window 1)\n"
"    (split-window (selected-window) 8)\n"
"    (switch-to-buffer b2)\n"
"    (other-window 1)\n"
"    (switch-to-buffer b3))\n"
"     @result{} three-b\n"

#. type: group
#: original_texis/commands.texi:624
#, no-wrap
msgid ""
"(three-b \"*scratch*\" \"declarations.texi\" \"*mail*\")\n"
"     @result{} nil\n"
msgstr ""
"(three-b \"*scratch*\" \"declarations.texi\" \"*mail*\")\n"
"     @result{} nil\n"

#. type: subsection
#: original_texis/commands.texi:628
#, no-wrap
msgid "Specifying Modes For Commands"
msgstr "Specifying Modes For Commands"

#. type: cindex
#: original_texis/commands.texi:629
#, no-wrap
msgid "commands, mode-specific"
msgstr "commands, mode-specific"

#. type: cindex
#: original_texis/commands.texi:630
#, no-wrap
msgid "commands, specify as mode-specific"
msgstr "commands, specify as mode-specific"

#. type: cindex
#: original_texis/commands.texi:631
#, no-wrap
msgid "mode-specific commands"
msgstr "mode-specific commands"

#. type: Plain text
#: original_texis/commands.texi:637
msgid "Many commands in Emacs are general, and not tied to any specific mode.  For instance, @kbd{M-x kill-region} can be used in pretty much any mode that has editable text, and commands that display information (like @kbd{M-x list-buffers}) can be used in pretty much any context."
msgstr "Emacsのコマンドの多くは汎用であり、特定のモードに関連付けられていません。たとえば@kbd{M-x kill-region}は編集可能テキストをもつほとんどのモード、(@kbd{M-x list-buffers}のような)情報表示コマンドはほとんどのコンテキストで使用できます。"

#. type: Plain text
#: original_texis/commands.texi:642
msgid "Many other commands, however, are specifically tied to a mode, and make no sense outside of that context.  For instance, @code{M-x dired-diff} will just signal an error if used outside of a Dired buffer."
msgstr "しかしそれ以外の多くのコマンドはモードに具体的に関連付けられており、そのコンテキスト外部では意味をなしません。たとえばDiredバッファーの外部で@code{M-x dired-diff}を使用すると、単にエラーをシグナルするでしょう。"

#. type: Plain text
#: original_texis/commands.texi:645
msgid "Emacs therefore has a mechanism for specifying what mode (or modes) a command ``belongs'' to:"
msgstr "したがってEmacsにはコマンドが``所属する''モードが何かを指定するためのメカニズムがあります:"

#. type: lisp
#: original_texis/commands.texi:651
#, no-wrap
msgid ""
"(defun dired-diff (...)\n"
"  ...\n"
"  (interactive \"p\" dired-mode)\n"
"  ...)\n"
msgstr ""
"(defun dired-diff (...)\n"
"  ...\n"
"  (interactive \"p\" dired-mode)\n"
"  ...)\n"

#. type: Plain text
#: original_texis/commands.texi:656
msgid "This will mark the command as applicable to @code{dired-mode} only (or any modes that are derived from @code{dired-mode}).  Any number of modes can be added to the @code{interactive} form."
msgstr "これはそのコマンドを@code{dired-mode} (や@code{dired-mode}から派生したモード)だけに適用されるようにマークします。@code{interactive}フォームには任意個数のモードを追加できます。"

#. type: vindex
#: original_texis/commands.texi:657 original_texis/commands.texi:927
#, no-wrap
msgid "read-extended-command-predicate"
msgstr "read-extended-command-predicate"

#. type: Plain text
#: original_texis/commands.texi:662
msgid "Specifying modes affects command completion in @kbd{M-S-x} (@code{execute-extended-command-for-buffer}, @pxref{Interactive Call}).  It may also affect completion in @kbd{M-x}, depending on the value of @code{read-extended-command-predicate}."
msgstr "モードの指定は、@kbd{M-S-x} (@code{execute-extended-command-for-buffer})でのコマンド補完に影響を与えます(@ref{Interactive Call}を参照)。@code{read-extended-command-predicate}の値に応じて、モード指定が@kbd{M-x}での補完にも影響を与えるかもしれません。"

#. type: Plain text
#: original_texis/commands.texi:670
msgid "For instance, when using the @code{command-completion-default-include-p} predicate as the value of @code{read-extended-command-predicate}, @kbd{M-x} won't list commands that have been marked as being applicable to a specific mode (unless you are in a buffer that uses that mode, of course).  This goes for both major and minor modes.  (By contrast, @kbd{M-S-x} always omits inapplicable commands from the completion candidates.)"
msgstr "たとえば@code{read-extended-command-predicate}の値として@code{command-completion-default-include-p}述語を使用する際には、特定モードに適用されるとマークされたコマンドは@kbd{M-x}でリストされないでしょう(もちろんそのモードを使用するバッファーにいない場合)。これはメジャーモードとマイナーモードの両方に言えることです(対照的に@kbd{M-S-x}は適用されないコマンドを補完候補から常に省略する)。"

#. type: Plain text
#: original_texis/commands.texi:675
msgid "By default, @code{read-extended-command-predicate} is @code{nil}, and completion in @kbd{M-x} lists all the commands that match what the user has typed, whether those commands are or aren't marked as applicable to the current buffer's mode."
msgstr "@code{read-extended-command-predicate}はデフォルトでは@code{nil}であり、@kbd{M-x}での補完ではカレントバッファーのモードに適用されるとマークされているか否かに関わらず、ユーザーがタイプしたものにマッチするすべてのコマンドがリストされます。"

#. type: Plain text
#: original_texis/commands.texi:678
msgid "Marking commands to be applicable to a mode will also make @kbd{C-h m} list these commands (if they aren't bound to any keys)."
msgstr "あるモードにたいして適用されるものとしてコマンドをマークすると、(何らかのキーにバインドされていなければ)それらは@kbd{C-h m}でもリストされるようになります。"

#. type: Plain text
#: original_texis/commands.texi:683
msgid "If using this extended @code{interactive} form isn't convenient (because the code is supposed to work in older versions of Emacs that don't support the extended @code{interactive} form), the following equivalent declaration (@pxref{Declare Form}) can be used instead:"
msgstr "(拡張@code{interactive}フォームをサポートしない古いバージョンのEmacsでは動作すると思われるコードがある等で)この拡張@code{interactive}フォームの使用が不便なら、かわりに等価な以下の宣言(@ref{Declare Form}を参照)を使用できます:"

#. type: lisp
#: original_texis/commands.texi:686
#, no-wrap
msgid "(declare (modes dired-mode))\n"
msgstr "(declare (modes dired-mode))\n"

#. type: Plain text
#: original_texis/commands.texi:694
msgid "Which commands to tag with modes is to some degree a matter of taste, but commands that clearly do not work outside of the mode should be tagged.  This includes commands that will signal an error if called from somewhere else, but also commands that are destructive when called from an unexpected mode.  (This usually includes most of the commands that are written for special (i.e., non-editing) modes.)"
msgstr "コマンドのモードへのタグ付けはある意味好みの問題ですが、そのモードの外部では動作しないことが明確なコマンドはタグ付けするべきです。これにはどこか別の場所で呼び出すとエラーをシグナルするだけではなく、期待しないモードからの呼び出しが破壊的なコマンドも含まれます(これは通常はスペシャルモード、すなわち編集不可なモード用に記述されたコマンドのほとんどが含まれる)。"

#. type: Plain text
#: original_texis/commands.texi:703
msgid "Some commands may be harmless, and ``work'' when called from other modes, but should still be tagged with a mode if they don't actually make much sense to use elsewhere.  For instance, many special modes have commands to exit the buffer bound to @kbd{q}, and may not do anything but issue a message like \"Goodbye from this mode\" and then call @code{kill-buffer}.  This command will ``work'' from any mode, but it is highly unlikely that anybody would actually want to use the command outside the context of this special mode."
msgstr "別モードから呼び出した際にも害がなく、``機能する''コマンドもありますが、それでも別の場所使用することが実際に無意味なコマンドには、依然としてタグ付けする必要があります。たとえば多くのスペシャルモードはバッファーのexitコマンドに@kbd{q}をバインドしており、これは\"Goodbye from this mode\"のようなメッセージを発行して@code{kill-buffer}を呼び出す以外は何も行わないかもしれません。このコマンドは別のモードでも``機能する''でしょうが、そのスペシャルモードのコンテキスト外部でこのコマンドを実際に使いたいと思う人が居るようには思えません。"

#. type: Plain text
#: original_texis/commands.texi:709
msgid "Many modes have a set of different commands that start the mode in different ways (e.g., @code{eww-open-in-new-buffer} and @code{eww-open-file}).  Commands like that should never be tagged as mode-specific, as they can be issued by the user from pretty much any context."
msgstr "多くのモードには、そのモードを異なる方法で開始するために、一連の異なるコマンドがあります (例: @code{eww-open-in-new-buffer}と@code{eww-open-file})。このようなコマンドはユーザーがさまざまなコンテキストから発行し得るので、モード固有とタグ付けするべきでは決してありません。"

#. type: subsection
#: original_texis/commands.texi:711
#, no-wrap
msgid "Select among Command Alternatives"
msgstr "Select among Command Alternatives"

#. type: cindex
#: original_texis/commands.texi:712
#, no-wrap
msgid "generic commands"
msgstr "generic commands"

#. type: cindex
#: original_texis/commands.texi:713
#, no-wrap
msgid "alternative commands, defining"
msgstr "alternative commands, defining"

#. type: Plain text
#: original_texis/commands.texi:726
msgid "Sometimes it is useful to define a command that serves as a ``generic dispatcher'' capable of invoking one of a set of commands according to the user's needs.  For example, imagine that you want to define a command named @samp{open} that can ``open'' and display several different types of objects.  Or you could have a command named @samp{mua} (which stands for Mail User Agent) that can read and send email using one of several email backends, such as Rmail, Gnus, or MH-E.  The macro @code{define-alternatives} can be used to define such @dfn{generic commands}.  A generic command is an interactive function whose implementation can be selected from several alternatives, as a matter of user preference."
msgstr "一連のコマンドセットのうちからユーザーのニーズに応じていずれか1つを呼び出すことができるような、``ジェネリックディスパッチャー(generic dispatcher)''としてコマンドを定義すると便利なときがあるかもしれません。たとえば複数の異なるオブジェクトを``オープン''して表示できる@samp{open}というコマンドを定義したいときを想像してください。あるいは@samp{mua} (Mail User Agent: 電子メールクライアント)というコマンドを使ってRmail、Gnus、MH-Eのような複数の電子メールバックエンドのいずれか1つを用いることにより電子メールを読んだり送信ができるかもしれません。そのような@dfn{ジェネリックコマンド(generic commands)}を定義するために、マクロ@code{define-alternatives}を使用することができます。ジェネリックコマンドとは複数ある選択肢からユーザーが好みに応じて実装を選択できるインタラクティブな関数のことです。"

#. type: defmac
#: original_texis/commands.texi:727
#, no-wrap
msgid "define-alternatives command &rest customizations"
msgstr "define-alternatives command &rest customizations"

#. type: defmac
#: original_texis/commands.texi:731
msgid "This macro defines the new generic @var{command}, which can have several alternative implementations.  The argument @var{command} should be an unquoted symbol."
msgstr "このマクロは実装の候補を複数もつジェネリックな@var{command}を新たに定義する。引数@var{command}はクォートされていないシンボルであること。"

#. type: defmac
#: original_texis/commands.texi:749
msgid "When invoked, the macro creates an interactive Lisp closure (@pxref{Closures}).  When the user runs @w{@kbd{M-x @var{command} @key{RET}}} for the first time, Emacs asks to select one of the alternative implementations of @var{command}, offering completion for the names of these alternatives.  These names come from the user option whose name is @code{@var{command}-alternatives}, which the macro creates (if it didn't exist before).  To be useful, this variable's value should be an alist whose elements have the form @w{@code{(@var{alt-name} . @var{alt-func})}}, where @var{alt-name} is the name of the alternative and @var{alt-func} is the interactive function to be called if this alternative is selected.  When the user selects an alternative, Emacs remembers the selection, and will thereafter automatically call that selected alternative without prompting when the user invokes @kbd{M-x @var{command}} again.  To choose a different alternative, type @w{@kbd{C-u M-x @var{command} @key{RET}}}--then Emacs will again prompt for one of the alternatives, and the selection will override the previous one."
msgstr "呼び出されると、このマクロはインタラクティブなLispクロージャ(@ref{Closures}を参照)を作成する。ユーザーが@w{@kbd{M-x @var{command} @key{RET}}}を最初に実行した際に、Emacsは@var{command}の実装候補から1つを選択するよう尋ねる(候補の名前にたいする補完が提供される)。候補の名前はこのマクロが作成した@code{@var{command}-alternatives}という名前のユーザーオプション(以前に存在していなければ)に由来する。利便性のためにこの変数の値は@w{@code{(@var{alt-name} . @var{alt-func})}}という形式の要素をもつalistであること。ここで@var{alt-name}は候補の名前、@var{alt-func}はその候補が選択された際に呼び出されるインタラクティブ関数。ユーザーがある候補を選択するとEmacsがその選択を記憶して、次回以降ユーザーが@kbd{M-x @var{command}}を呼び出した際には入力を求めることなく前に選択した候補を自動的に呼び出す。別の候補を選択するには@w{@kbd{C-u M-x @var{command} @key{RET}}}とタイプすれば、Emacsは再び候補のいずれかを選択するよう求めてその選択が以前選択された候補をオーバーライドする。"

#. type: defmac
#: original_texis/commands.texi:757
msgid "The variable @code{@var{command}-alternatives} can be created before calling @code{define-alternatives}, with the appropriate values; otherwise the macro creates the variable with a @code{nil} value, and it should then be populated with the associations describing the alternatives.  Packages that wish to provide their own implementation of an existing generic command can use @code{autoload} cookies (@pxref{Autoload}) to add to the alist, for example:"
msgstr "@code{define-alternatives}を呼び出す前に、適切な値で変数@code{@var{command}-alternatives}を作成することも可能。作成しない場合にはマクロが@code{nil}値でこの変数を作成するので、候補を記述する連想値を設定する必要がある。既存のジェネリックコマンドにたいして独自の実装を提供したいパッケージは、たとえば以下のように@code{autoload}クッキー(@ref{Autoload}を参照)を用いて、alistに追加することができる:"

#. type: lisp
#: original_texis/commands.texi:760
#, no-wrap
msgid ";;;###autoload (push '(\"My name\" . my-foo-symbol) foo-alternatives\n"
msgstr ";;;###autoload (push '(\"My name\" . my-foo-symbol) foo-alternatives\n"

#. type: defmac
#: original_texis/commands.texi:766
msgid "If the optional argument @var{customizations} is non-@code{nil}, it should consist of alternating @code{defcustom} keywords (typically @code{:group} and @code{:version}) and values to add to the definition of the @code{defcustom} @code{@var{command}-alternatives}."
msgstr "オプション引数@var{customizations}が非@code{nil}なら、@code{defcustom}キーワード(典型的には@code{:group}と@code{:version})、および@code{defcustom} @code{@var{command}-alternatives}の定義に追加する値により構成される選択肢。"

#. type: defmac
#: original_texis/commands.texi:769
msgid "Here is an example of a simple generic dispatcher command named @code{open} with 3 alternative implementations:"
msgstr "以下は3つｎ実装候補をもつ@code{open}という名前のシンプルなジェネリックディスパッチャーコマンドの例:"

#. type: group
#: original_texis/commands.texi:775
#, no-wrap
msgid ""
"(define-alternatives open\n"
"  :group 'files\n"
"  :version \"42.1\")\n"
msgstr ""
"(define-alternatives open\n"
"  :group 'files\n"
"  :version \"42.1\")\n"

#. type: group
#: original_texis/commands.texi:781
#, no-wrap
msgid ""
"(setq open-alternatives\n"
"      '((\"file\" . find-file)\n"
"\t(\"directory\" . dired)\n"
"\t(\"hexl\" . hexl-find-file)))\n"
msgstr ""
"(setq open-alternatives\n"
"      '((\"file\" . find-file)\n"
"\t(\"directory\" . dired)\n"
"\t(\"hexl\" . hexl-find-file)))\n"

#. type: cindex
#: original_texis/commands.texi:788
#, no-wrap
msgid "interactive call"
msgstr "interactive call"

#. type: Plain text
#: original_texis/commands.texi:795
msgid "After the command loop has translated a key sequence into a command, it invokes that command using the function @code{command-execute}.  If the command is a function, @code{command-execute} calls @code{call-interactively}, which reads the arguments and calls the command.  You can also call these functions yourself."
msgstr "コマンドループはキーシーケンスをコマンドに変換した後、関数@code{command-execute}を使用してその関数を呼び出します。そのコマンドが関数なら、@code{command-execute}は引数を読み取りコマンドを呼び出す@code{call-interactively}を呼び出します。自分でこれらの関数を呼び出すこともできます。"

#. type: Plain text
#: original_texis/commands.texi:800
msgid "Note that the term ``command'', in this context, refers to an interactively callable function (or function-like object), or a keyboard macro.  It does not refer to the key sequence used to invoke a command (@pxref{Keymaps})."
msgstr "このコンテキストにおいて用語``command''はインタラクティブにコール可能な関数(または関数likeなオブジェクト)やキーボードマクロを指すことに注意してください。つまりコマンドを呼び出すキーシーケンスのことではありません(@ref{Keymaps}を参照)。"

#. type: defun
#: original_texis/commands.texi:801
#, no-wrap
msgid "commandp object &optional for-call-interactively"
msgstr "commandp object &optional for-call-interactively"

#. type: defun
#: original_texis/commands.texi:804
msgid "This function returns @code{t} if @var{object} is a command.  Otherwise, it returns @code{nil}."
msgstr "この関数は@var{object}がコマンドなら@code{t}、それ以外は@code{nil}をリターンする。"

#. type: defun
#: original_texis/commands.texi:814
msgid "Commands include strings and vectors (which are treated as keyboard macros), lambda expressions that contain a top-level @code{interactive} form (@pxref{Using Interactive}), byte-code function objects made from such lambda expressions, autoload objects that are declared as interactive (non-@code{nil} fourth argument to @code{autoload}), and some primitive functions.  Also, a symbol is considered a command if it has a non-@code{nil} @code{interactive-form} property, or if its function definition satisfies @code{commandp}."
msgstr "コマンドには文字列とベクター(キーボードマクロとして扱われる)、トップレベルの@code{interactive}フォーム(@ref{Using Interactive}を参照)を含むラムダ式、そのようなラムダ式から作成されたバイトコンパイル関数オブジェクト、interactiveとして宣言(@code{autoload}の4つ目の引数が非@code{nil})されたautoloadオブジェクト、およびいくつかのプリミティブ関数が含まれる。@code{interactive-form}プロパティが非@code{nil}のシンボル、および関数定義が@code{commandp}を満足するシンボルもコマンドとされる。"

#. type: defun
#: original_texis/commands.texi:818
msgid "If @var{for-call-interactively} is non-@code{nil}, then @code{commandp} returns @code{t} only for objects that @code{call-interactively} could call---thus, not for keyboard macros."
msgstr "@var{for-call-interactively}が非@code{nil}なら、@code{call-interactively}が呼び出すことができるオブジェクトにたいしてのみ@code{commandp}は@code{t}をリターンする。したがってキーボードマクロは該当しなくなる。"

#. type: defun
#: original_texis/commands.texi:821
msgid "See @code{documentation} in @ref{Accessing Documentation}, for a realistic example of using @code{commandp}."
msgstr "@code{commandp}を使用する現実的な例については、@ref{Accessing Documentation}内の@code{documentation}を参照のこと。"

#. type: defun
#: original_texis/commands.texi:823
#, no-wrap
msgid "call-interactively command &optional record-flag keys"
msgstr "call-interactively command &optional record-flag keys"

#. type: defun
#: original_texis/commands.texi:827
msgid "This function calls the interactively callable function @var{command}, providing arguments according to its interactive calling specifications.  It returns whatever @var{command} returns."
msgstr "この関数はinteractive呼び出し仕様にしたがって引数を取得し、インタラクティブに呼び出し可能な関数@var{command}を呼び出す。これは@var{command}がリターンするものが何であれ、それをリターンする。"

#. type: defun
#: original_texis/commands.texi:829
msgid "If, for instance, you have a function with the following signature:"
msgstr "たとえばもし以下の署名をもつ関数があり:"

#. type: example
#: original_texis/commands.texi:834
#, no-wrap
msgid ""
"(defun foo (begin end)\n"
"  (interactive \"r\")\n"
"  ...)\n"
msgstr ""
"(defun foo (begin end)\n"
"  (interactive \"r\")\n"
"  ...)\n"

#. type: defun
#: original_texis/commands.texi:837
msgid "then saying"
msgstr "以下を行うと"

#. type: example
#: original_texis/commands.texi:840
#, no-wrap
msgid "(call-interactively 'foo)\n"
msgstr "(call-interactively 'foo)\n"

#. type: defun
#: original_texis/commands.texi:844
msgid "will call @code{foo} with the region (@code{point} and @code{mark}) as the arguments."
msgstr "これはリージョン(@code{point}と@code{mark})を引数として@code{foo}を呼び出すだろう。"

#. type: defun
#: original_texis/commands.texi:851
msgid "An error is signaled if @var{command} is not a function or if it cannot be called interactively (i.e., is not a command).  Note that keyboard macros (strings and vectors) are not accepted, even though they are considered commands, because they are not functions.  If @var{command} is a symbol, then @code{call-interactively} uses its function definition."
msgstr "@var{command}が関数でない、またはインタラクティブに呼び出せない(コマンドでない)場合にはエラーをシグナルする。たとえコマンドだとしても、キーボードマクロ(文字列かベクター)は関数ではないので許容されないことに注意。@var{command}がシンボルなら@code{call-interactively}はそれの関数定義を使用する。"

#. type: cindex
#: original_texis/commands.texi:852
#, no-wrap
msgid "record command history"
msgstr "record command history"

#. type: defun
#: original_texis/commands.texi:857
msgid "If @var{record-flag} is non-@code{nil}, then this command and its arguments are unconditionally added to the list @code{command-history}.  Otherwise, the command is added only if it uses the minibuffer to read an argument.  @xref{Command History}."
msgstr "@var{record-flag}が非@code{nil}なら、このコマンドとコマンドの引数は無条件にリスト@code{command-history}に追加される。それ以外なら引数の読み取りにミニバッファーを使用した場合のみコマンドが追加される。@ref{Command History}を参照のこと。"

#. type: defun
#: original_texis/commands.texi:863
msgid "The argument @var{keys}, if given, should be a vector which specifies the sequence of events to supply if the command inquires which events were used to invoke it.  If @var{keys} is omitted or @code{nil}, the default is the return value of @code{this-command-keys-vector}.  @xref{Definition of this-command-keys-vector}."
msgstr "引数@var{keys}が与えらたら、それはコマンドを呼び出すためにどのイベントを使用するかコマンドが問い合わせた場合に与えるべきイベントシーケンスを指定するベクターである。@var{keys}が@code{nil}または省略された場合のデフォルトは、@code{this-command-keys-vector}のリターン値である。@ref{Definition of this-command-keys-vector}を参照のこと。"

#. type: defun
#: original_texis/commands.texi:865
#, no-wrap
msgid "funcall-interactively function &rest arguments"
msgstr "funcall-interactively function &rest arguments"

#. type: defun
#: original_texis/commands.texi:871
msgid "This function works like @code{funcall} (@pxref{Calling Functions}), but it makes the call look like an interactive invocation: a call to @code{called-interactively-p} inside @var{function} will return @code{t}.  If @var{function} is not a command, it is called without signaling an error."
msgstr "この関数は@code{funcall} (@ref{Calling Functions}を参照)と同様に機能するが、インタラクティブな呼び出しのように見える呼び出しを生成する。@var{function}内部での@code{called-interactively-p}の呼び出しは@code{t}をリターンするだろう。@var{function}がコマンドでなければ、エラーをシグラルすることなくそれを呼び出す。"

#. type: defun
#: original_texis/commands.texi:873
#, no-wrap
msgid "command-execute command &optional record-flag keys special"
msgstr "command-execute command &optional record-flag keys special"

#. type: cindex
#: original_texis/commands.texi:874
#, no-wrap
msgid "keyboard macro execution"
msgstr "keyboard macro execution"

#. type: defun
#: original_texis/commands.texi:878
msgid "This function executes @var{command}.  The argument @var{command} must satisfy the @code{commandp} predicate; i.e., it must be an interactively callable function or a keyboard macro."
msgstr "この関数は@var{command}を実行する。引数@var{command}は述語@code{commandp}を満足しなければならない。つまりインタラクティブに呼び出し可能な関数かキーボードマクロでなければならない。"

#. type: defun
#: original_texis/commands.texi:883
msgid "A string or vector as @var{command} is executed with @code{execute-kbd-macro}.  A function is passed to @code{call-interactively} (see above), along with the @var{record-flag} and @var{keys} arguments."
msgstr "@var{command}が文字列かベクターなら、@code{execute-kbd-macro}により実行される。関数は@var{record-flag}および@var{keys}引数とともに@code{call-interactively}に渡される(上記参照)。"

#. type: defun
#: original_texis/commands.texi:889
msgid "If @var{command} is a symbol, its function definition is used in its place.  A symbol with an @code{autoload} definition counts as a command if it was declared to stand for an interactively callable function.  Such a definition is handled by loading the specified library and then rechecking the definition of the symbol."
msgstr "@var{command}がシンボルなら、その位置にシンボルの関数定義が使用される。@code{autoload}定義のあるシンボルは、インタラクティブに呼び出し可能な関数を意味するよう宣言されていればコマンドとして判断される。そのような宣言は指定されたライブラリーのロードと、シンボル定義の再チェックにより処理される。"

#. type: defun
#: original_texis/commands.texi:893
msgid "The argument @var{special}, if given, means to ignore the prefix argument and not clear it.  This is used for executing special events (@pxref{Special Events})."
msgstr "引数@var{special}が与えられたら、それはプレフィクス引数を無視して、それをクリアーしないという意味である。これはスペシャルイベント(@ref{Special Events}を参照)を実行する場合に使用される。"

#. type: deffn
#: original_texis/commands.texi:895
#, no-wrap
msgid "Command execute-extended-command prefix-argument"
msgstr "Command execute-extended-command prefix-argument"

#. type: cindex
#: original_texis/commands.texi:896
#, no-wrap
msgid "read command name"
msgstr "read command name"

#. type: deffn
#: original_texis/commands.texi:901
msgid "This function reads a command name from the minibuffer using @code{completing-read} (@pxref{Completion}).  Then it uses @code{command-execute} to call the specified command.  Whatever that command returns becomes the value of @code{execute-extended-command}."
msgstr "この関数は@code{completing-read}(@ref{Completion}を参照)を使用して、ミニバッファーからコマンド名を読み取る。その後で指定されたコマンドを呼び出すために@code{command-execute}を使用する。そのコマンドがリターンするのが何であれ、それが@code{execute-extended-command}の値となる。"

#. type: cindex
#: original_texis/commands.texi:902
#, no-wrap
msgid "execute with prefix argument"
msgstr "execute with prefix argument"

#. type: deffn
#: original_texis/commands.texi:907
msgid "If the command asks for a prefix argument, it receives the value @var{prefix-argument}.  If @code{execute-extended-command} is called interactively, the current raw prefix argument is used for @var{prefix-argument}, and thus passed on to whatever command is run."
msgstr "そのコマンドがプレフィクス引数を求める場合には、@var{prefix-argument}の値を受け取る。@code{execute-extended-command}がインタラクティブに呼び出されたら、カレントのrawプレフィクス引数が@var{prefix-argument}に使用され、それが何であれ実行するコマンドに渡される。"

#. type: kbd{#1}
#: original_texis/commands.texi:909
#, no-wrap
msgid "M-x"
msgstr "M-x"

#. type: deffn
#: original_texis/commands.texi:916
msgid "@code{execute-extended-command} is the normal definition of @kbd{M-x}, so it uses the string @w{@samp{M-x }} as a prompt.  (It would be better to take the prompt from the events used to invoke @code{execute-extended-command}, but that is painful to implement.)  A description of the value of the prefix argument, if any, also becomes part of the prompt."
msgstr "通常は@code{execute-extended-command}は@kbd{M-x}の定義なので、プロンプトとして文字列@w{@samp{M-x }}を使用する(@code{execute-extended-command}を呼び出したイベントからプロンプトを受け取るほうが良いのだろうが実装は苦痛を併なう)。プレフィクス引数の値の説明がもしあれば、それもプロンプトの一部となる。"

#. type: group
#: original_texis/commands.texi:924
#, no-wrap
msgid ""
"(execute-extended-command 3)\n"
"---------- Buffer: Minibuffer ----------\n"
"3 M-x forward-word @key{RET}\n"
"---------- Buffer: Minibuffer ----------\n"
"     @result{} t\n"
msgstr ""
"(execute-extended-command 3)\n"
"---------- Buffer: Minibuffer ----------\n"
"3 M-x forward-word @key{RET}\n"
"---------- Buffer: Minibuffer ----------\n"
"     @result{} t\n"

#. type: findex
#: original_texis/commands.texi:928
#, no-wrap
msgid "command-completion-default-include-p"
msgstr "command-completion-default-include-p"

#. type: deffn
#: original_texis/commands.texi:940
msgid "This command heeds the @code{read-extended-command-predicate} variable, which can filter out commands that are not applicable to the current major mode (or enabled minor modes).  By default, the value of this variable is @code{nil}, and no commands are filtered out.  However, customizing it to invoke the function @code{command-completion-default-include-p} will perform mode-dependent filtering.  @code{read-extended-command-predicate} can be any predicate function; it will be called with two parameters: the command's symbol and the current buffer.  If should return non-@code{nil} if the command is to be included when completing in that buffer."
msgstr "このコマンドはカレントメジャーモード(や有効なマイナーモード)に不適切なコマンドを除外する@code{read-extended-command-predicate}変数を考慮する。この変数の値はデフォルトでは@code{nil}であり、除外されるコマンドはない。しかし関数@code{command-completion-default-include-p}を呼び出すようにカスタマイズすることで、モードに応じたフィルタリングを行うようになる。@code{read-extended-command-predicate}には任意の述語関数を指定できる。これはそのコマンドのシンボル、およびカレントバッファーという2つのパラメーターで呼び出される。そのバッファーニオイそのコマンドを補完に含めるなら非@code{nil}をリターンすること。"

#. type: kbd{#1}
#: original_texis/commands.texi:942
#, no-wrap
msgid "M-X"
msgstr "M-X"

#. type: kbd{#1}
#: original_texis/commands.texi:943
#, no-wrap
msgid "M-S-x"
msgstr "M-S-x"

#. type: deffn
#: original_texis/commands.texi:944
#, no-wrap
msgid "Command execute-extended-command-for-buffer prefix-argument"
msgstr "Command execute-extended-command-for-buffer prefix-argument"

#. type: deffn
#: original_texis/commands.texi:952
msgid "This is like @code{execute-extended-command}, but limits the commands offered for completion to those commands that are of particular relevance to the current major mode (and enabled minor modes).  This includes commands that are tagged with the modes (@pxref{Using Interactive}), and also commands that are bound to locally active keymaps.  This command is the normal definition of @kbd{M-S-x} (that's ``meta shift x'')."
msgstr "これは@code{execute-extended-command}と似ているが、補完にたいしてカレントバッファー(や有効なマイナーモード)と特に関連するものに限定してコマンドを提案する。これらにはそのモードにタグ付けされたコマンド(@ref{Using Interactive}を参照)、およびローカルでアクティブなキーマップにバインドされたコマンドも含まれる。このコマンドは@kbd{M-S-x} (すなわち``meta shift x'')の通常の定義である。"

#. type: Plain text
#: original_texis/commands.texi:957
msgid "Both these commands prompt for a command name, but with different completion rules.  You can toggle between these two modes by using the @kbd{M-S-x} command while being prompted."
msgstr "これらのコマンドはいずれもコマンド名の入力を求めますが、補完ルールは異なります。入力を求められた際に@kbd{M-S-x}コマンドを使用することで、2つの補完モードを切り替えることができます。"

#. type: section
#: original_texis/commands.texi:959
#, no-wrap
msgid "Distinguish Interactive Calls"
msgstr "Distinguish Interactive Calls"

#. type: cindex
#: original_texis/commands.texi:960
#, no-wrap
msgid "distinguish interactive calls"
msgstr "distinguish interactive calls"

#. type: cindex
#: original_texis/commands.texi:961
#, no-wrap
msgid "is this call interactive"
msgstr "is this call interactive"

#. type: Plain text
#: original_texis/commands.texi:970
msgid "Sometimes a command should display additional visual feedback (such as an informative message in the echo area) for interactive calls only.  There are three ways to do this.  The recommended way to test whether the function was called using @code{call-interactively} is to give it an optional argument @code{print-message} and use the @code{interactive} spec to make it non-@code{nil} in interactive calls.  Here's an example:"
msgstr "interactive呼び出しの際に、コマンドが(エコーエリア内の情報メッセージなどのような)視覚的な追加フィードバックを表示すべきときがあります。これを行うためには3つの方法があります。その関数が@code{call-interactively}を使用して呼び出されたかどうかテストするには、オプション引数@code{print-message}を与えるとともに、interactive呼び出しで非@code{nil}となるように@code{interactive}仕様を使うのが推奨される方法です。以下は例です:"

#. type: example
#: original_texis/commands.texi:976
#, no-wrap
msgid ""
"(defun foo (&optional print-message)\n"
"  (interactive \"p\")\n"
"  (when print-message\n"
"    (message \"foo\")))\n"
msgstr ""
"(defun foo (&optional print-message)\n"
"  (interactive \"p\")\n"
"  (when print-message\n"
"    (message \"foo\")))\n"

#. type: Plain text
#: original_texis/commands.texi:982
msgid "We use @code{\"p\"} because the numeric prefix argument is never @code{nil}.  Defined in this way, the function does display the message when called from a keyboard macro."
msgstr "数プレフィクス引数は決して@code{nil}にならないので、わたしたちは@code{\"p\"}を使用します。この方法で定義された関数はキーボードマクロから呼び出されたときにメッセージを表示します。"

#. type: Plain text
#: original_texis/commands.texi:986
msgid "The above method with the additional argument is usually best, because it allows callers to say ``treat this call as interactive''.  But you can also do the job by testing @code{called-interactively-p}."
msgstr "追加引数による上記の手法は、呼び出し側に``この呼び出しをinteractiveとして扱うように''伝えることができるので通常は最善です。しかし@code{called-interactively-p}をテストすることによってこれを行うこともできます。"

#. type: defun
#: original_texis/commands.texi:987
#, no-wrap
msgid "called-interactively-p kind"
msgstr "called-interactively-p kind"

#. type: defun
#: original_texis/commands.texi:990
msgid "This function returns @code{t} when the calling function was called using @code{call-interactively}."
msgstr "この関数は呼び出された関数が@code{call-interactively}を使用して呼び出されえいたら@code{t}をリターンする。"

#. type: defun
#: original_texis/commands.texi:999
msgid "The argument @var{kind} should be either the symbol @code{interactive} or the symbol @code{any}.  If it is @code{interactive}, then @code{called-interactively-p} returns @code{t} only if the call was made directly by the user---e.g., if the user typed a key sequence bound to the calling function, but @emph{not} if the user ran a keyboard macro that called the function (@pxref{Keyboard Macros}).  If @var{kind} is @code{any}, @code{called-interactively-p} returns @code{t} for any kind of interactive call, including keyboard macros."
msgstr "引数@var{kind}はシンボル@code{interactive}かシンボル@code{any}のいずれかである。これが@code{interactive}なら、@code{called-interactively-p}はユーザーから直接呼び出しが行われたとき --- たとえば関数呼び出しにバインドされたキーシーケンスをユーザーがタイプした場合がそれに該当するが、ユーザーがその関数を呼び出すキーボードマクロ(@ref{Keyboard Macros}を参照)を実行中した場合は@emph{該当しない} --- だけ@code{t}をリターンする。@var{kind}が@code{any}なら、@code{called-interactively-p}はキーボードマクロを含む任意の種類のinteractive呼び出しにたいして@code{t}をリターンする。"

#. type: defun
#: original_texis/commands.texi:1003
msgid "If in doubt, use @code{any}; the only known proper use of @code{interactive} is if you need to decide whether to display a helpful message while a function is running."
msgstr "疑わしい場合には@code{any}を使用すること。@code{interactive}の使用が正しいと解っているのは、関数が実行中に役に立つメッセージを表示するかどうか判断が必要な場合だけである。"

#. type: defun
#: original_texis/commands.texi:1006
msgid "A function is never considered to be called interactively if it was called via Lisp evaluation (or with @code{apply} or @code{funcall})."
msgstr "Lisp評価(または@code{apply}や@code{funcall}))を通じて呼び出された場合には、関数は決してインタラクティブに呼び出されたとは判断されない。"

#. type: Plain text
#: original_texis/commands.texi:1010
msgid "Here is an example of using @code{called-interactively-p}:"
msgstr "以下は@code{called-interactively-p}を使用する例:"

#. type: group
#: original_texis/commands.texi:1018
#, no-wrap
msgid ""
"(defun foo ()\n"
"  (interactive)\n"
"  (when (called-interactively-p 'any)\n"
"    (message \"Interactive!\")\n"
"    'foo-called-interactively))\n"
msgstr ""
"(defun foo ()\n"
"  (interactive)\n"
"  (when (called-interactively-p 'any)\n"
"    (message \"Interactive!\")\n"
"    'foo-called-interactively))\n"

#. type: group
#: original_texis/commands.texi:1023
#, no-wrap
msgid ""
";; @r{Type @kbd{M-x foo}.}\n"
"     @print{} Interactive!\n"
msgstr ""
";; @r{@kbd{M-x foo}とタイプする}\n"
"     @print{} Interactive!\n"

#. type: group
#: original_texis/commands.texi:1028
#, no-wrap
msgid ""
"(foo)\n"
"     @result{} nil\n"
msgstr ""
"(foo)\n"
"     @result{} nil\n"

#. type: Plain text
#: original_texis/commands.texi:1034
msgid "Here is another example that contrasts direct and indirect calls to @code{called-interactively-p}."
msgstr "以下は@code{called-interactively-p}の直接呼び出しと間接呼び出しを比較した例。"

#. type: group
#: original_texis/commands.texi:1040
#, no-wrap
msgid ""
"(defun bar ()\n"
"  (interactive)\n"
"  (message \"%s\" (list (foo) (called-interactively-p 'any))))\n"
msgstr ""
"(defun bar ()\n"
"  (interactive)\n"
"  (message \"%s\" (list (foo) (called-interactively-p 'any))))\n"

#. type: group
#: original_texis/commands.texi:1045
#, no-wrap
msgid ""
";; @r{Type @kbd{M-x bar}.}\n"
"     @print{} (nil t)\n"
msgstr ""
";; @r{@kbd{M-x bar}とタイプする}\n"
"     @print{} (nil t)\n"

#. type: section
#: original_texis/commands.texi:1049
#, no-wrap
msgid "Information from the Command Loop"
msgstr "Information from the Command Loop"

#. type: cindex
#: original_texis/commands.texi:1050
#, no-wrap
msgid "command loop variables"
msgstr "command loop variables"

#. type: Plain text
#: original_texis/commands.texi:1056
msgid "The editor command loop sets several Lisp variables to keep status records for itself and for commands that are run.  With the exception of @code{this-command} and @code{last-command} it's generally a bad idea to change any of these variables in a Lisp program."
msgstr "エディターコマンドループは自分自身と実行するコマンドのために、いくつかのLisp変数にステータス記録を保持します。一般的に@code{this-command}と@code{last-command}以外は、Lispプログラム内でこれらの変数を変更するのは良いアイデアではありません。"

#. type: defvar
#: original_texis/commands.texi:1057
#, no-wrap
msgid "last-command"
msgstr "last-command"

#. type: defvar
#: original_texis/commands.texi:1061
msgid "This variable records the name of the previous command executed by the command loop (the one before the current command).  Normally the value is a symbol with a function definition, but this is not guaranteed."
msgstr "この変数はコマンドループによって実行された以前のコマンド(前にカレントだったコマンド)の名前を記録する。値は通常は関数定義をもつシンボルだが、その保証はない。"

#. type: defvar
#: original_texis/commands.texi:1065
msgid "The value is copied from @code{this-command} when a command returns to the command loop, except when the command has specified a prefix argument for the following command."
msgstr "コマンドがコマンドループからリターンするとき、@code{this-command}から値がコピーされる。ただしそのコマンドが後続のコマンドにたいしてプレフィクス引数を指定されたときを除く。"

#. type: defvar
#: original_texis/commands.texi:1068
msgid "This variable is always local to the current terminal and cannot be buffer-local.  @xref{Multiple Terminals}."
msgstr "この変数は常にカレント端末にたいしてローカルであり、バッファーローカルにできない。@ref{Multiple Terminals}を参照のこと。"

#. type: defvar
#: original_texis/commands.texi:1070
#, no-wrap
msgid "real-last-command"
msgstr "real-last-command"

#. type: defvar
#: original_texis/commands.texi:1073
msgid "This variable is set up by Emacs just like @code{last-command}, but never altered by Lisp programs."
msgstr "この変数はEmacsにより@code{last-command}と同様にセットアップされるが、Lispプログラムから決して変更されない。"

#. type: defvar
#: original_texis/commands.texi:1075
#, no-wrap
msgid "last-repeatable-command"
msgstr "last-repeatable-command"

#. type: defvar
#: original_texis/commands.texi:1079
msgid "This variable stores the most recently executed command that was not part of an input event.  This is the command @code{repeat} will try to repeat, @xref{Repeating,,, emacs, The GNU Emacs Manual}."
msgstr "この変数は入力イベントの一部ではない、もっとも最近実行されたコマンドを格納する。これはコマンド@code{repeat}が再実行を試みるコマンドである。@ref{Repeating,,, emacs, The GNU Emacs Manual}を参照のこと。"

#. type: defvar
#: original_texis/commands.texi:1081
#, no-wrap
msgid "this-command"
msgstr "this-command"

#. type: cindex
#: original_texis/commands.texi:1082
#, no-wrap
msgid "current command"
msgstr "current command"

#. type: defvar
#: original_texis/commands.texi:1086
msgid "This variable records the name of the command now being executed by the editor command loop.  Like @code{last-command}, it is normally a symbol with a function definition."
msgstr "この変数はコマンドループにより現在実行中のコマンドの名前を記録する。@code{last-command}と同様、通常は関数定義をもつシンボルである。"

#. type: defvar
#: original_texis/commands.texi:1091
msgid "The command loop sets this variable just before running a command, and copies its value into @code{last-command} when the command finishes (unless the command specified a prefix argument for the following command)."
msgstr "コマンドループはコマンドを実行する直前にこの変数をセットして、(そのコマンドが後続のコマンドのプレフィクス引数を指定しなければ)そのコマンドが終了したときにその値を@code{last-command}にコピーする。"

#. type: cindex
#: original_texis/commands.texi:1092
#, no-wrap
msgid "kill command repetition"
msgstr "kill command repetition"

#. type: defvar
#: original_texis/commands.texi:1098
msgid "Some commands set this variable during their execution, as a flag for whatever command runs next.  In particular, the functions for killing text set @code{this-command} to @code{kill-region} so that any kill commands immediately following will know to append the killed text to the previous kill."
msgstr "いくつかのコマンドは次に実行されるコマンドが何であれ、それにたいするフラグとして実行中の間この変数をセットする。特にテキストをkillする関数は@code{this-command}を@code{kill-region}にセットするので、直後に実行された任意のkillコマンドは、killしたテキストを前にkillされたテキストに追加するべきことが解かるだろう。"

#. type: Plain text
#: original_texis/commands.texi:1105
msgid "If you do not want a particular command to be recognized as the previous command in the case where it got an error, you must code that command to prevent this.  One way is to set @code{this-command} to @code{t} at the beginning of the command, and set @code{this-command} back to its proper value at the end, like this:"
msgstr "特定のコマンドでエラー発生時に前のコマンドとして認識されたくなければ、それを防ぐようにそのコマンドをコーディングしなければなりません。これを行う1つの方法は、以下のようにコマンドの最初で@code{this-command}に@code{t}をセットして、最後に@code{this-command}に正しい値をセットする方法です:"

#. type: example
#: original_texis/commands.texi:1113
#, no-wrap
msgid ""
"(defun foo (args@dots{})\n"
"  (interactive @dots{})\n"
"  (let ((old-this-command this-command))\n"
"    (setq this-command t)\n"
"    @r{@dots{}do the work@dots{}}\n"
"    (setq this-command old-this-command)))\n"
msgstr ""
"(defun foo (args@dots{})\n"
"  (interactive @dots{})\n"
"  (let ((old-this-command this-command))\n"
"    (setq this-command t)\n"
"    @r{@dots{} 処理を行う @dots{}}\n"
"    (setq this-command old-this-command)))\n"

#. type: Plain text
#: original_texis/commands.texi:1119
msgid "We do not bind @code{this-command} with @code{let} because that would restore the old value in case of error---a feature of @code{let} which in this case does precisely what we want to avoid."
msgstr "エラーなら@code{let}は古い値をリストアするので、わたしたちは@code{let}で@code{this-command}をバインドしません。この場合における@code{let}の機能は、わたしたちが正に避けたいと思っていることを行ってしまうでしょう。"

#. type: defvar
#: original_texis/commands.texi:1120
#, no-wrap
msgid "this-original-command"
msgstr "this-original-command"

#. type: defvar
#: original_texis/commands.texi:1126
msgid "This has the same value as @code{this-command} except when command remapping occurs (@pxref{Remapping Commands}).  In that case, @code{this-command} gives the command actually run (the result of remapping), and @code{this-original-command} gives the command that was specified to run but remapped into another command."
msgstr "コマンドのリマップ(@ref{Remapping Commands}を参照)が発生したときを除き、これは@code{this-command}と同じ値をもつ。リマップが発生すると@code{this-command}は実際に実行されたコマンド、@code{this-original-command}は実行を指定されたが他のコマンドにリマップされたコマンドを与える。"

#. type: defvar
#: original_texis/commands.texi:1128
#, no-wrap
msgid "current-minibuffer-command"
msgstr "current-minibuffer-command"

#. type: defvar
#: original_texis/commands.texi:1133
msgid "This has the same value as @code{this-command}, but is bound recursively when entering a minibuffer.  This variable can be used from minibuffer hooks and the like to determine what command opened the current minibuffer session."
msgstr "これは@code{this-command}と同じ値をもつが、ミニバッファーへエンター時２再帰的にバインドされる。この変数はカレントミニバッファーセッションをオープンしたコマンドが何かを判定するために、ミニバッファーフック等から使用されるかもしれない。"

#. type: defun
#: original_texis/commands.texi:1135
#, no-wrap
msgid "this-command-keys"
msgstr "this-command-keys"

#. type: defun
#: original_texis/commands.texi:1139
msgid "This function returns a string or vector containing the key sequence that invoked the present command.  Any events read by the command using @code{read-event} without a timeout get tacked on to the end."
msgstr "この関数は現在のコマンドを呼び出したキーシーケンスを含む文字列かベクターをリターンする。@code{read-event}を使用するコマンドにより、タイムアウトせずに読み取られたすべてのイベントが最後に加えられる。"

#. type: defun
#: original_texis/commands.texi:1144
msgid "However, if the command has called @code{read-key-sequence}, it returns the last read key sequence.  @xref{Key Sequence Input}.  The value is a string if all events in the sequence were characters that fit in a string.  @xref{Input Events}."
msgstr "しかしそのコマンドが@code{read-key-sequence}を呼び出していたら、最後に読み取られたキーシーケンスをリターンする。@ref{Key Sequence Input}を参照のこと。シーケンス内のすべてのイベントが文字列として適当な文字なら文字列が値になる。@ref{Input Events}を参照のこと。"

#. type: group
#: original_texis/commands.texi:1150
#, no-wrap
msgid ""
"(this-command-keys)\n"
";; @r{Now use @kbd{C-u C-x C-e} to evaluate that.}\n"
"     @result{} \"^X^E\"\n"
msgstr ""
"(this-command-keys)\n"
";; @r{これを評価するために@kbd{C-u C-x C-e}を使用すると}\n"
"     @result{} \"^U^X^E\"\n"

#. type: defun
#: original_texis/commands.texi:1154
#, no-wrap
msgid "this-command-keys-vector"
msgstr "this-command-keys-vector"

#. type: anchor{#1}
#: original_texis/commands.texi:1159
msgid "Definition of this-command-keys-vector"
msgstr "Definition of this-command-keys-vector"

#. type: defun
#: original_texis/commands.texi:1159
msgid "Like @code{this-command-keys}, except that it always returns the events in a vector, so you don't need to deal with the complexities of storing input events in a string (@pxref{Strings of Events})."
msgstr "@code{this-command-keys}と同様だが常にベクターでイベントをリターンするので、入力イベントを文字列内に格納する複雑さを処理する必要がない(@ref{Strings of Events}を参照)。"

#. type: defun
#: original_texis/commands.texi:1161
#, no-wrap
msgid "clear-this-command-keys &optional keep-record"
msgstr "clear-this-command-keys &optional keep-record"

#. type: defun
#: original_texis/commands.texi:1168
msgid "This function empties out the table of events for @code{this-command-keys} to return.  Unless @var{keep-record} is non-@code{nil}, it also empties the records that the function @code{recent-keys} (@pxref{Recording Input}) will subsequently return.  This is useful after reading a password, to prevent the password from echoing inadvertently as part of the next command in certain cases."
msgstr "この関数は@code{this-command-keys}がリターンするイベントテーブルを空にする。@var{keep-record}が@code{nil}なら、その後に関数@code{recent-keys}(@ref{Recording Input}を参照)がリターンするレコードも空にする。これは特定のケースにおいてパスワードを読み取った後、次のコマンドの一部として不用意にパスワードがエコーされるのを防ぐために有用である。"

#. type: defvar
#: original_texis/commands.texi:1170
#, no-wrap
msgid "last-nonmenu-event"
msgstr "last-nonmenu-event"

#. type: defvar
#: original_texis/commands.texi:1173
msgid "This variable holds the last input event read as part of a key sequence, not counting events resulting from mouse menus."
msgstr "この変数はキーシーケンス(マウスメニューからのイベントは勘定しない)の一部として読み取られた最後の入力イベントを保持する。"

#. type: defvar
#: original_texis/commands.texi:1177
msgid "One use of this variable is for telling @code{x-popup-menu} where to pop up a menu.  It is also used internally by @code{y-or-n-p} (@pxref{Yes-or-No Queries})."
msgstr "この変数の1つの使い方は、@code{x-popup-menu}にたいしてどこにメニューをポップアップすべきか告げる場合である。これは内部的に @code{y-or-n-p}(@ref{Yes-or-No Queries}を参照)にも使用されている。"

#. type: defvar
#: original_texis/commands.texi:1179
#, no-wrap
msgid "last-command-event"
msgstr "last-command-event"

#. type: defvar
#: original_texis/commands.texi:1186
msgid "This variable is set to the last input event that was read by the command loop as part of a command.  The principal use of this variable is in @code{self-insert-command}, which uses it to decide which character to insert, and in @code{post-self-insert-hook} (@pxref{Commands for Insertion}), which uses it to access the character that was just inserted."
msgstr "この変数にはコマンドの一部としてコマンドループに読み取られた最後の入力イベントがセットされる。この変数は主に@code{self-insert-command} (どの文字が挿入されたか判断するため)、および@code{post-self-insert-hook} (挿入された文字にアクセスするため)の内部で使用されている(@ref{Commands for Insertion}を参照)。"

#. type: group
#: original_texis/commands.texi:1192
#, no-wrap
msgid ""
"last-command-event\n"
";; @r{Now use @kbd{C-u C-x C-e} to evaluate that.}\n"
"     @result{} 5\n"
msgstr ""
"last-command-event\n"
";; @r{これを評価するために@kbd{C-u C-x C-e}を使用すると}\n"
"     @result{} 5\n"

#. type: defvar
#: original_texis/commands.texi:1197
msgid "The value is 5 because that is the @acronym{ASCII} code for @kbd{C-e}."
msgstr "@kbd{C-e}の@acronym{ASCII}コードの5が値になる。"

#. type: defvar
#: original_texis/commands.texi:1199
#, no-wrap
msgid "last-event-frame"
msgstr "last-event-frame"

#. type: defvar
#: original_texis/commands.texi:1205
msgid "This variable records which frame the last input event was directed to.  Usually this is the frame that was selected when the event was generated, but if that frame has redirected input focus to another frame, the value is the frame to which the event was redirected.  @xref{Input Focus}."
msgstr "この変数は最後の入力イベントが送られたフレームを記録する。これは通常はそのイベントが生成されたときに選択されていたフレームだが、そのフレームの入力が他のフレームにリダイレクトされていたら、そのリダイレクトされていたフレームが値となる。@ref{Input Focus}を参照のこと。"

#. type: defvar
#: original_texis/commands.texi:1207
msgid "If the last event came from a keyboard macro, the value is @code{macro}."
msgstr "最後のイベントがキーボードマクロに由来する場合、値は@code{macro}になる。"

#. type: cindex
#: original_texis/commands.texi:1209
#, no-wrap
msgid "input devices"
msgstr "input devices"

#. type: cindex
#: original_texis/commands.texi:1210
#, no-wrap
msgid "device names"
msgstr "device names"

#. type: Plain text
#: original_texis/commands.texi:1218
msgid "Input events must come from somewhere; sometimes, that is a keyboard macro, a signal, or `unread-command-events', but it is usually a physical input device connected to a computer that is controlled by the user.  Those devices are referred to as @dfn{input devices}, and Emacs associates each input event with the input device from which it originated.  They are identified by a name that is unique to each input device."
msgstr "入力イベントには、その発生元となるどこかから送られてこなければなりません。それがキーボードマクロ、シグナル、あるいは`unread-command-events'のときもありますが、通常はコンピューターに接続されたユーザーの制御する物理的な入力デバイスからでしょう。これらのデバイスは@dfn{入力デバイス(input device)}と呼ばれており、Emacsは入力イベントそれぞれを発生元である入力デバイスに関連付けています。これらのデバイスは入力デバイスそれぞれにたいして一意な名前によって識別されます。"

#. type: Plain text
#: original_texis/commands.texi:1225
msgid "The ability to determine the precise input device used depends on the details of each system.  When that information is unavailable, Emacs reports keyboard events as originating from the @samp{\"Virtual core keyboard\"}, and other events as originating from the @samp{\"Virtual core pointer\"}.  (These values are used on every platform because the X server reports them when detailed device information is not known.)"
msgstr "使用された入力デバイスを正確に判別できる能力は、各システムの詳細に依存します。その情報が利用できなければ、Emacsはキーボードイベントの発生元を@samp{\"Virtual core keyboard\"}、その他のイベントの発生元を@samp{\"Virtual core pointer\"}のように報告します(これらは詳細なデバイス情報が不明なときにXサーバーが報告するデバイス名なので、すべてのプラットフォームでこれらの値をデバイス名として使用する)。"

#. type: defvar
#: original_texis/commands.texi:1226
#, no-wrap
msgid "last-event-device"
msgstr "last-event-device"

#. type: defvar
#: original_texis/commands.texi:1231
msgid "This variable records the name of the input device from which the last input event read was generated.  It is @code{nil} if no such device exists, i.e., the last input event was read from @code{unread-command-events}, or it came from a keyboard macro."
msgstr "この変数は最後に読み取られた入力イベントの発生元となる入力デバイス名を記録する。そのようなデバイスが存在しなければ@code{nil}(たとえば最後の入力イベントを@code{unread-command-events}から読み取ったときや、キーボードマクロが発生元のとき)。"

#. type: defvar
#: original_texis/commands.texi:1238
msgid "When the X Input Extension is being used on X Windows, the device name is a string that is unique to each physical keyboard, pointing device and touchscreen attached to the X server.  Otherwise, it is either the string @samp{\"Virtual core pointer\"} or @samp{\"Virtual core keyboard\"}, depending on whether the event was generated by a pointing device (such as a mouse) or a keyboard."
msgstr "XウィンドウでXInput拡張(X Input Extension)が使用される際のデバイス名はXサーバーに接続された物理キーボード、ポインティングデバイス、タッチスクリーンそれぞれにたいして一意な文字列となる。それ以外の場合には@samp{\"Virtual core pointer\"}か@samp{\"Virtual core keyboard\"}という文字列のいずれかであり、それはそのイベントが(マウスのような)ポインティングデバイス、あるいはキーボードのいずれによって生成されたかに依存する。"

#. type: defun
#: original_texis/commands.texi:1240
#, no-wrap
msgid "device-class frame name"
msgstr "device-class frame name"

#. type: defun
#: original_texis/commands.texi:1245
msgid "There are various different types of devices, which can be determined from their names.  This function can be used to determined the correct type of the device @var{name} for an event originating from @var{frame}."
msgstr "異なるさまざまなタイプのデバイスがあり、それらのデバイスは名前によって判別できる。この関数は@var{frame}で発生したイベントにたいして、デバイス@var{name}の正しいタイプを決定するために使用できる。"

#. type: defun
#: original_texis/commands.texi:1247
msgid "The return value is one of the following symbols (``device classes''):"
msgstr "リターン値は以下のシンボル(``デバイスクラス'')のいずれか:"

#. type: item
#: original_texis/commands.texi:1249
#, no-wrap
msgid "core-keyboard"
msgstr "core-keyboard"

#. type: table
#: original_texis/commands.texi:1252
msgid "The core keyboard; this is means the device is a keyboard-like device, but no other characteristics are unknown."
msgstr "コアキーボード(core keyboard)。そのデバイスがキーボードのようなデバイスだが、その他の特徴が不明なことを意味する。"

#. type: item
#: original_texis/commands.texi:1253
#, no-wrap
msgid "core-pointer"
msgstr "core-pointer"

#. type: table
#: original_texis/commands.texi:1256
msgid "The core pointer; this means the device is a pointing device, but no other characteristics are known."
msgstr "コアキーボード(core pointer)。そのデバイスがポインティングデバイスのようなデバイスだが、その他の特徴が不明なことを意味する。"

#. type: item
#: original_texis/commands.texi:1257
#, no-wrap
msgid "mouse"
msgstr "mouse"

#. type: table
#: original_texis/commands.texi:1259
msgid "A computer mouse."
msgstr "コンピューターマウス。"

#. type: item
#: original_texis/commands.texi:1260
#, no-wrap
msgid "trackpoint"
msgstr "trackpoint"

#. type: table
#: original_texis/commands.texi:1262
msgid "A trackpoint or joystick (or other similar control.)"
msgstr "トラックポイントやジョイスティック(または同種のコントローラー)。"

#. type: item
#: original_texis/commands.texi:1263
#, no-wrap
msgid "eraser"
msgstr "eraser"

#. type: table
#: original_texis/commands.texi:1266
msgid "The other end of a stylus on a graphics tablet, or a standalone eraser."
msgstr "グラフィックタブレットのスタイラス(タッチペン)の反対側やスタンドアロンのイレイサー(消しゴム)。"

#. type: item
#: original_texis/commands.texi:1267
#, no-wrap
msgid "pen"
msgstr "pen"

#. type: table
#: original_texis/commands.texi:1270
msgid "The pointed end of a pen on a graphics tablet, a stylus, or some other similar device."
msgstr "グラフィックタブレットのペン、スタイラス、または同種デバイスのペン先端。"

#. type: item
#: original_texis/commands.texi:1271
#, no-wrap
msgid "puck"
msgstr "puck"

#. type: table
#: original_texis/commands.texi:1274
msgid "A device that looks like a computer mouse, but reports absolute coordinates relative to some other surface."
msgstr "コンピュータのマウスのように見えるが、他の何かの面にたいする絶対座標を報告するデバイス。"

#. type: item
#: original_texis/commands.texi:1275
#, no-wrap
msgid "power-button"
msgstr "power-button"

#. type: table
#: original_texis/commands.texi:1277
msgid "A power button or volume button (or other similar control.)"
msgstr "電源ボタンやボリュームボタン(または同種のコントローラー)。"

#. type: item
#: original_texis/commands.texi:1278
#, no-wrap
msgid "keyboard"
msgstr "keyboard"

#. type: table
#: original_texis/commands.texi:1280
msgid "A computer keyboard."
msgstr "コンピューターキーボード。"

#. type: item
#: original_texis/commands.texi:1281
#, no-wrap
msgid "touchscreen"
msgstr "touchscreen"

#. type: table
#: original_texis/commands.texi:1283
msgid "A computer touchpad."
msgstr "コンピュータータッチパッド。"

#. type: item
#: original_texis/commands.texi:1284
#, no-wrap
msgid "pad"
msgstr "pad"

#. type: table
#: original_texis/commands.texi:1287
msgid "A collection of sensitive buttons, rings, and strips commonly found around a drawing tablet."
msgstr "描画タブレットの周辺機器で一般的なセンシティブボタン(sensitive button)、リング(ring)、ストリップ(strip)のコレクション。"

#. type: item
#: original_texis/commands.texi:1288
#, no-wrap
msgid "touchpad"
msgstr "touchpad"

#. type: table
#: original_texis/commands.texi:1290
msgid "An indirect touch device such as a touchpad."
msgstr "タッチパッドのような二次的タッチデバイス。"

#. type: item
#: original_texis/commands.texi:1291
#, no-wrap
msgid "piano"
msgstr "piano"

#. type: table
#: original_texis/commands.texi:1293
msgid "A musical instrument such as an electronic keyboard."
msgstr "電子キーボードのような音楽器。"

#. type: item
#: original_texis/commands.texi:1294
#, no-wrap
msgid "test"
msgstr "test"

#. type: table
#: original_texis/commands.texi:1296
msgid "A device used by the XTEST extension to report input."
msgstr "入力を報告するためにXTEST拡張が使用するデバイス。"

#. type: section
#: original_texis/commands.texi:1300
#, no-wrap
msgid "Adjusting Point After Commands"
msgstr "Adjusting Point After Commands"

#. type: cindex
#: original_texis/commands.texi:1301
#, no-wrap
msgid "adjusting point"
msgstr "adjusting point"

#. type: cindex
#: original_texis/commands.texi:1302
#, no-wrap
msgid "invisible/intangible text, and point"
msgstr "invisible/intangible text, and point"

#. type: cindex
#: original_texis/commands.texi:1303
#, no-wrap
msgid "@code{display} property, and point display"
msgstr "@code{display} property, and point display"

#. type: cindex
#: original_texis/commands.texi:1304
#, no-wrap
msgid "@code{composition} property, and point display"
msgstr "@code{composition} property, and point display"

#. type: Plain text
#: original_texis/commands.texi:1312
msgid "Emacs cannot display the cursor when point is in the middle of a sequence of text that has the @code{display} or @code{composition} property, or is invisible.  Therefore, after a command finishes and returns to the command loop, if point is within such a sequence, the command loop normally moves point to the edge of the sequence, making this sequence effectively intangible."
msgstr "プロパティ@code{display}や@code{composition}をもつテキストや非表示のテキストシーケンスの中間では、Emacsはポイント値を表示できません。したがってコマンドが終了した後にコマンドループにリターンした後にそのようなシーケンス中にポイントがある場合には、そのシーケンスを効果的に不可触にするために、コマンドループは通常ポイントをそのようなシーケンスの端へと移動します。"

#. type: Plain text
#: original_texis/commands.texi:1315
msgid "A command can inhibit this feature by setting the variable @code{disable-point-adjustment}:"
msgstr "変数@code{disable-point-adjustment}をセットすることにより、コマンドはこの機能を抑制できます:"

#. type: defvar
#: original_texis/commands.texi:1316
#, no-wrap
msgid "disable-point-adjustment"
msgstr "disable-point-adjustment"

#. type: defvar
#: original_texis/commands.texi:1320
msgid "If this variable is non-@code{nil} when a command returns to the command loop, then the command loop does not check for those text properties, and does not move point out of sequences that have them."
msgstr "この変数が非@code{nil}ならコマンドがコマンドループにリターンするとき、コマンドループはこれらのテキストプロパティをチェックせず、これらのプロパティをもつシーケンスの外にポイントを移動しない。"

#. type: defvar
#: original_texis/commands.texi:1323
msgid "The command loop sets this variable to @code{nil} before each command, so if a command sets it, the effect applies only to that command."
msgstr "コマンドループは各コマンドを実行する前にこの変数を@code{nil}にセットするので、あるコマンドがこれをセットしても効果が適用されるのはそのコマンドにたいしてだけである。"

#. type: defvar
#: original_texis/commands.texi:1325
#, no-wrap
msgid "global-disable-point-adjustment"
msgstr "global-disable-point-adjustment"

#. type: defvar
#: original_texis/commands.texi:1328
msgid "If you set this variable to a non-@code{nil} value, the feature of moving point out of these sequences is completely turned off."
msgstr "この変数を非@code{nil}にセットするとシーケンス外にポイントを移動する、これらの機能は完全にオフになる。"

#. type: cindex
#: original_texis/commands.texi:1332
#, no-wrap
msgid "events"
msgstr "events"

#. type: cindex
#: original_texis/commands.texi:1333
#, no-wrap
msgid "input events"
msgstr "input events"

#. type: Plain text
#: original_texis/commands.texi:1340
msgid "The Emacs command loop reads a sequence of @dfn{input events} that represent keyboard or mouse activity, or system events sent to Emacs.  The events for keyboard activity are characters or symbols; other events are always lists.  This section describes the representation and meaning of input events in detail."
msgstr "Emacsコマンドループは@dfn{入力イベント(input events)}のシーケンスを読み取ります。入力イベントとはキーボードやマウスのアクティビティ、またはEmacsに送られるシステムイベントを表します。キーボードアクティビティにたいするイベントは文字かシンボルです。それ以外のイベントは常にリストになります。このセクションでは入力イベントの表現と意味について詳細を説明します。"

#. type: defun
#: original_texis/commands.texi:1341
#, no-wrap
msgid "eventp object"
msgstr "eventp object"

#. type: defun
#: original_texis/commands.texi:1344
msgid "This function returns non-@code{nil} if @var{object} is an input event or event type."
msgstr "この関数は@var{object}が入力イベントかイベント型なら非@code{nil}をリターンする。"

#. type: defun
#: original_texis/commands.texi:1348
msgid "Note that any non-@code{nil} symbol might be used as an event or an event type; @code{eventp} cannot distinguish whether a symbol is intended by Lisp code to be used as an event."
msgstr "イベントまたはイベント型として非@code{nil}の任意のシンボルが使用されるかもしれないことに注意。@code{eventp}はLispコードによりイベントとして使用されることを意図したシンボルかどうかは区別できない。"

#. type: subsection
#: original_texis/commands.texi:1370 original_texis/commands.texi:1372
#: original_texis/commands.texi:1373
#, no-wrap
msgid "Keyboard Events"
msgstr "Keyboard Events"

#. type: menuentry
#: original_texis/commands.texi:1370
msgid "Ordinary characters -- keys with symbols on them."
msgstr "通常の文字 --- 自身にシンボルされるキー。"

#. type: subsection
#: original_texis/commands.texi:1370 original_texis/commands.texi:1504
#: original_texis/commands.texi:1505
#, no-wrap
msgid "Function Keys"
msgstr "Function Keys"

#. type: menuentry
#: original_texis/commands.texi:1370
msgid "Function keys -- keys with names, not symbols."
msgstr "ファンクションキー --- 名前をもつがシンボルではない。"

#. type: subsection
#: original_texis/commands.texi:1370 original_texis/commands.texi:1581
#: original_texis/commands.texi:1582
#, no-wrap
msgid "Mouse Events"
msgstr "Mouse Events"

#. type: menuentry
#: original_texis/commands.texi:1370
msgid "Overview of mouse events."
msgstr "マウスイベントの概観。"

#. type: subsection
#: original_texis/commands.texi:1370 original_texis/commands.texi:1603
#: original_texis/commands.texi:1604
#, no-wrap
msgid "Click Events"
msgstr "Click Events"

#. type: menuentry
#: original_texis/commands.texi:1370
msgid "Pushing and releasing a mouse button."
msgstr "マウスボタンのプッシュとリリース。"

#. type: subsection
#: original_texis/commands.texi:1370 original_texis/commands.texi:1837
#: original_texis/commands.texi:1838
#, no-wrap
msgid "Drag Events"
msgstr "Drag Events"

#. type: menuentry
#: original_texis/commands.texi:1370
msgid "Moving the mouse before releasing the button."
msgstr "ボタンをリリースする前のマウス移動。"

#. type: subsection
#: original_texis/commands.texi:1370 original_texis/commands.texi:1874
#: original_texis/commands.texi:1875
#, no-wrap
msgid "Button-Down Events"
msgstr "Button-Down Events"

#. type: menuentry
#: original_texis/commands.texi:1370
msgid "A button was pushed and not yet released."
msgstr "ボタンがプッシュされて、まだリリースされていない状態。"

#. type: subsection
#: original_texis/commands.texi:1370 original_texis/commands.texi:1898
#: original_texis/commands.texi:1899
#, no-wrap
msgid "Repeat Events"
msgstr "Repeat Events"

#. type: menuentry
#: original_texis/commands.texi:1370
msgid "Double and triple click (or drag, or down)."
msgstr "ダブル、トリプルのクリック(またはドラッグ、ダウン)"

#. type: subsection
#: original_texis/commands.texi:1370 original_texis/commands.texi:1993
#: original_texis/commands.texi:1994
#, no-wrap
msgid "Motion Events"
msgstr "Motion Events"

#. type: menuentry
#: original_texis/commands.texi:1370
msgid "Just moving the mouse, not pushing a button."
msgstr "ボタンを押さずに、マウスだけを移動する。"

#. type: subsection
#: original_texis/commands.texi:1370 original_texis/commands.texi:2024
#: original_texis/commands.texi:2025
#, no-wrap
msgid "Touchscreen Events"
msgstr "Touchscreen Events"

#. type: menuentry
#: original_texis/commands.texi:1370
msgid "Tapping and moving fingers on a touchscreen."
msgstr "タッチスクリーン上での指によるタップや移動。"

#. type: subsection
#: original_texis/commands.texi:1370 original_texis/commands.texi:2077
#: original_texis/commands.texi:2078
#, no-wrap
msgid "Focus Events"
msgstr "Focus Events"

#. type: menuentry
#: original_texis/commands.texi:1370
msgid "Moving the mouse between frames."
msgstr "フレーム間のマウス移動。"

#. type: node
#: original_texis/commands.texi:1370 original_texis/commands.texi:2113
#, no-wrap
msgid "Xwidget Events"
msgstr "Xwidget Events"

#. type: menuentry
#: original_texis/commands.texi:1370
msgid "Events generated by xwidgets."
msgstr "Xwidgetが生成したイベント。."

#. type: node
#: original_texis/commands.texi:1370 original_texis/commands.texi:2207
#, no-wrap
msgid "Misc Events"
msgstr "Misc Events"

#. type: menuentry
#: original_texis/commands.texi:1370
msgid "Other events the system can generate."
msgstr "システムが生成可能なその他のイベント。"

#. type: subsection
#: original_texis/commands.texi:1370 original_texis/commands.texi:2486
#: original_texis/commands.texi:2487
#, no-wrap
msgid "Event Examples"
msgstr "Event Examples"

#. type: menuentry
#: original_texis/commands.texi:1370
msgid "Examples of the lists for mouse events."
msgstr "マウスイベントの例。"

#. type: subsection
#: original_texis/commands.texi:1370 original_texis/commands.texi:2526
#: original_texis/commands.texi:2527
#, no-wrap
msgid "Classifying Events"
msgstr "Classifying Events"

#. type: menuentry
#: original_texis/commands.texi:1370
msgid "Finding the modifier keys in an event symbol.  Event types."
msgstr "イベントシンボル内の修飾キーを見つける。イベント型。"

#. type: node
#: original_texis/commands.texi:1370 original_texis/commands.texi:2628
#, no-wrap
msgid "Accessing Mouse"
msgstr "Accessing Mouse"

#. type: menuentry
#: original_texis/commands.texi:1370
msgid "Functions to extract info from mouse events."
msgstr "マウスイベントから情報抽出する関数。"

#. type: node
#: original_texis/commands.texi:1370 original_texis/commands.texi:2807
#, no-wrap
msgid "Accessing Scroll"
msgstr "Accessing Scroll"

#. type: menuentry
#: original_texis/commands.texi:1370
msgid "Functions to get info from scroll bar events."
msgstr "スクロールバーイベントから情報取得する関数。"

#. type: node
#: original_texis/commands.texi:1370 original_texis/commands.texi:2840
#, no-wrap
msgid "Strings of Events"
msgstr "Strings of Events"

#. type: menuentry
#: original_texis/commands.texi:1370
msgid "Special considerations for putting keyboard character events in a string."
msgstr "文字列内にキーボード文字イベントを配すための特別な配慮。"

#. type: cindex
#: original_texis/commands.texi:1374
#, no-wrap
msgid "keyboard events"
msgstr "keyboard events"

#. type: cindex
#: original_texis/commands.texi:1376
#, no-wrap
msgid "character event"
msgstr "character event"

#. type: Plain text
#: original_texis/commands.texi:1383
msgid "There are two kinds of input you can get from the keyboard: ordinary keys, and function keys.  Ordinary keys correspond to (possibly modified) characters; the events they generate are represented in Lisp as characters.  The event type of a @dfn{character event} is the character itself (an integer), which might have some modifier bits set; see @ref{Classifying Events}."
msgstr "キーボードから取得できる入力には2つの種類があります。それは通常のキーとファンクションキーです。通常のキーは文字に対応しており(修飾されているかもしれない)、それらが生成するイベントはLisp内では文字で表現されます。文字イベントのイベント型は文字自身(整数)であり、何らかの修飾ビットがセットされているかもしれません。@ref{Classifying Events}を参照してください。"

#. type: cindex
#: original_texis/commands.texi:1384
#, no-wrap
msgid "modifier bits (of input character)"
msgstr "modifier bits (of input character)"

#. type: cindex
#: original_texis/commands.texi:1385
#, no-wrap
msgid "basic code (of input character)"
msgstr "basic code (of input character)"

#. type: Plain text
#: original_texis/commands.texi:1388
msgid "An input character event consists of a @dfn{basic code} between 0 and 524287, plus any or all of these @dfn{modifier bits}:"
msgstr "入力文字イベントは0から524287までの@dfn{基本コード(basic code)}に加えて、以下の@dfn{修飾ビット(modifier bits)}の一部、またはすべてによって構成されます:"

#. type: item
#: original_texis/commands.texi:1390
#, no-wrap
msgid "meta"
msgstr "meta"

#. type: table
#: original_texis/commands.texi:1392 original_texis/commands.texi:1403
#: original_texis/commands.texi:1430 original_texis/commands.texi:1464
#: original_texis/commands.texi:1475 original_texis/commands.texi:1486
msgid "The"
msgstr "文字イベントコードのビット"

#. type: tex
#: original_texis/commands.texi:1394 original_texis/commands.texi:2882
#: original_texis/commands.texi:2902 original_texis/commands.texi:2924
#, no-wrap
msgid "@math{2^{27}}\n"
msgstr "@math{2^{27}}\n"

#. type: ifnottex
#: original_texis/commands.texi:1397 original_texis/commands.texi:2885
#: original_texis/commands.texi:2905 original_texis/commands.texi:2927
msgid "2**27"
msgstr "2**27"

#. type: table
#: original_texis/commands.texi:1400
msgid "bit in the character code indicates a character typed with the meta key held down."
msgstr "はメタキーが押下された状態で文字がタイプされたことを示す。"

#. type: item
#: original_texis/commands.texi:1401
#, no-wrap
msgid "control"
msgstr "control"

#. type: tex
#: original_texis/commands.texi:1405 original_texis/commands.texi:1421
#, no-wrap
msgid "@math{2^{26}}\n"
msgstr "@math{2^{26}}\n"

#. type: ifnottex
#: original_texis/commands.texi:1408 original_texis/commands.texi:1424
msgid "2**26"
msgstr "2**26"

#. type: table
#: original_texis/commands.texi:1411
msgid "bit in the character code indicates a non-@acronym{ASCII} control character."
msgstr "は非@acronym{ASCII}コントロール文字を示す。"

#. type: table
#: original_texis/commands.texi:1415
msgid "@sc{ascii} control characters such as @kbd{C-a} have special basic codes of their own, so Emacs needs no special bit to indicate them.  Thus, the code for @kbd{C-a} is just 1."
msgstr "@kbd{C-a}のような非@sc{ascii}コントロール文字は、自身が特別な基本コードをもつため、それらを示すためにEmacsは特別なビットを必要としない。つまり@kbd{C-a}のコードは単なる1である。"

#. type: table
#: original_texis/commands.texi:1419
msgid "But if you type a control combination not in @acronym{ASCII}, such as @kbd{%} with the control key, the numeric value you get is the code for @kbd{%} plus"
msgstr "しかし@kbd{%}のような非@acronym{ASCII}とコントロールを組み合わせてタイプすると取得される数値は@kbd{%}に"

#. type: table
#: original_texis/commands.texi:1427
msgid "(assuming the terminal supports non-@acronym{ASCII} control characters), i.e.@: with the 27th bit set."
msgstr "を加えた値となる(端末が非@acronym{ASCII}コントロール文字、すなわち27番目のビットがセットされた文字をサポートすると仮定する)。"

#. type: item
#: original_texis/commands.texi:1428
#, no-wrap
msgid "shift"
msgstr "shift"

#. type: tex
#: original_texis/commands.texi:1432 original_texis/commands.texi:1445
#: original_texis/commands.texi:1455
#, no-wrap
msgid "@math{2^{25}}\n"
msgstr "@math{2^{25}}\n"

#. type: ifnottex
#: original_texis/commands.texi:1435 original_texis/commands.texi:1448
#: original_texis/commands.texi:1458
msgid "2**25"
msgstr "2**25"

#. type: table
#: original_texis/commands.texi:1438
msgid "bit (the 26th bit) in the character event code indicates an @acronym{ASCII} control character typed with the shift key held down."
msgstr "(26番目のビット)はシフトキーが押下された状態で@acronym{ASCII}コントロール文字がタイプされたことを示す。"

#. type: table
#: original_texis/commands.texi:1443
msgid "For letters, the basic code itself indicates upper versus lower case; for digits and punctuation, the shift key selects an entirely different character with a different basic code.  In order to keep within the @acronym{ASCII} character set whenever possible, Emacs avoids using the"
msgstr "アルファベット文字にたいしては、基本コード自身が大文字か小文字かを示す。数字と句読点文字にたいしてシフトキーは、異なる基本コードをもつ完全に違う文字を選択する。可能な限り@acronym{ASCII}文字として保つために、Emacsはこれらの文字にたいしてビット"

#. type: table
#: original_texis/commands.texi:1450
msgid "bit for those character events."
msgstr "を使用しない。"

#. type: table
#: original_texis/commands.texi:1453
msgid "However, @acronym{ASCII} provides no way to distinguish @kbd{C-A} from @kbd{C-a}, so Emacs uses the"
msgstr "しかし@acronym{ASCII}は@kbd{C-A}と@kbd{C-a}を区別する方法を提供しないので、Emacsは@kbd{C-A}にたいしてビット"

#. type: table
#: original_texis/commands.texi:1461
msgid "bit in @kbd{C-A} and not in @kbd{C-a}."
msgstr "を使用し、@kbd{C-a}には使用しない。"

#. type: item
#: original_texis/commands.texi:1462
#, no-wrap
msgid "hyper"
msgstr "hyper"

#. type: tex
#: original_texis/commands.texi:1466
#, no-wrap
msgid "@math{2^{24}}\n"
msgstr "@math{2^{24}}\n"

#. type: ifnottex
#: original_texis/commands.texi:1469
msgid "2**24"
msgstr "2**24"

#. type: table
#: original_texis/commands.texi:1472
msgid "bit in the character event code indicates a character typed with the hyper key held down."
msgstr "はハイパーキーが押下された状態で文字がタイプされたことを示す。"

#. type: item
#: original_texis/commands.texi:1473
#, no-wrap
msgid "super"
msgstr "super"

#. type: tex
#: original_texis/commands.texi:1477
#, no-wrap
msgid "@math{2^{23}}\n"
msgstr "@math{2^{23}}\n"

#. type: ifnottex
#: original_texis/commands.texi:1480
msgid "2**23"
msgstr "2**23"

#. type: table
#: original_texis/commands.texi:1483
msgid "bit in the character event code indicates a character typed with the super key held down."
msgstr "はスーパーキーが押下された状態で文字がタイプされたことを示す。"

#. type: item
#: original_texis/commands.texi:1484
#, no-wrap
msgid "alt"
msgstr "alt"

#. type: tex
#: original_texis/commands.texi:1488
#, no-wrap
msgid "@math{2^{22}}\n"
msgstr "@math{2^{22}}\n"

#. type: ifnottex
#: original_texis/commands.texi:1491
msgid "2**22"
msgstr "2**22"

#. type: table
#: original_texis/commands.texi:1495
msgid "bit in the character event code indicates a character typed with the alt key held down.  (The key labeled @key{Alt} on most keyboards is actually treated as the meta key, not this.)"
msgstr "はアルトキーが押下された状態で文字がタイプされたことを示す(ほとんどのキーボードで@key{Alt}とラベルされたキーは、実際にはアルトキーではなくメタキーとして扱われる)。"

#. type: Plain text
#: original_texis/commands.texi:1503
msgid "It is best to avoid mentioning specific bit numbers in your program.  To test the modifier bits of a character, use the function @code{event-modifiers} (@pxref{Classifying Events}).  When making key bindings with @code{keymap-set}, you specify these events using strings like @samp{C-H-x} instead (for ``control hyper x'')  (@pxref{Changing Key Bindings})."
msgstr "プログラム内での特定のビット数値の記述は避けるのが最善の方法です。文字の修飾ビットをテストするためには、関数@code{event-modifiers} (@ref{Classifying Events}を参照)を使用してください。@code{keymap-set}でキーバインディングを作成する際には、@samp{C-H-x} (``control hyper x'')のような文字列を使ってこれらのイベントを指定できます(@ref{Changing Key Bindings}を参照)。"

#. type: cindex
#: original_texis/commands.texi:1507
#, no-wrap
msgid "function keys"
msgstr "function keys"

#. type: Plain text
#: original_texis/commands.texi:1513
msgid "Most keyboards also have @dfn{function keys}---keys that have names or symbols that are not characters.  Function keys are represented in Emacs Lisp as symbols; the symbol's name is the function key's label, in lower case.  For example, pressing a key labeled @key{F1} generates an input event represented by the symbol @code{f1}."
msgstr "ほとんどのキーボードには@dfn{ファンクションキー(function keys)}があります。これは名前や文字以外のシンボルをもつキーです。Emacs Lispではファンクションキーはシンボルとして表現されます。そのシンボル名はファンクションキーのラベルの小文字です。たとえば@key{F1}とラベルされたキーを押下すると、シンボル@code{f1}で表される入力イベントが生成されます。"

#. type: Plain text
#: original_texis/commands.texi:1516
msgid "The event type of a function key event is the event symbol itself.  @xref{Classifying Events}."
msgstr "ファンクションキーのイベント型はイベントシンボル自身です。@ref{Classifying Events}を参照してください。"

#. type: Plain text
#: original_texis/commands.texi:1519
msgid "Here are a few special cases in the symbol-naming convention for function keys:"
msgstr "ファンクションキーにたいするシンボルの命名規約には、以下のような特別なケースがいくつかあります:"

#. type: item
#: original_texis/commands.texi:1521
#, no-wrap
msgid "@code{backspace}, @code{tab}, @code{newline}, @code{return}, @code{delete}"
msgstr "@code{backspace}、@code{tab}、@code{newline}、@code{return}、@code{delete}"

#. type: table
#: original_texis/commands.texi:1524
msgid "These keys correspond to common @acronym{ASCII} control characters that have special keys on most keyboards."
msgstr "これらのキーは、ほとんどのキーボードにおいて特別にキーをもつ、一般的な@acronym{ASCII}コントロール文字に対応する。"

#. type: table
#: original_texis/commands.texi:1529
msgid "In @acronym{ASCII}, @kbd{C-i} and @key{TAB} are the same character.  If the terminal can distinguish between them, Emacs conveys the distinction to Lisp programs by representing the former as the integer 9, and the latter as the symbol @code{tab}."
msgstr "@acronym{ASCII}では@kbd{C-i}と@key{TAB}は同じ文字である。端末がこれらを区別できるならEmacsは前者を整数の9、後者をシンボル@code{tab}で表現することによってLispプログラムにこれらの違いを伝える。"

#. type: table
#: original_texis/commands.texi:1536
msgid "Most of the time, it's not useful to distinguish the two.  So normally @code{local-function-key-map} (@pxref{Translation Keymaps}) is set up to map @code{tab} into 9.  Thus, a key binding for character code 9 (the character @kbd{C-i}) also applies to @code{tab}.  Likewise for the other symbols in this group.  The function @code{read-char} likewise converts these events into characters."
msgstr "ほとんどの場合はこれらの2つを区別するのは役に立たない。そのため@code{local-function-key-map} (@ref{Translation Keymaps}を参照)は@code{tab}を9にマップするようセットアップされている。したがって文字コード9(文字@kbd{C-i})へのキーバインディングは@code{tab}にも適用される。このグループ内の他のシンボルも同様である。関数@code{read-char}がこれらのイベントを文字に変換する場合も同様である。"

#. type: table
#: original_texis/commands.texi:1540
msgid "In @acronym{ASCII}, @key{BS} is really @kbd{C-h}.  But @code{backspace} converts into the character code 127 (@key{DEL}), not into code 8 (@key{BS}).  This is what most users prefer."
msgstr "@acronym{ASCII}では@key{BS}は実際は@kbd{C-h}である。しかし@code{backspace}は文字コード8(@key{BS})ではなく、文字コード127(@key{DEL})に変換される。ほとんどのユーザーにとってこれは好ましいだろう。"

#. type: item
#: original_texis/commands.texi:1541
#, no-wrap
msgid "@code{left}, @code{up}, @code{right}, @code{down}"
msgstr "@code{left}、@code{up}、@code{right}、@code{down}"

#. type: table
#: original_texis/commands.texi:1543
msgid "Cursor arrow keys"
msgstr "矢印カーソルキー"

#. type: item
#: original_texis/commands.texi:1543
#, no-wrap
msgid "@code{kp-add}, @code{kp-decimal}, @code{kp-divide}, @dots{}"
msgstr "@code{kp-add}、@code{kp-decimal}、@code{kp-divide}、@dots{}"

#. type: table
#: original_texis/commands.texi:1545
msgid "Keypad keys (to the right of the regular keyboard)."
msgstr "キーパッドのキー(標準的なキーボードにおいては右側にある)。"

#. type: item
#: original_texis/commands.texi:1545
#, no-wrap
msgid "@code{kp-0}, @code{kp-1}, @dots{}"
msgstr "@code{kp-0}、@code{kp-1}、@dots{}"

#. type: table
#: original_texis/commands.texi:1547
msgid "Keypad keys with digits."
msgstr "キーパッドの数字キー。"

#. type: item
#: original_texis/commands.texi:1547
#, no-wrap
msgid "@code{kp-f1}, @code{kp-f2}, @code{kp-f3}, @code{kp-f4}"
msgstr "@code{kp-f1}、@code{kp-f2}、@code{kp-f3}、@code{kp-f4}"

#. type: table
#: original_texis/commands.texi:1549
msgid "Keypad PF keys."
msgstr "キーパッドのPFキー。"

#. type: item
#: original_texis/commands.texi:1549
#, no-wrap
msgid "@code{kp-home}, @code{kp-left}, @code{kp-up}, @code{kp-right}, @code{kp-down}"
msgstr "@code{kp-home}、@code{kp-left}、@code{kp-up}、@code{kp-right}、@code{kp-down}"

#. type: table
#: original_texis/commands.texi:1552
msgid "Keypad arrow keys.  Emacs normally translates these into the corresponding non-keypad keys @code{home}, @code{left}, @dots{}"
msgstr "キーパッドの矢印キー。Emacsは通常これらを非キーパッドのキー@code{home}、@code{left}、@dots{}に変換する。"

#. type: item
#: original_texis/commands.texi:1552
#, no-wrap
msgid "@code{kp-prior}, @code{kp-next}, @code{kp-end}, @code{kp-begin}, @code{kp-insert}, @code{kp-delete}"
msgstr "@code{kp-prior}、@code{kp-next}、@code{kp-end}、@code{kp-begin}、@code{kp-insert}、@code{kp-delete}"

#. type: table
#: original_texis/commands.texi:1555
msgid "Additional keypad duplicates of keys ordinarily found elsewhere.  Emacs normally translates these into the like-named non-keypad keys."
msgstr "通常は他の箇所にあるキーと重複するキーパッド追加キー。Emacsは通常これらを同じような名前の非キーパッドキーに変換する。"

#. type: Plain text
#: original_texis/commands.texi:1560
msgid "You can use the modifier keys @key{ALT}, @key{CTRL}, @key{HYPER}, @key{META}, @key{SHIFT}, and @key{SUPER} with function keys.  The way to represent them is with prefixes in the symbol name:"
msgstr "ファンクションキーにたいしても修飾キー@key{ALT}、@key{CTRL}、@key{HYPER}、@key{META}、@key{SHIFT}、@key{SUPER}を使用できます。シンボル名のプレフィクスとしてこれらを表します:"

#. type: item
#: original_texis/commands.texi:1562
#, no-wrap
msgid "A-"
msgstr "A-"

#. type: table
#: original_texis/commands.texi:1564
msgid "The alt modifier."
msgstr "アルト修飾。"

#. type: item
#: original_texis/commands.texi:1564
#, no-wrap
msgid "C-"
msgstr "C-"

#. type: table
#: original_texis/commands.texi:1566
msgid "The control modifier."
msgstr "コントロール修飾。"

#. type: item
#: original_texis/commands.texi:1566
#, no-wrap
msgid "H-"
msgstr "H-"

#. type: table
#: original_texis/commands.texi:1568
msgid "The hyper modifier."
msgstr "ハイパー修飾。"

#. type: item
#: original_texis/commands.texi:1568
#, no-wrap
msgid "M-"
msgstr "M-"

#. type: table
#: original_texis/commands.texi:1570
msgid "The meta modifier."
msgstr "メタ修飾。"

#. type: item
#: original_texis/commands.texi:1570
#, no-wrap
msgid "S-"
msgstr "S-"

#. type: table
#: original_texis/commands.texi:1572
msgid "The shift modifier."
msgstr "シフト修飾。"

#. type: item
#: original_texis/commands.texi:1572
#, no-wrap
msgid "s-"
msgstr "s-"

#. type: table
#: original_texis/commands.texi:1574
msgid "The super modifier."
msgstr "スーパー修飾。"

#. type: Plain text
#: original_texis/commands.texi:1580
msgid "Thus, the symbol for the key @key{F3} with @key{META} held down is @code{M-f3}.  When you use more than one prefix, we recommend you write them in alphabetical order; but the order does not matter in arguments to the key-binding lookup and modification functions."
msgstr "したがって@key{META}を押下した場合の@key{F3}キーにたいするシンボルは@code{M-f3}になります。複雑のプレフィクスを使用する場合には、アルファベット順の記述を推奨します。とはいえキーバインディングが修飾されたファンクションキーを探す際に引数の順序は関係ありません。"

#. type: Plain text
#: original_texis/commands.texi:1591
msgid "Emacs supports four kinds of mouse events: click events, drag events, button-down events, and motion events.  All mouse events are represented as lists.  The @sc{car} of the list is the event type; this says which mouse button was involved, and which modifier keys were used with it.  The event type can also distinguish double or triple button presses (@pxref{Repeat Events}).  The rest of the list elements give position and time information."
msgstr "Emacsは4つの種類のマウスイベントをサポートします。それはクリックイベント、ドラッグイベント、ボタンダウンイベント、モーションイベントです。すべてのマウスイベントはリストで表現されます。このリストの@sc{car}はイベント型です。イベント型はどのマウスボタンが関与するのか、それにたいしてどの修飾キーが使用されたかを示します。イベント型によりダブル、あるいはトリプルでボタンが押されたかを区別することもできます(@ref{Repeat Events}を参照)。残りのリスト要素は位置と時間の情報を提供します。"

#. type: Plain text
#: original_texis/commands.texi:1596
msgid "For key lookup, only the event type matters: two events of the same type necessarily run the same command.  The command can access the full values of these events using the @samp{e} interactive code.  @xref{Interactive Codes}."
msgstr "キーの照合ではイベント型だけが問題になります。2つのイベントが同じコマンドを実行するには同じイベント型が必要です。実行されるコマンドはinteractiveのコード@samp{e}を使用して、これらのイベントの完全な値にアクセスできます。@ref{Interactive Codes}を参照してください。"

#. type: Plain text
#: original_texis/commands.texi:1602
msgid "A key sequence that starts with a mouse event is read using the keymaps of the buffer in the window that the mouse was in, not the current buffer.  This does not imply that clicking in a window selects that window or its buffer---that is entirely under the control of the command binding of the key sequence."
msgstr "マウスイベントで開始されたキーシーケンスはカレントバッファーではなく、マウスのあったウィンドウ内のバッファーのキーマップを使用して読み取られます。これはウィンドウ内でクリックすることによりそのウィンドウやそのウィンドウのバッファーが選択されることを意味しません。つまりそれは完全にそのキーシーケンスのコマンドバインディングの制御下にあるのです。"

#. type: cindex
#: original_texis/commands.texi:1605
#, no-wrap
msgid "click event"
msgstr "click event"

#. type: cindex
#: original_texis/commands.texi:1606
#, no-wrap
msgid "mouse click event"
msgstr "mouse click event"

#. type: cindex
#: original_texis/commands.texi:1607
#, no-wrap
msgid "mouse wheel event"
msgstr "mouse wheel event"

#. type: Plain text
#: original_texis/commands.texi:1614
msgid "When the user presses a mouse button and releases it at the same location, that generates a @dfn{click} event.  Depending on how your window-system reports mouse-wheel events, turning the mouse wheel can generate either a mouse click or a mouse-wheel event.  All mouse event share the same format:"
msgstr "ユーザーが同じ場所でマウスボタンを押してからリリース(release: 離す)すると、@dfn{click}イベントが生成されます。ウィンドウシステムがマウスホイールイベントを報告する方法に応じて、マウスホイールはマウスクリックかマウスホイールイベントを生成します。すべてのマウスイベントは同じフォーマットを共有します:"

#. type: example
#: original_texis/commands.texi:1617
#, no-wrap
msgid "(@var{event-type} @var{position} @var{click-count})\n"
msgstr "(@var{event-type} @var{position} @var{click-count})\n"

#. type: var{#1}
#: original_texis/commands.texi:1620
#, no-wrap
msgid "event-type"
msgstr "event-type"

#. type: table
#: original_texis/commands.texi:1625
msgid "This is a symbol that indicates which mouse button was used.  It is one of the symbols @code{mouse-1}, @code{mouse-2}, @dots{}, where the buttons are numbered left to right.  For mouse-wheel event, it can be @code{wheel-up} or @code{wheel-down}."
msgstr "これはマウスボタンが使用されたことを示す。これはシンボル@code{mouse-1}、@code{mouse-2}、@dots{}のうちのいずれかで、マウスボタンは左から右に番号が付される。マウスホイールイベントなら@code{wheel-up}や@code{wheel-down}かもしれない。"

#. type: table
#: original_texis/commands.texi:1629
msgid "You can also use prefixes @samp{A-}, @samp{C-}, @samp{H-}, @samp{M-}, @samp{S-} and @samp{s-} for modifiers alt, control, hyper, meta, shift and super, just as you would with function keys."
msgstr "ファンクションキーにたいして行うのと同様にアルト、コントロール、ハイパー、メタ、シフト、スーパーの修飾にたいしてプレフィクス@samp{A-}、@samp{C-}、@samp{H-}、@samp{M-}、@samp{S-}、@samp{s-}も使用できる。"

#. type: table
#: original_texis/commands.texi:1634
msgid "This symbol also serves as the event type of the event.  Key bindings describe events by their types; thus, if there is a key binding for @code{mouse-1}, that binding would apply to all events whose @var{event-type} is @code{mouse-1}."
msgstr "このシンボルはイベントのイベント型としての役割りももつ。イベントのキーバインディングはこれらの型により示される。したがって@code{mouse-1}にたいするキーバインディングが存在すれば、そのバインディングは@var{event-type}が@code{mouse-1}であるようなすべてのイベントに適用されるだろう。"

#. type: var{#1}
#: original_texis/commands.texi:1635
#, no-wrap
msgid "position"
msgstr "position"

#. type: cindex
#: original_texis/commands.texi:1636
#, no-wrap
msgid "mouse position list"
msgstr "mouse position list"

#. type: table
#: original_texis/commands.texi:1639
msgid "This is a @dfn{mouse position list} specifying where the mouse event occurred; see below for details."
msgstr "これはマウスイベントがどこで発生したかを表す@dfn{マウス位置リスト(mouse position list)}である。詳細は以下を参照のこと。"

#. type: var{#1}
#: original_texis/commands.texi:1640
#, no-wrap
msgid "click-count"
msgstr "click-count"

#. type: table
#: original_texis/commands.texi:1644
msgid "This is the number of rapid repeated presses so far of the same mouse button or the number of repeated turns of the wheel.  @xref{Repeat Events}."
msgstr "これは同じマウスボタンを素早く繰り返し押下したときの回数、あるいはホイールを繰り返し回した回数である。@ref{Repeat Events}を参照のこと。"

#. type: Plain text
#: original_texis/commands.texi:1649
msgid "To access the contents of a mouse position list in the @var{position} slot of a mouse event, you should typically use the functions documented in @ref{Accessing Mouse}."
msgstr "マウスイベントの@var{position}スロット内にあるマウス位置リストの内容にアクセスするためには、一般的には@ref{Accessing Mouse}に記述された関数を使用するべきです。"

#. type: Plain text
#: original_texis/commands.texi:1653
msgid "The explicit format of the list depends on where the event occurred.  For clicks in the text area, mode line, header line, tab line, or in the fringe or marginal areas, the mouse position list has the form"
msgstr "このリストの明示的なフォーマットはどこでイベントが発生したかに依存します。テキストエリア、モードライン、ヘッダーライン、タブライン、フリンジ、マージンエリアでのクリックにたいしてマウス位置リストは以下のフォーマットをもちます"

#. type: example
#: original_texis/commands.texi:1658
#, no-wrap
msgid ""
"(@var{window} @var{pos-or-area} (@var{x} . @var{y}) @var{timestamp}\n"
" @var{object} @var{text-pos} (@var{col} . @var{row})\n"
" @var{image} (@var{dx} . @var{dy}) (@var{width} . @var{height}))\n"
msgstr ""
"(@var{window} @var{pos-or-area} (@var{x} . @var{y}) @var{timestamp}\n"
" @var{object} @var{text-pos} (@var{col} . @var{row})\n"
" @var{image} (@var{dx} . @var{dy}) (@var{width} . @var{height}))\n"

#. type: Plain text
#: original_texis/commands.texi:1662
msgid "The meanings of these list elements are as follows:"
msgstr "以下はこれらのリスト要素がもつ意味です:"

#. type: var{#1}
#: original_texis/commands.texi:1664 original_texis/commands.texi:1758
#, no-wrap
msgid "window"
msgstr "window"

#. type: table
#: original_texis/commands.texi:1666
msgid "The window in which the mouse event occurred."
msgstr "マウスイベントが発生したウィンドウ。"

#. type: var{#1}
#: original_texis/commands.texi:1667
#, no-wrap
msgid "pos-or-area"
msgstr "pos-or-area"

#. type: table
#: original_texis/commands.texi:1674
msgid "The buffer position of the character clicked on in the text area; or, if the event was outside the text area, the window area where it occurred.  It is one of the symbols @code{mode-line}, @code{header-line}, @code{tab-line}, @code{vertical-line}, @code{left-margin}, @code{right-margin}, @code{left-fringe}, or @code{right-fringe}."
msgstr "テキストエリア内でクリックされた文字のバッファー位置。またはテキストエリア外がクリックされたなら、イベントが発生したウィンドウエリア。これはシンボル@code{mode-line}、@code{header-line}、@code{tab-line}、@code{vertical-line}、@code{left-margin}、@code{right-margin}、@code{left-fringe}、@code{right-fringe}のいずれか。"

#. type: table
#: original_texis/commands.texi:1679
msgid "In one special case, @var{pos-or-area} is a list containing a symbol (one of the symbols listed above) instead of just the symbol.  This happens after the imaginary prefix keys for the event are registered by Emacs.  @xref{Key Sequence Input}."
msgstr "特別なケースの1つとして@var{pos-or-area}が単なるシンボルではなく、(上記シンボルのいずれか1つの)シンボルを含むリストのような場合がある。これはEmacsにより登録されたイベントにたいする、イマジナリープレフィクスキー(imaginary prefix key)の後に発生する。@ref{Key Sequence Input}を参照のこと。"

#. type: item
#: original_texis/commands.texi:1680
#, no-wrap
msgid "@var{x}, @var{y}"
msgstr "@var{x}, @var{y}"

#. type: table
#: original_texis/commands.texi:1690
msgid "The relative pixel coordinates of the event.  For events in the text area of a window, the coordinate origin @code{(0 . 0)} is taken to be the top left corner of the text area.  @xref{Window Sizes}.  For events in a mode line, header line or tab line, the coordinate origin is the top left corner of the window itself.  For fringes, margins, and the vertical border, @var{x} does not have meaningful data.  For fringes and margins, @var{y} is relative to the bottom edge of the header line.  In all cases, the @var{x} and @var{y} coordinates increase rightward and downward respectively."
msgstr "イベントの相対ピクセル座標(relative pixel coordinates)。あるウィンドウのテキストエリア内でのイベントにたいする座標原点@code{(0 . 0)}は、テキストエリアの左上隅となる。@ref{Window Sizes}を参照のこと。モードライン、ヘッダーラインやタブライン内でのイベントにたいする座標原点は、そのウィンドウ自身の左上隅となる。フリンジ、マージン、垂直ボーダー(vertical border)では@var{x}は有意なデータをもたない。フリンジ、マージンでは@var{y}はヘッダーラインの最下端からの相対位置である。すべてのケースにおいて@var{x}と@var{y}の座標はそれぞれ右方向と下方向で増加する。"

#. type: var{#1}
#: original_texis/commands.texi:1691 original_texis/commands.texi:1774
#, no-wrap
msgid "timestamp"
msgstr "timestamp"

#. type: table
#: original_texis/commands.texi:1694
msgid "The time at which the event occurred, as an integer number of milliseconds since a system-dependent initial time."
msgstr "そのイベントが発生した時刻をシステム依存の初期時刻(initial time)からの経過ミリ秒で表す整数。"

#. type: var{#1}
#: original_texis/commands.texi:1695
#, no-wrap
msgid "object"
msgstr "object"

#. type: table
#: original_texis/commands.texi:1699
msgid "Either @code{nil}, which means the event occurred on buffer text, or a cons cell of the form @w{(@var{string} . @var{string-pos})} if there is a string from a text property or an overlay at the event position."
msgstr "@code{nil} (バッファーテキスト上でイベントが発生したことを意味する)、イベント箇所にテキストプロパティやオーバーレイがあれば@w{(@var{string} . @var{string-pos})}という形式のコンスセル。"

#. type: var{#1}
#: original_texis/commands.texi:1701
#, no-wrap
msgid "string"
msgstr "string"

#. type: table
#: original_texis/commands.texi:1703
msgid "The string which was clicked on, including any properties."
msgstr "クリックされた文字列。すべてのテキストプロパティを含む。"

#. type: var{#1}
#: original_texis/commands.texi:1704
#, no-wrap
msgid "string-pos"
msgstr "string-pos"

#. type: table
#: original_texis/commands.texi:1706
msgid "The position in the string where the click occurred."
msgstr "クリックが発生した文字列内の位置。"

#. type: var{#1}
#: original_texis/commands.texi:1708
#, no-wrap
msgid "text-pos"
msgstr "text-pos"

#. type: table
#: original_texis/commands.texi:1714
msgid "For clicks on a marginal area or on a fringe, this is the buffer position of the first visible character in the corresponding line in the window.  For clicks on the mode line, the header line or the tab line, this is @code{nil}.  For other events, it is the buffer position closest to the click."
msgstr "マージンエリアやフリンジにたいするクリックでは、そのウィンドウ内の対応する行内の最初の可視な文字のバッファー位置となる。モードライン、ヘッダーラインやタブラインにたいするクリックでは@code{nil}。他のイベントにたいしてはクリックされたバッファーのクリックされた最寄りの位置となる。"

#. type: item
#: original_texis/commands.texi:1715
#, no-wrap
msgid "@var{col}, @var{row}"
msgstr "@var{col}, @var{row}"

#. type: table
#: original_texis/commands.texi:1728
msgid "These are the actual column and row coordinate numbers of the glyph under the @var{x}, @var{y} position.  If @var{x} lies beyond the last column of actual text on its line, @var{col} is reported by adding fictional extra columns that have the default character width.  Row 0 is taken to be the header line if the window has one, or Row 1 if the window also has the tab line, or the topmost row of the text area otherwise.  Column 0 is taken to be the leftmost column of the text area for clicks on a window text area, or the leftmost mode line or header line column for clicks there.  For clicks on fringes or vertical borders, these have no meaningful data.  For clicks on margins, @var{col} is measured from the left edge of the margin area and @var{row} is measured from the top of the margin area."
msgstr "これらは@var{x}、@var{y}の位置にあるグリフ(gliph)の実際の行と列の座標数値である。行@var{x}がその行の実際のテキストの最後の列を超えるなら、@var{col}はデフォルトの文字幅をもつ仮想的な追加列数を加えた値が報告される。そのウィンドウがヘッダーラインをもてば行0はヘッダーライン、タブラインももてば行1はタブラインとなり、それ以外ならテキストエリアの上端ラインが行0となる。ウィンドウのテキストエリアのクリックにたいしては、テキストエリアの左端列が列0となり、モードラインまたはヘッダーラインのクリックにたいしてはそのラインの左端が列0となる。フリンジまたは垂直ボーダーのクリックにたいしては、これらは有意なデータをもたない。マージンのクリックにたいしては、@var{col}はマージンエリアの左端、@var{row}はマージンエリアの上端から測られる。"

#. type: var{#1}
#: original_texis/commands.texi:1729
#, no-wrap
msgid "image"
msgstr "image"

#. type: table
#: original_texis/commands.texi:1733
msgid "If there is an image at the click location, this is the image object as returned by @code{find-image} (@pxref{Defining Images}); otherwise this is @code{nil}."
msgstr "クリック箇所にイメージがあれば@code{find-image}がリターンするようなイメージオブジェクト(@ref{Defining Images}を参照)、それ以外は@code{nil}。"

#. type: item
#: original_texis/commands.texi:1734
#, no-wrap
msgid "@var{dx}, @var{dy}"
msgstr "@var{dx}, @var{dy}"

#. type: table
#: original_texis/commands.texi:1743
msgid "These are the pixel offsets of the click relative to the top left corner of the @var{object}'s glyph that is the nearest one to the click. The relevant @var{object}s can be either a buffer, or a string, or an image, see above.  If @var{object} is @code{nil} or a string, the coordinates are relative to the top left corner of the character glyph clicked on.  Note that the offsets are always zero on text-mode frames, when @var{object} is @code{nil}, since each glyph there is considered to have exactly 1x1 pixel dimensions."
msgstr "クリック位置からもっとも近い@var{object}のグリフ左上隅からクリック位置への相対オフセット(ピクセル)。関係のある@var{object}はバッファー、文字列、またはイメージ(上記参照)。@var{object}が@code{nil}か文字列なら、クリックされた文字グリフの左上隅からの相対座標。テキストモードのフレームではすべてのグリフのピクセルサイズは正確に1x1とみなされるので、@var{object}が@code{nil}ならオフセットは常に0になることに注意。"

#. type: item
#: original_texis/commands.texi:1744
#, no-wrap
msgid "@var{width}, @var{height}"
msgstr "@var{width}, @var{height}"

#. type: table
#: original_texis/commands.texi:1749
msgid "If the click is on a character, either from buffer text or from overlay or display string, these are the pixel width and height of that character's glyph; otherwise they are dimensions of @var{object} clicked on."
msgstr "クリックがバッファーテキスト、あるいはオーバーレイ文字列やディスプレイ文字列の文字上の場合には、その文字のグリフのピクセル単位での幅と高さ。それ以外の場合にはクリックされた@var{object}のサイズ。"

#. type: Plain text
#: original_texis/commands.texi:1752
msgid "For clicks on a scroll bar, @var{position} has this form:"
msgstr "スクロールバーへのクリックにたいして、@var{position}は以下の形式をもちます:"

#. type: example
#: original_texis/commands.texi:1755
#, no-wrap
msgid "(@var{window} @var{area} (@var{portion} . @var{whole}) @var{timestamp} @var{part})\n"
msgstr "(@var{window} @var{area} (@var{portion} . @var{whole}) @var{timestamp} @var{part})\n"

#. type: table
#: original_texis/commands.texi:1760
msgid "The window whose scroll bar was clicked on."
msgstr "スクロールバーがクリックされたウィンドウ。"

#. type: var{#1}
#: original_texis/commands.texi:1761
#, no-wrap
msgid "area"
msgstr "area"

#. type: table
#: original_texis/commands.texi:1763
msgid "This is the symbol @code{vertical-scroll-bar}."
msgstr "これはシンボル@code{vertical-scroll-bar}である。"

#. type: var{#1}
#: original_texis/commands.texi:1764
#, no-wrap
msgid "portion"
msgstr "portion"

#. type: table
#: original_texis/commands.texi:1768
msgid "The number of pixels from the top of the scroll bar to the click position.  On some toolkits, including GTK+, Emacs cannot extract this data, so the value is always @code{0}."
msgstr "スクロールバーの上端からクリック位置までのピクセル数。GTK+を含むいくつかのツールキットでは、Emacsがこれらのデータを抽出できないので値は常に@code{0}。"

#. type: var{#1}
#: original_texis/commands.texi:1769
#, no-wrap
msgid "whole"
msgstr "whole"

#. type: table
#: original_texis/commands.texi:1773
msgid "The total length, in pixels, of the scroll bar.  On some toolkits, including GTK+, Emacs cannot extract this data, so the value is always @code{0}."
msgstr "スクロールバーの全長のピクセル数。GTK+を含むいくつかのツールキットでは、Emacsがこれらのデータを抽出できないので値は常に@code{0}。"

#. type: table
#: original_texis/commands.texi:1778
msgid "The time at which the event occurred, in milliseconds.  On some toolkits, including GTK+, Emacs cannot extract this data, so the value is always @code{0}."
msgstr "イベントが発生したミリ秒時刻。GTK+を含むいくつかのツールキットでは、Emacsがこれらのデータを抽出できないので値は常に@code{0}。"

#. type: var{#1}
#: original_texis/commands.texi:1779 original_texis/commands.texi:1800
#, no-wrap
msgid "part"
msgstr "part"

#. type: table
#: original_texis/commands.texi:1786
msgid "The part of the scroll bar on which the click occurred.  It is one of the symbols @code{handle} (the scroll bar handle), @code{above-handle} (the area above the handle), @code{below-handle} (the area below the handle), @code{up} (the up arrow at one end of the scroll bar), or @code{down} (the down arrow at one end of the scroll bar)."
msgstr "クリックが発生したスクロールバー部分。これはシンボル@code{handle}(スクロールバーのハンドル)、@code{above-handle}(ハンドルの上側エリア)、@code{below-handle}(ハンドルの下側エリア)、@code{up}(スクロールバー端の上矢印)、@code{down}(スクロールバー端の下矢印)のいずれか。"

#. type: Plain text
#: original_texis/commands.texi:1791
msgid "For clicks on the frame's internal border (@pxref{Frame Layout}), the frame's tool bar (@pxref{Tool Bar}) or tab bar, @var{position} has this form:"
msgstr "フレームのインターナルボーダー(@ref{Frame Layout}を参照)、フレームのツールバー(@ref{Tool Bar}を参照)やタブバーにたいするクリックでは@var{position}は以下の形式をもちます:"

#. type: example
#: original_texis/commands.texi:1794
#, no-wrap
msgid " (@var{frame} @var{part} (@var{X} . @var{Y}) @var{timestamp})\n"
msgstr " (@var{frame} @var{part} (@var{X} . @var{Y}) @var{timestamp})\n"

#. type: var{#1}
#: original_texis/commands.texi:1797
#, no-wrap
msgid "frame"
msgstr "frame"

#. type: table
#: original_texis/commands.texi:1799
msgid "The frame whose internal border or tool bar or tab bar was clicked on."
msgstr "インターナルボーダー、ツールバー、またはタブバーがクリックされたフレーム。"

#. type: table
#: original_texis/commands.texi:1803
msgid "The part of the frame which was clicked on.  This can be one of the following:"
msgstr "クリックされたフレームの部分。以下のいずれか:"

#. type: cindex
#: original_texis/commands.texi:1805
#, no-wrap
msgid "tool-bar mouse events"
msgstr "tool-bar mouse events"

#. type: item
#: original_texis/commands.texi:1806
#, no-wrap
msgid "tool-bar"
msgstr "tool-bar"

#. type: table
#: original_texis/commands.texi:1808
msgid "The frame has a tool bar, and the event was in the tool-bar area."
msgstr "フレームにはツールバーがあり、イベントはツールバー領域。"

#. type: cindex
#: original_texis/commands.texi:1809
#, no-wrap
msgid "tab-bar mouse events"
msgstr "tab-bar mouse events"

#. type: item
#: original_texis/commands.texi:1810
#, no-wrap
msgid "tab-bar"
msgstr "tab-bar"

#. type: table
#: original_texis/commands.texi:1812
msgid "The frame has a tab bar, and the event was in the tab-bar area."
msgstr "フレームにはタブバーがあり、イベントはタブバー領域。"

#. type: item
#: original_texis/commands.texi:1813
#, no-wrap
msgid "left-edge"
msgstr "left-edge"

#. type: itemx
#: original_texis/commands.texi:1814
#, no-wrap
msgid "top-edge"
msgstr "top-edge"

#. type: itemx
#: original_texis/commands.texi:1815
#, no-wrap
msgid "right-edge"
msgstr "right-edge"

#. type: itemx
#: original_texis/commands.texi:1816
#, no-wrap
msgid "bottom-edge"
msgstr "bottom-edge"

#. type: table
#: original_texis/commands.texi:1819
msgid "The click was on the corresponding border at an offset of at least one canonical character from the border's nearest corner."
msgstr "対応するボーダーの直近のコーナーから少なくとも1正規文字の範囲内がクリックされた。"

#. type: item
#: original_texis/commands.texi:1820
#, no-wrap
msgid "top-left-corner"
msgstr "top-left-corner"

#. type: itemx
#: original_texis/commands.texi:1821
#, no-wrap
msgid "top-right-corner"
msgstr "top-right-corner"

#. type: itemx
#: original_texis/commands.texi:1822
#, no-wrap
msgid "bottom-right-corner"
msgstr "bottom-right-corner"

#. type: itemx
#: original_texis/commands.texi:1823
#, no-wrap
msgid "bottom-left-corner"
msgstr "bottom-left-corner"

#. type: table
#: original_texis/commands.texi:1825
msgid "The click was on the corresponding corner of the internal border."
msgstr "インターナルボーダーの対応するコーナーがクリックされた。"

#. type: item
#: original_texis/commands.texi:1826
#, no-wrap
msgid "nil"
msgstr "nil"

#. type: table
#: original_texis/commands.texi:1832
msgid "The frame does not have an internal border, and the event was not on the tab bar or the tool bar.  This usually happens on text-mode frames.  This can also happen on GUI frames with internal border if the frame doesn't have its @code{drag-internal-border} parameter (@pxref{Mouse Dragging Parameters}) set to a non-@code{nil} value."
msgstr "フレームにインターナルボーダーがなく、イベントがツールバーやタブバー上ではない。これは通常はテキストモードフレームで発生する。これは非@code{nil}値にセットされた@code{drag-internal-border}パラメーター(@ref{Mouse Dragging Parameters}を参照)をもたないGUIフレームのインターナルボーダーでも発生し得る。"

#. type: cindex
#: original_texis/commands.texi:1839
#, no-wrap
msgid "drag event"
msgstr "drag event"

#. type: cindex
#: original_texis/commands.texi:1840
#, no-wrap
msgid "mouse drag event"
msgstr "mouse drag event"

#. type: Plain text
#: original_texis/commands.texi:1848
msgid "With Emacs, you can have a drag event without even changing your clothes.  A @dfn{drag event} happens every time the user presses a mouse button and then moves the mouse to a different character position before releasing the button.  Like all mouse events, drag events are represented in Lisp as lists.  The lists record both the starting mouse position and the final position, like this:"
msgstr "Emacsでは特別なことをしなくてもドラッグイベントを取得できます。@dfn{ドラッグイベント(drag event)}はユーザーがマウスボタンを押下して、ボタンをリリースする前にマウスを異なる文字位置に移動すると毎回発生します。すべてのマウスイベントと同じように、ドラッグイベントはLispではリストで表現されます。このリストは以下のように開始マウス位置と最終位置ぼ両方を記録します:"

#. type: example
#: original_texis/commands.texi:1853
#, no-wrap
msgid ""
"(@var{event-type}\n"
" (@var{window1} START-POSITION)\n"
" (@var{window2} END-POSITION))\n"
msgstr ""
"(@var{event-type}\n"
" (@var{window1} START-POSITION)\n"
" (@var{window2} END-POSITION))\n"

#. type: Plain text
#: original_texis/commands.texi:1864
msgid "For a drag event, the name of the symbol @var{event-type} contains the prefix @samp{drag-}.  For example, dragging the mouse with button 2 held down generates a @code{drag-mouse-2} event.  The second and third elements of the event give the starting and ending position of the drag, as mouse position lists (@pxref{Click Events}).  You can access the second element of any mouse event in the same way.  However, the drag event may end outside the boundaries of the frame that was initially selected.  In that case, the third element's position list contains that frame in place of a window."
msgstr "ドラッグイベントにたいしては、シンボル@var{event-type}の名前にプレフィクス@samp{drag-}が含まれます。たとえばボタン2を押下したままマウスをドラッグすると@code{drag-mouse-2}イベントが生成されます。このイベントの2つ目と3つ目の要素は、マウス位置リスト(@ref{Click Events}を参照)としてドラッグの開始と終了の位置を与えます。任意のマウスイベントの2つ目の要素に同じ方法でアクセスできます。しかしドラッグイベントは最初に選択されていたフレームの境界外で終了するかもしれません。この場合のには3つ目の要素の位置リストに、ウィンドウのかわりにそのフレームが含まれます。"

#. type: Plain text
#: original_texis/commands.texi:1867
msgid "The @samp{drag-} prefix follows the modifier key prefixes such as @samp{C-} and @samp{M-}."
msgstr "@samp{drag-}プレフィクスは、その後に@samp{C-}や@samp{M-}のような修飾キープレフィクスが続きます。"

#. type: Plain text
#: original_texis/commands.texi:1873
msgid "If @code{read-key-sequence} receives a drag event that has no key binding, and the corresponding click event does have a binding, it changes the drag event into a click event at the drag's starting position.  This means that you don't have to distinguish between click and drag events unless you want to."
msgstr "@code{read-key-sequence}がキーバインディングをもたず、対応するクリックイベントにキーバインディングがあるようなドラッグイベントを受け取ると、この関数はそのドラッグイベントをドラッグ開始位置でのクリックイベントに変更します。これはもし望まなければクリックイベントとドラッグイベントを区別する必要がないことを意味します。"

#. type: cindex
#: original_texis/commands.texi:1876
#, no-wrap
msgid "button-down event"
msgstr "button-down event"

#. type: Plain text
#: original_texis/commands.texi:1881
msgid "Click and drag events happen when the user releases a mouse button.  They cannot happen earlier, because there is no way to distinguish a click from a drag until the button is released."
msgstr "クリックイベントとドラッグイベントは、ユーザーがマウスボタンをリリースしたときに発生します。ボタンがリリースされるまでクリックとドラッグを区別することはできないので、リリース前にイベントが発生することはありません。"

#. type: Plain text
#: original_texis/commands.texi:1889
msgid "If you want to take action as soon as a button is pressed, you need to handle @dfn{button-down} events.@footnote{Button-down is the conservative antithesis of drag.} These occur as soon as a button is pressed.  They are represented by lists that look exactly like click events (@pxref{Click Events}), except that the @var{event-type} symbol name contains the prefix @samp{down-}.  The @samp{down-} prefix follows modifier key prefixes such as @samp{C-} and @samp{M-}."
msgstr "ボタンが押下されたらすぐに何か処理したいなら、@dfn{ボタンダウン(button-down)}イベントを処理する必要があります@footnote{ボタンダウンはドラッグの保守的なアンチテーゼです。@*訳注: 原文は``Button-down is the conservative antithesis of drag.''。@*ちなみにIT用語で使用される前は\"button-down\"はボタンダウンシャツを表すとともに「保守的、堅苦しい」という意味もあり、一方の\"drag\"はIT用語として使用される前から「引っ張る、引きずる」という意味で用いられてきましたが「本来は異性が着る洋服」という意味もあります。}。これらは@var{event-type}のシンボル名に@samp{down-}が含まれることを除き、クリックイベントとまったく同じようなリストにより表現されます。@samp{down-}プレフィクスの後には@samp{C-}や@samp{M-}のような修飾キープレフィクスが続きます。"

#. type: Plain text
#: original_texis/commands.texi:1897
msgid "The function @code{read-key-sequence} ignores any button-down events that don't have command bindings; therefore, the Emacs command loop ignores them too.  This means that you need not worry about defining button-down events unless you want them to do something.  The usual reason to define a button-down event is so that you can track mouse motion (by reading motion events) until the button is released.  @xref{Motion Events}."
msgstr "関数@code{read-key-sequence}はコマンドバインディングをもたないボタンダウンイベントを無視します。したがってEmacsコマンドループもこれらを無視します。これはボタンダウンイベントで何かしたい場合以外は、ボタンダウンイベントの定義について配慮する必要がないことを意味します。ボタンダウンイベントを定義する通常の理由は、ボタンがリリースされるまで(モーションイベントを読み取ることにより)マウスモーションを追跡できるからです。@ref{Motion Events}を参照してください。"

#. type: cindex
#: original_texis/commands.texi:1900
#, no-wrap
msgid "repeat events"
msgstr "repeat events"

#. type: cindex
#: original_texis/commands.texi:1901
#, no-wrap
msgid "double-click events"
msgstr "double-click events"

#. type: cindex
#: original_texis/commands.texi:1902
#, no-wrap
msgid "triple-click events"
msgstr "triple-click events"

#. type: cindex
#: original_texis/commands.texi:1903
#, no-wrap
msgid "mouse events, repeated"
msgstr "mouse events, repeated"

#. type: Plain text
#: original_texis/commands.texi:1908
msgid "If you press the same mouse button more than once in quick succession without moving the mouse, Emacs generates special @dfn{repeat} mouse events for the second and subsequent presses."
msgstr "マウスを移動せずに同じマウスボタンを素早く2回以上連続して押下すると、Emacsは2回目とそれ以降の押下にたいして特別な@dfn{リピート(repeat)}マウスイベントを生成します。"

#. type: Plain text
#: original_texis/commands.texi:1913
msgid "The most common repeat events are @dfn{double-click} events.  Emacs generates a double-click event when you click a button twice; the event happens when you release the button (as is normal for all click events)."
msgstr "もっとも一般的なリピートイベントは@dfn{ダブルクリック(double-click)}イベントです。Emacsはボタンを2回クリックしたときにダブルクリックイベントを生成します。このイベントは、(すべてのクリックイベントが通常そうであるように)ボタンをリリースしたときに発生します。"

#. type: Plain text
#: original_texis/commands.texi:1921
msgid "The event type of a double-click event contains the prefix @samp{double-}.  Thus, a double click on the second mouse button with @key{meta} held down comes to the Lisp program as @code{M-double-mouse-2}.  If a double-click event has no binding, the binding of the corresponding ordinary click event is used to execute it.  Thus, you need not pay attention to the double click feature unless you really want to."
msgstr "ダブルクリックイベントのイベント型にはプレフィクス@samp{double-}が含まれます。したがって@key{meta}を押しながら2つ目のマウスボタンをダブルクリックすると、Lispプログラムには@code{M-double-mouse-2}が渡されます。ダブルクリックイベントがバインディングをもたなければ、対応する通常のクリックイベントのバインディングが実行に使用されます。したがって実際に望んだ場合でなければダブルクリック機能に注意を払う必要はありません。"

#. type: Plain text
#: original_texis/commands.texi:1927
msgid "When the user performs a double click, Emacs generates first an ordinary click event, and then a double-click event.  Therefore, you must design the command binding of the double click event to assume that the single-click command has already run.  It must produce the desired results of a double click, starting from the results of a single click."
msgstr "ユーザーがダブルクリックを行うとき、Emacsはまず通常のクリックイベントを生成して、その後ダブルクリックイベントを生成します。したがってダブルクリックイベントのコマンドバインディングは、すでにシングルクリックイベントが実行された想定でデザインしなければなりません。つまりシングルクリックの結果から開始して、ダブルクリックの望むべき結果を生成しなければならないのです。"

#. type: Plain text
#: original_texis/commands.texi:1931
msgid "This is convenient, if the meaning of a double click somehow builds on the meaning of a single click---which is recommended user interface design practice for double clicks."
msgstr "これはダブルクリックの意味合いが、シングルクリックの意味合いの何らかにもとづいて構築される場合は便利です。これはダブルクリックにたいするユーザーインターフェイスにおける推奨されるデザインプラクティスです。"

#. type: Plain text
#: original_texis/commands.texi:1938
msgid "If you click a button, then press it down again and start moving the mouse with the button held down, then you get a @dfn{double-drag} event when you ultimately release the button.  Its event type contains @samp{double-drag} instead of just @samp{drag}.  If a double-drag event has no binding, Emacs looks for an alternate binding as if the event were an ordinary drag."
msgstr "ボタンをクリックした後にもう一度ボタンを押下して、そのままマウスの移動を開始すると、最終的にボタンをリリースしたとき@dfn{ダブルドラッグ(double-drag)}イベントが取得されます。このイベント型には単なる@samp{drag}のかわりに@samp{double-drag}が含まれます。ダブルドラッグイベントがバインディングをもたなければ、それがあたかも通常のドラッグイベントだったかのようにEmacsはかわりのバインディングを探します。"

#. type: Plain text
#: original_texis/commands.texi:1946
msgid "Before the double-click or double-drag event, Emacs generates a @dfn{double-down} event when the user presses the button down for the second time.  Its event type contains @samp{double-down} instead of just @samp{down}.  If a double-down event has no binding, Emacs looks for an alternate binding as if the event were an ordinary button-down event.  If it finds no binding that way either, the double-down event is ignored."
msgstr "ダブルクリックやダブルドラッグイベントの前に、Emacsはユーザーが2回目にボタンを押したタイミングで@dfn{ダブルダウン(double-down)}イベントを生成します。このイベント型には単なる@samp{down}のかわりに@samp{double-down}が含まれます。ダブルダウンイベントがバインディングをもたなければ、それがあたかも通常のボタンダウンイベントだったかのようにEmacsはかわりのバインディングを探します。どちらの方法でもバインディングが見つからなければダブルダウンイベントは無視されます。"

#. type: Plain text
#: original_texis/commands.texi:1951
msgid "To summarize, when you click a button and then press it again right away, Emacs generates a down event and a click event for the first click, a double-down event when you press the button again, and finally either a double-click or a double-drag event."
msgstr "要約するとボタンをクリックしてすぐにまた押したとき、Emacsは1回目のクリックにたいしてダウンイベントとクリックイベントを生成して、2回目に再度ボタンを押したときにダブルダウンイベント、そして最後にダブルクリックまたはダブルドラッグイベントを生成します。"

#. type: Plain text
#: original_texis/commands.texi:1958
msgid "If you click a button twice and then press it again, all in quick succession, Emacs generates a @dfn{triple-down} event, followed by either a @dfn{triple-click} or a @dfn{triple-drag}.  The event types of these events contain @samp{triple} instead of @samp{double}.  If any triple event has no binding, Emacs uses the binding that it would use for the corresponding double event."
msgstr "ボタンを2回クリックした後にもう一度押したとき、それらすべてが素早く連続で行われたら、Emacsは@dfn{トリプルダウン(triple-down)}イベントと、その後続の@dfn{トリプルクリック(triple-click)}か@dfn{トリプルドラッグ(triple-drag)}イベントを生成します。これらイベントのイベント型には@samp{double}のかわりに@samp{triple}が含まれます。トリプルイベントがバインディングをもたなければEmacsは対応するダブルイベントに使用されるであろうバインディングを使用します。"

#. type: Plain text
#: original_texis/commands.texi:1964
msgid "If you click a button three or more times and then press it again, the events for the presses beyond the third are all triple events.  Emacs does not have separate event types for quadruple, quintuple, etc.@: events.  However, you can look at the event list to find out precisely how many times the button was pressed."
msgstr "ボタンを3回以上クリックした後に再度ボタンを押すと、3回を超えた押下にたいするイベントはすべてトリプルイベントになります。Emacsはクワドループル(quadruple: 4連)、クインティプル(quintuple: 5連)、...等のイベントにたいして個別のイベント型をもちません。しかしボタンが何回押下されたかを正確に調べるためにイベントリストを調べることができます。"

#. type: defun
#: original_texis/commands.texi:1965
#, no-wrap
msgid "event-click-count event"
msgstr "event-click-count event"

#. type: defun
#: original_texis/commands.texi:1971
msgid "This function returns the number of consecutive button presses that led up to @var{event}.  If @var{event} is a double-down, double-click or double-drag event, the value is 2.  If @var{event} is a triple event, the value is 3 or greater.  If @var{event} is an ordinary mouse event (not a repeat event), the value is 1."
msgstr "この関数は@var{event}を誘因した連続するボタン押下の回数をリターンする。@var{event}がダブルダウン、ダブルクリック、ダブルドラッグなら値は2である。@var{event}がトリプルイベントなら値は3以上になる。@var{event}が(リピートイベントではない)通常のマウスイベントなら値は1。"

#. type: defopt
#: original_texis/commands.texi:1973
#, no-wrap
msgid "double-click-fuzz"
msgstr "double-click-fuzz"

#. type: defopt
#: original_texis/commands.texi:1979
msgid "To generate repeat events, successive mouse button presses must be at approximately the same screen position.  The value of @code{double-click-fuzz} specifies the maximum number of pixels the mouse may be moved (horizontally or vertically) between two successive clicks to make a double-click."
msgstr "リピートイベントを生成するためには、ほぼ同じスクリーン位置で連続でマウスボタンを押下しなければならない。@code{double-click-fuzz}の値はダブルクリックを生成するために連続する2回のクリック間で、マウスが移動(水平と垂直)するかもしれない最大ピクセル数を指定する。"

#. type: defopt
#: original_texis/commands.texi:1982
msgid "This variable is also the threshold for motion of the mouse to count as a drag."
msgstr "この変数はドラッグとみなされるマウスモーションの閾値でもある。"

#. type: defopt
#: original_texis/commands.texi:1984
#, no-wrap
msgid "double-click-time"
msgstr "double-click-time"

#. type: defopt
#: original_texis/commands.texi:1991
msgid "To generate repeat events, the number of milliseconds between successive button presses must be less than the value of @code{double-click-time}.  Setting @code{double-click-time} to @code{nil} disables multi-click detection entirely.  Setting it to @code{t} removes the time limit; Emacs then detects multi-clicks by position only."
msgstr "リピートイベントを生成するためには、連続するボタン押下のミリ秒間隔が@code{double-click-time}の値より小さくなければならない。@code{double-click-time}を@code{nil}にセットすると複数回クリック検知が完全に無効になる。@code{t}にセットすると時間制限が取り除かれる。その場合はEmacsは位置だけで複数回のクリックを検知する。"

#. type: cindex
#: original_texis/commands.texi:1995
#, no-wrap
msgid "motion event"
msgstr "motion event"

#. type: cindex
#: original_texis/commands.texi:1996
#, no-wrap
msgid "mouse motion events"
msgstr "mouse motion events"

#. type: Plain text
#: original_texis/commands.texi:2001
msgid "Emacs sometimes generates @dfn{mouse motion} events to describe motion of the mouse without any button activity.  Mouse motion events are represented by lists that look like this:"
msgstr "Emacsは、ボタンアクティビティが何もないマウスのモーション(motion: 動き)を記述する@dfn{マウスモーション(mouse motion)}イベントを生成するときがあります。マウスモーションイベントは以下のようなリストによって表現されます:"

#. type: example
#: original_texis/commands.texi:2004
#, no-wrap
msgid "(mouse-movement POSITION)\n"
msgstr "(mouse-movement POSITION)\n"

#. type: Plain text
#: original_texis/commands.texi:2012
msgid "@var{position} is a mouse position list (@pxref{Click Events}), specifying the current position of the mouse cursor.  As with the end-position of a drag event, this position list may represent a location outside the boundaries of the initially selected frame, in which case the list contains that frame in place of a window."
msgstr "@var{position}はマウスカーソルのカレント位置を指定するマウス位置リスト(@ref{Click Events}を参照)です。ドラッグイベントの終了位置のように、この位置リストは最初に選択されていた境界外の位置を表すかもしれず、その場合にはそのフレーム内のその位置のウィンドウが含まれます。"

#. type: Plain text
#: original_texis/commands.texi:2017
msgid "The @code{track-mouse} macro enables generation of motion events within its body.  Outside of @code{track-mouse} body, Emacs does not generate events for mere motion of the mouse, and these events do not appear.  @xref{Mouse Tracking}."
msgstr "マクロ@code{track-mouse}は、ボタン内でのモーションイベントの生成を有効にします。@code{track-mouse}のbodyの外側では、Emacsはマウスの単なるモーションにたいするイベントは生成せず、これらのイベントは発生しません。@ref{Mouse Tracking}を参照してください。"

#. type: defvar
#: original_texis/commands.texi:2018
#, no-wrap
msgid "mouse-fine-grained-tracking"
msgstr "mouse-fine-grained-tracking"

#. type: defvar
#: original_texis/commands.texi:2022
msgid "When non-@code{nil}, mouse motion events are generated even for very small movements.  Otherwise, motion events are not generated as long as the mouse cursor remains pointing to the same glyph in the text."
msgstr "非@code{nil}ならたとえ非常に小さい移動でもマウスモーションイベントを生成する。それ以外ならテキスト内の同一グリフをマウスカーソルがポイントし続けるかぎりモーションイベントは生成されない。"

#. type: cindex
#: original_texis/commands.texi:2026
#, no-wrap
msgid "touchscreen events"
msgstr "touchscreen events"

#. type: cindex
#: original_texis/commands.texi:2027
#, no-wrap
msgid "support for touchscreens"
msgstr "support for touchscreens"

#. type: Plain text
#: original_texis/commands.texi:2033
msgid "Some window systems provide support for input devices that react to the user's touching the screen and moving fingers while touching the screen.  These input devices are known as touchscreens, and Emacs reports the events they generate as @dfn{touchscreen events}."
msgstr "一部のウィンドウシステムではユーザーがスクリーンにタッチしたり、タッチしながら指を動かすことで反応する入力デバイスがサポートされています。Emacsはこれらのタッチスクリーンと呼ばれる入力デバイスが生成したイベントを@dfn{タッチスクリーンイベント(touchscreen event)}として報告します。"

#. type: Plain text
#: original_texis/commands.texi:2040
msgid "Most individual events generated by a touchscreen only have meaning as part of a larger sequence of other events: for instance, the simple operation of tapping the touchscreen involves the user placing and raising a finger on the touchscreen, and swiping the display to scroll it involves placing a finger, moving it many times upwards or downwards, and then raising the finger."
msgstr "タッチスクリーンが生成した個々のイベントのほとんどは、他のイベントのより大きなシーケンスの一部としての意味しかもっていません。たとえばタッチスクリーンをタップするという単純な操作はユーザーがタッチスクリーンに指を置いて離すという操作、ディスプレイをスクロールためのスワイプはタッチスクリーンに指を置いて何度も上(下)に動かしてから指を離すという操作を引き起こすのです。"

#. type: cindex
#: original_texis/commands.texi:2041
#, no-wrap
msgid "touch point, in touchscreen events"
msgstr "touch point, in touchscreen events"

#. type: Plain text
#: original_texis/commands.texi:2051
msgid "While a simplistic model consisting of one finger is adequate for taps and scrolling, more complicated gestures require support for keeping track of multiple fingers, where the position of each finger is represented by a @dfn{touch point}.  For example, a ``pinch to zoom'' gesture might consist of the user placing two fingers and moving them individually in opposite directions, where the distance between the positions of their individual points determine the amount by which to zoom the display, and the center of an imaginary line between those positions determines where to pan the display after zooming."
msgstr "タップやスクロールにたいしては一本の指で構成される単純なモデルで十分ですが、より複雑なジェスチャーには複数の指を追跡するためのサポートが要求されまづ。指が複数の場合には、それぞれの指の位置は@dfn{タッチポイント(touch point)}によって表されることになります。たとえば``ズームするためのピンチアウト''というジェスチャーは、ユーザーが指を2本置いて、それらの指を別個に反対方向へ動かすことから構成されます。ここでこれら2本の指による個別のポイント位置の間の距離によってディスプレイのズーム量、これらの位置を結ぶ想像上の線の中央位置によってズーム後にどこにディスプレイをパンする(振る)かが決まります。"

#. type: Plain text
#: original_texis/commands.texi:2057
msgid "The low-level touchscreen events described below can be used to implement all the touch sequences described above.  In those events, each point is represented by a cons of an arbitrary number identifying the point and a mouse position list (@pxref{Click Events}) specifying the position of the finger when the event occurred."
msgstr "下記の低レベルなタッチスクリーンイベントを使って、上述したタッチシーケンスすべてを実装できます。これらのイベントでは、ポイントはそれぞれポイントを識別する任意の番号、およびイベント発生時の指の位置を指定するマウス位置リスト(@ref{Click Events}を参照)のコンスセルによって表現されます。"

#. type: cindex
#: original_texis/commands.texi:2059
#, no-wrap
msgid "@code{touchscreen-begin} event"
msgstr "@code{touchscreen-begin} event"

#. type: item
#: original_texis/commands.texi:2060
#, no-wrap
msgid "(touchscreen-begin @var{point})"
msgstr "(touchscreen-begin @var{point})"

#. type: table
#: original_texis/commands.texi:2063
msgid "This event is sent when @var{point} is created by the user pressing a finger against the touchscreen."
msgstr "これはユーザーがタッチスクリーンにたいして指を押すことで@var{point}が作成されたときに送信されるイベント。"

#. type: cindex
#: original_texis/commands.texi:2064
#, no-wrap
msgid "@code{touchscreen-update} event"
msgstr "@code{touchscreen-update} event"

#. type: item
#: original_texis/commands.texi:2065
#, no-wrap
msgid "(touchscreen-update @var{points})"
msgstr "(touchscreen-update @var{points})"

#. type: table
#: original_texis/commands.texi:2069
msgid "This event is sent when a point on the touchscreen has changed position.  @var{points} is a list of touch points containing the up-to-date positions of each touch point currently on the touchscreen."
msgstr "これはタッチスクリーン上のポイントの位置が変更されたときに送信されるイベント。@var{points}はカレントでタッチスクリーン上にあるタッチポイントの最新位置を含んだタッチポイントのリスト。"

#. type: cindex
#: original_texis/commands.texi:2070
#, no-wrap
msgid "@code{touchscreen-end} event"
msgstr "@code{touchscreen-end} event"

#. type: item
#: original_texis/commands.texi:2071
#, no-wrap
msgid "(touchscreen-end @var{point})"
msgstr "(touchscreen-end @var{point})"

#. type: table
#: original_texis/commands.texi:2075
msgid "This event is sent when @var{point} is no longer present on the display, because another program took the grab, or because the user raised the finger from the touchscreen."
msgstr "これは他のプログラムにより奪われたりユーザーがタッチスクリーンから指を離したことによって@var{point}がディスプレイ上に存在しなくなった際に送信されるイベント。"

#. type: cindex
#: original_texis/commands.texi:2079
#, no-wrap
msgid "focus event"
msgstr "focus event"

#. type: Plain text
#: original_texis/commands.texi:2088
msgid "Window systems provide general ways for the user to control which window gets keyboard input.  This choice of window is called the @dfn{focus}.  When the user does something to switch between Emacs frames, that generates a @dfn{focus event}.  The normal definition of a focus event, in the global keymap, is to select a new frame within Emacs, as the user would expect.  @xref{Input Focus}, which also describes hooks related to focus events."
msgstr "ウィンドウシステムはユーザーにたいしてどのウィンドウがキーボード入力を受け取るか制御するための一般的な方法を提供します。このウィンドウ選択は@dfn{フォーカス(focus)}と呼ばれます。Emacsのフレームを切り替えるためにユーザーが何かを行うと、それは@dfn{フォーカスイベント(focus event)}を生成します。フォーカスイベントの通常の定義はグローバルキーマップ内にあり、ユーザーが期待するようにEmacsで新たなフレームを選択するためのものです。@ref{Input Focus}ではフォーカスイベントに関連するフックも説明しています。"

#. type: Plain text
#: original_texis/commands.texi:2090
msgid "Focus events are represented in Lisp as lists that look like this:"
msgstr "フォーカスイベントは以下のようにLispのリストで表現されます:"

#. type: example
#: original_texis/commands.texi:2093
#, no-wrap
msgid "(switch-frame @var{new-frame})\n"
msgstr "(switch-frame @var{new-frame})\n"

#. type: Plain text
#: original_texis/commands.texi:2097
msgid "where @var{new-frame} is the frame switched to."
msgstr "ここで@var{new-frame}は切り替え先のフレームです。"

#. type: Plain text
#: original_texis/commands.texi:2105
msgid "Some X window managers are set up so that just moving the mouse into a window is enough to set the focus there.  Usually, there is no need for a Lisp program to know about the focus change until some other kind of input arrives.  Emacs generates a focus event only when the user actually types a keyboard key or presses a mouse button in the new frame; just moving the mouse between frames does not generate a focus event."
msgstr "Xウィンドウマネージャーには、あるウィンドウにマウスを移動するだけで、そこにフォーカスされるようにセットアップするものがいくつかあります。通常は他の種類の入力が到着するまで、Lispプログラムがフォーカスの変更を知る必要はありません。Emacsはユーザーが新たなフレーム内で実際にキーボードのキーをタイプするかマウスボタンを押下したときしか、フォーカスイベントを生成しません。つまりフレーム間でマウスを移動させても、フォーカスイベントは生成されません。"

#. type: Plain text
#: original_texis/commands.texi:2112
msgid "A focus event in the middle of a key sequence would garble the sequence.  So Emacs never generates a focus event in the middle of a key sequence.  If the user changes focus in the middle of a key sequence---that is, after a prefix key---then Emacs reorders the events so that the focus event comes either before or after the multi-event key sequence, and not within it."
msgstr "キーシーケンスの途中におけるフォーカスイベントは、そのシーケンスを誤ったものにするかもしれません。そのためEmacsは決してキーシーケンスの途中でフォーカスイベントを生成しません。ユーザーがキーシーケンスの途中(つまりプレフィクス引数の後)でフォーカスを変更すると、複数イベントキーシーケンスの前か後にフォーカスイベントが到着するように、Emacsはフォーカスイベントを記録しておきます。"

#. type: subsection
#: original_texis/commands.texi:2114
#, no-wrap
msgid "Xwidget events"
msgstr "Xwidget events"

#. type: Plain text
#: original_texis/commands.texi:2119
msgid "Xwidgets (@pxref{Xwidgets}) can send events to update Lisp programs on their status.  These events are dubbed @code{xwidget-events}, and contain various data describing the nature of the change."
msgstr "Xwidgetsは自身の状態によってLispプログラムを更新するためにイベントを送信することができます。(@ref{Xwidgets}を参照)。これらのイベントは@code{xwidget-events}という、変更の性質を説明するさまざまなデータを含んだイベントに置き換えられます。"

#. type: cindex
#: original_texis/commands.texi:2121
#, no-wrap
msgid "@code{xwidget-event} event"
msgstr "@code{xwidget-event} event"

#. type: item
#: original_texis/commands.texi:2122
#, no-wrap
msgid "(xwidget-event @var{kind} @var{xwidget} @var{arg})"
msgstr "(xwidget-event @var{kind} @var{xwidget} @var{arg})"

#. type: table
#: original_texis/commands.texi:2126
msgid "This event is sent whenever some kind of update occurs in @var{xwidget}.  There are several types of updates, identified by their @var{kind}."
msgstr "これは@var{xwidget}である種の更新が発生した際は常に送信されるイベント。更新には複数の種類があり、それらは@var{kind}によって識別される。"

#. type: cindex
#: original_texis/commands.texi:2127
#, no-wrap
msgid "xwidget callbacks"
msgstr "xwidget callbacks"

#. type: table
#: original_texis/commands.texi:2131
msgid "It is a special event (@pxref{Special Events}), which should be handled by adding a callback to an xwidget that is called whenever an xwidget event for @var{xwidget} is received."
msgstr "これは@var{xwidget}にたいするxwidgetイベントを受信した際は常に呼び出されるようなコールバック(callback)をxwidgetに追加することによって処理する必要があるスペシャルイベントである(@ref{Special Events}を参照)。"

#. type: table
#: original_texis/commands.texi:2135
msgid "You can add a callback by setting the @code{callback} of an xwidget's property list, which should be a function that accepts @var{xwidget} and @var{kind} as arguments."
msgstr "コールバックは引数として@var{xwidget}と@var{kind}を受け取る関数であること。コールバックはwidgetのプロパティリストの@code{callback}をセットすることによって追加できる。"

#. type: cindex
#: original_texis/commands.texi:2137
#, no-wrap
msgid "@code{load-changed} xwidget event"
msgstr "@code{load-changed} xwidget event"

#. type: item
#: original_texis/commands.texi:2138
#, no-wrap
msgid "load-changed"
msgstr "load-changed"

#. type: table
#: original_texis/commands.texi:2143
msgid "This xwidget event indicates that the @var{xwidget} has reached a particular point of the page-loading process.  When these events are sent, @var{arg} will contain a string that further describes the status of the widget:"
msgstr "これは@var{xwidget}がページローディングプロセスの特定のポイントに達したことを示すxwidgetイベント。@var{arg}にはこれらのイベントが送信される際には、widgetの状態が更に記述された文字列が含められる。"

#. type: cindex
#: original_texis/commands.texi:2145
#, no-wrap
msgid "@samp{load-started} in xwidgets"
msgstr "@samp{load-started} in xwidgets"

#. type: item
#: original_texis/commands.texi:2146
#, no-wrap
msgid "load-started"
msgstr "load-started"

#. type: table
#: original_texis/commands.texi:2148
msgid "This means the widget has begun a page-loading operation."
msgstr "これはそのwidgetがページローディング操作を開始したことを意味する。"

#. type: cindex
#: original_texis/commands.texi:2149
#, no-wrap
msgid "@samp{load-finished} in xwidgets"
msgstr "@samp{load-finished} in xwidgets"

#. type: item
#: original_texis/commands.texi:2150
#, no-wrap
msgid "load-finished"
msgstr "load-finished"

#. type: table
#: original_texis/commands.texi:2153
msgid "This means the @var{xwidget} has finished processing whatever page-loading operation that it was previously performing."
msgstr "これは@var{xwidget}が前に処理していたページローディング操作が何であれ処理が終了したことを意味する。"

#. type: cindex
#: original_texis/commands.texi:2154
#, no-wrap
msgid "@samp{load-redirected} in xwidgets"
msgstr "@samp{load-redirected} in xwidgets"

#. type: item
#: original_texis/commands.texi:2155
#, no-wrap
msgid "load-redirected"
msgstr "load-redirected"

#. type: table
#: original_texis/commands.texi:2158
msgid "This means the @var{xwidget} has encountered and followed a redirect during the page-loading operation."
msgstr "これは@var{xwidget}がページローディング操作中にリダイレクトに遭遇して、それをフォローしたことを意味する。"

#. type: cindex
#: original_texis/commands.texi:2159
#, no-wrap
msgid "@samp{load-committed} in xwidgets"
msgstr "@samp{load-committed} in xwidgets"

#. type: item
#: original_texis/commands.texi:2160
#, no-wrap
msgid "load-committed"
msgstr "load-committed"

#. type: table
#: original_texis/commands.texi:2164
msgid "This means the @var{xwidget} has committed to a given URL during the page-loading operation, i.e.@: the URL is the final URL that will be rendered by @var{xwidget} during the current page-loading operation."
msgstr "これは@var{xwidget}がページローディング操作中に与えられたURLにコミット(つまりそのURLがカレントのページローディング操作中にレンダリングする最終URL)したことを意味する。"

#. type: cindex
#: original_texis/commands.texi:2166
#, no-wrap
msgid "@code{download-callback} xwidget events"
msgstr "@code{download-callback} xwidget events"

#. type: item
#: original_texis/commands.texi:2167
#, no-wrap
msgid "download-callback"
msgstr "download-callback"

#. type: table
#: original_texis/commands.texi:2169
msgid "This event indicates that a download of some kind has been completed."
msgstr "このイベントはある種のダウンロードが完了したことを示す。"

#. type: table
#: original_texis/commands.texi:2176
msgid "In the above events, there can be arguments after @var{arg}, which itself indicates the URL from which the download file was retrieved: the first argument after @var{arg} indicates the MIME type of the download, as a string, while the second argument contains the full file name of the downloaded file."
msgstr "上記イベントでは@var{arg}の後に引数があるかもしれない。その引数自体はダウンロードしたファイルを取得したURLを示す。@var{arg}の後の1つ目の引数はそのダウンロードのMIMEタイプ(文字列)を示し、2つ目の引数はダウンロードしたファイルの完全なファイル名が含まれる。"

#. type: cindex
#: original_texis/commands.texi:2178
#, no-wrap
msgid "@code{download-started} xwidget events"
msgstr "@code{download-started} xwidget events"

#. type: item
#: original_texis/commands.texi:2179
#, no-wrap
msgid "download-started"
msgstr "download-started"

#. type: table
#: original_texis/commands.texi:2183
msgid "This event indicates that a download has been started.  In these events, @var{arg} contains the URL of the file that is currently being downloaded."
msgstr "このイベントはダウンロードが開始したことを示す。これらのイベントにおいて、@var{arg}にはカレントでダウンロードされるファイルのURLが含まれる。"

#. type: cindex
#: original_texis/commands.texi:2184
#, no-wrap
msgid "@code{javascript-callback} xwidget events"
msgstr "@code{javascript-callback} xwidget events"

#. type: item
#: original_texis/commands.texi:2185
#, no-wrap
msgid "javascript-callback"
msgstr "javascript-callback"

#. type: table
#: original_texis/commands.texi:2188
msgid "This event contains JavaScript callback data.  These events are used internally by @code{xwidget-webkit-execute-script}."
msgstr "このイベントにはJavaScriptのコールバックデータが含まれる。これらのイベントは@code{xwidget-webkit-execute-script}によって内部的に使用される。"

#. type: cindex
#: original_texis/commands.texi:2190
#, no-wrap
msgid "@code{xwidget-display-event} event"
msgstr "@code{xwidget-display-event} event"

#. type: item
#: original_texis/commands.texi:2191
#, no-wrap
msgid "(xwidget-display-event @var{xwidget} @var{source})"
msgstr "(xwidget-display-event @var{xwidget} @var{source})"

#. type: table
#: original_texis/commands.texi:2195
msgid "This event is sent whenever an xwidget requests that another xwidget be displayed.  @var{xwidget} is the xwidget that should be displayed, and @var{source} is the xwidget that asked to display @var{xwidget}."
msgstr "このイベントはxwidgetが他のxwidgetの表示をリクエストした際は常に送信される。@var{xwidget}は表示されることになるxwidget、@var{source}は@var{xwidget}の表示を要求したxwidget。"

#. type: table
#: original_texis/commands.texi:2200
msgid "It is also a special event which should be handled through callbacks.  You can add such a callback by setting the @code{display-callback} of @var{source}'s property list, which should be a function that accepts @var{xwidget} and @var{source} as arguments."
msgstr "これはコールバックを通じて処理を要するスペシャルイベントでもある。そのようなコールバックは引数として@var{xwidget}と@var{source}を受け取る関数であり、@var{source}のプロパティリストの@code{display-callback}にセットして追加できる。"

#. type: table
#: original_texis/commands.texi:2205
msgid "@var{xwidget}'s buffer will be set to a temporary buffer.  When displaying the widget, care should be taken to replace the buffer with the buffer in which the xwidget will be displayed, using @code{set-xwidget-buffer} (@pxref{Xwidgets})."
msgstr "@var{xwidget}のバッファーは一時バッファーにセットされる。widget表示の際には、@code{set-xwidget-buffer} (@ref{Xwidgets}を参照)を使用してバッファーをxwidgetが表示されるバッファーに置き換えるよう注意すること。"

#. type: subsection
#: original_texis/commands.texi:2208
#, no-wrap
msgid "Miscellaneous System Events"
msgstr "Miscellaneous System Events"

#. type: Plain text
#: original_texis/commands.texi:2211
msgid "A few other event types represent occurrences within the system."
msgstr "他にもシステム内での出来事を表現するイベント型がいくつかあります。"

#. type: cindex
#: original_texis/commands.texi:2213
#, no-wrap
msgid "@code{delete-frame} event"
msgstr "@code{delete-frame} event"

#. type: item
#: original_texis/commands.texi:2214
#, no-wrap
msgid "(delete-frame (@var{frame}))"
msgstr "(delete-frame (@var{frame}))"

#. type: table
#: original_texis/commands.texi:2217
msgid "This kind of event indicates that the user gave the window manager a command to delete a particular window, which happens to be an Emacs frame."
msgstr "このイベントの種類はユーザーがウィンドウマネージャーに特定のウィンドウを削除するコマンドを与えたことを示し、Emacsのフレームにたいして発生する。"

#. type: table
#: original_texis/commands.texi:2219
msgid "The standard definition of the @code{delete-frame} event is to delete @var{frame}."
msgstr "@code{フレーム削除(delete-frame)}イベントの標準的な定義では@var{frame}が削除される。"

#. type: cindex
#: original_texis/commands.texi:2220
#, no-wrap
msgid "@code{iconify-frame} event"
msgstr "@code{iconify-frame} event"

#. type: item
#: original_texis/commands.texi:2221
#, no-wrap
msgid "(iconify-frame (@var{frame}))"
msgstr "(iconify-frame (@var{frame}))"

#. type: table
#: original_texis/commands.texi:2227
msgid "This kind of event indicates that the user iconified @var{frame} using the window manager.  Its standard definition is @code{ignore}; since the frame has already been iconified, Emacs has no work to do.  The purpose of this event type is so that you can keep track of such events if you want to."
msgstr "このイベントの種類はウィンドウマネージャーを使用してユーザーが@var{frame}をアイコン化したことを示す。標準的な定義は@code{ignore}。これはそのフレームがすでにアイコン化されているので、Emacsが行う必要のことは何もないからである。このイベント型の目的は、望むならこのようなイベントの追跡を可能にしておくためである。"

#. type: cindex
#: original_texis/commands.texi:2228
#, no-wrap
msgid "@code{make-frame-visible} event"
msgstr "@code{make-frame-visible} event"

#. type: item
#: original_texis/commands.texi:2229
#, no-wrap
msgid "(make-frame-visible (@var{frame}))"
msgstr "(make-frame-visible (@var{frame}))"

#. type: table
#: original_texis/commands.texi:2233
msgid "This kind of event indicates that the user deiconified @var{frame} using the window manager.  Its standard definition is @code{ignore}; since the frame has already been made visible, Emacs has no work to do."
msgstr "このイベントの種類はウィンドウマネージャーを使用してユーザーが@var{frame}を非アイコン化したことを示す。標準的な定義は@code{ignore}。これは、そのフレームがすでに可視化されているので、Emacsが行う必要のことは何もないからである。"

#. type: cindex
#: original_texis/commands.texi:2234
#, no-wrap
msgid "@code{touch-end} event"
msgstr "@code{touch-end} event"

#. type: item
#: original_texis/commands.texi:2235
#, no-wrap
msgid "(touch-end (@var{position}))"
msgstr "(touch-end (@var{position}))"

#. type: table
#: original_texis/commands.texi:2240
msgid "This kind of event indicates that the user's finger moved off the mouse wheel or the touchpad.  The @var{position} element is a mouse position list (@pxref{Click Events}), specifying the position of the mouse cursor when the finger moved off the mouse wheel."
msgstr "この種のイベントはユーザーの指がマウスホイールやタッチパッドから離れたことを示す。マウス位置リストの@var{position}要素(@ref{Click Events}を参照)は、マウスホイールから指が離れた際のマウスカーソルの位置を指定する。"

#. type: cindex
#: original_texis/commands.texi:2241
#, no-wrap
msgid "@code{wheel-up} event"
msgstr "@code{wheel-up} event"

#. type: cindex
#: original_texis/commands.texi:2242
#, no-wrap
msgid "@code{wheel-down} event"
msgstr "@code{wheel-down} event"

#. type: item
#: original_texis/commands.texi:2243
#, no-wrap
msgid "(wheel-up @var{position} @var{clicks} @var{lines} @var{pixel-delta})"
msgstr "(wheel-up @var{position} @var{clicks} @var{lines} @var{pixel-delta})"

#. type: itemx
#: original_texis/commands.texi:2244
#, no-wrap
msgid "(wheel-down @var{position} @var{clicks} @var{lines} @var{pixel-delta})"
msgstr "(wheel-down @var{position} @var{clicks} @var{lines} @var{pixel-delta})"

#. type: table
#: original_texis/commands.texi:2249
msgid "These events are generated by moving a mouse wheel.  The @var{position} element is a mouse position list (@pxref{Click Events}), specifying the position of the mouse cursor when the event occurred."
msgstr "これらのイベントはマウスホイールを動かすことによって発生する。@var{position}要素はそのイベント発生時のマウスカーソル位置を指定するマウス位置リスト(@ref{Click Events}を参照)。"

#. type: vindex
#: original_texis/commands.texi:2250
#, no-wrap
msgid "mwheel-coalesce-scroll-events"
msgstr "mwheel-coalesce-scroll-events"

#. type: table
#: original_texis/commands.texi:2267
msgid "@var{clicks}, if present, is the number of times that the wheel was moved in quick succession.  @xref{Repeat Events}.  @var{lines}, if present and not @code{nil}, is the positive number of screen lines that should be scrolled (either up, when the event is @code{wheel-up}, or down when the event is @code{wheel-down}).  @var{pixel-delta}, if present, is a cons cell of the form @w{@code{(@var{x} . @var{y})}}, where @var{x} and @var{y} are the numbers of pixels by which to scroll in each axis, a.k.a.@: @dfn{pixelwise deltas}.  Usually, only one of the two will be non-zero, the other will be either zero or very close to zero; the larger number indicates the axis to scroll the window.  When the variable @code{mwheel-coalesce-scroll-events} is @code{nil}, the scroll commands ignore the @var{lines} element, even if it's non-@code{nil}, and use the @var{pixel-delta} data instead; in that case, the direction of scrolling is determined by the sign of the pixelwise deltas, and the direction (up or down) implied by the event kind is ignored."
msgstr "@var{clicks}が与えられた場合には、ホイールが連続して素早く動いた回数を示す数値。@ref{Repeat Events}を参照のこと。@var{lines}が与えられて、それが@code{nil}でなければ、それはスクロールされるべきスクリーン行を表す正の行数である(イベントが@code{wheel-up}ならスクロールアップ、@code{wheel-down}ならスクロールダウン)。@var{pixel-delta}が与えられた場合には、それが@w{@code{(@var{x} . @var{y})}}という形式のコンスセルであれば、@var{x}と@var{y}はそれぞれの軸方向にたいしてスクロールされたピクセル数、いわゆる@dfn{ピクセル単位デルタ(pixelwise delta)}である。通常だと2つのうちの一方が非0、もう一方は0もしくは0に非常に近い値となる。大きい数値はウィンドウをスクロールする軸を示します。変数@code{mwheel-coalesce-scroll-events}が@code{nil}の場合には、たとえ非@code{nil}であってもスクロールコマンドは@var{lines}要素を無視@var{pixel-delta}のデータを使用する。この場合にはイベント種別によって暗示される方向(アップかダウン)を無視して、ピクセル単位デルタの符号によりスクロール方向を判断する。"

#. type: cindex
#: original_texis/commands.texi:2268
#, no-wrap
msgid "pixel-resolution wheel events"
msgstr "pixel-resolution wheel events"

#. type: table
#: original_texis/commands.texi:2277
msgid "You can use these @var{x} and @var{y} pixelwise deltas to determine how much the mouse wheel has actually moved at pixel resolution.  For example, the pixelwise deltas could be used to scroll the display at pixel resolution, exactly according to the user's turning the mouse wheel.  This pixelwise scrolling is possible only when @code{mwheel-coalesce-scroll-events} is @code{nil}, and in general the @var{pixel-delta} data is not generated when that variable is non-@code{nil}."
msgstr "これらのピクセル単位デルタ@var{x}と@var{y}を用いれば、マウスホイールがピクセル解像度で実際にどれだけ動いたかを判断できる。たとえばピクセル単位デルタを使うことによって、ユーザーが回したマウスホイールとまったく同じようにディスプレイをスクロールできるだろう。このピクセル単位のスクロールが可能なのは@code{mwheel-coalesce-scroll-events}が@code{nil}のときだけであり、この変数が非@code{nil}の場合には通常は@var{pixel-delta}データは生成されない。"

#. type: vindex
#: original_texis/commands.texi:2278
#, no-wrap
msgid "mouse-wheel-up-event"
msgstr "mouse-wheel-up-event"

#. type: vindex
#: original_texis/commands.texi:2279
#, no-wrap
msgid "mouse-wheel-down-event"
msgstr "mouse-wheel-down-event"

#. type: table
#: original_texis/commands.texi:2287
msgid "The @code{wheel-up} and @code{wheel-down} events are generated only on some kinds of systems.  On other systems, @code{mouse-4} and @code{mouse-5} are used instead.  For portable code, use the variables @code{mouse-wheel-up-event}, @code{mouse-wheel-up-alternate-event}, @code{mouse-wheel-down-event} and @code{mouse-wheel-down-alternate-event} defined in @file{mwheel.el} to determine what event types to expect from the mouse wheel."
msgstr "@code{wheel-up}と@code{wheel-down}のイベントはある種のシステムでのみ発生する。それら以外のシステムでは、かわりに@code{mouse-4}と@code{mouse-5}が使用される。可搬性のあるコードとするためには、マウスホイールからどのイベント型が期待されるかを決定するために、@file{mwheel.el}内で定義されている変数@code{mouse-wheel-up-event}、@code{mouse-wheel-up-alternate-event}、@code{mouse-wheel-down-event}、@code{mouse-wheel-down-alternate-event}を使用すること。"

#. type: vindex
#: original_texis/commands.texi:2288
#, no-wrap
msgid "mouse-wheel-left-event"
msgstr "mouse-wheel-left-event"

#. type: vindex
#: original_texis/commands.texi:2289
#, no-wrap
msgid "mouse-wheel-right-event"
msgstr "mouse-wheel-right-event"

#. type: table
#: original_texis/commands.texi:2298
msgid "Similarly, some mice can generate @code{mouse-wheel-left-event} and @code{mouse-wheel-right-event} and can be used to scroll if @code{mouse-wheel-tilt-scroll} is non-@code{nil}.  However, some mice also generate other events at the same time as they're generating these scroll events which may get in the way.  The way to fix this is generally to unbind these events (for instance, @code{mouse-6} or @code{mouse-7}, but this is very hardware and operating system dependent)."
msgstr "同様に@code{mouse-wheel-left-event}と@code{mouse-wheel-right-event}を生成できる一部のマウスでは、@code{mouse-wheel-tilt-scroll}が非@code{mouse-wheel-tilt-scroll}ならこれらをスクロールに使用できる。ただしこれらのスクロールイベントと同時に別のイベントをも生成するマウスもいくつかあり、邪魔をするかもしれない。この問題を解決するにはこれらのイベントにたいするバインドを削除する方法が一般的である(たとえば@code{mouse-6}や@code{mouse-7}等を削除するがバインドはハードウェアとオペレーティングシステムに大きく依存する)。"

#. type: cindex
#: original_texis/commands.texi:2299
#, no-wrap
msgid "@code{pinch} event"
msgstr "@code{pinch} event"

#. type: item
#: original_texis/commands.texi:2300
#, no-wrap
msgid "(pinch @var{position} @var{dx} @var{dy} @var{scale} @var{angle})"
msgstr "(pinch @var{position} @var{dx} @var{dy} @var{scale} @var{angle})"

#. type: table
#: original_texis/commands.texi:2313
msgid "This kind of event is generated by the user performing a ``pinch'' gesture by placing two fingers on a touchpad and moving them towards or away from each other.  @var{position} is a mouse position list (@pxref{Click Events}) that provides the position of the mouse pointer when the event occurred, @var{dx} is the change in the horizontal distance between the fingers since the last event in the same sequence, @var{dy} is the vertical movement of the fingers since the last event in the same sequence, @var{scale} is the ratio of the current distance between the fingers to that distance at the start of the sequence, and @var{angle} is the angular difference in degrees between the direction of the line connecting the fingers in this event and the direction of that line in the last event of the same sequence."
msgstr "この種のイベントはタッチパッドに指を2本置いてそれらを互いに近づけたり離したりする、``ピンチ(pinch)''というジェスチャーをユーザーが行った際に生成される。@var{position}はイベント発生時のマウスポインターの位置を提供するマウス位置リスト(@ref{Click Events}を参照)、@var{dx}は同一シーケンス内の最後のイベントから2本の指の間の水平距離の変分、@var{dy}は同じく垂直距離の変分、@var{scale}はこのシーケンス開始時の2本の指の間の距離とカレント距離の比率、@var{angle}はこのイベントで指と指をつなぐ線分の方向と同一シーケンスの最後のイベントにおける同線分方向との間の角度差(degree)である。"

#. type: table
#: original_texis/commands.texi:2317
msgid "As pinch events are only sent at the beginning or during a pinch sequence, they do not report gestures where the user moves two fingers on a touchpad in a rotating fashion without pinching the fingers."
msgstr "ピンチイベントが送信されるのはピンチシーケンスの開始かその間だけであり、ユーザーがタッチパッド置いた2本の指をピンチではなく回転(rotate)させるように動かすジェスチャーは報告されない。"

#. type: table
#: original_texis/commands.texi:2319
msgid "All arguments after @var{position} are floating point numbers."
msgstr "@var{position}の後の引数はすべて浮動小数点数。"

#. type: table
#: original_texis/commands.texi:2325
msgid "This event is usually sent as part of a sequence, which begins with the user placing two fingers on the touchpad, and ends with the user removing those fingers.  @var{dx}, @var{dy}, and @var{angle} will be @code{0.0} in the first event of a sequence; subsequent events will report non-zero values for these members of the event structure."
msgstr "これはユーザーがタッチパッドに2本の指を置いたときが開始、指を離したときに終了するイベントであり、通常はあるシーケンスの一部として送信される。先頭のイベントでは@var{dx}、@var{dy}、@var{angle}は@code{0.0}になる。後続するイベントではこのイベント構造のこれらのメンバーにたいしては非0値が報告されるだろう。"

#. type: table
#: original_texis/commands.texi:2330
msgid "@var{dx} and @var{dy} are reported in imaginary relative units, in which @code{1.0} is the width and height of the touchpad respectively.  They are usually interpreted as being relative to the size of the object beneath the gesture: image, window, etc."
msgstr "@var{dx}と@var{dy}は@code{1.0}がそれぞれタッチパッドの幅と高さに相当するような想像上の相対的単位として報告される。これらは通常はジェスチャーの下にあるイメージやウィンドウ等のオブジェクトサイズに相対的なものと解釈される。"

#. type: cindex
#: original_texis/commands.texi:2331
#, no-wrap
msgid "@code{preedit-text} event"
msgstr "@code{preedit-text} event"

#. type: item
#: original_texis/commands.texi:2332
#, no-wrap
msgid "(preedit-text @var{arg})"
msgstr "(preedit-text @var{arg})"

#. type: table
#: original_texis/commands.texi:2336
msgid "This event is sent when a system input method tells Emacs to display some text to indicate to the user what will be inserted.  The contents of @var{arg} are dependent on the window system being used."
msgstr "これは何が挿入されるかをユーザーに示すために、システムのインプットメソッドがEmacsに何らかのテキストを表示するよう伝える際に送信されるイベント。@var{arg}の内容は使用中のウィンドウシステムに依存する。"

#. type: table
#: original_texis/commands.texi:2340
msgid "On X, @var{arg} is a string describing some text to place behind the cursor.  It can be @code{nil}, which means to remove any text previously displayed."
msgstr "Xでは@var{arg}はカーソルの向こうに配置するテキストを記述する文字列。@code{nil}なら前に表示していたすべてのテキストの削除を意味する。"

#. type: table
#: original_texis/commands.texi:2344
msgid "On PGTK frames (@pxref{Frames}), @var{arg} is a list of strings with information about their color and underline attributes.  It has the following form:"
msgstr "PGTKフレーム(@ref{Frames}を参照)では、@var{arg}はカラーとアンダーラインの属性に関する情報をもつ文字列リスト。以下の形式をもつ:"

#. type: group
#: original_texis/commands.texi:2357
#, no-wrap
msgid ""
"   ((@var{string1}\n"
"     (ul . @var{underline-color})\n"
"     (bg . @var{background-color})\n"
"     (fg . @var{foreground-color}))\n"
"    (@var{string2}\n"
"     (ul . @var{underline-color})\n"
"     (bg . @var{background-color})\n"
"     (fg . @var{foreground-color}))\n"
"    @dots{}\n"
"   )\n"
msgstr ""
"   ((@var{string1}\n"
"     (ul . @var{underline-color})\n"
"     (bg . @var{background-color})\n"
"     (fg . @var{foreground-color}))\n"
"    (@var{string2}\n"
"     (ul . @var{underline-color})\n"
"     (bg . @var{background-color})\n"
"     (fg . @var{foreground-color}))\n"
"    @dots{}\n"
"   )\n"

#. type: table
#: original_texis/commands.texi:2364
msgid "Color information can be omitted, leaving just the text of the strings.  @var{underline-color} can be @code{t}, meaning underlined text with default underline color, or it can be a string, the name of the color to draw the underline."
msgstr "文字列に関するテキストを残してカラーの情報は省略可。@var{underline-color}が@code{t}ならテキストのアンダーラインがデフォルトのアンダーラインカラーになること、文字列ならそのカラー名によってアンダーラインが描画されることを意味する。"

#. type: table
#: original_texis/commands.texi:2369
msgid "This is a special event (@pxref{Special Events}), which normally should not be bound by the user to any command.  Emacs will typically display the text contained in the event in an overlay behind point when it is received."
msgstr "これは通常ならユーザーがコマンドにバインドするべきではないスペシャルイベントである(@ref{Special Events}を参照)。Emacsは通常はこのイベントを受信すると、ポインター背後にあるオーバーレイにイベントに含まれるテキストを表示する。"

#. type: cindex
#: original_texis/commands.texi:2370
#, no-wrap
msgid "@code{drag-n-drop} event"
msgstr "@code{drag-n-drop} event"

#. type: item
#: original_texis/commands.texi:2371
#, no-wrap
msgid "(drag-n-drop @var{position} @var{files})"
msgstr "(drag-n-drop @var{position} @var{files})"

#. type: table
#: original_texis/commands.texi:2375
msgid "This kind of event is generated when a group of files is selected in an application outside of Emacs, and then dragged and dropped onto an Emacs frame."
msgstr "この種類のイベントはEmacs外部アプリケーション内でファイルグループが選択されて、それがEmacsフレーム内にドラッグアンドドロップされたときに発生する。"

#. type: table
#: original_texis/commands.texi:2381
msgid "The element @var{position} is a list describing the position of the event, in the same format as used in a mouse-click event (@pxref{Click Events}), and @var{files} is the list of file names that were dragged and dropped.  The usual way to handle this event is by visiting these files."
msgstr "要素@var{position}は、そのイベント位置を記述しマウスクリックイベントで使用されるフォーマット(@ref{Click Events}を参照)と同じ。要素@var{files}はドラッグアンドドロップされたファイル名のリスト。通常はそれらのファイルをvisitすることによってこのイベントは処理される。"

#. type: table
#: original_texis/commands.texi:2384
msgid "This kind of event is generated, at present, only on some kinds of systems."
msgstr "この種類のイベントは現在のところある種のシステムでのみ生成される。"

#. type: cindex
#: original_texis/commands.texi:2385
#, no-wrap
msgid "@code{help-echo} event"
msgstr "@code{help-echo} event"

#. type: item
#: original_texis/commands.texi:2386
#, no-wrap
msgid "help-echo"
msgstr "help-echo"

#. type: table
#: original_texis/commands.texi:2390
msgid "This kind of event is generated when a mouse pointer moves onto a portion of buffer text which has a @code{help-echo} text property.  The generated event has this form:"
msgstr "この種類のイベントは、テキストプロパティ@code{help-echo}をもつバッファーテキスト部分上にマウスポインターが移動したときに生成される。生成されるイベントは以下の形式をもつ:"

#. type: example
#: original_texis/commands.texi:2393
#, no-wrap
msgid "(help-echo @var{frame} @var{help} @var{window} @var{object} @var{pos})\n"
msgstr "(help-echo @var{frame} @var{help} @var{window} @var{object} @var{pos})\n"

#. type: table
#: original_texis/commands.texi:2399
msgid "The precise meaning of the event parameters and the way these parameters are used to display the help-echo text are described in @ref{Text help-echo}."
msgstr "イベントパラメーターの正確な意味とヘルプテキストを表示するためにこれらのパラメーターを使用する方法は、@ref{Text help-echo}で説明されている。"

#. type: cindex
#: original_texis/commands.texi:2400
#, no-wrap
msgid "@code{sigusr1} event"
msgstr "@code{sigusr1} event"

#. type: cindex
#: original_texis/commands.texi:2401
#, no-wrap
msgid "@code{sigusr2} event"
msgstr "@code{sigusr2} event"

#. type: cindex
#: original_texis/commands.texi:2402
#, no-wrap
msgid "user signals"
msgstr "user signals"

#. type: item
#: original_texis/commands.texi:2403
#, no-wrap
msgid "sigusr1"
msgstr "sigusr1"

#. type: itemx
#: original_texis/commands.texi:2404
#, no-wrap
msgid "sigusr2"
msgstr "sigusr2"

#. type: table
#: original_texis/commands.texi:2409
msgid "These events are generated when the Emacs process receives the signals @code{SIGUSR1} and @code{SIGUSR2}.  They contain no additional data because signals do not carry additional information.  They can be useful for debugging (@pxref{Error Debugging})."
msgstr "これらのイベントはEmacsプロセスがシグナル@code{SIGUSR1}や@code{SIGUSR2}を受け取ったときに生成される。シグナルは追加情報を運搬しないので追加データは含まれない。これらのシグナルはデバッグに有用(@ref{Error Debugging}を参照)。"

#. type: table
#: original_texis/commands.texi:2415
msgid "To catch a user signal, bind the corresponding event to an interactive command in the @code{special-event-map} (@pxref{Controlling Active Maps}).  The command is called with no arguments, and the specific signal event is available in @code{last-input-event} (@pxref{Event Input Misc}.  For example:"
msgstr "ユーザーシグナルをcatchするためには、@code{special-event-map} (@ref{Controlling Active Maps}を参照)内で対応するイベントにバインドする。そのコマンドは引数なしで呼び出され、@code{last-input-event}内の特定のシグナルイベントが利用できる(@ref{Event Input Misc}を参照)。たとえば:"

#. type: smallexample
#: original_texis/commands.texi:2420
#, no-wrap
msgid ""
"(defun sigusr-handler ()\n"
"  (interactive)\n"
"  (message \"Caught signal %S\" last-input-event))\n"
"\n"
msgstr ""
"(defun sigusr-handler ()\n"
"  (interactive)\n"
"  (message \"Caught signal %S\" last-input-event))\n"
"\n"

#. type: smallexample
#: original_texis/commands.texi:2422
#, no-wrap
msgid "(keymap-set special-event-map \"<sigusr1>\" 'sigusr-handler)\n"
msgstr "(keymap-set special-event-map \"<sigusr1>\" 'sigusr-handler)\n"

#. type: table
#: original_texis/commands.texi:2425
msgid "To test the signal handler, you can make Emacs send a signal to itself:"
msgstr "シグナルハンドラーをテストするために、自身でEmacsにシグナルを送信できる:"

#. type: smallexample
#: original_texis/commands.texi:2428
#, no-wrap
msgid "(signal-process (emacs-pid) 'sigusr1)\n"
msgstr "(signal-process (emacs-pid) 'sigusr1)\n"

#. type: cindex
#: original_texis/commands.texi:2430
#, no-wrap
msgid "@code{language-change} event"
msgstr "@code{language-change} event"

#. type: item
#: original_texis/commands.texi:2431
#, no-wrap
msgid "language-change"
msgstr "language-change"

#. type: table
#: original_texis/commands.texi:2436
msgid "This kind of event is generated on MS-Windows when the input language has changed.  This typically means that the keyboard keys will send to Emacs characters from a different language.  The generated event has this form:"
msgstr "この種類のイベントはMS-Windows上で入力言語が変更されたときに生成される。これは通常はキーボードキーが異なる言語の文字でEmacsに送られることを意味する。生成されるイベントは以下の形式をもつ:"

#. type: smallexample
#: original_texis/commands.texi:2439
#, no-wrap
msgid "(language-change @var{frame} @var{codepage} @var{language-id})\n"
msgstr "(language-change @var{frame} @var{codepage} @var{language-id})\n"

#. type: table
#: original_texis/commands.texi:2451
msgid "Here @var{frame} is the frame which was current when the input language changed; @var{codepage} is the new codepage number; and @var{language-id} is the numerical ID of the new input language.  The coding-system (@pxref{Coding Systems}) that corresponds to @var{codepage} is @code{cp@var{codepage}} or @code{windows-@var{codepage}}.  To convert @var{language-id} to a string (e.g., to use it for various language-dependent features, such as @code{set-language-environment}), use the @code{w32-get-locale-info} function, like this:"
msgstr "ここで@var{frame}は言語が変更されたときカレントだったフレーム、@var{codepage}は新たなコードページ番号(codepage number)、@var{language-id}は新たな入力言語の数値IDである。@var{codepage}に対応するコーディングシステム(@ref{Coding Systems}を参照)は、@code{cp@var{codepage}}か@code{windows-@var{codepage}}。@var{language-id}を文字列に変更する(たとえば@code{set-language-environment}のようなさまざまな言語依存機能にたいしこれを使用する)には、以下のように@code{w32-get-locale-info}関数を使用する:"

#. type: smallexample
#: original_texis/commands.texi:2460
#, no-wrap
msgid ""
";; Get the abbreviated language name, such as \"ENU\" for English\n"
"(w32-get-locale-info language-id)\n"
";; Get the full English name of the language,\n"
";; such as \"English (United States)\"\n"
"(w32-get-locale-info language-id 4097)\n"
";; Get the full localized name of the language\n"
"(w32-get-locale-info language-id t)\n"
msgstr ""
";; 英語にたいする\"ENU\"のような言語の省略形を取得する\n"
"(w32-get-locale-info language-id)\n"
";; \"English (United States)\"のような\n"
";; その言語の完全な英語名を取得する\n"
"(w32-get-locale-info language-id 4097)\n"
";; その言語の完全なローカライズ名を取得する\n"
"(w32-get-locale-info language-id t)\n"

#. type: cindex
#: original_texis/commands.texi:2462
#, no-wrap
msgid "@code{end-session} event"
msgstr "@code{end-session} event"

#. type: item
#: original_texis/commands.texi:2463
#, no-wrap
msgid "end-session"
msgstr "end-session"

#. type: table
#: original_texis/commands.texi:2472
msgid "This event is generated on MS-Windows when the operating system informs Emacs that the user terminated the interactive session, or that the system is shutting down.  The standard definition of this event is to invoke the @code{kill-emacs} command (@pxref{Killing Emacs}) so as to shut down Emacs in an orderly fashion; if there are unsaved changes, this will produce auto-save files (@pxref{Auto-Saving}) that the user can use after restarting the session to restore the unsaved edits."
msgstr "このイベントはMS-Windowsにおいてユーザーがインタラクティブなセッションを終了したとき、またはシステムがシャットダウンすることをオペレーティングシステムがEmacsに知らせる際に生成される。このイベントの標準的な定義では、秩序に則ってEmacsをシャットダウンできるように@code{kill-emacs}コマンドを呼び出す(@ref{Killing Emacs}を参照)。未保存の変更が存在する場合には、ユーザーが後で未保存の変更をリストアするセッションの再起動に使用できるauto-saveファイルを生成する(@ref{Auto-Saving}を参照)。"

#. type: Plain text
#: original_texis/commands.texi:2478
msgid "If one of these events arrives in the middle of a key sequence---that is, after a prefix key---then Emacs reorders the events so that this event comes either before or after the multi-event key sequence, not within it."
msgstr "キーシーケンスの途中、つまりプレフィクスキーの後にこれらのイベントの1つが到着すると、複数イベントキー内ではなくその前か後にそのイベントが到着するようにEmacsはそのイベントを記録する。"

#. type: Plain text
#: original_texis/commands.texi:2485
msgid "Some of these special events, such as @code{delete-frame}, invoke Emacs commands by default; others are not bound.  If you want to arrange for a special event to invoke a command, you can do that via @code{special-event-map}.  The command you bind to a function key in that map can then examine the full event which invoked it in @code{last-input-event}.  @xref{Special Events}."
msgstr "いくつかの@code{delete-frame}のようなスペシャルイベントは、デフォルトではEmacsコマンドを呼び出します(他のイベントはバインドされない)。@code{special-event-map}を通じて、あるスペシャルイベントがコマンドを呼び出すようにすることができます。このマップでファンクションキーにバインドしたコマンドは、@code{last-input-event}内でそれが呼び出された完全なイベントを調べることができます。@ref{Special Events}を参照してください。"

#. type: Plain text
#: original_texis/commands.texi:2491
msgid "If the user presses and releases the left mouse button over the same location, that generates a sequence of events like this:"
msgstr "ユーザーが同じ場所でマウス左ボタンを押して離すと、それは以下のようなイベントシーケンスを生成します:"

#. type: smallexample
#: original_texis/commands.texi:2495
#, no-wrap
msgid ""
"(down-mouse-1 (#<window 18 on NEWS> 2613 (0 . 38) -864320))\n"
"(mouse-1      (#<window 18 on NEWS> 2613 (0 . 38) -864180))\n"
msgstr ""
"(down-mouse-1 (#<window 18 on NEWS> 2613 (0 . 38) -864320))\n"
"(mouse-1      (#<window 18 on NEWS> 2613 (0 . 38) -864180))\n"

#. type: Plain text
#: original_texis/commands.texi:2500
msgid "While holding the control key down, the user might hold down the second mouse button, and drag the mouse from one line to the next.  That produces two events, as shown here:"
msgstr "コントロールキーを押したままユーザーがマウス第2ボタンを押してマウスをある行から次の行へドラッグすると、以下のような2つのイベントが生成されます:"

#. type: smallexample
#: original_texis/commands.texi:2505
#, no-wrap
msgid ""
"(C-down-mouse-2 (#<window 18 on NEWS> 3440 (0 . 27) -731219))\n"
"(C-drag-mouse-2 (#<window 18 on NEWS> 3440 (0 . 27) -731219)\n"
"                (#<window 18 on NEWS> 3510 (0 . 28) -729648))\n"
msgstr ""
"(C-down-mouse-2 (#<window 18 on NEWS> 3440 (0 . 27) -731219))\n"
"(C-drag-mouse-2 (#<window 18 on NEWS> 3440 (0 . 27) -731219)\n"
"                (#<window 18 on NEWS> 3510 (0 . 28) -729648))\n"

#. type: Plain text
#: original_texis/commands.texi:2510
msgid "While holding down the meta and shift keys, the user might press the second mouse button on the window's mode line, and then drag the mouse into another window.  That produces a pair of events like these:"
msgstr "メタキーとシフトキーを押したままユーザーがそのウィンドウのモードライン上でマウス第2ボタンを押して他ウィンドウへマウスをドラッグすると、以下のようなイベントのペアが生成されます:"

#. type: smallexample
#: original_texis/commands.texi:2516
#, no-wrap
msgid ""
"(M-S-down-mouse-2 (#<window 18 on NEWS> mode-line (33 . 31) -457844))\n"
"(M-S-drag-mouse-2 (#<window 18 on NEWS> mode-line (33 . 31) -457844)\n"
"                  (#<window 20 on carlton-sanskrit.tex> 161 (33 . 3)\n"
"                   -453816))\n"
msgstr ""
"(M-S-down-mouse-2 (#<window 18 on NEWS> mode-line (33 . 31) -457844))\n"
"(M-S-drag-mouse-2 (#<window 18 on NEWS> mode-line (33 . 31) -457844)\n"
"                  (#<window 20 on carlton-sanskrit.tex> 161 (33 . 3)\n"
"                   -453816))\n"

#. type: Plain text
#: original_texis/commands.texi:2521
msgid "The frame with input focus might not take up the entire screen, and the user might move the mouse outside the scope of the frame.  Inside the @code{track-mouse} macro, that produces an event like this:"
msgstr "全画面表示されていないフレームに入力フォーカスがあってユーザーがマウスをそのフレームのスコープ外へマウスを移動すると、マクロ@code{track-mouse}内では以下のようなイベントが生成されます:"

#. type: smallexample
#: original_texis/commands.texi:2524
#, no-wrap
msgid "(mouse-movement (#<frame *ielm* 0x102849a30> nil (563 . 205) 532301936))\n"
msgstr "(mouse-movement (#<frame *ielm* 0x102849a30> nil (563 . 205) 532301936))\n"

#. type: cindex
#: original_texis/commands.texi:2528
#, no-wrap
msgid "event type"
msgstr "event type"

#. type: cindex
#: original_texis/commands.texi:2529
#, no-wrap
msgid "classifying events"
msgstr "classifying events"

#. type: Plain text
#: original_texis/commands.texi:2537
msgid "Every event has an @dfn{event type}, which classifies the event for key binding purposes.  For a keyboard event, the event type equals the event value; thus, the event type for a character is the character, and the event type for a function key symbol is the symbol itself.  For events that are lists, the event type is the symbol in the @sc{car} of the list.  Thus, the event type is always a symbol or a character."
msgstr "すべてのイベントは@dfn{イベント型(event type)}をもっています。イベント型はキーバインディング目的でイベントをクラス分けします。キーボードイベントにたいするイベント型はイベント値と等しく、したがって文字のイベント型は文字、ファンクションキーシンボルのイベント型はそのシンボル自身になります。リストであるようなイベントのイベント型は、そのリストの@sc{car}内のシンボルです。したがってイベント型は常にシンボルか文字です。"

#. type: Plain text
#: original_texis/commands.texi:2543
msgid "Two events of the same type are equivalent where key bindings are concerned; thus, they always run the same command.  That does not necessarily mean they do the same things, however, as some commands look at the whole event to decide what to do.  For example, some commands use the location of a mouse event to decide where in the buffer to act."
msgstr "同じ型の2つのイベントはキーバインディングに関する限りは同じものです。したがってそれらは常に同じコマンドを実行します。これらが同じことを行う必要があるという意味ではありませんが、イベント全体を調べてから何を行うか決定するコマンドもいくつかあります。たとえばバッファー内でどこに作用するか決定するためにマウスイベントの場所を使用するコマンドもいくつかあります。"

#. type: Plain text
#: original_texis/commands.texi:2547
msgid "Sometimes broader classifications of events are useful.  For example, you might want to ask whether an event involved the @key{META} key, regardless of which other key or mouse button was used."
msgstr "広範なイベントのクラス分けが役に立つときもあります。たとえば他の修飾キーやマウスボタンが使用されたかとは無関係に、@key{META}キーとともに呼び出されたイベントを尋ねたいと思うかもしれません。"

#. type: Plain text
#: original_texis/commands.texi:2550
msgid "The functions @code{event-modifiers} and @code{event-basic-type} are provided to get such information conveniently."
msgstr "関数@code{event-modifiers}や@code{event-basic-type}は、そのような情報を手軽に取得するために提供されています。"

#. type: defun
#: original_texis/commands.texi:2551
#, no-wrap
msgid "event-modifiers event"
msgstr "event-modifiers event"

#. type: defun
#: original_texis/commands.texi:2558
msgid "This function returns a list of the modifiers that @var{event} has.  The modifiers are symbols; they include @code{shift}, @code{control}, @code{meta}, @code{alt}, @code{hyper} and @code{super}.  In addition, the modifiers list of a mouse event symbol always contains one of @code{click}, @code{drag}, and @code{down}.  For double or triple events, it also contains @code{double} or @code{triple}."
msgstr "この関数は@var{event}がもつ修飾子のリストをリターンする。この修飾子はシンボルであり@code{shift}、@code{control}、@code{meta}、@code{alt}、@code{hyper}、@code{super}が含まれる。さらにマウスイベントシンボルの修飾子リストには常に@code{click}、@code{drag}、@code{down}のいずれか1つが含まれる。ダブルイベントとトリプルイベントには、@code{double}や@code{triple}も含まれる。"

#. type: defun
#: original_texis/commands.texi:2564
msgid "The argument @var{event} may be an entire event object, or just an event type.  If @var{event} is a symbol that has never been used in an event that has been read as input in the current Emacs session, then @code{event-modifiers} can return @code{nil}, even when @var{event} actually has modifiers."
msgstr "引数@var{event}はイベントオブジェクト全体、または単なるイベント型かもしれない。@var{event}がカレントEmacsセッション内で入力として読み取られたイベント内で決して使用されないシンボルなら、実際に@var{event}が変更されたときでも@code{event-modifiers}は@code{nil}をリターンできる。"

#. type: defun
#: original_texis/commands.texi:2566
msgid "Here are some examples:"
msgstr "いくつか例を挙げる:"

#. type: example
#: original_texis/commands.texi:2588
#, no-wrap
msgid ""
"(event-modifiers ?a)\n"
"     @result{} nil\n"
"(event-modifiers ?A)\n"
"     @result{} (shift)\n"
"(event-modifiers ?\\C-a)\n"
"     @result{} (control)\n"
"(event-modifiers ?\\C-%)\n"
"     @result{} (control)\n"
"(event-modifiers ?\\C-\\S-a)\n"
"     @result{} (control shift)\n"
"(event-modifiers 'f5)\n"
"     @result{} nil\n"
"(event-modifiers 's-f5)\n"
"     @result{} (super)\n"
"(event-modifiers 'M-S-f5)\n"
"     @result{} (meta shift)\n"
"(event-modifiers 'mouse-1)\n"
"     @result{} (click)\n"
"(event-modifiers 'down-mouse-1)\n"
"     @result{} (down)\n"
msgstr ""
"(event-modifiers ?a)\n"
"     @result{} nil\n"
"(event-modifiers ?A)\n"
"     @result{} (shift)\n"
"(event-modifiers ?\\C-a)\n"
"     @result{} (control)\n"
"(event-modifiers ?\\C-%)\n"
"     @result{} (control)\n"
"(event-modifiers ?\\C-\\S-a)\n"
"     @result{} (control shift)\n"
"(event-modifiers 'f5)\n"
"     @result{} nil\n"
"(event-modifiers 's-f5)\n"
"     @result{} (super)\n"
"(event-modifiers 'M-S-f5)\n"
"     @result{} (meta shift)\n"
"(event-modifiers 'mouse-1)\n"
"     @result{} (click)\n"
"(event-modifiers 'down-mouse-1)\n"
"     @result{} (down)\n"

#. type: defun
#: original_texis/commands.texi:2596
msgid "The modifiers list for a click event explicitly contains @code{click}, but the event symbol name itself does not contain @samp{click}.  Similarly, the modifiers list for an @acronym{ASCII} control character, such as @samp{C-a}, contains @code{control}, even though reading such an event via @code{read-char} will return the value 1 with the control modifier bit removed."
msgstr "クリックイベントにたいする修飾子リストは明示的に@code{click}を含むが、イベントシンボル名自体には@samp{click}が含まれない。同じように@samp{C-a}のような@acronym{ASCII}コントロール文字にたいする修飾子リストでは、たとえ@samp{C-a}の修飾ビットを取り除いて値1をリターンする@code{read-char}を通じて読み取られたイベントであっても@code{control}が含まれる。"

#. type: defun
#: original_texis/commands.texi:2598
#, no-wrap
msgid "event-basic-type event"
msgstr "event-basic-type event"

#. type: defun
#: original_texis/commands.texi:2602
msgid "This function returns the key or mouse button that @var{event} describes, with all modifiers removed.  The @var{event} argument is as in @code{event-modifiers}.  For example:"
msgstr "この関数は@var{event}を記述するキー、またはマウスボタンをリターンする。@var{event}引数は@code{event-modifiers}の場合と同様。たとえば:"

#. type: example
#: original_texis/commands.texi:2620
#, no-wrap
msgid ""
"(event-basic-type ?a)\n"
"     @result{} 97\n"
"(event-basic-type ?A)\n"
"     @result{} 97\n"
"(event-basic-type ?\\C-a)\n"
"     @result{} 97\n"
"(event-basic-type ?\\C-\\S-a)\n"
"     @result{} 97\n"
"(event-basic-type 'f5)\n"
"     @result{} f5\n"
"(event-basic-type 's-f5)\n"
"     @result{} f5\n"
"(event-basic-type 'M-S-f5)\n"
"     @result{} f5\n"
"(event-basic-type 'down-mouse-1)\n"
"     @result{} mouse-1\n"
msgstr ""
"(event-basic-type ?a)\n"
"     @result{} 97\n"
"(event-basic-type ?A)\n"
"     @result{} 97\n"
"(event-basic-type ?\\C-a)\n"
"     @result{} 97\n"
"(event-basic-type ?\\C-\\S-a)\n"
"     @result{} 97\n"
"(event-basic-type 'f5)\n"
"     @result{} f5\n"
"(event-basic-type 's-f5)\n"
"     @result{} f5\n"
"(event-basic-type 'M-S-f5)\n"
"     @result{} f5\n"
"(event-basic-type 'down-mouse-1)\n"
"     @result{} mouse-1\n"

#. type: defun
#: original_texis/commands.texi:2623
#, no-wrap
msgid "mouse-movement-p object"
msgstr "mouse-movement-p object"

#. type: defun
#: original_texis/commands.texi:2626
msgid "This function returns non-@code{nil} if @var{object} is a mouse movement event.  @xref{Motion Events}."
msgstr "@var{object}がマウス移動イベントなら、この関数は非@code{nil}をリターンする。@ref{Motion Events}を参照のこと。"

#. type: subsection
#: original_texis/commands.texi:2629
#, no-wrap
msgid "Accessing Mouse Events"
msgstr "Accessing Mouse Events"

#. type: cindex
#: original_texis/commands.texi:2630
#, no-wrap
msgid "mouse events, data in"
msgstr "mouse events, data in"

#. type: cindex
#: original_texis/commands.texi:2631
#, no-wrap
msgid "keyboard events, data in"
msgstr "keyboard events, data in"

#. type: Plain text
#: original_texis/commands.texi:2637
msgid "This section describes convenient functions for accessing the data in a mouse button or motion event.  Keyboard event data can be accessed using the same functions, but data elements that aren't applicable to keyboard events are zero or @code{nil}."
msgstr "このセクションではマウスボタンやモーションイベント内のデータアクセスに役立つ関数を説明します。同じ関数を使用してキーボードイベントデータにもアクセスできますが、キーボードイベントに不適切なデータ要素は0か@code{nil}になります。"

#. type: Plain text
#: original_texis/commands.texi:2640
msgid "The following two functions return a mouse position list (@pxref{Click Events}), specifying the position of a mouse event."
msgstr "以下の2つの関数は、マウスイベントの位置を指定するマウス位置リスト(@ref{Click Events}を参照)をリターンします。"

#. type: defun
#: original_texis/commands.texi:2641
#, no-wrap
msgid "event-start event"
msgstr "event-start event"

#. type: defun
#: original_texis/commands.texi:2643
msgid "This returns the starting position of @var{event}."
msgstr "これは@var{event}の開始位置をリターンする。"

#. type: defun
#: original_texis/commands.texi:2647
msgid "If @var{event} is a click or button-down event, this returns the location of the event.  If @var{event} is a drag event, this returns the drag's starting position."
msgstr "@var{event}がクリックイベントかボタンダウンイベントなら、この関数はそのイベントの位置をリターンする。@var{event}がドラッグイベントなら、そのドラッグの開始位置をリターンする。"

#. type: defun
#: original_texis/commands.texi:2649
#, no-wrap
msgid "event-end event"
msgstr "event-end event"

#. type: defun
#: original_texis/commands.texi:2651
msgid "This returns the ending position of @var{event}."
msgstr "これは@var{event}の終了位置をリターンする。"

#. type: defun
#: original_texis/commands.texi:2656
msgid "If @var{event} is a drag event, this returns the position where the user released the mouse button.  If @var{event} is a click or button-down event, the value is actually the starting position, which is the only position such events have."
msgstr "@var{event}がドラッグイベントなら、この関数はユーザーがマウスボタンをリリースした位置をリターンする。@var{event}がクリックイベントかボタンダウンイベントなら、値はそのイベント固有の開始位置となる。"

#. type: defun
#: original_texis/commands.texi:2658
#, no-wrap
msgid "posnp object"
msgstr "posnp object"

#. type: defun
#: original_texis/commands.texi:2662
msgid "This function returns non-@code{nil} if @var{object} is a mouse position list, in the format documented in @ref{Click Events}); and @code{nil} otherwise."
msgstr "この関数は@var{object}が(@ref{Click Events}に記述されたフォーマットの)マウス位置リストなら非@code{nil}、それ以外では@code{nil}をリターンする。"

#. type: cindex
#: original_texis/commands.texi:2664
#, no-wrap
msgid "mouse position list, accessing"
msgstr "mouse position list, accessing"

#. type: Plain text
#: original_texis/commands.texi:2667
msgid "These functions take a mouse position list as argument, and return various parts of it:"
msgstr "以下の関数は引数にマウス位置リストを受け取り、そのリストのさまざまな部分をリターンします:"

#. type: defun
#: original_texis/commands.texi:2668
#, no-wrap
msgid "posn-window position"
msgstr "posn-window position"

#. type: defun
#: original_texis/commands.texi:2672
msgid "Return the window that @var{position} is in.  If @var{position} represents a location outside the frame where the event was initiated, return that frame instead."
msgstr "@var{position}があったウィンドウをリターンする。@var{position}が最初にイベントがあったフレームの外部の位置を表す場合には、かわりにそのフレームをリターンする。"

#. type: defun
#: original_texis/commands.texi:2674
#, no-wrap
msgid "posn-area position"
msgstr "posn-area position"

#. type: defun
#: original_texis/commands.texi:2678
msgid "Return the window area recorded in @var{position}.  It returns @code{nil} when the event occurred in the text area of the window; otherwise, it is a symbol identifying the area in which the event occurred."
msgstr "@var{position}内に記録されたウィンドウエリアをリターンする。そのウィンドウのテキストエリアでイベントが発生したときは@code{nil}、それ以外ではイベントがどこで発生したかを識別するシンボルをリターンする。"

#. type: defun
#: original_texis/commands.texi:2680
#, no-wrap
msgid "posn-point position"
msgstr "posn-point position"

#. type: defun
#: original_texis/commands.texi:2685
msgid "Return the buffer position in @var{position}.  When the event occurred in the text area of the window, in a marginal area, or on a fringe, this is an integer specifying a buffer position.  Otherwise, the value is undefined."
msgstr "@var{position}内のバッファー位置をリターンする。ウィンドウのテキストエリア、マージンエリア、フリンジでイベントが発生したときはバッファー位置を識別する整数値、それ以外では値は未定義。"

#. type: defun
#: original_texis/commands.texi:2687
#, no-wrap
msgid "posn-x-y position"
msgstr "posn-x-y position"

#. type: defun
#: original_texis/commands.texi:2691
msgid "Return the pixel-based x and y coordinates in @var{position}, as a cons cell @w{@code{(@var{x} . @var{y})}}.  These coordinates are relative to the window given by @code{posn-window}."
msgstr "@var{position}内のピクセル単位のxy座標を、コンスセル@w{@code{(@var{x} . @var{y})}}でリターンする。これらは@code{posn-window}により与えられるウィンドウにたいする相対座標である。"

#. type: defun
#: original_texis/commands.texi:2694
msgid "This example shows how to convert the window-relative coordinates in the text area of a window into frame-relative coordinates:"
msgstr "以下はあるウィンドウのテキストエリア内のウィンドウ相対座標をフレーム相対座標に変換する方法を示す例:"

#. type: example
#: original_texis/commands.texi:2704
#, no-wrap
msgid ""
"(defun frame-relative-coordinates (position)\n"
"  \"Return frame-relative coordinates from POSITION.\n"
"POSITION is assumed to lie in a window text area.\"\n"
"  (let* ((x-y (posn-x-y position))\n"
"         (window (posn-window position))\n"
"         (edges (window-inside-pixel-edges window)))\n"
"    (cons (+ (car x-y) (car edges))\n"
"          (+ (cdr x-y) (cadr edges)))))\n"
msgstr ""
"(defun frame-relative-coordinates (position)\n"
"  \"POSITIONのフレーム相対座標をリターンする。\n"
"POSITIONはウィンドウのテキストエリアにあるものとする。\"\n"
"  (let* ((x-y (posn-x-y position))\n"
"         (window (posn-window position))\n"
"         (edges (window-inside-pixel-edges window)))\n"
"    (cons (+ (car x-y) (car edges))\n"
"          (+ (cdr x-y) (cadr edges)))))\n"

#. type: defun
#: original_texis/commands.texi:2707
#, no-wrap
msgid "posn-col-row position &optional use-window"
msgstr "posn-col-row position &optional use-window"

#. type: defun
#: original_texis/commands.texi:2720
msgid "This function returns a cons cell @w{@code{(@var{col} .  @var{row})}}, containing the estimated column and row corresponding to buffer position described by @var{position}.  The return value is given in units of the frame's default character width and default line height (including spacing), as computed from the @var{x} and @var{y} values corresponding to @var{position}.  (So, if the actual characters have non-default sizes, the actual row and column may differ from these computed values.)  If the optional @var{window} argument is non-@code{nil}, use the default character width in the window indicated by @var{position} instead of the frame.  (This makes a difference if that window is showing a buffer with a non-default zooming level, for instance.)"
msgstr "この関数は@var{position}で記述されるのバッファー位置で推定される列と行を含むコンスセル@w{@code{(@var{col} .  @var{row})}}をリターンする。リターン値は@var{position}にたいする@var{x}と@var{y}の値より計算され、そのフレームのデフォルト文字幅とデフォルト行高(行間スペースを含む)の単位で与えられる(そのため実際の文字サイズが非デフォルト値の場合には、実際の行と列は計算された値とは異なるかもしれない)オプションの。@var{window}引数が非@code{nil}の場合には、フレームではなく@var{position}で示されるウィンドウのデフォルト文字幅を使用する(これはたとえば非デフォルトのズームレベルでバッファーを表示しているウィンドウで違いが生じる)。"

#. type: defun
#: original_texis/commands.texi:2725
msgid "Note that @var{row} is counted from the top of the text area.  If the window given by @var{position} possesses a header line (@pxref{Header Lines}) or a tab line, they are @emph{not} included in the @var{row} count."
msgstr "@var{row}はそのテキストエリアの上端から数えられることに注意。@var{position}により与えられるウィンドウがヘッダーライン(@ref{Header Lines}を参照)やタブラインをもつなら、それらは@var{row}の数に@emph{含まれない}。"

#. type: defun
#: original_texis/commands.texi:2727
#, no-wrap
msgid "posn-actual-col-row position"
msgstr "posn-actual-col-row position"

#. type: defun
#: original_texis/commands.texi:2734
msgid "Return the actual row and column in @var{position}, as a cons cell @w{@code{(@var{col} . @var{row})}}.  The values are the actual row and column numbers in the window given by @var{position}.  @xref{Click Events}, for details.  The function returns @code{nil} if @var{position} does not include actual position values; in that case @code{posn-col-row} can be used to get approximate values."
msgstr "@var{position}内の実際の行と列をコンスセル@w{@code{(@var{col} . @var{row})}}でリターンする。値は@var{position}与えられるウィンドウの実際の行と列。@ref{Click Events}を参照のこと。@var{position}が実際のポジション値を含まなければ、この関数は@code{nil}をリターンする。この場合にはおおよその値を取得するために@code{posn-col-row}を使用できる。"

#. type: defun
#: original_texis/commands.texi:2739
msgid "Note that this function doesn't account for the visual width of characters on display, like the number of visual columns taken by a tab character or an image.  If you need the coordinates in canonical character units, use @code{posn-col-row} instead."
msgstr "この関数はタブ文字やイメージによるビジュアル列数のように、ディスプレイ上の文字のビジュアル幅を意味しない。標準的な文字単位の座標が必要なら、かわりに@code{posn-col-row}を使用すること。"

#. type: defun
#: original_texis/commands.texi:2741
#, no-wrap
msgid "posn-string position"
msgstr "posn-string position"

#. type: defun
#: original_texis/commands.texi:2745
msgid "Return the string object described by @var{position}, either @code{nil} (which means @var{position} describes buffer text), or a cons cell @w{@code{(@var{string} . @var{string-pos})}}."
msgstr "@var{position}に記述された文字列オブジェクトをリターンする。@code{nil} (@var{position}がバッファーテキストを記述することを意味する)、またはコンスセル@w{@code{(@var{string} . @var{string-pos})}}のいずれか。"

#. type: defun
#: original_texis/commands.texi:2747
#, no-wrap
msgid "posn-image position"
msgstr "posn-image position"

#. type: defun
#: original_texis/commands.texi:2751
msgid "Return the image object in @var{position}, either @code{nil} (if there's no image at @var{position}), or an image spec @w{@code{(image @dots{})}}."
msgstr "@var{position}にあるイメージオブジェクトをリターンする。@code{nil} (@var{position}にイメージがない)、またはイメージspec @w{@code{(image @dots{})}}のいずれか。"

#. type: defun
#: original_texis/commands.texi:2753
#, no-wrap
msgid "posn-object position"
msgstr "posn-object position"

#. type: defun
#: original_texis/commands.texi:2758
msgid "Return the image or string object described by @var{position}, either @code{nil} (which means @var{position} describes buffer text), an image @w{@code{(image @dots{})}}, or a cons cell @w{@code{(@var{string} . @var{string-pos})}}."
msgstr "@var{position}により記述されるイメージオブジェクトか文字列オブジェクトをリターンする。@code{nil} (@var{position}がバッファーテキストを記述することを意味する)、イメージ@w{@code{(image @dots{})}}、またはコンスセル@w{@code{(@var{string} . @var{string-pos})}}のいずれか。"

#. type: defun
#: original_texis/commands.texi:2760
#, no-wrap
msgid "posn-object-x-y position"
msgstr "posn-object-x-y position"

#. type: defun
#: original_texis/commands.texi:2766
msgid "Return the pixel-based x and y coordinates relative to the upper left corner of the object described by @var{position}, as a cons cell @w{@code{(@var{dx} . @var{dy})}}.  If the @var{position} describes buffer text, return the relative coordinates of the buffer-text character closest to that position."
msgstr "@var{position}で記述されるオブジェクトの左上隅からのピクセル単位のxy座標を、コンスセル@w{@code{(@var{dx} . @var{dy})}}でリターンする。@var{position}がバッファーテキストを記述する場合には、その位置にもっとも近いバッファーテキストの相対位置をリターンする。"

#. type: defun
#: original_texis/commands.texi:2768
#, no-wrap
msgid "posn-object-width-height position"
msgstr "posn-object-width-height position"

#. type: defun
#: original_texis/commands.texi:2773
msgid "Return the pixel width and height of the object described by @var{position}, as a cons cell @code{(@var{width} . @var{height})}.  If the @var{position} describes a buffer position, return the size of the character at that position."
msgstr "@var{position}で記述されるオブジェクトのピクセル幅とピクセル高さを、コンスセル@code{(@var{width} . @var{height})}でリターンする。@var{position}がバッファー位置を記述する場合には、その位置の文字のサイズをリターンする。"

#. type: cindex
#: original_texis/commands.texi:2775
#, no-wrap
msgid "timestamp of a mouse event"
msgstr "timestamp of a mouse event"

#. type: defun
#: original_texis/commands.texi:2776
#, no-wrap
msgid "posn-timestamp position"
msgstr "posn-timestamp position"

#. type: defun
#: original_texis/commands.texi:2782
msgid "Return the timestamp in @var{position}.  This is the time at which the event occurred, in milliseconds.  Such a timestamp is reported relative to an arbitrary starting time that varies according to the window system in use.  On the X Window System, for example, it is the number of milliseconds since the X server was started."
msgstr "@var{position}のタイムスタンプをリターンする。これはミリ秒で表したイベント発生時刻である。このようなタイムスタンプは使用しているウィンドウシステムに応じてさまざまに異なる任意の開始時刻からの相対時刻として報告される。たとえばXウィンドウシステムでは、そのXサーバー開始から経過したミリ秒数となる。"

#. type: Plain text
#: original_texis/commands.texi:2787
msgid "These functions compute a position list given particular buffer position or screen position.  You can access the data in this position list with the functions described above."
msgstr "以下の関数は与えられた特定のバッファー、またはスクリーン位置によって位置リストを計算します。上述の関数でこの位置リスト内のデータにアクセスできます。"

#. type: defun
#: original_texis/commands.texi:2788
#, no-wrap
msgid "posn-at-point &optional pos window"
msgstr "posn-at-point &optional pos window"

#. type: defun
#: original_texis/commands.texi:2792
msgid "This function returns a position list for position @var{pos} in @var{window}.  @var{pos} defaults to point in @var{window}; @var{window} defaults to the selected window."
msgstr "この関数は@var{window}内の位置@var{pos}にたいする位置リストをリターンする。@var{pos}のデフォルトは@var{window}内のポイント、@var{window}のデフォルトは選択されたウィンドウ。"

#. type: defun
#: original_texis/commands.texi:2795
msgid "@code{posn-at-point} returns @code{nil} if @var{pos} is not visible in @var{window}."
msgstr "@var{window}内で@var{pos}が不可視なら、@code{posn-at-point}は@code{nil}をリターンする。"

#. type: defun
#: original_texis/commands.texi:2797
#, no-wrap
msgid "posn-at-x-y x y &optional frame-or-window whole"
msgstr "posn-at-x-y x y &optional frame-or-window whole"

#. type: defun
#: original_texis/commands.texi:2805
msgid "This function returns position information corresponding to pixel coordinates @var{x} and @var{y} in a specified frame or window, @var{frame-or-window}, which defaults to the selected window.  The coordinates @var{x} and @var{y} are relative to the text area of the selected window.  If @var{whole} is non-@code{nil}, the @var{x} coordinate is relative to the entire window area including scroll bars, margins and fringes."
msgstr "この関数は指定されたフレームかウィンドウ@var{frame-or-window}(デフォルトは選択されたウィンドウ)内のピクセル座標@var{x}と@var{y}に対応する位置情報をリターンする。@var{x}と@var{y}は、選択されたウィンドウのテキストエリアにたいする相対座標である。@var{whole}が非@code{nil}なら、@var{x}座標はスクロールバー、マージン、フリンジを含むウィンドウエリア全体にたいする相対座標。"

#. type: subsection
#: original_texis/commands.texi:2808
#, no-wrap
msgid "Accessing Scroll Bar Events"
msgstr "Accessing Scroll Bar Events"

#. type: cindex
#: original_texis/commands.texi:2809
#, no-wrap
msgid "scroll bar events, data in"
msgstr "scroll bar events, data in"

#. type: Plain text
#: original_texis/commands.texi:2812
msgid "These functions are useful for decoding scroll bar events."
msgstr "以下の関数はスクロールバーイベントの解析に役立ちます。"

#. type: defun
#: original_texis/commands.texi:2813
#, no-wrap
msgid "scroll-bar-event-ratio event"
msgstr "scroll-bar-event-ratio event"

#. type: defun
#: original_texis/commands.texi:2818
msgid "This function returns the fractional vertical position of a scroll bar event within the scroll bar.  The value is a cons cell @code{(@var{portion} . @var{whole})} containing two integers whose ratio is the fractional position."
msgstr "この関数はスクロールバーで発生したスクロールバーイベントの位置の垂直位置の割り合いをリターンする。値は位置の割り合いを表す2つの整数を含むコンスセル@code{(@var{portion} . @var{whole})}。"

#. type: defun
#: original_texis/commands.texi:2820
#, no-wrap
msgid "scroll-bar-scale ratio total"
msgstr "scroll-bar-scale ratio total"

#. type: defun
#: original_texis/commands.texi:2825
msgid "This function multiplies (in effect) @var{ratio} by @var{total}, rounding the result to an integer.  The argument @var{ratio} is not a number, but rather a pair @code{(@var{num} . @var{denom})}---typically a value returned by @code{scroll-bar-event-ratio}."
msgstr "この関数は、(実質的には)@var{ratio}に@var{total}を乗じて、結果を整数に丸める。引数@var{ratio}は数字ではなく、@code{scroll-bar-event-ratio}によってリターンされる典型的な値ペア@code{(@var{num} . @var{denom})}である。"

#. type: defun
#: original_texis/commands.texi:2828
msgid "This function is handy for scaling a position on a scroll bar into a buffer position.  Here's how to do that:"
msgstr "この関数はスクロールバー位置をバッファー位置にスケーリングするのに有用。以下のように行う:"

#. type: example
#: original_texis/commands.texi:2834
#, no-wrap
msgid ""
"(+ (point-min)\n"
"   (scroll-bar-scale\n"
"      (posn-x-y (event-start event))\n"
"      (- (point-max) (point-min))))\n"
msgstr ""
"(+ (point-min)\n"
"   (scroll-bar-scale\n"
"      (posn-x-y (event-start event))\n"
"      (- (point-max) (point-min))))\n"

#. type: defun
#: original_texis/commands.texi:2838
msgid "Recall that scroll bar events have two integers forming a ratio, in place of a pair of x and y coordinates."
msgstr "スクロールバーイベントは、xy座標ペアのかわりに割り合いを構成する2つの整数をもつことを思い出してほしい。"

#. type: subsection
#: original_texis/commands.texi:2841
#, no-wrap
msgid "Putting Keyboard Events in Strings"
msgstr "Putting Keyboard Events in Strings"

#. type: cindex
#: original_texis/commands.texi:2842
#, no-wrap
msgid "keyboard events in strings"
msgstr "keyboard events in strings"

#. type: cindex
#: original_texis/commands.texi:2843
#, no-wrap
msgid "strings with keyboard events"
msgstr "strings with keyboard events"

#. type: Plain text
#: original_texis/commands.texi:2852
msgid "In most of the places where strings are used, we conceptualize the string as containing text characters---the same kind of characters found in buffers or files.  Occasionally Lisp programs use strings that conceptually contain keyboard characters; for example, they may be key sequences or keyboard macro definitions.  However, storing keyboard characters in a string is a complex matter, for reasons of historical compatibility, and it is not always possible."
msgstr "文字列が使用される場所のほとんどにおいて、わたしたちはテキスト文字を含むもの、つまりバッファーやファイル内で見出すのと同種のものとして文字列を概念化します。Lispプログラムはときおりキーボード文字、たとえばキーシーケンスやキーボードマクロ定義かもしれないキーボード文字を概念的に含んだ文字列を使用します。しかし文字列内へのキーボード文字の格納は、歴史的な互換性の理由から複雑な問題であり、常に可能なわけではありません。"

#. type: Plain text
#: original_texis/commands.texi:2857
msgid "We recommend that new programs avoid dealing with these complexities by not storing keyboard events in strings containing control characters or the like, but instead store them in the common Emacs format as understood by @code{key-valid-p}."
msgstr "新たに記述するプログラムでは文字列内にコントロール文字類を含むキーボードイベントを格納せずに、@code{key-valid-p}が理解できるEmacsの一般形式で格納することを推奨する。"

#. type: Plain text
#: original_texis/commands.texi:2862
msgid "If you read a key sequence with @code{read-key-sequence-vector} (or @code{read-key-sequence}), or access a key sequence with @code{this-command-keys-vector} (or @code{this-command-keys}), you can transform this to the recommended format by using @code{key-description}."
msgstr "@code{read-key-sequence-vector}(あるいは@code{read-key-sequence})でキーシーケンスを読み取ったり、@code{this-command-keys-vector}(あるいは@code{this-command-keys})でキーシーケンスにアクセスする場合には、@code{key-description}を使用することでキーシーケンスを推奨フォーマットに変換することができます。"

#. type: Plain text
#: original_texis/commands.texi:2867
msgid "The complexities stem from the modifier bits that keyboard input characters can include.  Aside from the Meta modifier, none of these modifier bits can be included in a string, and the Meta modifier is allowed only in special cases."
msgstr "複雑さはキーボード入力に含まれるかもしれない修飾ビットに起因します。メタ修飾以外の修飾ビットは文字列に含めることができず、メタ文字も特別な場合だけ許容されます。"

#. type: Plain text
#: original_texis/commands.texi:2875
msgid "The earliest GNU Emacs versions represented meta characters as codes in the range of 128 to 255.  At that time, the basic character codes ranged from 0 to 127, so all keyboard character codes did fit in a string.  Many Lisp programs used @samp{\\M-} in string constants to stand for meta characters, especially in arguments to @code{define-key} and similar functions, and key sequences and sequences of events were always represented as strings."
msgstr "GNU Emacsの初期のバージョンでは、メタ文字を128から255のコードで表していました。その頃は基本的な文字コードの範囲は0から127だったので、すべてのキーボード文字を文字列内に適合させることができました。Lispプログラムの多くは、特に@code{define-key}やその種の関数の引数として文字列定数内にメタ文字を意味する@samp{\\M-}を使用していて、キーシーケンスとイベントシーケンスは常に文字列として表現されていました。"

#. type: Plain text
#: original_texis/commands.texi:2880
msgid "When we added support for larger basic character codes beyond 127, and additional modifier bits, we had to change the representation of meta characters.  Now the flag that represents the Meta modifier in a character is"
msgstr "127超のより大きい基本文字コードと追加の修飾ビットにたいするサポートを加えたとき、わたしたちはメタ文字の表現を変更する必要がありました。現在では文字のメタ修飾を表すフラグは"

#. type: Plain text
#: original_texis/commands.texi:2887
msgid "and such numbers cannot be included in a string."
msgstr "であり、そのような値は文字列内に含めることができません。"

#. type: Plain text
#: original_texis/commands.texi:2892
msgid "To support programs with @samp{\\M-} in string constants, there are special rules for including certain meta characters in a string.  Here are the rules for interpreting a string as a sequence of input characters:"
msgstr "プログラムで文字列定数内の@samp{\\M-}をサポートするために、文字列内に特定のメタ文字を含めるための特別なルールがあります。以下は入力文字シーケンスとして文字列を解釈するためのルールです:"

#. type: itemize
#: original_texis/commands.texi:2897
msgid "If the keyboard character value is in the range of 0 to 127, it can go in the string unchanged."
msgstr "キーボード文字の値の範囲が0から127なら、文字列を変更せずに含めることができる。"

#. type: itemize
#: original_texis/commands.texi:2900
msgid "The meta variants of those characters, with codes in the range of"
msgstr "これらの"

#. type: itemize
#: original_texis/commands.texi:2907
msgid "to"
msgstr "から"

#. type: tex
#: original_texis/commands.texi:2909
#, no-wrap
msgid "@math{2^{27} + 127},\n"
msgstr "@math{2^{27} + 127},\n"

#. type: ifnottex
#: original_texis/commands.texi:2912
msgid "2**27+127,"
msgstr "2**27+127,"

#. type: itemize
#: original_texis/commands.texi:2915
msgid "can also go in the string, but you must change their numeric values.  You must set the"
msgstr "までの文字のコード範囲にあるメタ修飾された変種も文字列に含めることができるが、それらの数値を変更しなければならない。値が128から255の範囲となるように、ビット"

#. type: tex
#: original_texis/commands.texi:2917
#, no-wrap
msgid "@math{2^{7}}\n"
msgstr "@math{2^{7}}\n"

#. type: ifnottex
#: original_texis/commands.texi:2920
msgid "2**7"
msgstr "2**7"

#. type: itemize
#: original_texis/commands.texi:2922
msgid "bit instead of the"
msgstr "のかわりにビット"

#. type: itemize
#: original_texis/commands.texi:2930
msgid "bit, resulting in a value between 128 and 255.  Only a unibyte string can include these codes."
msgstr "をセットしなければならない。ユニバイト文字列だけがこれらの文字を含むことができる。"

#. type: itemize
#: original_texis/commands.texi:2933
msgid "Non-@acronym{ASCII} characters above 256 can be included in a multibyte string."
msgstr "265を超える非@acronym{ASCII}文字はマルチバイト文字に含めることができる。"

#. type: itemize
#: original_texis/commands.texi:2937
msgid "Other keyboard character events cannot fit in a string.  This includes keyboard events in the range of 128 to 255."
msgstr "その他のキーボード文字イベントは文字列に適合させられない。これには128から255の範囲のキーボードイベントが含まれる。"

#. type: Plain text
#: original_texis/commands.texi:2942
msgid "Functions such as @code{read-key-sequence} that construct strings of keyboard input characters follow these rules: they construct vectors instead of strings, when the events won't fit in a string."
msgstr "キーボード入力文字の文字列定数を構築する@code{read-key-sequence}のような関数は、イベントが文字列内に適合しないときは文字列のかわりにベクターを構築するというルールにしたがいます。"

#. type: Plain text
#: original_texis/commands.texi:2948
msgid "When you use the read syntax @samp{\\M-} in a string, it produces a code in the range of 128 to 255---the same code that you get if you modify the corresponding keyboard event to put it in the string.  Thus, meta events in strings work consistently regardless of how they get into the strings."
msgstr "文字列内で入力構文@samp{\\M-}を使用すると、それは128から255の範囲のコード、つまり対応するキーボードイベントを文字列内に配すために変更するとき取得されるのと同じコードが生成されます。したがって文字列内のメタイベントは、それが文字列内にどのように配置されたかと無関係に一貫して機能します。"

#. type: Plain text
#: original_texis/commands.texi:2951
msgid "However, most programs would do well to avoid these issues by following the recommendations at the beginning of this section."
msgstr "しかしほとんどのプログラムはこのセクションの冒頭の推奨にしたがって、これらの問題を避けたほうがよいでしょう。"

#. type: cindex
#: original_texis/commands.texi:2954
#, no-wrap
msgid "read input"
msgstr "read input"

#. type: cindex
#: original_texis/commands.texi:2955
#, no-wrap
msgid "keyboard input"
msgstr "keyboard input"

#. type: Plain text
#: original_texis/commands.texi:2964
msgid "The editor command loop reads key sequences using the function @code{read-key-sequence}, which uses @code{read-event}.  These and other functions for event input are also available for use in Lisp programs.  See also @code{momentary-string-display} in @ref{Temporary Displays}, and @code{sit-for} in @ref{Waiting}.  @xref{Terminal Input}, for functions and variables for controlling terminal input modes and debugging terminal input."
msgstr "エディターコマンドループはキーシーケンスの読み取りに関数@code{read-key-sequence}を使用して、この関数は@code{read-event}を使用します。イベント入力にたいしてこれらの関数、およびその他の関数がLisp関数から利用できます。@ref{Temporary Displays}の@code{momentary-string-display}、および@ref{Waiting}の@code{sit-for}も参照してください。端末の入力モードの制御、および端末入力のデバッグに関する関数と変数については、@ref{Terminal Input}を参照してください。"

#. type: Plain text
#: original_texis/commands.texi:2966
msgid "For higher-level input facilities, see @ref{Minibuffers}."
msgstr "高レベル入力機能については@ref{Minibuffers}を参照してください。"

#. type: subsection
#: original_texis/commands.texi:2974 original_texis/commands.texi:2976
#: original_texis/commands.texi:2977
#, no-wrap
msgid "Key Sequence Input"
msgstr "Key Sequence Input"

#. type: menuentry
#: original_texis/commands.texi:2974
msgid "How to read one key sequence."
msgstr "キーシーケンスを読み取る方法。"

#. type: subsection
#: original_texis/commands.texi:2974 original_texis/commands.texi:3123
#: original_texis/commands.texi:3124
#, no-wrap
msgid "Reading One Event"
msgstr "Reading One Event"

#. type: menuentry
#: original_texis/commands.texi:2974
msgid "How to read just one event."
msgstr "イベントを1つだけ読み取る方法。"

#. type: node
#: original_texis/commands.texi:2974 original_texis/commands.texi:3341
#, no-wrap
msgid "Event Mod"
msgstr "Event Mod"

#. type: menuentry
#: original_texis/commands.texi:2974
msgid "How Emacs modifies events as they are read."
msgstr "Emacsが読み取られたイベントを変更する方法。"

#. type: subsection
#: original_texis/commands.texi:2974 original_texis/commands.texi:3428
#: original_texis/commands.texi:3429
#, no-wrap
msgid "Invoking the Input Method"
msgstr "Invoking the Input Method"

#. type: menuentry
#: original_texis/commands.texi:2974
msgid "How reading an event uses the input method."
msgstr "入力メソッドを使用するイベントを読み取る方法。"

#. type: subsection
#: original_texis/commands.texi:2974 original_texis/commands.texi:3470
#: original_texis/commands.texi:3471
#, no-wrap
msgid "Quoted Character Input"
msgstr "Quoted Character Input"

#. type: menuentry
#: original_texis/commands.texi:2974
msgid "Asking the user to specify a character."
msgstr "文字の指定をユーザーに問い合わせる。"

#. type: node
#: original_texis/commands.texi:2974 original_texis/commands.texi:3515
#, no-wrap
msgid "Event Input Misc"
msgstr "Event Input Misc"

#. type: menuentry
#: original_texis/commands.texi:2974
msgid "How to reread or throw away input events."
msgstr "入力イベントの最読み取りや破棄の方法。"

#. type: cindex
#: original_texis/commands.texi:2978
#, no-wrap
msgid "key sequence input"
msgstr "key sequence input"

#. type: Plain text
#: original_texis/commands.texi:2983
msgid "The command loop reads input a key sequence at a time, by calling @code{read-key-sequence}.  Lisp programs can also call this function; for example, @code{describe-key} uses it to read the key to describe."
msgstr "コマンドループは@code{read-key-sequence}を呼び出すことによって、キーシーケンスの入力を一度に読み取ります。Lisp関数もこの関数を呼び出すことができます。たとえば@code{describe-key}はキーを記述するためにこの関数を使用します。"

#. type: defun
#: original_texis/commands.texi:2984
#, no-wrap
msgid "read-key-sequence prompt &optional continue-echo dont-downcase-last switch-frame-ok command-loop"
msgstr "read-key-sequence prompt &optional continue-echo dont-downcase-last switch-frame-ok command-loop"

#. type: defun
#: original_texis/commands.texi:2991
msgid "This function reads a key sequence and returns it as a string or vector.  It keeps reading events until it has accumulated a complete key sequence; that is, enough to specify a non-prefix command using the currently active keymaps.  (Remember that a key sequence that starts with a mouse event is read using the keymaps of the buffer in the window that the mouse was in, not the current buffer.)"
msgstr "この関数はキーシーケンスを読み取って、それを文字列かベクターでリターンする。この関数は完全なキーシーケンスに蓄積されるまで、つまりカレントでアクティブなキーマップを使用してプレフィクスなしでコマンドを指定するのに十分なキーシーケンスとなるまでイベントの読み取りを継続する(マウスイベントで始まるキーシーケンスは、カレントバッファーではなくマウスのあったウィンドウ内のバッファーのキーマップを使用して読み取られることを思い出してほしい)。"

#. type: defun
#: original_texis/commands.texi:2997
msgid "If the events are all characters and all can fit in a string, then @code{read-key-sequence} returns a string (@pxref{Strings of Events}).  Otherwise, it returns a vector, since a vector can hold all kinds of events---characters, symbols, and lists.  The elements of the string or vector are the events in the key sequence."
msgstr "イベントがすべて文字で、それらがすべて文字列に適合すれば、@code{read-key-sequence}は文字列をリターンする(@ref{Strings of Events}を参照)。それ以外なら文字、シンボル、リストなどすべての種類のイベントを保持できるベクターをリターンする。文字列やベクターの要素は、キーシーケンス内のイベント。"

#. type: defun
#: original_texis/commands.texi:3000
msgid "Reading a key sequence includes translating the events in various ways.  @xref{Translation Keymaps}."
msgstr "キーシーケンスの読み取りには、そのイベントを変換するさまざまな方法が含まれる。@ref{Translation Keymaps}を参照のこと。"

#. type: defun
#: original_texis/commands.texi:3005
msgid "The argument @var{prompt} is either a string to be displayed in the echo area as a prompt, or @code{nil}, meaning not to display a prompt.  The argument @var{continue-echo}, if non-@code{nil}, means to echo this key as a continuation of the previous key."
msgstr "引数@var{prompt}はプロンプトとしてエコーエリアに表示される文字列、プロンプトを表示しない場合は@code{nil}。引数@var{continue-echo}が非@code{nil}なら、それは前のキーの継続としてそのキーをエコーすることを意味する。"

#. type: defun
#: original_texis/commands.texi:3011
msgid "Normally any upper case event is converted to lower case if the original event is undefined and the lower case equivalent is defined.  The argument @var{dont-downcase-last}, if non-@code{nil}, means do not convert the last event to lower case.  This is appropriate for reading a key sequence to be defined."
msgstr "元となる大文字のイベントが未定義で、それと等価な小文字イベントが定義されていれば、通常は大文字のイベントが小文字のイベントに変換される。引数@var{dont-downcase-last}が非@code{nil}なら、それは最後のイベントを小文字に変換しないことを意味する。これはキーシーケンスを定義するときに適している。"

#. type: defun
#: original_texis/commands.texi:3018
msgid "The argument @var{switch-frame-ok}, if non-@code{nil}, means that this function should process a @code{switch-frame} event if the user switches frames before typing anything.  If the user switches frames in the middle of a key sequence, or at the start of the sequence but @var{switch-frame-ok} is @code{nil}, then the event will be put off until after the current key sequence."
msgstr "引数@var{switch-frame-ok}が非@code{nil}なら、たとえ何かをタイプする前にユーザーがフレームを切り替えたとしても、この関数が@code{switch-frame}を処理すべきではないことを意味する。キーシーケンスの途中でユーザーがフレームを切り替えた場合、またはシーケンスの最初だが@var{switch-frame-ok}が@code{nil}のときにフレームを切り替えた場合、そのイベントはカレントキーシーケンスの後に延期される。"

#. type: defun
#: original_texis/commands.texi:3023
msgid "The argument @var{command-loop}, if non-@code{nil}, means that this key sequence is being read by something that will read commands one after another.  It should be @code{nil} if the caller will read just one key sequence."
msgstr "引数@var{command-loop}が非@code{nil}なら、そのキーシーケンスがコマンドを逐次読み取る何かによって読み取られることを意味する。呼び出し側が1つのキーシーケンスだけを読み取る場合には、@code{nil}を指定すること。"

#. type: defun
#: original_texis/commands.texi:3026
msgid "In the following example, Emacs displays the prompt @samp{?} in the echo area, and then the user types @kbd{C-x C-f}."
msgstr "以下の例ではEmacsはエコーエリアにプロンプト@samp{?}を表示して、その後ユーザーが@kbd{C-x C-f}をタイプする。"

#. type: example
#: original_texis/commands.texi:3029
#, no-wrap
msgid ""
"(read-key-sequence \"?\")\n"
"\n"
msgstr ""
"(read-key-sequence \"?\")\n"
"\n"

#. type: group
#: original_texis/commands.texi:3034
#, no-wrap
msgid ""
"---------- Echo Area ----------\n"
"?@kbd{C-x C-f}\n"
"---------- Echo Area ----------\n"
"\n"
msgstr ""
"---------- Echo Area ----------\n"
"?@kbd{C-x C-f}\n"
"---------- Echo Area ----------\n"
"\n"

#. type: group
#: original_texis/commands.texi:3036
#, no-wrap
msgid "     @result{} \"^X^F\"\n"
msgstr "     @result{} \"^X^F\"\n"

#. type: defun
#: original_texis/commands.texi:3042
msgid "The function @code{read-key-sequence} suppresses quitting: @kbd{C-g} typed while reading with this function works like any other character, and does not set @code{quit-flag}.  @xref{Quitting}."
msgstr "関数@code{read-key-sequence}はquitを抑制する。この関数による読み取りの間にタイプされた@kbd{C-g}は他の文字と同じように機能し、@code{quit-flag}をセットしない。@ref{Quitting}を参照のこと。"

#. type: defun
#: original_texis/commands.texi:3044
#, no-wrap
msgid "read-key-sequence-vector prompt &optional continue-echo dont-downcase-last switch-frame-ok command-loop"
msgstr "read-key-sequence-vector prompt &optional continue-echo dont-downcase-last switch-frame-ok command-loop"

#. type: defun
#: original_texis/commands.texi:3048
msgid "This is like @code{read-key-sequence} except that it always returns the key sequence as a vector, never as a string.  @xref{Strings of Events}."
msgstr "これは@code{read-key-sequence}と同様だが、キーシーケンスを常にベクターでリターンして、文字列では決してリターンしない点が異なる。@ref{Strings of Events}を参照のこと。"

#. type: cindex
#: original_texis/commands.texi:3050
#, no-wrap
msgid "upper case key sequence"
msgstr "upper case key sequence"

#. type: cindex
#: original_texis/commands.texi:3051
#, no-wrap
msgid "downcasing in @code{lookup-key}"
msgstr "downcasing in @code{lookup-key}"

#. type: cindex
#: original_texis/commands.texi:3052
#, no-wrap
msgid "shift-translation"
msgstr "shift-translation"

#. type: vindex
#: original_texis/commands.texi:3053
#, no-wrap
msgid "translate-upper-case-key-bindings"
msgstr "translate-upper-case-key-bindings"

#. type: Plain text
#: original_texis/commands.texi:3061
msgid "If an input character is upper-case (or has the shift modifier) and has no key binding, but its lower-case equivalent has one, then @code{read-key-sequence} converts the character to lower case.  (This behavior can be disabled by setting the @code{translate-upper-case-key-bindings} user option to @code{nil}.)  Note that @code{lookup-key} does not perform case conversion in this way."
msgstr "入力文字が大文字(またはシフト修飾をもつ)でキーバインディングをもたないものの、等価な小文字はキーバインディングをもつ場合には、@code{read-key-sequence}はその文字を小文字に変換します(この挙動はユーザーオプション@code{translate-upper-case-key-bindings}を@code{nil}にセットして無効にできる)。@code{lookup-key}はこの方法によるcase変換を行わないことに注意してください。"

#. type: vindex
#: original_texis/commands.texi:3062
#, no-wrap
msgid "this-command-keys-shift-translated"
msgstr "this-command-keys-shift-translated"

#. type: Plain text
#: original_texis/commands.texi:3070
msgid "When reading input results in such a @dfn{shift-translation}, Emacs sets the variable @code{this-command-keys-shift-translated} to a non-@code{nil} value.  Lisp programs can examine this variable if they need to modify their behavior when invoked by shift-translated keys.  For example, the function @code{handle-shift-selection} examines the value of this variable to determine how to activate or deactivate the region (@pxref{The Mark, handle-shift-selection})."
msgstr "入力を読み取った結果が@dfn{シフト変換(shift-translation)}されていたら、Emacsは変数@code{this-command-keys-shift-translated}に非@code{nil}値をセットします。シフト変換されたキーにより呼びだされたときに挙動を変更する必要があるLispプログラムは、この変数を調べることができます。たとえば関数@code{handle-shift-selection}はリージョンをアクティブ、または非アクティブにするかを判断するためにこの変数の値を調べます(@ref{The Mark, handle-shift-selection}を参照)。"

#. type: Plain text
#: original_texis/commands.texi:3076
msgid "The function @code{read-key-sequence} also transforms some mouse events.  It converts unbound drag events into click events, and discards unbound button-down events entirely.  It also reshuffles focus events and miscellaneous window events so that they never appear in a key sequence with any other events."
msgstr "関数@code{read-key-sequence}もマウスイベントのいくつかを変換します。これはバインドされていないドラッグイベントをクリックイベントに変換して、バインドされていないボタンダウンイベントを完全に破棄します。さらにフォーカスイベントとさまざまなウィンドウイベントの再配置も行うため、これらのイベントはキーシーケンス中に他のイベントととも出現することは決してありません。"

#. type: cindex
#: original_texis/commands.texi:3077
#, no-wrap
msgid "@code{tab-line}, prefix key"
msgstr "@code{tab-line}, prefix key"

#. type: cindex
#: original_texis/commands.texi:3078
#, no-wrap
msgid "@code{header-line}, prefix key"
msgstr "@code{header-line}, prefix key"

#. type: cindex
#: original_texis/commands.texi:3079
#, no-wrap
msgid "@code{mode-line}, prefix key"
msgstr "@code{mode-line}, prefix key"

#. type: cindex
#: original_texis/commands.texi:3080
#, no-wrap
msgid "@code{vertical-line}, prefix key"
msgstr "@code{vertical-line}, prefix key"

#. type: cindex
#: original_texis/commands.texi:3081
#, no-wrap
msgid "@code{horizontal-scroll-bar}, prefix key"
msgstr "@code{horizontal-scroll-bar}, prefix key"

#. type: cindex
#: original_texis/commands.texi:3082
#, no-wrap
msgid "@code{vertical-scroll-bar}, prefix key"
msgstr "@code{vertical-scroll-bar}, prefix key"

#. type: cindex
#: original_texis/commands.texi:3083
#, no-wrap
msgid "@code{menu-bar}, prefix key"
msgstr "@code{menu-bar}, prefix key"

#. type: cindex
#: original_texis/commands.texi:3084
#, no-wrap
msgid "@code{tab-bar}, prefix key"
msgstr "@code{tab-bar}, prefix key"

#. type: cindex
#: original_texis/commands.texi:3085
#, no-wrap
msgid "@code{left-margin}, prefix key"
msgstr "@code{left-margin}, prefix key"

#. type: cindex
#: original_texis/commands.texi:3086
#, no-wrap
msgid "@code{right-margin}, prefix key"
msgstr "@code{right-margin}, prefix key"

#. type: cindex
#: original_texis/commands.texi:3087
#, no-wrap
msgid "@code{left-fringe}, prefix key"
msgstr "@code{left-fringe}, prefix key"

#. type: cindex
#: original_texis/commands.texi:3088
#, no-wrap
msgid "@code{right-fringe}, prefix key"
msgstr "@code{right-fringe}, prefix key"

#. type: cindex
#: original_texis/commands.texi:3089
#, no-wrap
msgid "@code{right-divider}, prefix key"
msgstr "@code{right-divider}, prefix key"

#. type: cindex
#: original_texis/commands.texi:3090
#, no-wrap
msgid "@code{bottom-divider}, prefix key"
msgstr "@code{bottom-divider}, prefix key"

#. type: cindex
#: original_texis/commands.texi:3091
#, no-wrap
msgid "mouse events, in special parts of window or frame"
msgstr "mouse events, in special parts of window or frame"

#. type: Plain text
#: original_texis/commands.texi:3105
msgid "When mouse events occur in special parts of a window or frame, such as a mode line or a scroll bar, the event type shows nothing special---it is the same symbol that would normally represent that combination of mouse button and modifier keys.  The information about the window part is kept elsewhere in the event---in the coordinates.  But @code{read-key-sequence} translates this information into imaginary prefix keys, all of which are symbols: @code{tab-line}, @code{header-line}, @code{horizontal-scroll-bar}, @code{menu-bar}, @code{tab-bar}, @code{mode-line}, @code{vertical-line}, @code{vertical-scroll-bar}, @code{left-margin}, @code{right-margin}, @code{left-fringe}, @code{right-fringe}, @code{right-divider}, and @code{bottom-divider}.  You can define meanings for mouse clicks in special window parts by defining key sequences using these imaginary prefix keys."
msgstr "モードラインやスクロールバーのような、ウィンドウやフレームの特別な箇所でマウスイベントが発生したとき、そのイベント型は特別なことは何も示さずにマウスボタンと修飾キーの組み合わせを通常表すのと同じシンボルになります。ウィンドウの箇所についての情報はイベント内の別のどこか、すなわち座標に保持されています。しかし@code{read-key-sequence}はこの情報を仮想的なプレフィクスキーに変換します。これらはすべてシンボルであり@code{tab-line}、@code{header-line}、@code{horizontal-scroll-bar}、@code{menu-bar}、@code{tab-bar}、@code{mode-line}、@code{vertical-line}、@code{vertical-scroll-bar}、@code{left-margin}、@code{right-margin}、@code{left-fringe}、@code{right-fringe}、@code{right-divider}、@code{bottom-divider}です。これらの仮想的なプレフィクスキーを使用してキーシーケンスを定義することにより、ウィンドウの特別な部分でのカウスクリックにたいして意味を定義できます。"

#. type: Plain text
#: original_texis/commands.texi:3108
msgid "For example, if you call @code{read-key-sequence} and then click the mouse on the window's mode line, you get two events, like this:"
msgstr "たとえば@code{read-key-sequence}を呼び出した後にそのウィンドウのモードラインをマウスでクリックすると、以下のように2つのマウスイベントが取得されます:"

#. type: example
#: original_texis/commands.texi:3115
#, no-wrap
msgid ""
"(read-key-sequence \"Click on the mode line: \")\n"
"     @result{} [mode-line\n"
"         (mouse-1\n"
"          (#<window 6 on NEWS> mode-line\n"
"           (40 . 63) 5959987))]\n"
msgstr ""
"(read-key-sequence \"Click on the mode line: \")\n"
"     @result{} [mode-line\n"
"         (mouse-1\n"
"          (#<window 6 on NEWS> mode-line\n"
"           (40 . 63) 5959987))]\n"

#. type: defvar
#: original_texis/commands.texi:3117
#, no-wrap
msgid "num-input-keys"
msgstr "num-input-keys"

#. type: defvar
#: original_texis/commands.texi:3121
msgid "This variable's value is the number of key sequences processed so far in this Emacs session.  This includes key sequences read from the terminal and key sequences read from keyboard macros being executed."
msgstr "この変数の値は、そのEmacsセッション内で処理されたキーシーケンスの数である。これには端末からのキーシーケンスと、実行されるキーボードマクロによって読み取られたキーシーケンスが含まれる。"

#. type: cindex
#: original_texis/commands.texi:3125
#, no-wrap
msgid "reading a single event"
msgstr "reading a single event"

#. type: cindex
#: original_texis/commands.texi:3126
#, no-wrap
msgid "event, reading only one"
msgstr "event, reading only one"

#. type: Plain text
#: original_texis/commands.texi:3130
msgid "The lowest level functions for command input are @code{read-event}, @code{read-char}, and @code{read-char-exclusive}."
msgstr "@code{read-event}、@code{read-char}、@code{read-char-exclusive}はコマンド入力にたいするもっとも低レベルの関数です。"

#. type: Plain text
#: original_texis/commands.texi:3133
msgid "If you need a function to read a character using the minibuffer, use @code{read-char-from-minibuffer} (@pxref{Multiple Queries})."
msgstr "ミニバッファーを使用して1文字を読み取る関数が必要なら@code{read-char-from-minibuffer}を使用してください(@ref{Multiple Queries}を参照)。"

#. type: defun
#: original_texis/commands.texi:3134
#, no-wrap
msgid "read-event &optional prompt inherit-input-method seconds"
msgstr "read-event &optional prompt inherit-input-method seconds"

#. type: defun
#: original_texis/commands.texi:3137
msgid "This function reads and returns the next event of command input, waiting if necessary until an event is available."
msgstr "この関数はコマンド入力の次のイベントを読み取ってリターンする。必要ならイベントが利用可能になるまで待機する。"

#. type: defun
#: original_texis/commands.texi:3141
msgid "The returned event may come directly from the user, or from a keyboard macro.  It is not decoded by the keyboard's input coding system (@pxref{Terminal I/O Encoding})."
msgstr "リターンされるイベントはユーザーからの直接のイベントかもしれないし、キーボードマクロからのイベントかもしれない。イベントはキーボードの入力コーディングシステム(@ref{Terminal I/O Encoding}を参照)によりデコードされていない。"

#. type: defun
#: original_texis/commands.texi:3148
msgid "If the optional argument @var{prompt} is non-@code{nil}, it should be a string to display in the echo area as a prompt.  If @var{prompt} is @code{nil} or the string @samp{\"\"}, @code{read-event} does not display any message to indicate it is waiting for input; instead, it prompts by echoing: it displays descriptions of the events that led to or were read by the current command.  @xref{The Echo Area}."
msgstr ""
"オプション引数@var{prompt}が非@code{nil}なら、それはエコーエリアにプロンプトとして表示される文字列。\n"
"@var{prompt}が@code{nil}か文字列@samp{\"\"}なら、@code{read-event}は入力待ちを示すメッセージを何も表示せず、エコーを行うことによってプロンプトの代用とする。エコーに表示される記述はカレントコマンドに至ったイベントや読み取られたイベント。@ref{The Echo Area}を参照のこと。"

#. type: defun
#: original_texis/commands.texi:3153
msgid "If @var{inherit-input-method} is non-@code{nil}, then the current input method (if any) is employed to make it possible to enter a non-@acronym{ASCII} character.  Otherwise, input method handling is disabled for reading this event."
msgstr "@var{inherit-input-method}が非@code{nil}なら、(もしあれば)非@acronym{ASCII}文字の入力を可能にするためにカレントの入力メソッドが採用される。それ以外では、このイベントの読み取りにたいして入力メソッドの処理が無効になる。"

#. type: defun
#: original_texis/commands.texi:3157
msgid "If @code{cursor-in-echo-area} is non-@code{nil}, then @code{read-event} moves the cursor temporarily to the echo area, to the end of any message displayed there.  Otherwise @code{read-event} does not move the cursor."
msgstr "@code{cursor-in-echo-area}が非@code{nil}の場合、@code{read-event}はカーソルを一時的にエコーエリアの、そこに表示されているメッセージの終端に移動する。それ以外では、@code{read-event}はカーソルを移動しない。"

#. type: defun
#: original_texis/commands.texi:3166
msgid "If @var{seconds} is non-@code{nil}, it should be a number specifying the maximum time to wait for input, in seconds.  If no input arrives within that time, @code{read-event} stops waiting and returns @code{nil}.  A floating point @var{seconds} means to wait for a fractional number of seconds.  Some systems support only a whole number of seconds; on these systems, @var{seconds} is rounded down.  If @var{seconds} is @code{nil}, @code{read-event} waits as long as necessary for input to arrive."
msgstr "@var{seconds}が非@code{nil}なら、それは入力を待つ最大秒数を指定する数値である。その時間内に入力が何も到着しなければ、@code{read-event}は待機を終えて@code{nil}をリターンする。浮動小数点数@var{seconds}は待機する秒の分数を意味する。いくつかのシステムではサポートされるのは整数の秒数だけであり、そのようなシステムでは@var{seconds}は切り捨てられる。@var{seconds}が@code{nil}なら、@code{read-event}は入力が到着するのに必要なだけ待機する。"

#. type: defun
#: original_texis/commands.texi:3175
msgid "If @var{seconds} is @code{nil}, Emacs is considered idle while waiting for user input to arrive.  Idle timers---those created with @code{run-with-idle-timer} (@pxref{Idle Timers})---can run during this period.  However, if @var{seconds} is non-@code{nil}, the state of idleness remains unchanged.  If Emacs is non-idle when @code{read-event} is called, it remains non-idle throughout the operation of @code{read-event}; if Emacs is idle (which can happen if the call happens inside an idle timer), it remains idle."
msgstr "@var{seconds}が@code{nil}ならユーザー入力が到着するのを待つ間、Emacsはアイドル状態にあるとみなされる。この期間中にアイドルタイマー --- @code{run-with-idle-timer} (@ref{Idle Timers}を参照) --- を実行できる。しかし@var{seconds}が非@code{nil}なら、非アイドル状態は変更されずに残る。@code{read-event}が呼び出されたときEmacsが非アイドルだったら、@code{read-event}の処理を通じて非アイドルのままとなる。Emacsがアイドルだった場合(これはアイドルタイマー内部からその呼び出しが行われた場合に起こり得る)は、アイドルのままとまる。"

#. type: defun
#: original_texis/commands.texi:3181
msgid "If @code{read-event} gets an event that is defined as a help character, then in some cases @code{read-event} processes the event directly without returning.  @xref{Help Functions}.  Certain other events, called @dfn{special events}, are also processed directly within @code{read-event} (@pxref{Special Events})."
msgstr "@code{read-event}がヘルプ文字として定義されたイベントを取得すると、ある状況においては@code{read-event}がリターンせずに直接イベントを処理することがある。@ref{Help Functions}を参照のこと。その他の@dfn{スペシャルイベント(special events)}(@ref{Special Events}を参照)と呼ばれる特定のイベントも@code{read-event}で直接処理される。"

#. type: defun
#: original_texis/commands.texi:3184
msgid "Here is what happens if you call @code{read-event} and then press the right-arrow function key:"
msgstr "以下は@code{read-event}を呼び出してから右矢印キーを押下したとき何が起こるかの例:"

#. type: group
#: original_texis/commands.texi:3189
#, no-wrap
msgid ""
"(read-event)\n"
"     @result{} right\n"
msgstr ""
"(read-event)\n"
"     @result{} right\n"

#. type: defun
#: original_texis/commands.texi:3193
#, no-wrap
msgid "read-char &optional prompt inherit-input-method seconds"
msgstr "read-char &optional prompt inherit-input-method seconds"

#. type: defun
#: original_texis/commands.texi:3198
msgid "This function reads and returns a character input event.  If the user generates an event which is not a character (i.e., a mouse click or function key event), @code{read-char} signals an error.  The arguments work as in @code{read-event}."
msgstr "この関数は文字入力イベントを読み取ってリターンする。ユーザーが文字以外(たとえばマウスクリックやファンクションキー)のイベントを生成した場合には、@code{read-char}はエラーをシグナルする。引数は@code{read-event}と同じように機能する。"

#. type: defun
#: original_texis/commands.texi:3212
msgid "If the event has modifiers, Emacs attempts to resolve them and return the code of the corresponding character.  For example, if the user types @kbd{C-a}, the function returns 1, which is the @acronym{ASCII} code of the @samp{C-a} character.  If some of the modifiers cannot be reflected in the character code, @code{read-char} leaves the unresolved modifier bits set in the returned event.  For example, if the user types @kbd{C-M-a}, the function returns 134217729, 8000001 in hex, i.e.@: @samp{C-a} with the Meta modifier bit set.  This value is not a valid character code: it fails the @code{characterp} test (@pxref{Character Codes}).  Use @code{event-basic-type} (@pxref{Classifying Events}) to recover the character code with the modifier bits removed; use @code{event-modifiers} to test for modifiers in the character event returned by @code{read-char}."
msgstr "イベントが修飾子をもつ場合には、Emacsはそれらの解決を試みて対応する文字のコードをリターンする。たとえばユーザーが@kbd{C-a}をタイプすると、関数は文字@samp{C-a}の@acronym{ASCII}コードである1をリターンする。いくつかの修飾子を文字コードに反映できない場合には、@code{read-char}は未解決の修飾子ビットをセットしたままイベントをリターンする。たとえばユーザーが@kbd{C-M-a}をタイプすると、関数は134217729(16進の8000001であり、これはメタ修飾子がセットされた@samp{C-a})をリターンする。この値は有効な文字コードではないので、@code{characterp}のテストに失敗する(@ref{Character Codes}を参照)。修飾子ビットが削除された文字の復元には@code{event-basic-type} (@ref{Classifying Events}を参照)、@code{read-char}がリターンした文字イベント内の修飾子をテストするには@code{event-modifiers}を使用すること。"

#. type: defun
#: original_texis/commands.texi:3219
msgid "In the first example below, the user types the character @kbd{1} (@acronym{ASCII} code 49).  The second example shows a keyboard macro definition that calls @code{read-char} from the minibuffer using @code{eval-expression}.  @code{read-char} reads the keyboard macro's very next character, which is @kbd{1}.  Then @code{eval-expression} displays its return value in the echo area."
msgstr "以下の1つ目の例ではユーザーは文字@kbd{1}(@acronym{ASCII}コード49)をタイプしている。2つ目の例では@code{eval-expression}を使用してミニバッファーから@code{read-char}を呼び出すキーボード定義を示している。@code{read-char}はキーボードマクロの直後の文字@kbd{1}を読み取る。その後に@code{eval-expression}はリターン値をエコーエリアに表示する。"

#. type: group
#: original_texis/commands.texi:3224
#, no-wrap
msgid ""
"(read-char)\n"
"     @result{} 49\n"
msgstr ""
"(read-char)\n"
"     @result{} 49\n"

#. type: group
#: original_texis/commands.texi:3230
#, no-wrap
msgid ""
";; @r{We assume here you use @kbd{M-:} to evaluate this.}\n"
"(symbol-function 'foo)\n"
"     @result{} \"^[:(read-char)^M1\"\n"
msgstr ""
";; @r{@kbd{M-:}を使用して以下を評価するものとする}\n"
"(symbol-function 'foo)\n"
"     @result{} \"^[:(read-char)^M1\"\n"

#. type: group
#: original_texis/commands.texi:3235
#, no-wrap
msgid ""
"(execute-kbd-macro 'foo)\n"
"     @print{} 49\n"
"     @result{} nil\n"
msgstr ""
"(execute-kbd-macro 'foo)\n"
"     @print{} 49\n"
"     @result{} nil\n"

#. type: defun
#: original_texis/commands.texi:3239
#, no-wrap
msgid "read-char-exclusive &optional prompt inherit-input-method seconds"
msgstr "read-char-exclusive &optional prompt inherit-input-method seconds"

#. type: defun
#: original_texis/commands.texi:3245
msgid "This function reads and returns a character input event.  If the user generates an event which is not a character event, @code{read-char-exclusive} ignores it and reads another event, until it gets a character.  The arguments work as in @code{read-event}.  The returned value may include modifier bits, as with @code{read-char}."
msgstr "この関数は文字入力イベントを読み取ってリターンする。ユーザーが文字イベント以外を生成した場合には、@code{read-char-exclusive}はそれを無視して文字を取得するまで他のイベントを読み取る。引数は@code{read-event}と同じように機能する。リターン値には@code{read-char}のように修飾ビットが含まれるかもしれない。"

#. type: Plain text
#: original_texis/commands.texi:3248
msgid "None of the above functions suppress quitting."
msgstr "上記の関数でquitを抑制するものはありません。"

#. type: defvar
#: original_texis/commands.texi:3249
#, no-wrap
msgid "num-nonmacro-input-events"
msgstr "num-nonmacro-input-events"

#. type: defvar
#: original_texis/commands.texi:3252
msgid "This variable holds the total number of input events received so far from the terminal---not counting those generated by keyboard macros."
msgstr "この変数は端末から受信した入力イベント(キーボードマクロにより生成されたイベントは勘定しない)の総数を保持する。"

#. type: Plain text
#: original_texis/commands.texi:3261
msgid "We emphasize that, unlike @code{read-key-sequence}, the functions @code{read-event}, @code{read-char}, and @code{read-char-exclusive} do not perform the translations described in @ref{Translation Keymaps}.  If you wish to read a single key taking these translations into account (for example, to read @ref{Function Keys} in a terminal or @ref{Mouse Events} from @code{xterm-mouse-mode}), use the function @code{read-key}:"
msgstr "@code{read-key-sequence}と異なり関数@code{read-event}、@code{read-char}、@code{read-char-exclusive}は@ref{Translation Keymaps}で説明した変換を行わないことを強調しておきます。単一キー読み取りでこれらの変換を行う --- たとえば端末からファンクションキー(@ref{Function Keys}を参照)、@code{xterm-mouse-mode}からマウスイベント(@ref{Mouse Events}を参照)を読み取る場合 --- には関数@code{read-key}を使用してください。"

#. type: defun
#: original_texis/commands.texi:3262
#, no-wrap
msgid "read-key &optional prompt disable-fallbacks"
msgstr "read-key &optional prompt disable-fallbacks"

#. type: defun
#: original_texis/commands.texi:3269
msgid "This function reads a single key.  It is intermediate between @code{read-key-sequence} and @code{read-event}.  Unlike the former, it reads a single key, not a key sequence.  Unlike the latter, it does not return a raw event, but decodes and translates the user input according to @code{input-decode-map}, @code{local-function-key-map}, and @code{key-translation-map} (@pxref{Translation Keymaps})."
msgstr "この関数は1つのキーを読み取る。これは@code{read-key-sequence}と@code{read-event}の間の中間的な関数である。@code{read-key-sequence}と異なるのは、キーシーケンスではなく単一キーを読み取ることである。@code{read-event}と異なるのは、rawイベントをリターンせずに@code{input-decode-map}、@code{local-function-key-map}、@code{key-translation-map} (@ref{Translation Keymaps}を参照)に合わせてデコードと変換を行うことである。"

#. type: defun
#: original_texis/commands.texi:3272
msgid "The argument @var{prompt} is either a string to be displayed in the echo area as a prompt, or @code{nil}, meaning not to display a prompt."
msgstr "引数@var{prompt}はプロンプトとしてエコーエリアに表示する文字列で、@code{nil}はプロンプトを表示しないことを意味する。"

#. type: defun
#: original_texis/commands.texi:3280
msgid "If argument @var{disable-fallbacks} is non-@code{nil} then the usual fallback logic for unbound keys in @code{read-key-sequence} is not applied.  This means that mouse button-down and multi-click events will not be discarded and @code{local-function-key-map} and @code{key-translation-map} will not get applied.  If @code{nil} or unspecified, the only fallback disabled is downcasing of the last event."
msgstr "引数@var{disable-fallbacks}が非@code{nil}なら、@code{read-key-sequence}でバインドされないキーにたいする通常のフォールバックロジックは適用されない。これはbutton-downちmulti-clickのイベントは棄却されず、@code{local-function-key-map}と@code{key-translation-map}が適用されないことを意味する。@code{nil}または指定されなければ、フォールバックの無効化は最後のイベントのダウンキャスト(訳注: 基本イベントから継承イベントへの型変換)となる。"

#. type: vindex
#: original_texis/commands.texi:3282
#, no-wrap
msgid "read-char-choice-use-read-key"
msgstr "read-char-choice-use-read-key"

#. type: defun
#: original_texis/commands.texi:3283
#, no-wrap
msgid "read-char-choice prompt chars &optional inhibit-quit"
msgstr "read-char-choice prompt chars &optional inhibit-quit"

#. type: defun
#: original_texis/commands.texi:3288
msgid "This function uses @code{read-from-minibuffer} to read and return a single character that is a member of @var{chars}, which should be a list of single characters.  It discards any input characters that are not members of @var{chars}, and shows a message to that effect."
msgstr "この関数は@var{chars}のメンバーであるような文字を読み取って1文字をリターンするために@code{read-from-minibuffer}を使用する。@var{chars}のメンバーではない文字が入力されると、その旨を伝えるメッセージして入力を破棄する。"

#. type: defun
#: original_texis/commands.texi:3300
msgid "The optional argument @var{inhibit-quit} is by default ignored, but if the variable @code{read-char-choice-use-read-key} is non-@code{nil}, this function uses @code{read-key} instead of @code{read-from-minibuffer}, and in that case @var{inhibit-quit} non-@code{nil} means ignore keyboard-quit events while waiting for valid input.  In addition, if @code{read-char-choice-use-read-key} is non-@code{nil}, binding @code{help-form} (@pxref{Help Functions}) to a non-@code{nil} value while calling this function causes it to evaluate @code{help-form} and display the result when the user presses @code{help-char}; it then continues to wait for a valid input character, or for keyboard-quit."
msgstr "オプション引数@var{inhibit-quit}はデフォルトでは無視されるが、変数@code{read-char-choice-use-read-key}が非@code{nil}ならこの関数は@code{read-from-minibuffer}ではなく@code{read-key}を使用する。この場合には@var{inhibit-quit}が非@code{nil}だと、有効な入力待機中のkeyboard-quitイベントを無視することを意味する。加えて@code{read-char-choice-use-read-key}が非@code{nil}の場合には、この関数の呼び出し中に@code{help-form}に非@code{nil}値をバインドすることによって、ユーザーが@code{help-char}文字を押下した際に@code{help-form}を評価してその結果を表示、その後は有効な入力文字、あるいはkeyboard-quitの待機を継続する。"

#. type: defun
#: original_texis/commands.texi:3302
#, no-wrap
msgid "read-multiple-choice prompt choices &optional help-string show-help long-form"
msgstr "read-multiple-choice prompt choices &optional help-string show-help long-form"

#. type: defun
#: original_texis/commands.texi:3305
msgid "Ask user a multiple choice question.  @var{prompt} should be a string that will be displayed as the prompt."
msgstr "複数の選択肢のある問いをユーザーに尋ねる。@var{prompt}はプロンプトとして表示する文字列であること。"

#. type: defun
#: original_texis/commands.texi:3311
msgid "@var{choices} is an alist where the first element in each entry is a character to be entered, the second element is a short name for the entry to be displayed while prompting (if there's room, it might be shortened), and the third, optional entry is a longer explanation that will be displayed in a help buffer if the user requests more help."
msgstr "@var{choices}は各エントリーの1つ目の要素が入力される文字、2つ目の要素がプロンプトを表示する際にそのエントリーにたいして表示する短い名前であるようなalist(スペースがあれば短縮され得る)であり、3つ目のオプションのエントリーはユーザーがより多くのヘルプを要求した際にヘルプバッファーに表示する長い説明。"

#. type: defun
#: original_texis/commands.texi:3316
msgid "If optional argument @var{help-string} is non-@code{nil}, it should be a string with a more detailed description of all choices.  It will be displayed in a help buffer instead of the default auto-generated description when the user types @kbd{?}."
msgstr "オプション引数@var{help-string}が非@code{nil}なら、すべてのchoiceをより詳細に記述する文字列であること。これはユーザーが@kbd{?}をタイプした際に、自動生成されたデフォルトの説明のかわりとしてヘルプバッファーに表示される。"

#. type: defun
#: original_texis/commands.texi:3320
msgid "If optional argument @var{show-help} is non-@code{nil}, the help buffer will be displayed immediately, before any user input.  If it is a string, use it as the name of the help buffer."
msgstr "オプション引数@var{show-help}が非@code{nil}なら、ユーザーが入力する前に即座にヘルプバッファーが表示される。文字列ならそれがヘルプバッファーの名前として用いられる。"

#. type: defun
#: original_texis/commands.texi:3325
msgid "If optional argument @var{long-form} is non-@code{nil}, the user will have to type in long-form answers (using @code{completing-read})  instead of hitting a single key.  The answers must be among the second elements of the values in the @var{choices} list."
msgstr "オプション引数@var{long-form}が非@code{nil}なら、ユーザーは単一キーではなく(@code{completing-read}を使用して)長い形式をタイプして応答する必要がある。この応答はリスト@var{choices}の2つ目の要素内に存在しなければならない。"

#. type: defun
#: original_texis/commands.texi:3327
msgid "The return value is the matching value from @var{choices}."
msgstr "リターン値は@var{choices}のマッチする値。"

#. type: lisp
#: original_texis/commands.texi:3334
#, no-wrap
msgid ""
"(read-multiple-choice\n"
" \"Continue connecting?\"\n"
" '((?a \"always\" \"Accept certificate for this and future sessions.\")\n"
"   (?s \"session only\" \"Accept certificate this session only.\")\n"
"   (?n \"no\" \"Refuse to use certificate, close connection.\")))\n"
msgstr ""
"(read-multiple-choice\n"
" \"Continue connecting?\"\n"
" '((?a \"always\" \"Accept certificate for this and future sessions.\")\n"
"   (?s \"session only\" \"Accept certificate this session only.\")\n"
"   (?n \"no\" \"Refuse to use certificate, close connection.\")))\n"

#. type: defun
#: original_texis/commands.texi:3338
msgid "The @code{read-multiple-choice-face} face is used to highlight the matching characters in the name string on graphical terminals."
msgstr "グラフィカル端末で名前文字列にマッチする文字をハイライトするために@code{read-multiple-choice-face}フェイスが使用される。"

#. type: subsection
#: original_texis/commands.texi:3342
#, no-wrap
msgid "Modifying and Translating Input Events"
msgstr "Modifying and Translating Input Events"

#. type: cindex
#: original_texis/commands.texi:3343
#, no-wrap
msgid "modifiers of events"
msgstr "modifiers of events"

#. type: cindex
#: original_texis/commands.texi:3344
#, no-wrap
msgid "translating input events"
msgstr "translating input events"

#. type: cindex
#: original_texis/commands.texi:3345
#, no-wrap
msgid "event translation"
msgstr "event translation"

#. type: Plain text
#: original_texis/commands.texi:3351
msgid "Emacs modifies every event it reads according to @code{extra-keyboard-modifiers}, then translates it through @code{keyboard-translate-table} (if applicable), before returning it from @code{read-event}."
msgstr "Emacsは@code{extra-keyboard-modifiers}に合わせて読み取ったすべてのイベントを変更して@code{read-event}からリターンする前に、(もし適切なら)@code{keyboard-translate-table}を通じてそれを変換します。"

#. type: defvar
#: original_texis/commands.texi:3352
#, no-wrap
msgid "extra-keyboard-modifiers"
msgstr "extra-keyboard-modifiers"

#. type: defvar
#: original_texis/commands.texi:3364
msgid "This variable lets Lisp programs ``press'' the modifier keys on the keyboard.  The value is a character.  Only the modifiers of the character matter.  Each time the user types a keyboard key, it is altered as if those modifier keys were held down.  For instance, if you bind @code{extra-keyboard-modifiers} to @code{?\\C-\\M-a}, then all keyboard input characters typed during the scope of the binding will have the control and meta modifiers applied to them.  The character @code{?\\C-@@}, equivalent to the integer 0, does not count as a control character for this purpose, but as a character with no modifiers.  Thus, setting @code{extra-keyboard-modifiers} to zero cancels any modification."
msgstr "この変数はLispプログラムにキーボード上の修飾キーを``押下''させる。値は文字。文字の修飾子だけが対象となる。ユーザーがキーボードのキーを押下するたびに、その修飾キーがすでに押下されたかのように処理される。たとえば@code{extra-keyboard-modifiers}を@code{?\\C-\\M-a}にバインドすると、このバインディングのスコープ内にある間、すべてのキーボード入力文字はコントロール修飾とメタ修飾を適用されるだろう。文字@code{?\\C-@@}は0と等価なので、この目的にたいしてはコントロール文字として勘定されないが、修飾無しの文字として扱われる。したがって@code{extra-keyboard-modifiers}を0にセットすることによって、すべての修飾をキャンセルできる。"

#. type: defvar
#: original_texis/commands.texi:3368
msgid "When using a window system, the program can press any of the modifier keys in this way.  Otherwise, only the @key{CTL} and @key{META} keys can be virtually pressed."
msgstr "ウィンドウシステムを利用していれば、この方法によってプログラムが任意の修飾キーを押下できる。それ以外では@key{CTL}と@key{META}のキーだけを仮想的に押下できる。"

#. type: defvar
#: original_texis/commands.texi:3371
msgid "Note that this variable applies only to events that really come from the keyboard, and has no effect on mouse events or any other events."
msgstr "この変数は実際にキーボードに由来するイベントだけに適用され、マウスイベントやその他のイベントには効果がないことに注意。"

#. type: defvar
#: original_texis/commands.texi:3373
#, no-wrap
msgid "keyboard-translate-table"
msgstr "keyboard-translate-table"

#. type: defvar
#: original_texis/commands.texi:3379
msgid "This terminal-local variable is the translate table for keyboard characters.  It lets you reshuffle the keys on the keyboard without changing any command bindings.  Its value is normally a char-table, or else @code{nil}.  (It can also be a string or vector, but this is considered obsolete.)"
msgstr "この端末ローカルな変数はキーボード文字にたいする変換テーブルである。これによりコマンドバインディングを変更することなく、キーボード上のキーを再配置できる。値は通常は文字テーブル、または@code{nil}(文字列かベクターも指定できるが時代遅れとされている)。"

#. type: defvar
#: original_texis/commands.texi:3384
msgid "If @code{keyboard-translate-table} is a char-table (@pxref{Char-Tables}), then each character read from the keyboard is looked up in this char-table.  If the value found there is non-@code{nil}, then it is used instead of the actual input character."
msgstr "@code{keyboard-translate-table}が文字テーブル(@ref{Char-Tables}を参照)なら、キーボードから読み取られた各文字はその文字テーブルを調べる。非@code{nil}の値が見つかったら実際の入力文字のかわりにそれを使用する。"

#. type: defvar
#: original_texis/commands.texi:3389
msgid "Note that this translation is the first thing that happens to a character after it is read from the terminal.  Record-keeping features such as @code{recent-keys} and dribble files record the characters after translation."
msgstr "この変換は文字が端末から読み取られた後、最初に発生することに注意。@code{recent-keys}のような記録保持機能や文字を記録するdribbleファイルは、この変換の後に処理される。"

#. type: defvar
#: original_texis/commands.texi:3394
msgid "Note also that this translation is done before the characters are supplied to input methods (@pxref{Input Methods}).  Use @code{translation-table-for-input} (@pxref{Translation of Characters}), if you want to translate characters after input methods operate."
msgstr "さらにこの変換は入力メソッド(@ref{Input Methods}を参照)に文字を提供する前に行われることにも注意。入力メソッド処理の後に文字を変換したいなら@code{translation-table-for-input} (@ref{Translation of Characters}を参照)を使用すること。"

#. type: defun
#: original_texis/commands.texi:3396
#, no-wrap
msgid "key-translate from to"
msgstr "key-translate from to"

#. type: defun
#: original_texis/commands.texi:3400
msgid "This function modifies @code{keyboard-translate-table} to translate character code @var{from} into character code @var{to}.  It creates the keyboard translate table if necessary."
msgstr "この関数は文字コード@var{from}を文字コード@var{to}に変換するために@code{keyboard-translate-table}を変更する。 必要ならキーボード変換テーブルを作成する。"

#. type: Plain text
#: original_texis/commands.texi:3405
msgid "Here's an example of using the @code{keyboard-translate-table} to make @kbd{C-x}, @kbd{C-c} and @kbd{C-v} perform the cut, copy and paste operations:"
msgstr "以下は@kbd{C-x}でカット、@kbd{C-}でコピー、@kbd{C-v}でペーストを処理するように@code{keyboard-translate-table}を使用する例:"

#. type: example
#: original_texis/commands.texi:3413
#, no-wrap
msgid ""
"(key-translate \"C-x\" \"<control-x>\")\n"
"(key-translate \"C-c\" \"<control-c>\")\n"
"(key-translate \"C-v\" \"<control-v>\")\n"
"(keymap-global-set \"<control-x>\" 'kill-region)\n"
"(keymap-global-set \"<control-c>\" 'kill-ring-save)\n"
"(keymap-global-set \"<control-v>\" 'yank)\n"
msgstr ""
"(key-translate \"C-x\" \"<control-x>\")\n"
"(key-translate \"C-c\" \"<control-c>\")\n"
"(key-translate \"C-v\" \"<control-v>\")\n"
"(keymap-global-set \"<control-x>\" 'kill-region)\n"
"(keymap-global-set \"<control-c>\" 'kill-ring-save)\n"
"(keymap-global-set \"<control-v>\" 'yank)\n"

#. type: Plain text
#: original_texis/commands.texi:3421
msgid "On a graphical terminal that supports extended @acronym{ASCII} input, you can still get the standard Emacs meanings of one of those characters by typing it with the shift key.  That makes it a different character as far as keyboard translation is concerned, but it has the same usual meaning."
msgstr "拡張@acronym{ASCII}入力をサポートするグラフィカルな端末上では、シフトキーとともにタイプすることによって、標準的なEmacsにおける意味をこれらの文字から依然として取得することが可能です。これはキーボード変換が関与する文字とは異なりますが、それらは通常と同じ意味をもちます。"

#. type: Plain text
#: original_texis/commands.texi:3427
msgid "@xref{Translation Keymaps}, for mechanisms that translate event sequences at the level of @code{read-key-sequence}.  If you need to translate input events that are not characters (i.e., @code{characterp} returns @code{nil} for them), you must use the event translation mechanism described there."
msgstr "@code{read-key-sequence}レベルでイベントシーケンスを変換するメカニズムについては、@ref{Translation Keymaps}を参照してください。文字以外の入力イベント(@code{characterp}が@code{nil}をリターンするような入力)の変換が必要な場合には、参照先で説明されているイベント変換メカニズムを使用しなければなりません。"

#. type: cindex
#: original_texis/commands.texi:3430
#, no-wrap
msgid "invoking input method"
msgstr "invoking input method"

#. type: Plain text
#: original_texis/commands.texi:3437
msgid "The event-reading functions invoke the current input method, if any (@pxref{Input Methods}).  If the value of @code{input-method-function} is non-@code{nil}, it should be a function; when @code{read-event} reads a printing character (including @key{SPC}) with no modifier bits, it calls that function, passing the character as an argument."
msgstr "イベント読み取り関数は、もしあればカレント入力メソッドを呼び出します(@ref{Input Methods}を参照)。@code{input-method-function}の値が非@code{nil}なら関数を指定します。@code{read-event}が修飾ビットのないプリント文字(@key{SPC}を含む)を読み取ったときは、その文字を引数としてその関数を呼び出します。"

#. type: defvar
#: original_texis/commands.texi:3438
#, no-wrap
msgid "input-method-function"
msgstr "input-method-function"

#. type: defvar
#: original_texis/commands.texi:3441
msgid "If this is non-@code{nil}, its value specifies the current input method function."
msgstr "これが非@code{nil}なら、その値はカレントの入力メソッド関数を指定する。"

#. type: defvar
#: original_texis/commands.texi:3447
msgid "@strong{Warning:} don't bind this variable with @code{let}.  It is often buffer-local, and if you bind it around reading input (which is exactly when you @emph{would} bind it), switching buffers asynchronously while Emacs is waiting will cause the value to be restored in the wrong buffer."
msgstr "@strong{警告:} この変数を@code{let}でバインドしてはならない。この変数はバッファーローカルであることが多く、入力の前後(これは正にあなたがバインド@emph{するであろう}タイミングである)でバインドすると、Emacsが待機中に非同期にバッファーを切り替えた場合に、誤ったバッファーに値がリストアされてしまう。"

#. type: Plain text
#: original_texis/commands.texi:3457
msgid "The input method function should return a list of events which should be used as input.  (If the list is @code{nil}, that means there is no input, so @code{read-event} waits for another event.)  These events are processed before the events in @code{unread-command-events} (@pxref{Event Input Misc}).  Events returned by the input method function are not passed to the input method function again, even if they are printing characters with no modifier bits."
msgstr "入力メソッド関数は入力として使用されるイベントのリストをリターンするべきです(このリストが@code{nil}なら、それは入力がないことを意味するので@code{read-event}は他のイベントを待機する)。これらのイベントは@code{unread-command-events} (@ref{Event Input Misc}を参照)内のイベントの前に処理されます。入力メソッドによってリターンされるイベントは、たとえそれらが修飾ビットのないプリント文字であっても再度入力メソッドに渡されることはありません。"

#. type: Plain text
#: original_texis/commands.texi:3461
msgid "If the input method function calls @code{read-event} or @code{read-key-sequence}, it should bind @code{input-method-function} to @code{nil} first, to prevent recursion."
msgstr "入力メソッド関数が@code{read-event}や@code{read-key-sequence}を呼び出したら、再帰を防ぐために最初に@code{input-method-function}を@code{nil}にバインドするべきです。"

#. type: Plain text
#: original_texis/commands.texi:3469
msgid "The input method function is not called when reading the second and subsequent events of a key sequence.  Thus, these characters are not subject to input method processing.  The input method function should test the values of @code{overriding-local-map} and @code{overriding-terminal-local-map}; if either of these variables is non-@code{nil}, the input method should put its argument into a list and return that list with no further processing."
msgstr "キーシーケンスの2つ目および後続のイベントを読み取るときは、入力メソッド関数は呼び出されません。したがってそれらの文字は入力メソッドの処理対象外です。入力メソッド関数は@code{overriding-local-map}と@code{overriding-terminal-local-map}の値をテストするべきです。これらの変数のいずれかが非@code{nil}なら入力メソッドは引数をリストにputして、それ以上の処理を行わずにそのリストをリターンするべきです。"

#. type: cindex
#: original_texis/commands.texi:3472
#, no-wrap
msgid "quoted character input"
msgstr "quoted character input"

#. type: Plain text
#: original_texis/commands.texi:3478
msgid "You can use the function @code{read-quoted-char} to ask the user to specify a character, and allow the user to specify a control or meta character conveniently, either literally or as an octal character code.  The command @code{quoted-insert} uses this function."
msgstr "ユーザーが手軽にコントロール文字やメタ文字、リテラルや8進文字コードを指定できるように文字の指定をもとめることができます。コマンド@code{quoted-insert}はこの関数を使用しています。"

#. type: defun
#: original_texis/commands.texi:3479
#, no-wrap
msgid "read-quoted-char &optional prompt"
msgstr "read-quoted-char &optional prompt"

#. type: cindex
#: original_texis/commands.texi:3480
#, no-wrap
msgid "octal character input"
msgstr "octal character input"

#. type: cindex
#: original_texis/commands.texi:3481
#, no-wrap
msgid "control characters, reading"
msgstr "control characters, reading"

#. type: cindex
#: original_texis/commands.texi:3482
#, no-wrap
msgid "nonprinting characters, reading"
msgstr "nonprinting characters, reading"

#. type: defun
#: original_texis/commands.texi:3490
msgid "This function is like @code{read-char}, except that if the first character read is an octal digit (0--7), it reads any number of octal digits (but stopping if a non-octal digit is found), and returns the character represented by that numeric character code.  If the character that terminates the sequence of octal digits is @key{RET}, it is discarded.  Any other terminating character is used as input after this function returns."
msgstr "この関数は@code{read-char}と同様だが、最初に読み取った文字が8進数(0--7)なら任意の個数の8進数(8進数以外の文字を見つけた時点でストップする)を読み取って、その文字コードにより表される文字をリターンする。8進シーケンスを終端させた文字が@key{RET}ならそれは無視される。他の終端文字はこの関数がリターンした後の入力として使用される。"

#. type: defun
#: original_texis/commands.texi:3493
msgid "Quitting is suppressed when the first character is read, so that the user can enter a @kbd{C-g}.  @xref{Quitting}."
msgstr "最初の文字の読み取り時にはquitは抑制されるので、ユーザーはは@kbd{C-g}を入力できる。@ref{Quitting}を参照のこと。"

#. type: defun
#: original_texis/commands.texi:3497
msgid "If @var{prompt} is supplied, it specifies a string for prompting the user.  The prompt string is always displayed in the echo area, followed by a single @samp{-}."
msgstr "@var{prompt}が与えられたら、それはユーザーへのプロンプトに使用する文字列を指定する。プロンプト文字列はその後に1つの@samp{-}とともに常にエコーエリアに表示される。"

#. type: defun
#: original_texis/commands.texi:3500
msgid "In the following example, the user types in the octal number 177 (which is 127 in decimal)."
msgstr "以下の例ではユーザーは8進数の177(10進数の127)をタイプしている。"

#. type: example
#: original_texis/commands.texi:3503
#, no-wrap
msgid ""
"(read-quoted-char \"What character\")\n"
"\n"
msgstr ""
"(read-quoted-char \"What character\")\n"
"\n"

#. type: group
#: original_texis/commands.texi:3508
#, no-wrap
msgid ""
"---------- Echo Area ----------\n"
"What character @kbd{1 7 7}-\n"
"---------- Echo Area ----------\n"
"\n"
msgstr ""
"---------- Echo Area ----------\n"
"What character @kbd{1 7 7}-\n"
"---------- Echo Area ----------\n"
"\n"

#. type: group
#: original_texis/commands.texi:3510
#, no-wrap
msgid "     @result{} 127\n"
msgstr "     @result{} 127\n"

#. type: subsection
#: original_texis/commands.texi:3516
#, no-wrap
msgid "Miscellaneous Event Input Features"
msgstr "Miscellaneous Event Input Features"

#. type: Plain text
#: original_texis/commands.texi:3522
msgid "This section describes how to peek ahead at events without using them up, how to check for pending input, and how to discard pending input.  See also the function @code{read-passwd} (@pxref{Reading a Password})."
msgstr "このセクションではイベントを使い切らずに先読みする方法と、入力の保留や保留の破棄の方法について説明します。@ref{Reading a Password}の関数@code{read-passwd}も参照してください。"

#. type: defvar
#: original_texis/commands.texi:3523
#, no-wrap
msgid "unread-command-events"
msgstr "unread-command-events"

#. type: cindex
#: original_texis/commands.texi:3524
#, no-wrap
msgid "next input"
msgstr "next input"

#. type: cindex
#: original_texis/commands.texi:3525
#, no-wrap
msgid "peeking at input"
msgstr "peeking at input"

#. type: defvar
#: original_texis/commands.texi:3529
msgid "This variable holds a list of events waiting to be read as command input.  The events are used in the order they appear in the list, and removed one by one as they are used."
msgstr "この変数はコマンド入力として読み取り待機中のイベントのリストを保持する。イベントはこのリスト内の出現順に使用され、使用されるごとにリストから取り除かれる。"

#. type: defvar
#: original_texis/commands.texi:3534
msgid "The variable is needed because in some cases a function reads an event and then decides not to use it.  Storing the event in this variable causes it to be processed normally, by the command loop or by the functions to read command input."
msgstr "ある関数がイベントを読み取ってそれを使用するかどうか決定する場合がいくつかあるためにこの変数が必要になる。この変数にイベントを格納するとコマンドループやコマンド入力を読み取る関数によってイベントは通常のように処理される。"

#. type: cindex
#: original_texis/commands.texi:3535
#, no-wrap
msgid "prefix argument unreading"
msgstr "prefix argument unreading"

#. type: defvar
#: original_texis/commands.texi:3542
msgid "For example, the function that implements numeric prefix arguments reads any number of digits.  When it finds a non-digit event, it must unread the event so that it can be read normally by the command loop.  Likewise, incremental search uses this feature to unread events with no special meaning in a search, because these events should exit the search and then execute normally."
msgstr "たとえば数引数を実装する関数は、任意の個数の数字を読み取る。数字イベントが見つからないとき、関数はそのイベントを読み戻す(unread)ので、そのイベントはコマンドループによって通常通り読み取られることができる。同様にインクリメンタル検索は、検索において特別な意味をもたないイベントを読み戻すためにこの機能を使用する。なぜならそれらのイベントは検索をexitして、通常どおり実行されるべきだからである。"

#. type: defvar
#: original_texis/commands.texi:3546
msgid "The reliable and easy way to extract events from a key sequence so as to put them in @code{unread-command-events} is to use @code{listify-key-sequence} (see below)."
msgstr "@code{unread-command-events}にイベントを置くためにキーシーケンスからイベントを抽出するには、@code{listify-key-sequence} (以下参照)を使用するのが簡単で信頼のおける方法である。"

#. type: defvar
#: original_texis/commands.texi:3549
msgid "Normally you add events to the front of this list, so that the events most recently unread will be reread first."
msgstr "もっとも最近読み戻したイベントが最初に再読み取りされるように、通常はこのリストの先頭にイベントを追加する。"

#. type: defvar
#: original_texis/commands.texi:3555
msgid "Events read from this list are not normally added to the current command's key sequence (as returned by, e.g., @code{this-command-keys}), as the events will already have been added once as they were read for the first time.  An element of the form @w{@code{(t . @var{event})}} forces @var{event} to be added to the current command's key sequence."
msgstr "このリストから読み取ったイベントは、通常はそのイベントが最初に読み取られたときにすでに一度追加されたときのように、カレントコマンドのキーシーケンスに(たとえば@code{this-command-keys}にリターンされたときのように)追加される。フォーム@w{@code{(t . @var{event})}}の要素はカレントコマンドのキーシーケンスに@var{event}を強制的に追加する。"

#. type: cindex
#: original_texis/commands.texi:3556
#, no-wrap
msgid "not recording input events"
msgstr "not recording input events"

#. type: cindex
#: original_texis/commands.texi:3557
#, no-wrap
msgid "input events, prevent recording"
msgstr "input events, prevent recording"

#. type: defvar
#: original_texis/commands.texi:3563
msgid "Elements read from this list are normally recorded by the record-keeping features (@pxref{Recording Input}) and while defining a keyboard macro (@pxref{Keyboard Macros}).  However, an element of the form @w{@code{(no-record . @var{event})}} causes @var{event} to be processed normally without recording it."
msgstr "このリストから読み取った要素は通常は記録保持機能(@ref{Recording Input}を参照)により記録されるとともに、キーボードマクロ定義の間(@ref{Keyboard Macros}を参照)は記録される。しかし@w{@code{(no-record . @var{event})}}という形式の要素は、通常は記録されることなく@var{event}が処理される。"

#. type: defun
#: original_texis/commands.texi:3565
#, no-wrap
msgid "listify-key-sequence key"
msgstr "listify-key-sequence key"

#. type: defun
#: original_texis/commands.texi:3568
msgid "This function converts the string or vector @var{key} to a list of individual events, which you can put in @code{unread-command-events}."
msgstr "この関数は文字列かベクターの@var{key}を@code{unread-command-events}にputすることができる個別のイベントのリストに変換する。"

#. type: defun
#: original_texis/commands.texi:3570
#, no-wrap
msgid "input-pending-p &optional check-timers"
msgstr "input-pending-p &optional check-timers"

#. type: cindex
#: original_texis/commands.texi:3571
#, no-wrap
msgid "waiting for command key input"
msgstr "waiting for command key input"

#. type: defun
#: original_texis/commands.texi:3576
msgid "This function determines whether any command input is currently available to be read.  It returns immediately, with value @code{t} if there is available input, @code{nil} otherwise.  On rare occasions it may return @code{t} when no input is available."
msgstr "この関数はコマンド入力がカレントで読み取り可能かどうか判断する。入力が利用可能なら@code{t}、それ以外は@code{nil}を即座にリターンする。非常に稀だが入力が利用できないときは@code{t}をリターンする。"

#. type: defun
#: original_texis/commands.texi:3580
msgid "If the optional argument @var{check-timers} is non-@code{nil}, then if no input is available, Emacs runs any timers which are ready.  @xref{Timers}."
msgstr "オプション引数@var{check-timers}が非@code{nil}なら、Emacsは準備ができるとすべてのタイマーを実行する。@ref{Timers}を参照のこと。"

#. type: defvar
#: original_texis/commands.texi:3582
#, no-wrap
msgid "last-input-event"
msgstr "last-input-event"

#. type: defvar
#: original_texis/commands.texi:3585
msgid "This variable records the last terminal input event read, whether as part of a command or explicitly by a Lisp program."
msgstr "この変数は最後に読み取られた端末入力イベントがコマンドの一部なのか、それともLispプログラムによる明示的なものなのかを記録する。"

#. type: defvar
#: original_texis/commands.texi:3590
msgid "In the example below, the Lisp program reads the character @kbd{1}, @acronym{ASCII} code 49.  It becomes the value of @code{last-input-event}, while @kbd{C-e} (we assume @kbd{C-x C-e} command is used to evaluate this expression) remains the value of @code{last-command-event}."
msgstr "以下の例では文字@kbd{1}(@acronym{ASCII}コード49)をLispプログラムが読み取っている。@kbd{C-e} (@kbd{C-x C-e}は式を評価するコマンドとする)が@code{last-command-event}に値として残っている間は、それが@code{last-input-event}の値となる。"

#. type: group
#: original_texis/commands.texi:3599
#, no-wrap
msgid ""
"(progn (print (read-char))\n"
"       (print last-command-event)\n"
"       last-input-event)\n"
"     @print{} 49\n"
"     @print{} 5\n"
"     @result{} 49\n"
msgstr ""
"(progn (print (read-char))\n"
"       (print last-command-event)\n"
"       last-input-event)\n"
"     @print{} 49\n"
"     @print{} 5\n"
"     @result{} 49\n"

#. type: defmac
#: original_texis/commands.texi:3603
#, no-wrap
msgid "while-no-input body@dots{}"
msgstr "while-no-input body@dots{}"

#. type: defmac
#: original_texis/commands.texi:3610
msgid "This construct runs the @var{body} forms and returns the value of the last one---but only if no input arrives.  If any input arrives during the execution of the @var{body} forms, it aborts them (working much like a quit).  The @code{while-no-input} form returns @code{nil} if aborted by a real quit, and returns @code{t} if aborted by arrival of other input."
msgstr "この構文は@var{body}フォームを実行して、入力が何も到着しない場合だけ最後のフォームの値をリターンする。@var{body}フォームを実行する間に何らかの入力が到着したら、それらの入力をabortする(quitのように機能する)。@code{while-no-input}フォームは実際のquitによりabortしたら@code{nil}、入力の到着によってabortしたら@code{t}をリターンする。"

#. type: defmac
#: original_texis/commands.texi:3614
msgid "If a part of @var{body} binds @code{inhibit-quit} to non-@code{nil}, arrival of input during those parts won't cause an abort until the end of that part."
msgstr "@var{body}の一部で@code{inhibit-quit}を非@code{nil}にバインドすると、その部分の間に到着した入力はその部分が終わるまでabortしない。"

#. type: defmac
#: original_texis/commands.texi:3618
msgid "If you want to be able to distinguish all possible values computed by @var{body} from both kinds of abort conditions, write the code like this:"
msgstr "両方のabort条件を@var{body}により計算された可能なすべての値で区別できるようにしたければ、以下のようにコードを記述する:"

#. type: example
#: original_texis/commands.texi:3623
#, no-wrap
msgid ""
"(while-no-input\n"
"  (list\n"
"    (progn . @var{body})))\n"
msgstr ""
"(while-no-input\n"
"  (list\n"
"    (progn . @var{body})))\n"

#. type: defvar
#: original_texis/commands.texi:3626
#, no-wrap
msgid "while-no-input-ignore-events"
msgstr "while-no-input-ignore-events"

#. type: defvar
#: original_texis/commands.texi:3629
msgid "This variable allow setting which special events @code{while-no-input} should ignore.  It is a list of event symbols (@pxref{Event Examples})."
msgstr "この変数は@code{while-no-input}が無視するべきスペシャルイベントのセッティングを可能にする。これはイベントシンボルのリスト(@ref{Event Examples}を参照)。"

#. type: defun
#: original_texis/commands.texi:3632
#, no-wrap
msgid "discard-input"
msgstr "discard-input"

#. type: cindex
#: original_texis/commands.texi:3633
#, no-wrap
msgid "flushing input"
msgstr "flushing input"

#. type: cindex
#: original_texis/commands.texi:3634
#, no-wrap
msgid "discarding input"
msgstr "discarding input"

#. type: cindex
#: original_texis/commands.texi:3635
#, no-wrap
msgid "keyboard macro, terminating"
msgstr "keyboard macro, terminating"

#. type: defun
#: original_texis/commands.texi:3639
msgid "This function discards the contents of the terminal input buffer and cancels any keyboard macro that might be in the process of definition.  It returns @code{nil}."
msgstr "この関数は端末入力バッファーの内容を破棄して定義処理中かもしれないキーボードマクロをキャンセルする。この関数は@code{nil}をリターンする。"

#. type: defun
#: original_texis/commands.texi:3644
msgid "In the following example, the user may type a number of characters right after starting the evaluation of the form.  After the @code{sleep-for} finishes sleeping, @code{discard-input} discards any characters typed during the sleep."
msgstr "以下の例ではフォームの評価開始直後にユーザーが数字か文字をタイプするかもしれない。@code{sleep-for}がスリープを終えた後に@code{discard-input}はスリープ中にタイプされた文字を破棄する。"

#. type: example
#: original_texis/commands.texi:3649
#, no-wrap
msgid ""
"(progn (sleep-for 2)\n"
"       (discard-input))\n"
"     @result{} nil\n"
msgstr ""
"(progn (sleep-for 2)\n"
"       (discard-input))\n"
"     @result{} nil\n"

#. type: cindex
#: original_texis/commands.texi:3655
#, no-wrap
msgid "special events"
msgstr "special events"

#. type: Plain text
#: original_texis/commands.texi:3660
msgid "Certain @dfn{special events} are handled at a very low level---as soon as they are read.  The @code{read-event} function processes these events itself, and never returns them.  Instead, it keeps waiting for the first event that is not special and returns that one."
msgstr "特定の@dfn{スペシャルイベント(special event)}は、読み取られると即座に非常に低レベルで処理されます。@code{read-event}関数はそれらのイベントを自身で処理してそれらを決してリターンしません。かわりにスペシャルイベント以外の最初のイベントを待ってそれをリターンします。"

#. type: Plain text
#: original_texis/commands.texi:3668
msgid "Special events do not echo, they are never grouped into key sequences, and they never appear in the value of @code{last-command-event} or @code{(this-command-keys)}.  They do not discard a numeric argument, they cannot be unread with @code{unread-command-events}, they may not appear in a keyboard macro, and they are not recorded in a keyboard macro while you are defining one."
msgstr "スペシャルイベントはエコーされず、決してキーシーケンスにグループ化されず、@code{last-command-event}や@code{(this-command-keys)}の値として出現することもありません。スペシャルイベントは数引数を破棄して、@code{unread-command-events}による読み戻しができず、キーボードマクロ内に出現することもなく、キーボードマクロ定義中にキーボードマクロに記録されることもありません。"

#. type: Plain text
#: original_texis/commands.texi:3672
msgid "Special events do, however, appear in @code{last-input-event} immediately after they are read, and this is the way for the event's definition to find the actual event."
msgstr "しかしスペシャルイベントは読み取られた直後に@code{last-input-event}内に出現するので、これがイベント定義にたいして実際のイベントを探す方法になります。"

#. type: Plain text
#: original_texis/commands.texi:3679
msgid "The events types @code{iconify-frame}, @code{make-frame-visible}, @code{delete-frame}, @code{drag-n-drop}, @code{language-change}, and user signals like @code{sigusr1} are normally handled in this way.  The keymap which defines how to handle special events---and which events are special---is in the variable @code{special-event-map} (@pxref{Controlling Active Maps})."
msgstr "イベント型@code{iconify-frame}、@code{make-frame-visible}、@code{delete-frame}、@code{drag-n-drop}、@code{language-change}、および@code{sigusr1}ようなユーザーシグナルは通常はこの方法によって処理されます。何がスペシャルイベントで、スペシャルイベントをどのように処理するかを定義するキーマップは変数@code{special-event-map} (@ref{Controlling Active Maps}を参照)の中にあります。"

#. type: section
#: original_texis/commands.texi:3681
#, no-wrap
msgid "Waiting for Elapsed Time or Input"
msgstr "Waiting for Elapsed Time or Input"

#. type: cindex
#: original_texis/commands.texi:3682
#, no-wrap
msgid "waiting"
msgstr "waiting"

#. type: Plain text
#: original_texis/commands.texi:3690
msgid "The wait functions are designed to wait for a certain amount of time to pass or until there is input.  For example, you may wish to pause in the middle of a computation to allow the user time to view the display.  @code{sit-for} pauses and updates the screen, and returns immediately if input comes in, while @code{sleep-for} pauses without updating the screen."
msgstr "待機関数(wait function)は特定の時間が経過するか、入力があるまで待機するようにデザインされています。たとえば計算の途中でユーザーがディスプレイを閲覧できるように一時停止したいときがあるかもしれません。@code{sit-for}は一時停止して画面を更新して、@code{sleep-for}は画面を更新せずに一時停止して入力が到着したら即座にリターンします。"

#. type: defun
#: original_texis/commands.texi:3691
#, no-wrap
msgid "sit-for seconds &optional nodisp"
msgstr "sit-for seconds &optional nodisp"

#. type: defun
#: original_texis/commands.texi:3698
msgid "This function performs redisplay (provided there is no pending input from the user), then waits @var{seconds} seconds, or until input is available.  The usual purpose of @code{sit-for} is to give the user time to read text that you display.  The value is @code{t} if @code{sit-for} waited the full time with no input arriving (@pxref{Event Input Misc}).  Otherwise, the value is @code{nil}."
msgstr "この関数は、(ユーザーからの保留中入力がければ)再描画を行ってから@var{seconds}秒、または入力が利用可能になるまで待機する。@code{sit-for}の通常の目的は、表示したテキストをユーザーが読み取る時間を与えるためである。入力が何も到着せず(@ref{Event Input Misc}を参照)、時間をフルに待機したら@code{t}、それ以外は@code{nil}が値となる。"

#. type: defun
#: original_texis/commands.texi:3703
msgid "The argument @var{seconds} need not be an integer.  If it is floating point, @code{sit-for} waits for a fractional number of seconds.  Some systems support only a whole number of seconds; on these systems, @var{seconds} is rounded down."
msgstr "引数@var{seconds}は整数である必要はない。浮動小数点数なら@code{sit-for}は小数点数の秒を待機する。整数の秒だけをサポートするいくつかのシステムでは@var{seconds}は切り捨てられる。"

#. type: defun
#: original_texis/commands.texi:3707
msgid "The expression @code{(sit-for 0)} is equivalent to @code{(redisplay)}, i.e., it requests a redisplay, without any delay, if there is no pending input.  @xref{Forcing Redisplay}."
msgstr "保留中の入力が存在しなければ、式@code{(sit-for 0)}は遅延なしで再描画をリクエストする@code{(redisplay)}と等価である。@ref{Forcing Redisplay}を参照のこと。"

#. type: defun
#: original_texis/commands.texi:3711
msgid "If @var{nodisp} is non-@code{nil}, then @code{sit-for} does not redisplay, but it still returns as soon as input is available (or when the timeout elapses)."
msgstr "@var{nodisp}が非@code{nil}なら@code{sit-for}は再描画を行わないが、それでも入力が利用可能になると(またはタイムアウト時間が経過すると)即座にリターンする。"

#. type: defun
#: original_texis/commands.texi:3715
msgid "In batch mode (@pxref{Batch Mode}), @code{sit-for} cannot be interrupted, even by input from the standard input descriptor.  It is thus equivalent to @code{sleep-for}, which is described below."
msgstr "batchモード(@ref{Batch Mode}を参照)では、たとえ標準入力ディスクリプタからの入力でも割り込みできない。これは以下で説明する@code{sleep-for}でも同様。"

#. type: defun
#: original_texis/commands.texi:3719
msgid "It is also possible to call @code{sit-for} with three arguments, as @code{(sit-for @var{seconds} @var{millisec} @var{nodisp})}, but that is considered obsolete."
msgstr "@code{(sit-for @var{seconds} @var{millisec} @var{nodisp})}のように3つの引数で@code{sit-for}を呼び出すことも可能だが、時代遅れだと考えられている。"

#. type: defun
#: original_texis/commands.texi:3721
#, no-wrap
msgid "sleep-for seconds &optional millisec"
msgstr "sleep-for seconds &optional millisec"

#. type: defun
#: original_texis/commands.texi:3725
msgid "This function simply pauses for @var{seconds} seconds without updating the display.  It pays no attention to available input.  It returns @code{nil}."
msgstr "この関数は表示を更新せず単に@var{seconds}秒の間一時停止する。これは利用可能な入力に注意を払わない。この関数は@code{nil}をリターンする。"

#. type: defun
#: original_texis/commands.texi:3730
msgid "The argument @var{seconds} need not be an integer.  If it is floating point, @code{sleep-for} waits for a fractional number of seconds.  Some systems support only a whole number of seconds; on these systems, @var{seconds} is rounded down."
msgstr "引数@var{seconds}は整数である必要はない。浮動小数点数なら@code{sleep-for}は小数点数の秒を待機する。整数の秒だけをサポートするいくつかのシステムでは@var{seconds}は切り捨てられる。"

#. type: defun
#: original_texis/commands.texi:3735
msgid "The optional argument @var{millisec} specifies an additional waiting period measured in milliseconds.  This adds to the period specified by @var{seconds}.  If the system doesn't support waiting fractions of a second, you get an error if you specify nonzero @var{millisec}."
msgstr "オプション引数@var{millisec}はミリ秒単位で追加の待機時間を指定する。これは@var{seconds}で指定された時間に追加される。システムが小数点数の秒数をサポートしなければ、非0の@var{millisec}を指定するとエラーとなる。"

#. type: defun
#: original_texis/commands.texi:3737
msgid "Use @code{sleep-for} when you wish to guarantee a delay."
msgstr "遅延を保証したければ@code{sleep-for}を使用すること。"

#. type: Plain text
#: original_texis/commands.texi:3740
msgid "@xref{Time of Day}, for functions to get the current time."
msgstr "現在時刻を取得する関数については@ref{Time of Day}を参照してください。"

#. type: kbd{#1}
#: original_texis/commands.texi:3743
#, no-wrap
msgid "C-g"
msgstr "C-g"

#. type: cindex
#: original_texis/commands.texi:3744
#, no-wrap
msgid "quitting"
msgstr "quitting"

#. type: cindex
#: original_texis/commands.texi:3745
#, no-wrap
msgid "interrupt Lisp functions"
msgstr "interrupt Lisp functions"

#. type: Plain text
#: original_texis/commands.texi:3750
msgid "Typing @kbd{C-g} while a Lisp function is running causes Emacs to @dfn{quit} whatever it is doing.  This means that control returns to the innermost active command loop."
msgstr "Lisp関数を実行中に@kbd{C-g}をタイプすると、Emacsが何を行っていてもEmacsを@dfn{quit(中止、終了)}させます。これはアクティブなコマンドループの最内に制御がリターンすることを意味します。"

#. type: Plain text
#: original_texis/commands.texi:3758
msgid "Typing @kbd{C-g} while the command loop is waiting for keyboard input does not cause a quit; it acts as an ordinary input character.  In the simplest case, you cannot tell the difference, because @kbd{C-g} normally runs the command @code{keyboard-quit}, whose effect is to quit.  However, when @kbd{C-g} follows a prefix key, they combine to form an undefined key.  The effect is to cancel the prefix key as well as any prefix argument."
msgstr "コマンドループがキーボード入力の待機中に@kbd{C-g}をタイプしてもquitはしません。これは通常の入力文字として機能します。もっともシンプルなケースでは、通常@kbd{C-g}はquitの効果をもつ@code{keyboard-quit}を実行するので区別はできません。しかしプレフィクスキーの後の@kbd{C-g}は、未定義のキー組み合わせになります。これはプレフィクスキーやプレフィクス引数も同様にキャンセルする効果をもちます。"

#. type: Plain text
#: original_texis/commands.texi:3768
msgid "In the minibuffer, @kbd{C-g} has a different definition: it aborts out of the minibuffer.  This means, in effect, that it exits the minibuffer and then quits.  (Simply quitting would return to the command loop @emph{within} the minibuffer.)  The reason why @kbd{C-g} does not quit directly when the command reader is reading input is so that its meaning can be redefined in the minibuffer in this way.  @kbd{C-g} following a prefix key is not redefined in the minibuffer, and it has its normal effect of canceling the prefix key and prefix argument.  This too would not be possible if @kbd{C-g} always quit directly."
msgstr "ミニバッファー内では@kbd{C-g}は異なる定義をもち、それはミニバッファーをabort(失敗、中止、中断)します。これは実際にはミニバッファーをexitしてquitします(単にquitするのは@emph{ミニバッファー内}のコマンドループにリターンするだろう)。@kbd{C-g}がなぜコマンドリーダーが入力読み取り時に直接quitしないかという理由は、ミニバッファー内での@kbd{C-g}の意味をこの方法によって再定義可能にするためです。プレフィクスキーの後の@kbd{C-g}はミニバッファー内で再定義されておらず、プレフィクスキーおよびプレフィクス引数のキャンセルという通常の効果をもちます。もし@kbd{C-g}が常に直接quitするならこれは不可能でしょう。"

#. type: Plain text
#: original_texis/commands.texi:3773
msgid "When @kbd{C-g} does directly quit, it does so by setting the variable @code{quit-flag} to @code{t}.  Emacs checks this variable at appropriate times and quits if it is not @code{nil}.  Setting @code{quit-flag} non-@code{nil} in any way thus causes a quit."
msgstr "@kbd{C-g}が直接quitを行うときは、変数@code{quit-flag}を@code{t}にセットすることによってそれを行います。Emacsは適切なタイミングでこの変数をチェックして、@code{nil}でなじぇればquitします。どのような方法でも@code{quit-flag}を非@code{nil}にセットするとquitが発生します。"

#. type: Plain text
#: original_texis/commands.texi:3779
msgid "At the level of C code, quitting cannot happen just anywhere; only at the special places that check @code{quit-flag}.  The reason for this is that quitting at other places might leave an inconsistency in Emacs's internal state.  Because quitting is delayed until a safe place, quitting cannot make Emacs crash."
msgstr "Cコードのレベルでは任意の場所でquitを発生させることはできず、@code{quit-flag}をチェックする特別な場所でのみquitが発生します。この理由は他の場所でquitすると、Emacsの内部状態で矛盾が生じるかもしれないからです。安全な場所までquitが遅延されるので、quitがEmacsをクラッシュさせることがなくなります。"

#. type: Plain text
#: original_texis/commands.texi:3787
msgid "Certain functions such as @code{read-key-sequence} or @code{read-quoted-char} prevent quitting entirely even though they wait for input.  Instead of quitting, @kbd{C-g} serves as the requested input.  In the case of @code{read-key-sequence}, this serves to bring about the special behavior of @kbd{C-g} in the command loop.  In the case of @code{read-quoted-char}, this is so that @kbd{C-q} can be used to quote a @kbd{C-g}."
msgstr "@code{read-key-sequence}や@code{read-quoted-char}のような特定の関数は、たとえ入力を待機中でもquitを抑制します。quitするかわりに@kbd{C-g}は要求された入力として処理されます。@code{read-key-sequence}の場合、これはコマンドループ内での@kbd{C-g}の特別な振る舞いを引き起こすのに役立ちます。@code{read-quoted-char}の場合、これは@kbd{C-g}をクォートするのに@kbd{C-q}を使用できるようにします。"

#. type: cindex
#: original_texis/commands.texi:3788
#, no-wrap
msgid "preventing quitting"
msgstr "preventing quitting"

#. type: Plain text
#: original_texis/commands.texi:3798
msgid "You can prevent quitting for a portion of a Lisp function by binding the variable @code{inhibit-quit} to a non-@code{nil} value.  Then, although @kbd{C-g} still sets @code{quit-flag} to @code{t} as usual, the usual result of this---a quit---is prevented.  Eventually, @code{inhibit-quit} will become @code{nil} again, such as when its binding is unwound at the end of a @code{let} form.  At that time, if @code{quit-flag} is still non-@code{nil}, the requested quit happens immediately.  This behavior is ideal when you wish to make sure that quitting does not happen within a critical section of the program."
msgstr "変数@code{inhibit-quit}を非@code{nil}値にバインドすることにより、Lisp関数の一部でquitを抑止できます。その場合は@code{quit-flag}が@code{t}にセットされていても、@kbd{C-g}の通常の結果であるquitは抑止されます。@code{let}フォームの最後でこのバインディングがunwindされるなどして、結果として@code{inhibit-quit}は再び@code{nil}になります。このとき@code{quit-flag}が@code{nil}なら、即座に要求されたquitが発生します。この挙動はプログラム中のクリティカルセクション内でquitが発生しないことを確実にしたいときに理想的です。"

#. type: cindex
#: original_texis/commands.texi:3799
#, no-wrap
msgid "@code{read-quoted-char} quitting"
msgstr "@code{read-quoted-char} quitting"

#. type: Plain text
#: original_texis/commands.texi:3807
msgid "In some functions (such as @code{read-quoted-char}), @kbd{C-g} is handled in a special way that does not involve quitting.  This is done by reading the input with @code{inhibit-quit} bound to @code{t}, and setting @code{quit-flag} to @code{nil} before @code{inhibit-quit} becomes @code{nil} again.  This excerpt from the definition of @code{read-quoted-char} shows how this is done; it also shows that normal quitting is permitted after the first character of input."
msgstr "(@code{read-quoted-char}のような)いくつかの関数では、quitを起こさない特別な方法で@kbd{C-g}が処理されます。これは@code{inhibit-quit}を@code{t}にバインドして入力を読み取り、再び@code{inhibit-quit}が@code{nil}になる前に@code{quit-flag}を@code{nil}にセットすることにより行われます。以下はこれを行う方法を示すための@code{read-quoted-char}の抜粋です。この例は入力の最初の文字の後で通常のquitを許す方法も示しています。"

#. type: example
#: original_texis/commands.texi:3820
#, no-wrap
msgid ""
"(defun read-quoted-char (&optional prompt)\n"
"  \"@dots{}@var{documentation}@dots{}\"\n"
"  (let ((message-log-max nil) done (first t) (code 0) char)\n"
"    (while (not done)\n"
"      (let ((inhibit-quit first)\n"
"            @dots{})\n"
"        (and prompt (message \"%s-\" prompt))\n"
"        (setq char (read-event))\n"
"        (if inhibit-quit (setq quit-flag nil)))\n"
"      @r{@dots{}set the variable @code{code}@dots{}})\n"
"    code))\n"
msgstr ""
"(defun read-quoted-char (&optional prompt)\n"
"  \"@dots{}@var{documentation}@dots{}\"\n"
"  (let ((message-log-max nil) done (first t) (code 0) char)\n"
"    (while (not done)\n"
"      (let ((inhibit-quit first)\n"
"            @dots{})\n"
"        (and prompt (message \"%s-\" prompt))\n"
"        (setq char (read-event))\n"
"        (if inhibit-quit (setq quit-flag nil)))\n"
"      @r{@dots{} 変数@code{code}をセット @dots{}})\n"
"    code))\n"

#. type: defvar
#: original_texis/commands.texi:3822
#, no-wrap
msgid "quit-flag"
msgstr "quit-flag"

#. type: defvar
#: original_texis/commands.texi:3826
msgid "If this variable is non-@code{nil}, then Emacs quits immediately, unless @code{inhibit-quit} is non-@code{nil}.  Typing @kbd{C-g} ordinarily sets @code{quit-flag} non-@code{nil}, regardless of @code{inhibit-quit}."
msgstr "この変数が非@code{nil}で@code{inhibit-quit}が@code{nil}なら、Emacsは即座にquitする。@kbd{C-g}をタイプすると通常は@code{inhibit-quit}とは無関係に@code{quit-flag}を非@code{nil}にセットする。"

#. type: defvar
#: original_texis/commands.texi:3828
#, no-wrap
msgid "inhibit-quit"
msgstr "inhibit-quit"

#. type: defvar
#: original_texis/commands.texi:3832
msgid "This variable determines whether Emacs should quit when @code{quit-flag} is set to a value other than @code{nil}.  If @code{inhibit-quit} is non-@code{nil}, then @code{quit-flag} has no special effect."
msgstr "この変数は@code{quit-flag}が非@code{nil}にセットされているときEmacsがquitするかどうかを決定する。@code{inhibit-quit}が非@code{nil}なら@code{quit-flag}に特に効果はない。"

#. type: defmac
#: original_texis/commands.texi:3834
#, no-wrap
msgid "with-local-quit body@dots{}"
msgstr "with-local-quit body@dots{}"

#. type: defmac
#: original_texis/commands.texi:3840
msgid "This macro executes @var{body} forms in sequence, but allows quitting, at least locally, within @var{body} even if @code{inhibit-quit} was non-@code{nil} outside this construct.  It returns the value of the last form in @var{body}, unless exited by quitting, in which case it returns @code{nil}."
msgstr "このマクロは@var{body}を順番に実行するが、たとえこの構文の外部で@code{inhibit-quit}が非@code{nil}でも、少なくともローカルに@var{body}内でのquitを許容する。このマクロはquitによりexitしたら@code{nil}、それ以外は@var{body}内の最後のフォームの値をリターンする。"

#. type: defmac
#: original_texis/commands.texi:3851
msgid "If @code{inhibit-quit} is @code{nil} on entry to @code{with-local-quit}, it only executes the @var{body}, and setting @code{quit-flag} causes a normal quit.  However, if @code{inhibit-quit} is non-@code{nil} so that ordinary quitting is delayed, a non-@code{nil} @code{quit-flag} triggers a special kind of local quit.  This ends the execution of @var{body} and exits the @code{with-local-quit} body with @code{quit-flag} still non-@code{nil}, so that another (ordinary) quit will happen as soon as that is allowed.  If @code{quit-flag} is already non-@code{nil} at the beginning of @var{body}, the local quit happens immediately and the body doesn't execute at all."
msgstr "@code{inhibit-quit}が@code{nil}なら@code{with-local-quit}へのエントリーで@var{body}だけが実行され、@code{quit-flag}をセットすることにより通常のquitが発生する。しかし通常のquitが遅延されるように@code{inhibit-quit}が非@code{nil}にセットされていれば、非@code{nil}の@code{quit-flag}は特別な種類のローカルquitを引き起こす。これは@var{body}の実行を終了して、@code{quit-flag}を非@code{nil}のままにして@code{with-local-quit}のbodyをexitするので、許され次第(通常の)別のquitが発生する。@var{body}の先頭ですでに@code{quit-flag}が非@code{nil}なら即座にローカルquitが発生して結局bodyは実行されない。"

#. type: defmac
#: original_texis/commands.texi:3856
msgid "This macro is mainly useful in functions that can be called from timers, process filters, process sentinels, @code{pre-command-hook}, @code{post-command-hook}, and other places where @code{inhibit-quit} is normally bound to @code{t}."
msgstr "このマクロは主にタイマー、プロセスフィルター、プロセスセンチネル、@code{pre-command-hook}、@code{post-command-hook}、および@code{inhibit-quit}が通常のように@code{t}にバイドされている場所で役に立つ。"

#. type: deffn
#: original_texis/commands.texi:3858
#, no-wrap
msgid "Command keyboard-quit"
msgstr "Command keyboard-quit"

#. type: deffn
#: original_texis/commands.texi:3862
msgid "This function signals the @code{quit} condition with @code{(signal 'quit nil)}.  This is the same thing that quitting does.  (See @code{signal} in @ref{Errors}.)"
msgstr "この関数は@code{(signal 'quit nil)}によって@code{quit}条件をシグナルする。これはquitが行うことと同じ(@ref{Errors}の@code{signal}を参照)。"

#. type: Plain text
#: original_texis/commands.texi:3869
msgid "To quit without aborting a keyboard macro definition or execution, you can signal the @code{minibuffer-quit} condition.  This has almost the same effect as the @code{quit} condition except that the error handling in the command loop handles it without exiting keyboard macro definition or execution."
msgstr "キーボードマクロの定義や実行をabortさせることなくquitするために、@code{minibuffer-quit}条件をシグナルすることができます。これはキーボードマクロの定義や実行をexitせずに、コマンド内のエラーハンドラーがこの条件を処理することを除き、@code{quit}とほとんど同じ効果をもつ。"

#. type: Plain text
#: original_texis/commands.texi:3872
msgid "You can specify a character other than @kbd{C-g} to use for quitting.  See the function @code{set-input-mode} in @ref{Input Modes}."
msgstr "quitに使用する@kbd{C-g}以外の文字を指定できます。@ref{Input Modes}内の関数@code{set-input-mode}を参照してください。"

#. type: cindex
#: original_texis/commands.texi:3875
#, no-wrap
msgid "prefix argument"
msgstr "prefix argument"

#. type: cindex
#: original_texis/commands.texi:3876
#, no-wrap
msgid "raw prefix argument"
msgstr "raw prefix argument"

#. type: cindex
#: original_texis/commands.texi:3877
#, no-wrap
msgid "numeric prefix argument"
msgstr "numeric prefix argument"

#. type: Plain text
#: original_texis/commands.texi:3884
msgid "Most Emacs commands can use a @dfn{prefix argument}, a number specified before the command itself.  (Don't confuse prefix arguments with prefix keys.)  The prefix argument is at all times represented by a value, which may be @code{nil}, meaning there is currently no prefix argument.  Each command may use the prefix argument or ignore it."
msgstr "ほとんどのEmacsコマンドは@dfn{プレフィクス引数(prefix argument)}を使用できます。プレフィクス引数はコマンド自身の前に数字を指定するものです(プレフィクス引数とプレフィクスキーを混同しないこと)。プレフィクス引数は常に値により表され、@code{nil}のときはカレントでプレフィクス引数が存在しないことを意味します。すべてのコマンドはプレフィクス引数を使用するか、あるいは無視します。"

#. type: Plain text
#: original_texis/commands.texi:3889
msgid "There are two representations of the prefix argument: @dfn{raw} and @dfn{numeric}.  The editor command loop uses the raw representation internally, and so do the Lisp variables that store the information, but commands can request either representation."
msgstr "プレフィクス引数には2つの表現があります。それは@dfn{raw(生の、加工していない、原料のままの、未加工の)}と@dfn{数字(numeric)}です。エディターコマンドループは内部的にraw表現を使用し、Lisp変数もその情報を格納するのにこれを使用しますが、コマンドはいずれかの表現を要求できます。"

#. type: Plain text
#: original_texis/commands.texi:3891
msgid "Here are the possible values of a raw prefix argument:"
msgstr "以下は利用できるrawプレフィクス引数の値です:"

#. type: itemize
#: original_texis/commands.texi:3897
msgid "@code{nil}, meaning there is no prefix argument.  Its numeric value is 1, but numerous commands make a distinction between @code{nil} and the integer 1."
msgstr "@code{nil}はプレフィクス引数がないことを意味する。これの数値的な値は1だが多くのコマンドは@code{nil}と整数1を区別する。"

#. type: itemize
#: original_texis/commands.texi:3900
msgid "An integer, which stands for itself."
msgstr "整数はそれ自身を意味する。"

#. type: itemize
#: original_texis/commands.texi:3906
msgid "A list of one element, which is an integer.  This form of prefix argument results from one or a succession of @kbd{C-u}s with no digits.  The numeric value is the integer in the list, but some commands make a distinction between such a list and an integer alone."
msgstr "整数の要素を1つもつリスト。プレフィクス引数のこの形式は、1つまたは数字無しの連続する@kbd{C-u}の結果である。数値的な値はリスト内の整数だが、そのようなリストと単独の整数を区別するコマンドがいくつかある。"

#. type: itemize
#: original_texis/commands.texi:3912
msgid "The symbol @code{-}.  This indicates that @kbd{M--} or @kbd{C-u -} was typed, without following digits.  The equivalent numeric value is @minus{}1, but some commands make a distinction between the integer @minus{}1 and the symbol @code{-}."
msgstr "シンボル@code{-}。これは後に数字をともなわない@kbd{M--}か@kbd{C-u -}がタイプされたことを示す。数値的に等価な値は@minus{}1だが、整数の@minus{}1をシンボルの@code{-}を区別するコマンドがいくつかある。"

#. type: Plain text
#: original_texis/commands.texi:3916
msgid "We illustrate these possibilities by calling the following function with various prefixes:"
msgstr "以下の関数をさまざまなプレフィクスで呼び出して、これらの可能なプレフィクスを説明しましょう:"

#. type: group
#: original_texis/commands.texi:3923
#, no-wrap
msgid ""
"(defun display-prefix (arg)\n"
"  \"Display the value of the raw prefix arg.\"\n"
"  (interactive \"P\")\n"
"  (message \"%s\" arg))\n"
msgstr ""
"(defun display-prefix (arg)\n"
"  \"rawプレフィクス引数の値を表示する\"\n"
"  (interactive \"P\")\n"
"  (message \"%s\" arg))\n"

#. type: Plain text
#: original_texis/commands.texi:3929
msgid "Here are the results of calling @code{display-prefix} with various raw prefix arguments:"
msgstr "以下はさまざまなrawプレフィクス引数で@code{display-prefix}を呼び出した結果です:"

#. type: example
#: original_texis/commands.texi:3932
#, no-wrap
msgid ""
"        M-x display-prefix  @print{} nil\n"
"\n"
msgstr ""
"        M-x display-prefix  @print{} nil\n"
"\n"

#. type: example
#: original_texis/commands.texi:3934
#, no-wrap
msgid ""
"C-u     M-x display-prefix  @print{} (4)\n"
"\n"
msgstr ""
"C-u     M-x display-prefix  @print{} (4)\n"
"\n"

#. type: example
#: original_texis/commands.texi:3936
#, no-wrap
msgid ""
"C-u C-u M-x display-prefix  @print{} (16)\n"
"\n"
msgstr ""
"C-u C-u M-x display-prefix  @print{} (16)\n"
"\n"

#. type: example
#: original_texis/commands.texi:3938
#, no-wrap
msgid ""
"C-u 3   M-x display-prefix  @print{} 3\n"
"\n"
msgstr ""
"C-u 3   M-x display-prefix  @print{} 3\n"
"\n"

#. type: example
#: original_texis/commands.texi:3940
#, no-wrap
msgid ""
"M-3     M-x display-prefix  @print{} 3      ; @r{(Same as @code{C-u 3}.)}\n"
"\n"
msgstr ""
"M-3     M-x display-prefix  @print{} 3      ; @r{(@code{C-u 3}と同じ)}\n"
"\n"

#. type: example
#: original_texis/commands.texi:3942
#, no-wrap
msgid ""
"C-u -   M-x display-prefix  @print{} -\n"
"\n"
msgstr ""
"C-u -   M-x display-prefix  @print{} -\n"
"\n"

#. type: example
#: original_texis/commands.texi:3944
#, no-wrap
msgid ""
"M--     M-x display-prefix  @print{} -      ; @r{(Same as @code{C-u -}.)}\n"
"\n"
msgstr ""
"M--     M-x display-prefix  @print{} -      ; @r{(@code{C-u -}と同じ)}\n"
"\n"

#. type: example
#: original_texis/commands.texi:3946
#, no-wrap
msgid ""
"C-u - 7 M-x display-prefix  @print{} -7\n"
"\n"
msgstr ""
"C-u - 7 M-x display-prefix  @print{} -7\n"
"\n"

#. type: example
#: original_texis/commands.texi:3948
#, no-wrap
msgid "M-- 7   M-x display-prefix  @print{} -7     ; @r{(Same as @code{C-u -7}.)}\n"
msgstr "M-- 7   M-x display-prefix  @print{} -7     ; @r{(@code{C-u -7}と同じ)}\n"

#. type: Plain text
#: original_texis/commands.texi:3957
msgid "Emacs uses two variables to store the prefix argument: @code{prefix-arg} and @code{current-prefix-arg}.  Commands such as @code{universal-argument} that set up prefix arguments for other commands store them in @code{prefix-arg}.  In contrast, @code{current-prefix-arg} conveys the prefix argument to the current command, so setting it has no effect on the prefix arguments for future commands."
msgstr "Emacsにはプレフィクス引数を格納するために2つの変数@code{prefix-arg}と@code{current-prefix-arg}があります。他のコマンドにたいしてプレフィクス引数をセットアップする@code{universal-argument}のようなコマンドは、プレフィクス引数を@code{prefix-arg}内に格納します。対照的に@code{current-prefix-arg}はカレントコマンドにプレフィクス引数を引き渡すので、これらの変数をセットしても将来のコマンドにたいするプレフィクス引数に効果はありません。"

#. type: Plain text
#: original_texis/commands.texi:3963
msgid "Normally, commands specify which representation to use for the prefix argument, either numeric or raw, in the @code{interactive} specification.  (@xref{Using Interactive}.)  Alternatively, functions may look at the value of the prefix argument directly in the variable @code{current-prefix-arg}, but this is less clean."
msgstr "コマンドは通常は@code{interactive}内で、プレフィクス引数にたいしてrawと数値のどちらの表現を使用するかを指定します(@ref{Using Interactive}を参照)。そのかわりに関数は変数@code{current-prefix-arg}内のプレフィクス引数の値を直接調べるかもしれませんが、これは明確さで劣っています。"

#. type: defun
#: original_texis/commands.texi:3964
#, no-wrap
msgid "prefix-numeric-value arg"
msgstr "prefix-numeric-value arg"

#. type: defun
#: original_texis/commands.texi:3971
msgid "This function returns the numeric meaning of a valid raw prefix argument value, @var{arg}.  The argument may be a symbol, a number, or a list.  If it is @code{nil}, the value 1 is returned; if it is @code{-}, the value @minus{}1 is returned; if it is a number, that number is returned; if it is a list, the @sc{car} of that list (which should be a number) is returned."
msgstr "この関数は@var{arg}の有効なrawプレフィクス引数の数値的な意味をリターンする。引数はシンボル、数字、またはリストかもしれない。これが@code{nil}なら値1、@code{-}なら@minus{}1がリターンされる。これが数字なら、その数字がリターンされる。リスト(数字であること)なら、そのリストの@sc{car}がリターンされる。"

#. type: defvar
#: original_texis/commands.texi:3973
#, no-wrap
msgid "current-prefix-arg"
msgstr "current-prefix-arg"

#. type: defvar
#: original_texis/commands.texi:3977
msgid "This variable holds the raw prefix argument for the @emph{current} command.  Commands may examine it directly, but the usual method for accessing it is with @code{(interactive \"P\")}."
msgstr "この変数は@emph{カレント}のコマンドにたいするrawプレフィクス引数を保持する。コマンドはこの変数を直接調べるかもしれないが、この変数にたいするアクセスには通常は@code{(interactive \"P\")}を使用する。"

#. type: defvar
#: original_texis/commands.texi:3979
#, no-wrap
msgid "prefix-arg"
msgstr "prefix-arg"

#. type: defvar
#: original_texis/commands.texi:3984
msgid "The value of this variable is the raw prefix argument for the @emph{next} editing command.  Commands such as @code{universal-argument} that specify prefix arguments for the following command work by setting this variable."
msgstr "この変数の値は@emph{次}の編集コマンドにたいするrawプレフィクス引数である。後続のコマンドにたいしてプレフィクス引数を指定する@code{universal-argument}のようなコマンドは、この変数をセットすることによって機能する。"

#. type: defvar
#: original_texis/commands.texi:3986
#, no-wrap
msgid "last-prefix-arg"
msgstr "last-prefix-arg"

#. type: defvar
#: original_texis/commands.texi:3988
msgid "The raw prefix argument value used by the previous command."
msgstr "このrawプレフィクス引数の値は、前のコマンドにより使用された値である。"

#. type: Plain text
#: original_texis/commands.texi:3992
msgid "The following commands exist to set up prefix arguments for the following command.  Do not call them for any other reason."
msgstr "以下のコマンドは、後続のコマンドにたいしてプレフィクス引数をセットアップするために存在します。これらを他の用途で呼び出さないでください。"

#. type: deffn
#: original_texis/commands.texi:3993
#, no-wrap
msgid "Command universal-argument"
msgstr "Command universal-argument"

#. type: deffn
#: original_texis/commands.texi:3997
msgid "This command reads input and specifies a prefix argument for the following command.  Don't call this command yourself unless you know what you are doing."
msgstr "このコマンドは入力を読み取って、後続のコマンドにたいするプレフィクス引数を指定する。何をしているかわかっているのでなければ、このコマンドを自分で呼び出してはならない。"

#. type: deffn
#: original_texis/commands.texi:3999
#, no-wrap
msgid "Command digit-argument arg"
msgstr "Command digit-argument arg"

#. type: deffn
#: original_texis/commands.texi:4004
msgid "This command adds to the prefix argument for the following command.  The argument @var{arg} is the raw prefix argument as it was before this command; it is used to compute the updated prefix argument.  Don't call this command yourself unless you know what you are doing."
msgstr "このコマンドは、後続のコマンドにたいしてプレフィクス引数を追加する。引数@var{arg}はこのコマンドの前のrawプレフィクス引数であり、これはプレフィクス引数を更新するために使用される。何をしているかわかっているのでなければ、このコマンドを自分で呼び出してはならない。"

#. type: deffn
#: original_texis/commands.texi:4006
#, no-wrap
msgid "Command negative-argument arg"
msgstr "Command negative-argument arg"

#. type: deffn
#: original_texis/commands.texi:4011
msgid "This command adds to the numeric argument for the next command.  The argument @var{arg} is the raw prefix argument as it was before this command; its value is negated to form the new prefix argument.  Don't call this command yourself unless you know what you are doing."
msgstr "このコマンドは、次のコマンドにたいして数引数を追加する。引数@var{arg}はこのコマンドの前のrawプレフィクス引数であり、この値に負の符号が付されて新しいプレフィクス引数を構築する。何をしているかわかっているのでなければ、このコマンドを自分で呼び出してはならない。"

#. type: cindex
#: original_texis/commands.texi:4015
#, no-wrap
msgid "recursive command loop"
msgstr "recursive command loop"

#. type: cindex
#: original_texis/commands.texi:4016
#, no-wrap
msgid "recursive editing level"
msgstr "recursive editing level"

#. type: cindex
#: original_texis/commands.texi:4017
#, no-wrap
msgid "command loop, recursive"
msgstr "command loop, recursive"

#. type: Plain text
#: original_texis/commands.texi:4026
msgid "The Emacs command loop is entered automatically when Emacs starts up.  This top-level invocation of the command loop never exits; it keeps running as long as Emacs does.  Lisp programs can also invoke the command loop.  Since this makes more than one activation of the command loop, we call it @dfn{recursive editing}.  A recursive editing level has the effect of suspending whatever command invoked it and permitting the user to do arbitrary editing before resuming that command."
msgstr "Emacsはスタートアップ時に、自動的にEmacsコマンドループに移行します。このトップレベルのコマンドループ呼び出しは決してexitすることなく、Emacs実行中は実行を継続します。Lispプログラムもコマンドループを呼び出せます。これは複数のコマンドループを活性化するので、@dfn{再帰編集(recursive editing)}と呼ばれています。再帰編集レベルは呼び出したコマンドが何であれそれをサスペンドして、そのコマンドを再開する前にユーザーが任意の編集を行うことを可能にする効果をもちます。"

#. type: Plain text
#: original_texis/commands.texi:4033
msgid "The commands available during recursive editing are the same ones available in the top-level editing loop and defined in the keymaps.  Only a few special commands exit the recursive editing level; the others return to the recursive editing level when they finish.  (The special commands for exiting are always available, but they do nothing when recursive editing is not in progress.)"
msgstr "再帰編集の間に利用可能なコマンドは、トップレベルの編集ループ内で利用できるコマンドと同じでありキーマップ内で定義されます。数少ない特別なコマンドだけが再帰編集レベルをexitして、他のコマンドは再帰編集レベルが終了したときに再帰編集レベルからリターンします(exitするための特別なコマンドは常に利用できるが再帰編集が行われていないときは何も行わない)。"

#. type: Plain text
#: original_texis/commands.texi:4037
msgid "All command loops, including recursive ones, set up all-purpose error handlers so that an error in a command run from the command loop will not exit the loop."
msgstr "再帰コマンドループを含むすべてのコマンドループは、コマンドループから実行されたコマンド内のエラーによってそのループをexitしないように、汎用エラーハンドラーをセットアップします。"

#. type: cindex
#: original_texis/commands.texi:4038
#, no-wrap
msgid "minibuffer input"
msgstr "minibuffer input"

#. type: Plain text
#: original_texis/commands.texi:4045
msgid "Minibuffer input is a special kind of recursive editing.  It has a few special wrinkles, such as enabling display of the minibuffer and the minibuffer window, but fewer than you might suppose.  Certain keys behave differently in the minibuffer, but that is only because of the minibuffer's local map; if you switch windows, you get the usual Emacs commands."
msgstr "ミニバッファー入力は特殊な再帰編集です。これはミニバッファーとミニバッファーウィンドウの表示を有効にするなどの欠点をもちますが、それはあなたが思うより少ないでしょう。ミニバッファー内では特定のキーの振る舞いが異なりますが、これははミニバッファーのローカルマップによるものです。ウィンドウを切り替えれば通常のEmacsコマンドを使用できます。"

#. type: cindex
#: original_texis/commands.texi:4046
#, no-wrap
msgid "@code{throw} example"
msgstr "@code{throw} example"

#. type: kindex
#: original_texis/commands.texi:4047
#, no-wrap
msgid "exit"
msgstr "exit"

#. type: cindex
#: original_texis/commands.texi:4048
#, no-wrap
msgid "exit recursive editing"
msgstr "exit recursive editing"

#. type: cindex
#: original_texis/commands.texi:4049
#, no-wrap
msgid "aborting"
msgstr "aborting"

#. type: Plain text
#: original_texis/commands.texi:4064
msgid "To invoke a recursive editing level, call the function @code{recursive-edit}.  This function contains the command loop; it also contains a call to @code{catch} with tag @code{exit}, which makes it possible to exit the recursive editing level by throwing to @code{exit} (@pxref{Catch and Throw}).  Throwing a @code{t} value causes @code{recursive-edit} to quit, so that control returns to the command loop one level up.  This is called @dfn{aborting}, and is done by @kbd{C-]} (@code{abort-recursive-edit}).  Similarly, you can throw a string value to make @code{recursive-edit} signal an error, printing this string as the message.  If you throw a function, @code{recursive-edit} will call it without arguments before returning.  Throwing any other value, will make @code{recursive-edit} return normally to the function that called it.  The command @kbd{C-M-c} (@code{exit-recursive-edit}) does this."
msgstr "再帰編集レベルを呼び出すには関数@code{recursive-edit}を呼び出します。この関数はコマンドループを含んでいます。さらに@code{exit}をthrowすることにより再帰編集レベルのexitを可能にする、タグ@code{exit}をともなった@code{catch}呼び出しも含んでいます(@ref{Catch and Throw}を参照)。コマンド@kbd{C-M-c} (@code{exit-recursive-edit})がこれを行います。値@code{t}をthrowすることによって@code{recursive-edit}がquitされるので、1レベル上位のコマンドループに制御がリターンされます。これは@dfn{abort}と呼ばれ、@kbd{C-]}(@code{abort-recursive-edit})がこれを行います。同様に@code{recursive-edit}にエラーをシグナルさせるために文字列値をthrowできます。この文字列はメッセージとしてプリントされます。関数値をthrowすると。@code{recursive-edit}はリターンする前に引数なしでそれを呼び出します。それ以外の値をthrowすると、@code{recursive-edit}は自身を呼び出した関数に正常にリターンします。コマンド@kbd{C-M-c} (@code{exit-recursive-edit})がこれを行います。"

#. type: Plain text
#: original_texis/commands.texi:4074
msgid "Most applications should not use recursive editing, except as part of using the minibuffer.  Usually it is more convenient for the user if you change the major mode of the current buffer temporarily to a special major mode, which should have a command to go back to the previous mode.  (The @kbd{e} command in Rmail uses this technique.)  Or, if you wish to give the user different text to edit recursively, create and select a new buffer in a special mode.  In this mode, define a command to complete the processing and go back to the previous buffer.  (The @kbd{m} command in Rmail does this.)"
msgstr "ほとんどのアプリケーションはミニバッファー使用の一部として使用する場合を除き、再帰編集を使用するべきではありません。カレントバッファーのメジャーモードから特殊なメジャーモードに一時的に変更する場合に、そのモードに戻るコマンドをもつ必要があるときは、通常は再帰編集のほうが便利です(Rmailの@kbd{e}コマンドはこのテクニックを使用)。またはユーザーが新たなバッファーの特殊なモードで、異なるテキストを再帰的に編集・作成・選択できるようにしたい場合が該当します。このモードでは処理を完了させるコマンドを定義して前のバッファーに戻ります(Rmailの@kbd{m}コマンドはこれを使用)。"

#. type: Plain text
#: original_texis/commands.texi:4079
msgid "Recursive edits are useful in debugging.  You can insert a call to @code{debug} into a function definition as a sort of breakpoint, so that you can look around when the function gets there.  @code{debug} invokes a recursive edit but also provides the other features of the debugger."
msgstr "再帰編集はデバッグに便利です。一種のブレークポイントとして関数定義内に@code{debug}を挿入して、関数がそこに達したときにその箇所を調べることができます。@code{debug}は再帰編集を呼び出しますが、デバッガのその他の機能も提供します。"

#. type: Plain text
#: original_texis/commands.texi:4082
msgid "Recursive editing levels are also used when you type @kbd{C-r} in @code{query-replace} or use @kbd{C-x q} (@code{kbd-macro-query})."
msgstr "@code{query-replace}内で@kbd{C-r}をタイプしたときや@kbd{C-x q} (@code{kbd-macro-query})を使用したときにも再帰編集レベルが使用されます。"

#. type: deffn
#: original_texis/commands.texi:4083
#, no-wrap
msgid "Command recursive-edit"
msgstr "Command recursive-edit"

#. type: cindex
#: original_texis/commands.texi:4084
#, no-wrap
msgid "suspend evaluation"
msgstr "suspend evaluation"

#. type: deffn
#: original_texis/commands.texi:4089
msgid "This function invokes the editor command loop.  It is called automatically by the initialization of Emacs, to let the user begin editing.  When called from a Lisp program, it enters a recursive editing level."
msgstr "この関数はエディターコマンドループを呼び出す。これはユーザーに編集を開始させるために、Emacsの初期化により自動的に呼び出される。Lispプログラムから呼び出されたときは再帰編集レベルにエンターする。"

#. type: deffn
#: original_texis/commands.texi:4094
msgid "If the current buffer is not the same as the selected window's buffer, @code{recursive-edit} saves and restores the current buffer.  Otherwise, if you switch buffers, the buffer you switched to is current after @code{recursive-edit} returns."
msgstr "カレントバッファーが選択されたウィンドウのバッファーと異なる場合、@code{recursive-edit}はカレントバッファーの保存とリストアを行う。それ以外ではバッファーを切り替えると、@code{recursive-edit}がリターンした後にその切り替えたバッファーがカレントになる。"

#. type: deffn
#: original_texis/commands.texi:4099
msgid "In the following example, the function @code{simple-rec} first advances point one word, then enters a recursive edit, printing out a message in the echo area.  The user can then do any editing desired, and then type @kbd{C-M-c} to exit and continue executing @code{simple-rec}."
msgstr "以下の例では関数@code{simple-rec}が最初にポイントを1単語分進めてからメッセージをエコーエリアにプリントして再帰編集にエンターする。その後ユーザーは望む編集を行い、@kbd{C-M-c}をタイプすれば再帰編集をexitして@code{simple-rec}の実行を継続できる。"

#. type: example
#: original_texis/commands.texi:4109
#, no-wrap
msgid ""
"(defun simple-rec ()\n"
"  (forward-word 1)\n"
"  (message \"Recursive edit in progress\")\n"
"  (recursive-edit)\n"
"  (forward-word 1))\n"
"     @result{} simple-rec\n"
"(simple-rec)\n"
"     @result{} nil\n"
msgstr ""
"(defun simple-rec ()\n"
"  (forward-word 1)\n"
"  (message \"Recursive edit in progress\")\n"
"  (recursive-edit)\n"
"  (forward-word 1))\n"
"     @result{} simple-rec\n"
"(simple-rec)\n"
"     @result{} nil\n"

#. type: deffn
#: original_texis/commands.texi:4112
#, no-wrap
msgid "Command exit-recursive-edit"
msgstr "Command exit-recursive-edit"

#. type: deffn
#: original_texis/commands.texi:4116
msgid "This function exits from the innermost recursive edit (including minibuffer input).  Its definition is effectively @code{(throw 'exit nil)}."
msgstr "この関数は最内の再帰編集(ミニバッファー入力を含む)からexitする。関数の実質的な定義は@code{(throw 'exit nil)}。"

#. type: deffn
#: original_texis/commands.texi:4118
#, no-wrap
msgid "Command abort-recursive-edit"
msgstr "Command abort-recursive-edit"

#. type: deffn
#: original_texis/commands.texi:4123
msgid "This function aborts the command that requested the innermost recursive edit (including minibuffer input), by signaling @code{quit} after exiting the recursive edit.  Its definition is effectively @code{(throw 'exit t)}.  @xref{Quitting}."
msgstr "この関数は再帰編集をexitした後に@code{quit}をシグナルすることにより、最内の再帰編集(ミニバッファー入力を含む)を要求したコマンドをabortする。関数の実質的な定義は@code{(throw 'exit t)}。@ref{Quitting}を参照のこと。"

#. type: deffn
#: original_texis/commands.texi:4125
#, no-wrap
msgid "Command top-level"
msgstr "Command top-level"

#. type: deffn
#: original_texis/commands.texi:4129
msgid "This function exits all recursive editing levels; it does not return a value, as it jumps completely out of any computation directly back to the main command loop."
msgstr "この関数はすべての再帰編集レベルをexitする。これはすべての計算を直接抜け出してメインのコマンドループに戻って値をリターンしない。"

#. type: defun
#: original_texis/commands.texi:4131
#, no-wrap
msgid "recursion-depth"
msgstr "recursion-depth"

#. type: defun
#: original_texis/commands.texi:4134
msgid "This function returns the current depth of recursive edits.  When no recursive edit is active, it returns 0."
msgstr "この関数は再帰編集のカレントの深さをリターンする。アクティブな再帰編集が存在しなければ0をリターンする。"

#. type: cindex
#: original_texis/commands.texi:4138
#, no-wrap
msgid "disabled command"
msgstr "disabled command"

#. type: Plain text
#: original_texis/commands.texi:4144
msgid "@dfn{Disabling a command} marks the command as requiring user confirmation before it can be executed.  Disabling is used for commands which might be confusing to beginning users, to prevent them from using the commands by accident."
msgstr "@dfn{コマンドを無効化(disabling a command)}とは、それを実行可能にする前にユーザーによる確認を要求するようにコマンドをマークすることです。無効化は初めてのユーザーを混乱させるかもしれないコマンドにたいして、意図せずそのコマンドが使用されるのを防ぐために使用されます。"

#. type: kindex
#: original_texis/commands.texi:4145
#, no-wrap
msgid "disabled"
msgstr "disabled"

#. type: Plain text
#: original_texis/commands.texi:4150
msgid "The low-level mechanism for disabling a command is to put a non-@code{nil} @code{disabled} property on the Lisp symbol for the command.  These properties are normally set up by the user's init file (@pxref{Init File}) with Lisp expressions such as this:"
msgstr "コマンド無効化の低レベルにおけるメカニズムは、そのコマンドにたいするLispシンボルの@code{disabled}プロパティに非@code{nil}をputすることです。これらのプロパティは、通常はユーザーのinitファイル(@ref{Init File}を参照)で以下のようなLisp式によりセットアップされます:"

#. type: example
#: original_texis/commands.texi:4153
#, no-wrap
msgid "(put 'upcase-region 'disabled t)\n"
msgstr "(put 'upcase-region 'disabled t)\n"

#. type: Plain text
#: original_texis/commands.texi:4158
msgid "For a few commands, these properties are present by default (you can remove them in your init file if you wish)."
msgstr "いくつかのコマンドにたいしては、これらのプロパティがデフォルトで与えられています(これらを削除したければinitファイルで削除できる)。"

#. type: Plain text
#: original_texis/commands.texi:4161
msgid "If the value of the @code{disabled} property is a string, the message saying the command is disabled includes that string.  For example:"
msgstr "@code{disabled}プロパティの値が文字列なら、そのコマンドが無効化されていることを告げるメッセージにその文字列が含まれます。たとえば:"

#. type: example
#: original_texis/commands.texi:4165
#, no-wrap
msgid ""
"(put 'delete-region 'disabled\n"
"     \"Text deleted this way cannot be yanked back!\\n\")\n"
msgstr ""
"(put 'delete-region 'disabled\n"
"     \"この方法で削除されたテキストはyankで戻せない!\\n\")\n"

#. type: Plain text
#: original_texis/commands.texi:4171
msgid "@xref{Disabling,,, emacs, The GNU Emacs Manual}, for the details on what happens when a disabled command is invoked interactively.  Disabling a command has no effect on calling it as a function from Lisp programs."
msgstr "無効化されたコマンドをインタラクティブに呼び出したときに何が起こるかの詳細は、@ref{Disabling,,, emacs, The GNU Emacs Manual}を参照してください。コマンドの無効化は、それをLispプログラムから関数として呼び出したときは効果がありません。"

#. type: findex
#: original_texis/commands.texi:4172
#, no-wrap
msgid "command-query"
msgstr "command-query"

#. type: Plain text
#: original_texis/commands.texi:4180
msgid "The value of the @code{disabled} property can also be a list where the first element is the symbol @code{query}.  In that case, the user will be queried whether to execute the command.  The second element in the list should be @code{nil} or non-@code{nil} to say whether to use @code{y-or-n-p} or @code{yes-or-no-p}, respectively, and the third element is the question to use.  The @code{command-query} convenience function should be used to enable querying for a command."
msgstr "@code{disabled}プロパティの値には、1つ目の要素がシンボル@code{query}であるようなリストも指定できます。この場合には、ユーザーはそのコマンドを実行するかどうか問い合わせられることになります。このリストの2つ目の要素には@code{y-or-n-p}を使用するなら@code{nil}、@code{yes-or-no-p}なら非@code{nil}を指定する必要があり、3つ目に要素は質問として使用されます。コマンドにたいする問い合わせを有効にするには、利便性のための関数@code{command-query}を使う必要があります。"

#. type: deffn
#: original_texis/commands.texi:4181
#, no-wrap
msgid "Command enable-command command"
msgstr "Command enable-command command"

#. type: deffn
#: original_texis/commands.texi:4185
msgid "Allow @var{command} (a symbol) to be executed without special confirmation from now on, and alter the user's init file (@pxref{Init File}) so that this will apply to future sessions."
msgstr "その時点から特別な確認なしで@var{command}(シンボル)が実行されることを許す。さらにユーザーのinitファイル(@ref{Init File}を参照)も修正するので将来のセッションにもこれが適用される。"

#. type: deffn
#: original_texis/commands.texi:4187
#, no-wrap
msgid "Command disable-command command"
msgstr "Command disable-command command"

#. type: deffn
#: original_texis/commands.texi:4190
msgid "Require special confirmation to execute @var{command} from now on, and alter the user's init file so that this will apply to future sessions."
msgstr "その時点から@var{command}(シンボル)の実行に特別な確認を要求する。さらにユーザーのinitファイル(@ref{Init File}を参照)も修正するので将来のセッションにもこれが適用される。"

#. type: defvar
#: original_texis/commands.texi:4192
#, no-wrap
msgid "disabled-command-function"
msgstr "disabled-command-function"

#. type: defvar
#: original_texis/commands.texi:4198
msgid "The value of this variable should be a function.  When the user invokes a disabled command interactively, this function is called instead of the disabled command.  It can use @code{this-command-keys} to determine what the user typed to run the command, and thus find the command itself."
msgstr "この変数の値は関数であること。ユーザーが無効化されたコマンドを呼び出したときは無効化されたコマンドのかわりにその関数が呼び出される。そのコマンドを実行するためにユーザーが何のキーをタイプしたかを判断するために@code{this-command-keys}を使用して、そのコマンド自体を探すことができる。"

#. type: defvar
#: original_texis/commands.texi:4201
msgid "The value may also be @code{nil}.  Then all commands work normally, even disabled ones."
msgstr "値は@code{nil}もあり得る。その場合にはたとえ無効化されたコマンドでも、すべてのコマンドが通常のように機能する。"

#. type: defvar
#: original_texis/commands.texi:4204
msgid "By default, the value is a function that asks the user whether to proceed."
msgstr "デフォルトでは値はユーザーに処理を行うかどうかを尋ねる関数。"

#. type: cindex
#: original_texis/commands.texi:4208
#, no-wrap
msgid "command history"
msgstr "command history"

#. type: cindex
#: original_texis/commands.texi:4209
#, no-wrap
msgid "complex command"
msgstr "complex command"

#. type: cindex
#: original_texis/commands.texi:4210
#, no-wrap
msgid "history of commands"
msgstr "history of commands"

#. type: Plain text
#: original_texis/commands.texi:4220
msgid "The command loop keeps a history of the complex commands that have been executed, to make it convenient to repeat these commands.  A @dfn{complex command} is one for which the interactive argument reading uses the minibuffer.  This includes any @kbd{M-x} command, any @kbd{M-:} command, and any command whose @code{interactive} specification reads an argument from the minibuffer.  Explicit use of the minibuffer during the execution of the command itself does not cause the command to be considered complex."
msgstr "コマンドループは複雑なコマンドを手軽に繰り返せるように、すでに実行された複雑なコマンドのヒストリー(history: 履歴)を保持します。@dfn{複雑なコマンド(complex command)}とは、ミニバッファーを使用してinteractive引数を読み取るコマンドです。これには@kbd{M-x}コマンド、@kbd{M-:}コマンド、および@code{interactive}指定によりミニバッファーから引数を読み取るすべてのコマンドが含まれます。コマンド自身の実行の間に明示的にミニバッファーを使用するものは、複雑なコマンドとは判断されません。"

#. type: defvar
#: original_texis/commands.texi:4221
#, no-wrap
msgid "command-history"
msgstr "command-history"

#. type: defvar
#: original_texis/commands.texi:4227
msgid "This variable's value is a list of recent complex commands, each represented as a form to evaluate.  It continues to accumulate all complex commands for the duration of the editing session, but when it reaches the maximum size (@pxref{Minibuffer History}), the oldest elements are deleted as new ones are added."
msgstr "この変数の値は最近実行された複雑なコマンドのリストであり、それぞれが評価されるべきフォームとして表現される。このリストは編集セッションの間、すべての複雑なコマンドを蓄積するが、最大サイズ(@ref{Minibuffer History}を参照)に達したときは、もっとも古い要素が削除されて新たな要素が追加される。"

#. type: group
#: original_texis/commands.texi:4235
#, no-wrap
msgid ""
"command-history\n"
"@result{} ((switch-to-buffer \"chistory.texi\")\n"
"    (describe-key \"^X^[\")\n"
"    (visit-tags-table \"~/emacs/src/\")\n"
"    (find-tag \"repeat-complex-command\"))\n"
msgstr ""
"command-history\n"
"@result{} ((switch-to-buffer \"chistory.texi\")\n"
"    (describe-key \"^X^[\")\n"
"    (visit-tags-table \"~/emacs/src/\")\n"
"    (find-tag \"repeat-complex-command\"))\n"

#. type: Plain text
#: original_texis/commands.texi:4242
msgid "This history list is actually a special case of minibuffer history (@pxref{Minibuffer History}), with one special twist: the elements are expressions rather than strings."
msgstr "このヒストリーリストは実際にはミニバッファーヒストリーの特殊ケースであり、それは要素が文字列ではなく式であることです。"

#. type: Plain text
#: original_texis/commands.texi:4248
msgid "There are a number of commands devoted to the editing and recall of previous commands.  The commands @code{repeat-complex-command}, and @code{list-command-history} are described in the user manual (@pxref{Repetition,,, emacs, The GNU Emacs Manual}).  Within the minibuffer, the usual minibuffer history commands are available."
msgstr "以前のコマンドを編集したり再呼び出しするためのコマンドがいくつかあります。コマンド@code{repeat-complex-command}と@code{list-command-history}はユーザーマニュアルに説明されています(@ref{Repetition,,, emacs, The GNU Emacs Manual}を参照)。ミニバッファー内では通常のミニバッファーヒストリーコマンドが利用できます。"

#. type: cindex
#: original_texis/commands.texi:4251
#, no-wrap
msgid "keyboard macros"
msgstr "keyboard macros"

#. type: Plain text
#: original_texis/commands.texi:4258
msgid "A @dfn{keyboard macro} is a canned sequence of input events that can be considered a command and made the definition of a key.  The Lisp representation of a keyboard macro is a string or vector containing the events.  Don't confuse keyboard macros with Lisp macros (@pxref{Macros})."
msgstr "@dfn{キーボードマクロ(keyboard macro)}はコマンドとして考えることが可能な入力イベントの記録されたシーケンスであり、キー定義によって作成されます。キーボードマクロのLisp表現はイベントを含む文字列かベクターです。キーボードマクロとLispマクロ(@ref{Macros}を参照)を混同しないでください。"

#. type: defun
#: original_texis/commands.texi:4259
#, no-wrap
msgid "execute-kbd-macro kbdmacro &optional count loopfunc"
msgstr "execute-kbd-macro kbdmacro &optional count loopfunc"

#. type: defun
#: original_texis/commands.texi:4265
msgid "This function executes @var{kbdmacro} as a sequence of events.  If @var{kbdmacro} is a string or vector, then the events in it are executed exactly as if they had been input by the user.  The sequence is @emph{not} expected to be a single key sequence; normally a keyboard macro definition consists of several key sequences concatenated."
msgstr "この関数はイベントシーケンスとして@var{kbdmacro}を実行する。@var{kbdmacro}が文字列かベクターなら、たとえそれがユーザーによる入力であっても、その中のイベントは忠実に実行される。シーケンスは単一のキーシーケンスであることを@emph{要求されない}。キーボードマクロ定義は、通常は複数のキーシーケンスを結合して構成される。"

#. type: defun
#: original_texis/commands.texi:4270
msgid "If @var{kbdmacro} is a symbol, then its function definition is used in place of @var{kbdmacro}.  If that is another symbol, this process repeats.  Eventually the result should be a string or vector.  If the result is not a symbol, string, or vector, an error is signaled."
msgstr "@var{kbdmacro}がシンボルなら、そのシンボルの関数定義は@var{kbdmacro}の箇所に使用される。それが別のシンボルならこのプロセスを繰り返す。最終的に結果は文字列かベクターになる。結果がシンボル、文字列、ベクターでなければエラーがシグナルされる。"

#. type: defun
#: original_texis/commands.texi:4275
msgid "The argument @var{count} is a repeat count; @var{kbdmacro} is executed that many times.  If @var{count} is omitted or @code{nil}, @var{kbdmacro} is executed once.  If it is 0, @var{kbdmacro} is executed over and over until it encounters an error or a failing search."
msgstr "引数@var{count}は繰り返すカウントであり、@var{kbdmacro}がその回数実行される。@var{count}が省略または@code{nil}なら1回実行される。0なら@var{kbdmacro}はエラーに遭遇するか検索が失敗するまで何度も実行される。"

#. type: defun
#: original_texis/commands.texi:4279
msgid "If @var{loopfunc} is non-@code{nil}, it is a function that is called, without arguments, prior to each iteration of the macro.  If @var{loopfunc} returns @code{nil}, then this stops execution of the macro."
msgstr "@var{loopfunc}が非@code{nil}なら、それはマクロの繰り返しごとに呼び出される引数なしの関数である。@var{loopfunc}が@code{nil}をリターンするとマクロの実行が停止する。"

#. type: defun
#: original_texis/commands.texi:4281
msgid "@xref{Reading One Event}, for an example of using @code{execute-kbd-macro}."
msgstr "@code{execute-kbd-macro}の使用例は@ref{Reading One Event}を参照のこと。"

#. type: defvar
#: original_texis/commands.texi:4283
#, no-wrap
msgid "executing-kbd-macro"
msgstr "executing-kbd-macro"

#. type: defvar
#: original_texis/commands.texi:4289
msgid "This variable contains the string or vector that defines the keyboard macro that is currently executing.  It is @code{nil} if no macro is currently executing.  A command can test this variable so as to behave differently when run from an executing macro.  Do not set this variable yourself."
msgstr "この変数はカレントで実行中のキーボードマクロを定義する文字列かベクター。@code{nil}ならカレントで実行中のマクロは存在しない。マクロの実行により実行されたときに異なる振る舞いをするように、コマンドはこの変数をテストできる。この変数を自分でセットしてはならない。"

#. type: defvar
#: original_texis/commands.texi:4291
#, no-wrap
msgid "defining-kbd-macro"
msgstr "defining-kbd-macro"

#. type: defvar
#: original_texis/commands.texi:4298
msgid "This variable is non-@code{nil} if and only if a keyboard macro is being defined.  A command can test this variable so as to behave differently while a macro is being defined.  The value is @code{append} while appending to the definition of an existing macro.  The commands @code{start-kbd-macro}, @code{kmacro-start-macro} and @code{end-kbd-macro} set this variable---do not set it yourself."
msgstr "この変数はキーボードマクロの定義中のときだけ非@code{nil}である。マクロ定義中の間は異なる振る舞いをするように、コマンドはこの変数をテストできる。既存のマクロ定義に追加する間、値は@code{append}になる。コマンド@code{start-kbd-macro}、@code{kmacro-start-macro}、@code{end-kbd-macro}はこの変数をセットする。この変数を自分でセットしてはならない。"

#. type: defvar
#: original_texis/commands.texi:4301 original_texis/commands.texi:4309
msgid "The variable is always local to the current terminal and cannot be buffer-local.  @xref{Multiple Terminals}."
msgstr "この変数は常にカレント端末にたいしてローカルであり、バッファーローカルにできない。@ref{Multiple Terminals}を参照のこと。"

#. type: defvar
#: original_texis/commands.texi:4303
#, no-wrap
msgid "last-kbd-macro"
msgstr "last-kbd-macro"

#. type: defvar
#: original_texis/commands.texi:4306
msgid "This variable is the definition of the most recently defined keyboard macro.  Its value is a string or vector, or @code{nil}."
msgstr "この変数はもっとも最近定義されたキーボードマクロの定義である。値は文字列、ベクター、または@code{nil}。"

#. type: defvar
#: original_texis/commands.texi:4311
#, no-wrap
msgid "kbd-macro-termination-hook"
msgstr "kbd-macro-termination-hook"

#. type: defvar
#: original_texis/commands.texi:4315
msgid "This normal hook is run when a keyboard macro terminates, regardless of what caused it to terminate (reaching the macro end or an error which ended the macro prematurely)."
msgstr "これはキーボードマクロが終了したときに実行されるノーマルフックであり、何がキーボードマクロを終了させたか(マクロの最後に到達したのか、あるいはエラーにより最後到達する前に終了したのか)は問わない。"
