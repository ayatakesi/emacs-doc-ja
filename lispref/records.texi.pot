# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2024-06-26 23:46+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: original_texis/records.texi:5 original_texis/records.texi:6
#, no-wrap
msgid "Records"
msgstr ""

#. type: cindex
#: original_texis/records.texi:7
#, no-wrap
msgid "records"
msgstr ""

#. type: Plain text
#: original_texis/records.texi:13
msgid ""
"The purpose of records is to allow programmers to create objects with new "
"types that are not built into Emacs.  They are used as the underlying "
"representation of @code{cl-defstruct} and @code{defclass} instances."
msgstr ""

#. type: Plain text
#: original_texis/records.texi:21
msgid ""
"Internally, a record object is much like a vector; its slots can be accessed "
"using @code{aref} and it can be copied using @code{copy-sequence}.  However, "
"the first slot is used to hold its type as returned by @code{type-of}.  "
"Also, in the current implementation records can have at most 4096 slots, "
"whereas vectors can be much larger.  Like arrays, records use zero-origin "
"indexing: the first slot has index 0."
msgstr ""

#. type: Plain text
#: original_texis/records.texi:25
msgid ""
"The type slot should be a symbol or a type descriptor.  If it's a type "
"descriptor, the symbol naming its type will be returned; @ref{Type "
"Descriptors}.  Any other kind of object is returned as-is."
msgstr ""

#. type: Plain text
#: original_texis/records.texi:29
msgid ""
"The printed representation of records is @samp{#s} followed by a list "
"specifying the contents.  The first list element must be the record type.  "
"The following elements are the record slots."
msgstr ""

#. type: Plain text
#: original_texis/records.texi:36
msgid ""
"To avoid conflicts with other type names, Lisp programs that define new "
"types of records should normally use the naming conventions of the package "
"where these record types are introduced for the names of the types.  Note "
"that the names of the types which could possibly conflict might not be known "
"at the time the package defining a record type is loaded; they could be "
"loaded at some future point in time."
msgstr ""

#. type: Plain text
#: original_texis/records.texi:40
msgid ""
"A record is considered a constant for evaluation: the result of evaluating "
"it is the same record.  This does not evaluate or even examine the slots.  "
"@xref{Self-Evaluating Forms}."
msgstr ""

#. type: section
#: original_texis/records.texi:44 original_texis/records.texi:46
#: original_texis/records.texi:47
#, no-wrap
msgid "Record Functions"
msgstr ""

#. type: menuentry
#: original_texis/records.texi:44
msgid "Functions for records."
msgstr ""

#. type: section
#: original_texis/records.texi:44 original_texis/records.texi:84
#: original_texis/records.texi:85
#, no-wrap
msgid "Backward Compatibility"
msgstr ""

#. type: menuentry
#: original_texis/records.texi:44
msgid "Compatibility for cl-defstruct."
msgstr ""

#. type: defun
#: original_texis/records.texi:49
#, no-wrap
msgid "recordp object"
msgstr ""

#. type: defun
#: original_texis/records.texi:51
msgid "This function returns @code{t} if @var{object} is a record."
msgstr ""

#. type: group
#: original_texis/records.texi:56
#, no-wrap
msgid ""
"(recordp #s(a))\n"
"     @result{} t\n"
msgstr ""

#. type: defun
#: original_texis/records.texi:60
#, no-wrap
msgid "record type &rest objects"
msgstr ""

#. type: defun
#: original_texis/records.texi:63
msgid ""
"This function creates and returns a record whose type is @var{type} and "
"remaining slots are the rest of the arguments, @var{objects}."
msgstr ""

#. type: group
#: original_texis/records.texi:68
#, no-wrap
msgid ""
"(record 'foo 23 [bar baz] \"rats\")\n"
"     @result{} #s(foo 23 [bar baz] \"rats\")\n"
msgstr ""

#. type: defun
#: original_texis/records.texi:72
#, no-wrap
msgid "make-record type length object"
msgstr ""

#. type: defun
#: original_texis/records.texi:75
msgid ""
"This function returns a new record with type @var{type} and @var{length} "
"more slots, each initialized to @var{object}."
msgstr ""

#. type: group
#: original_texis/records.texi:80
#, no-wrap
msgid ""
"(setq sleepy (make-record 'foo 9 'Z))\n"
"     @result{} #s(foo Z Z Z Z Z Z Z Z Z)\n"
msgstr ""

#. type: Plain text
#: original_texis/records.texi:92
msgid ""
"Code compiled with older versions of @code{cl-defstruct} that doesn't use "
"records may run into problems when used in a new Emacs.  To alleviate this, "
"Emacs detects when an old @code{cl-defstruct} is used, and enables a mode in "
"which @code{type-of} handles old struct objects as if they were records."
msgstr ""

#. type: defun
#: original_texis/records.texi:93
#, no-wrap
msgid "cl-old-struct-compat-mode arg"
msgstr ""

#. type: defun
#: original_texis/records.texi:96
msgid ""
"If @var{arg} is positive, enable backward compatibility with old-style "
"structs."
msgstr ""
