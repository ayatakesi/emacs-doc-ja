# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Emacs 25.1\n"
"POT-Creation-Date: 2019-10-14 22:49+0900\n"
"PO-Revision-Date: 2020-02-09 21:07+0900\n"
"Last-Translator: Ayanokoji Takesi <ayanokoji.takesi@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: original_texis/processes.texi:6 original_texis/processes.texi:7
#, no-wrap
msgid "Processes"
msgstr "Processes"

#. type: cindex
#: original_texis/processes.texi:8
#, no-wrap
msgid "child process"
msgstr "child process"

#. type: cindex
#: original_texis/processes.texi:9
#, no-wrap
msgid "parent process"
msgstr "parent process"

#. type: cindex
#: original_texis/processes.texi:10
#, no-wrap
msgid "subprocess"
msgstr "subprocess"

#. type: cindex
#: original_texis/processes.texi:11
#, no-wrap
msgid "process"
msgstr "process"

#. type: Plain text
#: original_texis/processes.texi:18
msgid "In the terminology of operating systems, a @dfn{process} is a space in which a program can execute.  Emacs runs in a process.  Emacs Lisp programs can invoke other programs in processes of their own.  These are called @dfn{subprocesses} or @dfn{child processes} of the Emacs process, which is their @dfn{parent process}."
msgstr "オペレーティングシステムの用語では@dfn{プロセス(process)}とはプログラムを実行できるスペースのことです。Emacsはプロセス内で実行されます。Emacs Lispプログラムは別のプログラムをそれら自身のプロセス内で呼び出すことができます。これらは@dfn{親プロセス(parent process)}であるEmacsプロセスの@dfn{サブプロセス(subprocesses)}、または@dfn{子プロセス(child processes)}と呼ばれます。"

#. type: Plain text
#: original_texis/processes.texi:29
msgid "A subprocess of Emacs may be @dfn{synchronous} or @dfn{asynchronous}, depending on how it is created.  When you create a synchronous subprocess, the Lisp program waits for the subprocess to terminate before continuing execution.  When you create an asynchronous subprocess, it can run in parallel with the Lisp program.  This kind of subprocess is represented within Emacs by a Lisp object which is also called a ``process''.  Lisp programs can use this object to communicate with the subprocess or to control it.  For example, you can send signals, obtain status information, receive output from the process, or send input to it."
msgstr "Emacsのサブプロセスは@dfn{同期(synchronous)}か@dfn{非同期(asynchronous)}であり、それはそれらが作成された方法に依存します。同期サブプロセスを作成した際には、Lispプログラムは実行を継続する前にそのサブプロセスの終了を待機します。非同期サブプロセスを作成したときには、それをLispプログラムと並行して実行できます。この種のサブプロセスはEmacsではLispオブジェクととして表現され、そのオブジェクトも``プロセス''と呼ばれています。Lispプログラムはサブプロセスとのやり取りやサブプロセスの制御のためにこのオブジェクトを使用できます。たとえばシグナル送信、ステータス情報の取得、プロセス出力の受信やプロセスへ入力を送信することができます。"

#. type: Plain text
#: original_texis/processes.texi:36
msgid "In addition to processes that run programs, Lisp programs can open connections of several types to devices or processes running on the same machine or on other machines.  The supported connection types are: TCP and UDP network connections, serial port connections, and pipe connections.  Each such connection is also represented by a process object."
msgstr "プログラムを実行するプロセスに加えて、Lispプログラムは同一または他のマシン上で実行中のデバイスやプロセスにたいして、いくつかのタイプの接続をオープンできます。サポートされる接続タイプはネットワーク接続のTCPとUDP、シリアルポート接続、およびパイプ接続です。そのような接続はそれぞれプロセスオブジェクトとしても表現されます。"

#. type: defun
#: original_texis/processes.texi:37
#, no-wrap
msgid "processp object"
msgstr "processp object"

#. type: defun
#: original_texis/processes.texi:42
msgid "This function returns @code{t} if @var{object} represents an Emacs process object, @code{nil} otherwise.  The process object can represent a subprocess running a program or a connection of any supported type."
msgstr "この関数は、@var{object}がEmacsのプロセスオブジェクトを表すなら@code{t}、それ以外は@code{nil}をリターンする。プロセスオブジェクトはプログラム実行中のサブプロセスやサポートされた任意のタイプの接続を表すことができる。"

#. type: Plain text
#: original_texis/processes.texi:47
msgid "In addition to subprocesses of the current Emacs session, you can also access other processes running on your machine.  @xref{System Processes}."
msgstr "カレントEmacsセッションのサブプロセスに加えて、そのマシン上で実行中の他のプロセスにアクセスすることもできます。@ref{System Processes}を参照してください。"

#. type: node
#: original_texis/processes.texi:71 original_texis/processes.texi:73
#, no-wrap
msgid "Subprocess Creation"
msgstr "Subprocess Creation"

#. type: menuentry
#: original_texis/processes.texi:71
msgid "Functions that start subprocesses."
msgstr "サブプロセスを開始する関数。"

#. type: section
#: original_texis/processes.texi:71 original_texis/processes.texi:180
#: original_texis/processes.texi:181
#, no-wrap
msgid "Shell Arguments"
msgstr "Shell Arguments"

#. type: menuentry
#: original_texis/processes.texi:71
msgid "Quoting an argument to pass it to a shell."
msgstr "shellに渡すために引数をクォートする。"

#. type: node
#: original_texis/processes.texi:71 original_texis/processes.texi:272
#, no-wrap
msgid "Synchronous Processes"
msgstr "Synchronous Processes"

#. type: menuentry
#: original_texis/processes.texi:71
msgid "Details of using synchronous subprocesses."
msgstr "同期サブプロセス使用の詳細。"

#. type: node
#: original_texis/processes.texi:71 original_texis/processes.texi:571
#, no-wrap
msgid "Asynchronous Processes"
msgstr "Asynchronous Processes"

#. type: menuentry
#: original_texis/processes.texi:71
msgid "Starting up an asynchronous subprocess."
msgstr "非同期サブプロセスの起動。"

#. type: section
#: original_texis/processes.texi:71 original_texis/processes.texi:862
#: original_texis/processes.texi:863
#, no-wrap
msgid "Deleting Processes"
msgstr "Deleting Processes"

#. type: menuentry
#: original_texis/processes.texi:71
msgid "Eliminating an asynchronous subprocess."
msgstr "非同期サブプロセスの削除。"

#. type: section
#: original_texis/processes.texi:71 original_texis/processes.texi:913
#: original_texis/processes.texi:914
#, no-wrap
msgid "Process Information"
msgstr "Process Information"

#. type: menuentry
#: original_texis/processes.texi:71
msgid "Accessing run-status and other attributes."
msgstr "実行状態および他の属性へのアクセス。"

#. type: node
#: original_texis/processes.texi:71 original_texis/processes.texi:1146
#, no-wrap
msgid "Input to Processes"
msgstr "Input to Processes"

#. type: menuentry
#: original_texis/processes.texi:71
msgid "Sending input to an asynchronous subprocess."
msgstr "非同期サブプロセスへの入力の送信。"

#. type: node
#: original_texis/processes.texi:71 original_texis/processes.texi:1228
#, no-wrap
msgid "Signals to Processes"
msgstr "Signals to Processes"

#. type: menuentry
#: original_texis/processes.texi:71
msgid "Stopping, continuing or interrupting an asynchronous subprocess."
msgstr "非同期サブプロセスの停止、継続、割り込み。"

#. type: node
#: original_texis/processes.texi:71 original_texis/processes.texi:1339
#, no-wrap
msgid "Output from Processes"
msgstr "Output from Processes"

#. type: menuentry
#: original_texis/processes.texi:71
msgid "Collecting output from an asynchronous subprocess."
msgstr "非同期サブプロセスからの出力の収集。"

#. type: node
#: original_texis/processes.texi:71 original_texis/processes.texi:1788
#, no-wrap
msgid "Sentinels"
msgstr "Sentinels"

#. type: menuentry
#: original_texis/processes.texi:71
msgid "Sentinels run when process run-status changes."
msgstr "プロセスの実行状態変更時に実行されるセンチネル。"

#. type: node
#: original_texis/processes.texi:71 original_texis/processes.texi:1936
#, no-wrap
msgid "Query Before Exit"
msgstr "Query Before Exit"

#. type: menuentry
#: original_texis/processes.texi:71
msgid "Whether to query if exiting will kill a process."
msgstr "exitによりプロセスがkillされる場合に問い合わせるかどうか。"

#. type: node
#: original_texis/processes.texi:71 original_texis/processes.texi:1967
#, no-wrap
msgid "System Processes"
msgstr "System Processes"

#. type: menuentry
#: original_texis/processes.texi:71
msgid "Accessing other processes running on your system."
msgstr "そのシステム上で実行中の別プロセスへのアクセス。"

#. type: section
#: original_texis/processes.texi:71 original_texis/processes.texi:2151
#: original_texis/processes.texi:2152
#, no-wrap
msgid "Transaction Queues"
msgstr "Transaction Queues"

#. type: menuentry
#: original_texis/processes.texi:71
msgid "Transaction-based communication with subprocesses."
msgstr "サブプロセスとのトランザクションベースのコミュニケション。"

#. type: node
#: original_texis/processes.texi:71 original_texis/processes.texi:2201
#, no-wrap
msgid "Network"
msgstr "Network"

#. type: menuentry
#: original_texis/processes.texi:71
msgid "Opening network connections."
msgstr "ネットワーク接続のopen。"

#. type: section
#: original_texis/processes.texi:71 original_texis/processes.texi:2378
#: original_texis/processes.texi:2379
#, no-wrap
msgid "Network Servers"
msgstr "Network Servers"

#. type: menuentry
#: original_texis/processes.texi:71
msgid "Network servers let Emacs accept net connections."
msgstr "Emacsによるネット接続のacceptを可能にするネットワークサーバー。"

#. type: section
#: original_texis/processes.texi:71 original_texis/processes.texi:2429
#: original_texis/processes.texi:2430
#, no-wrap
msgid "Datagrams"
msgstr "Datagrams"

#. type: menuentry
#: original_texis/processes.texi:71
msgid "UDP network connections."
msgstr "UDPネットワーク接続。"

#. type: node
#: original_texis/processes.texi:71 original_texis/processes.texi:2458
#, no-wrap
msgid "Low-Level Network"
msgstr "Low-Level Network"

#. type: menuentry
#: original_texis/processes.texi:71
msgid "Lower-level but more general function to create connections and servers."
msgstr "接続およびサーバーを作成するための、より低レベルだがより汎用的な関数。"

#. type: node
#: original_texis/processes.texi:71 original_texis/processes.texi:2751
#, no-wrap
msgid "Misc Network"
msgstr "Misc Network"

#. type: menuentry
#: original_texis/processes.texi:71
msgid "Additional relevant functions for net connections."
msgstr "ネット接続用の追加の関連する関数。"

#. type: node
#: original_texis/processes.texi:71 original_texis/processes.texi:2805
#, no-wrap
msgid "Serial Ports"
msgstr "Serial Ports"

#. type: menuentry
#: original_texis/processes.texi:71
msgid "Communicating with serial ports."
msgstr "シリアルポートでのやり取り。"

#. type: node
#: original_texis/processes.texi:71 original_texis/processes.texi:2985
#, no-wrap
msgid "Byte Packing"
msgstr "Byte Packing"

#. type: menuentry
#: original_texis/processes.texi:71
msgid "Using bindat to pack and unpack binary data."
msgstr "bindatを使用したバイナリーデータのpackとunpack。"

#. type: section
#: original_texis/processes.texi:74
#, no-wrap
msgid "Functions that Create Subprocesses"
msgstr "Functions that Create Subprocesses"

#. type: cindex
#: original_texis/processes.texi:75
#, no-wrap
msgid "create subprocess"
msgstr "create subprocess"

#. type: cindex
#: original_texis/processes.texi:76
#, no-wrap
msgid "process creation"
msgstr "process creation"

#. type: Plain text
#: original_texis/processes.texi:86
msgid "There are three primitives that create a new subprocess in which to run a program.  One of them, @code{make-process}, creates an asynchronous process and returns a process object (@pxref{Asynchronous Processes}).  The other two, @code{call-process} and @code{call-process-region}, create a synchronous process and do not return a process object (@pxref{Synchronous Processes}).  There are various higher-level functions that make use of these primitives to run particular types of process."
msgstr "内部でプログラムを実行するサブプロセスを作成するために3つのプリミティブが存在します。それらの1つは@code{make-process}であり、これは非同期プロセスを作成してプロセスオブジェクトをリターンします(@ref{Asynchronous Processes}を参照)。他の2つは@code{call-process}と@code{call-process-region}です。これらは同期プロセスを作成してプロセスオブジェクとをリターンしません(@ref{Synchronous Processes}を参照)。特定のタイプのプロセスを実行するために、これらのプリミティブを利用するさまざまな高レベル関数が存在します。"

#. type: Plain text
#: original_texis/processes.texi:90
msgid "Synchronous and asynchronous processes are explained in the following sections.  Since the three functions are all called in a similar fashion, their common arguments are described here."
msgstr "同期プロセスと非同期プロセスについては、以降のセクションで説明します。この3つの関数はすべて類似した様式で呼び出されるので、ここではそれらに共通の引数について説明します。"

#. type: cindex
#: original_texis/processes.texi:91
#, no-wrap
msgid "execute program"
msgstr "execute program"

#. type: cindex
#: original_texis/processes.texi:92
#, no-wrap
msgid "@env{PATH} environment variable"
msgstr "@env{PATH} environment variable"

#. type: cindex
#: original_texis/processes.texi:93
#, no-wrap
msgid "@env{HOME} environment variable"
msgstr "@env{HOME} environment variable"

#. type: Plain text
#: original_texis/processes.texi:105
msgid "In all cases, the functions specify the program to be run.  An error is signaled if the file is not found or cannot be executed.  If the file name is relative, the variable @code{exec-path} contains a list of directories to search.  Emacs initializes @code{exec-path} when it starts up, based on the value of the environment variable @env{PATH}.  The standard file name constructs, @samp{~}, @samp{.}, and @samp{..}, are interpreted as usual in @code{exec-path}, but environment variable substitutions (@samp{$HOME}, etc.)@: are not recognized; use @code{substitute-in-file-name} to perform them (@pxref{File Name Expansion}).  @code{nil} in this list refers to @code{default-directory}."
msgstr "すべての場合において、関数は実行するプログラムを指定します。ファイルが見つからなかったり実行できなければエラーがシグナルされます。ファイル名が相対的なら、検索するディレクトリーのリストは変数@code{exec-path}に格納されています。Emacsは起動の際に環境変数@env{PATH}の値にもとづいて@code{exec-path}を初期化します。@code{exec-path}内では標準的なファイル名構成要素@samp{~}、@samp{.}、@samp{..}は通常どおりに解釈されますが、環境変数の置換(@samp{$HOME}等)は認識されません。それらの置換を行うには@code{substitute-in-file-name}を使用してください(@ref{File Name Expansion}を参照)。このリスト内で@code{nil}は@code{default-directory}を参照します。"

#. type: Plain text
#: original_texis/processes.texi:108
msgid "Executing a program can also try adding suffixes to the specified name:"
msgstr "プログラムの実行では指定された名前にサフィックスの追加を試みることもできます:"

#. type: defopt
#: original_texis/processes.texi:109
#, no-wrap
msgid "exec-suffixes"
msgstr "exec-suffixes"

#. type: defopt
#: original_texis/processes.texi:114
msgid "This variable is a list of suffixes (strings) to try adding to the specified program file name.  The list should include @code{\"\"} if you want the name to be tried exactly as specified.  The default value is system-dependent."
msgstr "この変数は指定されたプログラムファイル名への追加を試みるためのサフィックス(文字列)のリスト。指定されたとおりの名前を試みたいならリストに@code{\"\"}を含めること。デフォルト値はシステム依存。"

#. type: Plain text
#: original_texis/processes.texi:120
msgid "@strong{Please note:} The argument @var{program} contains only the name of the program file; it may not contain any command-line arguments.  You must use a separate argument, @var{args}, to provide those, as described below."
msgstr "@strong{注意してください:} 引数@var{program}にはプログラムのファイル名だけが含まれて、コマンドライン引数を含めることはできない。これらを提供するために以下で説明する別の引数@var{args}を使用しなければならない。"

#. type: Plain text
#: original_texis/processes.texi:135
msgid "Each of the subprocess-creating functions has a @var{buffer-or-name} argument that specifies where the output from the program will go.  It should be a buffer or a buffer name; if it is a buffer name, that will create the buffer if it does not already exist.  It can also be @code{nil}, which says to discard the output, unless a custom filter function handles it.  (@xref{Filter Functions}, and @ref{Read and Print}.)  Normally, you should avoid having multiple processes send output to the same buffer because their output would be intermixed randomly.  For synchronous processes, you can send the output to a file instead of a buffer (and the corresponding argument is therefore more appropriately called @var{destination}).  By default, both standard output and standard error streams go to the same destination, but all the 3 primitives allow optionally to direct the standard error stream to a different destination."
msgstr "サブプロセス作成関数にはそれぞれ@var{buffer-or-name}引数があります。これはプログラムの出力の行き先を指定します。これはバッファーかバッファー名であるべきです。バッファー名の場合には、もしそのバッファーがまだ作成されていなければバッファーを作成します。@code{nil}を指定することもでき、その場合にはカスタム製のフィルター関数が出力を処理するのでなければ出力を破棄するよう指示します(@ref{Filter Functions}と@ref{Read and Print}を参照)。通常は出力がランダムに混在してしまうために、同一バッファーに複数プロセスの出力を送信するのは避けるべきです。同期プロセスにたいしてはバッファーのかわりにファイルに出力を送信できます(したがって対応する引数はより適切な@var{destination}という名前で呼ばれる)。デフォルトでは標準出力と標準エラーの両ストリームの行き先(destination)は同じだが、3つのプリミティブはすべてオプションで標準エラーストリームに別の行き先を指定できる。"

#. type: cindex
#: original_texis/processes.texi:136
#, no-wrap
msgid "program arguments"
msgstr "program arguments"

#. type: Plain text
#: original_texis/processes.texi:147
msgid "All three of the subprocess-creating functions allow to specify command-line arguments for the process to run. For @code{call-process} and @code{call-process-region}, these come in the form of a @code{&rest} argument, @var{args}.  For @code{make-process}, both the program to run and its command-line arguments are specified as a list of strings.  The command-line arguments must all be strings, and they are supplied to the program as separate argument strings.  Wildcard characters and other shell constructs have no special meanings in these strings, since the strings are passed directly to the specified program."
msgstr "これら3つのサブプロセス作成関数は、すべて実行するプロセスにコマンドライン引数を指定できます。@code{call-process}と@code{call-process-region}では、これらは@code{&rest}形式の引数@var{args}で与えられます。@code{make-process}では実行するプログラムとコマンドライン引数はいずれも文字列のリストとして指定されます。コマンドライン引数はすべて文字列でなければならず、それらは別個の引数文字列としてプログラムに与えられます。文字列は指定されたプログラムに直接渡されるので、ワイルドカード文字やその他のshell構文はこれらの文字列内では特別な意味をもちません。"

#. type: cindex
#: original_texis/processes.texi:148
#, no-wrap
msgid "environment variables, subprocesses"
msgstr "environment variables, subprocesses"

#. type: Plain text
#: original_texis/processes.texi:153
msgid "The subprocess inherits its environment from Emacs, but you can specify overrides for it with @code{process-environment}.  @xref{System Environment}.  The subprocess gets its current directory from the value of @code{default-directory}."
msgstr "サブプロセスはその環境をEmacsから継承しますが、@code{process-environment}でそれをオーバーラードするよう指定することができます。@ref{System Environment}を参照してください。サブプロセスは自身のカレントディレクトリーを@code{default-directory}の値から取得します。"

#. type: defvar
#: original_texis/processes.texi:154
#, no-wrap
msgid "exec-directory"
msgstr "exec-directory"

#. type: pindex
#: original_texis/processes.texi:155
#, no-wrap
msgid "movemail"
msgstr "movemail"

#. type: defvar
#: original_texis/processes.texi:160
msgid "The value of this variable is a string, the name of a directory that contains programs that come with GNU Emacs and are intended for Emacs to invoke.  The program @code{movemail} is an example of such a program; Rmail uses it to fetch new mail from an inbox."
msgstr "この変数の値はGNU Emacsとともに配布されて、Emacsにより呼び出されることを意図したプログラムを含むディレクトリーの名前(文字列)。プログラム@code{movemail}はそのようなプログラムの例であり、Rmailはinboxから新しいメールを読み込むためにこのプログラムを使用する。"

#. type: defopt
#: original_texis/processes.texi:162
#, no-wrap
msgid "exec-path"
msgstr "exec-path"

#. type: defopt
#: original_texis/processes.texi:168
msgid "The value of this variable is a list of directories to search for programs to run in subprocesses.  Each element is either the name of a directory (i.e., a string), or @code{nil}, which stands for the default directory (which is the value of @code{default-directory}).  @xref{Locating Files, executable-find}, for the details of this search."
msgstr "この変数の値はサブプロセス内で実行するためのプログラムを検索するためのディレクトリーのリスト。要素はそれぞれディレクトリーの名前(文字列)、または@code{nil}のいずれか。@code{nil}はデフォルトディレクトリー(@code{default-directory}の値)を意味する。この検索の詳細は@ref{Locating Files, executable-find}を参照のこと。"

#. type: cindex
#: original_texis/processes.texi:168
#, no-wrap
msgid "program directories"
msgstr "program directories"

#. type: defopt
#: original_texis/processes.texi:173
msgid "The value of @code{exec-path} is used by @code{call-process} and @code{start-process} when the @var{program} argument is not an absolute file name."
msgstr "@code{exec-path}の値は、@var{program}引数が絶対ファイル名でないときに@code{call-process}と@code{start-process}により使用される。"

#. type: defopt
#: original_texis/processes.texi:178
msgid "Generally, you should not modify @code{exec-path} directly.  Instead, ensure that your @env{PATH} environment variable is set appropriately before starting Emacs.  Trying to modify @code{exec-path} independently of @env{PATH} can lead to confusing results."
msgstr "一般的には@code{exec-path}を直接変更するべきではない。かわりにEmacs起動前に環境変数@env{PATH}が適切にセットされているか確認すること。@env{PATH}とは独立に@code{exec-path}の変更を試みると混乱した結果へと導かれ得る。"

#. type: cindex
#: original_texis/processes.texi:182
#, no-wrap
msgid "arguments for shell commands"
msgstr "arguments for shell commands"

#. type: cindex
#: original_texis/processes.texi:183
#, no-wrap
msgid "shell command arguments"
msgstr "shell command arguments"

#. type: Plain text
#: original_texis/processes.texi:191
msgid "Lisp programs sometimes need to run a shell and give it a command that contains file names that were specified by the user.  These programs ought to be able to support any valid file name.  But the shell gives special treatment to certain characters, and if these characters occur in the file name, they will confuse the shell.  To handle these characters, use the function @code{shell-quote-argument}:"
msgstr "Lispプログラムがshellを実行して、ユーザーが指定したファイル名を含むコマンドを与える必要がある場合が時折あります。これらのプログラムは任意の有効なファイル名をサポート可能であるはずです。しかしshellは特定の文字を特別に扱い、それらの文字がファイル名に含まれているとshellを混乱させるでしょう。これらの文字を処理するためには関数@code{shell-quote-argument}を使用します。"

#. type: defun
#: original_texis/processes.texi:192
#, no-wrap
msgid "shell-quote-argument argument"
msgstr "shell-quote-argument argument"

#. type: defun
#: original_texis/processes.texi:197
msgid "This function returns a string that represents, in shell syntax, an argument whose actual contents are @var{argument}.  It should work reliably to concatenate the return value into a shell command and then pass it to a shell for execution."
msgstr "この関数は実際のコンテンツが@var{argument}であるような引数を表す文字列をshellの構文でリターンする。リターン値をshellコマンドに結合して実行のためにそれをshellに渡すことにより、信頼性をもって機能するはずである。"

#. type: defun
#: original_texis/processes.texi:202
msgid "Precisely what this function does depends on your operating system.  The function is designed to work with the syntax of your system's standard shell; if you use an unusual shell, you will need to redefine this function.  @xref{Security Considerations}."
msgstr "この関数が正確に何を行うかはオペレーティングシステムに依存する。この関数はそのシステムの標準shellの構文で機能するようデザインされている。非標準のshellを使用する場合には、この関数を再定義する必要があるだろう。@ref{Security Considerations}を参照のこと。"

#. type: example
#: original_texis/processes.texi:207
#, no-wrap
msgid ""
";; @r{This example shows the behavior on GNU and Unix systems.}\n"
"(shell-quote-argument \"foo > bar\")\n"
"     @result{} \"foo\\\\ \\\\>\\\\ bar\"\n"
"\n"
msgstr ""
";; @r{この例はGNUおよびUnixシステムでの挙動を示す}\n"
"(shell-quote-argument \"foo > bar\")\n"
"     @result{} \"foo\\\\ \\\\>\\\\ bar\"\n"
"\n"

#. type: example
#: original_texis/processes.texi:211
#, no-wrap
msgid ""
";; @r{This example shows the behavior on MS-DOS and MS-Windows.}\n"
"(shell-quote-argument \"foo > bar\")\n"
"     @result{} \"\\\"foo > bar\\\"\"\n"
msgstr ""
";; @r{この例はMS-DOSおよびMS-Windowsでの挙動を示す}\n"
"(shell-quote-argument \"foo > bar\")\n"
"     @result{} \"\\\"foo > bar\\\"\"\n"

#. type: defun
#: original_texis/processes.texi:215
msgid "Here's an example of using @code{shell-quote-argument} to construct a shell command:"
msgstr "以下は@code{shell-quote-argument}を使用してshellコマンドを構築する例:"

#. type: example
#: original_texis/processes.texi:221
#, no-wrap
msgid ""
"(concat \"diff -u \"\n"
"        (shell-quote-argument oldfile)\n"
"        \" \"\n"
"        (shell-quote-argument newfile))\n"
msgstr ""
"(concat \"diff -u \"\n"
"        (shell-quote-argument oldfile)\n"
"        \" \"\n"
"        (shell-quote-argument newfile))\n"

#. type: cindex
#: original_texis/processes.texi:224
#, no-wrap
msgid "quoting and unquoting command-line arguments"
msgstr "quoting and unquoting command-line arguments"

#. type: cindex
#: original_texis/processes.texi:225
#, no-wrap
msgid "minibuffer input, and command-line arguments"
msgstr "minibuffer input, and command-line arguments"

#. type: cindex
#: original_texis/processes.texi:226
#, no-wrap
msgid "@code{call-process}, command-line arguments from minibuffer"
msgstr "@code{call-process}, command-line arguments from minibuffer"

#. type: cindex
#: original_texis/processes.texi:227
#, no-wrap
msgid "@code{start-process}, command-line arguments from minibuffer"
msgstr "@code{start-process}, command-line arguments from minibuffer"

#. type: Plain text
#: original_texis/processes.texi:241
msgid "The following two functions are useful for combining a list of individual command-line argument strings into a single string, and taking a string apart into a list of individual command-line arguments.  These functions are mainly intended for converting user input in the minibuffer, a Lisp string, into a list of string arguments to be passed to @code{make-process}, @code{call-process} or @code{start-process}, or for converting such lists of arguments into a single Lisp string to be presented in the minibuffer or echo area.  Note that if a shell is involved (e.g., if using @code{call-process-shell-command}), arguments should still be protected by @code{shell-quote-argument}; @code{combine-and-quote-strings} is @emph{not} intended to protect special characters from shell evaluation."
msgstr "以下の2つの関数はコマンドライン引数の文字列のリストを単一の文字列に結合したり、単一の文字列を個別のコマンドライン引数のリストへ分割するために有用です。これらの関数は主にミニバッファーでのユーザー入力であるLisp文字列を@code{make-process}、@code{call-process}や@code{start-process}に渡す文字列引数のリストへ変換したり、そのような引数のリストをミニバッファーやエコーエリアに表示するためのLisp文字列に変換することを意図しています。(@code{call-process-shell-command}を使用して)shellが呼び出される場合には、引数を依然として@code{shell-quote-argument}で保護する必要があることに注意。@code{combine-and-quote-strings}はshellの評価から特殊文字を保護することを@emph{意図していない}。"

#. type: defun
#: original_texis/processes.texi:242
#, no-wrap
msgid "split-string-and-unquote string &optional separators"
msgstr "split-string-and-unquote string &optional separators"

#. type: defun
#: original_texis/processes.texi:247
msgid "This function splits @var{string} into substrings at matches for the regular expression @var{separators}, like @code{split-string} does (@pxref{Creating Strings}); in addition, it removes quoting from the substrings.  It then makes a list of the substrings and returns it."
msgstr "この関数は@code{split-string}(@ref{Creating Strings}を参照)が行うように、正規表現@var{separators}にたいするマッチで@var{string}を部分文字列に分割する。さらに加えてその部分文字列からクォートを削除する。それから部分文字列のリストを作成してリターンする。"

#. type: defun
#: original_texis/processes.texi:251
msgid "If @var{separators} is omitted or @code{nil}, it defaults to @code{\"\\\\s-+\"}, which is a regular expression that matches one or more characters with whitespace syntax (@pxref{Syntax Class Table})."
msgstr "@var{separators}が省略または@code{nil}の場合のデフォルトは@code{\"\\\\s-+\"}であり、これは空白文字構文(@ref{Syntax Class Table}を参照)をもつ1つ以上の文字にマッチする正規表現である。"

#. type: defun
#: original_texis/processes.texi:256
msgid "This function supports two types of quoting: enclosing a whole string in double quotes @code{\"@dots{}\"}, and quoting individual characters with a backslash escape @samp{\\}.  The latter is also used in Lisp strings, so this function can handle those as well."
msgstr "この関数は2つのタイプのクォートをサポートする。1つは文字列全体をダブルクォートで囲う@code{\"@dots{}\"}のようなクォートで、もう1つはバックスラッシュ@samp{\\}によるエスケープで文字を個別にクォートするタイプである。後者はLisp文字列内でも使用されるので、この関数はそれらも同様に扱うことができる。"

#. type: defun
#: original_texis/processes.texi:258
#, no-wrap
msgid "combine-and-quote-strings list-of-strings &optional separator"
msgstr "combine-and-quote-strings list-of-strings &optional separator"

#. type: defun
#: original_texis/processes.texi:264
msgid "This function concatenates @var{list-of-strings} into a single string, quoting each string as necessary.  It also sticks the @var{separator} string between each pair of strings; if @var{separator} is omitted or @code{nil}, it defaults to @code{\" \"}.  The return value is the resulting string."
msgstr "この関数は@var{list-of-strings}の各文字を必要に応じてクォートして単一の文字列に結合する。これはさらに各文字ペアーの間に@var{separator}文字列も挿入する。@var{separator}が省略または@code{nil}の場合のデフォルトは@code{\" \"}。リターン値はその結果の文字列。"

#. type: defun
#: original_texis/processes.texi:270
msgid "The strings in @var{list-of-strings} that need quoting are those that include @var{separator} as their substring.  Quoting a string encloses it in double quotes @code{\"@dots{}\"}.  In the simplest case, if you are consing a command from the individual command-line arguments, every argument that includes embedded blanks will be quoted."
msgstr "@var{list-of-strings}内のクォートを要する文字列には、部分文字列として@var{separator}を含むものが該当する。文字列のクォートはそれをダブルクォートで@code{\"@dots{}\"}のように囲う。もっとも単純な例では、たとえば個別のコマンドライン引数からコマンドをコンス(cons)する場合には、埋め込まれたブランクを含む文字列はそれぞれクォートされるだろう。"

#. type: section
#: original_texis/processes.texi:273
#, no-wrap
msgid "Creating a Synchronous Process"
msgstr "Creating a Synchronous Process"

#. type: cindex
#: original_texis/processes.texi:274
#, no-wrap
msgid "synchronous subprocess"
msgstr "synchronous subprocess"

#. type: Plain text
#: original_texis/processes.texi:283
msgid "After a @dfn{synchronous process} is created, Emacs waits for the process to terminate before continuing.  Starting Dired on GNU or Unix@footnote{On other systems, Emacs uses a Lisp emulation of @code{ls}; see @ref{Contents of Directories}.} is an example of this: it runs @code{ls} in a synchronous process, then modifies the output slightly.  Because the process is synchronous, the entire directory listing arrives in the buffer before Emacs tries to do anything with it."
msgstr "@dfn{同期プロセス(synchronous process)}の作成後、Emacsは継続する前にそのプロセスの終了を待機します。GNUやUnix@footnote{他のシステムではEmacsは@code{ls}のLispエミュレーションを使用します。@ref{Contents of Directories}を参照してください。}でのDiredの起動が例です。プロセスは同期的なので、Emacsがそれにたいして何か行おうと試みる前にディレクトリーのリスト全体がバッファーに到着します。"

#. type: Plain text
#: original_texis/processes.texi:291
msgid "While Emacs waits for the synchronous subprocess to terminate, the user can quit by typing @kbd{C-g}.  The first @kbd{C-g} tries to kill the subprocess with a @code{SIGINT} signal; but it waits until the subprocess actually terminates before quitting.  If during that time the user types another @kbd{C-g}, that kills the subprocess instantly with @code{SIGKILL} and quits immediately (except on MS-DOS, where killing other processes doesn't work).  @xref{Quitting}."
msgstr "同期サブプロセス終了をEmacsが待機する間に、ユーザーは@kbd{C-g}をタイプすることでquitが可能です。最初の@kbd{C-g}は@code{SIGINT}シグナルによりサブプロセスのkillを試みます。しかしこれはquitする前に実際にそのサブプロセスが終了されるまで待機します。その間にユーザーがさらに@kbd{C-g}をタイプするとそれは@code{SIGKILL}で即座にサブプロセスをkillしてquitします(別プロセスにたいするkillが機能しないMS-DOSを除く)。@ref{Quitting}を参照してください。"

#. type: Plain text
#: original_texis/processes.texi:294
msgid "The synchronous subprocess functions return an indication of how the process terminated."
msgstr "同期サブプロセス関数はプロセスがどのように終了したかの識別をリターンします。"

#. type: Plain text
#: original_texis/processes.texi:299
msgid "The output from a synchronous subprocess is generally decoded using a coding system, much like text read from a file.  The input sent to a subprocess by @code{call-process-region} is encoded using a coding system, much like text written into a file.  @xref{Coding Systems}."
msgstr "同期サブプロセスからの出力はファイルからのテキスト読み込みと同じように、一般的にはコーディングシステムを使用してデコードされます。@code{call-process-region}によりサブプロセスに送信された入力は、ファイルへのテキスト書き込みと同じようにコーディングシステムを使用してエンコードされます。@ref{Coding Systems}を参照してください。"

#. type: defun
#: original_texis/processes.texi:300
#, no-wrap
msgid "call-process program &optional infile destination display &rest args"
msgstr "call-process program &optional infile destination display &rest args"

#. type: defun
#: original_texis/processes.texi:302
msgid "This function calls @var{program} and waits for it to finish."
msgstr "この関数は@var{program}を呼び出して完了するまで待機する。"

#. type: defun
#: original_texis/processes.texi:305
msgid "The current working directory of the subprocess is @code{default-directory}."
msgstr "サブプロセスのカレントワーキングディレクトリーは@code{default-directory}。"

#. type: defun
#: original_texis/processes.texi:310
msgid "The standard input for the new process comes from file @var{infile} if @var{infile} is not @code{nil}, and from the null device otherwise.  The argument @var{destination} says where to put the process output.  Here are the possibilities:"
msgstr "新たなプロセスの標準入力は@var{infile}が非@code{nil}ならファイル@var{infile}、それ以外ならnullデバイス。引数@var{destination}はプロセスの出力をどこに送るかを指定する。以下は可能な値:"

#. type: item
#: original_texis/processes.texi:312
#, no-wrap
msgid "a buffer"
msgstr "バッファー"

#. type: table
#: original_texis/processes.texi:315
msgid "Insert the output in that buffer, before point.  This includes both the standard output stream and the standard error stream of the process."
msgstr "そのバッファーのポイントの前に出力を挿入する。これにはプロセスの標準出力ストリームと標準エラーストリームの両方が含まれる。"

#. type: item
#: original_texis/processes.texi:316
#, no-wrap
msgid "a buffer name (a string)"
msgstr "バッファー名(文字列)"

#. type: table
#: original_texis/processes.texi:318
msgid "Insert the output in a buffer with that name, before point."
msgstr "その名前のバッファーのポイントの前に出力を挿入する。"

#. type: code{#1}
#: original_texis/processes.texi:319
#, no-wrap
msgid "t"
msgstr "t"

#. type: table
#: original_texis/processes.texi:321
msgid "Insert the output in the current buffer, before point."
msgstr "カレントバッファーのポイントの前に出力を挿入する。"

#. type: item
#: original_texis/processes.texi:322 original_texis/processes.texi:1060
#: original_texis/processes.texi:2310
#, no-wrap
msgid "nil"
msgstr "nil"

#. type: table
#: original_texis/processes.texi:324
msgid "Discard the output."
msgstr "出力を破棄する。"

#. type: item
#: original_texis/processes.texi:325
#, no-wrap
msgid "0"
msgstr "0"

#. type: table
#: original_texis/processes.texi:328
msgid "Discard the output, and return @code{nil} immediately without waiting for the subprocess to finish."
msgstr "出力を破棄してサブプロセス完了を待機せずに即座に@code{nil}をリターンする。"

#. type: table
#: original_texis/processes.texi:333
msgid "In this case, the process is not truly synchronous, since it can run in parallel with Emacs; but you can think of it as synchronous in that Emacs is essentially finished with the subprocess as soon as this function returns."
msgstr "この場合にはプロセスはEmacsと並列に実行可能なので真に同期的ではない。しかしこの関数リターン後は本質的にはすみやかにEmacsがサブプロセスを終了するという点から、これを同期的と考えることができる。"

#. type: table
#: original_texis/processes.texi:336
msgid "MS-DOS doesn't support asynchronous subprocesses, so this option doesn't work there."
msgstr "MS-DOSは非同期サブプロセスをサポートせずこのオプションは機能しない。"

#. type: code{#1}
#: original_texis/processes.texi:337
#, no-wrap
msgid "(:file @var{file-name})"
msgstr "(:file @var{file-name})"

#. type: table
#: original_texis/processes.texi:340
msgid "Send the output to the file name specified, overwriting it if it already exists."
msgstr "指定されたファイルに出力を送信して、ファイルが既に存在すれば上書きする。"

#. type: code{#1}
#: original_texis/processes.texi:341
#, no-wrap
msgid "(@var{real-destination} @var{error-destination})"
msgstr "(@var{real-destination} @var{error-destination})"

#. type: table
#: original_texis/processes.texi:348
msgid "Keep the standard output stream separate from the standard error stream; deal with the ordinary output as specified by @var{real-destination}, and dispose of the error output according to @var{error-destination}.  If @var{error-destination} is @code{nil}, that means to discard the error output, @code{t} means mix it with the ordinary output, and a string specifies a file name to redirect error output into."
msgstr "標準出力ストリームを標準エラーストリームと分けて保持する。通常の出力は@var{real-destination}の指定にしたがって扱い、エラー出力は@var{error-destination}にしたがって処分する。@var{error-destination}が@code{nil}ならエラー出力の破棄、@code{t}なら通常の出力と混合することを意味して、文字列ならそれはエラー出力をリダイレクトするファイルの名前である。"

#. type: table
#: original_texis/processes.texi:353
msgid "You can't directly specify a buffer to put the error output in; that is too difficult to implement.  But you can achieve this result by sending the error output to a temporary file and then inserting the file into a buffer when the subprocess finishes."
msgstr "エラー出力先に直接バッファーを指定することはできない。ただしエラー出力を一時ファイルに送信して、サブプロセス終了時にそのファイルをバッファーに挿入すればこれを達成できる。"

#. type: defun
#: original_texis/processes.texi:361
msgid "If @var{display} is non-@code{nil}, then @code{call-process} redisplays the buffer as output is inserted.  (However, if the coding system chosen for decoding output is @code{undecided}, meaning deduce the encoding from the actual data, then redisplay sometimes cannot continue once non-@acronym{ASCII} characters are encountered.  There are fundamental reasons why it is hard to fix this; see @ref{Output from Processes}.)"
msgstr "@var{display}が非@code{nil}なら、@code{call-process}は出力の挿入にしたがってバッファーを再表示する(しかし出力のデコードに選択されたコーディングシステムが実データからエンコーディングを推論することを意味する@code{undecided}なら、非@acronym{ASCII}に一度遭遇すると再表示が継続不能になることがある。これを修正するのが困難な根本的理由が存在する。@ref{Output from Processes}を参照)。"

#. type: defun
#: original_texis/processes.texi:365
msgid "Otherwise the function @code{call-process} does no redisplay, and the results become visible on the screen only when Emacs redisplays that buffer in the normal course of events."
msgstr "それ以外なら関数@code{call-process}は再表示を行わずに、通常のイベントに由来するEmacsの再表示時だけスクリーン上で結果が可視になります。"

#. type: defun
#: original_texis/processes.texi:369
msgid "The remaining arguments, @var{args}, are strings that specify command line arguments for the program.  Each string is passed to @var{program} as a separate argument."
msgstr "残りの引数@var{args}はそのプログラムにたいしてコマンドライン引数を指定する文字列です。文字列はそれぞれ別個の引数として@var{program}に渡されます。"

#. type: defun
#: original_texis/processes.texi:376
msgid "The value returned by @code{call-process} (unless you told it not to wait) indicates the reason for process termination.  A number gives the exit status of the subprocess; 0 means success, and any other value means failure.  If the process terminated with a signal, @code{call-process} returns a string describing the signal.  If you told @code{call-process} not to wait, it returns @code{nil}."
msgstr "(待機するよう告げた場合には) @code{call-process}がリターンする値はプロセスが終了した理由を示します。この数字はそのサブプロセスのexitステータスであり0が成功、それ以外のすべての値は失敗を意味します。シグナルによりそのプロセスが終了された場合には、@code{call-process}はそれを記述する文字列をリターンします。@code{call-process}に待機しないように指示した場合には@code{nil}をリターンします。"

#. type: defun
#: original_texis/processes.texi:378
msgid "In the examples below, the buffer @samp{foo} is current."
msgstr "以下の例ではカレントバッファーは@samp{foo}です。"

#. type: group
#: original_texis/processes.texi:383
#, no-wrap
msgid ""
"(call-process \"pwd\" nil t)\n"
"     @result{} 0\n"
"\n"
msgstr ""
"(call-process \"pwd\" nil t)\n"
"     @result{} 0\n"
"\n"

#. type: group
#: original_texis/processes.texi:387
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"/home/lewis/manual\n"
"---------- Buffer: foo ----------\n"
msgstr ""
"---------- Buffer: foo ----------\n"
"/home/lewis/manual\n"
"---------- Buffer: foo ----------\n"

#. type: group
#: original_texis/processes.texi:392
#, no-wrap
msgid ""
"(call-process \"grep\" nil \"bar\" nil \"lewis\" \"/etc/passwd\")\n"
"     @result{} 0\n"
"\n"
msgstr ""
"(call-process \"grep\" nil \"bar\" nil \"lewis\" \"/etc/passwd\")\n"
"     @result{} 0\n"
"\n"

#. type: group
#: original_texis/processes.texi:395
#, no-wrap
msgid ""
"---------- Buffer: bar ----------\n"
"lewis:x:1001:1001:Bil Lewis,,,,:/home/lewis:/bin/bash\n"
"\n"
msgstr ""
"---------- Buffer: bar ----------\n"
"lewis:x:1001:1001:Bil Lewis,,,,:/home/lewis:/bin/bash\n"
"\n"

#. type: group
#: original_texis/processes.texi:397
#, no-wrap
msgid "---------- Buffer: bar ----------\n"
msgstr "---------- Buffer: bar ----------\n"

#. type: defun
#: original_texis/processes.texi:402
msgid "Here is an example of the use of @code{call-process}, as used to be found in the definition of the @code{insert-directory} function:"
msgstr "以下は@code{call-process}の使用例であり、このような使用例は@code{insert-directory}関数の定義内で見つけることができます:"

#. type: group
#: original_texis/processes.texi:409
#, no-wrap
msgid ""
"(call-process insert-directory-program nil t nil switches\n"
"              (if full-directory-p\n"
"                  (concat (file-name-as-directory file) \".\")\n"
"                file))\n"
msgstr ""
"(call-process insert-directory-program nil t nil switches\n"
"              (if full-directory-p\n"
"                  (concat (file-name-as-directory file) \".\")\n"
"                file))\n"

#. type: defun
#: original_texis/processes.texi:413
#, no-wrap
msgid "process-file program &optional infile buffer display &rest args"
msgstr "process-file program &optional infile buffer display &rest args"

#. type: defun
#: original_texis/processes.texi:418
msgid "This function processes files synchronously in a separate process.  It is similar to @code{call-process}, but may invoke a file handler based on the value of the variable @code{default-directory}, which specifies the current working directory of the subprocess."
msgstr "この関数は別プロセス内でファイルを同期的に処理する。これは@code{call-process}と似ているが、サブプロセスのカレントワーキングディレクトリーを指定する変数@code{default-directory}の値にもとづいて、ファイルハンドラーを呼び出すかもしれない。"

#. type: defun
#: original_texis/processes.texi:421
msgid "The arguments are handled in almost the same way as for @code{call-process}, with the following differences:"
msgstr "引数は@code{call-process}の場合とほとんど同様の方法で処理されるが以下の違いがある:"

#. type: defun
#: original_texis/processes.texi:428
msgid "Some file handlers may not support all combinations and forms of the arguments @var{infile}, @var{buffer}, and @var{display}.  For example, some file handlers might behave as if @var{display} were @code{nil}, regardless of the value actually passed.  As another example, some file handlers might not support separating standard output and error output by way of the @var{buffer} argument."
msgstr "引数@var{infile}、@var{buffer}、@var{display}のすべての組み合わせと形式をサポートしないファイルハンドラーがあるかもしれない。たとえば実際に渡された値とは無関係に、@var{display}が@code{nil}であるかのように振る舞うファイルハンドラーがいくつかある。他の例としては@var{buffer}引数で標準出力とエラー出力を分離するのをサポートしないかもしれないファイルハンドラーがいくつか存在する。"

#. type: defun
#: original_texis/processes.texi:433
msgid "If a file handler is invoked, it determines the program to run based on the first argument @var{program}.  For instance, suppose that a handler for remote files is invoked.  Then the path that is used for searching for the program might be different from @code{exec-path}."
msgstr "ファイルハンドラーが呼び出されると、1つ目の引数@var{program}にもとづいて実行するプログラムを決定する。たとえばリモートファイルにたいするハンドラーが呼び出されたと考えてみよ。その場合にはプログラムの検索に使用されるパスは@code{exec-path}とは異なるかもしれない。"

#. type: defun
#: original_texis/processes.texi:440
msgid "The second argument @var{infile} may invoke a file handler.  The file handler could be different from the handler chosen for the @code{process-file} function itself.  (For example, @code{default-directory} could be on one remote host, and @var{infile} on a different remote host.  Or @code{default-directory} could be non-special, whereas @var{infile} is on a remote host.)"
msgstr "2つ目の引数@var{infile}はファイルハンドラーを呼び出すかもしれない。そのファイルハンドラーは、@code{process-file}関数自身にたいして選択されたハンドラーと異なるかもしれない(たとえば@code{default-directory}がリモートホスト上にあり@var{infile}は別のリモートホスト上の場合があり得る。もしくは@code{default-directory}は普通だが@var{infile}はリモートホスト上にあるかもしれない)."

#. type: defun
#: original_texis/processes.texi:444
msgid "If @var{buffer} is a list of the form @code{(@var{real-destination} @var{error-destination})}, and @var{error-destination} names a file, then the same remarks as for @var{infile} apply."
msgstr "@var{buffer}が@code{(@var{real-destination} @var{error-destination})}という形式のリストであり、かつ@var{error-destination}がファイルの名前なら@var{infile}と同じ注意が適用される。"

#. type: defun
#: original_texis/processes.texi:452
msgid "The remaining arguments (@var{args}) will be passed to the process verbatim.  Emacs is not involved in processing file names that are present in @var{args}.  To avoid confusion, it may be best to avoid absolute file names in @var{args}, but rather to specify all file names as relative to @code{default-directory}.  The function @code{file-relative-name} is useful for constructing such relative file names."
msgstr "残りの引数(@var{args})はそのままプロセスに渡される。Emacsは@var{args}内で与えられたファイル名の処理に関与しない。混乱を避けるためには@var{args}内で絶対ファイル名を使用しないのが最善であり、@code{default-directory}からの相対ファイル名ですべてのファイルを指定するほうがよいだろう。関数@code{file-relative-name}はそのような相対ファイル名の構築に有用。"

#. type: defvar
#: original_texis/processes.texi:454
#, no-wrap
msgid "process-file-side-effects"
msgstr "process-file-side-effects"

#. type: defvar
#: original_texis/processes.texi:457
msgid "This variable indicates whether a call of @code{process-file} changes remote files."
msgstr "この変数は@code{process-file}呼び出しがリモートファイルを変更するかどうかを示す。"

#. type: defvar
#: original_texis/processes.texi:462
msgid "By default, this variable is always set to @code{t}, meaning that a call of @code{process-file} could potentially change any file on a remote host.  When set to @code{nil}, a file handler could optimize its behavior with respect to remote file attribute caching."
msgstr "この変数はデフォルトでは@code{process-file}呼び出しがリモートホスト上の任意のファイルを潜在的に変更し得ることを意味する@code{t}に常にセットされる。@code{nil}にセットされた際には、リモートファイル属性のキャッシュにしたがうことによりファイルハンドラーの挙動を最適化できる可能性がある。"

#. type: defvar
#: original_texis/processes.texi:465
msgid "You should only ever change this variable with a let-binding; never with @code{setq}."
msgstr "この変数は決して@code{setq}ではなく、常にletバインディングでのみ変更すること。"

#. type: defun
#: original_texis/processes.texi:467
#, no-wrap
msgid "call-process-region start end program &optional delete destination display &rest args"
msgstr "call-process-region start end program &optional delete destination display &rest args"

#. type: defun
#: original_texis/processes.texi:473
msgid "This function sends the text from @var{start} to @var{end} as standard input to a process running @var{program}.  It deletes the text sent if @var{delete} is non-@code{nil}; this is useful when @var{destination} is @code{t}, to insert the output in the current buffer in place of the input."
msgstr "この関数は@var{start}から@var{end}のテキストを、実行中のプロセス@var{program}に標準入力として送信する。これは@var{delete}が非@code{nil}なら送信したテキストを削除する。これは出力をカレントバッファーの入力箇所に挿入するために、@var{destination}を@code{t}に指定している際に有用。"

#. type: defun
#: original_texis/processes.texi:481
msgid "The arguments @var{destination} and @var{display} control what to do with the output from the subprocess, and whether to update the display as it comes in.  For details, see the description of @code{call-process}, above.  If @var{destination} is the integer 0, @code{call-process-region} discards the output and returns @code{nil} immediately, without waiting for the subprocess to finish (this only works if asynchronous subprocesses are supported; i.e., not on MS-DOS)."
msgstr "引数@var{destination}と@var{display}はサブロセスからの出力にたいして何を行うか、および出力の到着にともない表示を更新するかどうかを制御する。詳細は上述の@code{call-process}の説明を参照のこと。@var{destination}が整数の0なら@code{call-process-region}は出力を破棄して、サブプロセス完了を待機せずに即座に@code{nil}をリターンする(これは非同期サブプロセスがサポートされる場合、つまりMS-DOS以外でのみ機能する)。"

#. type: defun
#: original_texis/processes.texi:484
msgid "The remaining arguments, @var{args}, are strings that specify command line arguments for the program."
msgstr "残りの引数@var{args}はそのプログラムにたいしてコマンドライン引数を指定する文字列です。"

#. type: defun
#: original_texis/processes.texi:489
msgid "The return value of @code{call-process-region} is just like that of @code{call-process}: @code{nil} if you told it to return without waiting; otherwise, a number or string which indicates how the subprocess terminated."
msgstr "@code{call-process-region}のリターン値は@code{call-process}の場合と同様。待機せずにリターンするよう指示した場合には@code{nil}、数字か文字列ならそれはサブプロセスが終了した方法を表す。"

#. type: defun
#: original_texis/processes.texi:496
msgid "In the following example, we use @code{call-process-region} to run the @code{cat} utility, with standard input being the first five characters in buffer @samp{foo} (the word @samp{input}).  @code{cat} copies its standard input into its standard output.  Since the argument @var{destination} is @code{t}, this output is inserted in the current buffer."
msgstr "以下の例ではバッファー@samp{foo}内の最初の5文字(単語@samp{input})を標準入力として、@code{call-process-region}を使用して@code{cat}ユーティリティを実行する。@code{cat}は自身の標準入力を標準出力へコピーする。引数@var{destination}が@code{t}なので出力はカレントバッファーに挿入される。"

#. type: group
#: original_texis/processes.texi:502
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"input@point{}\n"
"---------- Buffer: foo ----------\n"
msgstr ""
"---------- Buffer: foo ----------\n"
"input@point{}\n"
"---------- Buffer: foo ----------\n"

#. type: group
#: original_texis/processes.texi:507
#, no-wrap
msgid ""
"(call-process-region 1 6 \"cat\" nil t)\n"
"     @result{} 0\n"
"\n"
msgstr ""
"(call-process-region 1 6 \"cat\" nil t)\n"
"     @result{} 0\n"
"\n"

#. type: group
#: original_texis/processes.texi:511
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"inputinput@point{}\n"
"---------- Buffer: foo ----------\n"
msgstr ""
"---------- Buffer: foo ----------\n"
"inputinput@point{}\n"
"---------- Buffer: foo ----------\n"

#. type: defun
#: original_texis/processes.texi:516
msgid "For example, the @code{shell-command-on-region} command uses @code{call-process-region} in a manner similar to this:"
msgstr "たとえば@code{shell-command-on-region}コマンドは以下のような方法で@code{call-process-region}を使用する:"

#. type: group
#: original_texis/processes.texi:526
#, no-wrap
msgid ""
"(call-process-region\n"
" start end\n"
" shell-file-name      ; @r{name of program}\n"
" nil                  ; @r{do not delete region}\n"
" buffer               ; @r{send output to @code{buffer}}\n"
" nil                  ; @r{no redisplay during output}\n"
" \"-c\" command)        ; @r{arguments for the shell}\n"
msgstr ""
"(call-process-region\n"
" start end\n"
" shell-file-name      ; @r{プログラム名}\n"
" nil                  ; @r{リージョンを削除しない}\n"
" buffer               ; @r{出力を@code{buffer}に送信}\n"
" nil                  ; @r{出力中に再表示を行わない}\n"
" \"-c\" command)        ; @r{shellへの引数}\n"

#. type: defun
#: original_texis/processes.texi:531
#, no-wrap
msgid "call-process-shell-command command &optional infile destination display"
msgstr "call-process-shell-command command &optional infile destination display"

#. type: defun
#: original_texis/processes.texi:537
msgid "This function executes the shell command @var{command} synchronously.  The other arguments are handled as in @code{call-process}.  An old calling convention allowed passing any number of additional arguments after @var{display}, which were concatenated to @var{command}; this is still supported, but strongly discouraged."
msgstr "この関数はshellコマンド@var{command}を非同期に実行する。他の引数は@code{call-process}の場合と同様に処理される。古い呼び出し規約は@var{display}の後に任意個数の追加引数を許容して、これは@var{command}に結合される。これはまだサポートされるものの使用しないことを強く推奨する。"

#. type: defun
#: original_texis/processes.texi:539
#, no-wrap
msgid "process-file-shell-command command &optional infile destination display"
msgstr "process-file-shell-command command &optional infile destination display"

#. type: defun
#: original_texis/processes.texi:546
msgid "This function is like @code{call-process-shell-command}, but uses @code{process-file} internally.  Depending on @code{default-directory}, @var{command} can be executed also on remote hosts.  An old calling convention allowed passing any number of additional arguments after @var{display}, which were concatenated to @var{command}; this is still supported, but strongly discouraged."
msgstr "この関数は@code{call-process-shell-command}と同様だが内部的に@code{process-file}を使用する点が異なる。@code{default-directory}に依存して@var{command}はリモートホスト上でも実行可能。古い呼び出し規約は@var{display}の後に任意個数の追加引数を許容して、これは@var{command}に結合される。これはまだサポートされるものの使用しないことを強く推奨する。"

#. type: defun
#: original_texis/processes.texi:548
#, no-wrap
msgid "shell-command-to-string command"
msgstr "shell-command-to-string command"

#. type: defun
#: original_texis/processes.texi:551
msgid "This function executes @var{command} (a string) as a shell command, then returns the command's output as a string."
msgstr "この関数はshellコマンドとして@var{command} (文字列)を実行してコマンドの出力を文字列としてリターンする。"

#. type: defun
#: original_texis/processes.texi:556
#, no-wrap
msgid "process-lines program &rest args"
msgstr "process-lines program &rest args"

#. type: defun
#: original_texis/processes.texi:563
msgid "This function runs @var{program}, waits for it to finish, and returns its output as a list of strings.  Each string in the list holds a single line of text output by the program; the end-of-line characters are stripped from each line.  The arguments beyond @var{program}, @var{args}, are strings that specify command-line arguments with which to run the program."
msgstr "この関数は@var{program}を実行して完了を待機して、出力を文字列のリストとしてリターンする。リスト内の各文字列はプログラムのテキスト出力の1つの行を保持する。各行のEOL文字(行末文字)は取り除かれる。@var{program}の後の引数@var{args}はそのプログラム実行に際して、コマンドライン引数を指定する文字列。"

#. type: defun
#: original_texis/processes.texi:566
msgid "If @var{program} exits with a non-zero exit status, this function signals an error."
msgstr "@var{program}が非0のexitステータスでexitすると、この関数はエラーをシグナルする。"

#. type: defun
#: original_texis/processes.texi:569
msgid "This function works by calling @code{call-process}, so program output is decoded in the same way as for @code{call-process}."
msgstr "この関数は@code{call-process}を呼び出すことにより機能して、プログラムの出力は@code{call-process}の場合と同じ方法でデコードされる。"

#. type: section
#: original_texis/processes.texi:572
#, no-wrap
msgid "Creating an Asynchronous Process"
msgstr "Creating an Asynchronous Process"

#. type: cindex
#: original_texis/processes.texi:573
#, no-wrap
msgid "asynchronous subprocess"
msgstr "asynchronous subprocess"

#. type: Plain text
#: original_texis/processes.texi:583
msgid "In this section, we describe how to create an @dfn{asynchronous process}.  After an asynchronous process is created, it runs in parallel with Emacs, and Emacs can communicate with it using the functions described in the following sections (@pxref{Input to Processes}, and @pxref{Output from Processes}).  Note that process communication is only partially asynchronous: Emacs sends data to the process only when certain functions are called, and Emacs accepts data from the process only while waiting for input or for a time delay."
msgstr "このセクションでは@dfn{非同期プロセス(asynchronous process)}を作成する方法について説明します。非同期プロセスは作成後はEmacsと並列に実行されて、Emacsは以降のセクション(@ref{Input to Processes}と@ref{Output from Processes}を参照)で説明する関数を使用してプロセスとコミュニケーションができます。プロセスコミュニケーションは部分的に非同期なだけであることに注意してください。Emacsは特定の関数を呼び出したときだけプロセスにデータを送信でき、Emacsは入力の待機中か一定の遅延時間の後にのみプロセスのデータを受け取ることができます。"

#. type: cindex
#: original_texis/processes.texi:584
#, no-wrap
msgid "pty"
msgstr "pty"

#. type: cindex
#: original_texis/processes.texi:585
#, no-wrap
msgid "pipe"
msgstr "pipe"

#. type: Plain text
#: original_texis/processes.texi:600
msgid "An asynchronous process is controlled either via a @dfn{pty} (pseudo-terminal) or a @dfn{pipe}.  The choice of pty or pipe is made when creating the process, by default based on the value of the variable @code{process-connection-type} (see below).  If available, ptys are usually preferable for processes visible to the user, as in Shell mode, because they allow for job control (@kbd{C-c}, @kbd{C-z}, etc.)@: between the process and its children, and because interactive programs treat ptys as terminal devices, whereas pipes don't support these features.  However, for subprocesses used by Lisp programs for internal purposes, it is often better to use a pipe, because pipes are more efficient, and because they are immune to stray character injections that ptys introduce for large (around 500 byte) messages.  Also, the total number of ptys is limited on many systems and it is good not to waste them."
msgstr "非同期プロセスは@dfn{pty(pseudo-terminal: 疑似端末)}かたは@dfn{pipe}のいずれかを通じて制御されます。ptyかpipeの選択は、デフォルトでは変数@code{process-connection-type} (以下参照)の値にもとづいてプロセス作成時に行われます。ptyが利用可能なら、通常はShellモード内のようにユーザーから可視なプロセスに適しています。ptyではプロセスとその子プロセスとの間でジョブ制御(@kbd{C-c}、@kbd{C-z}、...等)が可能であり、対話的なプログラムはptyを端末デバイスとして扱いますが、これらはpipeではサポートされない機能だからです。Lispプログラムの内部的な目的のために使用されるサブプロセスにたいしては、pipeのほうが適している場合が多々あります。それはpipeがより効率的であり、ptyが大量の文字(500byte前後)にたいして導入する迷入文字インジェクション(stray character injections)にたいして免疫があるのが理由です。さらに多くのシステムではptyの合計数に制限があり、それを浪費するのは得策ではありません。"

#. type: defun
#: original_texis/processes.texi:601
#, no-wrap
msgid "make-process &rest args"
msgstr "make-process &rest args"

#. type: defun
#: original_texis/processes.texi:607
msgid "This function is the basic low-level primitive for starting asynchronous subprocesses.  It returns a process object representing the subprocess.  Compared to the more high-level @code{start-process}, described below, it takes keyword arguments, is more flexible, and allows to specify process filters and sentinels in a single call."
msgstr "この関数は非同期サブプロセスを開始するための基本的な低レベルなプリミティブである。これはサブプロセスを表すプロセスオブジェクトをリターンする。以下で説明するより高レベルな@code{start-process}と比較すると、この関数はキーワード引数を受け取り、より柔軟であり、単独の呼び出しでプロセスフィルターやセンチネルを指定できる。"

#. type: defun
#: original_texis/processes.texi:611
msgid "The arguments @var{args} are a list of keyword/argument pairs.  Omitting a keyword is always equivalent to specifying it with value @code{nil}.  Here are the meaningful keywords:"
msgstr "引数@var{args}はkeyword/argumentペアのリスト。キーワードの省略は値@code{nil}でそれを指定することと常に等価。以下は意味のあるキーワード:"

#. type: itemx
#: original_texis/processes.texi:613 original_texis/processes.texi:694
#: original_texis/processes.texi:2490 original_texis/processes.texi:2867
#: original_texis/processes.texi:2939
#, no-wrap
msgid ":name @var{name}"
msgstr ":name @var{name}"

#. type: table
#: original_texis/processes.texi:617
msgid "Use the string @var{name} as the process name; if a process with this name already exists, then @var{name} is modified (by appending @samp{<1>}, etc.)@: to be unique."
msgstr "プロセス名として文字列@var{name}を使用する。その名前のプロセスがすでに存在すれば、(@samp{<1>}、...の追加により)一意となるように@var{name}を修正する。"

#. type: itemx
#: original_texis/processes.texi:618 original_texis/processes.texi:698
#: original_texis/processes.texi:2585 original_texis/processes.texi:2871
#: original_texis/processes.texi:2940
#, no-wrap
msgid ":buffer @var{buffer}"
msgstr ":buffer @var{buffer}"

#. type: table
#: original_texis/processes.texi:621
msgid "Use @var{buffer} as the process buffer.  If the value is @code{nil}, the subprocess is not associated with any buffer."
msgstr "プロセスバッファーとして@var{buffer}を使用する。値が@code{nil}なら、そのサブプロセスには何のバッファーも関連付けられない。"

#. type: item
#: original_texis/processes.texi:622
#, no-wrap
msgid ":command @var{command}"
msgstr ":command @var{command}"

#. type: table
#: original_texis/processes.texi:630
msgid "Use @var{command} as the command line of the process.  The value should be a list starting with the program's executable file name, followed by strings to give to the program as its arguments.  If the first element of the list is @code{nil}, Emacs opens a new pseudoterminal (pty) and associates its input and output with @var{buffer}, without actually running any program; the rest of the list elements are ignored in that case."
msgstr "プロセスのコマドラインとして@var{command}を使用する。値はプログラムの実行可能ファイル名で始まり、後にプログラムの引数として与える文字列が続くリストであること。リストの最初の要素が@code{nil}なら、Emacsは新たな擬似端末(pty)を作成して、実際には何もプログラムを実行せずに入出力を@var{buffer}に関連付ける。この場合には残りのリスト要素は無視される。"

#. type: item
#: original_texis/processes.texi:631 original_texis/processes.texi:701
#: original_texis/processes.texi:2588 original_texis/processes.texi:2879
#, no-wrap
msgid ":coding @var{coding}"
msgstr ":coding @var{coding}"

#. type: table
#: original_texis/processes.texi:641
msgid "If @var{coding} is a symbol, it specifies the coding system to be used for both reading and writing of data from and to the connection.  If @var{coding} is a cons cell @w{@code{(@var{decoding} . @var{encoding})}}, then @var{decoding} will be used for reading and @var{encoding} for writing.  The coding system used for encoding the data written to the program is also used for encoding the command-line arguments (but not the program itself, whose file name is encoded as any other file name; @pxref{Encoding and I/O, file-name-coding-system})."
msgstr "@var{coding}がシンボルなら、それはその接続にたいする読み取りと書き込みの両方で使用するコーディングシステムを指定する。@var{coding}がコンスセル@w{@code{(@var{decoding} . @var{encoding})}}なら読み取りに@var{decoding}、書き込みに@var{encoding}が使用される。プログラムに書き込むデータのエンコーディングに使用されるコーディングシステムは、コマンドライン引数のエンコーディングにも使用される(しかしプログラム自身にたいしてファイル名を別のファイル名にエンコードすることはない。@ref{Encoding and I/O, file-name-coding-system}を参照)。"

#. type: table
#: original_texis/processes.texi:644 original_texis/processes.texi:710
msgid "If @var{coding} is @code{nil}, the default rules for finding the coding system will apply.  @xref{Default Coding Systems}."
msgstr "@var{coding}が@code{nil}なら、デフォルトのコーディングシステム検出ルールを適用する。@ref{Default Coding Systems}を参照のこと。"

#. type: item
#: original_texis/processes.texi:645
#, no-wrap
msgid ":connection-type @var{TYPE}"
msgstr ":connection-type @var{TYPE}"

#. type: table
#: original_texis/processes.texi:653
msgid "Initialize the type of device used to communicate with the subprocess.  Possible values are @code{pty} to use a pty, @code{pipe} to use a pipe, or @code{nil} to use the default derived from the value of the @code{process-connection-type} variable.  This parameter and the value of @code{process-connection-type} are ignored if a non-@code{nil} value is specified for the @code{:stderr} parameter; in that case, the type will always be @code{pipe}."
msgstr "サブプロセスとの対話に使用するデバイスのタイプを初期化する。指定できる値はptyを使用する@code{pty}、pipeを使用する@code{pipe}、または@code{process-connection-type}変数の値のデフォルトデバイスを使用する@code{nil}。@code{:stderr}パラメーターに非@code{nil}値が指定されると、このパラメーターと@code{process-connection-type}の値は無視される。この場合にはタイプは常に@code{pipe}になる。"

#. type: item
#: original_texis/processes.texi:654 original_texis/processes.texi:711
#: original_texis/processes.texi:2597 original_texis/processes.texi:2886
#, no-wrap
msgid ":noquery @var{query-flag}"
msgstr ":noquery @var{query-flag}"

#. type: table
#: original_texis/processes.texi:657 original_texis/processes.texi:714
#: original_texis/processes.texi:2600
msgid "Initialize the process query flag to @var{query-flag}.  @xref{Query Before Exit}."
msgstr "プロセスqueryフラグを@var{query-flag}に初期化する。@ref{Query Before Exit}を参照のこと。"

#. type: item
#: original_texis/processes.texi:658 original_texis/processes.texi:715
#: original_texis/processes.texi:2581
#, no-wrap
msgid ":stop @var{stopped}"
msgstr ":stop @var{stopped}"

#. type: table
#: original_texis/processes.texi:661 original_texis/processes.texi:718
msgid "If @var{stopped} is non-@code{nil}, start the process in the stopped state."
msgstr "@var{stopped}が非@code{nil}なら、停止状態でプロセスを開始する。"

#. type: item
#: original_texis/processes.texi:662 original_texis/processes.texi:719
#: original_texis/processes.texi:2601 original_texis/processes.texi:2897
#, no-wrap
msgid ":filter @var{filter}"
msgstr ":filter @var{filter}"

#. type: table
#: original_texis/processes.texi:666
msgid "Initialize the process filter to @var{filter}.  If not specified, a default filter will be provided, which can be overridden later.  @xref{Filter Functions}."
msgstr "プロセスフィルターを@var{filter}に初期化する。未指定ならデフォルトフィルターが提供されるが、これは後からオーバーライドできる。@ref{Filter Functions}を参照のこと。"

#. type: item
#: original_texis/processes.texi:667 original_texis/processes.texi:724
#: original_texis/processes.texi:2609 original_texis/processes.texi:2900
#, no-wrap
msgid ":sentinel @var{sentinel}"
msgstr ":sentinel @var{sentinel}"

#. type: table
#: original_texis/processes.texi:671
msgid "Initialize the process sentinel to @var{sentinel}.  If not specified, a default sentinel will be used, which can be overridden later.  @xref{Sentinels}."
msgstr "プロセスセンチネルを@var{sentinel}に初期化する。未指定ならデフォルトセンチネルが使用されるが、これは後からオーバーライドできる。@ref{Sentinels}を参照のこと。"

#. type: item
#: original_texis/processes.texi:672
#, no-wrap
msgid ":stderr @var{stderr}"
msgstr ":stderr @var{stderr}"

#. type: table
#: original_texis/processes.texi:676
msgid "Associate @var{stderr} with the standard error of the process.  A non-@code{nil} value should be either a buffer or a pipe process created with @code{make-pipe-process}, described below."
msgstr "プロセスの標準エラーに@var{stderr}を割り当てる。値が非@code{nil}ならバッファー、または以下で説明する@code{make-pipe-process}で作成されたpipeのいずれかであること。"

#. type: defun
#: original_texis/processes.texi:680 original_texis/processes.texi:732
#: original_texis/processes.texi:2627
msgid "The original argument list, modified with the actual connection information, is available via the @code{process-contact} function."
msgstr "実際の接続情報で修正されたオリジナルの引数リストは@code{process-contact}を通じて利用できる。"

#. type: defun
#: original_texis/processes.texi:682
#, no-wrap
msgid "make-pipe-process &rest args"
msgstr "make-pipe-process &rest args"

#. type: defun
#: original_texis/processes.texi:686
msgid "This function creates a bidirectional pipe which can be attached to a child process.  This is useful with the @code{:stderr} keyword of @code{make-process}.  The function returns a process object."
msgstr "この関数は子プロセスにアタッチ可能な双方向のpipeを作成する。これは@code{make-process}の@code{:stderr}キーワードと併用することで有用。この関数はプロセスオブジェクトをリターンする。"

#. type: defun
#: original_texis/processes.texi:690
msgid "The arguments @var{args} are a list of keyword/argument pairs.  Omitting a keyword is always equivalent to specifying it with value @code{nil}."
msgstr "引数@var{args}はkeyword/argumentペアのリスト。キーワードの省略はそのキーワードに値@code{nil}を指定することと常に等価。"

#. type: defun
#: original_texis/processes.texi:692
msgid "Here are the meaningful keywords:"
msgstr "以下は意味のあるキーワード。"

#. type: table
#: original_texis/processes.texi:697
msgid "Use the string @var{name} as the process name.  As with @code{make-process}, it is modified if necessary to make it unique."
msgstr "プロセス名として文字列@var{name}を使用する。@code{make-process}の場合のように、一意にするために必要に応じて変更され得る。"

#. type: table
#: original_texis/processes.texi:700 original_texis/processes.texi:2587
msgid "Use @var{buffer} as the process buffer."
msgstr "プロセスバッファーとして@var{buffer}を使用する。"

#. type: table
#: original_texis/processes.texi:707
msgid "If @var{coding} is a symbol, it specifies the coding system to be used for both reading and writing of data from and to the connection.  If @var{coding} is a cons cell @w{@code{(@var{decoding} . @var{encoding})}}, then @var{decoding} will be used for reading and @var{encoding} for writing."
msgstr "@var{coding}がシンボルなら、それはその接続にたいする読み取りと書き込みの両方で使用するコーディングシステムを指定する。@var{coding}がコンスセル@w{@code{(@var{decoding} . @var{encoding})}}なら読み取りに@var{decoding}、書き込みに@var{encoding}が使用される。"

#. type: table
#: original_texis/processes.texi:723
msgid "Initialize the process filter to @var{filter}.  If not specified, a default filter will be provided, which can be changed later.  @xref{Filter Functions}."
msgstr "プロセスフィルターを@var{filter}に初期化する。未指定ならデフォルトフィルターが提供されるが後で変更できる。@ref{Filter Functions}を参照のこと。"

#. type: table
#: original_texis/processes.texi:728
msgid "Initialize the process sentinel to @var{sentinel}.  If not specified, a default sentinel will be used, which can be changed later.  @xref{Sentinels}."
msgstr "プロセスセンチネルを@var{sentinel}に初期化する。未指定ならデフォルトセンチネルが使用されるが後で変更できる。@ref{Sentinels}を参照のこと。"

#. type: defun
#: original_texis/processes.texi:734
#, no-wrap
msgid "start-process name buffer-or-name program &rest args"
msgstr "start-process name buffer-or-name program &rest args"

#. type: defun
#: original_texis/processes.texi:743
msgid "This function is a higher-level wrapper around @code{make-process}, exposing an interface that is similar to @code{call-process}.  It creates a new asynchronous subprocess and starts the specified @var{program} running in it.  It returns a process object that stands for the new subprocess in Lisp.  The argument @var{name} specifies the name for the process object; as with @code{make-process}, it is modified if necessary to make it unique.  The buffer @var{buffer-or-name} is the buffer to associate with the process."
msgstr "この関数は@code{call-process}の類似したインターフェースを提供する、@code{make-process}周辺の高レベルのラッパー。これは新たに非同期サブプロセスを作成して、指定された@var{program}の実行をその内部で開始する。これはLispで新たなサブプロセスを意味するプロセスオブジェクトをリターンする。引数@var{name}はプロセスオブジェクトの名前を指定する。@code{make-process}の場合のように、一意な名前となるように必要に応じて修正する。バッファー@var{buffer-or-name}はそのプロセスに関連付けるバッファー。"

#. type: defun
#: original_texis/processes.texi:748
msgid "If @var{program} is @code{nil}, Emacs opens a new pseudoterminal (pty)  and associates its input and output with @var{buffer-or-name}, without creating a subprocess.  In that case, the remaining arguments @var{args} are ignored."
msgstr "@var{program}が@code{nil}ならEmacsは疑似端末(pty)を新たにオープンして、サブプロセスを新たに作成することなくptyの入力と出力を@var{buffer-or-name}に関連付ける。この場合には残りの引数@var{args}は無視される。"

#. type: defun
#: original_texis/processes.texi:751
msgid "The rest of @var{args} are strings that specify command line arguments for the subprocess."
msgstr "残りの@var{args}はサブプロセスにコマンドライン引数を指定する文字列。"

#. type: defun
#: original_texis/processes.texi:760
msgid "In the example below, the first process is started and runs (rather, sleeps) for 100 seconds (the output buffer @samp{foo} is created immediately).  Meanwhile, the second process is started, and given the name @samp{my-process<1>} for the sake of uniqueness.  It inserts the directory listing at the end of the buffer @samp{foo}, before the first process finishes.  Then it finishes, and a message to that effect is inserted in the buffer.  Much later, the first process finishes, and another message is inserted in the buffer for it."
msgstr "以下の例では1つ目のプロセスを開始して100秒間実行(というよりはsleep)される。その間に2つ目のプロセスを開始して、一意性を保つために@samp{my-process<1>}という名前が与えられる。これは1つ目のプロセスが終了する前にバッファー@samp{foo}の最後にディレクトリーのリストを挿入する。その後に2つ目のプロセスは終了して、その旨のメッセージがバッファーに挿入される。さらに遅れて1つ目のプロセスが終了して、バッファーに別のメッセージが挿入される。"

#. type: group
#: original_texis/processes.texi:765
#, no-wrap
msgid ""
"(start-process \"my-process\" \"foo\" \"sleep\" \"100\")\n"
"     @result{} #<process my-process>\n"
msgstr ""
"(start-process \"my-process\" \"foo\" \"sleep\" \"100\")\n"
"     @result{} #<process my-process>\n"

#. type: group
#: original_texis/processes.texi:770
#, no-wrap
msgid ""
"(start-process \"my-process\" \"foo\" \"ls\" \"-l\" \"/bin\")\n"
"     @result{} #<process my-process<1>>\n"
"\n"
msgstr ""
"(start-process \"my-process\" \"foo\" \"ls\" \"-l\" \"/bin\")\n"
"     @result{} #<process my-process<1>>\n"
"\n"

#. type: group
#: original_texis/processes.texi:777
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"total 8336\n"
"-rwxr-xr-x 1 root root 971384 Mar 30 10:14 bash\n"
"-rwxr-xr-x 1 root root 146920 Jul  5  2011 bsd-csh\n"
"@dots{}\n"
"-rwxr-xr-x 1 root root 696880 Feb 28 15:55 zsh4\n"
"\n"
msgstr ""
"---------- Buffer: foo ----------\n"
"total 8336\n"
"-rwxr-xr-x 1 root root 971384 Mar 30 10:14 bash\n"
"-rwxr-xr-x 1 root root 146920 Jul  5  2011 bsd-csh\n"
"@dots{}\n"
"-rwxr-xr-x 1 root root 696880 Feb 28 15:55 zsh4\n"
"\n"

#. type: group
#: original_texis/processes.texi:779
#, no-wrap
msgid ""
"Process my-process<1> finished\n"
"\n"
msgstr ""
"Process my-process<1> finished\n"
"\n"

#. type: group
#: original_texis/processes.texi:782
#, no-wrap
msgid ""
"Process my-process finished\n"
"---------- Buffer: foo ----------\n"
msgstr ""
"Process my-process finished\n"
"---------- Buffer: foo ----------\n"

#. type: defun
#: original_texis/processes.texi:786
#, no-wrap
msgid "start-file-process name buffer-or-name program &rest args"
msgstr "start-file-process name buffer-or-name program &rest args"

#. type: defun
#: original_texis/processes.texi:790
msgid "Like @code{start-process}, this function starts a new asynchronous subprocess running @var{program} in it, and returns its process object."
msgstr "@code{start-process}と同じようにこの関数は非同期サブプロセスを開始して、その内部で@var{program}を実行してそのプロセスオブジェクトをリターンする。"

#. type: defun
#: original_texis/processes.texi:797
msgid "The difference from @code{start-process} is that this function may invoke a file handler based on the value of @code{default-directory}.  This handler ought to run @var{program}, perhaps on the local host, perhaps on a remote host that corresponds to @code{default-directory}.  In the latter case, the local part of @code{default-directory} becomes the working directory of the process."
msgstr "@code{start-process}との違いは、この関数が@code{default-directory}の値にもとづいてファイルハンドラーを呼び出すかもしれないという点である。このハンドラーはローカルホスト上、あるいは@code{default-directory}に応じたリモートホスト上で@var{program}を実行すること。後者の場合には、@code{default-directory}のローカル部分はそのプロセスのワーキングディレクトリーになる。"

#. type: defun
#: original_texis/processes.texi:800
msgid "This function does not try to invoke file name handlers for @var{program} or for the rest of @var{args}."
msgstr "この関数は@var{program}、または@var{args}の残りにたいしてファイル名ハンドラーの呼び出しを試みない。"

#. type: defun
#: original_texis/processes.texi:804
msgid "Depending on the implementation of the file handler, it might not be possible to apply @code{process-filter} or @code{process-sentinel} to the resulting process object.  @xref{Filter Functions}, and @ref{Sentinels}."
msgstr "そのファイルハンドラーの実装によっては、リターン結果のプロセスオブジェクトに@code{process-filter}や@code{process-sentinel}を適用することができないかもしれない。@ref{Filter Functions}と@ref{Sentinels}を参照のこと。"

#. type: defun
#: original_texis/processes.texi:810
msgid "Some file handlers may not support @code{start-file-process} (for example the function @code{ange-ftp-hook-function}).  In such cases, this function does nothing and returns @code{nil}."
msgstr "いくつかのファイルハンドラーは@code{start-file-process}をサポートしないかもしれない(たとえば@code{ange-ftp-hook-function}関数)。そのような場合には、この関数は何も行わずに@code{nil}をリターンする。"

#. type: defun
#: original_texis/processes.texi:812
#, no-wrap
msgid "start-process-shell-command name buffer-or-name command"
msgstr "start-process-shell-command name buffer-or-name command"

#. type: defun
#: original_texis/processes.texi:817
msgid "This function is like @code{start-process}, except that it uses a shell to execute the specified @var{command}.  The argument @var{command} is a shell command string.  The variable @code{shell-file-name} specifies which shell to use."
msgstr "この関数は@code{start-process}と同様だが、指定された@var{command}の実行にshellを使用する点が異なる。引数@var{command}はshellコマンド文字列。変数@code{shell-file-name}はどのshellを使用するかを指定する。"

#. type: defun
#: original_texis/processes.texi:827
msgid "The point of running a program through the shell, rather than directly with @code{make-process} or @code{start-process}, is so that you can employ shell features such as wildcards in the arguments.  It follows that if you include any arbitrary user-specified arguments in the command, you should quote them with @code{shell-quote-argument} first, so that any special shell characters do @emph{not} have their special shell meanings.  @xref{Shell Arguments}.  Of course, when executing commands based on user input you should also consider the security implications."
msgstr "@code{make-process}や@code{start-process}でプログラムを実行せずにshellを通じて実行することの要点は、引数内のワイルドカード展開のようなshell機能を利用可能にするためである。そのためにはコマンド内に任意のユーザー指定引数を含めるなら、任意の特別なshell文字がshellでの特別な意味を@emph{もたない}ように、まず@code{shell-quote-argument}でそれらをクォートするべきである。@ref{Shell Arguments}を参照のこと。ユーザー入力にもとづいたコマンド実行時には当然セキュリティ上の影響も考慮するべきである。"

#. type: defun
#: original_texis/processes.texi:829
#, no-wrap
msgid "start-file-process-shell-command name buffer-or-name command"
msgstr "start-file-process-shell-command name buffer-or-name command"

#. type: defun
#: original_texis/processes.texi:833
msgid "This function is like @code{start-process-shell-command}, but uses @code{start-file-process} internally.  Because of this, @var{command} can also be executed on remote hosts, depending on @code{default-directory}."
msgstr "この関数は@code{start-process-shell-command}と似ているが、内部的に@code{start-file-process}を使用する点が異なる。これにより@code{default-directory}に応じてリモートホスト上でも@var{command}を実行できる。"

#. type: defvar
#: original_texis/processes.texi:835
#, no-wrap
msgid "process-connection-type"
msgstr "process-connection-type"

#. type: defvar
#: original_texis/processes.texi:839
msgid "This variable controls the type of device used to communicate with asynchronous subprocesses.  If it is non-@code{nil}, then ptys are used, when available.  Otherwise, pipes are used."
msgstr "この変数は非同期サブプロセスと対話するために使用するデバイスタイプを制御する。これが非@code{nil}の場合には利用可能ならpty、それ以外ならpipeが使用される。"

#. type: defvar
#: original_texis/processes.texi:844
msgid "The value of @code{process-connection-type} takes effect when @code{make-process} or @code{start-process} is called.  So you can specify how to communicate with one subprocess by binding the variable around the call to these functions."
msgstr "@code{process-connection-type}の値は@code{make-process}や@code{start-process}の呼び出し時に効果を発揮する。そのためにこれらの関数の呼び出し前後でこの変数をバインドすることにより、サブプロセスとやり取りする方法を指定できる。"

#. type: defvar
#: original_texis/processes.texi:849
msgid "Note that the value of this variable is ignored when @code{make-process} is called with a non-@code{nil} value of the @code{:stderr} parameter; in that case, Emacs will communicate with the process using pipes."
msgstr "この変数の値は@code{make-process}が非@code{nil}値の@code{:stderr}パラメーターで呼び出された際には無視される。この場合には、Emacsはpipeを使用してプロセスと対話する。"

#. type: group
#: original_texis/processes.texi:854
#, no-wrap
msgid ""
"(let ((process-connection-type nil))  ; @r{use a pipe}\n"
"  (start-process @dots{}))\n"
msgstr ""
"(let ((process-connection-type nil))  ; @r{pipeを使用}\n"
"  (start-process @dots{}))\n"

#. type: defvar
#: original_texis/processes.texi:860
msgid "To determine whether a given subprocess actually got a pipe or a pty, use the function @code{process-tty-name} (@pxref{Process Information})."
msgstr "与えられたサブプロセスが実際にはpipeとptyのどちらを取得したかを判断するには関数@code{process-tty-name}を使用する(@ref{Process Information}を参照)。"

#. type: cindex
#: original_texis/processes.texi:864
#, no-wrap
msgid "deleting processes"
msgstr "deleting processes"

#. type: Plain text
#: original_texis/processes.texi:873
msgid "@dfn{Deleting a process} disconnects Emacs immediately from the subprocess.  Processes are deleted automatically after they terminate, but not necessarily right away.  You can delete a process explicitly at any time.  If you explicitly delete a terminated process before it is deleted automatically, no harm results.  Deleting a running process sends a signal to terminate it (and its child processes, if any), and calls the process sentinel.  @xref{Sentinels}."
msgstr "@dfn{プロセス削除(deleting a process)}とはEmacsをサブプロセスから即座に切断することです。プロセスは終了後に自動的に削除されますが即座に削除される必要はありません。任意のタイミングで明示的にプロセスを削除できます。終了したプロセスが自動的に削除される前に明示的に削除しても害はありません。実行中のプロセスの削除はプロセス(もしあれば子プロセスにも)を終了するためにシグナルを送信してプロセスセンチネルを呼び出します。@ref{Sentinels}を参照してください。"

#. type: Plain text
#: original_texis/processes.texi:880
msgid "When a process is deleted, the process object itself continues to exist as long as other Lisp objects point to it.  All the Lisp primitives that work on process objects accept deleted processes, but those that do I/O or send signals will report an error.  The process mark continues to point to the same place as before, usually into a buffer where output from the process was being inserted."
msgstr "プロセスが削除される際、そのプロセスオブジェクト自体はそれを参照する別のLispオブジェクトが存在する限り継続し続けます。プロセスオブジェクトに作用するすべてのLispプリミティブはプロセスの削除を受け入れますが、I/Oを行ったりシグナルを送信するプリミティブはエラーを報告するでしょう。プロセスマークは通常はプロセスからの出力がバッファーに挿入される箇所となる、以前と同じ箇所をポイントし続けます。"

#. type: defopt
#: original_texis/processes.texi:881
#, no-wrap
msgid "delete-exited-processes"
msgstr "delete-exited-processes"

#. type: defopt
#: original_texis/processes.texi:887
msgid "This variable controls automatic deletion of processes that have terminated (due to calling @code{exit} or to a signal).  If it is @code{nil}, then they continue to exist until the user runs @code{list-processes}.  Otherwise, they are deleted immediately after they exit."
msgstr "この変数は、(@code{exit}呼び出しやシグナルにより)終了したプロセスの自動的な削除を制御する。これが@code{nil}ならユーザーが@code{list-processes}を実行するまでプロセスは存在し続けて、それ以外ならexit後に即座に削除される。"

#. type: defun
#: original_texis/processes.texi:889
#, no-wrap
msgid "delete-process process"
msgstr "delete-process process"

#. type: defun
#: original_texis/processes.texi:899
msgid "This function deletes a process, killing it with a @code{SIGKILL} signal if the process was running a program.  The argument may be a process, the name of a process, a buffer, or the name of a buffer.  (A buffer or buffer-name stands for the process that @code{get-buffer-process} returns.)  Calling @code{delete-process} on a running process terminates it, updates the process status, and runs the sentinel immediately.  If the process has already terminated, calling @code{delete-process} has no effect on its status, or on the running of its sentinel (which will happen sooner or later)."
msgstr "この関数はプロセスがプログラムを実行していたら@code{SIGKILL}シグナルでkillすることによりプロセスを削除する。引数はプロセス、プロセスの名前、バッファー、バッファーの名前かもしれない(バッファーやバッファー名なら@code{get-buffer-process}がリターンするプロセスを意味する)。実行中のプロセスに@code{delete-process}を呼び出すことによりプロセスを終了してプロセス状態を更新して即座にセンチネルを実行する。そのプロセスがすでに終了していれば、@code{delete-process}呼び出しはプロセス状態、または(遅かれ早かれ発生するであろう)プロセスセンチネルの実行に影響を与えない。"

#. type: defun
#: original_texis/processes.texi:904
msgid "If the process object represents a network, serial, or pipe connection, its status changes to @code{closed}; otherwise, it changes to @code{signal}, unless the process already exited.  @xref{Process Information, process-status}."
msgstr "プロセスオブジェクトがネットワーク接続、シリアル接続、pipe接続を表す場合には状態は@code{closed}、それ以外ならそのプロセスがexit済みでなければ@code{signal}に変更される。@ref{Process Information, process-status}を参照のこと。"

#. type: group
#: original_texis/processes.texi:909
#, no-wrap
msgid ""
"(delete-process \"*shell*\")\n"
"     @result{} nil\n"
msgstr ""
"(delete-process \"*shell*\")\n"
"     @result{} nil\n"

#. type: cindex
#: original_texis/processes.texi:915
#, no-wrap
msgid "process information"
msgstr "process information"

#. type: Plain text
#: original_texis/processes.texi:918
msgid "Several functions return information about processes."
msgstr "プロセスの状態に関する情報をリターンする関数がいくつかあり。"

#. type: deffn
#: original_texis/processes.texi:919
#, no-wrap
msgid "Command list-processes &optional query-only buffer"
msgstr "Command list-processes &optional query-only buffer"

#. type: deffn
#: original_texis/processes.texi:923
msgid "This command displays a listing of all living processes.  In addition, it finally deletes any process whose status was @samp{Exited} or @samp{Signaled}.  It returns @code{nil}."
msgstr "このコマンドは、すべての生きたプロセスのリストを表示する。加えてこれは最後に、状態が@samp{Exited}か@samp{Signaled}だったすべてのプロセスを削除する。このコマンドは@code{nil}をリターンする。"

#. type: deffn
#: original_texis/processes.texi:927
msgid "The processes are shown in a buffer named @file{*Process List*} (unless you specify otherwise using the optional argument @var{buffer}), whose major mode is Process Menu mode."
msgstr "プロセスはメジャーモードがProcess Menuモードであるような、@file{*Process List*}という名前のバッファーに表示される(オプション引数@var{buffer}で他の名前を指定していない場合)。"

#. type: deffn
#: original_texis/processes.texi:930
msgid "If @var{query-only} is non-@code{nil}, it only lists processes whose query flag is non-@code{nil}.  @xref{Query Before Exit}."
msgstr "@var{query-only}が非@code{nil}なら、queryフラグが非@code{nil}のプロセスだけをリストする。@ref{Query Before Exit}を参照のこと。"

#. type: defun
#: original_texis/processes.texi:932
#, no-wrap
msgid "process-list"
msgstr "process-list"

#. type: defun
#: original_texis/processes.texi:934
msgid "This function returns a list of all processes that have not been deleted."
msgstr "この関数は削除されていないすべてのプロセスのリストをリターンする。"

#. type: group
#: original_texis/processes.texi:939
#, no-wrap
msgid ""
"(process-list)\n"
"     @result{} (#<process display-time> #<process shell>)\n"
msgstr ""
"(process-list)\n"
"     @result{} (#<process display-time> #<process shell>)\n"

#. type: defun
#: original_texis/processes.texi:943
#, no-wrap
msgid "get-process name"
msgstr "get-process name"

#. type: defun
#: original_texis/processes.texi:947
msgid "This function returns the process named @var{name} (a string), or @code{nil} if there is none.  The argument @var{name} can also be a process object, in which case it is returned."
msgstr "この関数は@var{name} (文字列)というプロセス、存在しなければ@code{nil}をリターンする。引数@var{name}はプロセスオブジェクトでもよく、この場合にはそれがリターンされる。"

#. type: group
#: original_texis/processes.texi:952
#, no-wrap
msgid ""
"(get-process \"shell\")\n"
"     @result{} #<process shell>\n"
msgstr ""
"(get-process \"shell\")\n"
"     @result{} #<process shell>\n"

#. type: defun
#: original_texis/processes.texi:956
#, no-wrap
msgid "process-command process"
msgstr "process-command process"

#. type: defun
#: original_texis/processes.texi:963
msgid "This function returns the command that was executed to start @var{process}.  This is a list of strings, the first string being the program executed and the rest of the strings being the arguments that were given to the program.  For a network, serial, or pipe connection, this is either @code{nil}, which means the process is running or @code{t} (process is stopped)."
msgstr "この関数は@var{process}を開始するために実行されたコマンドをリターンする。これは文字列のリストで1つ目の文字列は実行されたプログラム、残りの文字列はそのプログラムに与えられた引数。ネットワーク接続、シリアル接続、pipe接続にたいしては@code{nil} (プロセスは実行中)か@code{t} (プロセスは停止中)のいずれか。"

#. type: group
#: original_texis/processes.texi:968
#, no-wrap
msgid ""
"(process-command (get-process \"shell\"))\n"
"     @result{} (\"bash\" \"-i\")\n"
msgstr ""
"(process-command (get-process \"shell\"))\n"
"     @result{} (\"bash\" \"-i\")\n"

#. type: defun
#: original_texis/processes.texi:972
#, no-wrap
msgid "process-contact process &optional key"
msgstr "process-contact process &optional key"

#. type: defun
#: original_texis/processes.texi:979
msgid "This function returns information about how a network, a serial, or a pipe connection was set up.  When @var{key} is @code{nil}, it returns @code{(@var{hostname} @var{service})} for a network connection, @code{(@var{port} @var{speed})} for a serial connection, and @code{t} for a pipe connection.  For an ordinary child process, this function always returns @code{t} when called with a @code{nil} @var{key}."
msgstr "この関数はネットワーク接続、シリアル接続、pipe接続がセットアップされた方法に関する情報をリターンする。@var{key}が@code{nil}ならネットワーク接続には@code{(@var{hostname} @var{service})}、シリアル接続には@code{(@var{port} @var{speed})}、pipe接続には@code{t}をリターンする。普通の子プロセスにたいしては、この関数は@var{key}が@code{nil}で呼び出されると常に@code{t}をリターンする。"

#. type: defun
#: original_texis/processes.texi:986
msgid "If @var{key} is @code{t}, the value is the complete status information for the connection, server, serial port, or pipe; that is, the list of keywords and values specified in @code{make-network-process}, @code{make-serial-process}, or @code{make-pipe-process}, except that some of the values represent the current status instead of what you specified."
msgstr "@var{key}が@code{t}なら値はその接続、サーバー、シリアルポート、またはpipeについての完全な状態情報、すなわち@code{make-network-process}、@code{make-serial-process}、または@code{make-pipe-process}内で指定されるキーワードと値のリストとなる。ただしいくつかの値については、指定した値のかわりにカレント状態を表す値となる。"

#. type: defun
#: original_texis/processes.texi:989
msgid "For a network process, the values include (see @code{make-network-process} for a complete list):"
msgstr "ネットワークプロセスにたいしては以下の値が含まれる(完全なリストは@code{make-network-process}を参照):"

#. type: item
#: original_texis/processes.texi:991
#, no-wrap
msgid ":buffer"
msgstr ":buffer"

#. type: table
#: original_texis/processes.texi:993
msgid "The associated value is the process buffer."
msgstr "値にはプロセスのバッファーが割り当てられる。"

#. type: item
#: original_texis/processes.texi:993
#, no-wrap
msgid ":filter"
msgstr ":filter"

#. type: table
#: original_texis/processes.texi:996
msgid "The associated value is the process filter function.  @xref{Filter Functions}."
msgstr "値にはプロセスのフィルター関数が割り当てられる。@ref{Filter Functions}を参照のこと。"

#. type: item
#: original_texis/processes.texi:996
#, no-wrap
msgid ":sentinel"
msgstr ":sentinel"

#. type: table
#: original_texis/processes.texi:998
msgid "The associated value is the process sentinel function.  @xref{Sentinels}."
msgstr "値にはプロセスのセンチネル関数が割り当てられる。@ref{Sentinels}を参照のこと。"

#. type: item
#: original_texis/processes.texi:998
#, no-wrap
msgid ":remote"
msgstr ":remote"

#. type: table
#: original_texis/processes.texi:1000
msgid "In a connection, the address in internal format of the remote peer."
msgstr "接続にたいしては内部的なフォーマットによるリモートピアーのアドレス。"

#. type: item
#: original_texis/processes.texi:1000
#, no-wrap
msgid ":local"
msgstr ":local"

#. type: table
#: original_texis/processes.texi:1002
msgid "The local address, in internal format."
msgstr "内部的なフォーマットによるローカルアドレス。"

#. type: item
#: original_texis/processes.texi:1002
#, no-wrap
msgid ":service"
msgstr ":service"

#. type: table
#: original_texis/processes.texi:1005
msgid "In a server, if you specified @code{t} for @var{service}, this value is the actual port number."
msgstr "この値はサーバーでは@var{service}に@code{t}を指定すると実際のポート番号。"

#. type: defun
#: original_texis/processes.texi:1009
msgid "@code{:local} and @code{:remote} are included even if they were not specified explicitly in @code{make-network-process}."
msgstr "@code{make-network-process}内で明示的に指定されていなくても@code{:local}と@code{:remote}は値に含まれる。"

#. type: defun
#: original_texis/processes.texi:1013
msgid "For a serial connection, see @code{make-serial-process} and @code{serial-process-configure} for the list of keys.  For a pipe connection, see @code{make-pipe-process} for the list of keys."
msgstr "シリアル接続については@code{make-serial-process}、キーのリストは@code{serial-process-configure}を参照のこと。pipe接続については@code{make-pipe-process}を参照のこと。"

#. type: defun
#: original_texis/processes.texi:1016
msgid "If @var{key} is a keyword, the function returns the value corresponding to that keyword."
msgstr "@var{key}がキーワードなら、この関数はそのキーワードに対応する値をリターンする。"

#. type: defun
#: original_texis/processes.texi:1018
#, no-wrap
msgid "process-id process"
msgstr "process-id process"

#. type: defun
#: original_texis/processes.texi:1026
msgid "This function returns the @acronym{PID} of @var{process}.  This is an integral number that distinguishes the process @var{process} from all other processes running on the same computer at the current time.  The @acronym{PID} of a process is chosen by the operating system kernel when the process is started and remains constant as long as the process exists.  For network, serial, and pipe connections, this function returns @code{nil}."
msgstr "この関数は@var{process}の@acronym{PID}をリターンする。これは同じコンピューター上でカレント時に実行中の他のすべてのプロセスからプロセス@var{process}を区別するための整数。プロセスの@acronym{PID}はプロセスの開始時にオペレーティングシステムのカーネルにより選択されて、そのプロセスが存在する限り定数として保たれる。この関数はネットワーク接続、シリアル接続、pipe接続には@code{nil}をリターンする。"

#. type: defun
#: original_texis/processes.texi:1028
#, no-wrap
msgid "process-name process"
msgstr "process-name process"

#. type: defun
#: original_texis/processes.texi:1030
msgid "This function returns the name of @var{process}, as a string."
msgstr "この関数は@var{process}の名前を文字列としてリターンする。"

#. type: defun
#: original_texis/processes.texi:1032
#, no-wrap
msgid "process-status process-name"
msgstr "process-status process-name"

#. type: defun
#: original_texis/processes.texi:1036
msgid "This function returns the status of @var{process-name} as a symbol.  The argument @var{process-name} must be a process, a buffer, or a process name (a string)."
msgstr "この関数は@var{process-name}の状態を文字列でリターンする。引数@var{process-name}はプロセス、バッファー、またはプロセス名(文字列)でなければならない。"

#. type: defun
#: original_texis/processes.texi:1038
msgid "The possible values for an actual subprocess are:"
msgstr "実際のサブプセスにたいして可能な値は:"

#. type: item
#: original_texis/processes.texi:1040
#, no-wrap
msgid "run"
msgstr "run"

#. type: table
#: original_texis/processes.texi:1042
msgid "for a process that is running."
msgstr "実行中のプロセス。"

#. type: item
#: original_texis/processes.texi:1042
#, no-wrap
msgid "stop"
msgstr "stop"

#. type: table
#: original_texis/processes.texi:1044
msgid "for a process that is stopped but continuable."
msgstr "停止しているが継続可能なプロセス。"

#. type: item
#: original_texis/processes.texi:1044
#, no-wrap
msgid "exit"
msgstr "exit"

#. type: table
#: original_texis/processes.texi:1046
msgid "for a process that has exited."
msgstr "exitしたプロセス。"

#. type: item
#: original_texis/processes.texi:1046
#, no-wrap
msgid "signal"
msgstr "signal"

#. type: table
#: original_texis/processes.texi:1048
msgid "for a process that has received a fatal signal."
msgstr "致命的なシグナルを受信したプロセス。"

#. type: item
#: original_texis/processes.texi:1048
#, no-wrap
msgid "open"
msgstr "open"

#. type: table
#: original_texis/processes.texi:1050
msgid "for a network, serial, or pipe connection that is open."
msgstr "オープンされたネットワーク接続、シリアル接続、またはpipe接続。"

#. type: item
#: original_texis/processes.texi:1050
#, no-wrap
msgid "closed"
msgstr "closed"

#. type: table
#: original_texis/processes.texi:1054
msgid "for a network, serial, or pipe connection that is closed.  Once a connection is closed, you cannot reopen it, though you might be able to open a new connection to the same place."
msgstr "クローズされたネットワーク接続、シリアル接続、またはpipe接続。一度クローズされた接続は、たとえ同じ場所にたいして新たな接続をオープンすることができたとしても再度オープンすることはできない。"

#. type: item
#: original_texis/processes.texi:1054
#, no-wrap
msgid "connect"
msgstr "connect"

#. type: table
#: original_texis/processes.texi:1056
msgid "for a non-blocking connection that is waiting to complete."
msgstr "完了を待つ非ブロッキング接続。"

#. type: item
#: original_texis/processes.texi:1056
#, no-wrap
msgid "failed"
msgstr "failed"

#. type: table
#: original_texis/processes.texi:1058
msgid "for a non-blocking connection that has failed to complete."
msgstr "完了に失敗した非ブロッキング接続。"

#. type: item
#: original_texis/processes.texi:1058
#, no-wrap
msgid "listen"
msgstr "listen"

#. type: table
#: original_texis/processes.texi:1060
msgid "for a network server that is listening."
msgstr "listen中のネットワークサーバー。"

#. type: table
#: original_texis/processes.texi:1062
msgid "if @var{process-name} is not the name of an existing process."
msgstr "@var{process-name}が既存のプロセス名でない場合。"

#. type: group
#: original_texis/processes.texi:1068
#, no-wrap
msgid ""
"(process-status (get-buffer \"*shell*\"))\n"
"     @result{} run\n"
msgstr ""
"(process-status (get-buffer \"*shell*\"))\n"
"     @result{} run\n"

#. type: defun
#: original_texis/processes.texi:1076
msgid "For a network, serial, or pipe connection, @code{process-status} returns one of the symbols @code{open}, @code{stop}, or @code{closed}.  The latter means that the other side closed the connection, or Emacs did @code{delete-process}.  The value @code{stop} means that @code{stop-process} was called on the connection."
msgstr "ネットワーク接続、シリアル接続、pipe接続にたいして@code{process-status}は@code{open}、@code{stop}、または@code{closed}いずれかのシンボルをリターンする。@code{closed}は相手側が接続をクローズしたか、あるいはEmacsが@code{delete-process}を行なったことを意味する。値@code{stop}はその接続で@code{stop-process}が呼び出されたことを意味する。"

#. type: defun
#: original_texis/processes.texi:1078
#, no-wrap
msgid "process-live-p process"
msgstr "process-live-p process"

#. type: defun
#: original_texis/processes.texi:1082
msgid "This function returns non-@code{nil} if @var{process} is alive.  A process is considered alive if its status is @code{run}, @code{open}, @code{listen}, @code{connect} or @code{stop}."
msgstr "この関数は@var{process}がアクティブなら、非@code{nil}をリターンする。状態が@code{run}、@code{open}、@code{listen}、@code{connect}、@code{stop}のプロセスはアクティブとみなされる。"

#. type: defun
#: original_texis/processes.texi:1084
#, no-wrap
msgid "process-type process"
msgstr "process-type process"

#. type: defun
#: original_texis/processes.texi:1089
msgid "This function returns the symbol @code{network} for a network connection or server, @code{serial} for a serial port connection, @code{pipe} for a pipe connection, or @code{real} for a subprocess created for running a program."
msgstr "この関数はネットワーク接続やサーバーにたいしては@code{network}、シリアルポート接続にたいしては@code{serial}、pipe接続にたいしては@code{pipe}、プログラム実行用に作成されたサブプロセスにたいしては@code{real}というシンボルをリターンする。"

#. type: defun
#: original_texis/processes.texi:1091
#, no-wrap
msgid "process-exit-status process"
msgstr "process-exit-status process"

#. type: defun
#: original_texis/processes.texi:1098
msgid "This function returns the exit status of @var{process} or the signal number that killed it.  (Use the result of @code{process-status} to determine which of those it is.)  If @var{process} has not yet terminated, the value is 0.  For network, serial, and pipe connections that are already closed, the value is either 0 or 256, depending on whether the connection was closed normally or abnormally."
msgstr "この関数は@var{process}のexitステータス、またはプロセスをkillしたシグナル番号をリターンする(いずれであるかの判定には@code{process-status}の結果を使用)。@var{process}がまだ終了していなければ値は0。すでにcloseされたネットワーク接続、シリアル接続、pipe接続についての値は接続のcloseが正常か異常かによって0か256のいずれかとなる。"

#. type: defun
#: original_texis/processes.texi:1100
#, no-wrap
msgid "process-tty-name process"
msgstr "process-tty-name process"

#. type: defun
#: original_texis/processes.texi:1109
msgid "This function returns the terminal name that @var{process} is using for its communication with Emacs---or @code{nil} if it is using pipes instead of a pty (see @code{process-connection-type} in @ref{Asynchronous Processes}).  If @var{process} represents a program running on a remote host, the terminal name used by that program on the remote host is provided as process property @code{remote-tty}.  If @var{process} represents a network, serial, or pipe connection, the value is @code{nil}."
msgstr "この関数は@var{process}がEmacsとの対話に使用する端末名、ptyではなくpipeを使用する場合には@code{nil}をリターンする(@ref{Asynchronous Processes}の@code{process-connection-type}を参照)。@var{process}がリモートホスト上で実行中のプログラムを表す場合には、プロセスの@code{remote-tty}プロパティとしてリモートホスト上でそのプログラムに使用される端末名が提供される。@var{process}がネットワーク接続、シリアル接続、pipe接続を表す場合には値は@code{nil}。"

#. type: defun
#: original_texis/processes.texi:1111
#, no-wrap
msgid "process-coding-system process"
msgstr "process-coding-system process"

#. type: anchor{#1}
#: original_texis/processes.texi:1116
msgid "Coding systems for a subprocess"
msgstr "Coding systems for a subprocess"

#. type: defun
#: original_texis/processes.texi:1116
msgid "This function returns a cons cell @code{(@var{decode} . @var{encode})}, describing the coding systems in use for decoding output from, and encoding input to, @var{process} (@pxref{Coding Systems})."
msgstr "この関数は@var{process}からの出力のデコードに使用するコーディングシステムと、@var{process}への入力のエンコードに使用するコーディングシステムを記述するコンスセル@code{(@var{decode} . @var{encode})}をリターンする(@ref{Coding Systems}を参照)。"

#. type: defun
#: original_texis/processes.texi:1118
#, no-wrap
msgid "set-process-coding-system process &optional decoding-system encoding-system"
msgstr "set-process-coding-system process &optional decoding-system encoding-system"

#. type: defun
#: original_texis/processes.texi:1123
msgid "This function specifies the coding systems to use for subsequent output from and input to @var{process}.  It will use @var{decoding-system} to decode subprocess output, and @var{encoding-system} to encode subprocess input."
msgstr "この関数は@var{process}にたいする後続の入出力に使用するコーディングシステムを指定する。これはサブプロセスの出力のデコードに@var{decoding-system}、入力のエンコードに@var{encoding-system}を使用する。"

#. type: Plain text
#: original_texis/processes.texi:1127
msgid "Every process also has a property list that you can use to store miscellaneous values associated with the process."
msgstr "すべてのプロセスには、そのプロセスに関連するさまざまな値を格納するために使用できるプロパティリストもあります。"

#. type: defun
#: original_texis/processes.texi:1128
#, no-wrap
msgid "process-get process propname"
msgstr "process-get process propname"

#. type: defun
#: original_texis/processes.texi:1131
msgid "This function returns the value of the @var{propname} property of @var{process}."
msgstr "この関数は@var{process}のプロパティ@var{propname}の値をリターンする。"

#. type: defun
#: original_texis/processes.texi:1133
#, no-wrap
msgid "process-put process propname value"
msgstr "process-put process propname value"

#. type: defun
#: original_texis/processes.texi:1136
msgid "This function sets the value of the @var{propname} property of @var{process} to @var{value}."
msgstr "この関数は@var{process}のプロパティ@var{propname}の値に@var{value}をセットする。"

#. type: defun
#: original_texis/processes.texi:1138
#, no-wrap
msgid "process-plist process"
msgstr "process-plist process"

#. type: defun
#: original_texis/processes.texi:1140
msgid "This function returns the process plist of @var{process}."
msgstr "この関数は@var{process}のプロセスplistをリターンする。"

#. type: defun
#: original_texis/processes.texi:1142
#, no-wrap
msgid "set-process-plist process plist"
msgstr "set-process-plist process plist"

#. type: defun
#: original_texis/processes.texi:1144
msgid "This function sets the process plist of @var{process} to @var{plist}."
msgstr "この関数は@var{process}のプロセスplistに@var{plist}をセットする。"

#. type: section
#: original_texis/processes.texi:1147
#, no-wrap
msgid "Sending Input to Processes"
msgstr "Sending Input to Processes"

#. type: cindex
#: original_texis/processes.texi:1148
#, no-wrap
msgid "process input"
msgstr "process input"

#. type: Plain text
#: original_texis/processes.texi:1156
msgid "Asynchronous subprocesses receive input when it is sent to them by Emacs, which is done with the functions in this section.  You must specify the process to send input to, and the input data to send.  If the subprocess runs a program, the data appears on the standard input of that program; for connections, the data is sent to the connected device or program."
msgstr "非同期サブプロセスはEmacsにより入力が送信されたときに入力を受信して、それはこのセクション内の関数で行われます。これを行うには入力を送信するプロセスと送信するための入力データを指定しなければなりません。サブプロセスがプログラムを実行していたら、データはプログラムの標準入力として出現します。接続にたいしては、データは接続されたデバイスかプログラムに送信されます。"

#. type: Plain text
#: original_texis/processes.texi:1162
msgid "Some operating systems have limited space for buffered input in a pty.  On these systems, Emacs sends an @acronym{EOF} periodically amidst the other characters, to force them through.  For most programs, these @acronym{EOF}s do no harm."
msgstr "オペレーティングシステムにはptyのバッファーされた入力にたいして制限をもつものがいくつかあります。それらのシステムでは、Emacsは他の文字列の間に定期的かつ強制的に@acronym{EOF}を送信します。ほとんどのプログラムにたいして、これらの@acronym{EOF}は無害です。"

#. type: Plain text
#: original_texis/processes.texi:1169
msgid "Subprocess input is normally encoded using a coding system before the subprocess receives it, much like text written into a file.  You can use @code{set-process-coding-system} to specify which coding system to use (@pxref{Process Information}).  Otherwise, the coding system comes from @code{coding-system-for-write}, if that is non-@code{nil}; or else from the defaulting mechanism (@pxref{Default Coding Systems})."
msgstr "サブプロセスの入力はテキストをファイルに書き込むときと同じように、通常はサブプロセスが受信する前、コーディングシステムを使用してエンコードされます。どのコーディングシステムを使用するかを指定するには@code{set-process-coding-system}を使用できます(@ref{Process Information}を参照)。それ以外の場合には、非@code{nil}なら@code{coding-system-for-write}がコーディングシステムとなり、さもなくばデフォルトのメカニズムがコーディングシステムを決定します(@ref{Default Coding Systems}を参照)。"

#. type: Plain text
#: original_texis/processes.texi:1176
msgid "Sometimes the system is unable to accept input for that process, because the input buffer is full.  When this happens, the send functions wait a short while, accepting output from subprocesses, and then try again.  This gives the subprocess a chance to read more of its pending input and make space in the buffer.  It also allows filters, sentinels and timers to run---so take account of that in writing your code."
msgstr "入力バッファーが一杯でシステムがプロセスからの入力を受け取ることができないことがあります。これが発生したときには送信関数はしばらく待機してからサブプロセスの出力を受け取って再度送信を試みます。これは保留となっている更なる入力を読み取ってバッファーに空きを作る機会をサブプロセスに与えます。これはフィルター、センチネル、タイマーの実行も可能にするのでコードを記述する際はそれを考慮してください。"

#. type: Plain text
#: original_texis/processes.texi:1181
msgid "In these functions, the @var{process} argument can be a process or the name of a process, or a buffer or buffer name (which stands for a process via @code{get-buffer-process}).  @code{nil} means the current buffer's process."
msgstr "以下の関数では@var{process}引数はプロセス、プロセス名、またはバッファー、バッファー名(@code{get-buffer-process}で取得されるプロセス)、@code{nil}はカレントバッファーのプロセスを意味します。"

#. type: defun
#: original_texis/processes.texi:1182
#, no-wrap
msgid "process-send-string process string"
msgstr "process-send-string process string"

#. type: defun
#: original_texis/processes.texi:1186
msgid "This function sends @var{process} the contents of @var{string} as standard input.  It returns @code{nil}.  For example, to make a Shell buffer list files:"
msgstr "この関数は@var{string}のコンテンツを標準入力として@var{process}に送信する。たとえばファイルをリストするShellバッファーを作成するには:"

#. type: group
#: original_texis/processes.texi:1191
#, no-wrap
msgid ""
"(process-send-string \"shell<1>\" \"ls\\n\")\n"
"     @result{} nil\n"
msgstr ""
"(process-send-string \"shell<1>\" \"ls\\n\")\n"
"     @result{} nil\n"

#. type: defun
#: original_texis/processes.texi:1195
#, no-wrap
msgid "process-send-region process start end"
msgstr "process-send-region process start end"

#. type: defun
#: original_texis/processes.texi:1198
msgid "This function sends the text in the region defined by @var{start} and @var{end} as standard input to @var{process}."
msgstr "この関数は@var{start}と@var{end}で定義されるリージョンのテキストを標準入力として@var{process}に送信する。"

#. type: defun
#: original_texis/processes.texi:1202
msgid "An error is signaled unless both @var{start} and @var{end} are integers or markers that indicate positions in the current buffer.  (It is unimportant which number is larger.)"
msgstr "@var{start}と@var{end}が、カレントバッファー内の位置を示す整数かマーカーでなければエラーがシグナルされる(いずれかの大小は重要ではない)。"

#. type: defun
#: original_texis/processes.texi:1204
#, no-wrap
msgid "process-send-eof &optional process"
msgstr "process-send-eof &optional process"

#. type: defun
#: original_texis/processes.texi:1208
msgid "This function makes @var{process} see an end-of-file in its input.  The @acronym{EOF} comes after any text already sent to it.  The function returns @var{process}."
msgstr "この関数は@var{process}が入力内の@acronym{EOF} (end-of-file)を見ることを可能にする。@acronym{EOF}はすべての送信済みテキストの後になる。この関数は@var{process}をリターンする。"

#. type: group
#: original_texis/processes.texi:1213
#, no-wrap
msgid ""
"(process-send-eof \"shell\")\n"
"     @result{} \"shell\"\n"
msgstr ""
"(process-send-eof \"shell\")\n"
"     @result{} \"shell\"\n"

#. type: defun
#: original_texis/processes.texi:1217
#, no-wrap
msgid "process-running-child-p &optional process"
msgstr "process-running-child-p &optional process"

#. type: defun
#: original_texis/processes.texi:1226
msgid "This function will tell you whether a @var{process}, which must not be a connection but a real subprocess, has given control of its terminal to a child process of its own.  If this is true, the function returns the numeric ID of the foreground process group of @var{process}; it returns @code{nil} if Emacs can be certain that this is not so.  The value is @code{t} if Emacs cannot tell whether this is true.  This function signals an error if @var{process} is a network, serial, or pipe connection, or is the subprocess is not active."
msgstr "この関数は@var{process}が接続ではない実際のサブプロセスであり、端末の制御を自身の子プロセスに与えたかどうかを示す。これが真なら関数は@var{process}のフォアグラウンドプロセスグループの数値ID、これが真ではないとEmacsが判断すれば@code{nil}をリターンする。これが真かどうかをEmacsが判断できなければ値は@code{t}。@var{process}がネットワーク接続、シリアル接続、pipe接続、またはサブプロセスが非アクティブなら関数はエラーをシグナルする。"

#. type: section
#: original_texis/processes.texi:1229
#, no-wrap
msgid "Sending Signals to Processes"
msgstr "Sending Signals to Processes"

#. type: cindex
#: original_texis/processes.texi:1230
#, no-wrap
msgid "process signals"
msgstr "process signals"

#. type: cindex
#: original_texis/processes.texi:1231
#, no-wrap
msgid "sending signals"
msgstr "sending signals"

#. type: cindex
#: original_texis/processes.texi:1232
#, no-wrap
msgid "signals"
msgstr "signals"

#. type: Plain text
#: original_texis/processes.texi:1239
msgid "@dfn{Sending a signal} to a subprocess is a way of interrupting its activities.  There are several different signals, each with its own meaning.  The set of signals and their names is defined by the operating system.  For example, the signal @code{SIGINT} means that the user has typed @kbd{C-c}, or that some analogous thing has happened."
msgstr "サブプロセスへの@dfn{シグナル送信(sending a signal)}はプロセス活動に割り込む手段の1つです。異なる複数のシグナルがあり、それぞれが独自に意味をもちます。シグナルのセットとそれらの意味はオペレーティングシステムにより定義されます。たとえばシグナル@code{SIGINT}はユーザーが@kbd{C-c}をタイプしたか、それに類似する何かが発生したことを意味します。"

#. type: Plain text
#: original_texis/processes.texi:1244
msgid "Each signal has a standard effect on the subprocess.  Most signals kill the subprocess, but some stop (or resume) execution instead.  Most signals can optionally be handled by programs; if the program handles the signal, then we can say nothing in general about its effects."
msgstr "各シグナルはサブプロセスに標準的な効果をもちます。ほとんどのシグナルはサブプロセスをkillしますが、かわりに実行を停止(や再開)するものもいくつかあります。ほとんどのシグナルはオプションでプログラムでハンドル(処理)することができます。プログラムがそのシグナルをハンドルする場合には、その影響についてわたしたちは一般的には何も言うことはできません。"

#. type: Plain text
#: original_texis/processes.texi:1251
msgid "You can send signals explicitly by calling the functions in this section.  Emacs also sends signals automatically at certain times: killing a buffer sends a @code{SIGHUP} signal to all its associated processes; killing Emacs sends a @code{SIGHUP} signal to all remaining processes.  (@code{SIGHUP} is a signal that usually indicates that the user ``hung up the phone'', i.e., disconnected.)"
msgstr "このセクション内の関数を呼び出すことにより明示的にシグナルを送信できます。Emacsも特定のタイミングで自動的にシグナルを送信します。バッファーのkillにより、それに関連するプロセスには@code{SIGHUP}シグナル、Emacsのkillにより残されたすべてのプロセスに@code{SIGHUP}シグナルが送信されます(@code{SIGHUP}は通常はユーザーが``hung up the phone''、電話を切った、つまり接続を断ったことを示す)。"

#. type: Plain text
#: original_texis/processes.texi:1254
msgid "Each of the signal-sending functions takes two optional arguments: @var{process} and @var{current-group}."
msgstr "シグナル送信関数はそれぞれ@var{process}と@var{current-group}いう2つのオプション引数を受け取ります。"

#. type: Plain text
#: original_texis/processes.texi:1262
msgid "The argument @var{process} must be either a process, a process name, a buffer, a buffer name, or @code{nil}.  A buffer or buffer name stands for a process through @code{get-buffer-process}.  @code{nil} stands for the process associated with the current buffer.  Except with @code{stop-process} and @code{continue-process}, an error is signaled if @var{process} does not identify an active process, or if it represents a network, serial, or pipe connection."
msgstr "引数@var{process}はプロセス、プロセス名、バッファー、バッファー名、または@code{nil}のいずれかでなければなりません。バッファーやバッファー名は@code{get-buffer-process}を通じて得られるプロセスを意味します。@code{nil}はカレントバッファーに関連付けられたプロセスを意味します。@code{stop-process} and @code{continue-process}を除いて、@var{process}がプロセスを識別しない、あるいはネットワーク接続、シリアル接続、pipe接続を表す場合にはエラーがシグナルされます。"

#. type: Plain text
#: original_texis/processes.texi:1274
msgid "The argument @var{current-group} is a flag that makes a difference when you are running a job-control shell as an Emacs subprocess.  If it is non-@code{nil}, then the signal is sent to the current process-group of the terminal that Emacs uses to communicate with the subprocess.  If the process is a job-control shell, this means the shell's current subjob.  If @var{current-group} is @code{nil}, the signal is sent to the process group of the immediate subprocess of Emacs.  If the subprocess is a job-control shell, this is the shell itself.  If @var{current-group} is @code{lambda}, the signal is sent to the process-group that owns the terminal, but only if it is not the shell itself."
msgstr "引数@var{current-group}は、Emacsのサブプロセスとしてジョブ制御shell(job-control shell)を実行中の場合に異なる処理を行うためのフラグです。これが非@code{nil}なら、そのシグナルはEmacsがサブプロセスとの対話に使用する端末のカレントプロセスグループに送信されます。そのプロセスがジョブ制御shellなら、これはそのshellのカレントのsubジョブになります。@var{current-group}が@code{nil}なら、そのシグナルはEmacs自身のサブプロセスのプロセスグループに送信されます。そのプロセスがジョブ制御shellなら、それはshell自身になります。@var{current-group}が@code{lambda}なら、端末を所有するもののそれ自身はshellでない場合にはプロセスグループにシグナルを送信します。"

#. type: Plain text
#: original_texis/processes.texi:1280
msgid "The flag @var{current-group} has no effect when a pipe is used to communicate with the subprocess, because the operating system does not support the distinction in the case of pipes.  For the same reason, job-control shells won't work when a pipe is used.  See @code{process-connection-type} in @ref{Asynchronous Processes}."
msgstr "サブプロセスとの対話にpipeが使用されている際には、オペレーティングシステムがpipeの区別をサポートしないのでフラグ@var{current-group}に効果はありません。同じ理由によりpipeが使用されていればジョブ制御shellは機能しないでしょう。@ref{Asynchronous Processes}の@code{process-connection-type}を参照してください。"

#. type: defun
#: original_texis/processes.texi:1281
#, no-wrap
msgid "interrupt-process &optional process current-group"
msgstr "interrupt-process &optional process current-group"

#. type: defun
#: original_texis/processes.texi:1288
msgid "This function interrupts the process @var{process} by sending the signal @code{SIGINT}.  Outside of Emacs, typing the interrupt character (normally @kbd{C-c} on some systems, and @key{DEL} on others) sends this signal.  When the argument @var{current-group} is non-@code{nil}, you can think of this function as typing @kbd{C-c} on the terminal by which Emacs talks to the subprocess."
msgstr "この関数はシグナル@code{SIGINT}を送信することによりプロセス@var{process}に割り込む。Emacs外部ではinterrupt character(割り込み文字。いくつかのシステムでは通常は@kbd{C-c}、それ以外のシステムでは@key{DEL})をタイプすることによりシグナルが送信される。引数@var{current-group}が非@code{nil}のときは、Emacsがサブプロセスと対話する端末上で@kbd{C-c}がタイプされたと考えることができる。"

#. type: defun
#: original_texis/processes.texi:1290
#, no-wrap
msgid "kill-process &optional process current-group"
msgstr "kill-process &optional process current-group"

#. type: defun
#: original_texis/processes.texi:1294
msgid "This function kills the process @var{process} by sending the signal @code{SIGKILL}.  This signal kills the subprocess immediately, and cannot be handled by the subprocess."
msgstr "この関数はシグナル@code{SIGKILL}を送信することにより、プロセス@var{process}をkillする。このシグナルは即座にサブプロセスをkillしてサブプロセスでハンドルすることはできない。"

#. type: defun
#: original_texis/processes.texi:1296
#, no-wrap
msgid "quit-process &optional process current-group"
msgstr "quit-process &optional process current-group"

#. type: defun
#: original_texis/processes.texi:1301
msgid "This function sends the signal @code{SIGQUIT} to the process @var{process}.  This signal is the one sent by the quit character (usually @kbd{C-\\}) when you are not inside Emacs."
msgstr "この関数はプロセス@var{process}にシグナル@code{SIGQUIT}を送信する。これはEmacs外部ではquit character(通常は@kbd{C-\\})により送信されるシグナル。"

#. type: defun
#: original_texis/processes.texi:1303
#, no-wrap
msgid "stop-process &optional process current-group"
msgstr "stop-process &optional process current-group"

#. type: defun
#: original_texis/processes.texi:1311
msgid "This function stops the specified @var{process}.  If it is a real subprocess running a program, it sends the signal @code{SIGTSTP} to that subprocess.  If @var{process} represents a network, serial, or pipe connection, this function inhibits handling of the incoming data from the connection; for a network server, this means not accepting new connections.  Use @code{continue-process} to resume normal execution."
msgstr "この関数は指定した@var{process}を停止する。それがプログラムを実行中の実際のサブプロセスなら、そのサブプロセスにシグナル@code{SIGTSTP}を送信する。@var{process}がネットワーク接続、シリアル接続、pipe接続を表す場合には、この関数はその接続から到達するデータのハンドリングを抑制する。ネットワークサーバーでは、これは新たな接続をacceptしないことを意味する。通常の実行の再開には@code{continue-process}を使用すること。"

#. type: defun
#: original_texis/processes.texi:1317
msgid "Outside of Emacs, on systems with job control, the stop character (usually @kbd{C-z}) normally sends the @code{SIGTSTP} signal to a subprocess.  When @var{current-group} is non-@code{nil}, you can think of this function as typing @kbd{C-z} on the terminal Emacs uses to communicate with the subprocess."
msgstr "ジョブ制御をもつシステム上のEmacs外部ではstop character(通常は@kbd{C-z})が@code{SIGTSTP}シグナルを送信する。@var{current-group}が非@code{nil}なら、この関数をサブプロセスとの対話にEmacsが使用する端末上で@kbd{C-z}がタイプされたと考えることができる。"

#. type: defun
#: original_texis/processes.texi:1319
#, no-wrap
msgid "continue-process &optional process current-group"
msgstr "continue-process &optional process current-group"

#. type: defun
#: original_texis/processes.texi:1327
msgid "This function resumes execution of the process @var{process}.  If it is a real subprocess running a program, it sends the signal @code{SIGCONT} to that subprocess; this presumes that @var{process} was stopped previously.  If @var{process} represents a network, serial, or pipe connection, this function resumes handling of the incoming data from the connection.  For serial connections, data that arrived during the time the process was stopped might be lost."
msgstr "この関数はプロセス@var{process}の実行を再開する。それがプログラムを実行中の実際のサブプロセスなら、そのサブプロセスにシグナル@code{SIGCONT}を送信する。この関数は@var{process}が以前に停止されたとみなす。@var{process}がネットワーク接続、シリアル接続、pipe接続を表す場合には、この関数はその接続から到達するデータのハンドリングを再開する。シリアル接続ではプロセス停止中に到達したデータは失われるかもしれない。"

#. type: deffn
#: original_texis/processes.texi:1329
#, no-wrap
msgid "Command signal-process process signal"
msgstr "Command signal-process process signal"

#. type: deffn
#: original_texis/processes.texi:1333
msgid "This function sends a signal to process @var{process}.  The argument @var{signal} specifies which signal to send; it should be an integer, or a symbol whose name is a signal."
msgstr "この関数はプロセス@var{process}にシグナルを送信する。引数@var{signal}はどのシグナルを送信するかを指定する。これは整数、または名前がシグナルであるようなシンボルであること。"

#. type: deffn
#: original_texis/processes.texi:1337
msgid "The @var{process} argument can be a system process @acronym{ID} (an integer); that allows you to send signals to processes that are not children of Emacs.  @xref{System Processes}."
msgstr "@var{process}引数にはシステムプロセス@acronym{ID} (整数)を指定できる。これによりEmacsの子プロセス以外のプロセスにシグナルを送信できる。@ref{System Processes}を参照のこと。"

#. type: section
#: original_texis/processes.texi:1340
#, no-wrap
msgid "Receiving Output from Processes"
msgstr "Receiving Output from Processes"

#. type: cindex
#: original_texis/processes.texi:1341
#, no-wrap
msgid "process output"
msgstr "process output"

#. type: cindex
#: original_texis/processes.texi:1342
#, no-wrap
msgid "output from processes"
msgstr "output from processes"

#. type: Plain text
#: original_texis/processes.texi:1350
msgid "The output that an asynchronous subprocess writes to its standard output stream is passed to a function called the @dfn{filter function}.  The default filter function simply inserts the output into a buffer, which is called the associated buffer of the process (@pxref{Process Buffers}).  If the process has no buffer then the default filter discards the output."
msgstr "非同期サブプロセスが自身の標準出力に書き込んだ出力は@dfn{フィルター関数(filter function)}と呼ばれる関数に渡されます。デフォルトのフィルター関数は単に出力をバッファーに挿入します。このバッファーをプロセスに関連付けられたバッファーと呼びます(@ref{Process Buffers}を参照)。プロセスがバッファーをもたなければデフォルトフィルターは出力を破棄します。"

#. type: Plain text
#: original_texis/processes.texi:1360
msgid "If the subprocess writes to its standard error stream, by default the error output is also passed to the process filter function.  If Emacs uses a pseudo-TTY (pty) for communication with the subprocess, then it is impossible to separate the standard output and standard error streams of the subprocess, because a pseudo-TTY has only one output channel.  In that case, if you want to keep the output to those streams separate, you should redirect one of them to a file---for example, by using an appropriate shell command via @code{start-process-shell-command} or a similar function."
msgstr ""
"サブプロセスが標準エラーストリームに書き込む場合には、デフォルトではエラー出力もフィルター関数に渡されて処理されます。Emacsがサブプロセスとの対話に疑似端末(pty: pseudo-TTY)を使用する場合には、疑似端末は出力チャンネルを1つしかもてないので、サブプロセスの標準出力ストリームと標準エラーストリームを区別するのは不可能です。それらのストリームの出力を区別して保ちたい場合は、たとえば\n"
"@code{start-process-shell-command}や類似コマンドを通じて適当なshellコマンドを使用することにより、いずれか1つをファイルにリダイレクトする必要があります。"

#. type: Plain text
#: original_texis/processes.texi:1366
msgid "Alternatively, you could use the @code{:stderr} parameter with a non-@code{nil} value in a call to @code{make-process} (@pxref{Asynchronous Processes, make-process}) to make the destination of the error output separate from the standard output; in that case, Emacs will use pipes for communicating with the subprocess."
msgstr "エラー出力先を標準出力から区別するためには、かわりに非@code{nil}の@code{:stderr}パラメーターで@code{make-process} (@ref{Asynchronous Processes, make-process}を参照)を呼び出すことができます。この場合には、サブプロセスとの対話にEmacsはpipeを使用することになります。"

#. type: Plain text
#: original_texis/processes.texi:1371
msgid "When a subprocess terminates, Emacs reads any pending output, then stops reading output from that subprocess.  Therefore, if the subprocess has children that are still live and still producing output, Emacs won't receive that output."
msgstr "サブプロセス終了時にEmacsは保留中の出力を読み取って、その後そのサブプロセスからの出力の読み取りを停止します。したがってそのサブプロセスに生きた子プロセスがあり、まだ出力を生成するような場合には、Emacsはその出力を受け取らないでしょう。"

#. type: Plain text
#: original_texis/processes.texi:1381
msgid "Output from a subprocess can arrive only while Emacs is waiting: when reading terminal input (see the function @code{waiting-for-user-input-p}), in @code{sit-for} and @code{sleep-for} (@pxref{Waiting}), and in @code{accept-process-output} (@pxref{Accepting Output}).  This minimizes the problem of timing errors that usually plague parallel programming.  For example, you can safely create a process and only then specify its buffer or filter function; no output can arrive before you finish, if the code in between does not call any primitive that waits."
msgstr "サブプロセスからの出力はEmacsが待機している間の端末入力読み取り時(関数@code{waiting-for-user-input-p}、@ref{Waiting}の@code{sit-for}と@code{sleep-for}、および@ref{Accepting Output}の@code{accept-process-output}を参照)のみ到着可能です。これは並列プログラミングで普遍的に悩みの種であるタイミングエラーの問題を最小化します。たとえば安全にプロセスを作成して、その後でのみプロセスのバッファーやフィルター関数を指定できます。その間にあるコードが待機するプリミティブを何も呼び出さなければ完了するまで到達可能な出力はありません。"

#. type: defvar
#: original_texis/processes.texi:1382
#, no-wrap
msgid "process-adaptive-read-buffering"
msgstr "process-adaptive-read-buffering"

#. type: defvar
#: original_texis/processes.texi:1390
msgid "On some systems, when Emacs reads the output from a subprocess, the output data is read in very small blocks, potentially resulting in very poor performance.  This behavior can be remedied to some extent by setting the variable @code{process-adaptive-read-buffering} to a non-@code{nil} value (the default), as it will automatically delay reading from such processes, thus allowing them to produce more output before Emacs tries to read it."
msgstr "いくつかのシステムではEmacsがサブプロセスの出力を読み取る際に出力データを非常に小さいブロックで読み取るために、結果として潜在的に非常に貧弱なパフォーマンスとなることがる。この挙動は変数@code{process-adaptive-read-buffering}を非@code{nil}値(デフォルト)にセットして拡張することにより改善し得る。これにより、そのようなプロセスからの読み取りを自動的に遅延して、Emacsが読み取りを試みる前に出力がより多く生成されるようになる。"

#. type: subsection
#: original_texis/processes.texi:1397 original_texis/processes.texi:1399
#: original_texis/processes.texi:1400
#, no-wrap
msgid "Process Buffers"
msgstr "Process Buffers"

#. type: menuentry
#: original_texis/processes.texi:1397
msgid "By default, output is put in a buffer."
msgstr "デフォルトでは出力はバッファーに送信される。"

#. type: node
#: original_texis/processes.texi:1397 original_texis/processes.texi:1537
#, no-wrap
msgid "Filter Functions"
msgstr "Filter Functions"

#. type: menuentry
#: original_texis/processes.texi:1397
msgid "Filter functions accept output from the process."
msgstr "フィルター関数はプロセスからの出力を受け取る。"

#. type: node
#: original_texis/processes.texi:1397 original_texis/processes.texi:1705
#, no-wrap
msgid "Decoding Output"
msgstr "Decoding Output"

#. type: menuentry
#: original_texis/processes.texi:1397
msgid "Filters can get unibyte or multibyte strings."
msgstr "フィルターはユニバイトやマルチバイトの文字列を取得できる。"

#. type: node
#: original_texis/processes.texi:1397 original_texis/processes.texi:1745
#, no-wrap
msgid "Accepting Output"
msgstr "Accepting Output"

#. type: menuentry
#: original_texis/processes.texi:1397
msgid "How to wait until process output arrives."
msgstr "プロセスの出力到着まで待機する方法。"

#. type: Plain text
#: original_texis/processes.texi:1409
msgid "A process can (and usually does) have an @dfn{associated buffer}, which is an ordinary Emacs buffer that is used for two purposes: storing the output from the process, and deciding when to kill the process.  You can also use the buffer to identify a process to operate on, since in normal practice only one process is associated with any given buffer.  Many applications of processes also use the buffer for editing input to be sent to the process, but this is not built into Emacs Lisp."
msgstr "プロセスは@dfn{関連付けられたバッファー(associated buffer)}をもつことができます(通常はもつ)。これは普通のEmacsバッファーであり、2つの目的のために使用されます。1つはプロセスからの出力の格納、もう1つはプロセスをkillする時期を判断するためです。通常の習慣では任意の与えられたバッファーにたいして関連付けられるプロセスは1つだけなので、処理対象のプロセスを識別するためにそのバッファーを使用することもできます。プロセス使用の多くはプロセスに送信する入力を編集するためにもこのバッファーを使用しますが、これはEmacs Lispの組み込みではありません。"

#. type: Plain text
#: original_texis/processes.texi:1416
msgid "By default, process output is inserted in the associated buffer.  (You can change this by defining a custom filter function, @pxref{Filter Functions}.)  The position to insert the output is determined by the @code{process-mark}, which is then updated to point to the end of the text just inserted.  Usually, but not always, the @code{process-mark} is at the end of the buffer."
msgstr "デフォルトでは、プロセスの出力は関連付けられたバッファーに挿入されます(カスタムフィルター関数の定義により変更可能。@ref{Filter Functions}を参照)。出力を挿入する位置は@code{process-mark}により決定されます。これは正に挿入されたテキストの終端にポイントを更新します。通常(常にではない)は@code{process-mark}はバッファーの終端になります。"

#. type: findex
#: original_texis/processes.texi:1417
#, no-wrap
msgid "process-kill-buffer-query-function"
msgstr "process-kill-buffer-query-function"

#. type: Plain text
#: original_texis/processes.texi:1424
msgid "Killing the associated buffer of a process also kills the process.  Emacs asks for confirmation first, if the process's @code{process-query-on-exit-flag} is non-@code{nil} (@pxref{Query Before Exit}).  This confirmation is done by the function @code{process-kill-buffer-query-function}, which is run from @code{kill-buffer-query-functions} (@pxref{Killing Buffers})."
msgstr "プロセスに関連付けられたバッファーをkillすることによりプロセスもkillされます。そのプロセスの@code{process-query-on-exit-flag}が非@code{nil}なら、Emacsはまず確認を求めます(@ref{Query Before Exit}を参照)。この確認は関数@code{process-kill-buffer-query-function}により行われて、これは@code{kill-buffer-query-functions}から実行されます(@ref{Killing Buffers}を参照)。"

#. type: defun
#: original_texis/processes.texi:1425
#, no-wrap
msgid "process-buffer process"
msgstr "process-buffer process"

#. type: defun
#: original_texis/processes.texi:1428
msgid "This function returns the associated buffer of the specified @var{process}."
msgstr "この関数は指定された@var{process}の関連付けられたバッファーをリターンする。"

#. type: group
#: original_texis/processes.texi:1433
#, no-wrap
msgid ""
"(process-buffer (get-process \"shell\"))\n"
"     @result{} #<buffer *shell*>\n"
msgstr ""
"(process-buffer (get-process \"shell\"))\n"
"     @result{} #<buffer *shell*>\n"

#. type: defun
#: original_texis/processes.texi:1437
#, no-wrap
msgid "process-mark process"
msgstr "process-mark process"

#. type: defun
#: original_texis/processes.texi:1440
msgid "This function returns the process marker for @var{process}, which is the marker that says where to insert output from the process."
msgstr "この関数は@var{process}にたいするプロセスマーカーをリターンする。これはプロセスからの出力をどこに挿入するかを示すマーカー。"

#. type: defun
#: original_texis/processes.texi:1443
msgid "If @var{process} does not have a buffer, @code{process-mark} returns a marker that points nowhere."
msgstr "@var{process}がバッファーをもたなければ、@code{process-mark}は存在しない場所を指すマーカーをリターンする。"

#. type: defun
#: original_texis/processes.texi:1447
msgid "The default filter function uses this marker to decide where to insert process output, and updates it to point after the inserted text.  That is why successive batches of output are inserted consecutively."
msgstr "デフォルトのフィルター関数はプロセス出力の挿入場所の決定にこのマーカーを使用して、挿入したテキストの後にポイントを更新する。連続するバッチ出力が連続して挿入されるのはこれが理由。"

#. type: defun
#: original_texis/processes.texi:1451
msgid "Custom filter functions normally should use this marker in the same fashion.  For an example of a filter function that uses @code{process-mark}, @pxref{Process Filter Example}."
msgstr "カスタムフィルター関数はこのマーカーを通常は同じ方式で使用すること。@code{process-mark}を使用するフィルター関数の例は@ref{Process Filter Example}を参照のこと。"

#. type: defun
#: original_texis/processes.texi:1455
msgid "When the user is expected to enter input in the process buffer for transmission to the process, the process marker separates the new input from previous output."
msgstr "ユーザーにプロセスバッファー内でプロセスに送信するための入力を期待する際には、プロセスマーカーは以前の出力から新たな入力を区別する。"

#. type: defun
#: original_texis/processes.texi:1457
#, no-wrap
msgid "set-process-buffer process buffer"
msgstr "set-process-buffer process buffer"

#. type: defun
#: original_texis/processes.texi:1461
msgid "This function sets the buffer associated with @var{process} to @var{buffer}.  If @var{buffer} is @code{nil}, the process becomes associated with no buffer."
msgstr "この関数は@var{process}に関連付けられたバッファーに@var{buffer}をセットする。@var{buffer}が@code{nil}ならプロセスはバッファーに関連付けられない。"

#. type: defun
#: original_texis/processes.texi:1463
#, no-wrap
msgid "get-buffer-process buffer-or-name"
msgstr "get-buffer-process buffer-or-name"

#. type: defun
#: original_texis/processes.texi:1470
msgid "This function returns a nondeleted process associated with the buffer specified by @var{buffer-or-name}.  If there are several processes associated with it, this function chooses one (currently, the one most recently created, but don't count on that).  Deletion of a process (see @code{delete-process}) makes it ineligible for this function to return."
msgstr "この関数は@var{buffer-or-name}で指定されるバッファーに関連付けられた、削除されていないプロセスをリターンする。そのバッファーに複数のプロセスが関連付けられている場合には、この関数はいずれか1つ(現在のところもっとも最近作成されたプロセスだがこれを期待しないこと)を選択する。プロセスの削除(@code{delete-process}を参照)により、そのプロセスはこの関数がリターンするプロセスとしては不適格となる。"

#. type: defun
#: original_texis/processes.texi:1473
msgid "It is usually a bad idea to have more than one process associated with the same buffer."
msgstr "同一のバッファーに複数のプロセスを関連付けるのは、通常は悪いアイデアである。"

#. type: group
#: original_texis/processes.texi:1478
#, no-wrap
msgid ""
"(get-buffer-process \"*shell*\")\n"
"     @result{} #<process shell>\n"
msgstr ""
"(get-buffer-process \"*shell*\")\n"
"     @result{} #<process shell>\n"

#. type: defun
#: original_texis/processes.texi:1483
msgid "Killing the process's buffer deletes the process, which kills the subprocess with a @code{SIGHUP} signal (@pxref{Signals to Processes})."
msgstr "プロセスのバッファーをkillすることにより、@code{SIGHUP}シグナルでサブプロセスをkillしてプロセスを削除する(@ref{Signals to Processes}を参照)。"

#. type: Plain text
#: original_texis/processes.texi:1492
msgid "If the process's buffer is displayed in a window, your Lisp program may wish to tell the process the dimensions of that window, so that the process could adapt its output to those dimensions, much as it adapts to the screen dimensions.  The following functions allow communicating this kind of information to processes; however, not all systems support the underlying functionality, so it is best to provide fallbacks, e.g., via command-line arguments or environment variables."
msgstr "プロセスのバッファーがウィンドウに表示されている場合には、プロセスが出力をスクリーンのサイズに適応させるのと同様に、Lispプログラムでウィンドウのサイズにプロセス出力を適応させるようにプロセスに指示したいと思うでしょう。以下の関数によりプロセスにたいしてこの種の情報をやり取りできます。しかしすべてのシステムが基礎となる機能をサポートする訳ではないので、コマンドライン引数や環境変数を通じたフォールバックを提供するのが最良です。"

#. type: defun
#: original_texis/processes.texi:1493
#, no-wrap
msgid "set-process-window-size process height width"
msgstr "set-process-window-size process height width"

#. type: defun
#: original_texis/processes.texi:1498
msgid "Tell @var{process} that its logical window size has dimensions @var{width} by @var{height}, in character units.  If this function succeeds in communicating this information to the process, it returns @code{t}; otherwise it returns @code{nil}."
msgstr "@var{process}にたいして、その論理ウィンドウサイズが文字単位で@var{width}と@var{height}のサイズであることを告げる。関数がこの情報をプロセスとやり取りすることに成功したら@code{t}、それ以外は@code{nil}をリターンする。"

#. type: Plain text
#: original_texis/processes.texi:1511
msgid "When windows that display buffers associated with process change their dimensions, the affected processes should be told about these changes.  By default, when the window configuration changes, Emacs will automatically call @code{set-process-window-size} on behalf of every process whose buffer is displayed in a window, passing it the smallest dimensions of all the windows displaying the process's buffer.  This works via @code{window-configuration-change-hook} (@pxref{Window Hooks}), which is told to invoke the function that is the value of the variable @code{window-adjust-process-window-size-function} for each process whose buffer is displayed in at least one window.  You can customize this behavior by setting the value of that variable."
msgstr "プロセスに関連付けられたバッファーを表示するウィンドウがサイズを変更された際には、影響を受けるプロセスはその変更にたいして通知される必要があります。デフォルトではウィンドウ構成(window configuration)が変更されると、ウィンドウにバッファーが表示されている各プロセスにかわり、プロセスのバッファーを表示するすべてのウィンドウのうち最小のサイズのウィンドウを引数として、Emacsが自動的に@code{set-process-window-size}を呼び出します。これはバッファーが少なくとも1つのウィンドウに表示されているプセスそれぞれにたいして、変数@code{window-adjust-process-window-size-function}の値である関数を呼び出すように指定する@code{window-configuration-change-hook} (@ref{Window Hooks}を参照)を通じて機能します。この変数をセットすることにより、この振る舞いをカスマイズできます。"

#. type: defopt
#: original_texis/processes.texi:1512
#, no-wrap
msgid "window-adjust-process-window-size-function"
msgstr "window-adjust-process-window-size-function"

#. type: defopt
#: original_texis/processes.texi:1521
msgid "The value of this variable should be a function of two arguments: a process and the list of windows displaying the process's buffer.  When the function is called, the process's buffer is the current buffer.  The function should return a cons cell @w{@code{(@var{width} . @var{height})}} that describes the dimensions of the logical process window to be passed via a call to @code{set-process-window-size}.  The function can also return @code{nil}, in which case Emacs will not call @code{set-process-window-size} for this process."
msgstr "この変数の値はプロセスとプロセスのバッファーを表示するウィンドウのリストという2つの引数を受け取る関数であること。その関数が呼び出される際には、そのプロセスのバッファーがカレントバッファーとなる。関数は@code{set-process-window-size}の呼び出しを通じて渡される論理プロセスウィンドウ(logical process window)を記述するコンスセル@w{@code{(@var{width} . @var{height})}}をリターンすること。関数は@code{nil}をリターンすることもでき、Emacsはこの場合にはそのプロセスにたいして@code{set-process-window-size}を呼び出さない。"

#. type: defopt
#: original_texis/processes.texi:1528
msgid "Emacs supplies two predefined values for this variable: @code{window-adjust-process-window-size-smallest}, which returns the smallest of all the dimensions of the windows that display a process's buffer; and @code{window-adjust-process-window-size-largest}, which returns the largest dimensions.  For more complex strategies, write your own function."
msgstr "この変数にたいしてEmacsは2つの事前定義された値を提供する。1つは@code{window-adjust-process-window-size-smallest}であり、これはプロセスのバッファーを表示するウィンドウのすべてのサイズから最小のサイズもう1つの@code{window-adjust-process-window-size-largest}は最大のサイズをリターンする。より複雑な方式には独自の関数を記述すること。"

#. type: defopt
#: original_texis/processes.texi:1530
msgid "This variable can be buffer-local."
msgstr "この変数はバッファーローカルにできる。"

#. type: Plain text
#: original_texis/processes.texi:1536
msgid "If the process has the @code{adjust-window-size-function} property (@pxref{Process Information}), its value overrides the global and buffer-local values of @code{window-adjust-process-window-size-function}."
msgstr "プロセスが@code{adjust-window-size-function}プロパティ(@ref{Process Information}を参照)をもつ場合には、その値は@code{window-adjust-process-window-size-function}のグローバル値とバッファーロール値をオーバーライドします。"

#. type: subsection
#: original_texis/processes.texi:1538
#, no-wrap
msgid "Process Filter Functions"
msgstr "Process Filter Functions"

#. type: cindex
#: original_texis/processes.texi:1539
#, no-wrap
msgid "filter function"
msgstr "filter function"

#. type: cindex
#: original_texis/processes.texi:1540
#, no-wrap
msgid "process filter"
msgstr "process filter"

#. type: cindex
#: original_texis/processes.texi:1542
#, no-wrap
msgid "default filter function of a process"
msgstr "default filter function of a process"

#. type: Plain text
#: original_texis/processes.texi:1547
msgid "A process @dfn{filter function} is a function that receives the standard output from the associated process.  @emph{All} output from that process is passed to the filter.  The default filter simply outputs directly to the process buffer."
msgstr "プロセスの@dfn{フィルター関数(filter function)}は、関連付けられたプロセスからの標準出力を受信します。そのプロセスの@emph{すべて}の出力はそのフィルターに渡されます。デフォルトのフィルターは単にプロセスバッファーに直接出力します。"

#. type: Plain text
#: original_texis/processes.texi:1552
msgid "By default, the error output from the process, if any, is also passed to the filter function, unless the destination for the standard error stream of the process was separated from the standard output when the process was created (@pxref{Output from Processes})."
msgstr "デフォルトではプロセス作成時にエラーストリームの出力先が標準出力と分離されていなければ(@ref{Output from Processes}を参照)、プロセスからのエラー出力があればそれはフィルター関数にも渡されます。"

#. type: Plain text
#: original_texis/processes.texi:1559
msgid "The filter function can only be called when Emacs is waiting for something, because process output arrives only at such times.  Emacs waits when reading terminal input (see the function @code{waiting-for-user-input-p}), in @code{sit-for} and @code{sleep-for} (@pxref{Waiting}), and in @code{accept-process-output} (@pxref{Accepting Output})."
msgstr "サブプロセスからの出力はEmacsが何かを待機している間だけ到着するので、フィルター関数はそのようなときだけ呼び出し可能です。Emacsは端末入力読み取り時(関数@code{waiting-for-user-input-p}、@ref{Waiting}の@code{sit-for}と@code{sleep-for}、および@ref{Accepting Output}の@code{accept-process-output}を参照)に待機します。"

#. type: Plain text
#: original_texis/processes.texi:1563
msgid "A filter function must accept two arguments: the associated process and a string, which is output just received from it.  The function is then free to do whatever it chooses with the output."
msgstr "フィルター関数は関連付けられたプロセス、およびそのプロセスから正に受信した出力である文字列という2つの引数を受け取らなければなりません。関数はその後に出力にたいして何であれ自由に行うことができます。"

#. type: Plain text
#: original_texis/processes.texi:1571
msgid "Quitting is normally inhibited within a filter function---otherwise, the effect of typing @kbd{C-g} at command level or to quit a user command would be unpredictable.  If you want to permit quitting inside a filter function, bind @code{inhibit-quit} to @code{nil}.  In most cases, the right way to do this is with the macro @code{with-local-quit}.  @xref{Quitting}."
msgstr "quitは通常はフィルター関数内では抑制されます。さもないとコマンドレベルでの@kbd{C-g}のタイプ、またはユーザーコマンドのquitは予測できません。フィルター関数内部でのquitを許可したければ@code{inhibit-quit}を@code{nil}にバインドしてください。ほとんどの場合において、これを行う正しい方法はマクロ@code{with-local-quit}です。@ref{Quitting}を参照してください。"

#. type: Plain text
#: original_texis/processes.texi:1578
msgid "If an error happens during execution of a filter function, it is caught automatically, so that it doesn't stop the execution of whatever program was running when the filter function was started.  However, if @code{debug-on-error} is non-@code{nil}, errors are not caught.  This makes it possible to use the Lisp debugger to debug filter functions.  @xref{Debugger}."
msgstr "フィルター関数の実行中にエラーが発生すると、フィルター開始時に実行中だったプログラムが何であれ実行を停止しないように自動的にcatchされます。しかし@code{debug-on-error}が非@code{nil}ならエラーはcatchされません。これによりLispデバッガーを使用したフィルター関数のデバッグが可能になります。@ref{Debugger}を参照してください。"

#. type: Plain text
#: original_texis/processes.texi:1587
msgid "Many filter functions sometimes (or always) insert the output in the process's buffer, mimicking the actions of the default filter.  Such filter functions need to make sure that they save the current buffer, select the correct buffer (if different) before inserting output, and then restore the original buffer.  They should also check whether the buffer is still alive, update the process marker, and in some cases update the value of point.  Here is how to do these things:"
msgstr "多くのフィルター関数は時折(または常に)、デフォルトフィルターの動作を真似てプロセスのバッファーにその出力を挿入します。そのようなフィルター関数は確実にカレントバッファーの保存と、(もし異なるなら)出力を挿入する前に正しいバッファーを選択して、その後に元のバッファーをリストアする必要があります。またそのバッファーがまだ生きているか、プロセスマーカーを更新しているか、そしていくつかのケースにおいてはポイントの値を更新しているかもチェックするべきです。以下はこれらを行う方法です:"

#. type: anchor{#1}
#: original_texis/processes.texi:1589
msgid "Process Filter Example"
msgstr "Process Filter Example"

#. type: group
#: original_texis/processes.texi:1595
#, no-wrap
msgid ""
"(defun ordinary-insertion-filter (proc string)\n"
"  (when (buffer-live-p (process-buffer proc))\n"
"    (with-current-buffer (process-buffer proc)\n"
"      (let ((moving (= (point) (process-mark proc))))\n"
msgstr ""
"(defun ordinary-insertion-filter (proc string)\n"
"  (when (buffer-live-p (process-buffer proc))\n"
"    (with-current-buffer (process-buffer proc)\n"
"      (let ((moving (= (point) (process-mark proc))))\n"

#. type: group
#: original_texis/processes.texi:1603
#, no-wrap
msgid ""
"        (save-excursion\n"
"          ;; @r{Insert the text, advancing the process marker.}\n"
"          (goto-char (process-mark proc))\n"
"          (insert string)\n"
"          (set-marker (process-mark proc) (point)))\n"
"        (if moving (goto-char (process-mark proc)))))))\n"
msgstr ""
"        (save-excursion\n"
"          ;; @r{テキストを挿入してプロセスマーカーを進める}\n"
"          (goto-char (process-mark proc))\n"
"          (insert string)\n"
"          (set-marker (process-mark proc) (point)))\n"
"        (if moving (goto-char (process-mark proc)))))))\n"

#. type: Plain text
#: original_texis/processes.texi:1609
msgid "To make the filter force the process buffer to be visible whenever new text arrives, you could insert a line like the following just before the @code{with-current-buffer} construct:"
msgstr "新たなテキスト到着時にフィルターが強制的にプロセスバッファーを可視にするために@code{with-current-buffer}構成の直前に以下のような行を挿入できます:"

#. type: smallexample
#: original_texis/processes.texi:1612
#, no-wrap
msgid "(display-buffer (process-buffer proc))\n"
msgstr "(display-buffer (process-buffer proc))\n"

#. type: Plain text
#: original_texis/processes.texi:1617
msgid "To force point to the end of the new output, no matter where it was previously, eliminate the variable @code{moving} from the example and call @code{goto-char} unconditionally."
msgstr "以前の位置に関わらず新たな出力の終端にポイントを強制するには、例から変数@code{moving}を削除して無条件で@code{goto-char}を呼び出してください。"

#. type: Plain text
#: original_texis/processes.texi:1626
msgid "Note that Emacs automatically saves and restores the match data while executing filter functions.  @xref{Match Data}."
msgstr "フィルター関数の実行中には、Emacsが自動的にマッチデータの保存とリストアを行うことに注意してください。@ref{Match Data}を参照してください。"

#. type: Plain text
#: original_texis/processes.texi:1634
msgid "The output to the filter may come in chunks of any size.  A program that produces the same output twice in a row may send it as one batch of 200 characters one time, and five batches of 40 characters the next.  If the filter looks for certain text strings in the subprocess output, make sure to handle the case where one of these strings is split across two or more batches of output; one way to do this is to insert the received text into a temporary buffer, which can then be searched."
msgstr "フィルターへの出力は任意のサイズのchunkで到着する可能性があります。同じ出力を連続して2回生成するプログラムは一度に200文字を1回のバッチで送信して、次に40文字を5回のバッチで送信するかもしれません。フィルターが特定のテキスト文字列をサブプロセスの出力から探す場合には、それらの文字列が2回以上のバッチ出力を横断するケースに留意して処理してください。これを行うには受信したテキストを一時的なバッファーに挿入してから検索するのが1つの方法です。"

#. type: defun
#: original_texis/processes.texi:1635
#, no-wrap
msgid "set-process-filter process filter"
msgstr "set-process-filter process filter"

#. type: defun
#: original_texis/processes.texi:1639
msgid "This function gives @var{process} the filter function @var{filter}.  If @var{filter} is @code{nil}, it gives the process the default filter, which inserts the process output into the process buffer."
msgstr "この関数は@var{process}にフィルター関数@var{filter}を与える。@var{filter}が@code{nil}なら、そのプロセスにたいしてプロセスバッファーにプロセス出力を挿入するデフォルトフィルターを与える。"

#. type: defun
#: original_texis/processes.texi:1641
#, no-wrap
msgid "process-filter process"
msgstr "process-filter process"

#. type: defun
#: original_texis/processes.texi:1643
msgid "This function returns the filter function of @var{process}."
msgstr "この関数は@var{process}のフィルター関数をリターンする。"

#. type: Plain text
#: original_texis/processes.texi:1648
msgid "In case the process's output needs to be passed to several filters, you can use @code{add-function} to combine an existing filter with a new one.  @xref{Advising Functions}."
msgstr "そのプロセスの出力を複数のフィルターに渡す必要がある場合には、既存のフィルターに新たなフィルターを組み合わせるために@code{add-function}を使用できる。@ref{Advising Functions}を参照のこと。"

#. type: Plain text
#: original_texis/processes.texi:1650
msgid "Here is an example of the use of a filter function:"
msgstr "以下はフィルター関数の使用例:"

#. type: group
#: original_texis/processes.texi:1656
#, no-wrap
msgid ""
"(defun keep-output (process output)\n"
"   (setq kept (cons output kept)))\n"
"     @result{} keep-output\n"
msgstr ""
"(defun keep-output (process output)\n"
"   (setq kept (cons output kept)))\n"
"     @result{} keep-output\n"

#. type: group
#: original_texis/processes.texi:1660
#, no-wrap
msgid ""
"(setq kept nil)\n"
"     @result{} nil\n"
msgstr ""
"(setq kept nil)\n"
"     @result{} nil\n"

#. type: group
#: original_texis/processes.texi:1664
#, no-wrap
msgid ""
"(set-process-filter (get-process \"shell\") 'keep-output)\n"
"     @result{} keep-output\n"
msgstr ""
"(set-process-filter (get-process \"shell\") 'keep-output)\n"
"     @result{} keep-output\n"

#. type: group
#: original_texis/processes.texi:1670
#, no-wrap
msgid ""
"(process-send-string \"shell\" \"ls ~/other\\n\")\n"
"     @result{} nil\n"
"kept\n"
"     @result{} (\"lewis@@slug:$ \"\n"
msgstr ""
"(process-send-string \"shell\" \"ls ~/other\\n\")\n"
"     @result{} nil\n"
"kept\n"
"     @result{} (\"lewis@@slug:$ \"\n"

#. type: group
#: original_texis/processes.texi:1680
#, no-wrap
msgid ""
"\"FINAL-W87-SHORT.MSS    backup.otl              kolstad.mss~\n"
"address.txt             backup.psf              kolstad.psf\n"
"backup.bib~             david.mss               resume-Dec-86.mss~\n"
"backup.err              david.psf               resume-Dec.psf\n"
"backup.mss              dland                   syllabus.mss\n"
"\"\n"
"\"#backups.mss#          backup.mss~             kolstad.mss\n"
"\")\n"
msgstr ""
"\"FINAL-W87-SHORT.MSS    backup.otl              kolstad.mss~\n"
"address.txt             backup.psf              kolstad.psf\n"
"backup.bib~             david.mss               resume-Dec-86.mss~\n"
"backup.err              david.psf               resume-Dec.psf\n"
"backup.mss              dland                   syllabus.mss\n"
"\"\n"
"\"#backups.mss#          backup.mss~             kolstad.mss\n"
"\")\n"

# @ignore section
#. type: group
#: original_texis/processes.texi:1695
#, no-wrap
msgid ""
";; @r{Insert input in the buffer specified by @code{my-shell-buffer}}\n"
";;   @r{and make sure that buffer is shown in some window.}\n"
"(defun my-process-filter (proc str)\n"
"  (let ((cur (selected-window))\n"
"        (pop-up-windows t))\n"
"    (pop-to-buffer my-shell-buffer)\n"
msgstr ""
";; @r{Insert input in the buffer specified by @code{my-shell-buffer}}\n"
";;   @r{and make sure that buffer is shown in some window.}\n"
"(defun my-process-filter (proc str)\n"
"  (let ((cur (selected-window))\n"
"        (pop-up-windows t))\n"
"    (pop-to-buffer my-shell-buffer)\n"

# @ignore section
#. type: group
#: original_texis/processes.texi:1701
#, no-wrap
msgid ""
"    (goto-char (point-max))\n"
"    (insert str)\n"
"    (set-marker (process-mark proc) (point-max))\n"
"    (select-window cur)))\n"
msgstr ""
"    (goto-char (point-max))\n"
"    (insert str)\n"
"    (set-marker (process-mark proc) (point-max))\n"
"    (select-window cur)))\n"

#. type: subsection
#: original_texis/processes.texi:1706
#, no-wrap
msgid "Decoding Process Output"
msgstr "Decoding Process Output"

#. type: cindex
#: original_texis/processes.texi:1707
#, no-wrap
msgid "decode process output"
msgstr "decode process output"

#. type: Plain text
#: original_texis/processes.texi:1714
msgid "When Emacs writes process output directly into a multibyte buffer, it decodes the output according to the process output coding system.  If the coding system is @code{raw-text} or @code{no-conversion}, Emacs converts the unibyte output to multibyte using @code{string-to-multibyte}, and inserts the resulting multibyte text."
msgstr "Emacsが直接マルチバイトバッファーにプロセス出力を書き込む際には、プロセス出力のコーディングシステムに応じて出力をデコードします。コーディングシステムが@code{raw-text}か@code{no-conversion}ならEmacsは@code{string-to-multibyte}を使用してユニバイト出力をマルチバイトに変換して、その結果のマルチバイトテキストを挿入します。"

#. type: Plain text
#: original_texis/processes.texi:1723
msgid "You can use @code{set-process-coding-system} to specify which coding system to use (@pxref{Process Information}).  Otherwise, the coding system comes from @code{coding-system-for-read}, if that is non-@code{nil}; or else from the defaulting mechanism (@pxref{Default Coding Systems}).  If the text output by a process contains null bytes, Emacs by default uses @code{no-conversion} for it; see @ref{Lisp and Coding Systems, inhibit-null-byte-detection}, for how to control this behavior."
msgstr "どのコーディングシステムを使用するかは@code{set-process-coding-system}を使用して指定できます(@ref{Process Information}を参照)。それ以外では@code{coding-system-for-read}が非@code{nil}ならそのコーディングシステム、@code{nil}ならデフォルトのメカニズムが使用されます(@ref{Default Coding Systems}を参照)。プロセスのテキスト出力にnullバイトが含まれる場合には、Emacsはそれにたいしてデフォルトでは@code{no-conversion}を使用します。この挙動を制御する方法については@ref{Lisp and Coding Systems, inhibit-null-byte-detection}を参照してください。"

#. type: Plain text
#: original_texis/processes.texi:1733
msgid "@strong{Warning:} Coding systems such as @code{undecided}, which determine the coding system from the data, do not work entirely reliably with asynchronous subprocess output.  This is because Emacs has to process asynchronous subprocess output in batches, as it arrives.  Emacs must try to detect the proper coding system from one batch at a time, and this does not always work.  Therefore, if at all possible, specify a coding system that determines both the character code conversion and the end of line conversion---that is, one like @code{latin-1-unix}, rather than @code{undecided} or @code{latin-1}."
msgstr "@strong{警告:} データからコーディングシステムを判断する@code{undecided}のようなコーディングシステムは、非同期サブプロセスの出力にたいして完全な信頼性をもって機能しません。これはEmacsが到着に応じて非同期サブプロセスの出力をバッチで処理する必要があるからです。Emacsは1つのバッチが到着するたびに正しいコーディングシステムを検出しなければならずこれは常に機能するわけではありません。したがって可能であれば文字コード変換とEOL変換の両方を決定するコーディングシステムつまり@code{latin-1-unix}、@code{undecided}、@code{latin-1}のようなコーディングシステムを指定してください。"

#. type: cindex
#: original_texis/processes.texi:1736
#, no-wrap
msgid "filter multibyte flag, of process"
msgstr "filter multibyte flag, of process"

#. type: cindex
#: original_texis/processes.texi:1737
#, no-wrap
msgid "process filter multibyte flag"
msgstr "process filter multibyte flag"

#. type: Plain text
#: original_texis/processes.texi:1744
msgid "When Emacs calls a process filter function, it provides the process output as a multibyte string or as a unibyte string according to the process's filter coding system.  Emacs decodes the output according to the process output coding system, which usually produces a multibyte string, except for coding systems such as @code{binary} and @code{raw-text}."
msgstr "Emacsがプロセスフィルター関数を呼び出す際には、そのプロセスのフィルターのコーディングシステムに応じてEmacsはプロセス出力をマルチバイト文字列、またはユニバイト文字列で提供します。Emacsはプロセス出力のコーディングシステムに応じて出力をデコードします。これは@code{binary}や@code{raw-text}のようなコーディングシステムを除いて、通常はマルチバイト文字列を生成します。"

#. type: subsection
#: original_texis/processes.texi:1746
#, no-wrap
msgid "Accepting Output from Processes"
msgstr "Accepting Output from Processes"

#. type: cindex
#: original_texis/processes.texi:1747
#, no-wrap
msgid "accept input from processes"
msgstr "accept input from processes"

#. type: Plain text
#: original_texis/processes.texi:1754
msgid "Output from asynchronous subprocesses normally arrives only while Emacs is waiting for some sort of external event, such as elapsed time or terminal input.  Occasionally it is useful in a Lisp program to explicitly permit output to arrive at a specific point, or even to wait until output arrives from a process."
msgstr "非同期サブプロセスからの出力は、通常はEmacsが時間の経過や端末入力のような、ある種の外部イベントを待機する間だけ到着します。特定のポイントで出力の到着を明示的に許可したり、あるいはプロセスからの出力が到着するまで待機することでさえ、Lispプログラムでは有用な場合が時折あります。"

#. type: defun
#: original_texis/processes.texi:1755
#, no-wrap
msgid "accept-process-output &optional process seconds millisec just-this-one"
msgstr "accept-process-output &optional process seconds millisec just-this-one"

#. type: defun
#: original_texis/processes.texi:1760
msgid "This function allows Emacs to read pending output from processes.  The output is given to their filter functions.  If @var{process} is non-@code{nil} then this function does not return until some output has been received from @var{process}."
msgstr "この関数はプロセスからの保留中の出力をEmacsが読み取ることを許す。この出力はプロセスのフィルター関数により与えられる。@var{process}が非@code{nil}なら、この関数は@var{process}から何らかの出力を受け取るまでリターンしない。"

#. type: defun
#: original_texis/processes.texi:1767
msgid "The arguments @var{seconds} and @var{millisec} let you specify timeout periods.  The former specifies a period measured in seconds and the latter specifies one measured in milliseconds.  The two time periods thus specified are added together, and @code{accept-process-output} returns after that much time, even if there is no subprocess output."
msgstr "引数@var{seconds}と@var{millisec}によりタイムアウトの長さを指定できる。前者は秒単位、後者はミリ秒単位でタイムアウトを指定する。この2つの秒数は、互いに足し合わせることによりタイムアウトを指定して、その秒数経過後はサブプロセスの出力が存在しなくてもリターンする。"

#. type: defun
#: original_texis/processes.texi:1772
msgid "The argument @var{millisec} is obsolete (and should not be used), because @var{seconds} can be floating point to specify waiting a fractional number of seconds.  If @var{seconds} is 0, the function accepts whatever output is pending but does not wait."
msgstr "@var{seconds}に浮動小数点数を指定することにより秒を少数点で指定できるので引数@var{millisec}は時代遅れ(であり使用するべきではない)。@var{seconds}が0ならこの関数は保留中の出力が何であれ受け取り待機しない。"

#. type: defun
#: original_texis/processes.texi:1781
msgid "If @var{process} is a process, and the argument @var{just-this-one} is non-@code{nil}, only output from that process is handled, suspending output from other processes until some output has been received from that process or the timeout expires.  If @var{just-this-one} is an integer, also inhibit running timers.  This feature is generally not recommended, but may be necessary for specific applications, such as speech synthesis."
msgstr "@var{process}がプロセスで引数@var{just-this-one}が非@code{nil}ならプロセスからの出力だけが処理され、そのプロセスからの出力を受信するかタイムアウトとなるまで他のプロセスの出力は停止される。@var{just-this-one}が整数ならタイマーの実行も抑制される。この機能は一般的には推奨されないが、音声合成のような特定のアプリケーションにとっては必要かもしれない。"

#. type: defun
#: original_texis/processes.texi:1786
msgid "The function @code{accept-process-output} returns non-@code{nil} if it got output from @var{process}, or from any process if @var{process} is @code{nil}.  It returns @code{nil} if the timeout expired before output arrived."
msgstr "関数@code{accept-process-output}は@var{process}、@var{process}が@code{nil}なら任意のプロセスから出力を取得したら非@code{nil}をリターンする。出力の到着前にタイムアウトが到来したら@code{nil}をリターンする。"

#. type: section
#: original_texis/processes.texi:1789
#, no-wrap
msgid "Sentinels: Detecting Process Status Changes"
msgstr "Sentinels: Detecting Process Status Changes"

#. type: cindex
#: original_texis/processes.texi:1790
#, no-wrap
msgid "process sentinel"
msgstr "process sentinel"

#. type: cindex
#: original_texis/processes.texi:1791
#, no-wrap
msgid "sentinel (of process)"
msgstr "sentinel (of process)"

#. type: Plain text
#: original_texis/processes.texi:1800
msgid "A @dfn{process sentinel} is a function that is called whenever the associated process changes status for any reason, including signals (whether sent by Emacs or caused by the process's own actions) that terminate, stop, or continue the process.  The process sentinel is also called if the process exits.  The sentinel receives two arguments: the process for which the event occurred, and a string describing the type of event."
msgstr "@dfn{プロセスセンチネル(process sentinel: プロセス番兵)}とは、(Emacsにより送信されたか、そのプロセス自身の動作が原因で送信された)プロセスを終了、停止、継続するシグナルを含む、何らかの理由により関連付けられたプロセスの状態が変化した際には常に呼び出される関数のことです。プロセスがexitする際にもプロセスセンチネルが呼び出されます。センチネルはイベントが発生したプロセスとイベントのタイプを記述する文字列という2つの引数を受け取ります。"

#. type: cindex
#: original_texis/processes.texi:1801
#, no-wrap
msgid "default sentinel function of a process"
msgstr "default sentinel function of a process"

#. type: Plain text
#: original_texis/processes.texi:1805
msgid "If no sentinel function was specified for a process, it will use the default sentinel function, which inserts a message in the process's buffer with the process name and the string describing the event."
msgstr "プロセスにたいして何もセンチネル関数が指定されていなければ、プロセスのバッファーにプロセス名とイベントを記述する文字列とともにメッセージを挿入するデフォルトのセンチネル関数を使用します。"

#. type: Plain text
#: original_texis/processes.texi:1807
msgid "The string describing the event looks like one of the following:"
msgstr "イベントを記述する文字列は以下のいずれかのような外見をもちます:"

#. type: itemize
#: original_texis/processes.texi:1811
msgid "@code{\"finished\\n\"}."
msgstr "@code{\"finished\\n\"}."

#. type: itemize
#: original_texis/processes.texi:1814
msgid "@code{\"deleted\\n\"}."
msgstr "@code{\"deleted\\n\"}."

#. type: itemize
#: original_texis/processes.texi:1819
msgid "@code{\"exited abnormally with code @var{exitcode} (core dumped)\\n\"}.  The ``core dumped'' part is optional, and only appears if the process dumped core."
msgstr "@code{\"exited abnormally with code @var{exitcode} (core dumped)\\n\"}.@*``core dumped''の部分はオプションであり、プロセスがコアをダンプした場合のみ出現する。"

#. type: itemize
#: original_texis/processes.texi:1822
msgid "@code{\"failed with code @var{fail-code}\\n\"}."
msgstr "@code{\"failed with code @var{fail-code}\\n\"}."

#. type: itemize
#: original_texis/processes.texi:1829
msgid "@code{\"@var{signal-description} (core dumped)\\n\"}.  The @var{signal-description} is a system-dependent textual description of a signal, e.g., @code{\"killed\"} for @code{SIGKILL}.  The ``core dumped'' part is optional, and only appears if the process dumped core."
msgstr "@code{\"@var{signal-description} (core dumped)\\n\"}.@*@var{signal-description}は@code{SIGKILL}にたいする@code{\"killed\"}のようなシステム依存の説明テキスト。``core dumped''の部分はオプションであり、プロセスがコアをダンプした場合のみ出現する。"

#. type: itemize
#: original_texis/processes.texi:1832
msgid "@code{\"open from @var{host-name}\\n\"}."
msgstr "@code{\"open from @var{host-name}\\n\"}."

#. type: itemize
#: original_texis/processes.texi:1835
msgid "@code{\"open\\n\"}."
msgstr "@code{\"open\\n\"}."

#. type: itemize
#: original_texis/processes.texi:1838
msgid "@code{\"connection broken by remote peer\\n\"}."
msgstr "@code{\"connection broken by remote peer\\n\"}."

#. type: Plain text
#: original_texis/processes.texi:1849
msgid "A sentinel runs only while Emacs is waiting (e.g., for terminal input, or for time to elapse, or for process output).  This avoids the timing errors that could result from running sentinels at random places in the middle of other Lisp programs.  A program can wait, so that sentinels will run, by calling @code{sit-for} or @code{sleep-for} (@pxref{Waiting}), or @code{accept-process-output} (@pxref{Accepting Output}).  Emacs also allows sentinels to run when the command loop is reading input.  @code{delete-process} calls the sentinel when it terminates a running process."
msgstr "センチネルはEmacsが(端末入力や時間経過、またはプロセス出力を)待機している間だけ実行されます。これは他のLispプログラムの途中のランダムな箇所で実行されるセンチネルが原因となるタイミングエラーを無視します。プログラムはセンチネルが実行されるように、@code{sit-for}や@code{sleep-for}(@ref{Waiting}を参照)、または@code{accept-process-output}(@ref{Accepting Output}を参照)を呼び出すことにより待機することができます。Emacsはコマンドループが入力を読み取る際にもセンチネルの実行を許可します。@code{delete-process}は実行中のプログラムを終了させる際にセンチネルを呼び出します。"

#. type: Plain text
#: original_texis/processes.texi:1856
msgid "Emacs does not keep a queue of multiple reasons to call the sentinel of one process; it records just the current status and the fact that there has been a change.  Therefore two changes in status, coming in quick succession, can call the sentinel just once.  However, process termination will always run the sentinel exactly once.  This is because the process status can't change again after termination."
msgstr "Emacsは1つのプロセスのセンチネル呼び出しの理由のために複数のキューを保持しません。これはカレント状態と変化があった事実だけを記録します。したがって非常に短い間隔で連続して状態に2つの変化があった場合には、一度だけセンチネルが呼び出されます。しかしプロセスの終了は常に正確に1回センチネルを実行するでしょう。これは終了後にプロセス状態が再び変更されることはないからです。"

#. type: Plain text
#: original_texis/processes.texi:1860
msgid "Emacs explicitly checks for output from the process before running the process sentinel.  Once the sentinel runs due to process termination, no further output can arrive from the process."
msgstr "Emacsはプロセスセンチネル実行の前にプロセスからの出力をチェックします。プロセス終了によりセンチネルが一度実行されると、そのプロセスから更なる出力は到着しません。"

#. type: Plain text
#: original_texis/processes.texi:1865
msgid "A sentinel that writes the output into the buffer of the process should check whether the buffer is still alive.  If it tries to insert into a dead buffer, it will get an error.  If the buffer is dead, @code{(buffer-name (process-buffer @var{process}))} returns @code{nil}."
msgstr "プロセスのバッファーに出力を書き込むセンチネルは、そのバッファーがまだ生きているかチェックするべきです。死んだバッファーへの挿入を試みるとエラーになるでしょう。そのバッファーがすでに死んでいれば@code{(buffer-name (process-buffer @var{process}))}は@code{nil}をリターンします。"

#. type: Plain text
#: original_texis/processes.texi:1873
msgid "Quitting is normally inhibited within a sentinel---otherwise, the effect of typing @kbd{C-g} at command level or to quit a user command would be unpredictable.  If you want to permit quitting inside a sentinel, bind @code{inhibit-quit} to @code{nil}.  In most cases, the right way to do this is with the macro @code{with-local-quit}.  @xref{Quitting}."
msgstr "quitは通常はセンチネル内では抑制されます。さもないとコマンドレベルでの@kbd{C-g}のタイプ、またはユーザーコマンドのquitは予測できません。センチネル内部でのquitを許可したければ@code{inhibit-quit}を@code{nil}にバインドしてください。ほとんどの場合において、これを行う正しい方法はマクロ@code{with-local-quit}です。@ref{Quitting}を参照してください。"

#. type: Plain text
#: original_texis/processes.texi:1880
msgid "If an error happens during execution of a sentinel, it is caught automatically, so that it doesn't stop the execution of whatever programs was running when the sentinel was started.  However, if @code{debug-on-error} is non-@code{nil}, errors are not caught.  This makes it possible to use the Lisp debugger to debug the sentinel.  @xref{Debugger}."
msgstr "センチネルの実行中にエラーが発生した場合には、センチネル開始時に実行中だったプログラムが何であれ実行を停止しないように自動的にcatchされます。しかし@code{debug-on-error}が非@code{nil}ならエラーはcatchされません。これによりLispデバッガーを使用したセンチネルのデバッグが可能になります。@ref{Debugger}を参照してください。"

#. type: Plain text
#: original_texis/processes.texi:1885
msgid "While a sentinel is running, the process sentinel is temporarily set to @code{nil} so that the sentinel won't run recursively.  For this reason it is not possible for a sentinel to specify a new sentinel."
msgstr "センチネルの実行中にはセンチネルが再帰的に実行されないように、プロセスセンチネルは一時的に@code{nil}にセットされます。この理由によりセンチネルが新たにセンチネルを指定することはできません。"

#. type: Plain text
#: original_texis/processes.texi:1894
msgid "Note that Emacs automatically saves and restores the match data while executing sentinels.  @xref{Match Data}."
msgstr "センチネル実行中にはEmacsが自動的にマッチデータの保存とリストアを行うことに注意してください。@ref{Match Data}を参照してください。"

#. type: defun
#: original_texis/processes.texi:1895
#, no-wrap
msgid "set-process-sentinel process sentinel"
msgstr "set-process-sentinel process sentinel"

#. type: defun
#: original_texis/processes.texi:1900
msgid "This function associates @var{sentinel} with @var{process}.  If @var{sentinel} is @code{nil}, then the process will have the default sentinel, which inserts a message in the process's buffer when the process status changes."
msgstr "この関数は@var{sentinel}を@var{process}に関連付ける。@var{sentinel}が@code{nil}なら、そのプロセスはプロセス状態変更時にプロセスのバッファーにメッセージを挿入するデフォルトのセンチネルをもつことになるだろう。"

#. type: defun
#: original_texis/processes.texi:1904
msgid "Changes in process sentinels take effect immediately---if the sentinel is slated to be run but has not been called yet, and you specify a new sentinel, the eventual call to the sentinel will use the new one."
msgstr "プロセスセンチネルの変更は即座に効果を発揮する。そのセンチネルは実行される予定だがまだ呼び出されておらず、かつ新たなセンチネルを指定した場合には、最終的なセンチネル呼び出しには新たなセンチネルが使用されるだろう。"

#. type: group
#: original_texis/processes.texi:1912
#, no-wrap
msgid ""
"(defun msg-me (process event)\n"
"   (princ\n"
"     (format \"Process: %s had the event '%s'\" process event)))\n"
"(set-process-sentinel (get-process \"shell\") 'msg-me)\n"
"     @result{} msg-me\n"
msgstr ""
"(defun msg-me (process event)\n"
"   (princ\n"
"     (format \"Process: %s had the event '%s'\" process event)))\n"
"(set-process-sentinel (get-process \"shell\") 'msg-me)\n"
"     @result{} msg-me\n"

#. type: group
#: original_texis/processes.texi:1917
#, no-wrap
msgid ""
"(kill-process (get-process \"shell\"))\n"
"     @print{} Process: #<process shell> had the event 'killed'\n"
"     @result{} #<process shell>\n"
msgstr ""
"(kill-process (get-process \"shell\"))\n"
"     @print{} Process: #<process shell> had the event 'killed'\n"
"     @result{} #<process shell>\n"

#. type: defun
#: original_texis/processes.texi:1921
#, no-wrap
msgid "process-sentinel process"
msgstr "process-sentinel process"

#. type: defun
#: original_texis/processes.texi:1923
msgid "This function returns the sentinel of @var{process}."
msgstr "この関数は@var{process}のセンチネルをリターンする。"

#. type: Plain text
#: original_texis/processes.texi:1928
msgid "In case a process status changes need to be passed to several sentinels, you can use @code{add-function} to combine an existing sentinel with a new one.  @xref{Advising Functions}."
msgstr "あるプロセス状態の変化を複数のセンチネルに渡す必要がある場合には、既存のセンチネルと新たなセンチネルを組み合わせるために@code{add-function}を使用できます。@ref{Advising Functions}を参照してください。"

#. type: defun
#: original_texis/processes.texi:1929
#, no-wrap
msgid "waiting-for-user-input-p"
msgstr "waiting-for-user-input-p"

#. type: defun
#: original_texis/processes.texi:1934
msgid "While a sentinel or filter function is running, this function returns non-@code{nil} if Emacs was waiting for keyboard input from the user at the time the sentinel or filter function was called, or @code{nil} if it was not."
msgstr "この関数はセンチネルやフィルター関数の実行中に、もしEmacsがセンチネルやフィルター関数呼び出し時にユーザーのキーボード入力を待機していたら非@code{nil}、そうでなければ@code{nil}をリターンする。"

#. type: section
#: original_texis/processes.texi:1937
#, no-wrap
msgid "Querying Before Exit"
msgstr "Querying Before Exit"

#. type: Plain text
#: original_texis/processes.texi:1947
msgid "When Emacs exits, it terminates all its subprocesses.  For subprocesses that run a program, it sends them the @code{SIGHUP} signal; connections are simply closed.  Because subprocesses may be doing valuable work, Emacs normally asks the user to confirm that it is ok to terminate them.  Each process has a query flag, which, if non-@code{nil}, says that Emacs should ask for confirmation before exiting and thus killing that process.  The default for the query flag is @code{t}, meaning @emph{do} query."
msgstr "Emacsがexitする際にはすべてのサブプロセスを終了します。プログラムを実行しているサブプロセスには@code{SIGHUP}を送信して、接続は単にcloseされます。それらのサブプロセスはさまざまな処理を行っているかもしれないので、Emacsは通常ユーザーにたいしてそれらを終了しても大丈夫かどうか確認を求めます。各プロセスはquery(問い合わせ)のためのフラグをもち、これが非@code{nil}ならEmacsはプロセスをkillしてexitする前に確認を行うべきであることを示します。queryフラグにたいするデフォルトは@code{t}で、これは問い合わせを@emph{行う}ことを意味しています。"

#. type: defun
#: original_texis/processes.texi:1948
#, no-wrap
msgid "process-query-on-exit-flag process"
msgstr "process-query-on-exit-flag process"

#. type: defun
#: original_texis/processes.texi:1950
msgid "This returns the query flag of @var{process}."
msgstr "これは@var{process}のqueryフラグをリターンする。"

#. type: defun
#: original_texis/processes.texi:1952
#, no-wrap
msgid "set-process-query-on-exit-flag process flag"
msgstr "set-process-query-on-exit-flag process flag"

#. type: defun
#: original_texis/processes.texi:1955
msgid "This function sets the query flag of @var{process} to @var{flag}.  It returns @var{flag}."
msgstr "この関数は@var{process}のqueryフラグを@var{flag}にセットする。これは@var{flag}をリターンする。"

#. type: defun
#: original_texis/processes.texi:1958
msgid "Here is an example of using @code{set-process-query-on-exit-flag} on a shell process to avoid querying:"
msgstr "以下はshellプロセス上で問い合わせを回避するために@code{set-process-query-on-exit-flag}を使用する例:"

#. type: group
#: original_texis/processes.texi:1963
#, no-wrap
msgid ""
"(set-process-query-on-exit-flag (get-process \"shell\") nil)\n"
"     @result{} nil\n"
msgstr ""
"(set-process-query-on-exit-flag (get-process \"shell\") nil)\n"
"     @result{} nil\n"

#. type: section
#: original_texis/processes.texi:1968
#, no-wrap
msgid "Accessing Other Processes"
msgstr "Accessing Other Processes"

#. type: cindex
#: original_texis/processes.texi:1969
#, no-wrap
msgid "system processes"
msgstr "system processes"

#. type: Plain text
#: original_texis/processes.texi:1976
msgid "In addition to accessing and manipulating processes that are subprocesses of the current Emacs session, Emacs Lisp programs can also access other processes running on the same machine.  We call these @dfn{system processes}, to distinguish them from Emacs subprocesses."
msgstr "カレントEmacsセッションのサブプロセスにたいするアクセスと操作に加えて、同一マシン上で実行中の他のプロセスにたいしてEmacs Lispプログラムがアクセスすることもできます。Emacsのサブプロセスと区別するために、わたしたちはこれらを@dfn{システムプロセス(system processes)}と呼んでいます。"

#. type: Plain text
#: original_texis/processes.texi:1980
msgid "Emacs provides several primitives for accessing system processes.  Not all platforms support these primitives; on those which don't, these primitives return @code{nil}."
msgstr "Emacsはシステムプロセスへのアクセス用のプリミティブをいくつか提供します。これらのプリミティブはすべてのプラットフォームではサポートされません。これらのプリミティブはサポートされないシステムでは@code{nil}をリターンします。"

#. type: defun
#: original_texis/processes.texi:1981
#, no-wrap
msgid "list-system-processes"
msgstr "list-system-processes"

#. type: defun
#: original_texis/processes.texi:1987
msgid "This function returns a list of all the processes running on the system.  Each process is identified by its @acronym{PID}, a numerical process ID that is assigned by the OS and distinguishes the process from all the other processes running on the same machine at the same time."
msgstr "この関数はそのシステム上で実行中のすべてのプロセスのリストをリターンする。各プロセスは@acronym{PID}というOSから割り当てられた数値によるプロセスIDにより識別され、同一時に同一マシン上で実行中の他のプロセスと区別される。"

#. type: defun
#: original_texis/processes.texi:1989
#, no-wrap
msgid "process-attributes pid"
msgstr "process-attributes pid"

#. type: defun
#: original_texis/processes.texi:1999
msgid "This function returns an alist of attributes for the process specified by its process ID @var{pid}.  Each association in the alist is of the form @code{(@var{key} . @var{value})}, where @var{key} designates the attribute and @var{value} is the value of that attribute.  The various attribute @var{key}s that this function can return are listed below.  Not all platforms support all of these attributes; if an attribute is not supported, its association will not appear in the returned alist.  Values that are numbers can be either integer or floating point, depending on the magnitude of the value."
msgstr "この関数はプロセスID @var{pid}で指定されるプロセスにたいする属性のalistをリターンする。このalist内の各属性は@code{(@var{key} . @var{value})}という形式であり@var{key}は属性、@var{value}はその属性の値である。この関数がリターン可能なさまざまな属性にたいする@var{key}を以下にリストした。これらすべての属性をすべてのプラットフォームがサポートする訳ではない。ある属性がサポートされていなければ、その連想値はリターンされるalist内に出現しない。数値であるような値は整数か浮動小数点数のいずれかが可能であり、それは値の大小に依存する。"

#. type: item
#: original_texis/processes.texi:2001
#, no-wrap
msgid "euid"
msgstr "euid"

#. type: table
#: original_texis/processes.texi:2007
msgid "The effective user ID of the user who invoked the process.  The corresponding @var{value} is a number.  If the process was invoked by the same user who runs the current Emacs session, the value is identical to what @code{user-uid} returns (@pxref{User Identification})."
msgstr "そのプロセスを呼び出したユーザーの実効ユーザーID(effective user ID)。対応する@var{value}は数値。プロセスがカレントEmacsセッションを実行したユーザーと同じなら値は@code{user-uid}がリターンする値と等しくなる(@ref{User Identification}を参照)。"

#. type: item
#: original_texis/processes.texi:2008
#, no-wrap
msgid "user"
msgstr "user"

#. type: table
#: original_texis/processes.texi:2010
msgid "User name corresponding to the process's effective user ID, a string."
msgstr "そのプロセスの実効ユーザーIDに対応するユーザー名であるような文字列。"

#. type: item
#: original_texis/processes.texi:2011
#, no-wrap
msgid "egid"
msgstr "egid"

#. type: table
#: original_texis/processes.texi:2013
msgid "The group ID of the effective user ID, a number."
msgstr "実行ユーザーIDのグループIDであるような数値。"

#. type: item
#: original_texis/processes.texi:2014
#, no-wrap
msgid "group"
msgstr "group"

#. type: table
#: original_texis/processes.texi:2016
msgid "Group name corresponding to the effective user's group ID, a string."
msgstr "実効ユーザーのグループIDに対応するグループ名であるような文字列。"

#. type: item
#: original_texis/processes.texi:2017
#, no-wrap
msgid "comm"
msgstr "comm"

#. type: table
#: original_texis/processes.texi:2023
msgid "The name of the command that runs in the process.  This is a string that usually specifies the name of the executable file of the process, without the leading directories.  However, some special system processes can report strings that do not correspond to an executable file of a program."
msgstr "そのプロセス内で実効したコマンドの名前。これは通常は先行するディレクトリーを除いた実行可能ファイル名を指定する文字列。しかしいくつかの特別なシステムプロセスは、実行可能ファイルやプログラムに対応しない文字列を報告する可能性がある。"

#. type: item
#: original_texis/processes.texi:2024
#, no-wrap
msgid "state"
msgstr "state"

#. type: table
#: original_texis/processes.texi:2028
msgid "The state code of the process.  This is a short string that encodes the scheduling state of the process.  Here's a list of the most frequently seen codes:"
msgstr "そのプロセスの状態コード。これはそのプロセスのスケジューリング状態をエンコードする短い文字列。以下は頻繁に目にするコードのリスト:"

#. type: item
#: original_texis/processes.texi:2030
#, no-wrap
msgid "\"D\""
msgstr "\"D\""

#. type: table
#: original_texis/processes.texi:2032
msgid "uninterruptible sleep (usually I/O)"
msgstr "割り込み不可のsleep(通常はI/Oによる)"

#. type: item
#: original_texis/processes.texi:2032
#, no-wrap
msgid "\"R\""
msgstr "\"R\""

#. type: table
#: original_texis/processes.texi:2034
msgid "running"
msgstr "実行中"

#. type: item
#: original_texis/processes.texi:2034
#, no-wrap
msgid "\"S\""
msgstr "\"S\""

#. type: table
#: original_texis/processes.texi:2036
msgid "interruptible sleep (waiting for some event)"
msgstr "割り込み可能なsleep(何らかのイベント待ち)"

#. type: item
#: original_texis/processes.texi:2036
#, no-wrap
msgid "\"T\""
msgstr "\"T\""

#. type: table
#: original_texis/processes.texi:2038
msgid "stopped, e.g., by a job control signal"
msgstr "ジョブ制御シグナルにより停止された"

#. type: item
#: original_texis/processes.texi:2038
#, no-wrap
msgid "\"Z\""
msgstr "\"Z\""

#. type: table
#: original_texis/processes.texi:2040
msgid "zombie: a process that terminated, but was not reaped by its parent"
msgstr "zombie: 終了したが親プロセスに回収されていないプロセス"

#. type: table
#: original_texis/processes.texi:2045
msgid "For the full list of the possible states, see the manual page of the @command{ps} command."
msgstr "可能な状態の完全なリストは@command{ps}コマンドのman pageを参照のこと。"

#. type: item
#: original_texis/processes.texi:2046
#, no-wrap
msgid "ppid"
msgstr "ppid"

#. type: table
#: original_texis/processes.texi:2048
msgid "The process ID of the parent process, a number."
msgstr "親プロセスのプロセスIDであるような数値。"

#. type: item
#: original_texis/processes.texi:2049
#, no-wrap
msgid "pgrp"
msgstr "pgrp"

#. type: table
#: original_texis/processes.texi:2051
msgid "The process group ID of the process, a number."
msgstr "そのプロセスのプロセスグループIDであるような数値。"

#. type: item
#: original_texis/processes.texi:2052
#, no-wrap
msgid "sess"
msgstr "sess"

#. type: table
#: original_texis/processes.texi:2055
msgid "The session ID of the process.  This is a number that is the process ID of the process's @dfn{session leader}."
msgstr "そのプロセスのセッションID。これはそのプロセスの@dfn{セッションリーダー(session leader)}のプロセスIDであるような数値。"

#. type: item
#: original_texis/processes.texi:2056
#, no-wrap
msgid "ttname"
msgstr "ttname"

#. type: table
#: original_texis/processes.texi:2060
msgid "A string that is the name of the process's controlling terminal.  On Unix and GNU systems, this is normally the file name of the corresponding terminal device, such as @file{/dev/pts65}."
msgstr "そのプロセスの制御端末の名前であるような文字列。これはUnixやGNUシステムでは通常は@file{/dev/pts65}のような対応する端末デバイスのファイル名。"

#. type: item
#: original_texis/processes.texi:2061
#, no-wrap
msgid "tpgid"
msgstr "tpgid"

#. type: table
#: original_texis/processes.texi:2064
msgid "The numerical process group ID of the foreground process group that uses the process's terminal."
msgstr "そのプロセスの端末を使用するフォアグラウンドプロセスグループのプロセスグループIDであるような数値。"

#. type: item
#: original_texis/processes.texi:2065
#, no-wrap
msgid "minflt"
msgstr "minflt"

#. type: table
#: original_texis/processes.texi:2069
msgid "The number of minor page faults caused by the process since its beginning.  (Minor page faults are those that don't involve reading from disk.)"
msgstr "そのプロセス開始以降に発生したマイナーなページフォルト数(マイナーなページフォルトとはディスクからの読み込みを発生させないページフォルト)。"

#. type: item
#: original_texis/processes.texi:2070
#, no-wrap
msgid "majflt"
msgstr "majflt"

#. type: table
#: original_texis/processes.texi:2074
msgid "The number of major page faults caused by the process since its beginning.  (Major page faults require a disk to be read, and are thus more expensive than minor page faults.)"
msgstr "そのプロセス開始以降に発生したメジャーなページフォルト数(メジャーなページフォルトとはディスクからの読み込みを要し、それ故にマイナーページフォルトより高価なページフォルト)。"

#. type: item
#: original_texis/processes.texi:2075
#, no-wrap
msgid "cminflt"
msgstr "cminflt"

#. type: itemx
#: original_texis/processes.texi:2076
#, no-wrap
msgid "cmajflt"
msgstr "cmajflt"

#. type: table
#: original_texis/processes.texi:2079
msgid "Like @code{minflt} and @code{majflt}, but include the number of page faults for all the child processes of the given process."
msgstr "@code{minflt}や@code{majflt}と似ているが与えられたプロセスのすべての子プロセスのページフォルト数を含む。"

#. type: item
#: original_texis/processes.texi:2080
#, no-wrap
msgid "utime"
msgstr "utime"

#. type: table
#: original_texis/processes.texi:2086
msgid "Time spent by the process in the user context, for running the application's code.  The corresponding @var{value} is in the @w{@code{(@var{high} @var{low} @var{microsec} @var{picosec})}} format, the same format used by functions @code{current-time} (@pxref{Time of Day, current-time}) and @code{file-attributes} (@pxref{File Attributes})."
msgstr "アプリケーションのコード実行にたいしてユーザーコンテキスト内でプロセスに消費された時間。対応する@var{value}は@w{@code{(@var{high} @var{low} @var{microsec} @var{picosec})}}というフォーマットであり、これは関数@code{current-time}が使用するフォーマットと同じ(@ref{Time of Day, current-time})と@ref{File Attributes}の@code{file-attributes}を参照)。"

#. type: item
#: original_texis/processes.texi:2087
#, no-wrap
msgid "stime"
msgstr "stime"

#. type: table
#: original_texis/processes.texi:2091
msgid "Time spent by the process in the system (kernel) context, for processing system calls.  The corresponding @var{value} is in the same format as for @code{utime}."
msgstr "システムコールの処理にたいしてシステム(kernel)コンテキスト内でプロセスに消費された時間。対応する@var{value}は@code{utime}と同じフォーマット。"

#. type: item
#: original_texis/processes.texi:2092
#, no-wrap
msgid "time"
msgstr "time"

#. type: table
#: original_texis/processes.texi:2095
msgid "The sum of @code{utime} and @code{stime}.  The corresponding @var{value} is in the same format as for @code{utime}."
msgstr "@code{utime}と@code{stime}の和。対応する@var{value}は@code{utime}と同じフォーマット。"

#. type: item
#: original_texis/processes.texi:2096
#, no-wrap
msgid "cutime"
msgstr "cutime"

#. type: itemx
#: original_texis/processes.texi:2097
#, no-wrap
msgid "cstime"
msgstr "cstime"

#. type: itemx
#: original_texis/processes.texi:2098
#, no-wrap
msgid "ctime"
msgstr "ctime"

#. type: table
#: original_texis/processes.texi:2101
msgid "Like @code{utime}, @code{stime}, and @code{time}, but include the times of all the child processes of the given process."
msgstr "@code{utime}や@code{stime}と同様だが与えられたプロセスのすべての子プロセスの時間が含まれる点が異なる。"

#. type: item
#: original_texis/processes.texi:2102
#, no-wrap
msgid "pri"
msgstr "pri"

#. type: table
#: original_texis/processes.texi:2104
msgid "The numerical priority of the process."
msgstr "そのプロセスの数値的な優先度。"

#. type: item
#: original_texis/processes.texi:2105
#, no-wrap
msgid "nice"
msgstr "nice"

#. type: table
#: original_texis/processes.texi:2108
msgid "The @dfn{nice value} of the process, a number.  (Processes with smaller nice values get scheduled more favorably.)"
msgstr "そのプロセスの@dfn{nice値(nice value)}であるような数値(小さいnice値のプロセスがより優先的にスケジュールされる)。"

#. type: item
#: original_texis/processes.texi:2109
#, no-wrap
msgid "thcount"
msgstr "thcount"

#. type: table
#: original_texis/processes.texi:2111
msgid "The number of threads in the process."
msgstr "そのプロセス内のスレッド数。"

#. type: item
#: original_texis/processes.texi:2112
#, no-wrap
msgid "start"
msgstr "start"

#. type: table
#: original_texis/processes.texi:2116
msgid "The time when the process was started, in the same @code{(@var{high} @var{low} @var{microsec} @var{picosec})} format used by @code{file-attributes} and @code{current-time}."
msgstr "@code{file-attributes}や@code{current-time}が使用するのと同じフォーマット@code{(@var{high} @var{low} @var{microsec} @var{picosec})}による、そのプロセスが開始された時刻。"

#. type: item
#: original_texis/processes.texi:2117
#, no-wrap
msgid "etime"
msgstr "etime"

#. type: table
#: original_texis/processes.texi:2120
msgid "The time elapsed since the process started, in the format @code{(@var{high} @var{low} @var{microsec} @var{picosec})}."
msgstr "@code{(@var{high} @var{low} @var{microsec} @var{picosec})}というフォーマットによる、そのプロセスが開始されてから経過した時間。"

#. type: item
#: original_texis/processes.texi:2121
#, no-wrap
msgid "vsize"
msgstr "vsize"

#. type: table
#: original_texis/processes.texi:2123
msgid "The virtual memory size of the process, measured in kilobytes."
msgstr "そのプロセスの仮想メモリーのKB単位でのサイズ。"

#. type: item
#: original_texis/processes.texi:2124
#, no-wrap
msgid "rss"
msgstr "rss"

#. type: table
#: original_texis/processes.texi:2127
msgid "The size of the process's @dfn{resident set}, the number of kilobytes occupied by the process in the machine's physical memory."
msgstr "そのプロセスがマシンの物理メモリー内で占める@dfn{常駐セット(resident set)}のKB単位でのサイズ。"

#. type: item
#: original_texis/processes.texi:2128
#, no-wrap
msgid "pcpu"
msgstr "pcpu"

#. type: table
#: original_texis/processes.texi:2132
msgid "The percentage of the CPU time used by the process since it started.  The corresponding @var{value} is a floating-point number between 0 and 100."
msgstr "プロセス開始以降に使用されたCPU時間のパーセンテージ。対応する@var{value}は0から100の間の浮動小数点数。"

#. type: item
#: original_texis/processes.texi:2133
#, no-wrap
msgid "pmem"
msgstr "pmem"

#. type: table
#: original_texis/processes.texi:2137
msgid "The percentage of the total physical memory installed on the machine used by the process's resident set.  The value is a floating-point number between 0 and 100."
msgstr "マシンにインストールされた物理メモリー合計のうち、そのプロセスの常駐セットのパーセンテージ。値は0から100の間の浮動小数点数。"

#. type: item
#: original_texis/processes.texi:2138
#, no-wrap
msgid "args"
msgstr "args"

#. type: table
#: original_texis/processes.texi:2146
msgid "The command-line with which the process was invoked.  This is a string in which individual command-line arguments are separated by blanks; whitespace characters that are embedded in the arguments are quoted as appropriate for the system's shell: escaped by backslash characters on GNU and Unix, and enclosed in double quote characters on Windows.  Thus, this command-line string can be directly used in primitives such as @code{shell-command}."
msgstr "そのプロセスが呼び出されたときのコマンドライン。これは個々のコマンドライン引数がブランクで区切られた文字列。引数に埋め込まれた空白文字はシステムに応じて適切にクォートされる。GNUやUnixではバックスラッシュ文字によるエスケープ、Windowsではダブルクォート文字で囲まれる。つまりこのコマンドライン文字列は@code{shell-command}のようなプリミティブにより直接使用できる。"

#. type: cindex
#: original_texis/processes.texi:2153
#, no-wrap
msgid "transaction queue"
msgstr "transaction queue"

#. type: Plain text
#: original_texis/processes.texi:2161
msgid "You can use a @dfn{transaction queue} to communicate with a subprocess using transactions.  First use @code{tq-create} to create a transaction queue communicating with a specified process.  Then you can call @code{tq-enqueue} to send a transaction."
msgstr "トランザクションを用いてサブプロセスと対話するために@dfn{トランザクションキュー(transaction queue)}を使用できます。まず@code{tq-create}を使用して指定したプロセスと対話するためのトランザクションキューを作成します。それからトランザクションを送信するために@code{tq-enqueue}を呼び出すことができます。"

#. type: defun
#: original_texis/processes.texi:2162
#, no-wrap
msgid "tq-create process"
msgstr "tq-create process"

#. type: defun
#: original_texis/processes.texi:2168
msgid "This function creates and returns a transaction queue communicating with @var{process}.  The argument @var{process} should be a subprocess capable of sending and receiving streams of bytes.  It may be a child process, or it may be a TCP connection to a server, possibly on another machine."
msgstr "この関数は@var{process}と対話するトランザクションキューを作成してリターンする。引数@var{process}はバイトストリームを送受信する能力をもつサブプロセスであること。これは子プロセス、または(おそらく別のマシン上の)サーバーへのTCP接続かもしれない。"

#. type: defun
#: original_texis/processes.texi:2170
#, no-wrap
msgid "tq-enqueue queue question regexp closure fn &optional delay-question"
msgstr "tq-enqueue queue question regexp closure fn &optional delay-question"

#. type: defun
#: original_texis/processes.texi:2173
msgid "This function sends a transaction to queue @var{queue}.  Specifying the queue has the effect of specifying the subprocess to talk to."
msgstr "この関数はキュー@var{queue}にトランザクションを送信する。キューの指定は対話するサブプロセスを指定する効果をもつ。"

#. type: defun
#: original_texis/processes.texi:2178
msgid "The argument @var{question} is the outgoing message that starts the transaction.  The argument @var{fn} is the function to call when the corresponding answer comes back; it is called with two arguments: @var{closure}, and the answer received."
msgstr "引数@var{question}はトランザクションを開始するために発信するメッセージ。引数@var{fn}は、それにたいする応答が返信された際に呼び出す関数。これは@var{closure}と受信した応答という2つの引数で呼び出される。"

#. type: defun
#: original_texis/processes.texi:2182
msgid "The argument @var{regexp} is a regular expression that should match text at the end of the entire answer, but nothing before; that's how @code{tq-enqueue} determines where the answer ends."
msgstr "引数@var{regexp}は応答全体の終端にマッチして、それより前にはマッチしない正規表現であること。これは@code{tq-enqueue}が応答の終わりを決定する方法である。"

#. type: defun
#: original_texis/processes.texi:2186
msgid "If the argument @var{delay-question} is non-@code{nil}, delay sending this question until the process has finished replying to any previous questions.  This produces more reliable results with some processes."
msgstr "引数@var{delay-question}が非@code{nil}なら、そのプロセスが以前に発信したすべてのメッセージへの返信が完了するまでメッセージの送信を遅延する。これによりいくつかのプロセスにたいして、より信頼性のある結果が生成される。"

#. type: defun
#: original_texis/processes.texi:2193
#, no-wrap
msgid "tq-close queue"
msgstr "tq-close queue"

#. type: defun
#: original_texis/processes.texi:2196
msgid "Shut down transaction queue @var{queue}, waiting for all pending transactions to complete, and then terminate the connection or child process."
msgstr "保留中のすべてのトランザクションの完了を待機して、トランザクションキュー@var{queue}をシャットダウンして、それから接続または子プロセスを終了する。"

#. type: Plain text
#: original_texis/processes.texi:2200
msgid "Transaction queues are implemented by means of a filter function.  @xref{Filter Functions}."
msgstr "トランザクションキューはフィルター関数により実装されています。@ref{Filter Functions}を参照してください。"

#. type: section
#: original_texis/processes.texi:2202
#, no-wrap
msgid "Network Connections"
msgstr "Network Connections"

#. type: cindex
#: original_texis/processes.texi:2203
#, no-wrap
msgid "network connection"
msgstr "network connection"

#. type: cindex
#: original_texis/processes.texi:2204
#, no-wrap
msgid "TCP"
msgstr "TCP"

#. type: cindex
#: original_texis/processes.texi:2205
#, no-wrap
msgid "UDP"
msgstr "UDP"

#. type: Plain text
#: original_texis/processes.texi:2217
msgid "Emacs Lisp programs can open stream (TCP) and datagram (UDP) network connections (@pxref{Datagrams}) to other processes on the same machine or other machines.  A network connection is handled by Lisp much like a subprocess, and is represented by a process object.  However, the process you are communicating with is not a child of the Emacs process, has no process @acronym{ID}, and you can't kill it or send it signals.  All you can do is send and receive data.  @code{delete-process} closes the connection, but does not kill the program at the other end; that program must decide what to do about closure of the connection."
msgstr "Emacs Lispプログラムは同一マシンまたは他のマシン上の別プロセスにたいしてストリーム(TCP)やデータグラム(UDP)のネットワーク接続(@ref{Datagrams}を参照)をオープンできます。ネットワーク接続はLispによりサブプロセスと同様に処理されて、プロセスオブジェクトとして表されます。しかし対話を行うそのプロセスはEmacsの子プロセスではなく、プロセス@acronym{ID}をもたず、それをkillしたりシグナルを送信することはできません。行うことができるのはデータの送信と受信だけです。@code{delete-process}は接続をクローズしますが、他方の端のプログラムをkillしません。そのプログラムは接続のクローズについて何を行うか決定しなければなりません。"

#. type: Plain text
#: original_texis/processes.texi:2226
msgid "Lisp programs can listen for connections by creating network servers.  A network server is also represented by a kind of process object, but unlike a network connection, the network server never transfers data itself.  When it receives a connection request, it creates a new network connection to represent the connection just made.  (The network connection inherits certain information, including the process plist, from the server.)  The network server then goes back to listening for more connection requests."
msgstr "ネットワークサーバーを作成することによりLispプログラムは接続をlistenできます。ネットワークサーバーもある種のプロセスオブジェクトとして表されますが、ネットワーク接続とは異なりネットワークサーバーがデータ自体を転送することは決してありません。接続リクエストを受信したときは、それにたいして作成した接続を表す新たなネットワーク接続を作成します(そのネットワーク接続はサーバーからプロセスplistを含む特定の情報を継承する)。その後でネットワークサーバーは更なる接続リクエストのlistenに戻ります。"

#. type: Plain text
#: original_texis/processes.texi:2233
msgid "Network connections and servers are created by calling @code{make-network-process} with an argument list consisting of keyword/argument pairs, for example @code{:server t} to create a server process, or @code{:type 'datagram} to create a datagram connection.  @xref{Low-Level Network}, for details.  You can also use the @code{open-network-stream} function described below."
msgstr "ネットワーク接続とサーバーは、キーワード/引数のペアーで構成される引数リストで@code{make-network-process}を呼び出すことにより作成されます。たとえば@code{:server t}はサーバープロセス、@code{:type 'datagram}はデータグラム接続を作成します。詳細は@ref{Low-Level Network}を参照してください。以下で説明する@code{open-network-stream}を使用することもできます。"

#. type: Plain text
#: original_texis/processes.texi:2239
msgid "To distinguish the different types of processes, the @code{process-type} function returns the symbol @code{network} for a network connection or server, @code{serial} for a serial port connection, @code{pipe} for a pipe connection, or @code{real} for a real subprocess."
msgstr "異なるプロセスのタイプを区別するために@code{process-type}関数はネットワーク接続とサーバーには@code{network}、シリアルポート接続は@code{serial}、pipe接続には@code{pipe}、実際のサブプロセスには@code{real}をリターンします。"

#. type: Plain text
#: original_texis/processes.texi:2245
msgid "The @code{process-status} function returns @code{open}, @code{closed}, @code{connect}, @code{stop}, or @code{failed} for network connections.  For a network server, the status is always @code{listen}.  Except for @code{stop}, none of those values is possible for a real subprocess.  @xref{Process Information}."
msgstr "ネットワーク接続にたいして@code{process-status}関数は@code{open}、@code{closed}、@code{connect}、@code{stop}、または@code{failed}をリターンします。ネットワークサーバーにたいしては状態は常に@code{listen}になります。実際のサブプロセスにたいしては@code{stop}以外の値はリターンされません。@ref{Process Information}を参照してください。"

#. type: Plain text
#: original_texis/processes.texi:2258
msgid "You can stop and resume operation of a network process by calling @code{stop-process} and @code{continue-process}.  For a server process, being stopped means not accepting new connections.  (Up to 5 connection requests will be queued for when you resume the server; you can increase this limit, unless it is imposed by the operating system---see the @code{:server} keyword of @code{make-network-process}, @ref{Network Processes}.)  For a network stream connection, being stopped means not processing input (any arriving input waits until you resume the connection).  For a datagram connection, some number of packets may be queued but input may be lost.  You can use the function @code{process-command} to determine whether a network connection or server is stopped; a non-@code{nil} value means yes."
msgstr "@code{stop-process}と@code{continue-process}を呼び出すことにより、ネットワークプロセスの処理の停止と再開が可能です。サーバープロセスにたいする停止は新たな接続の受け付けないことを意味します(サーバー再開時は5つまでの接続リクエストがキューされる。これがOSによる制限でなければこの制限は増やすことができる。@ref{Network Processes}の@code{make-network-process}の@code{:server}を参照)。ネットワークストリーム接続にたいしては、停止は入力の処理を行わないことを意味します(到着するすべての入力は接続の再開まで待つ)。データグラム接続にたいしては、いくらかのパケットはキューされますが入力は失われるかもしれません。ネットワーク接続またはサーバーが停止しているかどうかを判断するために、関数@code{process-command}を使用できます。これが非@code{nil}なら停止しています。"

#. type: cindex
#: original_texis/processes.texi:2259
#, no-wrap
msgid "network connection, encrypted"
msgstr "network connection, encrypted"

#. type: cindex
#: original_texis/processes.texi:2260
#, no-wrap
msgid "encrypted network connections"
msgstr "encrypted network connections"

#. type: cindex
#: original_texis/processes.texi:2261
#, no-wrap
msgid "@acronym{TLS} network connections"
msgstr "@acronym{TLS} network connections"

#. type: cindex
#: original_texis/processes.texi:2262
#, no-wrap
msgid "@acronym{STARTTLS} network connections"
msgstr "@acronym{STARTTLS} network connections"

#. type: Plain text
#: original_texis/processes.texi:2275
msgid "Emacs can create encrypted network connections, using either built-in or external support.  The built-in support uses the GnuTLS Transport Layer Security Library; see @uref{http://www.gnu.org/software/gnutls/, the GnuTLS project page}.  If your Emacs was compiled with GnuTLS support, the function @code{gnutls-available-p} is defined and returns non-@code{nil}.  For more details, @pxref{Top,, Overview, emacs-gnutls, The Emacs-GnuTLS manual}.  The external support uses the @file{starttls.el} library, which requires a helper utility such as @command{gnutls-cli} to be installed on the system.  The @code{open-network-stream} function can transparently handle the details of creating encrypted connections for you, using whatever support is available."
msgstr "ビルトインや外部のサポートを使用することによりEmacsは暗号化されたネットワーク接続を作成できます。ビルトインのサポートはGnuTLSライブラリー(TLS: Transport Layer Security)を使用します。@uref{http://www.gnu.org/software/gnutls/, the GnuTLS project page}を参照してください。GnuTLSサポートつきでEmacsをコンパイルした場合には関数@code{gnutls-available-p}が定義されて非@code{nil}をリターンします。詳細は@ref{Top,, Overview, emacs-gnutls, The Emacs-GnuTLS manual}を参照してください。外部のサポートの場合は@file{starttls.el}ライブラリーを使用します。これはシステム上に@command{gnutls-cli}のようなヘルパーユーティリティーのインストールを必要とします。@code{open-network-stream}関数は利用可能なサポートを何であれ使用して暗号化接続作成の詳細を透過的に処理できます。"

#. type: defun
#: original_texis/processes.texi:2276
#, no-wrap
msgid "open-network-stream name buffer host service &rest parameters"
msgstr "open-network-stream name buffer host service &rest parameters"

#. type: defun
#: original_texis/processes.texi:2279
msgid "This function opens a TCP connection, with optional encryption, and returns a process object that represents the connection."
msgstr "この関数はオプションで暗号つきでTCP接続をオープンして、その接続を表すプロセスオブジェクトをリターンする。"

#. type: defun
#: original_texis/processes.texi:2282
msgid "The @var{name} argument specifies the name for the process object.  It is modified as necessary to make it unique."
msgstr "@var{name}引数はプロセスオブジェクトの名前を指定する。これは必要に応じて一意になるよう変更される。"

#. type: defun
#: original_texis/processes.texi:2288
msgid "The @var{buffer} argument is the buffer to associate with the connection.  Output from the connection is inserted in the buffer, unless you specify your own filter function to handle the output.  If @var{buffer} is @code{nil}, it means that the connection is not associated with any buffer."
msgstr "@var{buffer}引数はその接続に関連付けるバッファー。その接続からの出力は出力を処理する独自のフィルター関数を指定していない場合には、@var{buffer}が@code{nil}ならその接続はバッファーに関連付けられない。"

#. type: defun
#: original_texis/processes.texi:2292
msgid "The arguments @var{host} and @var{service} specify where to connect to; @var{host} is the host name (a string), and @var{service} is the name of a defined network service (a string) or a port number (an integer)."
msgstr "引数@var{host}と@var{service}はどこに接続するかを指定する。@var{host}はホスト名(文字列)、@var{service}は定義済みのネットワークサービス名(文字列)、またはポート番号(数字)。"

#. type: defun
#: original_texis/processes.texi:2295
msgid "The remaining arguments @var{parameters} are keyword/argument pairs that are mainly relevant to encrypted connections:"
msgstr "残りの引数@var{parameters}は主に暗号化された接続に関連するキーワード/引数のペアー:"

#. type: item
#: original_texis/processes.texi:2298
#, no-wrap
msgid ":nowait @var{boolean}"
msgstr ":nowait @var{boolean}"

#. type: table
#: original_texis/processes.texi:2300
msgid "If non-@code{nil}, try to make an asynchronous connection."
msgstr "非@code{nil}なら非同期接続を試みる。"

#. type: item
#: original_texis/processes.texi:2301 original_texis/processes.texi:2494
#, no-wrap
msgid ":type @var{type}"
msgstr ":type @var{type}"

#. type: table
#: original_texis/processes.texi:2303
msgid "The type of connection.  Options are:"
msgstr "接続のタイプ。オプションは以下のとおり:"

#. type: item
#: original_texis/processes.texi:2305
#, no-wrap
msgid "plain"
msgstr "plain"

#. type: table
#: original_texis/processes.texi:2307
msgid "An ordinary, unencrypted connection."
msgstr "通常の暗号化されていない接続。"

#. type: item
#: original_texis/processes.texi:2307
#, no-wrap
msgid "tls"
msgstr "tls"

#. type: itemx
#: original_texis/processes.texi:2308
#, no-wrap
msgid "ssl"
msgstr "ssl"

#. type: table
#: original_texis/processes.texi:2310
msgid "A @acronym{TLS} (Transport Layer Security) connection."
msgstr "@acronym{TLS} (Transport Layer Security)接続。"

#. type: itemx
#: original_texis/processes.texi:2311
#, no-wrap
msgid "network"
msgstr "network"

#. type: table
#: original_texis/processes.texi:2316
msgid "Start with a plain connection, and if parameters @samp{:success} and @samp{:capability-command} are supplied, try to upgrade to an encrypted connection via @acronym{STARTTLS}.  If that fails, retain the unencrypted connection."
msgstr "plain接続を開始してパラメーター@samp{:success}と@samp{:capability-command}が与えられたら、@acronym{STARTTLS}を通じて暗号化接続への更新を試みる。これが失敗したら暗号化されていない接続のまま留まる。"

#. type: item
#: original_texis/processes.texi:2316
#, no-wrap
msgid "starttls"
msgstr "starttls"

#. type: table
#: original_texis/processes.texi:2318
msgid "As for @code{nil}, but if @acronym{STARTTLS} fails drop the connection."
msgstr "@code{nil}と同様だが@acronym{STARTTLS}が失敗したらその接続を切断する。"

#. type: item
#: original_texis/processes.texi:2318
#, no-wrap
msgid "shell"
msgstr "shell"

#. type: table
#: original_texis/processes.texi:2320
msgid "A shell connection."
msgstr "shell接続。"

#. type: item
#: original_texis/processes.texi:2322
#, no-wrap
msgid ":always-query-capabilities @var{boolean}"
msgstr ":always-query-capabilities @var{boolean}"

#. type: table
#: original_texis/processes.texi:2325
msgid "If non-@code{nil}, always ask for the server's capabilities, even when doing a @samp{plain} connection."
msgstr "非@code{nil}なら、たとえ@samp{plain}な接続を行っているときでも常にサーバーの能力を問い合わせる。"

#. type: item
#: original_texis/processes.texi:2326
#, no-wrap
msgid ":capability-command @var{capability-command}"
msgstr ":capability-command @var{capability-command}"

#. type: table
#: original_texis/processes.texi:2328
msgid "Command string to query the host capabilities."
msgstr "ホストの能力を問い合わせるためのコマンド文字列。"

#. type: item
#: original_texis/processes.texi:2329
#, no-wrap
msgid ":end-of-command @var{regexp}"
msgstr ":end-of-command @var{regexp}"

#. type: itemx
#: original_texis/processes.texi:2330
#, no-wrap
msgid ":end-of-capability @var{regexp}"
msgstr ":end-of-capability @var{regexp}"

#. type: table
#: original_texis/processes.texi:2333
msgid "Regular expression matching the end of a command, or the end of the command @var{capability-command}.  The latter defaults to the former."
msgstr "コマンドの終端、またはコマンド@var{capability-command}の終端にマッチする正規表現。前者は後者のデフォルト。"

#. type: item
#: original_texis/processes.texi:2334
#, no-wrap
msgid ":starttls-function @var{function}"
msgstr ":starttls-function @var{function}"

#. type: table
#: original_texis/processes.texi:2338
msgid "Function of one argument (the response to @var{capability-command}), which returns either @code{nil}, or the command to activate @acronym{STARTTLS} if supported."
msgstr "単一の引数(@var{capability-command}にたいする応答)をとり@code{nil}、またはサポートされていれば@acronym{STARTTLS}をアクティブにするコマンドをリターンする関数。"

#. type: item
#: original_texis/processes.texi:2339
#, no-wrap
msgid ":success @var{regexp}"
msgstr ":success @var{regexp}"

#. type: table
#: original_texis/processes.texi:2341
msgid "Regular expression matching a successful @acronym{STARTTLS} negotiation."
msgstr "成功した@acronym{STARTTLS}ネゴシェーションにマッチする正規表現。"

#. type: item
#: original_texis/processes.texi:2342
#, no-wrap
msgid ":use-starttls-if-possible @var{boolean}"
msgstr ":use-starttls-if-possible @var{boolean}"

#. type: table
#: original_texis/processes.texi:2345
msgid "If non-@code{nil}, do opportunistic @acronym{STARTTLS} upgrades even if Emacs doesn't have built-in @acronym{TLS} support."
msgstr "非@code{nil}なら、たとえEmacsがビルトインの@acronym{TLS}サポートをもっていなくても、日和見的(opportunistic)に@acronym{STARTTLS}アップグレードを行う。"

#. type: item
#: original_texis/processes.texi:2346
#, no-wrap
msgid ":warn-unless-encrypted @var{boolean}"
msgstr ":warn-unless-encrypted @var{boolean}"

#. type: table
#: original_texis/processes.texi:2351
msgid "If non-@code{nil}, and @code{:return-value} is also non-@code{nil}, Emacs will warn if the connection isn't encrypted.  This is useful for protocols like @acronym{IMAP} and the like, where most users would expect the network traffic to be encrypted."
msgstr "非@code{nil}、かつ@code{:return-value}も非@code{nil}なら、接続が暗号化されていない場合にはEmacsは警告するだろう。これはほとんどのユーザーがネットワークトラフィックが暗号化されているこを期待するであろう@acronym{IMAP}やその類のプロトコルにたいして有用。"

#. type: item
#: original_texis/processes.texi:2352
#, no-wrap
msgid ":client-certificate @var{list-or-t}"
msgstr ":client-certificate @var{list-or-t}"

#. type: table
#: original_texis/processes.texi:2358
msgid "Either a list of the form @code{(@var{key-file} @var{cert-file})}, naming the certificate key file and certificate file itself, or @code{t}, meaning to query @code{auth-source} for this information (@pxref{Top,,Overview, auth, The Auth-Source Manual}).  Only used for @acronym{TLS} or @acronym{STARTTLS}."
msgstr "証明書(certificate)のキーと、証明書のファイル自身を命名する@code{(@var{key-file} @var{cert-file})}という形式のリスト、またはこの情報にたいして@code{auth-source}を尋ねることを意味する@code{t}のいずれか(@ref{Top,,Overview, auth, The Auth-Source Manual}を参照)。@acronym{TLS}や@acronym{STARTTLS}にたいしてのみ使用される。"

#. type: item
#: original_texis/processes.texi:2359
#, no-wrap
msgid ":return-list @var{cons-or-nil}"
msgstr ":return-list @var{cons-or-nil}"

#. type: table
#: original_texis/processes.texi:2363
msgid "The return value of this function.  If omitted or @code{nil}, return a process object.  Otherwise, a cons of the form @code{(@var{process-object} . @var{plist})}, where @var{plist} has keywords:"
msgstr "この関数のリターン値。省略または@code{nil}ならプロセスオブジェクトをリターンする。それ以外なら@code{(@var{process-object} . @var{plist})}という形式のコンスセルをリターンする。ここで@var{plist}は以下のキーワード:"

#. type: item
#: original_texis/processes.texi:2365
#, no-wrap
msgid ":greeting @var{string-or-nil}"
msgstr ":greeting @var{string-or-nil}"

#. type: table
#: original_texis/processes.texi:2367
msgid "If non-@code{nil}, the greeting string returned by the host."
msgstr "非@code{nil}ならホストからリターンされたgreeting(挨拶)文字列。"

#. type: item
#: original_texis/processes.texi:2367
#, no-wrap
msgid ":capabilities @var{string-or-nil}"
msgstr ":capabilities @var{string-or-nil}"

#. type: table
#: original_texis/processes.texi:2369
msgid "If non-@code{nil}, the host's capability string."
msgstr "非@code{nil}ならホストの能力(capability)文字列。"

#. type: item
#: original_texis/processes.texi:2369
#, no-wrap
msgid ":type @var{symbol}"
msgstr ":type @var{symbol}"

#. type: table
#: original_texis/processes.texi:2371
msgid "The connection type: @samp{plain} or @samp{tls}."
msgstr "接続タイプであり、@samp{plain}か@samp{tls}のいずれか。"

#. type: cindex
#: original_texis/processes.texi:2380
#, no-wrap
msgid "network servers"
msgstr "network servers"

#. type: Plain text
#: original_texis/processes.texi:2387
msgid "You create a server by calling @code{make-network-process} (@pxref{Network Processes}) with @code{:server t}.  The server will listen for connection requests from clients.  When it accepts a client connection request, that creates a new network connection, itself a process object, with the following parameters:"
msgstr "@code{:server t}で@code{make-network-process}を呼び出すことによりサーバーが作成されます(@ref{Network Processes}を参照)。そのサーバーはクライアントからの接続リクエストをlistenするでしょう。クライアントの接続リクエストをaccept(受け入れる)する際は以下のようなパラメーターで、それ自体がプロセスオブジェクトであるようなネットワーク接続を作成します。"

#. type: itemize
#: original_texis/processes.texi:2398
msgid "The connection's process name is constructed by concatenating the server process's @var{name} with a client identification string.  The client identification string for an IPv4 connection looks like @samp{<@var{a}.@var{b}.@var{c}.@var{d}:@var{p}>}, which represents an address and port number.  Otherwise, it is a unique number in brackets, as in @samp{<@var{nnn}>}.  The number is unique for each connection in the Emacs session."
msgstr "その接続のプロセス名はサーバープロセスの@var{name}とクライアント識別文字列を結合して構築される。IPv4接続にたいするクライアント識別文字列はアドレスとポート番号を表す@samp{<@var{a}.@var{b}.@var{c}.@var{d}:@var{p}>}のような文字列。それ以外なら@samp{<@var{nnn}>}のようにカッコで囲まれた一意な数字。この数字はそのEmacsセッション内のそれぞれの接続にたいして一意。"

#. type: itemize
#: original_texis/processes.texi:2404
msgid "If the server has a non-default filter, the connection process does not get a separate process buffer; otherwise, Emacs creates a new buffer for the purpose.  The buffer name is the server's buffer name or process name, concatenated with the client identification string."
msgstr "サーバーが非デフォルトのフィルターをもつ場合には、その接続プロセスは別個にプロセスバッファーを取得しない。それ以外ならEmacsはその目的のために新たにバッファーを作成する。サーバーのバッファー名かプロセス名にクライアント識別文字列に結合したものがバッファー名になる。"

#. type: itemize
#: original_texis/processes.texi:2408
msgid "The server's process buffer value is never used directly, but the log function can retrieve it and use it to log connections by inserting text there."
msgstr "サーバーのプロセスバッファーの値が直接使用されることは決してないが、log関数は接続のログを記録するためにそれを取得して、そこにテキストを挿入して使用することができる。"

#. type: itemize
#: original_texis/processes.texi:2414
msgid "The communication type and the process filter and sentinel are inherited from those of the server.  The server never directly uses its filter and sentinel; their sole purpose is to initialize connections made to the server."
msgstr "通信タイプ(communication type)、プロセスフィルター、およびセンチネルはそれぞれサーバーのものから継承される。サーバーが直接フィルターとセンチネルを使用することは決してない。それらの唯一の目的はサーバーへの接続を初期化することである。"

#. type: itemize
#: original_texis/processes.texi:2420
msgid "The connection's process contact information is set according to the client's addressing information (typically an IP address and a port number).  This information is associated with the @code{process-contact} keywords @code{:host}, @code{:service}, @code{:remote}."
msgstr "その接続のプロセスコンタクト情報は、クライアントのアドレス情報(通常はIPアドレスとポート番号)に応じてセットされる。この情報は@code{process-contact}のキーワード@code{:host}、@code{:service}、@code{:remote}に関連付けられる。"

#. type: itemize
#: original_texis/processes.texi:2424
msgid "The connection's local address is set up according to the port number used for the connection."
msgstr "その接続のローカルアドレスは使用するポート番号に応じてセットアップされる。"

#. type: itemize
#: original_texis/processes.texi:2427
msgid "The client process's plist is initialized from the server's plist."
msgstr "クライアントプロセスのplistはサーバーのplistからインストールされる。"

#. type: cindex
#: original_texis/processes.texi:2431
#, no-wrap
msgid "datagrams"
msgstr "datagrams"

#. type: Plain text
#: original_texis/processes.texi:2437
msgid "A @dfn{datagram} connection communicates with individual packets rather than streams of data.  Each call to @code{process-send} sends one datagram packet (@pxref{Input to Processes}), and each datagram received results in one call to the filter function."
msgstr "@dfn{データグラム(datagram)}接続は、データストリームではなく個別のパッケージで対話します。@code{process-send}を呼び出すたびに1つのデータグラムパケット(@ref{Input to Processes}を参照)が送信されて、受信されたデータグラムごとに1回フィルター関数が呼び出されます。"

#. type: Plain text
#: original_texis/processes.texi:2447
msgid "The datagram connection doesn't have to talk with the same remote peer all the time.  It has a @dfn{remote peer address} which specifies where to send datagrams to.  Each time an incoming datagram is passed to the filter function, the peer address is set to the address that datagram came from; that way, if the filter function sends a datagram, it will go back to that place.  You can specify the remote peer address when you create the datagram connection using the @code{:remote} keyword.  You can change it later on by calling @code{set-process-datagram-address}."
msgstr "データグラム接続は毎回同じリモートピア(remote peer)と対話する必要はありません。データグラム接続はデータグラムの送信先を指定する@dfn{リモートピアアドレス(remote peer address)}をもちます。フィルター関数にたいして受信されたデータグラムが渡されるたびに、そのデータグラムの送信元アドレスがピアアドレスにセットされます。このようにもしフィルター関数がデータグラムを送信したら、それは元の場所へ戻ることになります。@code{:remote}キーワードを使用してデータグラム接続を作成する際にはリモートピアアドレスを指定できます。@code{set-process-datagram-address}を呼び出すことにより後からそれを変更できます。"

#. type: defun
#: original_texis/processes.texi:2448
#, no-wrap
msgid "process-datagram-address process"
msgstr "process-datagram-address process"

#. type: defun
#: original_texis/processes.texi:2451
msgid "If @var{process} is a datagram connection or server, this function returns its remote peer address."
msgstr "@var{process}がデータグラム接続かサーバーなら、この関数はそれのリモートピアアドレスをリターンする。"

#. type: defun
#: original_texis/processes.texi:2453
#, no-wrap
msgid "set-process-datagram-address process address"
msgstr "set-process-datagram-address process address"

#. type: defun
#: original_texis/processes.texi:2456
msgid "If @var{process} is a datagram connection or server, this function sets its remote peer address to @var{address}."
msgstr "@var{process}がデータグラム接続かサーバーなら、この関数はそのリモートピアアドレスに@var{address}をセットする。"

#. type: section
#: original_texis/processes.texi:2459
#, no-wrap
msgid "Low-Level Network Access"
msgstr "Low-Level Network Access"

#. type: Plain text
#: original_texis/processes.texi:2464
msgid "You can also create network connections by operating at a lower level than that of @code{open-network-stream}, using @code{make-network-process}."
msgstr "@code{make-network-process}を使用することにより、@code{open-network-stream}より低レベルでの処理からネットワーク接続を作成することもできます。"

#. type: menuentry
#: original_texis/processes.texi:2471
msgid "Proc: Network Processes"
msgstr "Proc: Network Processes"

#. type: menuentry
#: original_texis/processes.texi:2471
msgid "Using @code{make-network-process}."
msgstr "@code{make-network-process}の使用。"

#. type: menuentry
#: original_texis/processes.texi:2471
msgid "Options: Network Options"
msgstr "Options: Network Options"

#. type: menuentry
#: original_texis/processes.texi:2471
msgid "Further control over network connections."
msgstr "更なるネットワーク接続の制御。"

#. type: menuentry
#: original_texis/processes.texi:2471
msgid "Features: Network Feature Testing"
msgstr "Features: Network Feature Testing"

#. type: menuentry
#: original_texis/processes.texi:2471
msgid "Determining which network features work on the machine you are using."
msgstr "使用中マシン上で動作するネットワーク機能を判断する。"

#. type: node
#: original_texis/processes.texi:2473
#, no-wrap
msgid "Network Processes"
msgstr "Network Processes"

#. type: code{#1}
#: original_texis/processes.texi:2474
#, no-wrap
msgid "make-network-process"
msgstr "make-network-process"

#. type: Plain text
#: original_texis/processes.texi:2479
msgid "The basic function for creating network connections and network servers is @code{make-network-process}.  It can do either of those jobs, depending on the arguments you give it."
msgstr "ネットワーク接続やネットワークサーバーを作成する基本的な関数は@code{make-network-process}です。これは与えられた引数に応じて、これらの仕事のいずれかを行うことができます。"

#. type: defun
#: original_texis/processes.texi:2480
#, no-wrap
msgid "make-network-process &rest args"
msgstr "make-network-process &rest args"

#. type: defun
#: original_texis/processes.texi:2488
msgid "This function creates a network connection or server and returns the process object that represents it.  The arguments @var{args} are a list of keyword/argument pairs.  Omitting a keyword is always equivalent to specifying it with value @code{nil}, except for @code{:coding}, @code{:filter-multibyte}, and @code{:reuseaddr}.  Here are the meaningful keywords (those corresponding to network options are listed in the following section):"
msgstr "この関数はネットワーク接続やサーバーを作成して、それを表すプロセスオブジェクトをリターンする。引数@var{args}はキーワード/引数のペアからなるリスト。キーワードの省略は@code{:coding}、@code{:filter-multibyte}、@code{:reuseaddr}を除いて、常に値として@code{nil}を指定したのと同じことになる。重要なキーワードを以下に示す(ネットワークオプションに対応するキーワードを以降のセクションにリストする)。"

#. type: table
#: original_texis/processes.texi:2493
msgid "Use the string @var{name} as the process name.  It is modified if necessary to make it unique."
msgstr "プロセス名として文字列@var{name}を使用する。一意にするために必要に応じて変更され得る。"

#. type: table
#: original_texis/processes.texi:2499
msgid "Specify the communication type.  A value of @code{nil} specifies a stream connection (the default); @code{datagram} specifies a datagram connection; @code{seqpacket} specifies a sequenced packet stream connection.  Both connections and servers can be of these types."
msgstr "コミュニケーションのタイプを指定する。値@code{nil}はストリーム接続(デフォルト)、@code{datagram}はデータグラム接続、@code{seqpacket}はシーケンスパケットストリーム(sequenced packet stream)による接続を指定する。接続およびサーバーの両方でこれらのタイプを指定できる。"

#. type: item
#: original_texis/processes.texi:2500
#, no-wrap
msgid ":server @var{server-flag}"
msgstr ":server @var{server-flag}"

#. type: table
#: original_texis/processes.texi:2505
msgid "If @var{server-flag} is non-@code{nil}, create a server.  Otherwise, create a connection.  For a stream type server, @var{server-flag} may be an integer, which then specifies the length of the queue of pending connections to the server.  The default queue length is 5."
msgstr "@var{server-flag}が非@code{nil}ならサーバー、それ以外なら接続を作成する。ストリームタイプのサーバーでは@var{server-flag}はそのサーバーへの保留中の接続キューの長さを指定する整数を指定できる。キューのデフォルト長は5。"

#. type: item
#: original_texis/processes.texi:2506
#, no-wrap
msgid ":host @var{host}"
msgstr ":host @var{host}"

#. type: table
#: original_texis/processes.texi:2512
msgid "Specify the host to connect to.  @var{host} should be a host name or Internet address, as a string, or the symbol @code{local} to specify the local host.  If you specify @var{host} for a server, it must specify a valid address for the local host, and only clients connecting to that address will be accepted."
msgstr "接続するホストを指定する。@var{host}はホスト名かインターネットアドレスを表す文字列、またはローカルホストを表すシンボル@code{local}であること。サーバーのときに@var{host}を指定する場合には有効なローカルホストのアドレスを指定しなければならず、そのアドレスに接続するクライアントだけが受け入れられるだろう。"

#. type: item
#: original_texis/processes.texi:2513
#, no-wrap
msgid ":service @var{service}"
msgstr ":service @var{service}"

#. type: table
#: original_texis/processes.texi:2519
msgid "@var{service} specifies a port number to connect to; or, for a server, the port number to listen on.  It should be a service name that translates to a port number, or an integer specifying the port number directly.  For a server, it can also be @code{t}, which means to let the system select an unused port number."
msgstr "@var{service}は接続先のポート番号、またはサーバーにたいしてはlistenするポート番号。これはポート番号に変換されるようなサービス名、または直接ポート番号を指定する整数であること。サーバーにたいしては@code{t}も指定でき、これは未使用のポート番号をシステムに選択させることを意味する。"

#. type: item
#: original_texis/processes.texi:2520
#, no-wrap
msgid ":family @var{family}"
msgstr ":family @var{family}"

#. type: table
#: original_texis/processes.texi:2527
msgid "@var{family} specifies the address (and protocol) family for communication.  @code{nil} means determine the proper address family automatically for the given @var{host} and @var{service}.  @code{local} specifies a Unix socket, in which case @var{host} is ignored.  @code{ipv4} and @code{ipv6} specify to use IPv4 and IPv6, respectively."
msgstr "@var{family}は接続のアドレス(またはプロトコル)のファミリーを指定する。@code{nil}は与えられた@var{host}と@var{service}にたいして自動的に適切なアドレスファミリーを決定する。@code{local}はUnixのsocketを指定して、この場合には@var{host}は無視される。@code{ipv4}と@code{ipv6}はそれぞれIPv4とIPv6の使用を指定する。"

#. type: item
#: original_texis/processes.texi:2528
#, no-wrap
msgid ":local @var{local-address}"
msgstr ":local @var{local-address}"

#. type: table
#: original_texis/processes.texi:2532
msgid "For a server process, @var{local-address} is the address to listen on.  It overrides @var{family}, @var{host} and @var{service}, so you might as well not specify them."
msgstr "サーバープロセスでは@var{local-address}はlistenするアドレスである。これは@var{family}、@var{host}、@var{service}をオーバーライドするので、これらを指定しないこともできる。"

#. type: item
#: original_texis/processes.texi:2533
#, no-wrap
msgid ":remote @var{remote-address}"
msgstr ":remote @var{remote-address}"

#. type: table
#: original_texis/processes.texi:2537
msgid "For a connection, @var{remote-address} is the address to connect to.  It overrides @var{family}, @var{host} and @var{service}, so you might as well not specify them."
msgstr "接続プロセスでは@var{remote-address}は接続先のアドレス。これは@var{family}、@var{host}、@var{service}をオーバーライドするので、これらを指定しないこともできる。"

#. type: table
#: original_texis/processes.texi:2540
msgid "For a datagram server, @var{remote-address} specifies the initial setting of the remote datagram address."
msgstr "データグラムサーバーでは@var{remote-address}はリモートデータグラムアドレスの初期セッティングを指定する。"

#. type: table
#: original_texis/processes.texi:2543
msgid "The format of @var{local-address} or @var{remote-address} depends on the address family:"
msgstr "@var{local-address}と@var{remote-address}のフォーマットはアドレスファミリーに依存する:"

#. type: itemize
#: original_texis/processes.texi:2551
msgid "An IPv4 address is represented as a five-element vector of four 8-bit integers and one 16-bit integer @code{[@var{a} @var{b} @var{c} @var{d} @var{p}]} corresponding to numeric IPv4 address @var{a}.@var{b}.@var{c}.@var{d} and port number @var{p}."
msgstr "IPv4アドレスは4つの8ビット整数と1つの16ビット整数からなる5要素のベクター@code{[@var{a} @var{b} @var{c} @var{d} @var{p}]}で表され、それぞれ数値的なIPv4アドレス@var{a}.@var{b}.@var{c}.@var{d}、およびポート番号@var{p}に対応する。"

#. type: itemize
#: original_texis/processes.texi:2558
msgid "An IPv6 address is represented as a nine-element vector of 16-bit integers @code{[@var{a} @var{b} @var{c} @var{d} @var{e} @var{f} @var{g} @var{h} @var{p}]} corresponding to numeric IPv6 address @var{a}:@var{b}:@var{c}:@var{d}:@var{e}:@var{f}:@var{g}:@var{h} and port number @var{p}."
msgstr "IPv6アドレスは9要素の16ビット整数ベクター@code{[@var{a} @var{b} @var{c} @var{d} @var{e} @var{f} @var{g} @var{h} @var{p}]}で表され、それぞれ数値的なIPv６アドレス@var{a}:@var{b}:@var{c}:@var{d}:@var{e}:@var{f}:@var{g}:@var{h}、およびポート番号@var{p}に対応する。"

#. type: itemize
#: original_texis/processes.texi:2562
msgid "A local address is represented as a string, which specifies the address in the local address space."
msgstr "ローカルアドレスはローカルアドレススペース内でアドレスを指定する文字列として表される。"

#. type: itemize
#: original_texis/processes.texi:2570
msgid "An unsupported-family address is represented by a cons @code{(@var{f} . @var{av})}, where @var{f} is the family number and @var{av} is a vector specifying the socket address using one element per address data byte.  Do not rely on this format in portable code, as it may depend on implementation defined constants, data sizes, and data structure alignment."
msgstr "未サポートファミリー(unsupported family)のアドレスはコンスセル@code{(@var{f} . @var{av})}で表される。ここで@var{f}はファミリー名、@var{av}はアドレスデータバイトごとに1つの要素を使用するソケットアドレスを指定するベクター。可搬性のあるコードでこのフォーマットを信頼してはならない。これは実装定義の定数、データサイズ、データ構造のアライメントに依存する可能性があるからだ。"

#. type: item
#: original_texis/processes.texi:2572
#, no-wrap
msgid ":nowait @var{bool}"
msgstr ":nowait @var{bool}"

#. type: table
#: original_texis/processes.texi:2580
msgid "If @var{bool} is non-@code{nil} for a stream connection, return without waiting for the connection to complete.  When the connection succeeds or fails, Emacs will call the sentinel function, with a second argument matching @code{\"open\"} (if successful) or @code{\"failed\"}.  The default is to block, so that @code{make-network-process} does not return until the connection has succeeded or failed."
msgstr "ストリーム接続にたいして@var{bool}が非@code{nil}なら、その接続の完了を待機せずにリターンする。接続の成功や失敗時には、Emacsは@code{\"open\"} (成功時)、または@code{\"failed\"} (失敗時)にマッチするような第2引数によりセンチネル関数を呼び出すだろう。デフォルトではwaitせずにblockするので、@code{make-network-process}はその接続が成功または失敗するまでリターンしない。"

#. type: table
#: original_texis/processes.texi:2584
msgid "If @var{stopped} is non-@code{nil}, start the network connection or server in the stopped state."
msgstr "@var{stopped}が非@code{nil}ならstopped(停止)の状態でネットワーク接続、またはサーバーを開始する。"

#. type: table
#: original_texis/processes.texi:2593
msgid "Use @var{coding} as the coding system for this process.  To specify different coding systems for decoding data from the connection and for encoding data sent to it, specify @code{(@var{decoding} .  @var{encoding})} for @var{coding}."
msgstr "このプロセスにたいするコーディングシステムとして@var{coding}を使用する。接続からのデータのデコードおよび接続への送信データのエンコードに異なるコーディングシステムを指定するには、@var{coding}にたいして@code{(@var{decoding} .  @var{encoding})}と指定する。"

#. type: table
#: original_texis/processes.texi:2596
msgid "If you don't specify this keyword at all, the default is to determine the coding systems from the data."
msgstr "このキーワードをまったく指定しないかった場合のデフォルトは、そのデータからコーディングシステムを判断する。"

#. type: table
#: original_texis/processes.texi:2603
msgid "Initialize the process filter to @var{filter}."
msgstr "プロセスフィルターを@var{filter}に初期化する。"

#. type: item
#: original_texis/processes.texi:2604
#, no-wrap
msgid ":filter-multibyte @var{multibyte}"
msgstr ":filter-multibyte @var{multibyte}"

#. type: table
#: original_texis/processes.texi:2608
msgid "If @var{multibyte} is non-@code{nil}, strings given to the process filter are multibyte, otherwise they are unibyte.  The default is the default value of @code{enable-multibyte-characters}."
msgstr "@var{multibyte}が非@code{nil}ならマルチバイト文字列、それ以外ならユニバイト文字列がプロセスフィルターに与えられるデフォルトは@code{enable-multibyte-characters}のデフォルト値。"

#. type: table
#: original_texis/processes.texi:2611
msgid "Initialize the process sentinel to @var{sentinel}."
msgstr "プロセスセンチネルを@var{sentinel}に初期化する。"

#. type: item
#: original_texis/processes.texi:2612
#, no-wrap
msgid ":log @var{log}"
msgstr ":log @var{log}"

#. type: table
#: original_texis/processes.texi:2620
msgid "Initialize the log function of a server process to @var{log}.  The log function is called each time the server accepts a network connection from a client.  The arguments passed to the log function are @var{server}, @var{connection}, and @var{message}; where @var{server} is the server process, @var{connection} is the new process for the connection, and @var{message} is a string describing what has happened."
msgstr "サーバープロセスのlog関数を@var{log}に初期化する。サーバーがクライアントからネットワーク接続をacceptするたびにそのlog関数が呼び出される。log関数に渡される引数は@var{server}、@var{connection}、@var{message}。ここで@var{server}はサーバープロセス、@var{connection}はその接続にたいする新たなプロセス、@var{message}は何が発生したかを説明する文字列。"

#. type: item
#: original_texis/processes.texi:2621 original_texis/processes.texi:2903
#, no-wrap
msgid ":plist @var{plist}"
msgstr ":plist @var{plist}"

#. type: table
#: original_texis/processes.texi:2623
msgid "Initialize the process plist to @var{plist}."
msgstr "プロセスplistを@var{plist}に初期化する。"

#. type: subsection
#: original_texis/processes.texi:2629 original_texis/processes.texi:2630
#, no-wrap
msgid "Network Options"
msgstr "Network Options"

#. type: Plain text
#: original_texis/processes.texi:2635
msgid "The following network options can be specified when you create a network process.  Except for @code{:reuseaddr}, you can also set or modify these options later, using @code{set-network-process-option}."
msgstr "以下のネットワークオプションはネットワークプロセス作成時に指定できます。@code{:reuseaddr}を除き、@code{set-network-process-option}を使用してこれらのオプションを後からセットや変更することもできます。"

#. type: Plain text
#: original_texis/processes.texi:2640
msgid "For a server process, the options specified with @code{make-network-process} are not inherited by the client connections, so you will need to set the necessary options for each child connection as it is created."
msgstr "サーバープロセスにたいしては、@code{make-network-process}で指定されたオプションはクライアントに継承されないので、子接続が作成されるたびに必要なオプションをセットする必要があるでしょう。"

#. type: item
#: original_texis/processes.texi:2642
#, no-wrap
msgid ":bindtodevice @var{device-name}"
msgstr ":bindtodevice @var{device-name}"

#. type: table
#: original_texis/processes.texi:2647
msgid "If @var{device-name} is a non-empty string identifying a network interface name (see @code{network-interface-list}), only handle packets received on that interface.  If @var{device-name} is @code{nil} (the default), handle packets received on any interface."
msgstr "@var{device-name}がネットワークインターフェースを指定する空でない文字列なら、そのインターフェースで受信したパケットだけを処理する。@var{device-name}が@code{nil}(デフォルト)なら任意のインターフェースが受信したパケットを処理する。"

#. type: table
#: original_texis/processes.texi:2649
msgid "Using this option may require special privileges on some systems."
msgstr "このオプションの使用にたいして特別な特権を要求するシステムがいくつかあるかもしれない。"

#. type: item
#: original_texis/processes.texi:2650
#, no-wrap
msgid ":broadcast @var{broadcast-flag}"
msgstr ":broadcast @var{broadcast-flag}"

#. type: table
#: original_texis/processes.texi:2655
msgid "If @var{broadcast-flag} is non-@code{nil} for a datagram process, the process will receive datagram packet sent to a broadcast address, and be able to send packets to a broadcast address.  This is ignored for a stream connection."
msgstr "データグラムプロセスにたいして@var{broadcast-flag}が非@code{nil}なら、そのプロセスはブロードキャストアドレスに送信されたデータグラムパケットを受信して、ブロードキャストアドレスにパケットを送信できるだろう。これはストリーム接続では無視される。"

#. type: item
#: original_texis/processes.texi:2656
#, no-wrap
msgid ":dontroute @var{dontroute-flag}"
msgstr ":dontroute @var{dontroute-flag}"

#. type: table
#: original_texis/processes.texi:2659
msgid "If @var{dontroute-flag} is non-@code{nil}, the process can only send to hosts on the same network as the local host."
msgstr "@var{dontroute-flag}が非@code{nil}ならプロセスはローカルホストと同一ネットワーク上のホストだけに送信することができる。"

#. type: item
#: original_texis/processes.texi:2660
#, no-wrap
msgid ":keepalive @var{keepalive-flag}"
msgstr ":keepalive @var{keepalive-flag}"

#. type: table
#: original_texis/processes.texi:2663
msgid "If @var{keepalive-flag} is non-@code{nil} for a stream connection, enable exchange of low-level keep-alive messages."
msgstr "ストリーム接続にたいして@var{keepalive-flag}が非@code{nil}なら、低レベルのkeep-aliveメッセージの交換が有効になる。"

#. type: item
#: original_texis/processes.texi:2664
#, no-wrap
msgid ":linger @var{linger-arg}"
msgstr ":linger @var{linger-arg}"

#. type: table
#: original_texis/processes.texi:2672
msgid "If @var{linger-arg} is non-@code{nil}, wait for successful transmission of all queued packets on the connection before it is deleted (see @code{delete-process}).  If @var{linger-arg} is an integer, it specifies the maximum time in seconds to wait for queued packets to be sent before closing the connection.  The default is @code{nil}, which means to discard unsent queued packets when the process is deleted."
msgstr "@var{linger-arg}が非@code{nil}なら、接続を削除(@code{delete-process}を参照)する前にキューされたすべてのパケットの送信が成功するまで待機する。@var{linger-arg}が整数なら、接続クローズ前のキュー済みパケット送信のために待機する最大の秒数を指定する。デフォルトは@code{nil}で、これはプロセス削除時に未送信のキュー済みパケットを破棄することを意味する。"

#. type: item
#: original_texis/processes.texi:2674
#, no-wrap
msgid ":oobinline @var{oobinline-flag}"
msgstr ":oobinline @var{oobinline-flag}"

#. type: table
#: original_texis/processes.texi:2678
msgid "If @var{oobinline-flag} is non-@code{nil} for a stream connection, receive out-of-band data in the normal data stream.  Otherwise, ignore out-of-band data."
msgstr "ストリーム接続にたいして@var{oobinline-flag}が非@code{nil}なら、通常のデータストリーム内の帯域外(out-of-band)データを受信して、それ以外なら帯域外データは破棄する。"

#. type: item
#: original_texis/processes.texi:2679
#, no-wrap
msgid ":priority @var{priority}"
msgstr ":priority @var{priority}"

#. type: table
#: original_texis/processes.texi:2686
msgid "Set the priority for packets sent on this connection to the integer @var{priority}.  The interpretation of this number is protocol specific; such as setting the TOS (type of service) field on IP packets sent on this connection.  It may also have system dependent effects, such as selecting a specific output queue on the network interface."
msgstr "この接続で送信するパケットの優先順位を整数@var{priority}にセットする。たとえばこの接続で送信するIPパケットのTOS(type of service)フィールドにセットする等、この数字の解釈はプロトコルに固有である。またそのネットワークインターフェース上で特定の出力キューを選択する等、これにはシステム依存の効果もある。"

#. type: item
#: original_texis/processes.texi:2687
#, no-wrap
msgid ":reuseaddr @var{reuseaddr-flag}"
msgstr ":reuseaddr @var{reuseaddr-flag}"

#. type: table
#: original_texis/processes.texi:2695
msgid "If @var{reuseaddr-flag} is non-@code{nil} (the default) for a stream server process, allow this server to reuse a specific port number (see @code{:service}), unless another process on this host is already listening on that port.  If @var{reuseaddr-flag} is @code{nil}, there may be a period of time after the last use of that port (by any process on the host) where it is not possible to make a new server on that port."
msgstr "ストリームプロセスサーバーにたいして@var{reuseaddr-flag}が非@code{nil} (デフォルト)なら、そのホスト上の別プロセスがそのポートですでにlistenしていなければ、このサーバーは特定のポート番号(@code{:service}を参照)を再使用できる。@var{reuseaddr-flag}が@code{nil}なら、(そのホスト上の任意のプロセスが)そのポートを最後に使用した後、そのポート上で新たなサーバーを作成するのが不可能となるような一定の期間が存在するかもしれない。"

#. type: defun
#: original_texis/processes.texi:2697
#, no-wrap
msgid "set-network-process-option process option value &optional no-error"
msgstr "set-network-process-option process option value &optional no-error"

#. type: defun
#: original_texis/processes.texi:2704
msgid "This function sets or modifies a network option for network process @var{process}.  The accepted options and values are as for @code{make-network-process}.  If @var{no-error} is non-@code{nil}, this function returns @code{nil} instead of signaling an error if @var{option} is not a supported option.  If the function successfully completes, it returns @code{t}."
msgstr "この関数はネットワークプロセス@var{process}にたいしてネットワークオプションのセットや変更を行う。指定できるオプションは@code{make-network-process}と同様。@var{no-error}が非@code{nil}なら、@var{option}がサポートされないオプションの場合に、この関数はエラーをシグナルせずに@code{nil}をリターンする。この関数が成功裏に完了したら@code{t}をリターンする。"

#. type: defun
#: original_texis/processes.texi:2707
msgid "The current setting of an option is available via the @code{process-contact} function."
msgstr "あるオプションのカレントのセッティングは@code{process-contact}関数を通じて利用できる。"

#. type: node
#: original_texis/processes.texi:2709
#, no-wrap
msgid "Network Feature Testing"
msgstr "Network Feature Testing"

#. type: subsection
#: original_texis/processes.texi:2710
#, no-wrap
msgid "Testing Availability of Network Features"
msgstr "Testing Availability of Network Features"

#. type: Plain text
#: original_texis/processes.texi:2714
msgid "To test for the availability of a given network feature, use @code{featurep} like this:"
msgstr "与えられネットワーク機能が利用可能かテストするためには以下のように@code{featurep}を使用します:"

#. type: example
#: original_texis/processes.texi:2717
#, no-wrap
msgid "(featurep 'make-network-process '(@var{keyword} @var{value}))\n"
msgstr "(featurep 'make-network-process '(@var{keyword} @var{value}))\n"

#. type: Plain text
#: original_texis/processes.texi:2724
msgid "The result of this form is @code{t} if it works to specify @var{keyword} with value @var{value} in @code{make-network-process}.  Here are some of the @var{keyword}---@var{value} pairs you can test in this way."
msgstr "このフォームの結果は@code{make-network-process}内で@var{keyword}に値@var{value}を指定することが機能するなら@code{t}になります。以下はこの方法でテストできる@var{keyword}/@var{value}ペアーのいくつかです。"

#. type: item
#: original_texis/processes.texi:2726
#, no-wrap
msgid "(:nowait t)"
msgstr "(:nowait t)"

#. type: table
#: original_texis/processes.texi:2728
msgid "Non-@code{nil} if non-blocking connect is supported."
msgstr "非ブロッキング接続がサポートされていれば非@code{nil}。"

#. type: item
#: original_texis/processes.texi:2728
#, no-wrap
msgid "(:type datagram)"
msgstr "(:type datagram)"

#. type: table
#: original_texis/processes.texi:2730
msgid "Non-@code{nil} if datagrams are supported."
msgstr "データグラムがサポートされていれば非@code{nil}。"

#. type: item
#: original_texis/processes.texi:2730
#, no-wrap
msgid "(:family local)"
msgstr "(:family local)"

#. type: table
#: original_texis/processes.texi:2732
msgid "Non-@code{nil} if local (a.k.a.@: ``UNIX domain'') sockets are supported."
msgstr "ローカルsocket(別名``UNIX domain'')がサポートされていれば非@code{nil}。"

#. type: item
#: original_texis/processes.texi:2732
#, no-wrap
msgid "(:family ipv6)"
msgstr "(:family ipv6)"

#. type: table
#: original_texis/processes.texi:2734
msgid "Non-@code{nil} if IPv6 is supported."
msgstr "IPv6がサポートされていれば非@code{nil}。"

#. type: item
#: original_texis/processes.texi:2734
#, no-wrap
msgid "(:service t)"
msgstr "(:service t)"

#. type: table
#: original_texis/processes.texi:2736
msgid "Non-@code{nil} if the system can select the port for a server."
msgstr "サーバーにたいしてシステムがポートを選択できれば非@code{nil}。"

#. type: Plain text
#: original_texis/processes.texi:2740
msgid "To test for the availability of a given network option, use @code{featurep} like this:"
msgstr "与えられたネットワークオプションが利用可能かテストするためには、以下のように@code{featurep}を使用します:"

#. type: example
#: original_texis/processes.texi:2743
#, no-wrap
msgid "(featurep 'make-network-process '@var{keyword})\n"
msgstr "(featurep 'make-network-process '@var{keyword})\n"

#. type: Plain text
#: original_texis/processes.texi:2750
msgid "The accepted @var{keyword} values are @code{:bindtodevice}, etc.  For the complete list, @pxref{Network Options}.  This form returns non-@code{nil} if that particular network option is supported by @code{make-network-process} (or @code{set-network-process-option})."
msgstr "指定できる@var{keyword}の値は@code{:bindtodevice}等です。完全なリストは@ref{Network Options}を参照してください。このフォームは@code{make-network-process} (または@code{set-network-process-option})が特定のネットワークオプションをサポートしていれば非@code{nil}をリターンします。"

#. type: section
#: original_texis/processes.texi:2752
#, no-wrap
msgid "Misc Network Facilities"
msgstr "Misc Network Facilities"

#. type: Plain text
#: original_texis/processes.texi:2757
msgid "These additional functions are useful for creating and operating on network connections.  Note that they are supported only on some systems."
msgstr "以下の追加の関数はネットワーク接続の作成や操作に有用です。これらはいくつかのシステムでのみサポートされることに注意してください。"

#. type: defun
#: original_texis/processes.texi:2758
#, no-wrap
msgid "network-interface-list"
msgstr "network-interface-list"

#. type: defun
#: original_texis/processes.texi:2764
msgid "This function returns a list describing the network interfaces of the machine you are using.  The value is an alist whose elements have the form @code{(@var{name} . @var{address})}.  @var{address} has the same form as the @var{local-address} and @var{remote-address} arguments to @code{make-network-process}."
msgstr "この関数は使用しているマシン上のネットワークインターフェースを記述するリストをリターンする。値は要素が@code{(@var{name} . @var{address})}という形式をもつようなalist。@var{address}は@code{make-network-process}の引数@var{local-address}や@var{remote-address}と同じ形式。"

#. type: defun
#: original_texis/processes.texi:2766
#, no-wrap
msgid "network-interface-info ifname"
msgstr "network-interface-info ifname"

#. type: defun
#: original_texis/processes.texi:2770
msgid "This function returns information about the network interface named @var{ifname}.  The value is a list of the form @code{(@var{addr} @var{bcast} @var{netmask} @var{hwaddr} @var{flags})}."
msgstr "この関数は@var{ifname}という名前のネットワークインターフェースに関する情報をリターンする。値は@code{(@var{addr} @var{bcast} @var{netmask} @var{hwaddr} @var{flags})}という形式をもつリスト。"

#. type: item
#: original_texis/processes.texi:2772
#, no-wrap
msgid "addr"
msgstr "addr"

#. type: table
#: original_texis/processes.texi:2774
msgid "The Internet protocol address."
msgstr "インターネットプロトコルアドレス。"

#. type: item
#: original_texis/processes.texi:2774
#, no-wrap
msgid "bcast"
msgstr "bcast"

#. type: table
#: original_texis/processes.texi:2776
msgid "The broadcast address."
msgstr "ブロードキャストアドレス。"

#. type: item
#: original_texis/processes.texi:2776
#, no-wrap
msgid "netmask"
msgstr "netmask"

#. type: table
#: original_texis/processes.texi:2778
msgid "The network mask."
msgstr "ネットワークマスク。"

#. type: item
#: original_texis/processes.texi:2778
#, no-wrap
msgid "hwaddr"
msgstr "hwaddr"

#. type: table
#: original_texis/processes.texi:2780
msgid "The layer 2 address (Ethernet MAC address, for instance)."
msgstr "レイヤー2アドレス(たとえばイーサネットMACアドレス)。"

#. type: item
#: original_texis/processes.texi:2780
#, no-wrap
msgid "flags"
msgstr "flags"

#. type: table
#: original_texis/processes.texi:2782
msgid "The current flags of the interface."
msgstr "そのインターフェースのカレントのフラグ。"

#. type: defun
#: original_texis/processes.texi:2785
#, no-wrap
msgid "format-network-address address &optional omit-port"
msgstr "format-network-address address &optional omit-port"

#. type: defun
#: original_texis/processes.texi:2788
msgid "This function converts the Lisp representation of a network address to a string."
msgstr "この関数はネットワークアドレスのLisp表現を文字列に変換する。"

#. type: defun
#: original_texis/processes.texi:2793
msgid "A five-element vector @code{[@var{a} @var{b} @var{c} @var{d} @var{p}]} represents an IPv4 address @var{a}.@var{b}.@var{c}.@var{d} and port number @var{p}.  @code{format-network-address} converts that to the string @code{\"@var{a}.@var{b}.@var{c}.@var{d}:@var{p}\"}."
msgstr "5要素のベクター@code{[@var{a} @var{b} @var{c} @var{d} @var{p}]}はIPv4アドレス@var{a}.@var{b}.@var{c}.@var{d}、およびポート番号@var{p}を表す。@code{format-network-address}はこれを文字列@code{\\\"@var{a}.@var{b}.@var{c}.@var{d}:@var{p}\\\"}に変換する。"

#. type: defun
#: original_texis/processes.texi:2799
msgid "A nine-element vector @code{[@var{a} @var{b} @var{c} @var{d} @var{e} @var{f} @var{g} @var{h} @var{p}]} represents an IPv6 address along with a port number.  @code{format-network-address} converts that to the string @code{\"[@var{a}:@var{b}:@var{c}:@var{d}:@var{e}:@var{f}:@var{g}:@var{h}]:@var{p}\"}."
msgstr "9要素のベクター@code{[@var{a} @var{b} @var{c} @var{d} @var{e} @var{f} @var{g} @var{h} @var{p}]}はポート番号とともにIPv6アドレスを表す。@code{format-network-address}はこれを文字列@code{\"[@var{a}:@var{b}:@var{c}:@var{d}:@var{e}:@var{f}:@var{g}:@var{h}]:@var{p}\"}に変換する。"

#. type: defun
#: original_texis/processes.texi:2803
msgid "If the vector does not include the port number, @var{p}, or if @var{omit-port} is non-@code{nil}, the result does not include the @code{:@var{p}} suffix."
msgstr "このベクターにポート番号が含まれない、または@var{omit-port}が非@code{nil}なら結果にサフィックス@code{:@var{p}}は含まれない。"

#. type: section
#: original_texis/processes.texi:2806
#, no-wrap
msgid "Communicating with Serial Ports"
msgstr "Communicating with Serial Ports"

#. type: file{#1}
#: original_texis/processes.texi:2807
#, no-wrap
msgid "/dev/tty"
msgstr "/dev/tty"

#. type: file{#1}
#: original_texis/processes.texi:2808
#, no-wrap
msgid "COM1"
msgstr "COM1"

#. type: cindex
#: original_texis/processes.texi:2809
#, no-wrap
msgid "serial connections"
msgstr "serial connections"

#. type: Plain text
#: original_texis/processes.texi:2814
msgid "Emacs can communicate with serial ports.  For interactive use, @kbd{M-x serial-term} opens a terminal window.  In a Lisp program, @code{make-serial-process} creates a process object."
msgstr "Emacsはシリアルポートと対話できます。インタラクティブな@kbd{M-x serial-term}の使用にたいしては端末ウィンドウをオープンして、Lispプログラム@code{make-serial-process}にたいしてはプロセスオブジェクトを作成します。"

#. type: Plain text
#: original_texis/processes.texi:2820
msgid "The serial port can be configured at run-time, without having to close and re-open it.  The function @code{serial-process-configure} lets you change the speed, bytesize, and other parameters.  In a terminal window created by @code{serial-term}, you can click on the mode line for configuration."
msgstr "シリアルポートはクローズと再オープンなしで実行時に設定することができます。関数@code{serial-process-configure}によりスピード、バイトサイズ、およびその他のパラメーターを変更できます。@code{serial-term}で作成された端末ウィンドウではモードラインをクリックして設定を行うことができます。"

#. type: Plain text
#: original_texis/processes.texi:2829
msgid "A serial connection is represented by a process object, which can be used in a similar way to a subprocess or network process.  You can send and receive data, and configure the serial port.  A serial process object has no process ID, however, and you can't send signals to it, and the status codes are different from other types of processes.  @code{delete-process} on the process object or @code{kill-buffer} on the process buffer close the connection, but this does not affect the device connected to the serial port."
msgstr "シリアル接続はプロセスオブジェクトとして表されて、サブプロセスやネットワークプロセスと同様の方法で使用できます。これによりデータの送受信やシリアルポートの設定ができます。しかしシリアルプロセスオブジェクトにプロセスIDはありません。それにたいしてシグナルの送信はできずステータスコードは他のタイプのプロセスオブジェクトとは異なります。プロセスオブジェクトへの@code{delete-process}、またはプロセスバッファーにたいする@code{kill-buffer}は接続をクローズしますが、そのシリアルポートに接続されたデバイスに影響はありません。"

#. type: Plain text
#: original_texis/processes.texi:2832
msgid "The function @code{process-type} returns the symbol @code{serial} for a process object representing a serial port connection."
msgstr "関数@code{process-type}はシリアルポート接続を表すプロセスオブジェクトにたいするシンボル@code{serial}をリターンします。"

#. type: Plain text
#: original_texis/processes.texi:2834
msgid "Serial ports are available on GNU/Linux, Unix, and MS Windows systems."
msgstr "シリアルポートはGNU/LinuxやUnix、そしてMS Windowsのシステムで利用できます。"

#. type: deffn
#: original_texis/processes.texi:2835
#, no-wrap
msgid "Command serial-term port speed"
msgstr "Command serial-term port speed"

#. type: deffn
#: original_texis/processes.texi:2841
msgid "Start a terminal-emulator for a serial port in a new buffer.  @var{port} is the name of the serial port to connect to.  For example, this could be @file{/dev/ttyS0} on Unix.  On MS Windows, this could be @file{COM1}, or @file{\\\\.\\COM10} (double the backslashes in Lisp strings)."
msgstr "新たなバッファー内でシリアルポートにたいする端末エミュレーターを開始する。@var{port}は接続先のシリアルポートの名前。たとえばUnixではこれは@file{/dev/ttyS0}のようになるだろう。MS Windowsでは@file{COM1}や@file{\\\\.\\COM10}のようになるかもしれない(Lisp文字列ではバックスラッシュは2重にすること)。"

#. type: deffn
#: original_texis/processes.texi:2848
msgid "@var{speed} is the speed of the serial port in bits per second.  9600 is a common value.  The buffer is in Term mode; see @ref{Term Mode,,, emacs, The GNU Emacs Manual}, for the commands to use in that buffer.  You can change the speed and the configuration in the mode line menu."
msgstr "@var{speed}はビット毎秒でのシリアルポートのスピード。一般的な値は9600。そのバッファーはTermモードになる。このバッファーで使用するコマンドについては@ref{Term Mode,,, emacs, The GNU Emacs Manual}を参照のこと。モードラインメニューからスピードと設定を変更できる。"

#. type: defun
#: original_texis/processes.texi:2850
#, no-wrap
msgid "make-serial-process &rest args"
msgstr "make-serial-process &rest args"

#. type: defun
#: original_texis/processes.texi:2854
msgid "This function creates a process and a buffer.  Arguments are specified as keyword/argument pairs.  Here's the list of the meaningful keywords, with the first two (@var{port} and @var{speed}) being mandatory:"
msgstr "この関数はプロセスとバッファーを作成する。引数はキーワード/引数ペアーで指定する。以下は意味のあるキーワードのリストで、最初の2つ(@var{port}と@var{speed})は必須:"

#. type: itemx
#: original_texis/processes.texi:2856 original_texis/processes.texi:2941
#, no-wrap
msgid ":port @var{port}"
msgstr ":port @var{port}"

#. type: table
#: original_texis/processes.texi:2861
msgid "This is the name of the serial port.  On Unix and GNU systems, this is a file name such as @file{/dev/ttyS0}.  On Windows, this could be @file{COM1}, or @file{\\\\.\\COM10} for ports higher than @file{COM9} (double the backslashes in Lisp strings)."
msgstr "これはシリアルポートの名前。UnixやGNUシステムでは@file{/dev/ttyS0}のようなファイル名、Windowsでは@file{COM1}、@file{COM9}より高位のポートでは@file{\\\\.\\COM10}のようになるかもしれない(Lisp文字列ではバックスラッシュは2重にすること)。"

#. type: item
#: original_texis/processes.texi:2862 original_texis/processes.texi:2946
#, no-wrap
msgid ":speed @var{speed}"
msgstr ":speed @var{speed}"

#. type: table
#: original_texis/processes.texi:2866
msgid "The speed of the serial port in bits per second.  This function calls @code{serial-process-configure} to handle the speed; see the following documentation of that function for more details."
msgstr "ビット毎秒でのシリアルポートのスピード。この関数は@code{serial-process-configure}を呼び出すことによりスピードを操作する。この関数の更なる詳細については以降のドキュメントを参照のこと。"

#. type: table
#: original_texis/processes.texi:2870
msgid "The name of the process.  If @var{name} is not given, @var{port} will serve as the process name as well."
msgstr "そのプロセスの名前。@var{name}が与えられなければ@var{port}がプロセス名の役目も同様に果たす。"

#. type: table
#: original_texis/processes.texi:2878
msgid "The buffer to associate with the process.  The value can be either a buffer or a string that names a buffer.  Process output goes at the end of that buffer, unless you specify an output stream or filter function to handle the output.  If @var{buffer} is not given, the process buffer's name is taken from the value of the @code{:name} keyword."
msgstr "そのプロセスに関連付けられたバッファー。値はバッファー、またはそれがバッファーの名前であるような文字列かもしれない。出力を処理するために出力ストリームやフィルター関数を指定しなければ、プロセス出力はそのバッファーの終端に出力される。@var{buffer}が与えられなければ、そのプロセスバッファーの名前は@code{:name}キーワードから取得される。"

#. type: table
#: original_texis/processes.texi:2885
msgid "If @var{coding} is a symbol, it specifies the coding system used for both reading and writing for this process.  If @var{coding} is a cons @code{(@var{decoding} . @var{encoding})}, @var{decoding} is used for reading, and @var{encoding} is used for writing.  If not specified, the default is to determine the coding systems from the data itself."
msgstr "@var{coding}はこのプロセスにたいする読み書きに使用されるコーディングシステムを指定する。@var{coding}がコンス@code{(@var{decoding} . @var{encoding})}なら読み取りに@var{decoding}、書き込みには@var{encoding}が使用される。指定されない場合のデフォルトはデータ自身から判断されるコーディングシステム。"

#. type: table
#: original_texis/processes.texi:2889
msgid "Initialize the process query flag to @var{query-flag}.  @xref{Query Before Exit}.  The flags defaults to @code{nil} if unspecified."
msgstr "プロセスqueryフラグを@var{query-flag}に初期化する。@ref{Query Before Exit}を参照のこと。未指定の場合のフラグのデフォルトは@code{nil}。"

#. type: item
#: original_texis/processes.texi:2890
#, no-wrap
msgid ":stop @var{bool}"
msgstr ":stop @var{bool}"

#. type: table
#: original_texis/processes.texi:2896
msgid "Start process in the stopped state if @var{bool} is non-@code{nil}.  In the stopped state, a serial process does not accept incoming data, but you can send outgoing data.  The stopped state is cleared by @code{continue-process} and set by @code{stop-process}."
msgstr "@var{bool}が非@code{nil}ならstoppedの状態でプロセスを開始する。stopped状態ではシリアルプロセスは入力データを受け付けないが出力データの送信は可能。stopped状態のクリアーは@code{continue-process}、セットは@code{stop-process}で行う。"

#. type: table
#: original_texis/processes.texi:2899
msgid "Install @var{filter} as the process filter."
msgstr "プロセスフィルターとして@var{filter}をインストールする。"

#. type: table
#: original_texis/processes.texi:2902
msgid "Install @var{sentinel} as the process sentinel."
msgstr "プロセスセンチネルとして@var{sentinel}をインストールする。"

#. type: table
#: original_texis/processes.texi:2905
msgid "Install @var{plist} as the initial plist of the process."
msgstr "プロセスの初期plistとして@var{plist}をインストールする。"

#. type: item
#: original_texis/processes.texi:2906
#, no-wrap
msgid ":bytesize"
msgstr ":bytesize"

#. type: itemx
#: original_texis/processes.texi:2907
#, no-wrap
msgid ":parity"
msgstr ":parity"

#. type: itemx
#: original_texis/processes.texi:2908
#, no-wrap
msgid ":stopbits"
msgstr ":stopbits"

#. type: itemx
#: original_texis/processes.texi:2909
#, no-wrap
msgid ":flowcontrol"
msgstr ":flowcontrol"

#. type: table
#: original_texis/processes.texi:2912
msgid "These are handled by @code{serial-process-configure}, which is called by @code{make-serial-process}."
msgstr "これらは@code{make-serial-process}が呼び出す@code{serial-process-configure}により処理される。"

#. type: defun
#: original_texis/processes.texi:2916
msgid "The original argument list, possibly modified by later configuration, is available via the function @code{process-contact}."
msgstr "後の設定により変更され得るオリジナルの引数リストは関数@code{process-contact}を通じて利用可能。"

#. type: defun
#: original_texis/processes.texi:2918
msgid "Here is an example:"
msgstr "以下は例:"

#. type: example
#: original_texis/processes.texi:2921
#, no-wrap
msgid "(make-serial-process :port \"/dev/ttyS0\" :speed 9600)\n"
msgstr "(make-serial-process :port \"/dev/ttyS0\" :speed 9600)\n"

#. type: defun
#: original_texis/processes.texi:2924
#, no-wrap
msgid "serial-process-configure &rest args"
msgstr "serial-process-configure &rest args"

#. type: cindex
#: original_texis/processes.texi:2925
#, no-wrap
msgid "baud, in serial connections"
msgstr "baud, in serial connections"

#. type: cindex
#: original_texis/processes.texi:2926
#, no-wrap
msgid "bytesize, in serial connections"
msgstr "bytesize, in serial connections"

#. type: cindex
#: original_texis/processes.texi:2927
#, no-wrap
msgid "parity, in serial connections"
msgstr "parity, in serial connections"

#. type: cindex
#: original_texis/processes.texi:2928
#, no-wrap
msgid "stopbits, in serial connections"
msgstr "stopbits, in serial connections"

#. type: cindex
#: original_texis/processes.texi:2929
#, no-wrap
msgid "flowcontrol, in serial connections"
msgstr "flowcontrol, in serial connections"

#. type: defun
#: original_texis/processes.texi:2936
msgid "This function configures a serial port connection.  Arguments are specified as keyword/argument pairs.  Attributes that are not given are re-initialized from the process's current configuration (available via the function @code{process-contact}), or set to reasonable default values.  The following arguments are defined:"
msgstr "この関数はシリアルポート接続を設定する。引数はキーワード/引数ペアーで指定する。与えられない属性はそのプロセスのカレントの設定(関数@code{process-contact}を通じて利用可能)から再初期化されるか、妥当なデフォルトにセットされる。以下の引数が定義されている:"

#. type: item
#: original_texis/processes.texi:2938
#, no-wrap
msgid ":process @var{process}"
msgstr ":process @var{process}"

#. type: table
#: original_texis/processes.texi:2945
msgid "Any of these arguments can be given to identify the process that is to be configured.  If none of these arguments is given, the current buffer's process is used."
msgstr "設定するプロセスを識別するために、これらの引数のいずれかが与えられる。これらの引数が何も与えられなければカレントバッファーのプロセスが使用される。"

#. type: table
#: original_texis/processes.texi:2957
msgid "The speed of the serial port in bits per second, a.k.a.@: @dfn{baud rate}.  The value can be any number, but most serial ports work only at a few defined values between 1200 and 115200, with 9600 being the most common value.  If @var{speed} is @code{nil}, the function ignores all other arguments and does not configure the port.  This may be useful for special serial ports such as Bluetooth-to-serial converters, which can only be configured through @samp{AT} commands sent through the connection.  The value of @code{nil} for @var{speed} is valid only for connections that were already opened by a previous call to @code{make-serial-process} or @code{serial-term}."
msgstr "ビット毎秒、別名@dfn{ボーレート(baud rate)}によるシリアルポートのスピード。値には任意の数字が可能だが、ほとんどのシリアルポートは1200から115200の間の数少ない定義済みの値でのみ機能して、もっとも一般的な値は9600。@var{speed}が@code{nil}なら、この関数は他のすべての引数を無視してそのポートを設定しない。これは接続を通じて送信された@samp{AT}コマンドでのみ設定可能な、Bluetooth/シリアル変換アダプターのような特殊なシリアルポートで有用かもしれない。@var{speed}にたいする値@code{nil}は@code{make-serial-process}か@code{serial-term}の呼び出しにより、すでにオープン済みの接続にたいしてのみ有効。"

#. type: item
#: original_texis/processes.texi:2958
#, no-wrap
msgid ":bytesize @var{bytesize}"
msgstr ":bytesize @var{bytesize}"

#. type: table
#: original_texis/processes.texi:2961
msgid "The number of bits per byte, which can be 7 or 8.  If @var{bytesize} is not given or @code{nil}, it defaults to 8."
msgstr "ビット/バイトでの数値で7か8を指定できる。@var{bytesize}が与えられない、または@code{nil}の場合のデフォルトは8。"

#. type: item
#: original_texis/processes.texi:2962
#, no-wrap
msgid ":parity @var{parity}"
msgstr ":parity @var{parity}"

#. type: table
#: original_texis/processes.texi:2966
msgid "The value can be @code{nil} (don't use parity), the symbol @code{odd} (use odd parity), or the symbol @code{even} (use even parity).  If @var{parity} is not given, it defaults to no parity."
msgstr "値には@code{nil} (パリティなし)、シンボル@code{odd} (奇数パリティ)、シンボル@code{even} (偶数パリティ)を指定できる。@var{parity}が与えられない場合のデフォルトはパリティなし。"

#. type: item
#: original_texis/processes.texi:2967
#, no-wrap
msgid ":stopbits @var{stopbits}"
msgstr ":stopbits @var{stopbits}"

#. type: table
#: original_texis/processes.texi:2971
msgid "The number of stopbits used to terminate a transmission of each byte.  @var{stopbits} can be 1 or 2.  If @var{stopbits} is not given or @code{nil}, it defaults to 1."
msgstr "各バイトの送信を終了するために使用されるストップビットの数値。@var{stopbits}には1か2が可能。@var{stopbits}が与えられない、または@code{nil}の場合のデフォルトは1。"

#. type: item
#: original_texis/processes.texi:2972
#, no-wrap
msgid ":flowcontrol @var{flowcontrol}"
msgstr ":flowcontrol @var{flowcontrol}"

#. type: table
#: original_texis/processes.texi:2978
msgid "The type of flow control to use for this connection, which is either @code{nil} (don't use flow control), the symbol @code{hw} (use RTS/CTS hardware flow control), or the symbol @code{sw} (use XON/XOFF software flow control).  If @var{flowcontrol} is not given, it defaults to no flow control."
msgstr "この接続にたいして使用するフロー制御のタイプで@code{nil} (フロー制御を使用しない)、シンボル@code{hw} (RTS/CTSハードウェアフロー制御)、シンボル@code{sw} (XON/XOFFソフトウェアフロー制御)のいずれか。@var{flowcontrol}が与えられない場合のデフォルトはフロー制御なし。"

#. type: defun
#: original_texis/processes.texi:2983
msgid "Internally, @code{make-serial-process} calls @code{serial-process-configure} for the initial configuration of the serial port."
msgstr "シリアルポートの初期設定のために@code{make-serial-process}は内部的に@code{serial-process-configure}を呼び出す。"

#. type: section
#: original_texis/processes.texi:2986
#, no-wrap
msgid "Packing and Unpacking Byte Arrays"
msgstr "Packing and Unpacking Byte Arrays"

#. type: cindex
#: original_texis/processes.texi:2987
#, no-wrap
msgid "byte packing and unpacking"
msgstr "byte packing and unpacking"

#. type: Plain text
#: original_texis/processes.texi:2998
msgid "This section describes how to pack and unpack arrays of bytes, usually for binary network protocols.  These functions convert byte arrays to alists, and vice versa.  The byte array can be represented as a unibyte string or as a vector of integers, while the alist associates symbols either with fixed-size objects or with recursive sub-alists.  To use the functions referred to in this section, load the @code{bindat} library."
msgstr "このセクションでは通常はバイナリーのネットワークプロトコル用のバイト配列をpackやunpackする方法を説明します。以下の関数はバイト配列とalistとの間で相互に変換を行います。バイト配列はユニバイト文字列、または整数ベクターとして表現することができます。一方でalistはシンボルを固定サイズのオブジェクト、または再帰的な副alistのいずれかに関連付けます。このセクションで参照する関数を使用するためには@code{bindat}ライブラリーをロードしてください。"

#. type: cindex
#: original_texis/processes.texi:2999
#, no-wrap
msgid "serializing"
msgstr "serializing"

#. type: cindex
#: original_texis/processes.texi:3000
#, no-wrap
msgid "deserializing"
msgstr "deserializing"

#. type: cindex
#: original_texis/processes.texi:3001
#, no-wrap
msgid "packing"
msgstr "packing"

#. type: cindex
#: original_texis/processes.texi:3002
#, no-wrap
msgid "unpacking"
msgstr "unpacking"

#. type: Plain text
#: original_texis/processes.texi:3006
msgid "Conversion from byte arrays to nested alists is also known as @dfn{deserializing} or @dfn{unpacking}, while going in the opposite direction is also known as @dfn{serializing} or @dfn{packing}."
msgstr "バイト配列からネストされたalistへの変換は逆方向への変換が@dfn{シリアライズ化(serializing)}または@dfn{pack化(packing)}として呼ばれることから、@dfn{非シリアル化【deserializing)}または@dfn{unpack化(unpacking)}として知られています。"

#. type: node
#: original_texis/processes.texi:3011 original_texis/processes.texi:3013
#, no-wrap
msgid "Bindat Spec"
msgstr "Bindat Spec"

#. type: menuentry
#: original_texis/processes.texi:3011
msgid "Describing data layout."
msgstr "データレイアウトの記述。"

#. type: node
#: original_texis/processes.texi:3011 original_texis/processes.texi:3186
#, no-wrap
msgid "Bindat Functions"
msgstr "Bindat Functions"

#. type: menuentry
#: original_texis/processes.texi:3011
msgid "Doing the unpacking and packing."
msgstr "unpack化とpack化を行う。"

#. type: node
#: original_texis/processes.texi:3011 original_texis/processes.texi:3254
#, no-wrap
msgid "Bindat Examples"
msgstr "Bindat Examples"

#. type: menuentry
#: original_texis/processes.texi:3011
msgid "Samples of what bindat.el can do for you!"
msgstr "bindat.elが行えることのサンプル。"

#. type: subsection
#: original_texis/processes.texi:3014
#, no-wrap
msgid "Describing Data Layout"
msgstr "Describing Data Layout"

#. type: Plain text
#: original_texis/processes.texi:3022
msgid "To control unpacking and packing, you write a @dfn{data layout specification}, a special nested list describing named and typed @dfn{fields}.  This specification controls the length of each field to be processed, and how to pack or unpack it.  We normally keep bindat specs in variables whose names end in @samp{-bindat-spec}; that kind of name is automatically recognized as risky."
msgstr "unpackとpackを制御するためには@dfn{データレイアウト仕様(data layout specification)}を記述します。これは名前付きかつタイプ付けされた@dfn{フィールド(field)}を記述する特別なネスト化リストです。これは処理する各フィールドの長さ、およびそれをpackおよびunpackする方法を制御します。わたしたちは名前が@samp{-bindat-spec}で終わる変数ではbindatの仕様を遵守します。この類の変数名は自動的にrisky(危険)だと認識されます。"

#. type: cindex
#: original_texis/processes.texi:3023
#, no-wrap
msgid "endianness"
msgstr "endianness"

#. type: cindex
#: original_texis/processes.texi:3024
#, no-wrap
msgid "big endian"
msgstr "big endian"

#. type: cindex
#: original_texis/processes.texi:3025
#, no-wrap
msgid "little endian"
msgstr "little endian"

#. type: cindex
#: original_texis/processes.texi:3026
#, no-wrap
msgid "network byte ordering"
msgstr "network byte ordering"

#. type: Plain text
#: original_texis/processes.texi:3035
msgid "A field's @dfn{type} describes the size (in bytes) of the object that the field represents and, in the case of multibyte fields, how the bytes are ordered within the field.  The two possible orderings are @dfn{big endian} (also known as ``network byte ordering'') and @dfn{little endian}.  For instance, the number @code{#x23cd} (decimal 9165) in big endian would be the two bytes @code{#x23} @code{#xcd}; and in little endian, @code{#xcd} @code{#x23}.  Here are the possible type values:"
msgstr "フィールドの@dfn{タイプ(type)}はフィールドが表すオブジェクトのサイズ(バイト単位)、およびそれがマルチバイトフィールドならフィールがバイトオーダーされる方法を記述します。可能なオーダーはビッグエンディアン(big endian。ネットワークバイトオーダーとも呼ばれる)、およびリトルエンディアン(little endian)の2つです。たとえば数字@code{#x23cd} (10進の9165)のビッグエンディアンは@code{#x23} @code{#xcd}の2バイト、リトルエンディアンは@code{#xcd} @code{#x23}になるでしょう。以下は可能なタイプの値です:"

#. type: item
#: original_texis/processes.texi:3037
#, no-wrap
msgid "u8"
msgstr "u8"

#. type: itemx
#: original_texis/processes.texi:3038
#, no-wrap
msgid "byte"
msgstr "byte"

#. type: table
#: original_texis/processes.texi:3040
msgid "Unsigned byte, with length 1."
msgstr "長さ1の符号なしタイプ。"

#. type: item
#: original_texis/processes.texi:3041
#, no-wrap
msgid "u16"
msgstr "u16"

#. type: itemx
#: original_texis/processes.texi:3042
#, no-wrap
msgid "word"
msgstr "word"

#. type: itemx
#: original_texis/processes.texi:3043
#, no-wrap
msgid "short"
msgstr "short"

#. type: table
#: original_texis/processes.texi:3045
msgid "Unsigned integer in network byte order, with length 2."
msgstr "長さ2のネットワークバイトオーダーによる符号なし整数。"

#. type: item
#: original_texis/processes.texi:3046
#, no-wrap
msgid "u24"
msgstr "u24"

#. type: table
#: original_texis/processes.texi:3048
msgid "Unsigned integer in network byte order, with length 3."
msgstr "長さ3のネットワークバイトオーダーによる符号なし整数。"

#. type: item
#: original_texis/processes.texi:3049
#, no-wrap
msgid "u32"
msgstr "u32"

#. type: itemx
#: original_texis/processes.texi:3050
#, no-wrap
msgid "dword"
msgstr "dword"

#. type: itemx
#: original_texis/processes.texi:3051
#, no-wrap
msgid "long"
msgstr "long"

#. type: table
#: original_texis/processes.texi:3054
msgid "Unsigned integer in network byte order, with length 4.  Note: These values may be limited by Emacs's integer implementation limits."
msgstr "長さ4のネットワークバイトオーダーによる符号なし整数。注意: これらの値はEmacsの整数の実装に制限されるだろう。"

#. type: item
#: original_texis/processes.texi:3055
#, no-wrap
msgid "u16r"
msgstr "u16r"

#. type: itemx
#: original_texis/processes.texi:3056
#, no-wrap
msgid "u24r"
msgstr "u24r"

#. type: itemx
#: original_texis/processes.texi:3057
#, no-wrap
msgid "u32r"
msgstr "u32r"

#. type: table
#: original_texis/processes.texi:3059
msgid "Unsigned integer in little endian order, with length 2, 3 and 4, respectively."
msgstr "それぞれ長さ2、3、4のリトルエンディアンオーダーによる符号なし整数。"

#. type: item
#: original_texis/processes.texi:3060
#, no-wrap
msgid "str @var{len}"
msgstr "str @var{len}"

#. type: table
#: original_texis/processes.texi:3062
msgid "String of length @var{len}."
msgstr "長さ@var{len}の文字列。"

#. type: item
#: original_texis/processes.texi:3063
#, no-wrap
msgid "strz @var{len}"
msgstr "strz @var{len}"

#. type: table
#: original_texis/processes.texi:3065
msgid "Zero-terminated string, in a fixed-size field with length @var{len}."
msgstr "長さ@var{len}の固定長フィールド内のNUL終端された文字列。"

#. type: item
#: original_texis/processes.texi:3066
#, no-wrap
msgid "vec @var{len} [@var{type}]"
msgstr "vec @var{len} [@var{type}]"

#. type: table
#: original_texis/processes.texi:3070
msgid "Vector of @var{len} elements of type @var{type}, defaulting to bytes.  The @var{type} is any of the simple types above, or another vector specified as a list of the form @code{(vec @var{len} [@var{type}])}."
msgstr "タイプ@var{type} (デフォルトはbyte)の@var{len}要素のベクター。@var{type}は上述した単純なタイプのいずれか、あるいは@code{(vec @var{len} [@var{type}])}という形式のリストによる別ベクターの指定。"

#. type: item
#: original_texis/processes.texi:3071
#, no-wrap
msgid "ip"
msgstr "ip"

#. type: table
#: original_texis/processes.texi:3075
msgid "Four-byte vector representing an Internet address.  For example: @code{[127 0 0 1]} for localhost."
msgstr "インターネットアドレスを表す4つのbyteのベクター。たとえばlocalhostは@code{[127 0 0 1]}。"

#. type: item
#: original_texis/processes.texi:3076
#, no-wrap
msgid "bits @var{len}"
msgstr "bits @var{len}"

#. type: table
#: original_texis/processes.texi:3082
msgid "List of set bits in @var{len} bytes.  The bytes are taken in big endian order and the bits are numbered starting with @code{8 * @var{len} @minus{} 1} and ending with zero.  For example: @code{bits 2} unpacks @code{#x28} @code{#x1c} to @code{(2 3 4 11 13)} and @code{#x1c} @code{#x28} to @code{(3 5 10 11 12)}."
msgstr "@var{len}バイト内のセットされたビット位置のリスト。バイトはビッグエンディアンでビット位置は@code{8 * @var{len} @minus{} 1}で始まり0で終わるよう番号が付与される。たとえば@code{bits 2}では、@code{#x28} @code{#x1c}は@code{(2 3 4 11 13)}、@code{#x1c} @code{#x28}は@code{(3 5 10 11 12)}にunpackされる。"

#. type: item
#: original_texis/processes.texi:3083
#, no-wrap
msgid "(eval @var{form})"
msgstr "(eval @var{form})"

#. type: table
#: original_texis/processes.texi:3087
msgid "@var{form} is a Lisp expression evaluated at the moment the field is unpacked or packed.  The result of the evaluation should be one of the above-listed type specifications."
msgstr "@var{form}はフィールドがpackやunpackされた瞬間に評価されるLisp式。評価した結果は上記にリストしたタイプ使用のいずれかであること。"

#. type: Plain text
#: original_texis/processes.texi:3091
msgid "For a fixed-size field, the length @var{len} is given as an integer specifying the number of bytes in the field."
msgstr "固定長フィールドでは長さ@var{len}がフィールド内のバイト数を指定する整数として与えられます。"

#. type: Plain text
#: original_texis/processes.texi:3098
msgid "When the length of a field is not fixed, it typically depends on the value of a preceding field.  In this case, the length @var{len} can be given either as a list @code{(@var{name} ...)} identifying a @dfn{field name} in the format specified for @code{bindat-get-field} below, or by an expression @code{(eval @var{form})} where @var{form} should evaluate to an integer, specifying the field length."
msgstr "フィールド長が固定でなければ通常は先行するフィールドの値に依存します。この場合には長さ@var{len}は後述の@code{bindat-get-field}のフォーマット指定により@dfn{フィールド名(field name)}を指定するリスト@code{(@var{name} ...)}、または式@code{(eval @var{form})} (@var{form}はフィールド長を指定する整数に評価されること)のいずれかで与えることもできます。"

#. type: Plain text
#: original_texis/processes.texi:3105
msgid "A field specification generally has the form @code{([@var{name}] @var{handler})}, where @var{name} is optional.  Don't use names that are symbols meaningful as type specifications (above) or handler specifications (below), since that would be ambiguous.  @var{name} can be a symbol or an expression @code{(eval @var{form})}, in which case @var{form} should evaluate to a symbol."
msgstr "フィールド仕様は一般的に@code{([@var{name}] @var{handler})}という形式をもち、@var{name}はオプションです。紛らわしくなるのでタイプ仕様(上述)やハンドラー仕様(後述)で意味をもつシンボルの名前は使用しないでください。@var{name}はシンボルまたは式@code{(eval @var{form})}でもよく、この場合には@var{form}はシンボルに評価される必要があります。"

#. type: Plain text
#: original_texis/processes.texi:3108
msgid "@var{handler} describes how to unpack or pack the field and can be one of the following:"
msgstr "@var{handler}はそのフィールドがpackやunpackされる方法を記述して、以下のいずれかを指定できます:"

#. type: var{#1}
#: original_texis/processes.texi:3110
#, no-wrap
msgid "type"
msgstr "type"

#. type: table
#: original_texis/processes.texi:3112
msgid "Unpack/pack this field according to the type specification @var{type}."
msgstr "タイプ仕様@var{type}に応じてこのフィールドのunpack/packを行う。"

#. type: item
#: original_texis/processes.texi:3113
#, no-wrap
msgid "eval @var{form}"
msgstr "eval @var{form}"

#. type: table
#: original_texis/processes.texi:3116
msgid "Evaluate @var{form}, a Lisp expression, for side-effect only.  If the field name is specified, the value is bound to that field name."
msgstr "副作用のためだけにLisp式@var{form}を評価する。フィールド名が指定されたら値はそのフィールド名にバインドされる。"

#. type: item
#: original_texis/processes.texi:3117
#, no-wrap
msgid "fill @var{len}"
msgstr "fill @var{len}"

#. type: table
#: original_texis/processes.texi:3121
msgid "Skip @var{len} bytes.  In packing, this leaves them unchanged, which normally means they remain zero.  In unpacking, this means they are ignored."
msgstr "@var{len}バイトをスキップする。pack化ではそれらを未変更のままとして、通常それらは0のままとなることを意味する。unpack化ではそれらが無視されることを意味する。"

#. type: item
#: original_texis/processes.texi:3122
#, no-wrap
msgid "align @var{len}"
msgstr "align @var{len}"

#. type: table
#: original_texis/processes.texi:3124
msgid "Skip to the next multiple of @var{len} bytes."
msgstr "@var{len}バイトの次の倍数にスキップする。"

#. type: item
#: original_texis/processes.texi:3125
#, no-wrap
msgid "struct @var{spec-name}"
msgstr "struct @var{spec-name}"

#. type: table
#: original_texis/processes.texi:3128
msgid "Process @var{spec-name} as a sub-specification.  This describes a structure nested within another structure."
msgstr "副仕様(sub-specification)として@var{spec-name}を処理する。これは別の構造体内にネストされる構造体を記述する。"

#. type: item
#: original_texis/processes.texi:3129
#, no-wrap
msgid "union @var{form} (@var{tag} @var{spec})@dots{}"
msgstr "union @var{form} (@var{tag} @var{spec})@dots{}"

#. type: table
#: original_texis/processes.texi:3135
msgid "Evaluate @var{form}, a Lisp expression, find the first @var{tag} that matches it, and process its associated data layout specification @var{spec}.  Matching can occur in one of three ways:"
msgstr "Lisp式@var{form}を評価、それにマッチする最初の@var{tag}を探して、それに関連付けられたレイアウト仕様@var{spec}を処理する。マッチングは以下の3つのいずれかで発生し得る:"

#. type: itemize
#: original_texis/processes.texi:3141
msgid "If a @var{tag} has the form @code{(eval @var{expr})}, evaluate @var{expr} with the variable @code{tag} dynamically bound to the value of @var{form}.  A non-@code{nil} result indicates a match."
msgstr "@var{tag}が@code{(eval @var{expr})}という形式をもつ場合には、変数@code{tag}を動的に@var{form}の値にバインドして@var{expr}を評価する。結果が非@code{nil}ならマッチを示す。"

#. type: itemize
#: original_texis/processes.texi:3144
msgid "@var{tag} matches if it is @code{equal} to the value of @var{form}."
msgstr "@var{tag}が@var{form}の値と@code{equal}ならマッチ。"

#. type: itemize
#: original_texis/processes.texi:3147
msgid "@var{tag} matches unconditionally if it is @code{t}."
msgstr "@var{tag}が@code{t}なら無条件にマッチ。"

#. type: item
#: original_texis/processes.texi:3149
#, no-wrap
msgid "repeat @var{count} @var{field-specs}@dots{}"
msgstr "repeat @var{count} @var{field-specs}@dots{}"

#. type: table
#: original_texis/processes.texi:3156
msgid "Process the @var{field-specs} recursively, in order, then repeat starting from the first one, processing all the specifications @var{count} times overall.  The @var{count} is given using the same formats as a field length---if an @code{eval} form is used, it is evaluated just once.  For correct operation, each specification in @var{field-specs} must include a name."
msgstr "@var{field-specs}を再帰的に順次処理した後に、最初のものから繰り返して、すべての仕様全体を@var{count}回処理する。@var{count}はフィールド長と同じフォーマットを使用して与えられる。@code{eval}フォームが使用された場合には1回だけ評価される。正しく処理されるためには、@var{field-specs}内の各仕様が名前を含まなければならない。"

#. type: Plain text
#: original_texis/processes.texi:3161
msgid "For the @code{(eval @var{form})} forms used in a bindat specification, the @var{form} can access and update these dynamically bound variables during evaluation:"
msgstr "bindat仕様内で仕様される@code{(eval @var{form})}フォームでは、評価の間に@var{form}はこれらの動的にバインドされた変数へのアクセスと更新が可能である。"

#. type: item
#: original_texis/processes.texi:3163
#, no-wrap
msgid "last"
msgstr "last"

#. type: table
#: original_texis/processes.texi:3165
msgid "Value of the last field processed."
msgstr "最後に処理されたフィールドの値。"

#. type: item
#: original_texis/processes.texi:3166
#, no-wrap
msgid "bindat-raw"
msgstr "bindat-raw"

#. type: table
#: original_texis/processes.texi:3168
msgid "The data as a byte array."
msgstr "バイト配列のデータ。"

#. type: item
#: original_texis/processes.texi:3169
#, no-wrap
msgid "bindat-idx"
msgstr "bindat-idx"

#. type: table
#: original_texis/processes.texi:3171
msgid "Current index (within @code{bindat-raw}) for unpacking or packing."
msgstr "unpack化/pack化にたいする、(@code{bindat-raw}での)カレントインデックス。"

#. type: item
#: original_texis/processes.texi:3172
#, no-wrap
msgid "struct"
msgstr "struct"

#. type: table
#: original_texis/processes.texi:3176
msgid "The alist containing the structured data that have been unpacked so far, or the entire structure being packed.  You can use @code{bindat-get-field} to access specific fields of this structure."
msgstr "これまでにunpackされた構造化データ、またはpackされた構造体全体を含むalist。この構造体の特定のフィールドにアクセスするために@code{bindat-get-field}を使用できる。"

#. type: item
#: original_texis/processes.texi:3177
#, no-wrap
msgid "count"
msgstr "count"

#. type: itemx
#: original_texis/processes.texi:3178
#, no-wrap
msgid "index"
msgstr "index"

#. type: table
#: original_texis/processes.texi:3184
msgid "Inside a @code{repeat} block, these contain the maximum number of repetitions (as specified by the @var{count} parameter), and the current repetition number (counting from 0).  Setting @code{count} to zero will terminate the inner-most repeat block after the current repetition has completed."
msgstr "@code{repeat}ブロック内部では、これらは(@var{count}パラメーターで指定された)繰り返しの最大回数、および(0から数えた)カレント繰り返し回数を含む。@code{count}を0にセットすることにより、カレントの繰り返し終了後に最内繰り返しブロックを終了する。"

#. type: subsection
#: original_texis/processes.texi:3187
#, no-wrap
msgid "Functions to Unpack and Pack Bytes"
msgstr "Functions to Unpack and Pack Bytes"

#. type: Plain text
#: original_texis/processes.texi:3192
msgid "In the following documentation, @var{spec} refers to a data layout specification, @code{bindat-raw} to a byte array, and @var{struct} to an alist representing unpacked field data."
msgstr "以降のドキュメントでは@var{spec}はデータレイアウト仕様、@code{bindat-raw}はバイト配列、@var{struct}はunpackされたフィールドデータを表すalistを参照します。"

#. type: defun
#: original_texis/processes.texi:3193
#, no-wrap
msgid "bindat-unpack spec bindat-raw &optional bindat-idx"
msgstr "bindat-unpack spec bindat-raw &optional bindat-idx"

#. type: defun
#: original_texis/processes.texi:3200
msgid "This function unpacks data from the unibyte string or byte array @code{bindat-raw} according to @var{spec}.  Normally, this starts unpacking at the beginning of the byte array, but if @var{bindat-idx} is non-@code{nil}, it specifies a zero-based starting position to use instead."
msgstr "この関数はユニバイト文字列、またはバイト配列@code{bindat-raw}のデータを@var{spec}に応じてunpackする。これは通常はバイト配列の先頭からunpack化を開始するが、@var{bindat-idx}が非@code{nil}ならかわりに使用する0基準の開始位置を指定する。"

#. type: defun
#: original_texis/processes.texi:3203
msgid "The value is an alist or nested alist in which each element describes one unpacked field."
msgstr "値はそれぞれの要素がunpackされたフィールドを記述するalistかネストされたalist。"

#. type: defun
#: original_texis/processes.texi:3205
#, no-wrap
msgid "bindat-get-field struct &rest name"
msgstr "bindat-get-field struct &rest name"

#. type: defun
#: original_texis/processes.texi:3212
msgid "This function selects a field's data from the nested alist @var{struct}.  Usually @var{struct} was returned by @code{bindat-unpack}.  If @var{name} corresponds to just one argument, that means to extract a top-level field value.  Multiple @var{name} arguments specify repeated lookup of sub-structures.  An integer name acts as an array index."
msgstr "この関数はネストされたalistである@var{struct}からフィールドのデータを選択する。@var{struct}は通常は@code{bindat-unpack}がリターンしたもの。@var{name}が単一の引数に対応する場合にはトップレベルのフィールド値を抽出することを意味する。複数の@var{name}引数は副構造体を繰り返して照合することを指定する。整数の名前は配列のインデックスとして動作する。"

#. type: defun
#: original_texis/processes.texi:3216
msgid "For example, if @var{name} is @code{(a b 2 c)}, that means to find field @code{c} in the third element of subfield @code{b} of field @code{a}.  (This corresponds to @code{struct.a.b[2].c} in C.)"
msgstr "たとえば@var{name}が@code{(a b 2 c)}なら、それはフィールド@code{a}の副フィールド@code{b}の3番目の要素内のフィールド@code{c} (Cでは@code{struct.a.b[2].c}に相当)を意味する。"

#. type: Plain text
#: original_texis/processes.texi:3225
msgid "Although packing and unpacking operations change the organization of data (in memory), they preserve the data's @dfn{total length}, which is the sum of all the fields' lengths, in bytes.  This value is not generally inherent in either the specification or alist alone; instead, both pieces of information contribute to its calculation.  Likewise, the length of a string or array being unpacked may be longer than the data's total length as described by the specification."
msgstr "packやunpackの処理をすることによりメモリー内でデータ構造が変化しても、そのデータの全フィールド長の合計バイト数である@dfn{トータル長(total length)}は保たれます。この値は一般的に仕様またはalist単独では固有ではありません。そのかわりこれら両方の情報がこの計算に役立ちます。同様にunpackされる文字列や配列の長さは仕様の記述にしたがってデータのトータル長より長くなるかもしれません。"

#. type: defun
#: original_texis/processes.texi:3226
#, no-wrap
msgid "bindat-length spec struct"
msgstr "bindat-length spec struct"

#. type: defun
#: original_texis/processes.texi:3229
msgid "This function returns the total length of the data in @var{struct}, according to @var{spec}."
msgstr "この関数は@var{struct}内のデータの@var{spec}に応じたトータル長をリターンする。"

#. type: defun
#: original_texis/processes.texi:3231
#, no-wrap
msgid "bindat-pack spec struct &optional bindat-raw bindat-idx"
msgstr "bindat-pack spec struct &optional bindat-raw bindat-idx"

#. type: defun
#: original_texis/processes.texi:3238
msgid "This function returns a byte array packed according to @var{spec} from the data in the alist @var{struct}.  It normally creates and fills a new byte array starting at the beginning.  However, if @var{bindat-raw} is non-@code{nil}, it specifies a pre-allocated unibyte string or vector to pack into.  If @var{bindat-idx} is non-@code{nil}, it specifies the starting offset for packing into @code{bindat-raw}."
msgstr "この関数はalist @var{struct}内のデータから@var{spec}に応じてpackされたバイト配列をリターンする。これは通常は先頭から充填された新たなバイト配列を作成する。しかし@var{bindat-raw}が非@code{nil}なら、それはpack先として事前に割り当てられたユニバイト文字列かベクターを指定する。@var{bindat-idx}が非@code{nil}なら@code{bindat-raw}へpackする開始オフセットを指定する。"

#. type: defun
#: original_texis/processes.texi:3241
msgid "When pre-allocating, you should make sure @code{(length @var{bindat-raw})} meets or exceeds the total length to avoid an out-of-range error."
msgstr "事前に割り当てる際にはout-of-rangeエラーを避けるために、@code{(length @var{bindat-raw})}がトータル長またはそれ以上であることを確認すること。"

#. type: defun
#: original_texis/processes.texi:3243
#, no-wrap
msgid "bindat-ip-to-string ip"
msgstr "bindat-ip-to-string ip"

#. type: defun
#: original_texis/processes.texi:3247
msgid "Convert the Internet address vector @var{ip} to a string in the usual dotted notation."
msgstr "インターネットアドレスのベクター@var{ip}を通常のドット表記による文字列に変換する。"

#. type: example
#: original_texis/processes.texi:3251
#, no-wrap
msgid ""
"(bindat-ip-to-string [127 0 0 1])\n"
"     @result{} \"127.0.0.1\"\n"
msgstr ""
"(bindat-ip-to-string [127 0 0 1])\n"
"     @result{} \"127.0.0.1\"\n"

#. type: subsection
#: original_texis/processes.texi:3255
#, no-wrap
msgid "Examples of Byte Unpacking and Packing"
msgstr "Examples of Byte Unpacking and Packing"

#. type: Plain text
#: original_texis/processes.texi:3262
msgid "Here is a complete example of byte unpacking and packing:"
msgstr "以下はバイトにたいしてunpackおよびpackを行う完全な例です:"

#. type: lisp
#: original_texis/processes.texi:3265
#, no-wrap
msgid ""
"(require 'bindat)\n"
"\n"
msgstr ""
"(require 'bindat)\n"
"\n"

#. type: lisp
#: original_texis/processes.texi:3276
#, no-wrap
msgid ""
"(defvar fcookie-index-spec\n"
"  '((:version  u32)\n"
"    (:count    u32)\n"
"    (:longest  u32)\n"
"    (:shortest u32)\n"
"    (:flags    u32)\n"
"    (:delim    u8)\n"
"    (:ignored  fill 3)\n"
"    (:offset   repeat (:count) (:foo u32)))\n"
"  \"Description of a fortune cookie index file's contents.\")\n"
"\n"
msgstr ""
"(defvar fcookie-index-spec\n"
"  '((:version  u32)\n"
"    (:count    u32)\n"
"    (:longest  u32)\n"
"    (:shortest u32)\n"
"    (:flags    u32)\n"
"    (:delim    u8)\n"
"    (:ignored  fill 3)\n"
"    (:offset   repeat (:count) (:foo u32)))\n"
"  \"fortuneクッキーのインデックスファイル内容\")\n"
"\n"

#. type: lisp
#: original_texis/processes.texi:3301
#, no-wrap
msgid ""
"(defun fcookie (cookies &optional index)\n"
"  \"Display a random fortune cookie from file COOKIES.\n"
"Optional second arg INDEX specifies the associated index\n"
"filename, by default \\\"COOKIES.dat\\\".  Display cookie text\n"
"in buffer \\\"*Fortune Cookie: BASENAME*\\\", where BASENAME\n"
"is COOKIES without the directory part.\"\n"
"  (interactive \"fCookies file: \")\n"
"  (let* ((info (with-temp-buffer\n"
"                 (insert-file-contents-literally\n"
"                  (or index (concat cookies \".dat\")))\n"
"                 (bindat-unpack fcookie-index-spec\n"
"                                (buffer-string))))\n"
"         (sel (random (bindat-get-field info :count)))\n"
"         (beg (cdar (bindat-get-field info :offset sel)))\n"
"         (end (or (cdar (bindat-get-field info\n"
"                                          :offset (1+ sel)))\n"
"                  (nth 7 (file-attributes cookies)))))\n"
"    (switch-to-buffer\n"
"     (get-buffer-create\n"
"      (format \"*Fortune Cookie: %s*\"\n"
"              (file-name-nondirectory cookies))))\n"
"    (erase-buffer)\n"
"    (insert-file-contents-literally\n"
"     cookies nil beg (- end 3))))\n"
"\n"
msgstr ""
"(defun fcookie (cookies &optional index)\n"
"  \"ファイルCOOKIESからランダムなfortuneクッキーを表示する。\n"
"オプションの第2引数INDEXは関連付けられるインデックス\n"
"ファイル名を指定し、デフォルトは\\\"COOKIES.dat\\\"。\n"
"バッファー\\\"*Fortune Cookie: BASENAME*\\\"内にクッキーを表示。\n"
"BASENAMEはディレクトリー部分を除いたCOOKIES\"\n"
"  (interactive \"fCookies file: \")\n"
"  (let* ((info (with-temp-buffer\n"
"                 (insert-file-contents-literally\n"
"                  (or index (concat cookies \".dat\")))\n"
"                 (bindat-unpack fcookie-index-spec\n"
"                                (buffer-string))))\n"
"         (sel (random (bindat-get-field info :count)))\n"
"         (beg (cdar (bindat-get-field info :offset sel)))\n"
"         (end (or (cdar (bindat-get-field info\n"
"                                          :offset (1+ sel)))\n"
"                  (nth 7 (file-attributes cookies)))))\n"
"    (switch-to-buffer\n"
"     (get-buffer-create\n"
"      (format \"*Fortune Cookie: %s*\"\n"
"              (file-name-nondirectory cookies))))\n"
"    (erase-buffer)\n"
"    (insert-file-contents-literally\n"
"     cookies nil beg (- end 3))))\n"
"\n"

#. type: lisp
#: original_texis/processes.texi:3341
#, no-wrap
msgid ""
"(defun fcookie-create-index (cookies &optional index delim)\n"
"  \"Scan file COOKIES, and write out its index file.\n"
"Optional arg INDEX specifies the index filename, which by\n"
"default is \\\"COOKIES.dat\\\".  Optional arg DELIM specifies the\n"
"unibyte character that, when found on a line of its own in\n"
"COOKIES, indicates the border between entries.\"\n"
"  (interactive \"fCookies file: \")\n"
"  (setq delim (or delim ?%))\n"
"  (let ((delim-line (format \"\\n%c\\n\" delim))\n"
"        (count 0)\n"
"        (max 0)\n"
"        min p q len offsets)\n"
"    (unless (= 3 (string-bytes delim-line))\n"
"      (error \"Delimiter cannot be represented in one byte\"))\n"
"    (with-temp-buffer\n"
"      (insert-file-contents-literally cookies)\n"
"      (while (and (setq p (point))\n"
"                  (search-forward delim-line (point-max) t)\n"
"                  (setq len (- (point) 3 p)))\n"
"        (setq count (1+ count)\n"
"              max (max max len)\n"
"              min (min (or min max) len)\n"
"              offsets (cons (1- p) offsets))))\n"
"    (with-temp-buffer\n"
"      (set-buffer-multibyte nil)\n"
"      (insert\n"
"       (bindat-pack\n"
"        fcookie-index-spec\n"
"        `((:version . 2)\n"
"          (:count . ,count)\n"
"          (:longest . ,max)\n"
"          (:shortest . ,min)\n"
"          (:flags . 0)\n"
"          (:delim . ,delim)\n"
"          (:offset . ,(mapcar (lambda (o)\n"
"                                (list (cons :foo o)))\n"
"                              (nreverse offsets))))))\n"
"      (let ((coding-system-for-write 'raw-text-unix))\n"
"        (write-file (or index (concat cookies \".dat\")))))))\n"
msgstr ""
"(defun fcookie-create-index (cookies &optional index delim)\n"
"  \"ファイルCOOKIESをスキャンしてインデックスファイルに書き込む。\n"
"オプション引数INDEXは、インデックスファイル名を指定。デフォルトは\\\"COOKIES.dat\\\"。\n"
"オプション引数DELIMはユニバイト文字で、それがCOOKIES内\n"
"のある行で見つかったら、その行はエントリー間の境界を示す。\"\n"
"  (interactive \"fCookies file: \")\n"
"  (setq delim (or delim ?%))\n"
"  (let ((delim-line (format \"\\n%c\\n\" delim))\n"
"        (count 0)\n"
"        (max 0)\n"
"        min p q len offsets)\n"
"    (unless (= 3 (string-bytes delim-line))\n"
"      (error \"Delimiter cannot be represented in one byte\"))\n"
"    (with-temp-buffer\n"
"      (insert-file-contents-literally cookies)\n"
"      (while (and (setq p (point))\n"
"                  (search-forward delim-line (point-max) t)\n"
"                  (setq len (- (point) 3 p)))\n"
"        (setq count (1+ count)\n"
"              max (max max len)\n"
"              min (min (or min max) len)\n"
"              offsets (cons (1- p) offsets))))\n"
"    (with-temp-buffer\n"
"      (set-buffer-multibyte nil)\n"
"      (insert\n"
"       (bindat-pack\n"
"        fcookie-index-spec\n"
"        `((:version . 2)\n"
"          (:count . ,count)\n"
"          (:longest . ,max)\n"
"          (:shortest . ,min)\n"
"          (:flags . 0)\n"
"          (:delim . ,delim)\n"
"          (:offset . ,(mapcar (lambda (o)\n"
"                                (list (cons :foo o)))\n"
"                              (nreverse offsets))))))\n"
"      (let ((coding-system-for-write 'raw-text-unix))\n"
"        (write-file (or index (concat cookies \".dat\")))))))\n"

#. type: Plain text
#: original_texis/processes.texi:3345
msgid "The following is an example of defining and unpacking a complex structure.  Consider the following C structures:"
msgstr "以下は複雑な構造体を定義してunpackする例です。以下のようなCの構造体があるものとします:"

#. type: example
#: original_texis/processes.texi:3353
#, no-wrap
msgid ""
"struct header @{\n"
"    unsigned long    dest_ip;\n"
"    unsigned long    src_ip;\n"
"    unsigned short   dest_port;\n"
"    unsigned short   src_port;\n"
"@};\n"
"\n"
msgstr ""
"struct header @{\n"
"    unsigned long    dest_ip;\n"
"    unsigned long    src_ip;\n"
"    unsigned short   dest_port;\n"
"    unsigned short   src_port;\n"
"@};\n"
"\n"

#. type: example
#: original_texis/processes.texi:3361
#, no-wrap
msgid ""
"struct data @{\n"
"    unsigned char    type;\n"
"    unsigned char    opcode;\n"
"    unsigned short   length;  /* in network byte order  */\n"
"    unsigned char    id[8];   /* null-terminated string  */\n"
"    unsigned char    data[/* (length + 3) & ~3 */];\n"
"@};\n"
"\n"
msgstr ""
"struct data @{\n"
"    unsigned char    type;\n"
"    unsigned char    opcode;\n"
"    unsigned short   length;  /* ネットワークバイトオーダー */\n"
"    unsigned char    id[8];   /* NUL終端文字列 */\n"
"    unsigned char    data[/* (length + 3) & ~3 */];\n"
"@};\n"
"\n"

#. type: example
#: original_texis/processes.texi:3368
#, no-wrap
msgid ""
"struct packet @{\n"
"    struct header    header;\n"
"    unsigned long    counters[2];  /* in little endian order  */\n"
"    unsigned char    items;\n"
"    unsigned char    filler[3];\n"
"    struct data      item[/* items */];\n"
"\n"
msgstr ""
"struct packet @{\n"
"    struct header    header;\n"
"    unsigned long    counters[2];  /* リトルエンディアンオーダー */\n"
"    unsigned char    items;\n"
"    unsigned char    filler[3];\n"
"    struct data      item[/* items */];\n"
"\n"

#. type: example
#: original_texis/processes.texi:3370
#, no-wrap
msgid "@};\n"
msgstr "@};\n"

#. type: Plain text
#: original_texis/processes.texi:3373
msgid "The corresponding data layout specification is:"
msgstr "対応するデータレイアウト仕様が以下です:"

#. type: lisp
#: original_texis/processes.texi:3380
#, no-wrap
msgid ""
"(setq header-spec\n"
"      '((dest-ip   ip)\n"
"        (src-ip    ip)\n"
"        (dest-port u16)\n"
"        (src-port  u16)))\n"
"\n"
msgstr ""
"(setq header-spec\n"
"      '((dest-ip   ip)\n"
"        (src-ip    ip)\n"
"        (dest-port u16)\n"
"        (src-port  u16)))\n"
"\n"

#. type: lisp
#: original_texis/processes.texi:3388
#, no-wrap
msgid ""
"(setq data-spec\n"
"      '((type      u8)\n"
"        (opcode    u8)\n"
"        (length    u16)  ; network byte order\n"
"        (id        strz 8)\n"
"        (data      vec (length))\n"
"        (align     4)))\n"
"\n"
msgstr ""
"(setq data-spec\n"
"      '((type      u8)\n"
"        (opcode    u8)\n"
"        (length    u16)  ; ネットワークバイトオーダー\n"
"        (id        strz 8)\n"
"        (data      vec (length))\n"
"        (align     4)))\n"
"\n"

#. type: lisp
#: original_texis/processes.texi:3396
#, no-wrap
msgid ""
"(setq packet-spec\n"
"      '((header    struct header-spec)\n"
"        (counters  vec 2 u32r)   ; little endian order\n"
"        (items     u8)\n"
"        (fill      3)\n"
"        (item      repeat (items)\n"
"                   (struct data-spec))))\n"
msgstr ""
"(setq packet-spec\n"
"      '((header    struct header-spec)\n"
"        (counters  vec 2 u32r)   ; リトルエンディアンオーダー\n"
"        (items     u8)\n"
"        (fill      3)\n"
"        (item      repeat (items)\n"
"                   (struct data-spec))))\n"

#. type: Plain text
#: original_texis/processes.texi:3399
msgid "A binary data representation is:"
msgstr "バイナリーデータによる表現は:"

#. type: lisp
#: original_texis/processes.texi:3406
#, no-wrap
msgid ""
"(setq binary-data\n"
"      [ 192 168 1 100 192 168 1 101 01 28 21 32\n"
"        160 134 1 0 5 1 0 0 2 0 0 0\n"
"        2 3 0 5 ?A ?B ?C ?D ?E ?F 0 0 1 2 3 4 5 0 0 0\n"
"        1 4 0 7 ?B ?C ?D ?E ?F ?G 0 0 6 7 8 9 10 11 12 0 ])\n"
msgstr ""
"(setq binary-data\n"
"      [ 192 168 1 100 192 168 1 101 01 28 21 32\n"
"        160 134 1 0 5 1 0 0 2 0 0 0\n"
"        2 3 0 5 ?A ?B ?C ?D ?E ?F 0 0 1 2 3 4 5 0 0 0\n"
"        1 4 0 7 ?B ?C ?D ?E ?F ?G 0 0 6 7 8 9 10 11 12 0 ])\n"

#. type: Plain text
#: original_texis/processes.texi:3409
msgid "The corresponding decoded structure is:"
msgstr "対応するデコードされた構造体は:"

#. type: lisp
#: original_texis/processes.texi:3430
#, no-wrap
msgid ""
"(setq decoded (bindat-unpack packet-spec binary-data))\n"
"     @result{}\n"
"((header\n"
"  (dest-ip   . [192 168 1 100])\n"
"  (src-ip    . [192 168 1 101])\n"
"  (dest-port . 284)\n"
"  (src-port  . 5408))\n"
" (counters . [100000 261])\n"
" (items . 2)\n"
" (item ((data . [1 2 3 4 5])\n"
"        (id . \"ABCDEF\")\n"
"        (length . 5)\n"
"        (opcode . 3)\n"
"        (type . 2))\n"
"       ((data . [6 7 8 9 10 11 12])\n"
"        (id . \"BCDEFG\")\n"
"        (length . 7)\n"
"        (opcode . 4)\n"
"        (type . 1))))\n"
msgstr ""
"(setq decoded (bindat-unpack packet-spec binary-data))\n"
"     @result{}\n"
"((header\n"
"  (dest-ip   . [192 168 1 100])\n"
"  (src-ip    . [192 168 1 101])\n"
"  (dest-port . 284)\n"
"  (src-port  . 5408))\n"
" (counters . [100000 261])\n"
" (items . 2)\n"
" (item ((data . [1 2 3 4 5])\n"
"        (id . \"ABCDEF\")\n"
"        (length . 5)\n"
"        (opcode . 3)\n"
"        (type . 2))\n"
"       ((data . [6 7 8 9 10 11 12])\n"
"        (id . \"BCDEFG\")\n"
"        (length . 7)\n"
"        (opcode . 4)\n"
"        (type . 1))))\n"

#. type: Plain text
#: original_texis/processes.texi:3433
msgid "An example of fetching data from this structure:"
msgstr "以下はこの構造体からデータを取得する例です:"

#. type: lisp
#: original_texis/processes.texi:3437
#, no-wrap
msgid ""
"(bindat-get-field decoded 'item 1 'id)\n"
"     @result{} \"BCDEFG\"\n"
msgstr ""
"(bindat-get-field decoded 'item 1 'id)\n"
"     @result{} \"BCDEFG\"\n"
