#. type: chapter
#: original_texis/positions.texi:5 original_texis/positions.texi:6
#, no-wrap
msgid "Positions"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:7
#, no-wrap
msgid "position (in buffer)"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:8
#, no-wrap
msgid "buffer position"
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:16
msgid "A @dfn{position} is the index of a character in the text of a buffer.  More precisely, a position identifies the place between two characters (or before the first character, or after the last character), so we can speak of the character before or after a given position.  However, we often speak of the character ``at'' a position, meaning the character after that position."
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:28
msgid "Positions are usually represented as integers starting from 1, but can also be represented as @dfn{markers}---special objects that relocate automatically when text is inserted or deleted so they stay with the surrounding characters.  Functions that expect an argument to be a position (an integer), but accept a marker as a substitute, normally ignore which buffer the marker points into; they convert the marker to an integer, and use that integer, exactly as if you had passed the integer as the argument, even if the marker points to the wrong buffer.  A marker that points nowhere cannot convert to an integer; using it instead of an integer causes an error.  @xref{Markers}."
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:31
msgid "See also the field feature (@pxref{Fields}), which provides functions that are used by many cursor-motion commands."
msgstr ""

#. type: section
#: original_texis/positions.texi:37 original_texis/positions.texi:39
#: original_texis/positions.texi:40
#, no-wrap
msgid "Point"
msgstr ""

#. type: menuentry
#: original_texis/positions.texi:37
msgid "The special position where editing takes place."
msgstr ""

#. type: section
#: original_texis/positions.texi:37 original_texis/positions.texi:123
#: original_texis/positions.texi:124
#, no-wrap
msgid "Motion"
msgstr ""

#. type: menuentry
#: original_texis/positions.texi:37
msgid "Changing point."
msgstr ""

#. type: section
#: original_texis/positions.texi:37 original_texis/positions.texi:979
#: original_texis/positions.texi:980
#, no-wrap
msgid "Excursions"
msgstr ""

#. type: menuentry
#: original_texis/positions.texi:37
msgid "Temporary motion and buffer changes."
msgstr ""

#. type: section
#: original_texis/positions.texi:37 original_texis/positions.texi:1056
#: original_texis/positions.texi:1057
#, no-wrap
msgid "Narrowing"
msgstr ""

#. type: menuentry
#: original_texis/positions.texi:37
msgid "Restricting editing to a portion of the buffer."
msgstr ""

#. type: defun
#: original_texis/positions.texi:41 original_texis/positions.texi:69
#, no-wrap
msgid "point"
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:47
msgid "@dfn{Point} is a special buffer position used by many editing commands, including the self-inserting typed characters and text insertion functions.  Other commands move point through the text to allow editing and insertion at different places."
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:53
msgid "Like other positions, point designates a place between two characters (or before the first character, or after the last character), rather than a particular character.  Usually terminals display the cursor over the character that immediately follows point; point is actually before the character on which the cursor sits."
msgstr ""

#. type: cindex
#: original_texis/positions.texi:54
#, no-wrap
msgid "point with narrowing"
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:59
msgid "The value of point is a number no less than 1, and no greater than the buffer size plus 1.  If narrowing is in effect (@pxref{Narrowing}), then point is constrained to fall within the accessible portion of the buffer (possibly at one end of it)."
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:68
msgid "Each buffer has its own value of point, which is independent of the value of point in other buffers.  Each window also has a value of point, which is independent of the value of point in other windows on the same buffer.  This is why point can have different values in various windows that display the same buffer.  When a buffer appears in only one window, the buffer's point and the window's point normally have the same value, so the distinction is rarely important.  @xref{Window Point}, for more details."
msgstr ""

#. type: cindex
#: original_texis/positions.texi:70
#, no-wrap
msgid "current buffer position"
msgstr ""

#. type: defun
#: original_texis/positions.texi:73
msgid "This function returns the value of point in the current buffer, as an integer."
msgstr ""

#. type: group
#: original_texis/positions.texi:79
#, no-wrap
msgid ""
"(point)\n"
"     @result{} 175\n"
msgstr ""

#. type: defun
#: original_texis/positions.texi:83
#, no-wrap
msgid "point-min"
msgstr ""

#. type: defun
#: original_texis/positions.texi:88
msgid "This function returns the minimum accessible value of point in the current buffer.  This is normally 1, but if narrowing is in effect, it is the position of the start of the region that you narrowed to.  (@xref{Narrowing}.)"
msgstr ""

#. type: defun
#: original_texis/positions.texi:90
#, no-wrap
msgid "point-max"
msgstr ""

#. type: defun
#: original_texis/positions.texi:95
msgid "This function returns the maximum accessible value of point in the current buffer.  This is @code{(1+ (buffer-size))}, unless narrowing is in effect, in which case it is the position of the end of the region that you narrowed to.  (@xref{Narrowing}.)"
msgstr ""

#. type: defun
#: original_texis/positions.texi:97
#, no-wrap
msgid "buffer-end flag"
msgstr ""

#. type: defun
#: original_texis/positions.texi:101
msgid "This function returns @code{(point-max)} if @var{flag} is greater than 0, @code{(point-min)} otherwise.  The argument @var{flag} must be a number."
msgstr ""

#. type: defun
#: original_texis/positions.texi:103
#, no-wrap
msgid "buffer-size &optional buffer"
msgstr ""

#. type: defun
#: original_texis/positions.texi:107
msgid "This function returns the total number of characters in the current buffer.  In the absence of any narrowing (@pxref{Narrowing}), @code{point-max} returns a value one larger than this."
msgstr ""

#. type: defun
#: original_texis/positions.texi:110
msgid "If you specify a buffer, @var{buffer}, then the value is the size of @var{buffer}."
msgstr ""

#. type: group
#: original_texis/positions.texi:115
#, no-wrap
msgid ""
"(buffer-size)\n"
"     @result{} 35\n"
msgstr ""

#. type: group
#: original_texis/positions.texi:119
#, no-wrap
msgid ""
"(point-max)\n"
"     @result{} 36\n"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:125
#, no-wrap
msgid "motion by chars, words, lines, lists"
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:130
msgid "Motion functions change the value of point, either relative to the current value of point, relative to the beginning or end of the buffer, or relative to the edges of the selected window.  @xref{Point}."
msgstr ""

#. type: node
#: original_texis/positions.texi:139 original_texis/positions.texi:141
#, no-wrap
msgid "Character Motion"
msgstr ""

#. type: menuentry
#: original_texis/positions.texi:139
msgid "Moving in terms of characters."
msgstr ""

#. type: node
#: original_texis/positions.texi:139 original_texis/positions.texi:191
#, no-wrap
msgid "Word Motion"
msgstr ""

#. type: menuentry
#: original_texis/positions.texi:139
msgid "Moving in terms of words."
msgstr ""

#. type: node
#: original_texis/positions.texi:139 original_texis/positions.texi:278
#, no-wrap
msgid "Buffer End Motion"
msgstr ""

#. type: menuentry
#: original_texis/positions.texi:139
msgid "Moving to the beginning or end of the buffer."
msgstr ""

#. type: node
#: original_texis/positions.texi:139 original_texis/positions.texi:331
#, no-wrap
msgid "Text Lines"
msgstr ""

#. type: menuentry
#: original_texis/positions.texi:139
msgid "Moving in terms of lines of text."
msgstr ""

#. type: node
#: original_texis/positions.texi:139 original_texis/positions.texi:529
#, no-wrap
msgid "Screen Lines"
msgstr ""

#. type: menuentry
#: original_texis/positions.texi:139
msgid "Moving in terms of lines as displayed."
msgstr ""

#. type: node
#: original_texis/positions.texi:139 original_texis/positions.texi:721
#, no-wrap
msgid "List Motion"
msgstr ""

#. type: menuentry
#: original_texis/positions.texi:139
msgid "Moving by parsing lists and sexps."
msgstr ""

#. type: subsection
#: original_texis/positions.texi:139 original_texis/positions.texi:914
#: original_texis/positions.texi:915
#, no-wrap
msgid "Skipping Characters"
msgstr ""

#. type: menuentry
#: original_texis/positions.texi:139
msgid "Skipping characters belonging to a certain set."
msgstr ""

#. type: subsection
#: original_texis/positions.texi:142
#, no-wrap
msgid "Motion by Characters"
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:147
msgid "These functions move point based on a count of characters.  @code{goto-char} is the fundamental primitive; the other functions use that."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:148
#, no-wrap
msgid "Command goto-char position"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:152
msgid "This function sets point in the current buffer to the value @var{position}."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:162
msgid "If narrowing is in effect, @var{position} still counts from the beginning of the buffer, but point cannot go outside the accessible portion.  If @var{position} is out of range, @code{goto-char} moves point to the beginning or the end of the accessible portion."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:166
msgid "When this function is called interactively, @var{position} is the numeric prefix argument, if provided; otherwise it is read from the minibuffer."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:168
msgid "@code{goto-char} returns @var{position}."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:170
#, no-wrap
msgid "Command forward-char &optional count"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:177
msgid "This function moves point @var{count} characters forward, towards the end of the buffer (or backward, towards the beginning of the buffer, if @var{count} is negative).  If @var{count} is @code{nil}, the default is 1."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:182
msgid "If this attempts to move past the beginning or end of the buffer (or the limits of the accessible portion, when narrowing is in effect), it signals an error with error symbol @code{beginning-of-buffer} or @code{end-of-buffer}."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:184 original_texis/positions.texi:423
#: original_texis/positions.texi:638
msgid "In an interactive call, @var{count} is the numeric prefix argument."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:186
#, no-wrap
msgid "Command backward-char &optional count"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:189
msgid "This is just like @code{forward-char} except that it moves in the opposite direction."
msgstr ""

#. type: subsection
#: original_texis/positions.texi:192
#, no-wrap
msgid "Motion by Words"
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:198
msgid "The functions for parsing words described below use the syntax table and @code{char-script-table} to decide whether a given character is part of a word.  @xref{Syntax Tables}, and see @ref{Character Properties}."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:199
#, no-wrap
msgid "Command forward-word &optional count"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:204
msgid "This function moves point forward @var{count} words (or backward if @var{count} is negative).  If @var{count} is omitted or @code{nil}, it defaults to 1.  In an interactive call, @var{count} is specified by the numeric prefix argument."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:218
msgid "``Moving one word'' means moving until point crosses a word-constituent character, which indicates the beginning of a word, and then continue moving until the word ends.  By default, characters that begin and end words, known as @dfn{word boundaries}, are defined by the current buffer's syntax table (@pxref{Syntax Class Table}), but modes can override that by setting up a suitable @code{find-word-boundary-function-table}, described below.  Characters that belong to different scripts (as defined by @code{char-script-table}), also define a word boundary (@pxref{Character Properties}).  In any case, this function cannot move point past the boundary of the accessible portion of the buffer, or across a field boundary (@pxref{Fields}).  The most common case of a field boundary is the end of the prompt in the minibuffer."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:223
msgid "If it is possible to move @var{count} words, without being stopped prematurely by the buffer boundary or a field boundary, the value is @code{t}.  Otherwise, the return value is @code{nil} and point stops at the buffer boundary or field boundary."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:226
msgid "If @code{inhibit-field-text-motion} is non-@code{nil}, this function ignores field boundaries."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:229
#, no-wrap
msgid "Command backward-word &optional count"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:232
msgid "This function is just like @code{forward-word}, except that it moves backward until encountering the front of a word, rather than forward."
msgstr ""

#. type: defopt
#: original_texis/positions.texi:234
#, no-wrap
msgid "words-include-escapes"
msgstr ""

#. type: defopt
#: original_texis/positions.texi:239
msgid "This variable affects the behavior of @code{forward-word} and @code{backward-word}, and everything that uses them.  If it is non-@code{nil}, then characters in the escape and character-quote syntax classes count as part of words.  Otherwise, they do not."
msgstr ""

#. type: defvar
#: original_texis/positions.texi:241
#, no-wrap
msgid "inhibit-field-text-motion"
msgstr ""

#. type: defvar
#: original_texis/positions.texi:245
msgid "If this variable is non-@code{nil}, certain motion functions including @code{forward-word}, @code{forward-sentence}, and @code{forward-paragraph} ignore field boundaries."
msgstr ""

#. type: defvar
#: original_texis/positions.texi:247
#, no-wrap
msgid "find-word-boundary-function-table"
msgstr ""

#. type: defvar
#: original_texis/positions.texi:260
msgid "This variable affects the behavior of @code{forward-word} and @code{backward-word}, and everything that uses them.  Its value is a char-table (@pxref{Char-Tables}) of functions to search for word boundaries.  If a character has a non-@code{nil} entry in this table, then when a word starts or ends with that character, the corresponding function will be called with 2 arguments: @var{pos} and @var{limit}.  The function should return the position of the other word boundary.  Specifically, if @var{pos} is smaller than @var{limit}, then @var{pos} is at the beginning of a word, and the function should return the position after the last character of the word; otherwise, @var{pos} is at the last character of a word, and the function should return the position of that word's first character."
msgstr ""

#. type: defun
#: original_texis/positions.texi:262
#, no-wrap
msgid "forward-word-strictly &optional count"
msgstr ""

#. type: defun
#: original_texis/positions.texi:268
msgid "This function is like @code{forward-word}, but it is not affected by @code{find-word-boundary-function-table}.  Lisp programs that should not change behavior when word movement is modified by modes which set that table, such as @code{subword-mode}, should use this function instead of @code{forward-word}."
msgstr ""

#. type: defun
#: original_texis/positions.texi:270
#, no-wrap
msgid "backward-word-strictly &optional count"
msgstr ""

#. type: defun
#: original_texis/positions.texi:276
msgid "This function is like @code{backward-word}, but it is not affected by @code{find-word-boundary-function-table}.  Like with @code{forward-word-strictly}, use this function instead of @code{backward-word} when movement by words should only consider syntax tables."
msgstr ""

#. type: subsection
#: original_texis/positions.texi:279
#, no-wrap
msgid "Motion to an End of the Buffer"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:280
#, no-wrap
msgid "move to beginning or end of buffer"
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:283
msgid "To move point to the beginning of the buffer, write:"
msgstr ""

#. type: group
#: original_texis/positions.texi:287
#, no-wrap
msgid "(goto-char (point-min))\n"
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:292
msgid "Likewise, to move to the end of the buffer, use:"
msgstr ""

#. type: group
#: original_texis/positions.texi:296
#, no-wrap
msgid "(goto-char (point-max))\n"
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:302
msgid "Here are two commands that users use to do these things.  They are documented here to warn you not to use them in Lisp programs, because they set the mark and display messages in the echo area."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:303
#, no-wrap
msgid "Command beginning-of-buffer &optional n"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:308
msgid "This function moves point to the beginning of the buffer (or the limits of the accessible portion, when narrowing is in effect), setting the mark at the previous position (except in Transient Mark mode, if the mark is already active, it does not set the mark.)"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:313
msgid "If @var{n} is non-@code{nil}, then it puts point @var{n} tenths of the way from the beginning of the accessible portion of the buffer.  In an interactive call, @var{n} is the numeric prefix argument, if provided; otherwise @var{n} defaults to @code{nil}."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:315 original_texis/positions.texi:329
msgid "@strong{Warning:} Don't use this function in Lisp programs!"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:317
#, no-wrap
msgid "Command end-of-buffer &optional n"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:324
msgid "This function moves point to the end of the buffer (or the limits of the accessible portion, when narrowing is in effect), setting the mark at the previous position (except in Transient Mark mode when the mark is already active).  If @var{n} is non-@code{nil}, then it puts point @var{n} tenths of the way from the end of the accessible portion of the buffer."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:327
msgid "In an interactive call, @var{n} is the numeric prefix argument, if provided; otherwise @var{n} defaults to @code{nil}."
msgstr ""

#. type: subsection
#: original_texis/positions.texi:332
#, no-wrap
msgid "Motion by Text Lines"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:333
#, no-wrap
msgid "lines"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:334
#, no-wrap
msgid "logical lines, moving by"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:335
#, no-wrap
msgid "physical lines, moving by"
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:344
msgid "Text lines are portions of the buffer delimited by newline characters, which are regarded as part of the previous line.  The first text line begins at the beginning of the buffer, and the last text line ends at the end of the buffer whether or not the last character is a newline.  The division of the buffer into text lines is not affected by the width of the window, by line continuation in display, or by how tabs and control characters are displayed."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:345
#, no-wrap
msgid "Command beginning-of-line &optional count"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:349
msgid "This function moves point to the beginning of the current line.  With an argument @var{count} not @code{nil} or 1, it moves forward @var{count}@minus{}1 lines and then to the beginning of the line."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:358
msgid "This function does not move point across a field boundary (@pxref{Fields}) unless doing so would move beyond there to a different line; therefore, if @var{count} is @code{nil} or 1, and point starts at a field boundary, point does not move.  To ignore field boundaries, either bind @code{inhibit-field-text-motion} to @code{t}, or use the @code{forward-line} function instead.  For instance, @code{(forward-line 0)} does the same thing as @code{(beginning-of-line)}, except that it ignores field boundaries."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:362 original_texis/positions.texi:383
msgid "If this function reaches the end of the buffer (or of the accessible portion, if narrowing is in effect), it positions point there.  No error is signaled."
msgstr ""

#. type: defun
#: original_texis/positions.texi:364
#, no-wrap
msgid "line-beginning-position &optional count"
msgstr ""

#. type: defun
#: original_texis/positions.texi:367
msgid "Return the position that @code{(beginning-of-line @var{count})} would move to."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:369
#, no-wrap
msgid "Command end-of-line &optional count"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:373
msgid "This function moves point to the end of the current line.  With an argument @var{count} not @code{nil} or 1, it moves forward @var{count}@minus{}1 lines and then to the end of the line."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:379
msgid "This function does not move point across a field boundary (@pxref{Fields}) unless doing so would move beyond there to a different line; therefore, if @var{count} is @code{nil} or 1, and point starts at a field boundary, point does not move.  To ignore field boundaries, bind @code{inhibit-field-text-motion} to @code{t}."
msgstr ""

#. type: defun
#: original_texis/positions.texi:385
#, no-wrap
msgid "line-end-position &optional count"
msgstr ""

#. type: defun
#: original_texis/positions.texi:388
msgid "Return the position that @code{(end-of-line @var{count})} would move to."
msgstr ""

#. type: defun
#: original_texis/positions.texi:390
#, no-wrap
msgid "pos-bol &optional count"
msgstr ""

#. type: defun
#: original_texis/positions.texi:393
msgid "Like @code{line-beginning-position}, but ignores fields (and is more efficient)."
msgstr ""

#. type: defun
#: original_texis/positions.texi:395
#, no-wrap
msgid "pos-eol &optional count"
msgstr ""

#. type: defun
#: original_texis/positions.texi:398
msgid "Like @code{line-end-position}, but ignores fields (and is more efficient)."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:400
#, no-wrap
msgid "Command forward-line &optional count"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:401
#, no-wrap
msgid "beginning of line"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:408
msgid "This function moves point forward @var{count} lines, to the beginning of the line following that.  If @var{count} is negative, it moves point @minus{}@var{count} lines backward, to the beginning of a line preceding that.  If @var{count} is zero, it moves point to the beginning of the current line.  If @var{count} is @code{nil}, that means 1."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:412
msgid "If @code{forward-line} encounters the beginning or end of the buffer (or of the accessible portion) before finding that many lines, it sets point there.  No error is signaled."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:421
msgid "@code{forward-line} returns the difference between @var{count} and the number of lines actually moved.  If you attempt to move down five lines from the beginning of a buffer that has only three lines, point stops at the end of the last line, and the value will be 2.  As an explicit exception, if the last accessible line is non-empty, but has no newline (e.g., if the buffer ends without a newline), the function sets point to the end of that line, and the value returned by the function counts that line as one line successfully moved."
msgstr ""

#. type: defun
#: original_texis/positions.texi:425
#, no-wrap
msgid "count-lines start end &optional ignore-invisible-lines"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:426
#, no-wrap
msgid "lines in region"
msgstr ""

#. type: anchor{#1}
#: original_texis/positions.texi:434
msgid "Definition of count-lines"
msgstr ""

#. type: defun
#: original_texis/positions.texi:434
msgid "This function returns the number of lines between the positions @var{start} and @var{end} in the current buffer.  If @var{start} and @var{end} are equal, then it returns 0.  Otherwise it returns at least 1, even if @var{start} and @var{end} are on the same line.  This is because the text between them, considered in isolation, must contain at least one line unless it is empty."
msgstr ""

#. type: defun
#: original_texis/positions.texi:437
msgid "If the optional @var{ignore-invisible-lines} is non-@code{nil}, invisible lines will not be included in the count."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:439
#, no-wrap
msgid "Command count-words start end"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:440
#, no-wrap
msgid "words in region"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:443
msgid "This function returns the number of words between the positions @var{start} and @var{end} in the current buffer."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:447
msgid "This function can also be called interactively.  In that case, it prints a message reporting the number of lines, words, and characters in the buffer, or in the region if the region is active."
msgstr ""

#. type: defun
#: original_texis/positions.texi:449
#, no-wrap
msgid "line-number-at-pos &optional pos absolute"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:450
#, no-wrap
msgid "line number"
msgstr ""

#. type: defun
#: original_texis/positions.texi:459
msgid "This function returns the line number in the current buffer corresponding to the buffer position @var{pos}.  If @var{pos} is @code{nil} or omitted, the current buffer position is used.  If @var{absolute} is @code{nil}, the default, counting starts at @code{(point-min)}, so the value refers to the contents of the accessible portion of the (potentially narrowed) buffer.  If @var{absolute} is non-@code{nil}, ignore any narrowing and return the absolute line number."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:467
#, no-wrap
msgid "Command previous-line count"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:468
#, no-wrap
msgid "goal column"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:472
#, no-wrap
msgid ""
"This function moves point up @var{count} lines (down if @var{count}\n"
"is negative).  In moving, it attempts to keep point in the @dfn{goal column}\n"
"(normally the same column that it was at the beginning of the move).\n"
"\n"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:476 original_texis/positions.texi:501
#, no-wrap
msgid ""
"If there is no character in the target line exactly under the current\n"
"column, point is positioned after the character in that line which\n"
"spans this column, or at the end of the line if it is not long enough.\n"
"\n"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:480 original_texis/positions.texi:505
#, no-wrap
msgid ""
"If it attempts to move beyond the top or bottom of the buffer (or clipped\n"
"region), then point is positioned in the goal column in the top or\n"
"bottom line.  No error is signaled.\n"
"\n"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:483 original_texis/positions.texi:512
#, no-wrap
msgid ""
"In an interactive call, @var{count} will be the numeric\n"
"prefix argument.\n"
"\n"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:487 original_texis/positions.texi:516
#, no-wrap
msgid ""
"The command @code{set-goal-column} can be used to create a semipermanent\n"
"goal column to which this command always moves.  Then it does not try to\n"
"move vertically.\n"
"\n"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:491
#, no-wrap
msgid ""
"If you are thinking of using this in a Lisp program, consider using\n"
"@code{forward-line} with a negative argument instead.  It is usually easier\n"
"to use and more reliable (no dependence on goal column, etc.).\n"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:493
#, no-wrap
msgid "Command next-line count"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:497
#, no-wrap
msgid ""
"This function moves point down @var{count} lines (up if @var{count}\n"
"is negative).  In moving, it attempts to keep point in the goal column\n"
"(normally the same column that it was at the beginning of the move).\n"
"\n"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:509
#, no-wrap
msgid ""
"In the case where the @var{count} is 1, and point is on the last\n"
"line of the buffer (or clipped region), a new empty line is inserted at the\n"
"end of the buffer (or clipped region) and point moved there.\n"
"\n"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:520
#, no-wrap
msgid ""
"If you are thinking of using this in a Lisp program, consider using\n"
"@code{forward-line} instead.  It is usually easier\n"
"to use and more reliable (no dependence on goal column, etc.).\n"
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:528
msgid "Also see the functions @code{bolp} and @code{eolp} in @ref{Near Point}.  These functions do not move point, but test whether it is already at the beginning or end of a line."
msgstr ""

#. type: subsection
#: original_texis/positions.texi:530
#, no-wrap
msgid "Motion by Screen Lines"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:531
#, no-wrap
msgid "screen lines, moving by"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:532
#, no-wrap
msgid "visual lines, moving by"
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:540
msgid "The line functions in the previous section count text lines, delimited only by newline characters.  By contrast, these functions count screen lines, which are defined by the way the text appears on the screen.  A text line is a single screen line if it is short enough to fit the width of the selected window, but otherwise it may occupy several screen lines."
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:545
msgid "In some cases, text lines are truncated on the screen rather than continued onto additional screen lines.  In these cases, @code{vertical-motion} moves point much like @code{forward-line}.  @xref{Truncation}."
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:552
msgid "Because the width of a given string depends on the flags that control the appearance of certain characters, @code{vertical-motion} behaves differently, for a given piece of text, depending on the buffer it is in, and even on the selected window (because the width, the truncation flag, and display table may vary between windows).  @xref{Usual Display}."
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:555
msgid "These functions scan text to determine where screen lines break, and thus take time proportional to the distance scanned."
msgstr ""

#. type: defun
#: original_texis/positions.texi:560
#, no-wrap
msgid "vertical-motion count &optional window cur-col"
msgstr ""

#. type: defun
#: original_texis/positions.texi:565
msgid "This function moves point to the start of the screen line @var{count} screen lines down from the screen line containing point.  If @var{count} is negative, it moves up instead.  If @var{count} is zero, point moves to the visual start of the current screen line."
msgstr ""

#. type: defun
#: original_texis/positions.texi:580
msgid "The @var{count} argument can be a cons cell, @w{@code{(@var{cols} . @var{lines})}}, instead of an integer.  Then the function moves by @var{lines} screen lines, as described for @var{count} above, and puts point @var{cols} columns from the visual start of that screen line.  The value of @var{cols} can be a float, and is interpreted in units of the frame's canonical character width (@pxref{Frame Font}); this allows specifying accurate horizontal position of point when the target screen line uses variable fonts.  Note that @var{cols} are counted from the @emph{visual} start of the line; if the window is scrolled horizontally (@pxref{Horizontal Scrolling}), the column where point will end is in addition to the number of columns by which the text is scrolled, and if the target line is a continuation line, its leftmost column is considered column zero (unlike column-oriented functions, @pxref{Columns})."
msgstr ""

#. type: defun
#: original_texis/positions.texi:584
msgid "The return value is the number of screen lines over which point was moved.  The value may be less in absolute value than @var{count} if the beginning or end of the buffer was reached."
msgstr ""

#. type: defun
#: original_texis/positions.texi:589
msgid "The window @var{window} is used for obtaining parameters such as the width, the horizontal scrolling, and the display table.  But @code{vertical-motion} always operates on the current buffer, even if @var{window} currently displays some other buffer."
msgstr ""

#. type: defun
#: original_texis/positions.texi:597
msgid "The optional argument @var{cur-col} specifies the current column when the function is called.  This is the window-relative horizontal coordinate of point, measured in units of font width of the frame's default face.  Providing it speeds up the function, especially in very long lines, because the function doesn't have to go back in the buffer in order to determine the current column.  Note that @var{cur-col} is also counted from the visual start of the line."
msgstr ""

#. type: defun
#: original_texis/positions.texi:599
#, no-wrap
msgid "count-screen-lines &optional beg end count-final-newline window"
msgstr ""

#. type: defun
#: original_texis/positions.texi:606
msgid "This function returns the number of screen lines in the text from @var{beg} to @var{end}.  The number of screen lines may be different from the number of actual lines, due to line continuation, the display table, etc.  If @var{beg} and @var{end} are @code{nil} or omitted, they default to the beginning and end of the accessible portion of the buffer."
msgstr ""

#. type: defun
#: original_texis/positions.texi:609
msgid "If the region ends with a newline, that is ignored unless the optional third argument @var{count-final-newline} is non-@code{nil}."
msgstr ""

#. type: defun
#: original_texis/positions.texi:613
msgid "The optional fourth argument @var{window} specifies the window for obtaining parameters such as width, horizontal scrolling, and so on.  The default is to use the selected window's parameters."
msgstr ""

#. type: defun
#: original_texis/positions.texi:618
msgid "Like @code{vertical-motion}, @code{count-screen-lines} always uses the current buffer, regardless of which buffer is displayed in @var{window}.  This makes possible to use @code{count-screen-lines} in any buffer, whether or not it is currently displayed in some window."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:620
#, no-wrap
msgid "Command move-to-window-line count"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:629
msgid "This function moves point with respect to the text currently displayed in the selected window.  It moves point to the beginning of the screen line @var{count} screen lines from the top of the window; zero means the topmost line.  If @var{count} is negative, that specifies a position @w{@minus{}@var{count}} lines from the bottom (or the last line of the buffer, if the buffer ends above the specified screen position); thus, @var{count} of @minus{}1 specifies the last fully visible screen line of the window."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:636
msgid "If @var{count} is @code{nil}, then point moves to the beginning of the line in the middle of the window.  If the absolute value of @var{count} is greater than the size of the window, then point moves to the place that would appear on that screen line if the window were tall enough.  This will probably cause the next redisplay to scroll to bring that location onto the screen."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:641
msgid "The value returned is the screen line number point has moved to, relative to the top line of the window."
msgstr ""

#. type: vindex
#: original_texis/positions.texi:643
#, no-wrap
msgid "move-to-window-group-line-function"
msgstr ""

#. type: defun
#: original_texis/positions.texi:644
#, no-wrap
msgid "move-to-window-group-line count"
msgstr ""

#. type: defun
#: original_texis/positions.texi:653
msgid "This function is like @code{move-to-window-line}, except that when the selected window is a part of a group of windows (@pxref{Window Group}), @code{move-to-window-group-line} will move to a position with respect to the entire group, not just the single window.  This condition holds when the buffer local variable @code{move-to-window-group-line-function} is set to a function.  In this case, @code{move-to-window-group-line} calls the function with the argument @var{count}, then returns its result."
msgstr ""

#. type: defun
#: original_texis/positions.texi:655
#, no-wrap
msgid "compute-motion from frompos to topos width offsets window"
msgstr ""

#. type: defun
#: original_texis/positions.texi:661
msgid "This function scans the current buffer, calculating screen positions.  It scans the buffer forward from position @var{from}, assuming that is at screen coordinates @var{frompos}, to position @var{to} or coordinates @var{topos}, whichever comes first.  It returns the ending buffer position and screen coordinates."
msgstr ""

#. type: defun
#: original_texis/positions.texi:664
msgid "The coordinate arguments @var{frompos} and @var{topos} are cons cells of the form @code{(@var{hpos} . @var{vpos})}."
msgstr ""

#. type: defun
#: original_texis/positions.texi:669
msgid "The argument @var{width} is the number of columns available to display text; this affects handling of continuation lines.  @code{nil} means the actual number of usable text columns in the window, which is equivalent to the value returned by @code{(window-width window)}."
msgstr ""

#. type: defun
#: original_texis/positions.texi:678
msgid "The argument @var{offsets} is either @code{nil} or a cons cell of the form @code{(@var{hscroll} . @var{tab-offset})}.  Here @var{hscroll} is the number of columns not being displayed at the left margin; most callers get this by calling @code{window-hscroll}.  Meanwhile, @var{tab-offset} is the offset between column numbers on the screen and column numbers in the buffer.  This can be nonzero in a continuation line, when the previous screen lines' widths do not add up to a multiple of @code{tab-width}.  It is always zero in a non-continuation line."
msgstr ""

#. type: defun
#: original_texis/positions.texi:682
msgid "The window @var{window} serves only to specify which display table to use.  @code{compute-motion} always operates on the current buffer, regardless of what buffer is displayed in @var{window}."
msgstr ""

#. type: defun
#: original_texis/positions.texi:684
msgid "The return value is a list of five elements:"
msgstr ""

#. type: example
#: original_texis/positions.texi:687
#, no-wrap
msgid "(@var{pos} @var{hpos} @var{vpos} @var{prevhpos} @var{contin})\n"
msgstr ""

#. type: defun
#: original_texis/positions.texi:693
msgid "Here @var{pos} is the buffer position where the scan stopped, @var{vpos} is the vertical screen position, and @var{hpos} is the horizontal screen position."
msgstr ""

#. type: defun
#: original_texis/positions.texi:697
msgid "The result @var{prevhpos} is the horizontal position one character back from @var{pos}.  The result @var{contin} is @code{t} if the last line was continued after (or within) the previous character."
msgstr ""

#. type: defun
#: original_texis/positions.texi:704
msgid "For example, to find the buffer position of column @var{col} of screen line @var{line} of a certain window, pass the window's display start location as @var{from} and the window's upper-left coordinates as @var{frompos}.  Pass the buffer's @code{(point-max)} as @var{to}, to limit the scan to the end of the accessible portion of the buffer, and pass @var{line} and @var{col} as @var{topos}.  Here's a function that does this:"
msgstr ""

#. type: example
#: original_texis/positions.texi:714
#, no-wrap
msgid ""
"(defun coordinates-of-position (col line)\n"
"  (car (compute-motion (window-start)\n"
"                       '(0 . 0)\n"
"                       (point-max)\n"
"                       (cons col line)\n"
"                       (window-width)\n"
"                       (cons (window-hscroll) 0)\n"
"                       (selected-window))))\n"
msgstr ""

#. type: defun
#: original_texis/positions.texi:719
msgid "When you use @code{compute-motion} for the minibuffer, you need to use @code{minibuffer-prompt-width} to get the horizontal position of the beginning of the first screen line.  @xref{Minibuffer Contents}."
msgstr ""

#. type: subsection
#: original_texis/positions.texi:722
#, no-wrap
msgid "Moving over Balanced Expressions"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:723
#, no-wrap
msgid "sexp motion"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:724
#, no-wrap
msgid "Lisp expression motion"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:725
#, no-wrap
msgid "list motion"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:726
#, no-wrap
msgid "balanced parenthesis motion"
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:735
msgid "Here are several functions concerned with balanced-parenthesis expressions (also called @dfn{sexps} in connection with moving across them in Emacs).  The syntax table controls how these functions interpret various characters; see @ref{Syntax Tables}.  @xref{Parsing Expressions}, for lower-level primitives for scanning sexps or parts of sexps.  For user-level commands, see @ref{Parentheses,, Commands for Editing with Parentheses, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:736
#, no-wrap
msgid "Command forward-list &optional arg"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:740
msgid "This function moves forward across @var{arg} (default 1) balanced groups of parentheses.  (Other syntactic entities such as words or paired string quotes are ignored.)"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:742
#, no-wrap
msgid "Command backward-list &optional arg"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:746
msgid "This function moves backward across @var{arg} (default 1) balanced groups of parentheses.  (Other syntactic entities such as words or paired string quotes are ignored.)"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:748
#, no-wrap
msgid "Command up-list &optional arg escape-strings no-syntax-crossing"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:757
msgid "This function moves forward out of @var{arg} (default 1) levels of parentheses.  A negative argument means move backward but still to a less deep spot.  If @var{escape-strings} is non-@code{nil} (as it is interactively), move out of enclosing strings as well.  If @var{no-syntax-crossing} is non-@code{nil} (as it is interactively), prefer to break out of any enclosing string instead of moving to the start of a list broken across multiple strings.  On error, location of point is unspecified."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:759
#, no-wrap
msgid "Command backward-up-list &optional arg escape-strings no-syntax-crossing"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:761
msgid "This function is just like @code{up-list}, but with a negated argument."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:763
#, no-wrap
msgid "Command down-list &optional arg"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:767
msgid "This function moves forward into @var{arg} (default 1) levels of parentheses.  A negative argument means move backward but still go deeper in parentheses (@minus{}@var{arg} levels)."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:769
#, no-wrap
msgid "Command forward-sexp &optional arg"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:774
msgid "This function moves forward across @var{arg} (default 1) balanced expressions.  Balanced expressions include both those delimited by parentheses and other kinds, such as words and string constants.  @xref{Parsing Expressions}.  For example,"
msgstr ""

#. type: group
#: original_texis/positions.texi:780
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"(concat@point{} \"foo \" (car x) y z)\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: original_texis/positions.texi:785
#, no-wrap
msgid ""
"(forward-sexp 3)\n"
"     @result{} nil\n"
"\n"
msgstr ""

#. type: group
#: original_texis/positions.texi:789
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"(concat \"foo \" (car x) y@point{} z)\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: vindex
#: original_texis/positions.texi:792
#, no-wrap
msgid "forward-sexp-function"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:799
msgid "@code{forward-sexp} calls the function that is the value of the variable @code{forward-sexp-function}, if that is non-@code{nil}, to do the actual work, passing it the same arguments as those with which the command was called.  Major modes can define their own functions for moving over balanced expressions as appropriate for the mode, and set this variable to that function."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:801
#, no-wrap
msgid "Command backward-sexp &optional arg"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:803
msgid "This function moves backward across @var{arg} (default 1) balanced expressions."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:805
#, no-wrap
msgid "Command beginning-of-defun &optional arg"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:810
msgid "This function moves back to the @var{arg}th beginning of a defun.  If @var{arg} is negative, this actually moves forward, but it still moves to the beginning of a defun, not to the end of one.  @var{arg} defaults to 1."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:812
#, no-wrap
msgid "Command end-of-defun &optional arg"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:817
msgid "This function moves forward to the @var{arg}th end of a defun.  If @var{arg} is negative, this actually moves backward, but it still moves to the end of a defun, not to the beginning of one.  @var{arg} defaults to 1."
msgstr ""

#. type: defopt
#: original_texis/positions.texi:819
#, no-wrap
msgid "defun-prompt-regexp"
msgstr ""

#. type: defopt
#: original_texis/positions.texi:825
msgid "If non-@code{nil}, this buffer-local variable holds a regular expression that specifies what text can appear before the open-parenthesis that starts a defun.  That is to say, a defun begins on a line that starts with a match for this regular expression, followed by a character with open-parenthesis syntax."
msgstr ""

#. type: cindex
#: original_texis/positions.texi:827
#, no-wrap
msgid "\\( in strings"
msgstr ""

#. type: defopt
#: original_texis/positions.texi:828
#, no-wrap
msgid "open-paren-in-column-0-is-defun-start"
msgstr ""

#. type: defopt
#: original_texis/positions.texi:835
msgid "If this variable's value is non-@code{nil}, an open parenthesis in column 0 is considered to be the start of a defun.  If it is @code{nil}, an open parenthesis in column 0 has no special meaning.  The default is @code{t}.  If a string literal happens to have a parenthesis in column 0, escape it with a backslash to avoid a false positive."
msgstr ""

#. type: defvar
#: original_texis/positions.texi:837
#, no-wrap
msgid "beginning-of-defun-function"
msgstr ""

#. type: defvar
#: original_texis/positions.texi:844
msgid "If non-@code{nil}, this variable holds a function for finding the beginning of a defun.  The function @code{beginning-of-defun} calls this function instead of using its normal method, passing it its optional argument.  If the argument is non-@code{nil}, the function should move back by that many functions, like @code{beginning-of-defun} does."
msgstr ""

#. type: defvar
#: original_texis/positions.texi:846
#, no-wrap
msgid "end-of-defun-function"
msgstr ""

#. type: defvar
#: original_texis/positions.texi:850
msgid "If non-@code{nil}, this variable holds a function for finding the end of a defun.  The function @code{end-of-defun} calls this function instead of using its normal method."
msgstr ""

#. type: findex
#: original_texis/positions.texi:852
#, no-wrap
msgid "treesit-beginning-of-defun"
msgstr ""

#. type: findex
#: original_texis/positions.texi:853
#, no-wrap
msgid "treesit-end-of-defun"
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:860
msgid "If Emacs is compiled with tree-sitter, it can use the tree-sitter parser information to move across syntax constructs.  Since what exactly is considered a defun varies between languages, a major mode should set @code{treesit-defun-type-regexp} to determine that.  Then the mode can get navigation-by-defun functionality for free, by using @code{treesit-beginning-of-defun} and @code{treesit-end-of-defun}."
msgstr ""

#. type: defvar
#: original_texis/positions.texi:861
#, no-wrap
msgid "treesit-defun-type-regexp"
msgstr ""

#. type: defvar
#: original_texis/positions.texi:865
msgid "This variable determines which nodes are considered defuns by Emacs.  It can be a regexp that matches the type of defun nodes.  (For ``node'' and ``node type'', @pxref{Parsing Program Source}.)"
msgstr ""

#. type: defvar
#: original_texis/positions.texi:868
msgid "For example, @code{python-mode} sets this variable to a regexp that matches either @samp{function_definition} or @samp{class_definition}."
msgstr ""

#. type: defvar
#: original_texis/positions.texi:874
msgid "Sometimes not all nodes matched by the regexp are valid defuns.  Therefore, this variable can also be a cons cell of the form @w{(@var{regexp} . @var{pred})}, where @var{pred} should be a function that takes a node as its argument, and returns non-@code{nil} if the node is a valid defun, or @code{nil} if it is not valid."
msgstr ""

#. type: defvar
#: original_texis/positions.texi:876
#, no-wrap
msgid "treesit-defun-tactic"
msgstr ""

#. type: defvar
#: original_texis/positions.texi:881
msgid "This variable determines how Emacs treats nested defuns.  If the value is @code{top-level}, navigation functions only move across top-level defuns.  If the value is @code{nested}, navigation functions recognize nested defuns."
msgstr ""

#. type: findex
#: original_texis/positions.texi:883
#, no-wrap
msgid "treesit-forward-sentence"
msgstr ""

#. type: findex
#: original_texis/positions.texi:884
#, no-wrap
msgid "forward-sentence"
msgstr ""

#. type: findex
#: original_texis/positions.texi:885
#, no-wrap
msgid "backward-sentence"
msgstr ""

#. type: vindex
#: original_texis/positions.texi:886
#, no-wrap
msgid "forward-sentence-function"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:887
#, no-wrap
msgid "sentence, in program source files"
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:901
msgid "The function that is the value of the variable @code{forward-sentence-function} determines how to move across syntax constructs known as @dfn{sentences}.  Major modes can assign their own functions to this variable to customize the behavior of @code{forward-sentence} command.  If Emacs is compiled with tree-sitter, it can use the tree-sitter parser information to move across syntax constructs.  Since what exactly is considered a sentence varies between languages, a major mode should set @code{treesit-thing-settings} to determine that.  Then @code{forward-sentence-function} will be set to @code{treesit-forward-sentence}, and the mode will get navigation-by-sentence functionality for free, by using @code{forward-sentence} and @code{backward-sentence}(@pxref{Moving by Sentences,,, emacs, The extensible self-documenting text editor})."
msgstr ""

#. type: findex
#: original_texis/positions.texi:902
#, no-wrap
msgid "treesit-forward-sexp"
msgstr ""

#. type: findex
#: original_texis/positions.texi:903
#, no-wrap
msgid "forward-sexp@r{, and tree-sitter}"
msgstr ""

#. type: findex
#: original_texis/positions.texi:904
#, no-wrap
msgid "backward-sexp@r{, and tree-sitter}"
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:913
msgid "If Emacs is compiled with tree-sitter, it can use the tree-sitter parser information to move across syntax constructs.  Since what exactly is considered a sexp varies between languages, a major mode should set @code{treesit-thing-settings} to determine that.  Then @code{forward-sexp-function} will be set to @code{treesit-forward-sexp}, and the mode can get navigation-by-sexp functionality for free, by using @code{forward-sexp} and @code{backward-sexp}(@pxref{Expressions, ,, emacs, The extensible self-documenting text editor})."
msgstr ""

#. type: cindex
#: original_texis/positions.texi:916
#, no-wrap
msgid "skipping characters"
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:921
msgid "The following two functions move point over a specified set of characters.  For example, they are often used to skip whitespace.  For related functions, see @ref{Motion and Syntax}."
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:925
msgid "These functions convert the set string to multibyte if the buffer is multibyte, and they convert it to unibyte if the buffer is unibyte, as the search functions do (@pxref{Searching and Matching})."
msgstr ""

#. type: defun
#: original_texis/positions.texi:926
#, no-wrap
msgid "skip-chars-forward character-set &optional limit"
msgstr ""

#. type: defun
#: original_texis/positions.texi:932
msgid "This function moves point in the current buffer forward, skipping over a given set of characters.  It examines the character following point, then advances point if the character matches @var{character-set}.  This continues until it reaches a character that does not match.  The function returns the number of characters moved over."
msgstr ""

#. type: defun
#: original_texis/positions.texi:940
msgid "The argument @var{character-set} is a string, like the inside of a @samp{[@dots{}]} in a regular expression except that @samp{]} does not terminate it, and @samp{\\} quotes @samp{^}, @samp{-} or @samp{\\}.  Thus, @code{\"a-zA-Z\"} skips over all letters, stopping before the first nonletter, and @code{\"^a-zA-Z\"} skips nonletters stopping before the first letter (@pxref{Regular Expressions}).  Character classes can also be used, e.g., @code{\"[:alnum:]\"} (@pxref{Char Classes})."
msgstr ""

#. type: defun
#: original_texis/positions.texi:944
msgid "If @var{limit} is supplied (it must be a number or a marker), it specifies the maximum position in the buffer that point can be skipped to.  Point will stop at or before @var{limit}."
msgstr ""

#. type: defun
#: original_texis/positions.texi:949
msgid "In the following example, point is initially located directly before the @samp{T}.  After the form is evaluated, point is located at the end of that line (between the @samp{t} of @samp{hat} and the newline).  The function skips all letters and spaces, but not newlines."
msgstr ""

#. type: group
#: original_texis/positions.texi:956
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"I read \"@point{}The cat in the hat\n"
"comes back\" twice.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: original_texis/positions.texi:961
#, no-wrap
msgid ""
"(skip-chars-forward \"a-zA-Z \")\n"
"     @result{} 18\n"
"\n"
msgstr ""

#. type: group
#: original_texis/positions.texi:966
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"I read \"The cat in the hat@point{}\n"
"comes back\" twice.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: defun
#: original_texis/positions.texi:970
#, no-wrap
msgid "skip-chars-backward character-set &optional limit"
msgstr ""

#. type: defun
#: original_texis/positions.texi:974
msgid "This function moves point backward, skipping characters that match @var{character-set}, until @var{limit}.  It is just like @code{skip-chars-forward} except for the direction of motion."
msgstr ""

#. type: defun
#: original_texis/positions.texi:977
msgid "The return value indicates the distance traveled.  It is an integer that is zero or less."
msgstr ""

#. type: cindex
#: original_texis/positions.texi:981
#, no-wrap
msgid "excursion"
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:991
msgid "It is often useful to move point temporarily within a localized portion of the program.  This is called an @dfn{excursion}, and it is done with the @code{save-excursion} special form.  This construct remembers the initial identity of the current buffer, and its value of point, and restores them after the excursion completes.  It is the standard way to move point within one part of a program and avoid affecting the rest of the program, and is used thousands of times in the Lisp sources of Emacs."
msgstr ""

#.  frameset?
#. type: Plain text
#: original_texis/positions.texi:997
msgid "If you only need to save and restore the identity of the current buffer, use @code{save-current-buffer} or @code{with-current-buffer} instead (@pxref{Current Buffer}).  If you need to save or restore window configurations, see the forms described in @ref{Window Configurations} and in @ref{Frame Configurations}."
msgstr ""

#. type: defspec
#: original_texis/positions.texi:998
#, no-wrap
msgid "save-excursion body@dots{}"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:999 original_texis/positions.texi:1050
#, no-wrap
msgid "point excursion"
msgstr ""

#. type: defspec
#: original_texis/positions.texi:1005
msgid "This special form saves the identity of the current buffer and the value of point in it, evaluates @var{body}, and finally restores the buffer and its saved value of point.  Both saved values are restored even in case of an abnormal exit via @code{throw} or error (@pxref{Nonlocal Exits})."
msgstr ""

#. type: defspec
#: original_texis/positions.texi:1008
msgid "The value returned by @code{save-excursion} is the result of the last form in @var{body}, or @code{nil} if no body forms were given."
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:1016
msgid "Because @code{save-excursion} only saves point for the buffer that was current at the start of the excursion, any changes made to point in other buffers, during the excursion, will remain in effect afterward.  This frequently leads to unintended consequences, so the byte compiler warns if you call @code{set-buffer} during an excursion:"
msgstr ""

#. type: example
#: original_texis/positions.texi:1020
#, no-wrap
msgid ""
"Warning: Use with-current-buffer rather than\n"
"         save-excursion+set-buffer\n"
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:1025
msgid "To avoid such problems, you should call @code{save-excursion} only after setting the desired current buffer, as in the following example:"
msgstr ""

#. type: group
#: original_texis/positions.texi:1034
#, no-wrap
msgid ""
"(defun append-string-to-buffer (string buffer)\n"
"  \"Append STRING to the end of BUFFER.\"\n"
"  (with-current-buffer buffer\n"
"    (save-excursion\n"
"      (goto-char (point-max))\n"
"      (insert string))))\n"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:1037
#, no-wrap
msgid "window excursions"
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:1040
msgid "Likewise, @code{save-excursion} does not restore window-buffer correspondences altered by functions such as @code{switch-to-buffer}."
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:1047
msgid "@strong{Warning:} Ordinary insertion of text adjacent to the saved point value relocates the saved value, just as it relocates all markers.  More precisely, the saved value is a marker with insertion type @code{nil}.  @xref{Marker Insertion Types}.  Therefore, when the saved point value is restored, it normally comes before the inserted text."
msgstr ""

#. type: defmac
#: original_texis/positions.texi:1048
#, no-wrap
msgid "save-mark-and-excursion body@dots{}"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:1049
#, no-wrap
msgid "mark excursion"
msgstr ""

#. type: defmac
#: original_texis/positions.texi:1054
msgid "This macro is like @code{save-excursion}, but also saves and restores the mark location and @code{mark-active}.  This macro does what @code{save-excursion} did before Emacs 25.1."
msgstr ""

#. type: cindex
#: original_texis/positions.texi:1058
#, no-wrap
msgid "narrowing"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:1059
#, no-wrap
msgid "restriction (in a buffer)"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:1060
#, no-wrap
msgid "accessible portion (of a buffer)"
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:1066
msgid "@dfn{Narrowing} means limiting the text addressable by Emacs editing commands to a limited range of characters in a buffer.  The text that remains addressable is called the @dfn{accessible portion} of the buffer."
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:1077
msgid "Narrowing is specified with two buffer positions, which become the beginning and end of the accessible portion.  For most editing commands and primitives, these positions replace the values of the beginning and end of the buffer.  While narrowing is in effect, no text outside the accessible portion is displayed, and point cannot move outside the accessible portion.  Note that narrowing does not alter actual buffer positions (@pxref{Point}); it only determines which positions are considered the accessible portion of the buffer.  Most functions refuse to operate on text that is outside the accessible portion."
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:1080
msgid "Commands for saving buffers are unaffected by narrowing; they save the entire buffer regardless of any narrowing."
msgstr ""

#. type: Plain text
#: original_texis/positions.texi:1084
msgid "If you need to display in a single buffer several very different types of text, consider using an alternative facility described in @ref{Swapping Text}."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:1085
#, no-wrap
msgid "Command narrow-to-region start end"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:1089
msgid "This function sets the accessible portion of the current buffer to start at @var{start} and end at @var{end}.  Both arguments should be character positions."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:1092
msgid "In an interactive call, @var{start} and @var{end} are set to the bounds of the current region (point and the mark, with the smallest first)."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:1100
msgid "However, when the narrowing has been set by @code{with-restriction} with a label argument (see below), @code{narrow-to-region} can be used only within the limits of that narrowing.  If @var{start} or @var{end} are outside these limits, the corresponding limit set by @code{with-restriction} is used instead.  To gain access to other portions of the buffer, use @code{without-restriction} with the same label."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:1102
#, no-wrap
msgid "Command narrow-to-page &optional move-count"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:1109
msgid "This function sets the accessible portion of the current buffer to include just the current page.  An optional first argument @var{move-count} non-@code{nil} means to move forward or backward by @var{move-count} pages and then narrow to one page.  The variable @code{page-delimiter} specifies where pages start and end (@pxref{Standard Regexps})."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:1112
msgid "In an interactive call, @var{move-count} is set to the numeric prefix argument."
msgstr ""

#. type: deffn
#: original_texis/positions.texi:1114
#, no-wrap
msgid "Command widen"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:1115
#, no-wrap
msgid "widening"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:1119
msgid "This function cancels any narrowing in the current buffer, so that the entire contents are accessible.  This is called @dfn{widening}.  It is equivalent to the following expression:"
msgstr ""

#. type: example
#: original_texis/positions.texi:1122
#, no-wrap
msgid "(narrow-to-region 1 (1+ (buffer-size)))\n"
msgstr ""

#. type: deffn
#: original_texis/positions.texi:1129
msgid "However, when a narrowing has been set by @code{with-restriction} with a label argument (see below), the limits set by @code{with-restriction} are restored, instead of canceling the narrowing.  To gain access to other portions of the buffer, use @code{without-restriction} with the same label."
msgstr ""

#. type: defun
#: original_texis/positions.texi:1131
#, no-wrap
msgid "buffer-narrowed-p"
msgstr ""

#. type: defun
#: original_texis/positions.texi:1134
msgid "This function returns non-@code{nil} if the buffer is narrowed, and @code{nil} otherwise."
msgstr ""

#. type: defspec
#: original_texis/positions.texi:1136
#, no-wrap
msgid "save-restriction body@dots{}"
msgstr ""

#. type: defspec
#: original_texis/positions.texi:1143
msgid "This special form saves the current bounds of the accessible portion, evaluates the @var{body} forms, and finally restores the saved bounds, thus restoring the same state of narrowing (or absence thereof) formerly in effect.  The state of narrowing is restored even in the event of an abnormal exit via @code{throw} or error (@pxref{Nonlocal Exits}).  Therefore, this construct is a clean way to narrow a buffer temporarily."
msgstr ""

#. type: defspec
#: original_texis/positions.texi:1146
msgid "This construct also saves and restores the narrowings that were set by @code{with-restriction} with a label argument (see below)."
msgstr ""

#. type: defspec
#: original_texis/positions.texi:1149
msgid "The value returned by @code{save-restriction} is that returned by the last form in @var{body}, or @code{nil} if no body forms were given."
msgstr ""

#. type: defspec
#: original_texis/positions.texi:1154
msgid "@strong{Caution:} it is easy to make a mistake when using the @code{save-restriction} construct.  Read the entire description here before you try it."
msgstr ""

#. type: defspec
#: original_texis/positions.texi:1159
msgid "If @var{body} changes the current buffer, @code{save-restriction} still restores the restrictions on the original buffer (the buffer whose restrictions it saved from), but it does not restore the identity of the current buffer."
msgstr ""

#. type: defspec
#: original_texis/positions.texi:1167
msgid "@code{save-restriction} does @emph{not} restore point; use @code{save-excursion} for that.  If you use both @code{save-restriction} and @code{save-excursion} together, @code{save-excursion} should come first (on the outside).  Otherwise, the old point value would be restored with temporary narrowing still in effect.  If the old point value were outside the limits of the temporary narrowing, this would fail to restore it accurately."
msgstr ""

#. type: defspec
#: original_texis/positions.texi:1169
msgid "Here is a simple example of correct use of @code{save-restriction}:"
msgstr ""

#. type: group
#: original_texis/positions.texi:1177
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of foo\n"
"This is the contents of foo\n"
"This is the contents of foo@point{}\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: original_texis/positions.texi:1187
#, no-wrap
msgid ""
"(save-excursion\n"
"  (save-restriction\n"
"    (goto-char 1)\n"
"    (forward-line 2)\n"
"    (narrow-to-region 1 (point))\n"
"    (goto-char (point-min))\n"
"    (replace-string \"foo\" \"bar\")))\n"
"\n"
msgstr ""

#. type: group
#: original_texis/positions.texi:1193
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of bar\n"
"This is the contents of bar\n"
"This is the contents of foo@point{}\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: defspec
#: original_texis/positions.texi:1197
#, no-wrap
msgid "with-restriction start end [:label label] body"
msgstr ""

#. type: defspec
#: original_texis/positions.texi:1202
msgid "This special form saves the current bounds of the accessible portion of the buffer, sets the accessible portion to start at @var{start} and end at @var{end}, evaluates the @var{body} forms, and restores the saved bounds.  In that case it is equivalent to"
msgstr ""

#. type: example
#: original_texis/positions.texi:1207
#, no-wrap
msgid ""
"(save-restriction\n"
"  (narrow-to-region start end)\n"
"  body)\n"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:1209
#, no-wrap
msgid "labeled narrowing"
msgstr ""

#. type: cindex
#: original_texis/positions.texi:1210
#, no-wrap
msgid "labeled restriction"
msgstr ""

#. type: defspec
#: original_texis/positions.texi:1215
msgid "When the optional argument @var{label}, which is evaluated to get the label to use and must yield a non-@code{nil} value, is present, the narrowing is @dfn{labeled}.  A labeled narrowing differs from a non-labeled one in several ways:"
msgstr ""

#. type: itemize
#: original_texis/positions.texi:1221
msgid "During the evaluation of the @var{body} form, @code{narrow-to-region} and @code{widen} can be used only within the @var{start} and @var{end} limits."
msgstr ""

#. type: itemize
#: original_texis/positions.texi:1228
msgid "To lift the restriction introduced by @code{with-restriction} and gain access to other portions of the buffer, use @code{without-restriction} with the same @var{label} argument.  (Another way to gain access to other portions of the buffer is to use an indirect buffer (@pxref{Indirect Buffers}).)"
msgstr ""

#. type: itemize
#: original_texis/positions.texi:1231
msgid "Labeled narrowings can be nested."
msgstr ""

#. type: itemize
#: original_texis/positions.texi:1236
msgid "Labeled narrowings can only be used in Lisp programs: they are never visible on display, and never interfere with narrowings set by the user."
msgstr ""

#. type: defspec
#: original_texis/positions.texi:1242
msgid "If you use @code{with-restriction} with the optional @var{label} argument, we recommend documenting the @var{label} in the doc strings of the functions which use it, so that other Lisp programs your code calls could lift the labeled narrowing if and when it needs."
msgstr ""

#. type: defspec
#: original_texis/positions.texi:1244
#, no-wrap
msgid "without-restriction [:label label] body"
msgstr ""

#. type: defspec
#: original_texis/positions.texi:1248
msgid "This special form saves the current bounds of the accessible portion of the buffer, widens the buffer, evaluates the @var{body} forms, and restores the saved bounds.  In that case it is equivalent to"
msgstr ""

#. type: example
#: original_texis/positions.texi:1253
#, no-wrap
msgid ""
"(save-restriction\n"
"  (widen)\n"
"  body)\n"
msgstr ""

#. type: defspec
#: original_texis/positions.texi:1258
msgid "When the optional argument @var{label} is present, the narrowing set by @code{with-restriction} with the same @var{label} argument is lifted."
msgstr ""
