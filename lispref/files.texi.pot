# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2024-06-26 15:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: original_texis/files.texi:6 original_texis/files.texi:7
#, no-wrap
msgid "Files"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:14
msgid ""
"This chapter describes the Emacs Lisp functions and variables to find, "
"create, view, save, and otherwise work with files and directories.  A few "
"other file-related functions are described in @ref{Buffers}, and those "
"related to backups and auto-saving are described in @ref{Backups and "
"Auto-Saving}."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:20
msgid ""
"Many of the file functions take one or more arguments that are file names.  "
"A file name is a string.  Most of these functions expand file name arguments "
"using the function @code{expand-file-name}, so that @file{~} is handled "
"correctly, as are relative file names (including @file{../} and the empty "
"string).  @xref{File Name Expansion}."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:28
msgid ""
"In addition, certain @dfn{magic} file names are handled specially.  For "
"example, when a remote file name is specified, Emacs accesses the file over "
"the network via an appropriate protocol.  @xref{Remote Files,, Remote Files, "
"emacs, The GNU Emacs Manual}.  This handling is done at a very low level, so "
"you may assume that all the functions described in this chapter accept magic "
"file names as file name arguments, except where noted.  @xref{Magic File "
"Names}, for details."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:34
msgid ""
"When file I/O functions signal Lisp errors, they usually use the condition "
"@code{file-error} (@pxref{Handling Errors}).  The error message is in most "
"cases obtained from the operating system, according to locale "
"@code{system-messages-locale}, and decoded using coding system "
"@code{locale-coding-system} (@pxref{Locales})."
msgstr ""

#. type: section
#: original_texis/files.texi:50 original_texis/files.texi:52
#: original_texis/files.texi:53
#, no-wrap
msgid "Visiting Files"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:50
msgid "Reading files into Emacs buffers for editing."
msgstr ""

#. type: section
#: original_texis/files.texi:50 original_texis/files.texi:327
#: original_texis/files.texi:328
#, no-wrap
msgid "Saving Buffers"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:50
msgid "Writing changed buffers back into files."
msgstr ""

#. type: section
#: original_texis/files.texi:50 original_texis/files.texi:527
#: original_texis/files.texi:528
#, no-wrap
msgid "Reading from Files"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:50
msgid "Reading files into buffers without visiting."
msgstr ""

#. type: section
#: original_texis/files.texi:50 original_texis/files.texi:604
#: original_texis/files.texi:605
#, no-wrap
msgid "Writing to Files"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:50
msgid "Writing new files from parts of buffers."
msgstr ""

#. type: section
#: original_texis/files.texi:50 original_texis/files.texi:721
#: original_texis/files.texi:722
#, no-wrap
msgid "File Locks"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:50
msgid "Locking and unlocking files, to prevent simultaneous editing by two people."
msgstr ""

#. type: section
#: original_texis/files.texi:50 original_texis/files.texi:848
#: original_texis/files.texi:849
#, no-wrap
msgid "Information about Files"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:50
msgid "Testing existence, accessibility, size of files."
msgstr ""

#. type: node
#: original_texis/files.texi:50 original_texis/files.texi:1653
#, no-wrap
msgid "Changing Files"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:50
msgid "Renaming files, changing permissions, etc."
msgstr ""

#. type: node
#: original_texis/files.texi:50 original_texis/files.texi:2041
#, no-wrap
msgid "Files and Storage"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:50
msgid "Surviving power and media failures"
msgstr ""

#. type: section
#: original_texis/files.texi:50 original_texis/files.texi:2063
#: original_texis/files.texi:2064
#, no-wrap
msgid "File Names"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:50
msgid "Decomposing and expanding file names."
msgstr ""

#. type: section
#: original_texis/files.texi:50 original_texis/files.texi:3012
#: original_texis/files.texi:3013
#, no-wrap
msgid "Contents of Directories"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:50
msgid "Getting a list of the files in a directory."
msgstr ""

#. type: node
#: original_texis/files.texi:50 original_texis/files.texi:3213
#, no-wrap
msgid "Create/Delete Dirs"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:50
msgid "Creating and Deleting Directories."
msgstr ""

#. type: node
#: original_texis/files.texi:50 original_texis/files.texi:3287
#, no-wrap
msgid "Magic File Names"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:50
msgid "Special handling for certain file names."
msgstr ""

#. type: node
#: original_texis/files.texi:50 original_texis/files.texi:3675
#, no-wrap
msgid "Format Conversion"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:50
msgid "Conversion to and from various file formats."
msgstr ""

#. type: cindex
#: original_texis/files.texi:54
#, no-wrap
msgid "finding files"
msgstr ""

#. type: cindex
#: original_texis/files.texi:55
#, no-wrap
msgid "visiting files"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:60
msgid ""
"Visiting a file means reading a file into a buffer.  Once this is done, we "
"say that the buffer is @dfn{visiting} that file, and call the file @dfn{the "
"visited file} of the buffer."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:70
msgid ""
"A file and a buffer are two different things.  A file is information "
"recorded permanently in the computer (unless you delete it).  A buffer, on "
"the other hand, is information inside of Emacs that will vanish at the end "
"of the editing session (or when you kill the buffer).  When a buffer is "
"visiting a file, it contains information copied from the file.  The copy in "
"the buffer is what you modify with editing commands.  Changes to the buffer "
"do not change the file; to make the changes permanent, you must @dfn{save} "
"the buffer, which means copying the altered buffer contents back into the "
"file."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:77
msgid ""
"Despite the distinction between files and buffers, people often refer to a "
"file when they mean a buffer and vice-versa.  Indeed, we say, ``I am editing "
"a file'', rather than, ``I am editing a buffer that I will soon save as a "
"file of the same name''.  Humans do not usually need to make the distinction "
"explicit.  When dealing with a computer program, however, it is good to keep "
"the distinction in mind."
msgstr ""

#. type: node
#: original_texis/files.texi:81 original_texis/files.texi:83
#, no-wrap
msgid "Visiting Functions"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:81
msgid "The usual interface functions for visiting."
msgstr ""

#. type: subsection
#: original_texis/files.texi:81 original_texis/files.texi:253
#: original_texis/files.texi:254
#, no-wrap
msgid "Subroutines of Visiting"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:81
msgid "Lower-level subroutines that they use."
msgstr ""

#. type: subsection
#: original_texis/files.texi:84
#, no-wrap
msgid "Functions for Visiting Files"
msgstr ""

#. type: cindex
#: original_texis/files.texi:85
#, no-wrap
msgid "visiting files, functions for"
msgstr ""

#. type: cindex
#: original_texis/files.texi:86
#, no-wrap
msgid "how to visit files"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:93
msgid ""
"This section describes the functions normally used to visit files.  For "
"historical reasons, these functions have names starting with @samp{find-} "
"rather than @samp{visit-}.  @xref{Buffer File Name}, for functions and "
"variables that access the visited file name of a buffer or that find an "
"existing buffer by its visited file name."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:98
msgid ""
"In a Lisp program, if you want to look at the contents of a file but not "
"alter it, the fastest way is to use @code{insert-file-contents} in a "
"temporary buffer.  Visiting the file is not necessary and takes longer.  "
"@xref{Reading from Files}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:99
#, no-wrap
msgid "Command find-file filename &optional wildcards"
msgstr ""

#. type: deffn
#: original_texis/files.texi:103
msgid ""
"This command selects a buffer visiting the file @var{filename}, using an "
"existing buffer if there is one, and otherwise creating a new buffer and "
"reading the file into it.  It also returns that buffer."
msgstr ""

#. type: deffn
#: original_texis/files.texi:106
msgid ""
"Aside from some technical details, the body of the @code{find-file} function "
"is basically equivalent to:"
msgstr ""

#. type: smallexample
#: original_texis/files.texi:109
#, no-wrap
msgid "(switch-to-buffer (find-file-noselect filename nil nil wildcards))\n"
msgstr ""

#. type: deffn
#: original_texis/files.texi:113
msgid "(See @code{switch-to-buffer} in @ref{Switching Buffers}.)"
msgstr ""

#. type: deffn
#: original_texis/files.texi:117
msgid ""
"If @var{wildcards} is non-@code{nil}, which is always true in an interactive "
"call, then @code{find-file} expands wildcard characters in @var{filename} "
"and visits all the matching files."
msgstr ""

#. type: deffn
#: original_texis/files.texi:120
msgid ""
"When @code{find-file} is called interactively, it prompts for @var{filename} "
"in the minibuffer."
msgstr ""

#. type: deffn
#: original_texis/files.texi:122
#, no-wrap
msgid "Command find-file-literally filename"
msgstr ""

#. type: deffn
#: original_texis/files.texi:133
msgid ""
"This command visits @var{filename}, like @code{find-file} does, but it does "
"not perform any format conversions (@pxref{Format Conversion}), character "
"code conversions (@pxref{Coding Systems}), or end-of-line conversions "
"(@pxref{Coding System Basics, End of line conversion}).  The buffer visiting "
"the file is made unibyte, and its major mode is Fundamental mode, regardless "
"of the file name.  File local variable specifications in the file "
"(@pxref{File Local Variables}) are ignored, and automatic decompression and "
"adding a newline at the end of the file due to @code{require-final-newline} "
"(@pxref{Saving Buffers, require-final-newline}) are also disabled."
msgstr ""

#. type: deffn
#: original_texis/files.texi:140
msgid ""
"Note that if Emacs already has a buffer visiting the same file "
"non-literally, it will not visit the same file literally, but instead just "
"switch to the existing buffer.  If you want to be sure of accessing a file's "
"contents literally, you should create a temporary buffer and then read the "
"file contents into it using @code{insert-file-contents-literally} "
"(@pxref{Reading from Files})."
msgstr ""

#. type: defun
#: original_texis/files.texi:142
#, no-wrap
msgid "find-file-noselect filename &optional nowarn rawfile wildcards"
msgstr ""

#. type: defun
#: original_texis/files.texi:147
msgid ""
"This function is the guts of all the file-visiting functions.  It returns a "
"buffer visiting the file @var{filename}.  You may make the buffer current or "
"display it in a window if you wish, but this function does not do so."
msgstr ""

#. type: defun
#: original_texis/files.texi:155
msgid ""
"The function returns an existing buffer if there is one; otherwise it "
"creates a new buffer and reads the file into it.  When "
"@code{find-file-noselect} uses an existing buffer, it first verifies that "
"the file has not changed since it was last visited or saved in that buffer.  "
"If the file has changed, this function asks the user whether to reread the "
"changed file.  If the user says @samp{yes}, any edits previously made in the "
"buffer are lost."
msgstr ""

#. type: defun
#: original_texis/files.texi:161
msgid ""
"Reading the file involves decoding the file's contents (@pxref{Coding "
"Systems}), including end-of-line conversion, and format conversion "
"(@pxref{Format Conversion}).  If @var{wildcards} is non-@code{nil}, then "
"@code{find-file-noselect} expands wildcard characters in @var{filename} and "
"visits all the matching files."
msgstr ""

#. type: defun
#: original_texis/files.texi:167
msgid ""
"This function displays warning or advisory messages in various peculiar "
"cases, unless the optional argument @var{nowarn} is non-@code{nil}.  For "
"example, if it needs to create a buffer, and there is no file named "
"@var{filename}, it displays the message @samp{(New file)} in the echo area, "
"and leaves the buffer empty."
msgstr ""

#. type: defun
#: original_texis/files.texi:174
msgid ""
"The @code{find-file-noselect} function normally calls @code{after-find-file} "
"after reading the file (@pxref{Subroutines of Visiting}).  That function "
"sets the buffer major mode, parses local variables, warns the user if there "
"exists an auto-save file more recent than the file just visited, and "
"finishes by running the functions in @code{find-file-hook}."
msgstr ""

#. type: defun
#: original_texis/files.texi:180
msgid ""
"If the optional argument @var{rawfile} is non-@code{nil}, then "
"@code{after-find-file} is not called, and the "
"@code{find-file-not-found-functions} are not run in case of failure.  What's "
"more, a non-@code{nil} @var{rawfile} value suppresses coding system "
"conversion and format conversion."
msgstr ""

#. type: defun
#: original_texis/files.texi:185
msgid ""
"The @code{find-file-noselect} function usually returns the buffer that is "
"visiting the file @var{filename}.  But, if wildcards are actually used and "
"expanded, it returns a list of buffers that are visiting the various files."
msgstr ""

#. type: group
#: original_texis/files.texi:190
#, no-wrap
msgid ""
"(find-file-noselect \"/etc/fstab\")\n"
"     @result{} #<buffer fstab>\n"
msgstr ""

#. type: deffn
#: original_texis/files.texi:194
#, no-wrap
msgid "Command find-file-other-window filename &optional wildcards"
msgstr ""

#. type: deffn
#: original_texis/files.texi:199
msgid ""
"This command selects a buffer visiting the file @var{filename}, but does so "
"in a window other than the selected window.  It may use another existing "
"window or split a window; see @ref{Switching Buffers}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:202 original_texis/files.texi:211
msgid "When this command is called interactively, it prompts for @var{filename}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:204
#, no-wrap
msgid "Command find-file-read-only filename &optional wildcards"
msgstr ""

#. type: deffn
#: original_texis/files.texi:208
msgid ""
"This command selects a buffer visiting the file @var{filename}, like "
"@code{find-file}, but it marks the buffer as read-only.  @xref{Read Only "
"Buffers}, for related functions and variables."
msgstr ""

#. type: defopt
#: original_texis/files.texi:213
#, no-wrap
msgid "find-file-wildcards"
msgstr ""

#. type: defopt
#: original_texis/files.texi:220
msgid ""
"If this variable is non-@code{nil}, then the various @code{find-file} "
"commands check for wildcard characters and visit all the files that match "
"them (when invoked interactively or when their @var{wildcards} argument is "
"non-@code{nil}).  If this option is @code{nil}, then the @code{find-file} "
"commands ignore their @var{wildcards} argument and never treat wildcard "
"characters specially."
msgstr ""

#. type: defopt
#: original_texis/files.texi:222
#, no-wrap
msgid "find-file-hook"
msgstr ""

#. type: defopt
#: original_texis/files.texi:227
msgid ""
"The value of this variable is a list of functions to be called after a file "
"is visited.  The file's local-variables specification (if any) will have "
"been processed before the hooks are run.  The buffer visiting the file is "
"current when the hook functions are run."
msgstr ""

#. type: defopt
#: original_texis/files.texi:229
msgid "This variable is a normal hook.  @xref{Hooks}."
msgstr ""

#. type: defvar
#: original_texis/files.texi:231
#, no-wrap
msgid "find-file-not-found-functions"
msgstr ""

#. type: defvar
#: original_texis/files.texi:238
msgid ""
"The value of this variable is a list of functions to be called when "
"@code{find-file} or @code{find-file-noselect} is passed a nonexistent file "
"name.  @code{find-file-noselect} calls these functions as soon as it detects "
"a nonexistent file.  It calls them in the order of the list, until one of "
"them returns non-@code{nil}.  @code{buffer-file-name} is already set up."
msgstr ""

#. type: defvar
#: original_texis/files.texi:241
msgid ""
"This is not a normal hook because the values of the functions are used, and "
"in many cases only some of the functions are called."
msgstr ""

#. type: defvar
#: original_texis/files.texi:243
#, no-wrap
msgid "find-file-literally"
msgstr ""

#. type: defvar
#: original_texis/files.texi:251
msgid ""
"This buffer-local variable, if set to a non-@code{nil} value, makes "
"@code{save-buffer} behave as if the buffer were visiting its file literally, "
"i.e., without conversions of any kind.  The command "
"@code{find-file-literally} sets this variable's local value, but other "
"equivalent functions and commands can do that as well, e.g., to avoid "
"automatic addition of a newline at the end of the file.  This variable is "
"permanent local, so it is unaffected by changes of major modes."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:259
msgid ""
"The @code{find-file-noselect} function uses two important subroutines which "
"are sometimes useful in user Lisp code: @code{create-file-buffer} and "
"@code{after-find-file}.  This section explains how to use them."
msgstr ""

#. type: defun
#: original_texis/files.texi:263
#, no-wrap
msgid "create-file-buffer filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:270
msgid ""
"This function creates a suitably named buffer for visiting @var{filename}, "
"and returns it.  It uses @var{filename} (sans directory)  as the name if "
"that name is free; otherwise, it appends a string such as @samp{<2>} to get "
"an unused name.  See also @ref{Creating Buffers}.  Note that the "
"@file{uniquify} library affects the result of this function.  "
"@xref{Uniquify,,, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: defun
#: original_texis/files.texi:274
msgid ""
"@strong{Please note:} @code{create-file-buffer} does @emph{not} associate "
"the new buffer with a file and does not select the buffer.  It also does not "
"use the default major mode."
msgstr ""

#. type: group
#: original_texis/files.texi:279
#, no-wrap
msgid ""
"(create-file-buffer \"foo\")\n"
"     @result{} #<buffer foo>\n"
msgstr ""

#. type: group
#: original_texis/files.texi:283
#, no-wrap
msgid ""
"(create-file-buffer \"foo\")\n"
"     @result{} #<buffer foo<2>>\n"
msgstr ""

#. type: group
#: original_texis/files.texi:287
#, no-wrap
msgid ""
"(create-file-buffer \"foo\")\n"
"     @result{} #<buffer foo<3>>\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:292
msgid ""
"This function is used by @code{find-file-noselect}.  It uses "
"@code{generate-new-buffer} (@pxref{Creating Buffers})."
msgstr ""

#. type: defun
#: original_texis/files.texi:294
#, no-wrap
msgid ""
"after-find-file &optional error warn noauto "
"after-find-file-from-revert-buffer nomodes"
msgstr ""

#. type: defun
#: original_texis/files.texi:298
msgid ""
"This function sets the buffer major mode, and parses local variables "
"(@pxref{Auto Major Mode}).  It is called by @code{find-file-noselect} and by "
"the default revert function (@pxref{Reverting})."
msgstr ""

#. type: cindex
#: original_texis/files.texi:299
#, no-wrap
msgid "new file message"
msgstr ""

#. type: cindex
#: original_texis/files.texi:300
#, no-wrap
msgid "file open error"
msgstr ""

#. type: defun
#: original_texis/files.texi:306
msgid ""
"If reading the file got an error because the file does not exist, but its "
"directory does exist, the caller should pass a non-@code{nil} value for "
"@var{error}.  In that case, @code{after-find-file} issues a warning: "
"@samp{(New file)}.  For more serious errors, the caller should usually not "
"call @code{after-find-file}."
msgstr ""

#. type: defun
#: original_texis/files.texi:309
msgid ""
"If @var{warn} is non-@code{nil}, then this function issues a warning if an "
"auto-save file exists and is more recent than the visited file."
msgstr ""

#. type: defun
#: original_texis/files.texi:312
msgid ""
"If @var{noauto} is non-@code{nil}, that says not to enable or disable "
"Auto-Save mode.  The mode remains enabled if it was enabled before."
msgstr ""

#. type: defun
#: original_texis/files.texi:317
msgid ""
"If @var{after-find-file-from-revert-buffer} is non-@code{nil}, that means "
"this call was from @code{revert-buffer}.  This has no direct effect, but "
"some mode functions and hook functions check the value of this variable."
msgstr ""

#. type: defun
#: original_texis/files.texi:322
msgid ""
"If @var{nomodes} is non-@code{nil}, that means don't alter the buffer's "
"major mode, don't process local variables specifications in the file, and "
"don't run @code{find-file-hook}.  This feature is used by "
"@code{revert-buffer} in some cases."
msgstr ""

#. type: defun
#: original_texis/files.texi:325
msgid ""
"The last thing @code{after-find-file} does is call all the functions in the "
"list @code{find-file-hook}."
msgstr ""

#. type: cindex
#: original_texis/files.texi:329
#, no-wrap
msgid "saving buffers"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:338
msgid ""
"When you edit a file in Emacs, you are actually working on a buffer that is "
"visiting that file---that is, the contents of the file are copied into the "
"buffer and the copy is what you edit.  Changes to the buffer do not change "
"the file until you @dfn{save} the buffer, which means copying the contents "
"of the buffer into the file.  Buffers which are not visiting a file can "
"still be ``saved'', in a sense, using functions in the buffer-local "
"@code{write-contents-functions} hook."
msgstr ""

#. type: deffn
#: original_texis/files.texi:339
#, no-wrap
msgid "Command save-buffer &optional backup-option"
msgstr ""

#. type: deffn
#: original_texis/files.texi:343
msgid ""
"This function saves the contents of the current buffer in its visited file "
"if the buffer has been modified since it was last visited or saved.  "
"Otherwise it does nothing."
msgstr ""

#. type: deffn
#: original_texis/files.texi:349
msgid ""
"@code{save-buffer} is responsible for making backup files.  Normally, "
"@var{backup-option} is @code{nil}, and @code{save-buffer} makes a backup "
"file only if this is the first save since visiting the file.  Other values "
"for @var{backup-option} request the making of backup files in other "
"circumstances:"
msgstr ""

#. type: itemize
#: original_texis/files.texi:355
msgid ""
"With an argument of 4 or 64, reflecting 1 or 3 @kbd{C-u}'s, the "
"@code{save-buffer} function marks this version of the file to be backed up "
"when the buffer is next saved."
msgstr ""

#. type: itemize
#: original_texis/files.texi:360
msgid ""
"With an argument of 16 or 64, reflecting 2 or 3 @kbd{C-u}'s, the "
"@code{save-buffer} function unconditionally backs up the previous version of "
"the file before saving it."
msgstr ""

#. type: itemize
#: original_texis/files.texi:363
msgid "With an argument of 0, unconditionally do @emph{not} make any backup file."
msgstr ""

#. type: deffn
#: original_texis/files.texi:366
#, no-wrap
msgid "Command save-some-buffers &optional save-silently-p pred"
msgstr ""

#. type: anchor{#1}
#: original_texis/files.texi:372
msgid "Definition of save-some-buffers"
msgstr ""

#. type: deffn
#: original_texis/files.texi:372
msgid ""
"This command saves some modified file-visiting buffers.  Normally it asks "
"the user about each buffer.  But if @var{save-silently-p} is non-@code{nil}, "
"it saves all the file-visiting buffers without querying the user."
msgstr ""

#. type: vindex
#: original_texis/files.texi:373
#, no-wrap
msgid "save-some-buffers-default-predicate"
msgstr ""

#. type: deffn
#: original_texis/files.texi:386
msgid ""
"The optional @var{pred} argument provides a predicate that controls which "
"buffers to ask about (or to save silently if @var{save-silently-p} is "
"non-@code{nil}).  If @var{pred} is @code{nil}, that means to use the value "
"of @code{save-some-buffers-default-predicate} instead of @var{pred}.  If the "
"result is @code{nil}, it means ask only about file-visiting buffers.  If it "
"is @code{t}, that means also offer to save certain other non-file "
"buffers---those that have a non-@code{nil} buffer-local value of "
"@code{buffer-offer-save} (@pxref{Killing Buffers}).  A user who says "
"@samp{yes} to saving a non-file buffer is asked to specify the file name to "
"use.  The @code{save-buffers-kill-emacs} function passes the value @code{t} "
"for @var{pred}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:391
msgid ""
"If the predicate is neither @code{t} nor @code{nil}, then it should be a "
"function of no arguments.  It will be called in each buffer to decide "
"whether to offer to save that buffer.  If it returns a non-@code{nil} value "
"in a certain buffer, that means do offer to save that buffer."
msgstr ""

#. type: deffn
#: original_texis/files.texi:393
#, no-wrap
msgid "Command write-file filename &optional confirm"
msgstr ""

#. type: anchor{#1}
#: original_texis/files.texi:401
msgid "Definition of write-file"
msgstr ""

#. type: deffn
#: original_texis/files.texi:401
msgid ""
"This function writes the current buffer into file @var{filename}, makes the "
"buffer visit that file, and marks it not modified.  Then it renames the "
"buffer based on @var{filename}, appending a string like @samp{<2>} if "
"necessary to make a unique buffer name.  It does most of this work by "
"calling @code{set-visited-file-name} (@pxref{Buffer File Name}) and "
"@code{save-buffer}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:405
msgid ""
"If @var{confirm} is non-@code{nil}, that means to ask for confirmation "
"before overwriting an existing file.  Interactively, confirmation is "
"required, unless the user supplies a prefix argument."
msgstr ""

#. type: deffn
#: original_texis/files.texi:410
msgid ""
"If @var{filename} is a directory name (@pxref{Directory Names}), "
"@code{write-file} uses the name of the visited file, in directory "
"@var{filename}.  If the buffer is not visiting a file, it uses the buffer "
"name instead."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:418
msgid ""
"Saving a buffer runs several hooks.  It also performs format conversion "
"(@pxref{Format Conversion}).  Note that these hooks, described below, are "
"only run by @code{save-buffer}, they are not run by other primitives and "
"functions that write buffer text to files, and in particular auto-saving "
"(@pxref{Auto-Saving}) doesn't run these hooks."
msgstr ""

#. type: defvar
#: original_texis/files.texi:419
#, no-wrap
msgid "write-file-functions"
msgstr ""

#. type: defvar
#: original_texis/files.texi:425
msgid ""
"The value of this variable is a list of functions to be called before "
"writing out a buffer to its visited file.  If one of them returns "
"non-@code{nil}, the file is considered already written and the rest of the "
"functions are not called, nor is the usual code for writing the file "
"executed."
msgstr ""

#. type: defvar
#: original_texis/files.texi:429
msgid ""
"If a function in @code{write-file-functions} returns non-@code{nil}, it is "
"responsible for making a backup file (if that is appropriate).  To do so, "
"execute the following code:"
msgstr ""

#. type: example
#: original_texis/files.texi:432
#, no-wrap
msgid "(or buffer-backed-up (backup-buffer))\n"
msgstr ""

#. type: defvar
#: original_texis/files.texi:438
msgid ""
"You might wish to save the file modes value returned by @code{backup-buffer} "
"and use that (if non-@code{nil}) to set the mode bits of the file that you "
"write.  This is what @code{save-buffer} normally does.  @xref{Making "
"Backups,, Making Backup Files}."
msgstr ""

#. type: defvar
#: original_texis/files.texi:445
msgid ""
"The hook functions in @code{write-file-functions} are also responsible for "
"encoding the data (if desired): they must choose a suitable coding system "
"and end-of-line conversion (@pxref{Lisp and Coding Systems}), perform the "
"encoding (@pxref{Explicit Encoding}), and set @code{last-coding-system-used} "
"to the coding system that was used (@pxref{Encoding and I/O})."
msgstr ""

#. type: defvar
#: original_texis/files.texi:453
msgid ""
"If you set this hook locally in a buffer, it is assumed to be associated "
"with the file or the way the contents of the buffer were obtained.  Thus the "
"variable is marked as a permanent local, so that changing the major mode "
"does not alter a buffer-local value.  On the other hand, calling "
"@code{set-visited-file-name} will reset it.  If this is not what you want, "
"you might like to use @code{write-contents-functions} instead."
msgstr ""

#. type: defvar
#: original_texis/files.texi:456
msgid ""
"Even though this is not a normal hook, you can use @code{add-hook} and "
"@code{remove-hook} to manipulate the list.  @xref{Hooks}."
msgstr ""

#. type: defvar
#: original_texis/files.texi:458
#, no-wrap
msgid "write-contents-functions"
msgstr ""

#. type: defvar
#: original_texis/files.texi:467
msgid ""
"This works just like @code{write-file-functions}, but it is intended for "
"hooks that pertain to the buffer's contents, not to the particular visited "
"file or its location, and can be used to create arbitrary save processes for "
"buffers that aren't visiting files at all.  Such hooks are usually set up by "
"major modes, as buffer-local bindings for this variable.  This variable "
"automatically becomes buffer-local whenever it is set; switching to a new "
"major mode always resets this variable, but calling "
"@code{set-visited-file-name} does not."
msgstr ""

#. type: defvar
#: original_texis/files.texi:471
msgid ""
"If any of the functions in this hook returns non-@code{nil}, the file is "
"considered already written and the rest are not called and neither are the "
"functions in @code{write-file-functions}."
msgstr ""

#. type: defvar
#: original_texis/files.texi:478
msgid ""
"When using this hook to save buffers that are not visiting files (for "
"instance, special-mode buffers), keep in mind that, if the function fails to "
"save correctly and returns a @code{nil} value, @code{save-buffer} will go on "
"to prompt the user for a file to save the buffer in.  If this is "
"undesirable, consider having the function fail by raising an error."
msgstr ""

#. type: defopt
#: original_texis/files.texi:480
#, no-wrap
msgid "before-save-hook"
msgstr ""

#. type: defopt
#: original_texis/files.texi:486
msgid ""
"This normal hook runs before a buffer is saved in its visited file, "
"regardless of whether that is done normally or by one of the hooks described "
"above.  For instance, the @file{copyright.el} program uses this hook to make "
"sure the file you are saving has the current year in its copyright notice."
msgstr ""

#. type: defopt
#: original_texis/files.texi:488
#, no-wrap
msgid "after-save-hook"
msgstr ""

#. type: defopt
#: original_texis/files.texi:490
msgid "This normal hook runs after a buffer has been saved in its visited file."
msgstr ""

#. type: defopt
#: original_texis/files.texi:492
#, no-wrap
msgid "file-precious-flag"
msgstr ""

#. type: defopt
#: original_texis/files.texi:499
msgid ""
"If this variable is non-@code{nil}, then @code{save-buffer} protects against "
"I/O errors while saving by writing the new file to a temporary name instead "
"of the name it is supposed to have, and then renaming it to the intended "
"name after it is clear there are no errors.  This procedure prevents "
"problems such as a lack of disk space from resulting in an invalid file."
msgstr ""

#. type: defopt
#: original_texis/files.texi:503
msgid ""
"As a side effect, backups are necessarily made by copying.  @xref{Rename or "
"Copy}.  Yet, at the same time, saving a precious file always breaks all hard "
"links between the file you save and other file names."
msgstr ""

#. type: defopt
#: original_texis/files.texi:506
msgid ""
"Some modes give this variable a non-@code{nil} buffer-local value in "
"particular buffers."
msgstr ""

#. type: defopt
#: original_texis/files.texi:508
#, no-wrap
msgid "require-final-newline"
msgstr ""

#. type: defopt
#: original_texis/files.texi:518
msgid ""
"This variable determines whether files may be written out that do @emph{not} "
"end with a newline.  If the value of the variable is @code{t}, then "
"@code{save-buffer} silently adds a newline at the end of the buffer whenever "
"it does not already end in one.  If the value is @code{visit}, Emacs adds a "
"missing newline just after it visits the file.  If the value is "
"@code{visit-save}, Emacs adds a missing newline both on visiting and on "
"saving.  For any other non-@code{nil} value, @code{save-buffer} asks the "
"user whether to add a newline each time the case arises."
msgstr ""

#. type: defopt
#: original_texis/files.texi:522
msgid ""
"If the value of the variable is @code{nil}, then @code{save-buffer} doesn't "
"add newlines at all.  @code{nil} is the default value, but a few major modes "
"set it to @code{t} in particular buffers."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:526
msgid ""
"See also the function @code{set-visited-file-name} (@pxref{Buffer File "
"Name})."
msgstr ""

#. type: cindex
#: original_texis/files.texi:529
#, no-wrap
msgid "reading from files"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:534
msgid ""
"To copy the contents of a file into a buffer, use the function "
"@code{insert-file-contents}.  (Don't use the command @code{insert-file} in a "
"Lisp program, as that sets the mark.)"
msgstr ""

#. type: defun
#: original_texis/files.texi:535
#, no-wrap
msgid "insert-file-contents filename &optional visit beg end replace"
msgstr ""

#. type: defun
#: original_texis/files.texi:540
msgid ""
"This function inserts the contents of file @var{filename} into the current "
"buffer after point.  It returns a list of the absolute file name and the "
"length of the data inserted.  An error is signaled if @var{filename} is not "
"the name of a file that can be read."
msgstr ""

#. type: defun
#: original_texis/files.texi:550
msgid ""
"This function checks the file contents against the defined file formats, and "
"converts the file contents if appropriate and also calls the functions in "
"the list @code{after-insert-file-functions}.  @xref{Format Conversion}.  "
"Normally, one of the functions in the @code{after-insert-file-functions} "
"list determines the coding system (@pxref{Coding Systems}) used for decoding "
"the file's contents, including end-of-line conversion.  However, if the file "
"contains null bytes, it is by default visited without any code conversions.  "
"@xref{Lisp and Coding Systems, inhibit-null-byte-detection}."
msgstr ""

#. type: defun
#: original_texis/files.texi:556
msgid ""
"If @var{visit} is non-@code{nil}, this function additionally marks the "
"buffer as unmodified and sets up various fields in the buffer so that it is "
"visiting the file @var{filename}: these include the buffer's visited file "
"name and its last save file modtime.  This feature is used by "
"@code{find-file-noselect} and you probably should not use it yourself."
msgstr ""

#. type: defun
#: original_texis/files.texi:560
msgid ""
"If @var{beg} and @var{end} are non-@code{nil}, they should be numbers that "
"are byte offsets specifying the portion of the file to insert.  In this "
"case, @var{visit} must be @code{nil}.  For example,"
msgstr ""

#. type: example
#: original_texis/files.texi:563
#, no-wrap
msgid "(insert-file-contents filename nil 0 500)\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:567
msgid "inserts the characters coded by the first 500 bytes of a file."
msgstr ""

#. type: defun
#: original_texis/files.texi:577
msgid ""
"If @var{beg} or @var{end} happens to be in the middle of a character's "
"multibyte sequence, Emacs's character code conversion will insert one or "
"more eight-bit characters (a.k.a.@: ``raw bytes'')  (@pxref{Character Sets}) "
"into the buffer.  If you want to read part of a file this way, we recommend "
"to bind @code{coding-system-for-read} to a suitable value around the call to "
"this function (@pxref{Specifying Coding Systems}), and to write Lisp code "
"which will check for raw bytes at the boundaries, read the entire sequence "
"of these bytes, and convert them back to valid characters."
msgstr ""

#. type: defun
#: original_texis/files.texi:583
msgid ""
"If the argument @var{replace} is non-@code{nil}, it means to replace the "
"contents of the buffer (actually, just the accessible portion) with the "
"contents of the file.  This is better than simply deleting the buffer "
"contents and inserting the whole file, because (1) it preserves some marker "
"positions and (2) it puts less data in the undo list."
msgstr ""

#. type: defun
#: original_texis/files.texi:590
msgid ""
"It is possible to read a special file (such as a FIFO or an I/O device) with "
"@code{insert-file-contents}, as long as @var{replace}, and @var{visit} and "
"@var{beg} are @code{nil}.  However, you should normally use an @var{end} "
"argument for these files to avoid inserting (potentially) unlimited data "
"into the buffer (for instance, when inserting data from "
"@file{/dev/urandom})."
msgstr ""

#. type: defun
#: original_texis/files.texi:592
#, no-wrap
msgid "insert-file-contents-literally filename &optional visit beg end replace"
msgstr ""

#. type: defun
#: original_texis/files.texi:598
msgid ""
"This function works like @code{insert-file-contents} except that each byte "
"in the file is handled separately, being converted into an eight-bit "
"character if needed.  It does not run @code{after-insert-file-functions}, "
"and does not do format decoding, character code conversion, automatic "
"uncompression, and so on."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:603
msgid ""
"If you want to pass a file name to another process so that another program "
"can read the file, use the function @code{file-local-copy}; see @ref{Magic "
"File Names}."
msgstr ""

#. type: cindex
#: original_texis/files.texi:606
#, no-wrap
msgid "writing to files"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:613
msgid ""
"You can write the contents of a buffer, or part of a buffer, directly to a "
"file on disk using the @code{append-to-file} and @code{write-region} "
"functions.  Don't use these functions to write to files that are being "
"visited; that could cause confusion in the mechanisms for visiting."
msgstr ""

#. type: deffn
#: original_texis/files.texi:614
#, no-wrap
msgid "Command append-to-file start end filename"
msgstr ""

#. type: deffn
#: original_texis/files.texi:619
msgid ""
"This function appends the contents of the region delimited by @var{start} "
"and @var{end} in the current buffer to the end of file @var{filename}.  If "
"that file does not exist, it is created.  This function returns @code{nil}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:621
msgid "An error is signaled if you cannot write or create @var{filename}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:623
msgid "When called from Lisp, this function is completely equivalent to:"
msgstr ""

#. type: example
#: original_texis/files.texi:626
#, no-wrap
msgid "(write-region start end filename t)\n"
msgstr ""

#. type: deffn
#: original_texis/files.texi:629
#, no-wrap
msgid ""
"Command write-region start end filename &optional append visit lockname "
"mustbenew"
msgstr ""

#. type: deffn
#: original_texis/files.texi:632
msgid ""
"This function writes the region delimited by @var{start} and @var{end} in "
"the current buffer into the file specified by @var{filename}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:636
msgid ""
"If @var{start} is @code{nil}, then the command writes the entire buffer "
"contents (@emph{not} just the accessible portion) to the file and ignores "
"@var{end}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:640
msgid ""
"If @var{start} is a string, then @code{write-region} writes or appends that "
"string, rather than text from the buffer.  @var{end} is ignored in this "
"case."
msgstr ""

#. type: deffn
#: original_texis/files.texi:645
msgid ""
"If @var{append} is non-@code{nil}, then the specified text is appended to "
"the existing file contents (if any).  If @var{append} is a number, "
"@code{write-region} seeks to that byte offset from the start of the file and "
"writes the data from there."
msgstr ""

#. type: deffn
#: original_texis/files.texi:654
msgid ""
"If @var{mustbenew} is non-@code{nil}, then @code{write-region} asks for "
"confirmation if @var{filename} names an existing file.  If @var{mustbenew} "
"is the symbol @code{excl}, then @code{write-region} does not ask for "
"confirmation, but instead it signals an error @code{file-already-exists} if "
"the file already exists.  Although @code{write-region} normally follows a "
"symbolic link and creates the pointed-to file if the symbolic link is "
"dangling, it does not follow symbolic links if @var{mustbenew} is "
"@code{excl}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:659
msgid ""
"The test for an existing file, when @var{mustbenew} is @code{excl}, uses a "
"special system feature.  At least for files on a local disk, there is no "
"chance that some other program could create a file of the same name before "
"Emacs does, without Emacs's noticing."
msgstr ""

#. type: deffn
#: original_texis/files.texi:666
msgid ""
"If @var{visit} is @code{t}, then Emacs establishes an association between "
"the buffer and the file: the buffer is then visiting that file.  It also "
"sets the last file modification time for the current buffer to "
"@var{filename}'s modtime, and marks the buffer as not modified.  This "
"feature is used by @code{save-buffer}, but you probably should not use it "
"yourself."
msgstr ""

#. type: deffn
#: original_texis/files.texi:674
msgid ""
"If @var{visit} is a string, it specifies the file name to visit.  This way, "
"you can write the data to one file (@var{filename}) while recording the "
"buffer as visiting another file (@var{visit}).  The argument @var{visit} is "
"used in the echo area message and also for file locking; @var{visit} is "
"stored in @code{buffer-file-name}.  This feature is used to implement "
"@code{file-precious-flag}; don't use it yourself unless you really know what "
"you're doing."
msgstr ""

#. type: deffn
#: original_texis/files.texi:678
msgid ""
"The optional argument @var{lockname}, if non-@code{nil}, specifies the file "
"name to use for purposes of locking and unlocking, overriding @var{filename} "
"and @var{visit} for that purpose."
msgstr ""

#. type: deffn
#: original_texis/files.texi:684
msgid ""
"The function @code{write-region} converts the data which it writes to the "
"appropriate file formats specified by @code{buffer-file-format} and also "
"calls the functions in the list @code{write-region-annotate-functions}.  "
"@xref{Format Conversion}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:691
msgid ""
"Normally, @code{write-region} displays the message @samp{Wrote "
"@var{filename}} in the echo area.  This message is inhibited if @var{visit} "
"is neither @code{t} nor @code{nil} nor a string, or if Emacs is operating in "
"batch mode (@pxref{Batch Mode}).  This feature is useful for programs that "
"use files for internal purposes, files that the user does not need to know "
"about."
msgstr ""

#. type: defvar
#: original_texis/files.texi:693
#, no-wrap
msgid "write-region-inhibit-fsync"
msgstr ""

#. type: defvar
#: original_texis/files.texi:700
msgid ""
"If this variable's value is @code{nil}, @code{write-region} uses the "
"@code{fsync} system call after writing a file.  Although this slows Emacs "
"down, it lessens the risk of data loss after power failure.  If the value is "
"@code{t}, Emacs does not use @code{fsync}.  The default value is @code{nil} "
"when Emacs is interactive, and @code{t} when Emacs runs in batch mode.  "
"@xref{Files and Storage}."
msgstr ""

#. type: defmac
#: original_texis/files.texi:702
#, no-wrap
msgid "with-temp-file file body@dots{}"
msgstr ""

#. type: anchor{#1}
#: original_texis/files.texi:710
msgid "Definition of with-temp-file"
msgstr ""

#. type: defmac
#: original_texis/files.texi:710
msgid ""
"The @code{with-temp-file} macro evaluates the @var{body} forms with a "
"temporary buffer as the current buffer; then, at the end, it writes the "
"buffer contents into file @var{file}.  It kills the temporary buffer when "
"finished, restoring the buffer that was current before the "
"@code{with-temp-file} form.  Then it returns the value of the last form in "
"@var{body}."
msgstr ""

#. type: defmac
#: original_texis/files.texi:713
msgid ""
"The current buffer is restored even in case of an abnormal exit via "
"@code{throw} or error (@pxref{Nonlocal Exits})."
msgstr ""

#. type: defmac
#: original_texis/files.texi:719
msgid ""
"Like @code{with-temp-buffer} (@pxref{Definition of with-temp-buffer,, "
"Current Buffer}), the temporary buffer used by this macro does not run the "
"hooks @code{kill-buffer-hook}, @code{kill-buffer-query-functions} "
"(@pxref{Killing Buffers}), and @code{buffer-list-update-hook} (@pxref{Buffer "
"List})."
msgstr ""

#. type: cindex
#: original_texis/files.texi:723
#, no-wrap
msgid "file locks"
msgstr ""

#. type: cindex
#: original_texis/files.texi:724
#, no-wrap
msgid "lock file"
msgstr ""

#. type: cindex
#: original_texis/files.texi:725
#, no-wrap
msgid ".#, lock file names"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:745
msgid ""
"When two users edit the same file at the same time, they are likely to "
"interfere with each other.  Emacs tries to prevent this situation from "
"arising by recording a @dfn{file lock} when a file is being modified.  Emacs "
"can then detect the first attempt to modify a buffer visiting a file that is "
"locked by another Emacs job, and ask the user what to do.  The file lock is "
"really a file, a symbolic link with a special name, stored in the same "
"directory as the file you are editing.  The name is constructed by "
"prepending @file{.#} to the file name of the buffer.  The target of the "
"symbolic link will be of the form "
"@code{@var{user}@@@var{host}.@var{pid}:@var{boot}}, where @var{user} is "
"replaced with the current username (from @code{user-login-name}), @var{host} "
"with the name of the host where Emacs is running (from @code{system-name}), "
"@var{pid} with Emacs's process id, and @var{boot} with the time since the "
"last reboot.  @code{:@var{boot}} is omitted if the boot time is "
"unavailable.  (On file systems that do not support symbolic links, a regular "
"file is used instead, with contents of the form "
"@code{@var{user}@@@var{host}.@var{pid}:@var{boot}}.)"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:753
msgid ""
"When you access files using NFS, there may be a small probability that you "
"and another user will both lock the same file simultaneously.  If this "
"happens, it is possible for the two users to make changes simultaneously, "
"but Emacs will still warn the user who saves second.  Also, the detection of "
"modification of a buffer visiting a file changed on disk catches some cases "
"of simultaneous editing; see @ref{Modification Time}."
msgstr ""

#. type: defun
#: original_texis/files.texi:754
#, no-wrap
msgid "file-locked-p filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:759
msgid ""
"This function returns @code{nil} if the file @var{filename} is not locked.  "
"It returns @code{t} if it is locked by this Emacs process, and it returns "
"the name of the user who has locked it if it is locked by some other job."
msgstr ""

#. type: group
#: original_texis/files.texi:764
#, no-wrap
msgid ""
"(file-locked-p \"foo\")\n"
"     @result{} nil\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:768
#, no-wrap
msgid "lock-buffer &optional filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:774
msgid ""
"This function locks the file @var{filename}, if the current buffer is "
"modified.  The argument @var{filename} defaults to the current buffer's "
"visited file.  Nothing is done if the current buffer is not visiting a file, "
"or is not modified, or if the option @code{create-lockfiles} is @code{nil}."
msgstr ""

#. type: defun
#: original_texis/files.texi:776
#, no-wrap
msgid "unlock-buffer"
msgstr ""

#. type: defun
#: original_texis/files.texi:783
msgid ""
"This function unlocks the file being visited in the current buffer, if the "
"buffer is modified.  If the buffer is not modified, then the file should not "
"be locked, so this function does nothing.  It also does nothing if the "
"current buffer is not visiting a file, or is not locked.  This function "
"handles file system errors by calling @code{display-warning} and otherwise "
"ignores the error."
msgstr ""

#. type: defopt
#: original_texis/files.texi:785
#, no-wrap
msgid "create-lockfiles"
msgstr ""

#. type: defopt
#: original_texis/files.texi:787
msgid "If this variable is @code{nil}, Emacs does not lock files."
msgstr ""

#. type: defopt
#: original_texis/files.texi:789
#, no-wrap
msgid "lock-file-name-transforms"
msgstr ""

#. type: defopt
#: original_texis/files.texi:796
msgid ""
"By default, Emacs creates the lock files in the same directory as the files "
"that are being locked.  This can be changed by customizing this variable.  "
"Is has the same syntax as @code{auto-save-file-name-transforms} "
"(@pxref{Auto-Saving}).  For instance, to make Emacs write all the lock files "
"to @file{/var/tmp/}, you could say something like:"
msgstr ""

#. type: lisp
#: original_texis/files.texi:800
#, no-wrap
msgid ""
"(setq lock-file-name-transforms\n"
"      '((\"\\\\`/.*/\\\\([^/]+\\\\)\\\\'\" \"/var/tmp/\\\\1\" t)))\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:803
#, no-wrap
msgid "ask-user-about-lock file other-user"
msgstr ""

#. type: defun
#: original_texis/files.texi:808
msgid ""
"This function is called when the user tries to modify @var{file}, but it is "
"locked by another user named @var{other-user}.  The default definition of "
"this function asks the user to say what to do.  The value this function "
"returns determines what Emacs does next:"
msgstr ""

#. type: itemize
#: original_texis/files.texi:813
msgid ""
"A value of @code{t} says to grab the lock on the file.  Then this user may "
"edit the file and @var{other-user} loses the lock."
msgstr ""

#. type: itemize
#: original_texis/files.texi:817
msgid ""
"A value of @code{nil} says to ignore the lock and let this user edit the "
"file anyway."
msgstr ""

#. type: kindex
#: original_texis/files.texi:819
#, no-wrap
msgid "file-locked"
msgstr ""

#. type: itemize
#: original_texis/files.texi:822
msgid ""
"This function may instead signal a @code{file-locked} error, in which case "
"the change that the user was about to make does not take place."
msgstr ""

#. type: itemize
#: original_texis/files.texi:824
msgid "The error message for this error looks like this:"
msgstr ""

#. type: example
#: original_texis/files.texi:827
#, no-wrap
msgid "@error{} File is locked: @var{file} @var{other-user}\n"
msgstr ""

#. type: itemize
#: original_texis/files.texi:832
msgid ""
"where @code{file} is the name of the file and @var{other-user} is the name "
"of the user who has locked the file."
msgstr ""

#. type: defun
#: original_texis/files.texi:836
msgid ""
"If you wish, you can replace the @code{ask-user-about-lock} function with "
"your own version that makes the decision in another way."
msgstr ""

#. type: defopt
#: original_texis/files.texi:838
#, no-wrap
msgid "remote-file-name-inhibit-locks"
msgstr ""

#. type: defopt
#: original_texis/files.texi:841
msgid ""
"You can prevent the creation of remote lock files by setting the variable "
"@code{remote-file-name-inhibit-locks} to @code{t}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:843
#, no-wrap
msgid "Command lock-file-mode"
msgstr ""

#. type: deffn
#: original_texis/files.texi:846
msgid ""
"This command, called interactively, toggles the local value of "
"@code{create-lockfiles} in the current buffer."
msgstr ""

#. type: cindex
#: original_texis/files.texi:850
#, no-wrap
msgid "file, information about"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:857
msgid ""
"This section describes the functions for retrieving various types of "
"information about files (or directories or symbolic links), such as whether "
"a file is readable or writable, and its size.  These functions all take "
"arguments which are file names.  Except where noted, these arguments need to "
"specify existing files, or an error is signaled."
msgstr ""

#. type: cindex
#: original_texis/files.texi:858
#, no-wrap
msgid "file names, trailing whitespace"
msgstr ""

#. type: cindex
#: original_texis/files.texi:859
#, no-wrap
msgid "trailing blanks in file names"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:863
msgid ""
"Be careful with file names that end in spaces.  On some filesystems "
"(notably, MS-Windows), trailing whitespace characters in file names are "
"silently and automatically ignored."
msgstr ""

#. type: subsection
#: original_texis/files.texi:871 original_texis/files.texi:873
#: original_texis/files.texi:874
#, no-wrap
msgid "Testing Accessibility"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:871
msgid "Is a given file readable? Writable?"
msgstr ""

#. type: node
#: original_texis/files.texi:871 original_texis/files.texi:1052
#, no-wrap
msgid "Kinds of Files"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:871
msgid "Is it a directory? A symbolic link?"
msgstr ""

#. type: subsection
#: original_texis/files.texi:871 original_texis/files.texi:1178
#: original_texis/files.texi:1179
#, no-wrap
msgid "Truenames"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:871
msgid "Eliminating symbolic links from a file name."
msgstr ""

#. type: subsection
#: original_texis/files.texi:871 original_texis/files.texi:1281
#: original_texis/files.texi:1282
#, no-wrap
msgid "File Attributes"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:871
msgid "File sizes, modification times, etc."
msgstr ""

#. type: node
#: original_texis/files.texi:871 original_texis/files.texi:1519
#, no-wrap
msgid "Extended Attributes"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:871
msgid "Extended file attributes for access control."
msgstr ""

#. type: node
#: original_texis/files.texi:871 original_texis/files.texi:1583
#, no-wrap
msgid "Locating Files"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:871
msgid "How to find a file in standard places."
msgstr ""

#. type: cindex
#: original_texis/files.texi:875
#, no-wrap
msgid "accessibility of a file"
msgstr ""

#. type: cindex
#: original_texis/files.texi:876
#, no-wrap
msgid "file accessibility"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:881
msgid ""
"These functions test for permission to access a file for reading, writing, "
"or execution.  Unless explicitly stated otherwise, they follow symbolic "
"links.  @xref{Kinds of Files}."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:886
msgid ""
"On some operating systems, more complex sets of access permissions can be "
"specified, via mechanisms such as Access Control Lists (ACLs).  "
"@xref{Extended Attributes}, for how to query and set those permissions."
msgstr ""

#. type: defun
#: original_texis/files.texi:887
#, no-wrap
msgid "file-exists-p filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:894
msgid ""
"This function returns @code{t} if a file named @var{filename} appears to "
"exist.  This does not mean you can necessarily read the file, only that you "
"can probably find out its attributes.  (On GNU and other POSIX-like systems, "
"this is true if the file exists and you have execute permission on the "
"containing directories, regardless of the permissions of the file itself.)"
msgstr ""

#. type: defun
#: original_texis/files.texi:897
msgid ""
"If the file does not exist, or if there was trouble determining whether the "
"file exists, this function returns @code{nil}."
msgstr ""

#. type: cindex
#: original_texis/files.texi:898
#, no-wrap
msgid "empty file name, and @code{file-exists-p}"
msgstr ""

#. type: defun
#: original_texis/files.texi:903
msgid ""
"Since a file name that is an empty string is interpreted relative to the "
"current buffer's default directory (@pxref{Relative File Names}), calling "
"@code{file-exists-p} with an argument that is an empty string will report "
"about the buffer's default directory."
msgstr ""

#. type: cindex
#: original_texis/files.texi:904
#, no-wrap
msgid "dangling symlinks, testing for existence"
msgstr ""

#. type: defun
#: original_texis/files.texi:912
msgid ""
"Directories are files, so @code{file-exists-p} can return @code{t} when "
"given a directory.  However, because @code{file-exists-p} follows symbolic "
"links, it returns @code{t} for a symbolic link name only if the target of "
"the link exists; if your Lisp program needs to consider @dfn{dangling "
"symlinks} whose target doesn't exist as existing files, use "
"@code{file-attributes} (@pxref{File Attributes}) instead of "
"@code{file-exists-p}."
msgstr ""

#. type: defun
#: original_texis/files.texi:914
#, no-wrap
msgid "file-readable-p filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:917
msgid ""
"This function returns @code{t} if a file named @var{filename} exists and you "
"can read it.  It returns @code{nil} otherwise."
msgstr ""

#. type: defun
#: original_texis/files.texi:919
#, no-wrap
msgid "file-executable-p filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:925
msgid ""
"This function returns @code{t} if a file named @var{filename} exists and you "
"can execute it.  It returns @code{nil} otherwise.  On GNU and other "
"POSIX-like systems, if the file is a directory, execute permission means you "
"can check the existence and attributes of files inside the directory, and "
"open those files if their modes permit."
msgstr ""

#. type: defun
#: original_texis/files.texi:927
#, no-wrap
msgid "file-writable-p filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:933
msgid ""
"This function returns @code{t} if the file @var{filename} can be written or "
"created by you, and @code{nil} otherwise.  A file is writable if the file "
"exists and you can write it.  It is creatable if it does not exist, but its "
"parent directory does exist and you can write in that directory."
msgstr ""

#. type: defun
#: original_texis/files.texi:937
msgid ""
"In the example below, @file{foo} is not writable because the parent "
"directory does not exist, even though the user could create such a "
"directory."
msgstr ""

#. type: group
#: original_texis/files.texi:942
#, no-wrap
msgid ""
"(file-writable-p \"~/no-such-dir/foo\")\n"
"     @result{} nil\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:946
#, no-wrap
msgid "file-accessible-directory-p dirname"
msgstr ""

#. type: defun
#: original_texis/files.texi:953
msgid ""
"This function returns @code{t} if you have permission to open existing files "
"in the directory whose name as a file is @var{dirname}; otherwise (e.g., if "
"there is no such directory), it returns @code{nil}.  The value of "
"@var{dirname} may be either a directory name (such as @file{/foo/}) or the "
"file name of a file which is a directory (such as @file{/foo}, without the "
"final slash)."
msgstr ""

#. type: defun
#: original_texis/files.texi:956
msgid ""
"For example, from the following we deduce that any attempt to read a file in "
"@file{/foo/} will give an error:"
msgstr ""

#. type: example
#: original_texis/files.texi:960
#, no-wrap
msgid ""
"(file-accessible-directory-p \"/foo\")\n"
"     @result{} nil\n"
msgstr ""

#. type: defmac
#: original_texis/files.texi:963
#, no-wrap
msgid "with-existing-directory body@dots{}"
msgstr ""

#. type: defmac
#: original_texis/files.texi:971
msgid ""
"This macro ensures that @code{default-directory} is bound to an existing "
"directory before executing @var{body}.  If @code{default-directory} already "
"exists, that's preferred, and otherwise some other directory is used.  This "
"macro can be useful, for instance, when calling an external command that "
"requires that it's running in a directory that exists.  The chosen directory "
"is not guaranteed to be writable."
msgstr ""

#. type: defun
#: original_texis/files.texi:973
#, no-wrap
msgid "access-file filename string"
msgstr ""

#. type: defun
#: original_texis/files.texi:977
msgid ""
"If you can read @var{filename} this function returns @code{nil}; otherwise "
"it signals an error using @var{string} as the error message text."
msgstr ""

#. type: defun
#: original_texis/files.texi:979
#, no-wrap
msgid "file-ownership-preserved-p filename &optional group"
msgstr ""

#. type: defun
#: original_texis/files.texi:983
msgid ""
"This function returns @code{t} if deleting the file @var{filename} and then "
"creating it anew would keep the file's owner unchanged.  It also returns "
"@code{t} for nonexistent files."
msgstr ""

#. type: defun
#: original_texis/files.texi:986
msgid ""
"If the optional argument @var{group} is non-@code{nil}, this function also "
"checks that the file's group would be unchanged."
msgstr ""

#. type: defun
#: original_texis/files.texi:988
msgid "This function does not follow symbolic links."
msgstr ""

#. type: defun
#: original_texis/files.texi:990
#, no-wrap
msgid "file-modes filename &optional flag"
msgstr ""

#. type: cindex
#: original_texis/files.texi:991
#, no-wrap
msgid "mode bits"
msgstr ""

#. type: cindex
#: original_texis/files.texi:992
#, no-wrap
msgid "file permissions"
msgstr ""

#. type: cindex
#: original_texis/files.texi:993 original_texis/files.texi:1884
#, no-wrap
msgid "permissions, file"
msgstr ""

#. type: cindex
#: original_texis/files.texi:994
#, no-wrap
msgid "file modes"
msgstr ""

#. type: defun
#: original_texis/files.texi:999
msgid ""
"This function returns the @dfn{mode bits} of @var{filename}---an integer "
"summarizing its read, write, and execution permissions.  This function "
"follows symbolic links.  If the file does not exist, the return value is "
"@code{nil}."
msgstr ""

#. type: defun
#: original_texis/files.texi:1007
msgid ""
"@xref{File permissions,,, coreutils, The @sc{gnu} @code{Coreutils} Manual}, "
"for a description of mode bits.  For example, if the low-order bit is 1, the "
"file is executable by all users; if the second-lowest-order bit is 1, the "
"file is writable by all users; etc.  The highest possible value is 4095 "
"(7777 octal), meaning that everyone has read, write, and execute permission, "
"the @acronym{SUID} bit is set for both others and group, and the sticky bit "
"is set."
msgstr ""

#. type: defun
#: original_texis/files.texi:1014
msgid ""
"By default this function follows symbolic links.  However, if the optional "
"argument @var{flag} is the symbol @code{nofollow}, this function does not "
"follow @var{filename} if it is a symbolic link; this can help prevent "
"inadvertently obtaining the mode bits of a file somewhere else, and is more "
"consistent with @code{file-attributes} (@pxref{File Attributes})."
msgstr ""

#. type: defun
#: original_texis/files.texi:1017
msgid ""
"@xref{Changing Files}, for the @code{set-file-modes} function, which can be "
"used to set these permissions."
msgstr ""

#. type: group
#: original_texis/files.texi:1022
#, no-wrap
msgid ""
"(file-modes \"~/junk/diffs\" 'nofollow)\n"
"     @result{} 492               ; @r{Decimal integer.}\n"
msgstr ""

#. type: group
#: original_texis/files.texi:1026
#, no-wrap
msgid ""
"(format \"%o\" 492)\n"
"     @result{} \"754\"             ; @r{Convert to octal.}\n"
msgstr ""

#. type: group
#: original_texis/files.texi:1031
#, no-wrap
msgid ""
"(set-file-modes \"~/junk/diffs\" #o666 'nofollow)\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/files.texi:1036
#, no-wrap
msgid ""
"$ ls -l diffs\n"
"-rw-rw-rw- 1 lewis lewis 3063 Oct 30 16:00 diffs\n"
msgstr ""

#. type: cindex
#: original_texis/files.texi:1039
#, no-wrap
msgid "MS-DOS and file modes"
msgstr ""

#. type: cindex
#: original_texis/files.texi:1040
#, no-wrap
msgid "file modes and MS-DOS"
msgstr ""

#. type: defun
#: original_texis/files.texi:1050
msgid ""
"@strong{MS-DOS note:} On MS-DOS, there is no such thing as an executable "
"file mode bit.  So @code{file-modes} considers a file executable if its name "
"ends in one of the standard executable extensions, such as @file{.com}, "
"@file{.bat}, @file{.exe}, and some others.  Files that begin with the "
"POSIX-standard @samp{#!} signature, such as shell and Perl scripts, are also "
"considered executable.  Directories are also reported as executable, for "
"compatibility with POSIX@.  These conventions are also followed by "
"@code{file-attributes} (@pxref{File Attributes})."
msgstr ""

#. type: subsection
#: original_texis/files.texi:1053
#, no-wrap
msgid "Distinguishing Kinds of Files"
msgstr ""

#. type: cindex
#: original_texis/files.texi:1054
#, no-wrap
msgid "file classification"
msgstr ""

#. type: cindex
#: original_texis/files.texi:1055
#, no-wrap
msgid "classification of file types"
msgstr ""

#. type: cindex
#: original_texis/files.texi:1056 original_texis/files.texi:1070
#, no-wrap
msgid "symbolic links"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:1060
msgid ""
"This section describes how to distinguish various kinds of files, such as "
"directories, symbolic links, and ordinary files."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:1068
msgid ""
"Symbolic links are ordinarily followed wherever they appear.  For example, "
"to interpret the file name @file{a/b/c}, any of @file{a}, @file{a/b}, and "
"@file{a/b/c} can be symbolic links that are followed, possibly recursively "
"if the link targets are themselves symbolic links.  However, a few functions "
"do not follow symbolic links at the end of a file name (@file{a/b/c} in this "
"example).  Such a function is said to @dfn{not follow symbolic links}."
msgstr ""

#. type: defun
#: original_texis/files.texi:1069
#, no-wrap
msgid "file-symlink-p filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:1076
msgid ""
"If the file @var{filename} is a symbolic link, this function does not follow "
"it and instead returns its link target as a string.  (The link target string "
"is not necessarily the full absolute file name of the target; determining "
"the full file name that the link points to is nontrivial, see below.)"
msgstr ""

#. type: defun
#: original_texis/files.texi:1080
msgid ""
"If the file @var{filename} is not a symbolic link, or does not exist, or if "
"there is trouble determining whether it is a symbolic link, "
"@code{file-symlink-p} returns @code{nil}."
msgstr ""

#. type: defun
#: original_texis/files.texi:1082
msgid "Here are a few examples of using this function:"
msgstr ""

#. type: group
#: original_texis/files.texi:1087
#, no-wrap
msgid ""
"(file-symlink-p \"not-a-symlink\")\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/files.texi:1091
#, no-wrap
msgid ""
"(file-symlink-p \"sym-link\")\n"
"     @result{} \"not-a-symlink\"\n"
msgstr ""

#. type: group
#: original_texis/files.texi:1095
#, no-wrap
msgid ""
"(file-symlink-p \"sym-link2\")\n"
"     @result{} \"sym-link\"\n"
msgstr ""

#. type: group
#: original_texis/files.texi:1099
#, no-wrap
msgid ""
"(file-symlink-p \"/bin\")\n"
"     @result{} \"/pub/bin\"\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:1107
msgid ""
"Note that in the third example, the function returned @file{sym-link}, but "
"did not proceed to resolve it, although that file is itself a symbolic "
"link.  That is because this function does not follow symbolic links---the "
"process of following the symbolic links does not apply to the last component "
"of the file name."
msgstr ""

#. type: defun
#: original_texis/files.texi:1114
msgid ""
"The string that this function returns is what is recorded in the symbolic "
"link; it may or may not include any leading directories.  This function does "
"@emph{not} expand the link target to produce a fully-qualified file name, "
"and in particular does not use the leading directories, if any, of the "
"@var{filename} argument if the link target is not an absolute file name.  "
"Here's an example:"
msgstr ""

#. type: group
#: original_texis/files.texi:1119
#, no-wrap
msgid ""
"(file-symlink-p \"/foo/bar/baz\")\n"
"     @result{} \"some-file\"\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:1129
msgid ""
"Here, although @file{/foo/bar/baz} was given as a fully-qualified file name, "
"the result is not, and in fact does not have any leading directories at "
"all.  And since @file{some-file} might itself be a symbolic link, you cannot "
"simply prepend leading directories to it, nor even naively use "
"@code{expand-file-name} (@pxref{File Name Expansion}) to produce its "
"absolute file name."
msgstr ""

#. type: defun
#: original_texis/files.texi:1135
msgid ""
"For this reason, this function is seldom useful if you need to determine "
"more than just the fact that a file is or isn't a symbolic link.  If you "
"actually need the file name of the link target, use @code{file-chase-links} "
"or @code{file-truename}, described in @ref{Truenames}."
msgstr ""

#. type: defun
#: original_texis/files.texi:1137
#, no-wrap
msgid "file-directory-p filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:1143
msgid ""
"This function returns @code{t} if @var{filename} is the name of an existing "
"directory.  It returns @code{nil} if @var{filename} does not name a "
"directory, or if there is trouble determining whether it is a directory.  "
"This function follows symbolic links."
msgstr ""

#. type: group
#: original_texis/files.texi:1148
#, no-wrap
msgid ""
"(file-directory-p \"~rms\")\n"
"     @result{} t\n"
msgstr ""

#. type: group
#: original_texis/files.texi:1152
#, no-wrap
msgid ""
"(file-directory-p \"~rms/lewis/files.texi\")\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/files.texi:1156
#, no-wrap
msgid ""
"(file-directory-p \"~rms/lewis/no-such-file\")\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/files.texi:1160
#, no-wrap
msgid ""
"(file-directory-p \"$HOME\")\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/files.texi:1165
#, no-wrap
msgid ""
"(file-directory-p\n"
" (substitute-in-file-name \"$HOME\"))\n"
"     @result{} t\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:1169
#, no-wrap
msgid "file-regular-p filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:1176
msgid ""
"This function returns @code{t} if the file @var{filename} exists and is a "
"regular file (not a directory, named pipe, terminal, or other I/O device).  "
"It returns @code{nil} if @var{filename} does not exist or is not a regular "
"file, or if there is trouble determining whether it is a regular file.  This "
"function follows symbolic links."
msgstr ""

#. type: cindex
#: original_texis/files.texi:1180
#, no-wrap
msgid "truename (of file)"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:1189
msgid ""
"The @dfn{truename} of a file is the name that you get by following symbolic "
"links at all levels until none remain, then simplifying away @samp{.}@: and "
"@samp{..}@: appearing as name components.  This results in a sort of "
"canonical name for the file.  A file does not always have a unique truename; "
"the number of distinct truenames a file has is equal to the number of hard "
"links to the file.  However, truenames are useful because they eliminate "
"symbolic links as a cause of name variation."
msgstr ""

#. type: defun
#: original_texis/files.texi:1190
#, no-wrap
msgid "file-truename filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:1194
msgid ""
"This function returns the truename of the file @var{filename}.  If the "
"argument is not an absolute file name, this function first expands it "
"against @code{default-directory}."
msgstr ""

#. type: defun
#: original_texis/files.texi:1198
msgid ""
"This function does not expand environment variables.  Only "
"@code{substitute-in-file-name} does that.  @xref{Definition of "
"substitute-in-file-name}."
msgstr ""

#. type: defun
#: original_texis/files.texi:1207
msgid ""
"If you may need to follow symbolic links preceding @samp{..}@: appearing as "
"a name component, call @code{file-truename} without prior direct or indirect "
"calls to @code{expand-file-name}.  Otherwise, the file name component "
"immediately preceding @samp{..} will be simplified away before "
"@code{file-truename} is called.  To eliminate the need for a call to "
"@code{expand-file-name}, @code{file-truename} handles @samp{~} in the same "
"way that @code{expand-file-name} does."
msgstr ""

#. type: defun
#: original_texis/files.texi:1211
msgid ""
"If the target of a symbolic links has remote file name syntax, "
"@code{file-truename} returns it quoted.  @xref{File Name Expansion,, "
"Functions that Expand Filenames}."
msgstr ""

#. type: defun
#: original_texis/files.texi:1213
#, no-wrap
msgid "file-chase-links filename &optional limit"
msgstr ""

#. type: defun
#: original_texis/files.texi:1218
msgid ""
"This function follows symbolic links, starting with @var{filename}, until it "
"finds a file name which is not the name of a symbolic link.  Then it returns "
"that file name.  This function does @emph{not} follow symbolic links at the "
"level of parent directories."
msgstr ""

#. type: defun
#: original_texis/files.texi:1222
msgid ""
"If you specify a number for @var{limit}, then after chasing through that "
"many links, the function just returns what it has even if that is still a "
"symbolic link."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:1229
msgid ""
"To illustrate the difference between @code{file-chase-links} and "
"@code{file-truename}, suppose that @file{/usr/foo} is a symbolic link to the "
"directory @file{/home/foo}, and @file{/home/foo/hello} is an ordinary file "
"(or at least, not a symbolic link) or nonexistent.  Then we would have:"
msgstr ""

#. type: example
#: original_texis/files.texi:1237
#, no-wrap
msgid ""
"(file-chase-links \"/usr/foo/hello\")\n"
"     ;; @r{This does not follow the links in the parent directories.}\n"
"     @result{} \"/usr/foo/hello\"\n"
"(file-truename \"/usr/foo/hello\")\n"
"     ;; @r{Assuming that @file{/home} is not a symbolic link.}\n"
"     @result{} \"/home/foo/hello\"\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:1239
#, no-wrap
msgid "file-equal-p file1 file2"
msgstr ""

#. type: defun
#: original_texis/files.texi:1245
msgid ""
"This function returns @code{t} if the files @var{file1} and @var{file2} name "
"the same file.  This is similar to comparing their truenames, except that "
"remote file names are also handled in an appropriate manner.  If @var{file1} "
"or @var{file2} does not exist, the return value is unspecified."
msgstr ""

#. type: defun
#: original_texis/files.texi:1247
#, no-wrap
msgid "file-name-case-insensitive-p filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:1257
msgid ""
"Sometimes file names or their parts need to be compared as strings, in which "
"case it's important to know whether the underlying filesystem is "
"case-insensitive.  This function returns @code{t} if file @var{filename} is "
"on a case-insensitive filesystem.  It always returns @code{t} on MS-DOS and "
"MS-Windows.  On Cygwin and macOS, filesystems may or may not be "
"case-insensitive, and the function tries to determine case-sensitivity by a "
"runtime test.  If the test is inconclusive, the function returns @code{t} on "
"Cygwin and @code{nil} on macOS."
msgstr ""

#. type: defun
#: original_texis/files.texi:1264
msgid ""
"Currently this function always returns @code{nil} on platforms other than "
"MS-DOS, MS-Windows, Cygwin, and macOS@.  It does not detect "
"case-insensitivity of mounted filesystems, such as Samba shares or "
"NFS-mounted Windows volumes.  On remote hosts, it assumes @code{t} for the "
"@samp{smb} method.  For all other connection methods, runtime tests are "
"performed."
msgstr ""

#. type: defun
#: original_texis/files.texi:1266
#, no-wrap
msgid "vc-responsible-backend file"
msgstr ""

#. type: defun
#: original_texis/files.texi:1275
msgid ""
"This function determines the responsible VC backend of the given "
"@var{file}.  For example, if @file{emacs.c} is a file tracked by Git, "
"@w{@code{(vc-responsible-backend \"emacs.c\")}} returns @samp{Git}.  Note "
"that if @var{file} is a symbolic link, @code{vc-responsible-backend} will "
"not resolve it---the backend of the symbolic link file itself is reported.  "
"To get the backend VC of the file to which @var{file} refers, wrap "
"@var{file} with a symbolic link resolving function such as "
"@code{file-chase-links}:"
msgstr ""

#. type: smallexample
#: original_texis/files.texi:1278
#, no-wrap
msgid "(vc-responsible-backend (file-chase-links \"emacs.c\"))\n"
msgstr ""

#. type: cindex
#: original_texis/files.texi:1283
#, no-wrap
msgid "file attributes"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:1289
msgid ""
"This section describes the functions for getting detailed information about "
"a file, including the owner and group numbers, the number of names, the "
"inode number, the size, and the times of access and modification."
msgstr ""

#. type: defun
#: original_texis/files.texi:1290
#, no-wrap
msgid "file-newer-than-file-p filename1 filename2"
msgstr ""

#. type: cindex
#: original_texis/files.texi:1291
#, no-wrap
msgid "file age"
msgstr ""

#. type: cindex
#: original_texis/files.texi:1292
#, no-wrap
msgid "file modification time"
msgstr ""

#. type: defun
#: original_texis/files.texi:1297
msgid ""
"This function returns @code{t} if the file @var{filename1} is newer than "
"file @var{filename2}.  If @var{filename1} does not exist, it returns "
"@code{nil}.  If @var{filename1} does exist, but @var{filename2} does not, it "
"returns @code{t}."
msgstr ""

#. type: defun
#: original_texis/files.texi:1301
msgid ""
"In the following example, assume that the file @file{aug-19} was written on "
"the 19th, @file{aug-20} was written on the 20th, and the file @file{no-file} "
"doesn't exist at all."
msgstr ""

#. type: group
#: original_texis/files.texi:1306
#, no-wrap
msgid ""
"(file-newer-than-file-p \"aug-19\" \"aug-20\")\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/files.texi:1310
#, no-wrap
msgid ""
"(file-newer-than-file-p \"aug-20\" \"aug-19\")\n"
"     @result{} t\n"
msgstr ""

#. type: group
#: original_texis/files.texi:1314
#, no-wrap
msgid ""
"(file-newer-than-file-p \"aug-19\" \"no-file\")\n"
"     @result{} t\n"
msgstr ""

#. type: group
#: original_texis/files.texi:1318
#, no-wrap
msgid ""
"(file-newer-than-file-p \"no-file\" \"aug-19\")\n"
"     @result{} nil\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:1322
#, no-wrap
msgid "file-has-changed-p filename tag"
msgstr ""

#. type: defun
#: original_texis/files.texi:1334
msgid ""
"This function returns non-@code{nil} if the time stamp of @var{filename} has "
"changed since the last call.  When called for the first time for some "
"@var{filename}, it records the last modification time and size of the file, "
"and returns non-@code{nil} when @var{filename} exists.  Thereafter, when "
"called for the same @var{filename}, it compares the current time stamp and "
"size with the recorded ones, and returns non-@code{nil} only if either the "
"time stamp or the size (or both) are different.  This is useful when a Lisp "
"program wants to re-read a file whenever it changes.  With an optional "
"argument @var{tag}, which must be a symbol, the size and modification time "
"comparisons are limited to calls with the same tag."
msgstr ""

#. type: defun
#: original_texis/files.texi:1336
#, no-wrap
msgid "file-attributes filename &optional id-format"
msgstr ""

#. type: anchor{#1}
#: original_texis/files.texi:1347
msgid "Definition of file-attributes"
msgstr ""

#. type: defun
#: original_texis/files.texi:1347
msgid ""
"This function returns a list of attributes of file @var{filename}.  If the "
"specified file does not exist, it returns @code{nil}.  This function does "
"not follow symbolic links.  The optional parameter @var{id-format} specifies "
"the preferred format of attributes @acronym{UID} and @acronym{GID} (see "
"below)---the valid values are @code{'string} and @code{'integer}.  The "
"latter is the default, but we plan to change that, so you should specify a "
"non-@code{nil} value for @var{id-format} if you use the returned "
"@acronym{UID} or @acronym{GID}."
msgstr ""

#. type: defun
#: original_texis/files.texi:1354
msgid ""
"On GNU platforms when operating on a local file, this function is atomic: if "
"the filesystem is simultaneously being changed by some other process, this "
"function returns the file's attributes either before or after the change.  "
"Otherwise this function is not atomic, and might return @code{nil} if it "
"detects the race condition, or might return a hodgepodge of the previous and "
"current file attributes."
msgstr ""

#. type: defun
#: original_texis/files.texi:1358
msgid ""
"Accessor functions are provided to access the elements in this list.  The "
"accessors are mentioned along with the descriptions of the elements below."
msgstr ""

#. type: defun
#: original_texis/files.texi:1360
msgid "The elements of the list, in order, are:"
msgstr ""

#. type: enumerate
#: original_texis/files.texi:1366
msgid ""
"@code{t} for a directory, a string for a symbolic link (the name linked to), "
"or @code{nil} for a text file (@code{file-attribute-type})."
msgstr ""

#. type: enumerate
#: original_texis/files.texi:1372
msgid ""
"The number of names the file has (@code{file-attribute-link-number}).  "
"Alternate names, also known as hard links, can be created by using the "
"@code{add-name-to-file} function (@pxref{Changing Files})."
msgstr ""

#. type: enumerate
#: original_texis/files.texi:1377
msgid ""
"The file's @acronym{UID}, normally as a string "
"(@code{file-attribute-user-id}).  However, if it does not correspond to a "
"named user, the value is an integer."
msgstr ""

#. type: enumerate
#: original_texis/files.texi:1380
msgid "The file's @acronym{GID}, likewise (@code{file-attribute-group-id})."
msgstr ""

#. type: enumerate
#: original_texis/files.texi:1388
msgid ""
"The time of last access as a Lisp timestamp "
"(@code{file-attribute-access-time}).  The timestamp is in the style of "
"@code{current-time} (@pxref{Time of Day}) and is truncated to that of the "
"filesystem's timestamp resolution; for example, on some FAT-based "
"filesystems, only the date of last access is recorded, so this time will "
"always hold the midnight of the day of the last access."
msgstr ""

#. type: cindex
#: original_texis/files.texi:1389
#, no-wrap
msgid "modification time of file"
msgstr ""

#. type: enumerate
#: original_texis/files.texi:1394
msgid ""
"The time of last modification as a Lisp timestamp "
"(@code{file-attribute-modification-time}).  This is the last time when the "
"file's contents were modified."
msgstr ""

#. type: enumerate
#: original_texis/files.texi:1401
msgid ""
"The time of last status change as a Lisp timestamp "
"(@code{file-attribute-status-change-time}).  This is the time of the last "
"change to the file's access mode bits, its owner and group, and other "
"information recorded in the filesystem for the file, beyond the file's "
"contents."
msgstr ""

#. type: enumerate
#: original_texis/files.texi:1404
msgid "The size of the file in bytes (@code{file-attribute-size})."
msgstr ""

#. type: enumerate
#: original_texis/files.texi:1408
msgid ""
"The file's modes, as a string of ten letters or dashes, as in @samp{ls -l} "
"(@code{file-attribute-modes})."
msgstr ""

#. type: enumerate
#: original_texis/files.texi:1411
msgid "An unspecified value, present for backward compatibility."
msgstr ""

#. type: enumerate
#: original_texis/files.texi:1415
msgid ""
"The file's inode number (@code{file-attribute-inode-number}), a nonnegative "
"integer."
msgstr ""

#. type: enumerate
#: original_texis/files.texi:1421
msgid ""
"The filesystem's identifier of the device that the file is on "
"(@code{file-attribute-device-number}), an integer or a cons cell of two "
"integers.  The latter is sometimes used by remote files, in order to "
"distinguish remote filesystems from local ones."
msgstr ""

#. type: defun
#: original_texis/files.texi:1427
msgid ""
"The file's inode and device together give enough information to distinguish "
"any two files on the system---no two files can have the same values for both "
"of these attributes.  This tuple that uniquely identifies the file is "
"returned by @code{file-attribute-file-identifier}."
msgstr ""

#. type: defun
#: original_texis/files.texi:1429
msgid "For example, here are the file attributes for @file{files.texi}:"
msgstr ""

#. type: group
#: original_texis/files.texi:1440
#, no-wrap
msgid ""
"(file-attributes \"files.texi\" 'string)\n"
"     @result{}  (nil 1 \"lh\" \"users\"\n"
"          (20614 64019 50040 152000)\n"
"          (20000 23 0 0)\n"
"          (20614 64555 902289 872000)\n"
"          122295 \"-rw-rw-rw-\"\n"
"          t 6473924464520138\n"
"          1014478468)\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:1445
msgid "and here is how the result is interpreted:"
msgstr ""

#. type: item
#: original_texis/files.texi:1447
#, no-wrap
msgid "nil"
msgstr ""

#. type: table
#: original_texis/files.texi:1449
msgid "is neither a directory nor a symbolic link."
msgstr ""

#. type: item
#: original_texis/files.texi:1450
#, no-wrap
msgid "1"
msgstr ""

#. type: table
#: original_texis/files.texi:1453
msgid ""
"has only one name (the name @file{files.texi} in the current default "
"directory)."
msgstr ""

#. type: item
#: original_texis/files.texi:1454
#, no-wrap
msgid "\"lh\""
msgstr ""

#. type: table
#: original_texis/files.texi:1456
msgid "is owned by the user with name @samp{lh}."
msgstr ""

#. type: item
#: original_texis/files.texi:1457
#, no-wrap
msgid "\"users\""
msgstr ""

#. type: table
#: original_texis/files.texi:1459
msgid "is in the group with name @samp{users}."
msgstr ""

#. type: item
#: original_texis/files.texi:1460
#, no-wrap
msgid "(20614 64019 50040 152000)"
msgstr ""

#. type: table
#: original_texis/files.texi:1464
msgid ""
"was last accessed on October 23, 2012, at 20:12:03.050040152 UTC@.  (This "
"timestamp is @code{(1351023123050040152 . 1000000000)} if "
"@code{current-time-list} is @code{nil}.)"
msgstr ""

#. type: item
#: original_texis/files.texi:1465
#, no-wrap
msgid "(20000 23 0 0)"
msgstr ""

#. type: table
#: original_texis/files.texi:1469
msgid ""
"was last modified on July 15, 2001, at 08:53:43.000000000 UTC@.  (This "
"timestamp is @code{(1310720023000000000 . 1000000000)} if "
"@code{current-time-list} is @code{nil}.)"
msgstr ""

#. type: item
#: original_texis/files.texi:1470
#, no-wrap
msgid "(20614 64555 902289 872000)"
msgstr ""

#. type: table
#: original_texis/files.texi:1474
msgid ""
"last had its status changed on October 23, 2012, at 20:20:59.902289872 "
"UTC@.  (This timestamp is @code{(1351023659902289872 . 1000000000)} if "
"@code{current-time-list} is @code{nil}.)"
msgstr ""

#. type: item
#: original_texis/files.texi:1475
#, no-wrap
msgid "122295"
msgstr ""

#. type: table
#: original_texis/files.texi:1479
msgid ""
"is 122295 bytes long.  (It may not contain 122295 characters, though, if "
"some of the bytes belong to multibyte sequences, and also if the end-of-line "
"format is CR-LF.)"
msgstr ""

#. type: item
#: original_texis/files.texi:1480
#, no-wrap
msgid "\"-rw-rw-rw-\""
msgstr ""

#. type: table
#: original_texis/files.texi:1482
msgid "has a mode of read and write access for the owner, group, and world."
msgstr ""

#. type: item
#: original_texis/files.texi:1483
#, no-wrap
msgid "t"
msgstr ""

#. type: table
#: original_texis/files.texi:1485
msgid "is merely a placeholder; it carries no information."
msgstr ""

#. type: item
#: original_texis/files.texi:1486
#, no-wrap
msgid "6473924464520138"
msgstr ""

#. type: table
#: original_texis/files.texi:1488
msgid "has an inode number of 6473924464520138."
msgstr ""

#. type: item
#: original_texis/files.texi:1489
#, no-wrap
msgid "1014478468"
msgstr ""

#. type: table
#: original_texis/files.texi:1491
msgid "is on the file-system device whose number is 1014478468."
msgstr ""

#. type: defun
#: original_texis/files.texi:1494
#, no-wrap
msgid "file-nlinks filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:1500
msgid ""
"This function returns the number of names (i.e., hard links) that file "
"@var{filename} has.  If the file does not exist, this function returns "
"@code{nil}.  Note that symbolic links have no effect on this function, "
"because they are not considered to be names of the files they link to.  This "
"function does not follow symbolic links."
msgstr ""

#. type: group
#: original_texis/files.texi:1506
#, no-wrap
msgid ""
"$ ls -l foo*\n"
"-rw-rw-rw- 2 rms rms 4 Aug 19 01:27 foo\n"
"-rw-rw-rw- 2 rms rms 4 Aug 19 01:27 foo1\n"
msgstr ""

#. type: group
#: original_texis/files.texi:1511
#, no-wrap
msgid ""
"(file-nlinks \"foo\")\n"
"     @result{} 2\n"
msgstr ""

#. type: group
#: original_texis/files.texi:1515
#, no-wrap
msgid ""
"(file-nlinks \"doesnt-exist\")\n"
"     @result{} nil\n"
msgstr ""

#. type: subsection
#: original_texis/files.texi:1520
#, no-wrap
msgid "Extended File Attributes"
msgstr ""

#. type: cindex
#: original_texis/files.texi:1521
#, no-wrap
msgid "extended file attributes"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:1530
msgid ""
"On some operating systems, each file can be associated with arbitrary "
"@dfn{extended file attributes}.  At present, Emacs supports querying and "
"setting two specific sets of extended file attributes: Access Control Lists "
"(ACLs) and SELinux contexts.  These extended file attributes are used, on "
"some systems, to impose more sophisticated file access controls than the "
"basic Unix-style permissions discussed in the previous sections."
msgstr ""

#. type: cindex
#: original_texis/files.texi:1531
#, no-wrap
msgid "access control list"
msgstr ""

#. type: cindex
#: original_texis/files.texi:1532
#, no-wrap
msgid "ACL entries"
msgstr ""

#. type: cindex
#: original_texis/files.texi:1533
#, no-wrap
msgid "SELinux context"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:1539
msgid ""
"A detailed explanation of ACLs and SELinux is beyond the scope of this "
"manual.  For our purposes, each file can be associated with an @dfn{ACL}, "
"which specifies its properties under an ACL-based file control system, "
"and/or an @dfn{SELinux context}, which specifies its properties under the "
"SELinux system."
msgstr ""

#. type: defun
#: original_texis/files.texi:1540
#, no-wrap
msgid "file-acl filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:1545
msgid ""
"This function returns the ACL for the file @var{filename}.  The exact Lisp "
"representation of the ACL is unspecified (and may change in future Emacs "
"versions), but it is the same as what @code{set-file-acl} takes for its "
"@var{acl} argument (@pxref{Changing Files})."
msgstr ""

#. type: defun
#: original_texis/files.texi:1549
msgid ""
"The underlying ACL implementation is platform-specific; on GNU/Linux and "
"BSD, Emacs uses the POSIX ACL interface, while on MS-Windows Emacs emulates "
"the POSIX ACL interface with native file security APIs."
msgstr ""

#. type: defun
#: original_texis/files.texi:1552
msgid ""
"If ACLs are not supported or the file does not exist, then the return value "
"is @code{nil}."
msgstr ""

#. type: defun
#: original_texis/files.texi:1554
#, no-wrap
msgid "file-selinux-context filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:1562
msgid ""
"This function returns the SELinux context of the file @var{filename}, as a "
"list of the form @code{(@var{user} @var{role} @var{type} @var{range})}.  The "
"list elements are the context's user, role, type, and range respectively, as "
"Lisp strings; see the SELinux documentation for details about what these "
"actually mean.  The return value has the same form as what "
"@code{set-file-selinux-context} takes for its @var{context} argument "
"(@pxref{Changing Files})."
msgstr ""

#. type: defun
#: original_texis/files.texi:1565
msgid ""
"If SELinux is not supported or the file does not exist, then the return "
"value is @code{(nil nil nil nil)}."
msgstr ""

#. type: defun
#: original_texis/files.texi:1567
#, no-wrap
msgid "file-extended-attributes filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:1574
msgid ""
"This function returns an alist of the Emacs-recognized extended attributes "
"of file @var{filename}.  Currently, it serves as a convenient way to "
"retrieve both the ACL and SELinux context; you can then call the function "
"@code{set-file-extended-attributes}, with the returned alist as its second "
"argument, to apply the same file access attributes to another file "
"(@pxref{Changing Files})."
msgstr ""

#. type: defun
#: original_texis/files.texi:1577
msgid ""
"One of the elements is @code{(acl . @var{acl})}, where @var{acl} has the "
"same form returned by @code{file-acl}."
msgstr ""

#. type: defun
#: original_texis/files.texi:1581
msgid ""
"Another element is @code{(selinux-context . @var{context})}, where "
"@var{context} is the SELinux context, in the same form returned by "
"@code{file-selinux-context}."
msgstr ""

#. type: subsection
#: original_texis/files.texi:1584
#, no-wrap
msgid "Locating Files in Standard Places"
msgstr ""

#. type: cindex
#: original_texis/files.texi:1585
#, no-wrap
msgid "locate file in path"
msgstr ""

#. type: cindex
#: original_texis/files.texi:1586
#, no-wrap
msgid "find file in path"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:1591
msgid ""
"This section explains how to search for a file in a list of directories (a "
"@dfn{path}), or for an executable file in the standard list of executable "
"file directories."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:1594
msgid ""
"To search for a user-specific configuration file, @xref{Standard File "
"Names}, for the @code{locate-user-emacs-file} function."
msgstr ""

#. type: defun
#: original_texis/files.texi:1595
#, no-wrap
msgid "locate-file filename path &optional suffixes predicate"
msgstr ""

#. type: defun
#: original_texis/files.texi:1601
msgid ""
"This function searches for a file whose name is @var{filename} in a list of "
"directories given by @var{path}, trying the suffixes in @var{suffixes}.  If "
"it finds such a file, it returns the file's absolute file name "
"(@pxref{Relative File Names}); otherwise it returns @code{nil}."
msgstr ""

#. type: defun
#: original_texis/files.texi:1611
msgid ""
"The optional argument @var{suffixes} gives the list of file-name suffixes to "
"append to @var{filename} when searching.  @code{locate-file} tries each "
"possible directory with each of these suffixes.  If @var{suffixes} is "
"@code{nil}, or @code{(\"\")}, then there are no suffixes, and @var{filename} "
"is used only as-is.  Typical values of @var{suffixes} are "
"@code{exec-suffixes} (@pxref{Subprocess Creation}), @code{load-suffixes}, "
"@code{load-file-rep-suffixes} and the return value of the function "
"@code{get-load-suffixes} (@pxref{Load Suffixes})."
msgstr ""

#. type: defun
#: original_texis/files.texi:1617
msgid ""
"Typical values for @var{path} are @code{exec-path} (@pxref{Subprocess "
"Creation}) when looking for executable programs, or @code{load-path} "
"(@pxref{Library Search}) when looking for Lisp files.  If @var{filename} is "
"absolute, @var{path} has no effect, but the suffixes in @var{suffixes} are "
"still tried."
msgstr ""

#. type: defun
#: original_texis/files.texi:1625
msgid ""
"The optional argument @var{predicate}, if non-@code{nil}, specifies a "
"predicate function for testing whether a candidate file is suitable.  The "
"predicate is passed the candidate file name as its single argument.  If "
"@var{predicate} is @code{nil} or omitted, @code{locate-file} uses "
"@code{file-readable-p} as the predicate.  @xref{Kinds of Files}, for other "
"useful predicates, e.g., @code{file-executable-p} and "
"@code{file-directory-p}."
msgstr ""

#. type: defun
#: original_texis/files.texi:1629
msgid ""
"This function will normally skip directories, so if you want it to find "
"directories, make sure the @var{predicate} function returns @code{dir-ok} "
"for them.  For example:"
msgstr ""

#. type: example
#: original_texis/files.texi:1633
#, no-wrap
msgid ""
"(locate-file \"html\" '(\"/var/www\" \"/srv\") nil\n"
"             (lambda (f) (if (file-directory-p f) 'dir-ok)))\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:1639
msgid ""
"For compatibility, @var{predicate} can also be one of the symbols "
"@code{executable}, @code{readable}, @code{writable}, @code{exists}, or a "
"list of one or more of these symbols."
msgstr ""

#. type: defun
#: original_texis/files.texi:1641
#, no-wrap
msgid "executable-find program &optional remote"
msgstr ""

#. type: defun
#: original_texis/files.texi:1648
msgid ""
"This function searches for the executable file of the named @var{program} "
"and returns the absolute file name of the executable, including its "
"file-name extensions, if any.  It returns @code{nil} if the file is not "
"found.  The function searches in all the directories in @code{exec-path}, "
"and tries all the file-name extensions in @code{exec-suffixes} "
"(@pxref{Subprocess Creation})."
msgstr ""

#. type: defun
#: original_texis/files.texi:1651
msgid ""
"If @var{remote} is non-@code{nil}, and @code{default-directory} is a remote "
"directory, @var{program} is searched on the respective remote host."
msgstr ""

#. type: section
#: original_texis/files.texi:1654
#, no-wrap
msgid "Changing File Names and Attributes"
msgstr ""

#. type: cindex
#: original_texis/files.texi:1656
#, no-wrap
msgid "copying files"
msgstr ""

#. type: cindex
#: original_texis/files.texi:1657
#, no-wrap
msgid "deleting files"
msgstr ""

#. type: cindex
#: original_texis/files.texi:1658
#, no-wrap
msgid "linking files"
msgstr ""

#. type: cindex
#: original_texis/files.texi:1659
#, no-wrap
msgid "setting modes of files"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:1667
msgid ""
"The functions in this section rename, copy, delete, link, and set the modes "
"(permissions) of files.  Typically, they signal a @code{file-error} error if "
"they fail to perform their function, reporting the system-dependent error "
"message that describes the reason for the failure.  If they fail because a "
"file is missing, they signal a @code{file-missing} error instead."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:1671
msgid ""
"For performance, the operating system may cache or alias changes made by "
"these functions instead of writing them immediately to secondary storage.  "
"@xref{Files and Storage}."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:1681
msgid ""
"In the functions that have an argument @var{newname}, if this argument is a "
"directory name it is treated as if the nondirectory part of the source name "
"were appended.  Typically, a directory name is one that ends in @samp{/} "
"(@pxref{Directory Names}).  For example, if the old name is @file{a/b/c}, "
"the @var{newname} @file{d/e/f/} is treated as if it were @file{d/e/f/c}.  "
"This special treatment does not apply if @var{newname} is not a directory "
"name but names a file that is a directory; for example, the @var{newname} "
"@file{d/e/f} is left as-is even if @file{d/e/f} happens to be a directory."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:1685
msgid ""
"In the functions that have an argument @var{newname}, if a file by the name "
"of @var{newname} already exists, the actions taken depend on the value of "
"the argument @var{ok-if-already-exists}:"
msgstr ""

#. type: itemize
#: original_texis/files.texi:1690
msgid ""
"Signal a @code{file-already-exists} error if @var{ok-if-already-exists} is "
"@code{nil}."
msgstr ""

#. type: itemize
#: original_texis/files.texi:1693
msgid "Request confirmation if @var{ok-if-already-exists} is a number."
msgstr ""

#. type: itemize
#: original_texis/files.texi:1697
msgid ""
"Replace the old file without confirmation if @var{ok-if-already-exists} is "
"any other value."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1699
#, no-wrap
msgid "Command add-name-to-file oldname newname &optional ok-if-already-exists"
msgstr ""

#. type: cindex
#: original_texis/files.texi:1700
#, no-wrap
msgid "file with multiple names"
msgstr ""

#. type: cindex
#: original_texis/files.texi:1701
#, no-wrap
msgid "file hard link"
msgstr ""

#. type: deffn
#: original_texis/files.texi:1705
msgid ""
"This function gives the file named @var{oldname} the additional name "
"@var{newname}.  This means that @var{newname} becomes a new hard link to "
"@var{oldname}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1713
msgid ""
"If @var{newname} is a symbolic link, its directory entry is replaced, not "
"the directory entry it points to.  If @var{oldname} is a symbolic link, this "
"function might or might not follow the link; it does not follow the link on "
"GNU platforms.  If @var{oldname} is a directory, this function typically "
"fails, although for the superuser on a few old-fashioned non-GNU platforms "
"it can succeed and create a filesystem that is not tree-structured."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1716
msgid ""
"In the first part of the following example, we list two files, @file{foo} "
"and @file{foo3}."
msgstr ""

#. type: group
#: original_texis/files.texi:1722
#, no-wrap
msgid ""
"$ ls -li fo*\n"
"81908 -rw-rw-rw- 1 rms rms 29 Aug 18 20:32 foo\n"
"84302 -rw-rw-rw- 1 rms rms 24 Aug 18 20:31 foo3\n"
msgstr ""

#. type: deffn
#: original_texis/files.texi:1728
msgid ""
"Now we create a hard link, by calling @code{add-name-to-file}, then list the "
"files again.  This shows two names for one file, @file{foo} and @file{foo2}."
msgstr ""

#. type: group
#: original_texis/files.texi:1733
#, no-wrap
msgid ""
"(add-name-to-file \"foo\" \"foo2\")\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/files.texi:1740
#, no-wrap
msgid ""
"$ ls -li fo*\n"
"81908 -rw-rw-rw- 2 rms rms 29 Aug 18 20:32 foo\n"
"81908 -rw-rw-rw- 2 rms rms 29 Aug 18 20:32 foo2\n"
"84302 -rw-rw-rw- 1 rms rms 24 Aug 18 20:31 foo3\n"
msgstr ""

#. type: deffn
#: original_texis/files.texi:1744
msgid "Finally, we evaluate the following:"
msgstr ""

#. type: example
#: original_texis/files.texi:1747
#, no-wrap
msgid "(add-name-to-file \"foo\" \"foo3\" t)\n"
msgstr ""

#. type: deffn
#: original_texis/files.texi:1753
msgid ""
"and list the files again.  Now there are three names for one file: "
"@file{foo}, @file{foo2}, and @file{foo3}.  The old contents of @file{foo3} "
"are lost."
msgstr ""

#. type: group
#: original_texis/files.texi:1758
#, no-wrap
msgid ""
"(add-name-to-file \"foo1\" \"foo3\")\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/files.texi:1765
#, no-wrap
msgid ""
"$ ls -li fo*\n"
"81908 -rw-rw-rw- 3 rms rms 29 Aug 18 20:32 foo\n"
"81908 -rw-rw-rw- 3 rms rms 29 Aug 18 20:32 foo2\n"
"81908 -rw-rw-rw- 3 rms rms 29 Aug 18 20:32 foo3\n"
msgstr ""

#. type: deffn
#: original_texis/files.texi:1771
msgid ""
"This function is meaningless on operating systems where multiple names for "
"one file are not allowed.  Some systems implement multiple names by copying "
"the file instead."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1773
msgid "See also @code{file-nlinks} in @ref{File Attributes}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1775
#, no-wrap
msgid "Command rename-file filename newname &optional ok-if-already-exists"
msgstr ""

#. type: deffn
#: original_texis/files.texi:1777
msgid "This command renames the file @var{filename} as @var{newname}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1783
msgid ""
"If @var{filename} has additional names aside from @var{filename}, it "
"continues to have those names.  In fact, adding the name @var{newname} with "
"@code{add-name-to-file} and then deleting @var{filename} has the same effect "
"as renaming, aside from momentary intermediate states and treatment of "
"errors, directories and symbolic links."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1788
msgid ""
"This command does not follow symbolic links.  If @var{filename} is a "
"symbolic link, this command renames the symbolic link, not the file it "
"points to.  If @var{newname} is a symbolic link, its directory entry is "
"replaced, not the directory entry it points to."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1795
msgid ""
"This command does nothing if @var{filename} and @var{newname} are the same "
"directory entry, i.e., if they refer to the same parent directory and give "
"the same name within that directory.  Otherwise, if @var{filename} and "
"@var{newname} name the same file, this command does nothing on "
"POSIX-conforming systems, and removes @var{filename} on some non-POSIX "
"systems."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1798
msgid ""
"If @var{newname} exists, then it must be an empty directory if @var{oldname} "
"is a directory and a non-directory otherwise."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1800
#, no-wrap
msgid ""
"Command copy-file oldname newname &optional ok-if-already-exists time "
"preserve-uid-gid preserve-permissions"
msgstr ""

#. type: deffn
#: original_texis/files.texi:1806
msgid ""
"This command copies the file @var{oldname} to @var{newname}.  An error is "
"signaled if @var{oldname} is not a regular file.  If @var{newname} names a "
"directory, it copies @var{oldname} into that directory, preserving its final "
"name component."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1809
msgid ""
"This function follows symbolic links, except that it does not follow a "
"dangling symbolic link to create @var{newname}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1816
msgid ""
"If @var{time} is non-@code{nil}, then this function gives the new file the "
"same last-modified time that the old one has.  (This works on only some "
"operating systems.)  If setting the time gets an error, @code{copy-file} "
"signals a @code{file-date-error} error.  In an interactive call, a prefix "
"argument specifies a non-@code{nil} value for @var{time}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1823
msgid ""
"If argument @var{preserve-uid-gid} is @code{nil}, we let the operating "
"system decide the user and group ownership of the new file (this is usually "
"set to the user running Emacs).  If @var{preserve-uid-gid} is "
"non-@code{nil}, we attempt to copy the user and group ownership of the "
"file.  This works only on some operating systems, and only if you have the "
"correct permissions to do so."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1828
msgid ""
"If the optional argument @var{preserve-permissions} is non-@code{nil}, this "
"function copies the file modes (or ``permissions'') of @var{oldname} to "
"@var{newname}, as well as the Access Control List and SELinux context (if "
"any).  @xref{Information about Files}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1834
msgid ""
"Otherwise, the file modes of @var{newname} are left unchanged if it is an "
"existing file, and set to those of @var{oldname}, masked by the default file "
"permissions (see @code{set-default-file-modes} below), if @var{newname} is "
"to be newly created.  The Access Control List or SELinux context are not "
"copied over in either case."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1836
#, no-wrap
msgid "Command make-symbolic-link target linkname &optional ok-if-already-exists"
msgstr ""

#. type: pindex
#: original_texis/files.texi:1837
#, no-wrap
msgid "ln"
msgstr ""

#. type: kindex
#: original_texis/files.texi:1838
#, no-wrap
msgid "file-already-exists"
msgstr ""

#. type: deffn
#: original_texis/files.texi:1846
msgid ""
"This command makes a symbolic link to @var{target}, named @var{linkname}.  "
"This is like the shell command @samp{ln -s @var{target} @var{linkname}}.  "
"The @var{target} argument is treated only as a string; it need not name an "
"existing file.  If @var{ok-if-already-exists} is an integer, indicating "
"interactive use, then leading @samp{~} is expanded and leading @samp{/:} is "
"stripped in the @var{target} string."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1850
msgid ""
"If @var{target} is a relative file name, the resulting symbolic link is "
"interpreted relative to the directory containing the symbolic link.  "
"@xref{Relative File Names}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1854
msgid ""
"If both @var{target} and @var{linkname} have remote file name syntax, and if "
"both remote identifications are equal, the symbolic link points to the local "
"file name part of @var{target}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1857
msgid "This function is not available on systems that don't support symbolic links."
msgstr ""

#. type: cindex
#: original_texis/files.texi:1859 original_texis/files.texi:3264
#, no-wrap
msgid "trash"
msgstr ""

#. type: vindex
#: original_texis/files.texi:1860 original_texis/files.texi:3265
#, no-wrap
msgid "delete-by-moving-to-trash"
msgstr ""

#. type: deffn
#: original_texis/files.texi:1861
#, no-wrap
msgid "Command delete-file filename &optional trash"
msgstr ""

#. type: pindex
#: original_texis/files.texi:1862
#, no-wrap
msgid "rm"
msgstr ""

#. type: deffn
#: original_texis/files.texi:1867
msgid ""
"This command deletes the file @var{filename}.  If the file has multiple "
"names, it continues to exist under the other names.  If @var{filename} is a "
"symbolic link, @code{delete-file} deletes only the symbolic link and not its "
"target."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1872
msgid ""
"The command signals a suitable kind of @code{file-error} error if "
"@var{filename} cannot be deleted.  (On GNU and other POSIX-like systems, a "
"file can be deleted if its directory is writable.)  If the file does not "
"exist, this command will not signal any error."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1879 original_texis/files.texi:3285
msgid ""
"If the optional argument @var{trash} is non-@code{nil} and the variable "
"@code{delete-by-moving-to-trash} is non-@code{nil}, this command moves the "
"file into the system Trash instead of deleting it.  @xref{Misc File "
"Ops,,Miscellaneous File Operations, emacs, The GNU Emacs Manual}.  When "
"called interactively, @var{trash} is @code{t} if no prefix argument is "
"given, and @code{nil} otherwise."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1881
msgid "See also @code{delete-directory} in @ref{Create/Delete Dirs}."
msgstr ""

#. type: cindex
#: original_texis/files.texi:1883
#, no-wrap
msgid "file permissions, setting"
msgstr ""

#. type: cindex
#: original_texis/files.texi:1885
#, no-wrap
msgid "file modes, setting"
msgstr ""

#. type: deffn
#: original_texis/files.texi:1886
#, no-wrap
msgid "Command set-file-modes filename mode &optional flag"
msgstr ""

#. type: deffn
#: original_texis/files.texi:1889
msgid ""
"This function sets the @dfn{file mode} (or @dfn{permissions}) of "
"@var{filename} to @var{mode}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1897
msgid ""
"By default this function follows symbolic links.  However, if the optional "
"argument @var{flag} is the symbol @code{nofollow}, this function does not "
"follow @var{filename} if it is a symbolic link; this can help prevent "
"inadvertently changing the mode bits of a file somewhere else.  On platforms "
"that do not support changing mode bits on a symbolic link, this function "
"signals an error when @var{filename} is a symbolic link and @var{flag} is "
"@code{nofollow}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1902
msgid ""
"If called non-interactively, @var{mode} must be an integer.  Only the lowest "
"12 bits of the integer are used; on most systems, only the lowest 9 bits are "
"meaningful.  You can use the Lisp construct for octal numbers to enter "
"@var{mode}.  For example,"
msgstr ""

#. type: example
#: original_texis/files.texi:1905
#, no-wrap
msgid "(set-file-modes \"myfile\" #o644 'nofollow)\n"
msgstr ""

#. type: deffn
#: original_texis/files.texi:1912
msgid ""
"specifies that the file should be readable and writable for its owner, "
"readable for group members, and readable for all other users.  @xref{File "
"permissions,,, coreutils, The @sc{gnu} @code{Coreutils} Manual}, for a "
"description of mode bit specifications."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1916
msgid ""
"Interactively, @var{mode} is read from the minibuffer using "
"@code{read-file-modes} (see below), which lets the user type in either an "
"integer or a string representing the permissions symbolically."
msgstr ""

#. type: deffn
#: original_texis/files.texi:1919
msgid ""
"@xref{Testing Accessibility}, for the function @code{file-modes}, which "
"returns the permissions of a file."
msgstr ""

#. type: defun
#: original_texis/files.texi:1921
#, no-wrap
msgid "set-default-file-modes mode"
msgstr ""

#. type: cindex
#: original_texis/files.texi:1922
#, no-wrap
msgid "umask"
msgstr ""

#. type: defun
#: original_texis/files.texi:1932
msgid ""
"This function sets the default permissions for new files created by Emacs "
"and its subprocesses.  Every file created with Emacs initially has these "
"permissions, or a subset of them (@code{write-region} will not grant execute "
"permissions even if the default file permissions allow execution).  On GNU "
"and other POSIX-like systems, the default permissions are given by the "
"bitwise complement of the @samp{umask} value, i.e.@: each bit that is set in "
"the argument @var{mode} will be @emph{reset} in the default permissions with "
"which Emacs creates files."
msgstr ""

#. type: defun
#: original_texis/files.texi:1936
msgid ""
"The argument @var{mode} should be an integer which specifies the "
"permissions, similar to @code{set-file-modes} above.  Only the lowest 9 bits "
"are meaningful."
msgstr ""

#. type: defun
#: original_texis/files.texi:1940
msgid ""
"The default file permissions have no effect when you save a modified version "
"of an existing file; saving a file preserves its existing permissions."
msgstr ""

#. type: defmac
#: original_texis/files.texi:1942
#, no-wrap
msgid "with-file-modes mode body@dots{}"
msgstr ""

#. type: defmac
#: original_texis/files.texi:1948
msgid ""
"This macro evaluates the @var{body} forms with the default permissions for "
"new files temporarily set to @var{modes} (whose value is as for "
"@code{set-file-modes} above).  When finished, it restores the original "
"default file permissions, and returns the value of the last form in "
"@var{body}."
msgstr ""

#. type: defmac
#: original_texis/files.texi:1950
msgid "This is useful for creating private files, for example."
msgstr ""

#. type: defun
#: original_texis/files.texi:1952
#, no-wrap
msgid "default-file-modes"
msgstr ""

#. type: defun
#: original_texis/files.texi:1954
msgid "This function returns the default file permissions, as an integer."
msgstr ""

#. type: defun
#: original_texis/files.texi:1956
#, no-wrap
msgid "read-file-modes &optional prompt base-file"
msgstr ""

#. type: defun
#: original_texis/files.texi:1963
msgid ""
"This function reads a set of file mode bits from the minibuffer.  The first "
"optional argument @var{prompt} specifies a non-default prompt.  Second "
"second optional argument @var{base-file} is the name of a file on whose "
"permissions to base the mode bits that this function returns, if what the "
"user types specifies mode bits relative to permissions of an existing file."
msgstr ""

#. type: defun
#: original_texis/files.texi:1976
msgid ""
"If user input represents an octal number, this function returns that "
"number.  If it is a complete symbolic specification of mode bits, as in "
"@code{\"u=rwx\"}, the function converts it to the equivalent numeric value "
"using @code{file-modes-symbolic-to-number} and returns the result.  If the "
"specification is relative, as in @code{\"o+g\"}, then the permissions on "
"which the specification is based are taken from the mode bits of "
"@var{base-file}.  If @var{base-file} is omitted or @code{nil}, the function "
"uses @code{0} as the base mode bits.  The complete and relative "
"specifications can be combined, as in @code{\"u+r,g+rx,o+r,g-w\"}.  "
"@xref{File permissions,,, coreutils, The @sc{gnu} @code{Coreutils} Manual}, "
"for a description of file mode specifications."
msgstr ""

#. type: defun
#: original_texis/files.texi:1978
#, no-wrap
msgid "file-modes-symbolic-to-number modes &optional base-modes"
msgstr ""

#. type: defun
#: original_texis/files.texi:1985
msgid ""
"This function converts a symbolic file mode specification in @var{modes} "
"into the equivalent integer.  If the symbolic specification is based on an "
"existing file, that file's mode bits are taken from the optional argument "
"@var{base-modes}; if that argument is omitted or @code{nil}, it defaults to "
"0, i.e., no access rights at all."
msgstr ""

#. type: defun
#: original_texis/files.texi:1987
#, no-wrap
msgid "file-modes-number-to-symbolic modes"
msgstr ""

#. type: defun
#: original_texis/files.texi:1994
msgid ""
"This function converts a numeric file mode specification in @var{modes} into "
"the equivalent string form.  The string which this function returns is in "
"the same format produced by the shell command @kbd{ls -l} and by "
"@code{file-attributes}, @emph{not} the symbolic form accepted by "
"@code{file-modes-symbolic-to-number} and the @command{chmod} shell command."
msgstr ""

#. type: defun
#: original_texis/files.texi:1996
#, no-wrap
msgid "set-file-times filename &optional time flag"
msgstr ""

#. type: defun
#: original_texis/files.texi:2001
msgid ""
"This function sets the access and modification times of @var{filename} to "
"@var{time}.  The return value is @code{t} if the times are successfully set, "
"otherwise it is @code{nil}.  @var{time} defaults to the current time and "
"must be a time value (@pxref{Time of Day})."
msgstr ""

#. type: defun
#: original_texis/files.texi:2009
msgid ""
"By default this function follows symbolic links.  However, if the optional "
"argument @var{flag} is the symbol @code{nofollow}, this function does not "
"follow @var{filename} if it is a symbolic link; this can help prevent "
"inadvertently changing the times of a file somewhere else.  On platforms "
"that do not support changing times on a symbolic link, this function signals "
"an error when @var{filename} is a symbolic link and @var{flag} is "
"@code{nofollow}."
msgstr ""

#. type: defun
#: original_texis/files.texi:2011
#, no-wrap
msgid "set-file-extended-attributes filename attribute-alist"
msgstr ""

#. type: defun
#: original_texis/files.texi:2018
msgid ""
"This function sets the Emacs-recognized extended file attributes for "
"@var{filename}.  The second argument @var{attribute-alist} should be an "
"alist of the same form returned by @code{file-extended-attributes}.  The "
"return value is @code{t} if the attributes are successfully set, otherwise "
"it is @code{nil}.  @xref{Extended Attributes}."
msgstr ""

#. type: defun
#: original_texis/files.texi:2020
#, no-wrap
msgid "set-file-selinux-context filename context"
msgstr ""

#. type: defun
#: original_texis/files.texi:2025
msgid ""
"This function sets the SELinux security context for @var{filename} to "
"@var{context}.  The @var{context} argument should be a list "
"@code{(@var{user} @var{role} @var{type} @var{range})}, where each element is "
"a string.  @xref{Extended Attributes}."
msgstr ""

#. type: defun
#: original_texis/files.texi:2030
msgid ""
"The function returns @code{t} if it succeeds in setting the SELinux context "
"of @var{filename}.  It returns @code{nil} if the context was not set (e.g., "
"if SELinux is disabled, or if Emacs was compiled without SELinux support)."
msgstr ""

#. type: defun
#: original_texis/files.texi:2032
#, no-wrap
msgid "set-file-acl filename acl"
msgstr ""

#. type: defun
#: original_texis/files.texi:2036
msgid ""
"This function sets the Access Control List for @var{filename} to @var{acl}.  "
"The @var{acl} argument should have the same form returned by the function "
"@code{file-acl}.  @xref{Extended Attributes}."
msgstr ""

#. type: defun
#: original_texis/files.texi:2039
msgid ""
"The function returns @code{t} if it successfully sets the ACL of "
"@var{filename}, @code{nil} otherwise."
msgstr ""

#. type: section
#: original_texis/files.texi:2042
#, no-wrap
msgid "Files and Secondary Storage"
msgstr ""

#. type: cindex
#: original_texis/files.texi:2043
#, no-wrap
msgid "secondary storage"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2053
msgid ""
"After Emacs changes a file, there are two reasons the changes might not "
"survive later failures of power or media, both having to do with "
"efficiency.  First, the operating system might alias written data with data "
"already stored elsewhere on secondary storage until one file or the other is "
"later modified; this will lose both files if the only copy on secondary "
"storage is lost due to media failure.  Second, the operating system might "
"not write data to secondary storage immediately, which will lose the data if "
"power is lost."
msgstr ""

#. type: findex
#: original_texis/files.texi:2054
#, no-wrap
msgid "write-region"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2062
msgid ""
"Although both sorts of failures can largely be avoided by a suitably "
"configured file system, such systems are typically more expensive or less "
"efficient.  In more-typical systems, to survive media failure you can copy "
"the file to a different device, and to survive a power failure you can use "
"the @code{write-region} function with the @code{write-region-inhibit-fsync} "
"variable set to @code{nil}.  @xref{Writing to Files}."
msgstr ""

#. type: cindex
#: original_texis/files.texi:2065
#, no-wrap
msgid "file names"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2070
msgid ""
"Files are generally referred to by their names, in Emacs as elsewhere.  File "
"names in Emacs are represented as strings.  The functions that operate on a "
"file all expect a file name argument."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2075
msgid ""
"In addition to operating on files themselves, Emacs Lisp programs often need "
"to operate on file names; i.e., to take them apart and to use part of a name "
"to construct related file names.  This section describes how to manipulate "
"file names."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2079
msgid ""
"The functions in this section do not actually access files, so they can "
"operate on file names that do not refer to an existing file or directory."
msgstr ""

#. type: findex
#: original_texis/files.texi:2080
#, no-wrap
msgid "cygwin-convert-file-name-from-windows"
msgstr ""

#. type: findex
#: original_texis/files.texi:2081
#, no-wrap
msgid "cygwin-convert-file-name-to-windows"
msgstr ""

#. type: cindex
#: original_texis/files.texi:2082
#, no-wrap
msgid "MS-Windows file-name syntax"
msgstr ""

#. type: cindex
#: original_texis/files.texi:2083
#, no-wrap
msgid "converting file names from/to MS-Windows syntax"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2094
msgid ""
"On MS-DOS and MS-Windows, these functions (like the function that actually "
"operate on files) accept MS-DOS or MS-Windows file-name syntax, where "
"backslashes separate the components, as well as POSIX syntax; but they "
"always return POSIX syntax.  This enables Lisp programs to specify file "
"names in POSIX syntax and work properly on all systems without "
"change.@footnote{In MS-Windows versions of Emacs compiled for the Cygwin "
"environment, you can use the functions "
"@code{cygwin-convert-file-name-to-windows} and "
"@code{cygwin-convert-file-name-from-windows} to convert between the two "
"file-name syntaxes.}"
msgstr ""

#. type: subsection
#: original_texis/files.texi:2105 original_texis/files.texi:2107
#: original_texis/files.texi:2108
#, no-wrap
msgid "File Name Components"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:2105
msgid "The directory part of a file name, and the rest."
msgstr ""

#. type: node
#: original_texis/files.texi:2105 original_texis/files.texi:2279
#, no-wrap
msgid "Relative File Names"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:2105
msgid "Some file names are relative to a current directory."
msgstr ""

#. type: subsection
#: original_texis/files.texi:2105 original_texis/files.texi:2356
#: original_texis/files.texi:2357
#, no-wrap
msgid "Directory Names"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:2105
msgid "A directory's name as a directory is different from its name as a file."
msgstr ""

#. type: node
#: original_texis/files.texi:2105 original_texis/files.texi:2471
#, no-wrap
msgid "File Name Expansion"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:2105
msgid "Converting relative file names to absolute ones."
msgstr ""

#. type: node
#: original_texis/files.texi:2105 original_texis/files.texi:2700
#, no-wrap
msgid "Unique File Names"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:2105
msgid "Generating names for temporary files."
msgstr ""

#. type: subsection
#: original_texis/files.texi:2105 original_texis/files.texi:2852
#: original_texis/files.texi:2853
#, no-wrap
msgid "File Name Completion"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:2105
msgid "Finding the completions for a given file name."
msgstr ""

#. type: subsection
#: original_texis/files.texi:2105 original_texis/files.texi:2952
#: original_texis/files.texi:2953
#, no-wrap
msgid "Standard File Names"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:2105
msgid ""
"If your package uses a fixed file name, how to handle various operating "
"systems simply."
msgstr ""

#. type: cindex
#: original_texis/files.texi:2109
#, no-wrap
msgid "directory part (of file name)"
msgstr ""

#. type: cindex
#: original_texis/files.texi:2110
#, no-wrap
msgid "nondirectory part (of file name)"
msgstr ""

#. type: cindex
#: original_texis/files.texi:2111
#, no-wrap
msgid "version number (in file name)"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2122
msgid ""
"The operating system groups files into directories.  To specify a file, you "
"must specify the directory and the file's name within that directory.  "
"Therefore, Emacs considers a file name as having two main parts: the "
"@dfn{directory name} part, and the @dfn{nondirectory} part (or @dfn{file "
"name within the directory}).  Either part may be empty.  Concatenating these "
"two parts reproduces the original file name.  @footnote{Emacs follows the "
"GNU convention to use the term @emph{file name} instead of the term "
"@emph{pathname}.  We use the term @emph{path} only for search paths, which "
"are lists of directory names.}"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2126
msgid ""
"On most systems, the directory part is everything up to and including the "
"last slash (backslash is also allowed in input on MS-DOS or MS-Windows); the "
"nondirectory part is the rest."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2130
msgid ""
"For some purposes, the nondirectory part is further subdivided into the name "
"proper and the @dfn{version number}.  On most systems, only backup files "
"have version numbers in their names."
msgstr ""

#. type: defun
#: original_texis/files.texi:2131
#, no-wrap
msgid "file-name-directory filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:2135
msgid ""
"This function returns the directory part of @var{filename}, as a directory "
"name (@pxref{Directory Names}), or @code{nil} if @var{filename} does not "
"include a directory part."
msgstr ""

#. type: defun
#: original_texis/files.texi:2138
msgid ""
"On GNU and other POSIX-like systems, a string returned by this function "
"always ends in a slash.  On MS-DOS it can also end in a colon."
msgstr ""

#. type: group
#: original_texis/files.texi:2143
#, no-wrap
msgid ""
"(file-name-directory \"lewis/foo\")  ; @r{GNU example}\n"
"     @result{} \"lewis/\"\n"
msgstr ""

#. type: group
#: original_texis/files.texi:2147
#, no-wrap
msgid ""
"(file-name-directory \"foo\")        ; @r{GNU example}\n"
"     @result{} nil\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:2151
#, no-wrap
msgid "file-name-nondirectory filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:2153
msgid "This function returns the nondirectory part of @var{filename}."
msgstr ""

#. type: group
#: original_texis/files.texi:2158
#, no-wrap
msgid ""
"(file-name-nondirectory \"lewis/foo\")\n"
"     @result{} \"foo\"\n"
msgstr ""

#. type: group
#: original_texis/files.texi:2162
#, no-wrap
msgid ""
"(file-name-nondirectory \"foo\")\n"
"     @result{} \"foo\"\n"
msgstr ""

#. type: group
#: original_texis/files.texi:2166
#, no-wrap
msgid ""
"(file-name-nondirectory \"lewis/\")\n"
"     @result{} \"\"\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:2170
#, no-wrap
msgid "file-name-sans-versions filename &optional keep-backup-version"
msgstr ""

#. type: defun
#: original_texis/files.texi:2173
msgid ""
"This function returns @var{filename} with any file version numbers, backup "
"version numbers, or trailing tildes discarded."
msgstr ""

#. type: defun
#: original_texis/files.texi:2177
msgid ""
"If @var{keep-backup-version} is non-@code{nil}, then true file version "
"numbers understood as such by the file system are discarded from the return "
"value, but backup version numbers are kept."
msgstr ""

#. type: group
#: original_texis/files.texi:2182
#, no-wrap
msgid ""
"(file-name-sans-versions \"~rms/foo.~1~\")\n"
"     @result{} \"~rms/foo\"\n"
msgstr ""

#. type: group
#: original_texis/files.texi:2186
#, no-wrap
msgid ""
"(file-name-sans-versions \"~rms/foo~\")\n"
"     @result{} \"~rms/foo\"\n"
msgstr ""

#. type: group
#: original_texis/files.texi:2190
#, no-wrap
msgid ""
"(file-name-sans-versions \"~rms/foo\")\n"
"     @result{} \"~rms/foo\"\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:2194
#, no-wrap
msgid "file-name-extension filename &optional period"
msgstr ""

#. type: defun
#: original_texis/files.texi:2200
msgid ""
"This function returns @var{filename}'s final extension, if any, after "
"applying @code{file-name-sans-versions} to remove any version/backup part.  "
"The extension, in a file name, is the part that follows the last @samp{.} in "
"the last name component (minus any version/backup part)."
msgstr ""

#. type: defun
#: original_texis/files.texi:2207
msgid ""
"This function returns @code{nil} for extensionless file names such as "
"@file{foo}.  It returns @code{\"\"} for null extensions, as in @file{foo.}.  "
"If the last component of a file name begins with a @samp{.}, that @samp{.} "
"doesn't count as the beginning of an extension.  Thus, @file{.emacs}'s "
"extension is @code{nil}, not @samp{.emacs}."
msgstr ""

#. type: defun
#: original_texis/files.texi:2211
msgid ""
"If @var{period} is non-@code{nil}, then the returned value includes the "
"period that delimits the extension, and if @var{filename} has no extension, "
"the value is @code{\"\"}."
msgstr ""

#. type: defun
#: original_texis/files.texi:2213
#, no-wrap
msgid "file-name-with-extension filename extension"
msgstr ""

#. type: defun
#: original_texis/files.texi:2217
msgid ""
"This function returns @var{filename} with its extension set to "
"@var{extension}.  A single leading dot in the @var{extension} will be "
"stripped if there is one.  For example:"
msgstr ""

#. type: example
#: original_texis/files.texi:2225
#, no-wrap
msgid ""
"(file-name-with-extension \"file\" \"el\")\n"
"     @result{} \"file.el\"\n"
"(file-name-with-extension \"file\" \".el\")\n"
"     @result{} \"file.el\"\n"
"(file-name-with-extension \"file.c\" \"el\")\n"
"     @result{} \"file.el\"\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:2230
msgid ""
"Note that this function will error if @var{filename} or @var{extension} are "
"empty, or if the @var{filename} is shaped like a directory (i.e., if "
"@code{directory-name-p} returns non-@code{nil})."
msgstr ""

#. type: defun
#: original_texis/files.texi:2232
#, no-wrap
msgid "file-name-sans-extension filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:2236
msgid ""
"This function returns @var{filename} minus its extension, if any.  The "
"version/backup part, if present, is only removed if the file has an "
"extension.  For example,"
msgstr ""

#. type: example
#: original_texis/files.texi:2250
#, no-wrap
msgid ""
"(file-name-sans-extension \"foo.lose.c\")\n"
"     @result{} \"foo.lose\"\n"
"(file-name-sans-extension \"big.hack/foo\")\n"
"     @result{} \"big.hack/foo\"\n"
"(file-name-sans-extension \"/my/home/.emacs\")\n"
"     @result{} \"/my/home/.emacs\"\n"
"(file-name-sans-extension \"/my/home/.emacs.el\")\n"
"     @result{} \"/my/home/.emacs\"\n"
"(file-name-sans-extension \"~/foo.el.~3~\")\n"
"     @result{} \"~/foo\"\n"
"(file-name-sans-extension \"~/foo.~3~\")\n"
"     @result{} \"~/foo.~3~\"\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:2254
msgid ""
"Note that the @samp{.~3~} in the two last examples is the backup part, not "
"an extension."
msgstr ""

#. type: defun
#: original_texis/files.texi:2256
#, no-wrap
msgid "file-name-base filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:2259
msgid ""
"This function is the composition of @code{file-name-sans-extension} and "
"@code{file-name-nondirectory}.  For example,"
msgstr ""

#. type: example
#: original_texis/files.texi:2263
#, no-wrap
msgid ""
"(file-name-base \"/my/home/foo.c\")\n"
"    @result{} \"foo\"\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:2266
#, no-wrap
msgid "file-name-split filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:2270
msgid ""
"This function splits a file name into its components, and can be thought of "
"as the inverse of @code{string-join} with the appropriate directory "
"separator.  For example,"
msgstr ""

#. type: example
#: original_texis/files.texi:2276
#, no-wrap
msgid ""
"(file-name-split \"/tmp/foo.txt\")\n"
"    @result{} (\"\" \"tmp\" \"foo.txt\")\n"
"(string-join (file-name-split \"/tmp/foo.txt\") \"/\")\n"
"    @result{} \"/tmp/foo.txt\"\n"
msgstr ""

#. type: subsection
#: original_texis/files.texi:2280
#, no-wrap
msgid "Absolute and Relative File Names"
msgstr ""

#. type: cindex
#: original_texis/files.texi:2281
#, no-wrap
msgid "absolute file name"
msgstr ""

#. type: cindex
#: original_texis/files.texi:2282
#, no-wrap
msgid "relative file name"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2296
msgid ""
"All the directories in the file system form a tree starting at the root "
"directory.  A file name can specify all the directory names starting from "
"the root of the tree; then it is called an @dfn{absolute} file name.  Or it "
"can specify the position of the file in the tree relative to a default "
"directory; then it is called a @dfn{relative} file name.  On GNU and other "
"POSIX-like systems, after any leading @samp{~} has been expanded, an "
"absolute file name starts with a @samp{/} (@pxref{abbreviate-file-name}), "
"and a relative one does not.  On MS-DOS and MS-Windows, an absolute file "
"name starts with a slash or a backslash, or with a drive specification "
"@samp{@var{x}:/}, where @var{x} is the @dfn{drive letter}."
msgstr ""

#. type: defun
#: original_texis/files.texi:2297
#, no-wrap
msgid "file-name-absolute-p filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:2304
msgid ""
"This function returns @code{t} if file @var{filename} is an absolute file "
"name, @code{nil} otherwise.  A file name is considered to be absolute if its "
"first component is @samp{~}, or is @samp{~@var{user}} where @var{user} is a "
"valid login name.  In the following examples, assume that there is a user "
"named @samp{rms} but no user named @samp{nosuchuser}."
msgstr ""

#. type: group
#: original_texis/files.texi:2309
#, no-wrap
msgid ""
"(file-name-absolute-p \"~rms/foo\")\n"
"     @result{} t\n"
msgstr ""

#. type: group
#: original_texis/files.texi:2313
#, no-wrap
msgid ""
"(file-name-absolute-p \"~nosuchuser/foo\")\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/files.texi:2317
#, no-wrap
msgid ""
"(file-name-absolute-p \"rms/foo\")\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/files.texi:2321
#, no-wrap
msgid ""
"(file-name-absolute-p \"/user/rms/foo\")\n"
"     @result{} t\n"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2330
msgid ""
"Given a possibly relative file name, you can expand any leading @samp{~} and "
"convert the result to an absolute name using @code{expand-file-name} "
"(@pxref{File Name Expansion}).  This function converts absolute file names "
"to relative names:"
msgstr ""

#. type: defun
#: original_texis/files.texi:2331
#, no-wrap
msgid "file-relative-name filename &optional directory"
msgstr ""

#. type: defun
#: original_texis/files.texi:2337
msgid ""
"This function tries to return a relative name that is equivalent to "
"@var{filename}, assuming the result will be interpreted relative to "
"@var{directory} (an absolute directory name or directory file name).  If "
"@var{directory} is omitted or @code{nil}, it defaults to the current "
"buffer's default directory."
msgstr ""

#. type: defun
#: original_texis/files.texi:2343
msgid ""
"On some operating systems, an absolute file name begins with a device name.  "
"On such systems, @var{filename} has no relative equivalent based on "
"@var{directory} if they start with two different device names.  In this "
"case, @code{file-relative-name} returns @var{filename} in absolute form."
msgstr ""

#. type: example
#: original_texis/files.texi:2349
#, no-wrap
msgid ""
"(file-relative-name \"/foo/bar\" \"/foo/\")\n"
"     @result{} \"bar\"\n"
"(file-relative-name \"/foo/bar\" \"/hack/\")\n"
"     @result{} \"../foo/bar\"\n"
msgstr ""

#. type: cindex
#: original_texis/files.texi:2352
#, no-wrap
msgid "empty file name"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2355
msgid ""
"A file name that is an empty string stands for the current buffer's default "
"directory."
msgstr ""

#. type: cindex
#: original_texis/files.texi:2358
#, no-wrap
msgid "directory name"
msgstr ""

#. type: cindex
#: original_texis/files.texi:2359
#, no-wrap
msgid "directory file name"
msgstr ""

#. type: cindex
#: original_texis/files.texi:2360
#, no-wrap
msgid "file name of directory"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2372
msgid ""
"A @dfn{directory name} is a string that must name a directory if it names "
"any file at all.  A directory is actually a kind of file, and it has a file "
"name (called the @dfn{directory file name}), which is related to the "
"directory name but is typically not identical.  (This is not quite the same "
"as the usual POSIX terminology.)  These two names for the same entity are "
"related by a syntactic transformation.  On GNU and other POSIX-like systems, "
"this is simple: to obtain a directory name, append a @samp{/} to a directory "
"file name that does not already end in @samp{/}.  On MS-DOS the relationship "
"is more complicated."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2378
msgid ""
"The difference between a directory name and a directory file name is subtle "
"but crucial.  When an Emacs variable or function argument is described as "
"being a directory name, a directory file name is not acceptable.  When "
"@code{file-name-directory} returns a string, that is always a directory "
"name."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2383
msgid ""
"The following two functions convert between directory names and directory "
"file names.  They do nothing special with environment variable substitutions "
"such as @samp{$HOME}, and the constructs @samp{~}, @samp{.} and @samp{..}."
msgstr ""

#. type: defun
#: original_texis/files.texi:2384
#, no-wrap
msgid "file-name-as-directory filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:2389
msgid ""
"This function returns a string representing @var{filename} in a form that "
"the operating system will interpret as the name of a directory (a directory "
"name).  On most systems, this means appending a slash to the string (if it "
"does not already end in one)."
msgstr ""

#. type: group
#: original_texis/files.texi:2394
#, no-wrap
msgid ""
"(file-name-as-directory \"~rms/lewis\")\n"
"     @result{} \"~rms/lewis/\"\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:2398
#, no-wrap
msgid "directory-name-p filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:2403
msgid ""
"This function returns non-@code{nil} if @var{filename} ends with a directory "
"separator character.  This is the forward slash @samp{/} on GNU and other "
"POSIX-like systems; MS-Windows and MS-DOS recognize both the forward slash "
"and the backslash @samp{\\} as directory separators."
msgstr ""

#. type: defun
#: original_texis/files.texi:2405
#, no-wrap
msgid "directory-file-name dirname"
msgstr ""

#. type: defun
#: original_texis/files.texi:2411
msgid ""
"This function returns a string representing @var{dirname} in a form that the "
"operating system will interpret as the name of a file (a directory file "
"name).  On most systems, this means removing the final directory separators "
"from the string, unless the string consists entirely of directory "
"separators."
msgstr ""

#. type: group
#: original_texis/files.texi:2416
#, no-wrap
msgid ""
"(directory-file-name \"~lewis/\")\n"
"     @result{} \"~lewis\"\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:2420
#, no-wrap
msgid "file-name-concat directory &rest components"
msgstr ""

#. type: defun
#: original_texis/files.texi:2424
msgid ""
"Concatenate @var{components} to @var{directory}, inserting a slash before "
"the components if @var{directory} or the preceding component didn't end with "
"a slash."
msgstr ""

#. type: group
#: original_texis/files.texi:2429
#, no-wrap
msgid ""
"(file-name-concat \"/tmp\" \"foo\")\n"
"     @result{} \"/tmp/foo\"\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:2435
msgid ""
"A @var{directory} or components that are @code{nil} or the empty string are "
"ignored---they are filtered out first and do not affect the results in any "
"way."
msgstr ""

#. type: defun
#: original_texis/files.texi:2439
msgid ""
"This is almost the same as using @code{concat}, but @var{dirname} (and the "
"non-final components) may or may not end with slash characters, and this "
"function will not double those characters."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2443
msgid "To convert a directory name to its abbreviation, use this function:"
msgstr ""

#. type: cindex
#: original_texis/files.texi:2444
#, no-wrap
msgid "file name abbreviations"
msgstr ""

#. type: cindex
#: original_texis/files.texi:2445
#, no-wrap
msgid "abbreviated file names"
msgstr ""

#. type: vindex
#: original_texis/files.texi:2446
#, no-wrap
msgid "directory-abbrev-alist"
msgstr ""

#. type: defun
#: original_texis/files.texi:2447
#, no-wrap
msgid "abbreviate-file-name filename"
msgstr ""

#. type: anchor{#1}
#: original_texis/files.texi:2457
msgid "abbreviate-file-name"
msgstr ""

#. type: defun
#: original_texis/files.texi:2457
msgid ""
"This function returns an abbreviated form of @var{filename}.  It applies the "
"abbreviations specified in @code{directory-abbrev-alist} (@pxref{File "
"Aliases,,File Aliases, emacs, The GNU Emacs Manual}), then substitutes "
"@samp{~} for the user's home directory if the argument names a file in the "
"home directory or one of its subdirectories.  If the home directory is a "
"root directory, it is not replaced with @samp{~}, because this does not make "
"the result shorter on many systems."
msgstr ""

#. type: defun
#: original_texis/files.texi:2460
msgid ""
"You can use this function for directory names and for file names, because it "
"recognizes abbreviations even as part of the name."
msgstr ""

#. type: defun
#: original_texis/files.texi:2462
#, no-wrap
msgid "file-name-parent-directory filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:2469
msgid ""
"This function returns the directory name of the parent directory of "
"@var{filename}.  If @var{filename} is at the root directory of the "
"filesystem, it returns @code{nil}.  A relative @var{filename} is assumed to "
"be relative to @code{default-directory}, and the return value will also be "
"relative in that case.  If the return value is non-@code{nil}, it ends in a "
"slash."
msgstr ""

#. type: subsection
#: original_texis/files.texi:2472
#, no-wrap
msgid "Functions that Expand Filenames"
msgstr ""

#. type: cindex
#: original_texis/files.texi:2473
#, no-wrap
msgid "expansion of file names"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2480
msgid ""
"@dfn{Expanding} a file name means converting a relative file name to an "
"absolute one.  Since this is done relative to a default directory, you must "
"specify the default directory as well as the file name to be expanded.  It "
"also involves expanding abbreviations like @file{~/}"
msgstr ""

#. type: ifnottex
#: original_texis/files.texi:2482
msgid "(@pxref{abbreviate-file-name}),"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2484
msgid "and eliminating redundancies like @file{./} and @file{@var{name}/../}."
msgstr ""

#. type: defun
#: original_texis/files.texi:2485
#, no-wrap
msgid "expand-file-name filename &optional directory"
msgstr ""

#. type: defun
#: original_texis/files.texi:2493
msgid ""
"This function converts @var{filename} to an absolute file name.  If "
"@var{directory} is supplied, it is the default directory to start with if "
"@var{filename} is relative and does not start with @samp{~}.  (The value of "
"@var{directory} should itself be an absolute directory name or directory "
"file name; it may start with @samp{~}.)  Otherwise, the current buffer's "
"value of @code{default-directory} is used.  For example:"
msgstr ""

#. type: group
#: original_texis/files.texi:2498
#, no-wrap
msgid ""
"(expand-file-name \"foo\")\n"
"     @result{} \"/xcssun/users/rms/lewis/foo\"\n"
msgstr ""

#. type: group
#: original_texis/files.texi:2502
#, no-wrap
msgid ""
"(expand-file-name \"../foo\")\n"
"     @result{} \"/xcssun/users/rms/foo\"\n"
msgstr ""

#. type: group
#: original_texis/files.texi:2506
#, no-wrap
msgid ""
"(expand-file-name \"foo\" \"/usr/spool/\")\n"
"     @result{} \"/usr/spool/foo\"\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:2520
msgid ""
"If the part of @var{filename} before the first slash is @samp{~}, it expands "
"to your home directory, which is typically specified by the value of the "
"@env{HOME} environment variable (@pxref{General Variables,,, emacs, The GNU "
"Emacs Manual}).  If the part before the first slash is @samp{~@var{user}} "
"and if @var{user} is a valid login name, it expands to @var{user}'s home "
"directory.  If you do not want this expansion for a relative @var{filename} "
"that might begin with a literal @samp{~}, you can use @code{(concat "
"(file-name-as-directory directory) filename)} instead of "
"@code{(expand-file-name filename directory)}."
msgstr ""

#. type: defun
#: original_texis/files.texi:2523
msgid ""
"File names containing @samp{.} or @samp{..} are simplified to their "
"canonical form:"
msgstr ""

#. type: group
#: original_texis/files.texi:2528
#, no-wrap
msgid ""
"(expand-file-name \"bar/../foo\")\n"
"     @result{} \"/xcssun/users/rms/lewis/foo\"\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:2532
msgid "In some cases, a leading @samp{..} component can remain in the output:"
msgstr ""

#. type: group
#: original_texis/files.texi:2537
#, no-wrap
msgid ""
"(expand-file-name \"../home\" \"/\")\n"
"     @result{} \"/../home\"\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:2544
msgid ""
"This is for the sake of filesystems that have the concept of a superroot "
"above the root directory @file{/}.  On other filesystems, @file{/../} is "
"interpreted exactly the same as @file{/}."
msgstr ""

#. type: cindex
#: original_texis/files.texi:2545
#, no-wrap
msgid "empty file names, and @code{expand-file-name}"
msgstr ""

#. type: defun
#: original_texis/files.texi:2547
msgid "Expanding @file{.} or the empty string returns the default directory:"
msgstr ""

#. type: group
#: original_texis/files.texi:2554
#, no-wrap
msgid ""
"(expand-file-name \".\" \"/usr/spool/\")\n"
"     @result{} \"/usr/spool\"\n"
"(expand-file-name \"\" \"/usr/spool/\")\n"
"     @result{} \"/usr/spool\"\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:2559
msgid ""
"Note that @code{expand-file-name} does @emph{not} expand environment "
"variables; only @code{substitute-in-file-name} does that:"
msgstr ""

#. type: group
#: original_texis/files.texi:2564
#, no-wrap
msgid ""
"(expand-file-name \"$HOME/foo\")\n"
"     @result{} \"/xcssun/users/rms/lewis/$HOME/foo\"\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:2572
msgid ""
"Note also that @code{expand-file-name} does not follow symbolic links at any "
"level.  This results in a difference between the way @code{file-truename} "
"and @code{expand-file-name} treat @samp{..}.  Assuming that @samp{/tmp/bar} "
"is a symbolic link to the directory @samp{/tmp/foo/bar} we get:"
msgstr ""

#. type: group
#: original_texis/files.texi:2577
#, no-wrap
msgid ""
"(file-truename \"/tmp/bar/../myfile\")\n"
"     @result{} \"/tmp/foo/myfile\"\n"
msgstr ""

#. type: group
#: original_texis/files.texi:2581
#, no-wrap
msgid ""
"(expand-file-name \"/tmp/bar/../myfile\")\n"
"     @result{} \"/tmp/myfile\"\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:2587
msgid ""
"If you may need to follow symbolic links preceding @samp{..}, you should "
"make sure to call @code{file-truename} without prior direct or indirect "
"calls to @code{expand-file-name}.  @xref{Truenames}."
msgstr ""

#. type: defvar
#: original_texis/files.texi:2589
#, no-wrap
msgid "default-directory"
msgstr ""

#. type: defvar
#: original_texis/files.texi:2593
msgid ""
"The value of this buffer-local variable is the default directory for the "
"current buffer.  It should be an absolute directory name; it may start with "
"@samp{~}.  This variable is buffer-local in every buffer."
msgstr ""

#. type: defvar
#: original_texis/files.texi:2596
msgid ""
"@code{expand-file-name} uses the default directory when its second argument "
"is @code{nil}."
msgstr ""

#. type: defvar
#: original_texis/files.texi:2598
msgid "The value is always a string ending with a slash."
msgstr ""

#. type: group
#: original_texis/files.texi:2603
#, no-wrap
msgid ""
"default-directory\n"
"     @result{} \"/user/lewis/manual/\"\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:2607
#, no-wrap
msgid "substitute-in-file-name filename"
msgstr ""

#. type: anchor{#1}
#: original_texis/files.texi:2615
msgid "Definition of substitute-in-file-name"
msgstr ""

#. type: defun
#: original_texis/files.texi:2615
msgid ""
"This function replaces environment variable references in @var{filename} "
"with the environment variable values.  Following standard Unix shell syntax, "
"@samp{$} is the prefix to substitute an environment variable value.  If the "
"input contains @samp{$$}, that is converted to @samp{$}; this gives the user "
"a way to quote a @samp{$}."
msgstr ""

#. type: defun
#: original_texis/files.texi:2620
msgid ""
"The environment variable name is the series of alphanumeric characters "
"(including underscores) that follow the @samp{$}.  If the character "
"following the @samp{$} is a @samp{@{}, then the variable name is everything "
"up to the matching @samp{@}}."
msgstr ""

#. type: defun
#: original_texis/files.texi:2629
msgid ""
"Calling @code{substitute-in-file-name} on output produced by "
"@code{substitute-in-file-name} tends to give incorrect results.  For "
"instance, use of @samp{$$} to quote a single @samp{$} won't work properly, "
"and @samp{$} in an environment variable's value could lead to repeated "
"substitution.  Therefore, programs that call this function and put the "
"output where it will be passed to this function need to double all @samp{$} "
"characters to prevent subsequent incorrect results."
msgstr ""

#. type: defun
#: original_texis/files.texi:2633
msgid ""
"Here we assume that the environment variable @env{HOME}, which holds the "
"user's home directory, has value @samp{/xcssun/users/rms}."
msgstr ""

#. type: group
#: original_texis/files.texi:2638
#, no-wrap
msgid ""
"(substitute-in-file-name \"$HOME/foo\")\n"
"     @result{} \"/xcssun/users/rms/foo\"\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:2644
msgid ""
"After substitution, if a @samp{~} or a @samp{/} appears immediately after "
"another @samp{/}, the function discards everything before it (up through the "
"immediately preceding @samp{/})."
msgstr ""

#. type: group
#: original_texis/files.texi:2649
#, no-wrap
msgid ""
"(substitute-in-file-name \"bar/~/foo\")\n"
"     @result{} \"~/foo\"\n"
msgstr ""

#. type: group
#: original_texis/files.texi:2654
#, no-wrap
msgid ""
"(substitute-in-file-name \"/usr/local/$HOME/foo\")\n"
"     @result{} \"/xcssun/users/rms/foo\"\n"
"     ;; @r{@file{/usr/local/} has been discarded.}\n"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2663
msgid ""
"Sometimes, it is not desired to expand file names.  In such cases, the file "
"name can be quoted to suppress the expansion, and to handle the file name "
"literally.  Quoting happens by prefixing the file name with @samp{/:}."
msgstr ""

#. type: defmac
#: original_texis/files.texi:2664
#, no-wrap
msgid "file-name-quote name"
msgstr ""

#. type: defmac
#: original_texis/files.texi:2670
msgid ""
"This macro adds the quotation prefix @samp{/:} to the file @var{name}.  For "
"a local file @var{name}, it prefixes @var{name} with @samp{/:}.  If "
"@var{name} is a remote file name, the local part of @var{name} (@pxref{Magic "
"File Names}) is quoted.  If @var{name} is already a quoted file name, "
"@var{name} is returned unchanged."
msgstr ""

#. type: group
#: original_texis/files.texi:2675
#, no-wrap
msgid ""
"(substitute-in-file-name (file-name-quote \"bar/~/foo\"))\n"
"     @result{} \"/:bar/~/foo\"\n"
msgstr ""

#. type: group
#: original_texis/files.texi:2680
#, no-wrap
msgid ""
"(substitute-in-file-name (file-name-quote \"/ssh:host:bar/~/foo\"))\n"
"     @result{} \"/ssh:host:/:bar/~/foo\"\n"
msgstr ""

#. type: defmac
#: original_texis/files.texi:2685
msgid ""
"The macro cannot be used to suppress file name handlers from magic file "
"names (@pxref{Magic File Names})."
msgstr ""

#. type: defmac
#: original_texis/files.texi:2687
#, no-wrap
msgid "file-name-unquote name"
msgstr ""

#. type: defmac
#: original_texis/files.texi:2691
msgid ""
"This macro removes the quotation prefix @samp{/:} from the file @var{name}, "
"if any. If @var{name} is a remote file name, the local part of @var{name} is "
"unquoted."
msgstr ""

#. type: defmac
#: original_texis/files.texi:2693
#, no-wrap
msgid "file-name-quoted-p name"
msgstr ""

#. type: defmac
#: original_texis/files.texi:2697
msgid ""
"This macro returns non-@code{nil}, when @var{name} is quoted with the prefix "
"@samp{/:}.  If @var{name} is a remote file name, the local part of "
"@var{name} is checked."
msgstr ""

#. type: subsection
#: original_texis/files.texi:2701
#, no-wrap
msgid "Generating Unique File Names"
msgstr ""

#. type: cindex
#: original_texis/files.texi:2702
#, no-wrap
msgid "unique file names"
msgstr ""

#. type: cindex
#: original_texis/files.texi:2703
#, no-wrap
msgid "temporary files"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2707
msgid ""
"Some programs need to write temporary files.  Here is the usual way to "
"construct a name for such a file:"
msgstr ""

#. type: example
#: original_texis/files.texi:2710
#, no-wrap
msgid "(make-temp-file @var{name-of-application})\n"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2715
msgid ""
"The job of @code{make-temp-file} is to prevent two different users or two "
"different jobs from trying to use the exact same file name."
msgstr ""

#. type: defun
#: original_texis/files.texi:2716
#, no-wrap
msgid "make-temp-file prefix &optional dir-flag suffix text"
msgstr ""

#. type: defun
#: original_texis/files.texi:2725
msgid ""
"This function creates a temporary file and returns its name.  Emacs creates "
"the temporary file's name by adding to @var{prefix} some random characters "
"that are different in each Emacs job.  The result is guaranteed to be a "
"newly created file, containing @var{text} if that's given as a string and "
"empty otherwise. On MS-DOS, this function can truncate @var{prefix} to fit "
"into the 8+3 file-name limits.  If @var{prefix} is a relative file name, it "
"is expanded against @code{temporary-file-directory}."
msgstr ""

#. type: group
#: original_texis/files.texi:2730
#, no-wrap
msgid ""
"(make-temp-file \"foo\")\n"
"     @result{} \"/tmp/foo232J6v\"\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:2736
msgid ""
"When @code{make-temp-file} returns, the file has been created and is empty.  "
"At that point, you should write the intended contents into the file."
msgstr ""

#. type: defun
#: original_texis/files.texi:2740
msgid ""
"If @var{dir-flag} is non-@code{nil}, @code{make-temp-file} creates an empty "
"directory instead of an empty file.  It returns the file name, not the "
"directory name, of that directory.  @xref{Directory Names}."
msgstr ""

#. type: defun
#: original_texis/files.texi:2743
msgid ""
"If @var{suffix} is non-@code{nil}, @code{make-temp-file} adds it at the end "
"of the file name."
msgstr ""

#. type: defun
#: original_texis/files.texi:2745
msgid "If @var{text} is a string, @code{make-temp-file} inserts it in the file."
msgstr ""

#. type: defun
#: original_texis/files.texi:2752
msgid ""
"To prevent conflicts among different libraries running in the same Emacs, "
"each Lisp program that uses @code{make-temp-file} should have its own "
"@var{prefix}.  The number added to the end of @var{prefix} distinguishes "
"between the same application running in different Emacs jobs.  Additional "
"added characters permit a large number of distinct names even in one Emacs "
"job."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2760
msgid ""
"The default directory for temporary files is controlled by the variable "
"@code{temporary-file-directory}.  This variable gives the user a uniform way "
"to specify the directory for all temporary files.  Some programs use "
"@code{small-temporary-file-directory} instead, if that is non-@code{nil}.  "
"To use it, you should expand the prefix against the proper directory before "
"calling @code{make-temp-file}."
msgstr ""

#. type: defun
#: original_texis/files.texi:2761 original_texis/files.texi:2837
#, no-wrap
msgid "temporary-file-directory"
msgstr ""

#. type: cindex
#: original_texis/files.texi:2762
#, no-wrap
msgid "@env{TMPDIR} environment variable"
msgstr ""

#. type: cindex
#: original_texis/files.texi:2763
#, no-wrap
msgid "@env{TMP} environment variable"
msgstr ""

#. type: cindex
#: original_texis/files.texi:2764
#, no-wrap
msgid "@env{TEMP} environment variable"
msgstr ""

#. type: defopt
#: original_texis/files.texi:2770
msgid ""
"This variable specifies the directory name for creating temporary files.  "
"Its value should be a directory name (@pxref{Directory Names}), but it is "
"good for Lisp programs to cope if the value is a directory's file name "
"instead.  Using the value as the second argument to @code{expand-file-name} "
"is a good way to achieve that."
msgstr ""

#. type: defopt
#: original_texis/files.texi:2775
msgid ""
"The default value is determined in a reasonable way for your operating "
"system; it is based on the @env{TMPDIR}, @env{TMP} and @env{TEMP} "
"environment variables, with a fall-back to a system-dependent name if none "
"of these variables is defined."
msgstr ""

#. type: defopt
#: original_texis/files.texi:2781
msgid ""
"Even if you do not use @code{make-temp-file} to create the temporary file, "
"you should still use this variable to decide which directory to put the file "
"in.  However, if you expect the file to be small, you should use "
"@code{small-temporary-file-directory} first if that is non-@code{nil}."
msgstr ""

#. type: defopt
#: original_texis/files.texi:2783
#, no-wrap
msgid "small-temporary-file-directory"
msgstr ""

#. type: defopt
#: original_texis/files.texi:2786
msgid ""
"This variable specifies the directory name for creating certain temporary "
"files, which are likely to be small."
msgstr ""

#. type: defopt
#: original_texis/files.texi:2789
msgid ""
"If you want to write a temporary file which is likely to be small, you "
"should compute the directory like this:"
msgstr ""

#. type: example
#: original_texis/files.texi:2795
#, no-wrap
msgid ""
"(make-temp-file\n"
"  (expand-file-name @var{prefix}\n"
"                    (or small-temporary-file-directory\n"
"                        temporary-file-directory)))\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:2798
#, no-wrap
msgid "make-temp-name base-name"
msgstr ""

#. type: defun
#: original_texis/files.texi:2807
msgid ""
"This function generates a string that might be a unique file name.  The name "
"starts with @var{base-name}, and has several random characters appended to "
"it, which are different in each Emacs job.  It is like @code{make-temp-file} "
"except that (i) it just constructs a name and does not create a file, (ii) "
"@var{base-name} should be an absolute file name that is not magic, and (iii) "
"if the returned file name is magic, it might name an existing file.  "
"@xref{Magic File Names}."
msgstr ""

#. type: defun
#: original_texis/files.texi:2812
msgid ""
"@strong{Warning:} In most cases, you should not use this function; use "
"@code{make-temp-file} instead! This function is susceptible to a race "
"condition, between the @code{make-temp-name} call and the creation of the "
"file, which in some cases may cause a security hole."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2816
msgid ""
"Sometimes, it is necessary to create a temporary file on a remote host or a "
"mounted directory.  The following two functions support this."
msgstr ""

#. type: cindex
#: original_texis/files.texi:2817
#, no-wrap
msgid "temporary file on a remote host"
msgstr ""

#. type: defun
#: original_texis/files.texi:2818
#, no-wrap
msgid "make-nearby-temp-file prefix &optional dir-flag suffix"
msgstr ""

#. type: defun
#: original_texis/files.texi:2827
msgid ""
"This function is similar to @code{make-temp-file}, but it creates a "
"temporary file as close as possible to @code{default-directory}.  If "
"@var{prefix} is a relative file name, and @code{default-directory} is a "
"remote file name or located on a mounted file systems, the temporary file is "
"created in the directory returned by the function "
"@code{temporary-file-directory}.  Otherwise, the function "
"@code{make-temp-file} is used.  @var{prefix}, @var{dir-flag} and "
"@var{suffix} have the same meaning as in @code{make-temp-file}."
msgstr ""

#. type: group
#: original_texis/files.texi:2833
#, no-wrap
msgid ""
"(let ((default-directory \"/ssh:remotehost:\"))\n"
"  (make-nearby-temp-file \"foo\"))\n"
"     @result{} \"/ssh:remotehost:/tmp/foo232J6v\"\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:2847
msgid ""
"The directory for writing temporary files via @code{make-nearby-temp-file}.  "
"In case of a remote @code{default-directory}, this is a directory for "
"temporary files on that remote host.  If such a directory does not exist, or "
"@code{default-directory} ought to be located on a mounted file system (see "
"@code{mounted-file-systems}), the function returns "
"@code{default-directory}.  For a non-remote and non-mounted "
"@code{default-directory}, the value of the variable "
"@code{temporary-file-directory} is returned."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2851
msgid ""
"In order to extract the local part of the file's name of a temporary file, "
"use @code{file-local-name} (@pxref{Magic File Names})."
msgstr ""

#. type: cindex
#: original_texis/files.texi:2854
#, no-wrap
msgid "file name completion subroutines"
msgstr ""

#. type: cindex
#: original_texis/files.texi:2855
#, no-wrap
msgid "completion, file name"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2859
msgid ""
"This section describes low-level subroutines for completing a file name.  "
"For higher level functions, see @ref{Reading File Names}."
msgstr ""

#. type: defun
#: original_texis/files.texi:2860
#, no-wrap
msgid "file-name-all-completions partial-filename directory"
msgstr ""

#. type: defun
#: original_texis/files.texi:2866
msgid ""
"This function returns a list of all possible completions for a file whose "
"name starts with @var{partial-filename} in directory @var{directory}.  The "
"order of the completions is the order of the files in the directory, which "
"is unpredictable and conveys no useful information."
msgstr ""

#. type: defun
#: original_texis/files.texi:2871
msgid ""
"The argument @var{partial-filename} must be a file name containing no "
"directory part and no slash (or backslash on some systems).  The current "
"buffer's default directory is prepended to @var{directory}, if "
"@var{directory} is not absolute."
msgstr ""

#. type: defun
#: original_texis/files.texi:2876
msgid ""
"In the following example, suppose that @file{~rms/lewis} is the current "
"default directory, and has five files whose names begin with @samp{f}: "
"@file{foo}, @file{file~}, @file{file.c}, @file{file.c.~1~}, and "
"@file{file.c.~2~}."
msgstr ""

#. type: group
#: original_texis/files.texi:2882
#, no-wrap
msgid ""
"(file-name-all-completions \"f\" \"\")\n"
"     @result{} (\"foo\" \"file~\" \"file.c.~2~\"\n"
"                \"file.c.~1~\" \"file.c\")\n"
msgstr ""

#. type: group
#: original_texis/files.texi:2887
#, no-wrap
msgid ""
"(file-name-all-completions \"fo\" \"\")\n"
"     @result{} (\"foo\")\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:2891
#, no-wrap
msgid "file-name-completion filename directory &optional predicate"
msgstr ""

#. type: defun
#: original_texis/files.texi:2898
msgid ""
"This function completes the file name @var{filename} in directory "
"@var{directory}.  It returns the longest prefix common to all file names in "
"directory @var{directory} that start with @var{filename}.  If "
"@var{predicate} is non-@code{nil} then it ignores possible completions that "
"don't satisfy @var{predicate}, after calling that function with one "
"argument, the expanded absolute file name."
msgstr ""

#. type: defun
#: original_texis/files.texi:2902
msgid ""
"If only one match exists and @var{filename} matches it exactly, the function "
"returns @code{t}.  The function returns @code{nil} if directory "
"@var{directory} contains no name starting with @var{filename}."
msgstr ""

#. type: defun
#: original_texis/files.texi:2907
msgid ""
"In the following example, suppose that the current default directory has "
"five files whose names begin with @samp{f}: @file{foo}, @file{file~}, "
"@file{file.c}, @file{file.c.~1~}, and @file{file.c.~2~}."
msgstr ""

#. type: group
#: original_texis/files.texi:2912
#, no-wrap
msgid ""
"(file-name-completion \"fi\" \"\")\n"
"     @result{} \"file\"\n"
msgstr ""

#. type: group
#: original_texis/files.texi:2917
#, no-wrap
msgid ""
"(file-name-completion \"file.c.~1\" \"\")\n"
"     @result{} \"file.c.~1~\"\n"
msgstr ""

#. type: group
#: original_texis/files.texi:2922
#, no-wrap
msgid ""
"(file-name-completion \"file.c.~1~\" \"\")\n"
"     @result{} t\n"
msgstr ""

#. type: group
#: original_texis/files.texi:2927
#, no-wrap
msgid ""
"(file-name-completion \"file.c.~3\" \"\")\n"
"     @result{} nil\n"
msgstr ""

#. type: defopt
#: original_texis/files.texi:2931
#, no-wrap
msgid "completion-ignored-extensions"
msgstr ""

#. type: defopt
#: original_texis/files.texi:2936
msgid ""
"@code{file-name-completion} usually ignores file names that end in any "
"string in this list.  It does not ignore them when all the possible "
"completions end in one of these suffixes.  This variable has no effect on "
"@code{file-name-all-completions}."
msgstr ""

#. type: defopt
#: original_texis/files.texi:2938
msgid "A typical value might look like this:"
msgstr ""

#. type: group
#: original_texis/files.texi:2943
#, no-wrap
msgid ""
"completion-ignored-extensions\n"
"     @result{} (\".o\" \".elc\" \"~\" \".dvi\")\n"
msgstr ""

#. type: defopt
#: original_texis/files.texi:2950
msgid ""
"If an element of @code{completion-ignored-extensions} ends in a slash "
"@samp{/}, it signals a directory.  The elements which do @emph{not} end in a "
"slash will never match a directory; thus, the above value will not filter "
"out a directory named @file{foo.elc}."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2965
msgid ""
"Sometimes, an Emacs Lisp program needs to specify a standard file name for a "
"particular use---typically, to hold configuration data specified by the "
"current user.  Usually, such files should be located in the directory "
"specified by @code{user-emacs-directory}, which is typically "
"@file{~/.config/emacs/} or @file{~/.emacs.d/} by default (@pxref{Find "
"Init,,How Emacs Finds Your Init File, emacs, The GNU Emacs Manual}).  For "
"example, abbrev definitions are stored by default in "
"@file{~/.config/emacs/abbrev_defs} or @file{~/.emacs.d/abbrev_defs}.  The "
"easiest way to specify such a file name is to use the function "
"@code{locate-user-emacs-file}."
msgstr ""

#. type: defun
#: original_texis/files.texi:2966
#, no-wrap
msgid "locate-user-emacs-file base-name &optional old-name"
msgstr ""

#. type: defun
#: original_texis/files.texi:2972
msgid ""
"This function returns an absolute file name for an Emacs-specific "
"configuration or data file.  The argument @file{base-name} should be a "
"relative file name.  The return value is the absolute name of a file in the "
"directory specified by @code{user-emacs-directory}; if that directory does "
"not exist, this function creates it."
msgstr ""

#. type: defun
#: original_texis/files.texi:2982
msgid ""
"If the optional argument @var{old-name} is non-@code{nil}, it specifies a "
"file in the user's home directory, @file{~/@var{old-name}}.  If such a file "
"exists, the return value is the absolute name of that file, instead of the "
"file specified by @var{base-name}.  This argument is intended to be used by "
"Emacs packages to provide backward compatibility.  For instance, prior to "
"the introduction of @code{user-emacs-directory}, the abbrev file was located "
"in @file{~/.abbrev_defs}.  Here is the definition of "
"@code{abbrev-file-name}:"
msgstr ""

#. type: example
#: original_texis/files.texi:2989
#, no-wrap
msgid ""
"(defcustom abbrev-file-name\n"
"  (locate-user-emacs-file \"abbrev_defs\" \".abbrev_defs\")\n"
"  \"Default name of file from which to read abbrevs.\"\n"
"  @dots{}\n"
"  :type 'file)\n"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:2995
msgid ""
"A lower-level function for standardizing file names, which "
"@code{locate-user-emacs-file} uses as a subroutine, is "
"@code{convert-standard-filename}."
msgstr ""

#. type: defun
#: original_texis/files.texi:2996
#, no-wrap
msgid "convert-standard-filename filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:2999
msgid ""
"This function returns a file name based on @var{filename}, which fits the "
"conventions of the current operating system."
msgstr ""

#. type: defun
#: original_texis/files.texi:3006
msgid ""
"On GNU and other POSIX-like systems, this simply returns @var{filename}.  On "
"other operating systems, it may enforce system-specific file name "
"conventions; for example, on MS-DOS this function performs a variety of "
"changes to enforce MS-DOS file name limitations, including converting any "
"leading @samp{.} to @samp{_} and truncating to three characters after the "
"@samp{.}."
msgstr ""

#. type: defun
#: original_texis/files.texi:3010
msgid ""
"The recommended way to use this function is to specify a name which fits the "
"conventions of GNU and Unix systems, and pass it to "
"@code{convert-standard-filename}."
msgstr ""

#. type: cindex
#: original_texis/files.texi:3014
#, no-wrap
msgid "directory-oriented functions"
msgstr ""

#. type: cindex
#: original_texis/files.texi:3015
#, no-wrap
msgid "file names in directory"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3019
msgid ""
"A directory is a kind of file that contains other files entered under "
"various names.  Directories are a feature of the file system."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3024
msgid ""
"Emacs can list the names of the files in a directory as a Lisp list, or "
"display the names in a buffer using the @code{ls} shell command.  In the "
"latter case, it can optionally display information about each file, "
"depending on the options passed to the @code{ls} command."
msgstr ""

#. type: defun
#: original_texis/files.texi:3025
#, no-wrap
msgid "directory-files directory &optional full-name match-regexp nosort count"
msgstr ""

#. type: defun
#: original_texis/files.texi:3028
msgid ""
"This function returns a list of the names of the files in the directory "
"@var{directory}.  By default, the list is in alphabetical order."
msgstr ""

#. type: defun
#: original_texis/files.texi:3032
msgid ""
"If @var{full-name} is non-@code{nil}, the function returns the files' "
"absolute file names.  Otherwise, it returns the names relative to the "
"specified directory."
msgstr ""

#. type: defun
#: original_texis/files.texi:3038
msgid ""
"If @var{match-regexp} is non-@code{nil}, this function returns only those "
"file names whose non-directory part contain a match for that regular "
"expression---the other file names are excluded from the list.  On "
"case-insensitive filesystems, the regular expression matching is "
"case-insensitive."
msgstr ""

#. type: defun
#: original_texis/files.texi:3044
msgid ""
"If @var{nosort} is non-@code{nil}, @code{directory-files} does not sort the "
"list, so you get the file names in no particular order.  Use this if you "
"want the utmost possible speed and don't care what order the files are "
"processed in.  If the order of processing is visible to the user, then the "
"user will probably be happier if you do sort the names."
msgstr ""

#. type: defun
#: original_texis/files.texi:3048
msgid ""
"If @var{count} is non-@code{nil}, the function will return names of first "
"@var{count} number of files, or names of all files, whichever occurs first.  "
"@var{count} has to be an integer greater than zero."
msgstr ""

#. type: group
#: original_texis/files.texi:3055
#, no-wrap
msgid ""
"(directory-files \"~lewis\")\n"
"     @result{} (\"#foo#\" \"#foo.el#\" \".\" \"..\"\n"
"         \"dired-mods.el\" \"files.texi\"\n"
"         \"files.texi.~1~\")\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:3060
msgid ""
"An error is signaled if @var{directory} is not the name of a directory that "
"can be read."
msgstr ""

#. type: defun
#: original_texis/files.texi:3062
#, no-wrap
msgid "directory-empty-p directory"
msgstr ""

#. type: defun
#: original_texis/files.texi:3067
msgid ""
"This utility function returns @code{t} if given @var{directory} is an "
"accessible directory and it does not contain any files, i.e., is an empty "
"directory.  It will ignore @samp{.} and @samp{..} on systems that return "
"them as files in a directory."
msgstr ""

#. type: defun
#: original_texis/files.texi:3070
msgid ""
"Symbolic links to directories count as directories.  See "
"@var{file-symlink-p} to distinguish symlinks."
msgstr ""

#. type: cindex
#: original_texis/files.texi:3072
#, no-wrap
msgid "recursive traverse of directory tree"
msgstr ""

#. type: defun
#: original_texis/files.texi:3073
#, no-wrap
msgid ""
"directory-files-recursively directory regexp &optional include-directories "
"predicate follow-symlinks"
msgstr ""

#. type: defun
#: original_texis/files.texi:3087
msgid ""
"Return all files under @var{directory} whose names match @var{regexp}.  This "
"function searches the specified @var{directory} and its sub-directories, "
"recursively, for files whose basenames (i.e., without the leading "
"directories) match the specified @var{regexp}, and returns a list of the "
"absolute file names of the matching files (@pxref{Relative File Names, "
"absolute file names}).  The file names are returned in depth-first order, "
"meaning that files in some sub-directory are returned before the files in "
"its parent directory.  In addition, matching files found in each "
"subdirectory are sorted alphabetically by their basenames.  By default, "
"directories whose names match @var{regexp} are omitted from the list, but if "
"the optional argument @var{include-directories} is non-@code{nil}, they are "
"included."
msgstr ""

#. type: defun
#: original_texis/files.texi:3094
msgid ""
"By default, all subdirectories are descended into.  If @var{predicate} is "
"@code{t}, errors when trying to descend into a subdirectory (for instance, "
"if it's not readable by this user) are ignored.  If it's neither @code{nil} "
"nor @code{t}, it should be a function that takes one parameter (the "
"subdirectory name) and should return non-@code{nil} if the directory is to "
"be descended into."
msgstr ""

#. type: defun
#: original_texis/files.texi:3097
msgid ""
"Symbolic links to subdirectories are not followed by default, but if "
"@var{follow-symlinks} is non-@code{nil}, they are followed."
msgstr ""

#. type: defun
#: original_texis/files.texi:3100
#, no-wrap
msgid "locate-dominating-file file name"
msgstr ""

#. type: defun
#: original_texis/files.texi:3110
msgid ""
"Starting at @var{file}, go up the directory tree hierarchy looking for the "
"first directory where @var{name}, a string, exists, and return that "
"directory.  If @var{file} is a file, its directory will serve as the "
"starting point for the search; otherwise @var{file} should be a directory "
"from which to start.  The function looks in the starting directory, then in "
"its parent, then in its parent's parent, etc., until it either finds a "
"directory with @var{name} or reaches the root directory of the filesystem "
"without finding @var{name} -- in the latter case the function returns "
"@code{nil}."
msgstr ""

#. type: defun
#: original_texis/files.texi:3116
msgid ""
"The argument @code{name} can also be a predicate function.  The predicate is "
"called for every directory examined by the function, starting from "
"@var{file} (even if @var{file} is not a directory).  It is called with one "
"argument (the file or directory) and should return non-@code{nil} if that "
"directory is the one it is looking for."
msgstr ""

#. type: cindex
#: original_texis/files.texi:3118
#, no-wrap
msgid "parent directory of file"
msgstr ""

#. type: cindex
#: original_texis/files.texi:3119
#, no-wrap
msgid "ancestor directory of file"
msgstr ""

#. type: cindex
#: original_texis/files.texi:3120
#, no-wrap
msgid "file, ancestor directory of"
msgstr ""

#. type: defun
#: original_texis/files.texi:3121
#, no-wrap
msgid "file-in-directory-p file dir"
msgstr ""

#. type: defun
#: original_texis/files.texi:3127
msgid ""
"This function returns @code{t} if @var{file} is a file in directory "
"@var{dir}, or in a subdirectory of @var{dir}.  It also returns @code{t} if "
"@var{file} and @var{dir} are the same directory.  It compares the truenames "
"of the two directories.  If @var{dir} does not name an existing directory, "
"the return value is @code{nil}."
msgstr ""

#. type: defun
#: original_texis/files.texi:3129
#, no-wrap
msgid ""
"directory-files-and-attributes directory &optional full-name match-regexp "
"nosort id-format count"
msgstr ""

#. type: defun
#: original_texis/files.texi:3138
msgid ""
"This is similar to @code{directory-files} in deciding which files to report "
"on and how to report their names.  However, instead of returning a list of "
"file names, it returns for each file a list @code{(@var{filename} "
". @var{attributes})}, where @var{attributes} is what @code{file-attributes} "
"returns for that file.  The optional argument @var{id-format} has the same "
"meaning as the corresponding argument to @code{file-attributes} "
"(@pxref{Definition of file-attributes})."
msgstr ""

#. type: defvr
#: original_texis/files.texi:3140
#, no-wrap
msgid "Constant directory-files-no-dot-files-regexp"
msgstr ""

#. type: defvr
#: original_texis/files.texi:3145
msgid ""
"This regular expression matches any file name except @samp{.} and "
"@samp{..}.  More precisely, it matches parts of any nonempty string except "
"those two.  It is useful as the @var{match-regexp} argument to "
"@code{directory-files} and @code{directory-files-and-attributes}:"
msgstr ""

#. type: example
#: original_texis/files.texi:3148
#, no-wrap
msgid "(directory-files \"/foo\" nil directory-files-no-dot-files-regexp)\n"
msgstr ""

#. type: defvr
#: original_texis/files.texi:3151
msgid "returns @code{nil}, if directory @samp{/foo} is empty."
msgstr ""

#. type: defun
#: original_texis/files.texi:3153
#, no-wrap
msgid "file-expand-wildcards pattern &optional full regexp"
msgstr ""

#. type: defun
#: original_texis/files.texi:3156
msgid ""
"This function expands the wildcard pattern @var{pattern}, returning a list "
"of file names that match it."
msgstr ""

#. type: defun
#: original_texis/files.texi:3162
msgid ""
"@var{pattern} is, by default, a ``glob''/wildcard string, e.g., "
"@samp{\"/tmp/*.png\"} or @samp{\"/*/*/foo.png\"}, but can also be a regular "
"expression if the optional @var{regexp} parameter is non-@code{nil}.  In any "
"case, the matches are applied per sub-directory, so a match can't span a "
"parent/sub directory."
msgstr ""

#. type: defun
#: original_texis/files.texi:3165
msgid ""
"If @var{pattern} is written as an absolute file name, the values are "
"absolute also."
msgstr ""

#. type: defun
#: original_texis/files.texi:3170
msgid ""
"If @var{pattern} is written as a relative file name, it is interpreted "
"relative to the current default directory.  The file names returned are "
"normally also relative to the current default directory.  However, if "
"@var{full} is non-@code{nil}, they are absolute."
msgstr ""

#. type: defun
#: original_texis/files.texi:3172
#, no-wrap
msgid "insert-directory file switches &optional wildcard full-directory-p"
msgstr ""

#. type: defun
#: original_texis/files.texi:3178
msgid ""
"This function inserts (in the current buffer) a directory listing for "
"directory @var{file}, formatted with @code{ls} according to @var{switches}.  "
"It leaves point after the inserted text.  @var{switches} may be a string of "
"options, or a list of strings representing individual options."
msgstr ""

#. type: defun
#: original_texis/files.texi:3183
msgid ""
"The argument @var{file} may be either a directory or a file specification "
"including wildcard characters.  If @var{wildcard} is non-@code{nil}, that "
"means treat @var{file} as a file specification with wildcards."
msgstr ""

#. type: defun
#: original_texis/files.texi:3190
msgid ""
"If @var{full-directory-p} is non-@code{nil}, that means the directory "
"listing is expected to show the full contents of a directory.  You should "
"specify @code{t} when @var{file} is a directory and switches do not contain "
"@samp{-d}.  (The @samp{-d} option to @code{ls} says to describe a directory "
"itself as a file, rather than showing its contents.)"
msgstr ""

#. type: defun
#: original_texis/files.texi:3195
msgid ""
"On most systems, this function works by running a directory listing program "
"whose name is in the variable @code{insert-directory-program}.  If "
"@var{wildcard} is non-@code{nil}, it also runs the shell specified by "
"@code{shell-file-name}, to expand the wildcards."
msgstr ""

#. type: defun
#: original_texis/files.texi:3199
msgid ""
"MS-DOS and MS-Windows systems usually lack the standard Unix program "
"@code{ls}, so this function emulates the standard Unix program @code{ls} "
"with Lisp code."
msgstr ""

#. type: defun
#: original_texis/files.texi:3205
msgid ""
"As a technical detail, when @var{switches} contains the long @samp{--dired} "
"option, @code{insert-directory} treats it specially, for the sake of dired.  "
"However, the normally equivalent short @samp{-D} option is just passed on to "
"@code{insert-directory-program}, as any other option."
msgstr ""

#. type: defvar
#: original_texis/files.texi:3207
#, no-wrap
msgid "insert-directory-program"
msgstr ""

#. type: defvar
#: original_texis/files.texi:3211
msgid ""
"This variable's value is the program to run to generate a directory listing "
"for the function @code{insert-directory}.  It is ignored on systems which "
"generate the listing with Lisp code."
msgstr ""

#. type: section
#: original_texis/files.texi:3214
#, no-wrap
msgid "Creating, Copying and Deleting Directories"
msgstr ""

#. type: cindex
#: original_texis/files.texi:3215
#, no-wrap
msgid "creating, copying and deleting directories"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3221
msgid ""
"Most Emacs Lisp file-manipulation functions get errors when used on files "
"that are directories.  For example, you cannot delete a directory with "
"@code{delete-file}.  These special functions exist to create and delete "
"directories."
msgstr ""

#. type: findex
#: original_texis/files.texi:3222
#, no-wrap
msgid "mkdir"
msgstr ""

#. type: deffn
#: original_texis/files.texi:3223
#, no-wrap
msgid "Command make-directory dirname &optional parents"
msgstr ""

#. type: deffn
#: original_texis/files.texi:3232
msgid ""
"This command creates a directory named @var{dirname}.  If @var{parents} is "
"non-@code{nil}, as is always the case in an interactive call, that means to "
"create the parent directories first, if they don't already exist.  As a "
"function, @code{make-directory} returns non-@code{nil} if @var{dirname} "
"already exists as a directory and @var{parents} is non-@code{nil}, and "
"returns @code{nil} if it successfully created @var{dirname}.  @code{mkdir} "
"is an alias for this."
msgstr ""

#. type: deffn
#: original_texis/files.texi:3234
#, no-wrap
msgid "Command make-empty-file filename &optional parents"
msgstr ""

#. type: deffn
#: original_texis/files.texi:3239
msgid ""
"This command creates an empty file named @var{filename}.  As "
"@code{make-directory}, this command creates parent directories if "
"@var{parents} is non-@code{nil}.  If @var{filename} already exists, this "
"command signals an error."
msgstr ""

#. type: deffn
#: original_texis/files.texi:3241
#, no-wrap
msgid ""
"Command copy-directory dirname newname &optional keep-time parents "
"copy-contents"
msgstr ""

#. type: deffn
#: original_texis/files.texi:3246
msgid ""
"This command copies the directory named @var{dirname} to @var{newname}.  If "
"@var{newname} is a directory name, @var{dirname} will be copied to a "
"subdirectory there.  @xref{Directory Names}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:3249
msgid ""
"It always sets the file modes of the copied files to match the corresponding "
"original file."
msgstr ""

#. type: deffn
#: original_texis/files.texi:3253
msgid ""
"The third argument @var{keep-time} non-@code{nil} means to preserve the "
"modification time of the copied files.  A prefix arg makes @var{keep-time} "
"non-@code{nil}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:3257
msgid ""
"The fourth argument @var{parents} says whether to create parent directories "
"if they don't exist.  Interactively, this happens by default."
msgstr ""

#. type: deffn
#: original_texis/files.texi:3262
msgid ""
"The fifth argument @var{copy-contents}, if non-@code{nil}, means to copy the "
"contents of @var{dirname} directly into @var{newname} if the latter is a "
"directory name, instead of copying @var{dirname} into it as a subdirectory."
msgstr ""

#. type: deffn
#: original_texis/files.texi:3266
#, no-wrap
msgid "Command delete-directory dirname &optional recursive trash"
msgstr ""

#. type: deffn
#: original_texis/files.texi:3275
msgid ""
"This command deletes the directory named @var{dirname}.  The function "
"@code{delete-file} does not work for files that are directories; you must "
"use @code{delete-directory} for them.  If @var{recursive} is @code{nil}, and "
"the directory contains any files, @code{delete-directory} signals an error.  "
"If recursive is non-@code{nil}, there is no error merely because the "
"directory or its files are deleted by some other process before "
"@code{delete-directory} gets to them."
msgstr ""

#. type: deffn
#: original_texis/files.texi:3278
msgid ""
"@code{delete-directory} only follows symbolic links at the level of parent "
"directories."
msgstr ""

#. type: section
#: original_texis/files.texi:3288
#, no-wrap
msgid "Making Certain File Names ``Magic''"
msgstr ""

#. type: cindex
#: original_texis/files.texi:3289
#, no-wrap
msgid "magic file names"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3295
msgid ""
"You can implement special handling for certain file names.  This is called "
"making those names @dfn{magic}.  The principal use for this feature is in "
"implementing access to remote files (@pxref{Remote Files,, Remote Files, "
"emacs, The GNU Emacs Manual})."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3300
msgid ""
"To define a kind of magic file name, you must supply a regular expression to "
"define the class of names (all those that match the regular expression), "
"plus a handler that implements all the primitive Emacs file operations for "
"file names that match."
msgstr ""

#. type: cindex
#: original_texis/files.texi:3301
#, no-wrap
msgid "file name handler"
msgstr ""

#. type: vindex
#: original_texis/files.texi:3302
#, no-wrap
msgid "file-name-handler-alist"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3306
msgid ""
"The variable @code{file-name-handler-alist} holds a list of handlers, "
"together with regular expressions that determine when to apply each "
"handler.  Each element has this form:"
msgstr ""

#. type: example
#: original_texis/files.texi:3309
#, no-wrap
msgid "(@var{regexp} . @var{handler})\n"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3316
msgid ""
"All the Emacs primitives for file access and file name transformation check "
"the given file name against @code{file-name-handler-alist}.  If the file "
"name matches @var{regexp}, the primitives handle that file by calling "
"@var{handler}."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3321
msgid ""
"The first argument given to @var{handler} is the name of the primitive, as a "
"symbol; the remaining arguments are the arguments that were passed to that "
"primitive.  (The first of these arguments is most often the file name "
"itself.)  For example, if you do this:"
msgstr ""

#. type: example
#: original_texis/files.texi:3324
#, no-wrap
msgid "(file-exists-p @var{filename})\n"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3329
msgid ""
"and @var{filename} has handler @var{handler}, then @var{handler} is called "
"like this:"
msgstr ""

#. type: example
#: original_texis/files.texi:3332
#, no-wrap
msgid "(funcall @var{handler} 'file-exists-p @var{filename})\n"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3337
msgid ""
"When a function takes two or more arguments that must be file names, it "
"checks each of those names for a handler.  For example, if you do this:"
msgstr ""

#. type: example
#: original_texis/files.texi:3340
#, no-wrap
msgid "(expand-file-name @var{filename} @var{dirname})\n"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3346
msgid ""
"then it checks for a handler for @var{filename} and then for a handler for "
"@var{dirname}.  In either case, the @var{handler} is called like this:"
msgstr ""

#. type: example
#: original_texis/files.texi:3349
#, no-wrap
msgid "(funcall @var{handler} 'expand-file-name @var{filename} @var{dirname})\n"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3354
msgid ""
"The @var{handler} then needs to figure out whether to handle @var{filename} "
"or @var{dirname}."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3359
msgid ""
"If the specified file name matches more than one handler, the one whose "
"match starts last in the file name gets precedence.  This rule is chosen so "
"that handlers for jobs such as uncompression are handled first, before "
"handlers for jobs such as remote file access."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3361
msgid "Here are the operations that a magic file name handler gets to handle:"
msgstr ""

#. type: ifnottex
#: original_texis/files.texi:3420
msgid ""
"@code{abbreviate-file-name}, @code{access-file}, @code{add-name-to-file}, "
"@code{byte-compiler-base-file-name},@* @code{copy-directory}, "
"@code{copy-file}, @code{delete-directory}, @code{delete-file}, "
"@code{diff-latest-backup-file}, @code{directory-file-name}, "
"@code{directory-files}, @code{directory-files-and-attributes}, "
"@code{dired-compress-file}, @code{dired-uncache}, @code{exec-path}, "
"@code{expand-file-name},@* @code{file-accessible-directory-p}, "
"@code{file-acl}, @code{file-attributes}, @code{file-directory-p}, "
"@code{file-equal-p}, @code{file-executable-p}, @code{file-exists-p}, "
"@code{file-in-directory-p}, @code{file-local-copy}, @code{file-locked-p}, "
"@code{file-modes}, @code{file-name-all-completions}, "
"@code{file-name-as-directory}, @code{file-name-case-insensitive-p}, "
"@code{file-name-completion}, @code{file-name-directory}, "
"@code{file-name-nondirectory}, @code{file-name-sans-versions}, "
"@code{file-newer-than-file-p}, @code{file-notify-add-watch}, "
"@code{file-notify-rm-watch}, @code{file-notify-valid-p}, "
"@code{file-ownership-preserved-p}, @code{file-readable-p}, "
"@code{file-regular-p}, @code{file-remote-p}, @code{file-selinux-context}, "
"@code{file-symlink-p}, @code{file-system-info}, @code{file-truename}, "
"@code{file-writable-p}, @code{find-backup-file-name},@* "
"@code{get-file-buffer}, @code{insert-directory}, "
"@code{insert-file-contents},@* @code{list-system-processes}, @code{load}, "
"@code{lock-file}, @code{make-auto-save-file-name}, @code{make-directory}, "
"@code{make-lock-file-name}, @code{make-nearby-temp-file}, "
"@code{make-process}, @code{make-symbolic-link},@* @code{memory-info}, "
"@code{process-attributes}, @code{process-file}, @code{rename-file}, "
"@code{set-file-acl}, @code{set-file-modes}, @code{set-file-selinux-context}, "
"@code{set-file-times}, @code{set-visited-file-modtime}, "
"@code{shell-command}, @code{start-file-process}, "
"@code{substitute-in-file-name},@* @code{temporary-file-directory}, "
"@code{unhandled-file-name-directory}, @code{unlock-file}, "
"@code{vc-registered}, @code{verify-visited-file-modtime},@* "
"@code{write-region}."
msgstr ""

#. type: flushleft
#: original_texis/files.texi:3481
#, no-wrap
msgid ""
"@code{abbreviate-file-name}, @code{access-file},\n"
"@code{add-name-to-file},\n"
"@code{byte-com@discretionary{}{}{}piler-base-file-name},\n"
"@code{copy-directory}, @code{copy-file},\n"
"@code{delete-directory}, @code{delete-file},\n"
"@code{diff-latest-backup-file},\n"
"@code{directory-file-name},\n"
"@code{directory-files},\n"
"@code{directory-files-and-at@discretionary{}{}{}tributes},\n"
"@code{dired-compress-file}, @code{dired-uncache},\n"
"@code{exec-path}, @code{expand-file-name},\n"
"@code{file-accessible-direc@discretionary{}{}{}tory-p},\n"
"@code{file-acl},\n"
"@code{file-attributes},\n"
"@code{file-direc@discretionary{}{}{}tory-p},\n"
"@code{file-equal-p},\n"
"@code{file-executable-p}, @code{file-exists-p},\n"
"@code{file-in-directory-p},\n"
"@code{file-local-copy}, @code{file-locked-p},\n"
"@code{file-modes}, @code{file-name-all-completions},\n"
"@code{file-name-as-directory},\n"
"@code{file-name-case-insensitive-p},\n"
"@code{file-name-completion},\n"
"@code{file-name-directory},\n"
"@code{file-name-nondirec@discretionary{}{}{}tory},\n"
"@code{file-name-sans-versions}, @code{file-newer-than-file-p},\n"
"@code{file-notify-add-watch}, @code{file-notify-rm-watch},\n"
"@code{file-notify-valid-p},\n"
"@code{file-ownership-pre@discretionary{}{}{}served-p},\n"
"@code{file-readable-p}, @code{file-regular-p},\n"
"@code{file-remote-p}, @code{file-selinux-context},\n"
"@code{file-symlink-p}, @code{file-system-info},\n"
"@code{file-truename}, @code{file-writable-p},\n"
"@code{find-backup-file-name},\n"
"@code{get-file-buffer},\n"
"@code{insert-directory},\n"
"@code{insert-file-contents},\n"
"@code{list-system-processes},\n"
"@code{load}, @code{lock-file},\n"
"@code{make-auto-save-file-name},\n"
"@code{make-direc@discretionary{}{}{}tory},\n"
"@code{make-lock-file-name},\n"
"@code{make-nearby-temp-file},\n"
"@code{make-process},\n"
"@code{make-symbolic-link},\n"
"@code{memory-info}, @code{process-attributes}, @code{process-file},\n"
"@code{rename-file}, @code{set-file-acl}, @code{set-file-modes},\n"
"@code{set-file-selinux-context}, @code{set-file-times},\n"
"@code{set-visited-file-modtime}, @code{shell-command},\n"
"@code{start-file-process},\n"
"@code{substitute-in-file-name},\n"
"@code{temporary-file-directory},\n"
"@code{unhandled-file-name-directory},\n"
"@code{unlock-file},\n"
"@code{vc-regis@discretionary{}{}{}tered},\n"
"@code{verify-visited-file-modtime},\n"
"@code{write-region}.\n"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3488
msgid ""
"Handlers for @code{insert-file-contents} typically need to clear the "
"buffer's modified flag, with @code{(set-buffer-modified-p nil)}, if the "
"@var{visit} argument is non-@code{nil}.  This also has the effect of "
"unlocking the buffer if it is locked."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3495
msgid ""
"The handler function must handle all of the above operations, and possibly "
"others to be added in the future.  It need not implement all these "
"operations itself---when it has nothing special to do for a certain "
"operation, it can reinvoke the primitive, to handle the operation in the "
"usual way.  It should always reinvoke the primitive for an operation it does "
"not recognize.  Here's one way to do this:"
msgstr ""

#. type: smallexample
#: original_texis/files.texi:3510
#, no-wrap
msgid ""
"(defun my-file-handler (operation &rest args)\n"
"  ;; @r{First check for the specific operations}\n"
"  ;; @r{that we have special handling for.}\n"
"  (cond ((eq operation 'insert-file-contents) @dots{})\n"
"        ((eq operation 'write-region) @dots{})\n"
"        @dots{}\n"
"        ;; @r{Handle any operation we don't know about.}\n"
"        (t (let ((inhibit-file-name-handlers\n"
"                  (cons 'my-file-handler\n"
"                        (and (eq inhibit-file-name-operation operation)\n"
"                             inhibit-file-name-handlers)))\n"
"                 (inhibit-file-name-operation operation))\n"
"             (apply operation args)))))\n"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3521
msgid ""
"When a handler function decides to call the ordinary Emacs primitive for the "
"operation at hand, it needs to prevent the primitive from calling the same "
"handler once again, thus leading to an infinite recursion.  The example "
"above shows how to do this, with the variables "
"@code{inhibit-file-name-handlers} and @code{inhibit-file-name-operation}.  "
"Be careful to use them exactly as shown above; the details are crucial for "
"proper behavior in the case of multiple handlers, and for operations that "
"have two file names that may each have handlers."
msgstr ""

#. type: kindex
#: original_texis/files.texi:3522
#, no-wrap
msgid "safe-magic @r{(property)}"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3532
msgid ""
"Handlers that don't really do anything special for actual access to the "
"file---such as the ones that implement completion of host names for remote "
"file names---should have a non-@code{nil} @code{safe-magic} property.  For "
"instance, Emacs normally protects directory names it finds in @code{PATH} "
"from becoming magic, if they look like magic file names, by prefixing them "
"with @samp{/:}.  But if the handler that would be used for them has a "
"non-@code{nil} @code{safe-magic} property, the @samp{/:} is not added."
msgstr ""

#. type: kindex
#: original_texis/files.texi:3533
#, no-wrap
msgid "operations @r{(property)}"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3541
msgid ""
"A file name handler can have an @code{operations} property to declare which "
"operations it handles in a nontrivial way.  If this property has a "
"non-@code{nil} value, it should be a list of operations; then only those "
"operations will call the handler.  This avoids inefficiency, but its main "
"purpose is for autoloaded handler functions, so that they won't be loaded "
"except when they have real work to do."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3549
msgid ""
"Simply deferring all operations to the usual primitives does not work.  For "
"instance, if the file name handler applies to @code{file-exists-p}, then it "
"must handle @code{load} itself, because the usual @code{load} code won't "
"work properly in that case.  However, if the handler uses the "
"@code{operations} property to say it doesn't handle @code{file-exists-p}, "
"then it need not handle @code{load} nontrivially."
msgstr ""

#. type: defvar
#: original_texis/files.texi:3550
#, no-wrap
msgid "inhibit-file-name-handlers"
msgstr ""

#. type: defvar
#: original_texis/files.texi:3553
msgid ""
"This variable holds a list of handlers whose use is presently inhibited for "
"a certain operation."
msgstr ""

#. type: defvar
#: original_texis/files.texi:3555
#, no-wrap
msgid "inhibit-file-name-operation"
msgstr ""

#. type: defvar
#: original_texis/files.texi:3557
msgid "The operation for which certain handlers are presently inhibited."
msgstr ""

#. type: defun
#: original_texis/files.texi:3559
#, no-wrap
msgid "find-file-name-handler file operation"
msgstr ""

#. type: defun
#: original_texis/files.texi:3567
msgid ""
"This function returns the handler function for file name @var{file}, or "
"@code{nil} if there is none.  The argument @var{operation} should be the "
"operation to be performed on the file---the value you will pass to the "
"handler as its first argument when you call it.  If @var{operation} equals "
"@code{inhibit-file-name-operation}, or if it is not found in the "
"@code{operations} property of the handler, this function returns @code{nil}."
msgstr ""

#. type: defun
#: original_texis/files.texi:3569
#, no-wrap
msgid "file-local-copy filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:3577
msgid ""
"This function copies file @var{filename} to an ordinary non-magic file on "
"the local machine, if it isn't on the local machine already.  Magic file "
"names should handle the @code{file-local-copy} operation if they refer to "
"files on other machines.  A magic file name that is used for other purposes "
"than remote file access should not handle @code{file-local-copy}; then this "
"function will treat the file as local."
msgstr ""

#. type: defun
#: original_texis/files.texi:3581
msgid ""
"If @var{filename} is local, whether magic or not, this function does nothing "
"and returns @code{nil}.  Otherwise it returns the file name of the local "
"copy file."
msgstr ""

#. type: defun
#: original_texis/files.texi:3583
#, no-wrap
msgid "file-remote-p filename &optional identification connected"
msgstr ""

#. type: defun
#: original_texis/files.texi:3588
msgid ""
"This function tests whether @var{filename} is a remote file.  If "
"@var{filename} is local (not remote), the return value is @code{nil}.  If "
"@var{filename} is indeed remote, the return value is a string that "
"identifies the remote system."
msgstr ""

#. type: defun
#: original_texis/files.texi:3593
msgid ""
"This identifier string can include a host name and a user name, as well as "
"characters designating the method used to access the remote system.  For "
"example, the remote identifier string for the file name "
"@code{/sudo::/some/file} is @code{/sudo:root@@localhost:}."
msgstr ""

#. type: defun
#: original_texis/files.texi:3600
msgid ""
"If @code{file-remote-p} returns the same identifier for two different file "
"names, that means they are stored on the same file system and can be "
"accessed locally with respect to each other.  This means, for example, that "
"it is possible to start a remote process accessing both files at the same "
"time.  Implementers of file name handlers need to ensure this principle is "
"valid."
msgstr ""

#. type: defun
#: original_texis/files.texi:3607
msgid ""
"@var{identification} specifies which part of the identifier shall be "
"returned as string.  @var{identification} can be the symbol @code{method}, "
"@code{user} or @code{host}; any other value is handled like @code{nil} and "
"means to return the complete identifier string.  In the example above, the "
"remote @code{user} identifier string would be @code{root}."
msgstr ""

#. type: defun
#: original_texis/files.texi:3612
msgid ""
"If @var{connected} is non-@code{nil}, this function returns @code{nil} even "
"if @var{filename} is remote, if Emacs has no network connection to its "
"host.  This is useful when you want to avoid the delay of making connections "
"when they don't exist."
msgstr ""

#. type: defun
#: original_texis/files.texi:3614
#, no-wrap
msgid "unhandled-file-name-directory filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:3621
msgid ""
"This function returns the name of a directory that is not magic.  For a "
"non-magic @var{filename} it returns the corresponding directory name "
"(@pxref{Directory Names}).  For a magic @var{filename}, it invokes the file "
"name handler, which therefore decides what value to return.  If "
"@var{filename} is not accessible from a local process, then the file name "
"handler should indicate that by returning @code{nil}."
msgstr ""

#. type: defun
#: original_texis/files.texi:3625
msgid ""
"This is useful for running a subprocess; every subprocess must have a "
"non-magic directory to serve as its current directory, and this function is "
"a good way to come up with one."
msgstr ""

#. type: cindex
#: original_texis/files.texi:3627
#, no-wrap
msgid "local part of remote file name"
msgstr ""

#. type: defun
#: original_texis/files.texi:3628
#, no-wrap
msgid "file-local-name filename"
msgstr ""

#. type: defun
#: original_texis/files.texi:3634
msgid ""
"This function returns the @dfn{local part} of @var{filename}.  This is the "
"part of the file's name that identifies it on the remote host, and is "
"typically obtained by removing from the remote file name the parts that "
"specify the remote host and the method of accessing it.  For example:"
msgstr ""

#. type: smallexample
#: original_texis/files.texi:3638
#, no-wrap
msgid ""
"(file-local-name \"/ssh:@var{user}@@@var{host}:/foo/bar\")\n"
"     @result{} \"/foo/bar\"\n"
msgstr ""

#. type: defun
#: original_texis/files.texi:3645
msgid ""
"For a remote @var{filename}, this function returns a file name which could "
"be used directly as an argument of a remote process (@pxref{Asynchronous "
"Processes}, and @pxref{Synchronous Processes}), and as the program to run on "
"the remote host.  If @var{filename} is local, this function returns it "
"unchanged."
msgstr ""

#. type: defopt
#: original_texis/files.texi:3647
#, no-wrap
msgid "remote-file-name-inhibit-cache"
msgstr ""

#. type: defopt
#: original_texis/files.texi:3651
msgid ""
"The attributes of remote files can be cached for better performance.  If "
"they are changed outside of Emacs's control, the cached values become "
"invalid, and must be reread."
msgstr ""

#. type: defopt
#: original_texis/files.texi:3657
msgid ""
"When this variable is set to @code{nil}, cached values are never expired.  "
"Use this setting with caution, only if you are sure nothing other than Emacs "
"ever changes the remote files.  If it is set to @code{t}, cached values are "
"never used.  This is the safest value, but could result in performance "
"degradation."
msgstr ""

#. type: defopt
#: original_texis/files.texi:3663
msgid ""
"A compromise is to set it to a positive number.  This means that cached "
"values are used for that amount of seconds since they were cached.  If a "
"remote file is checked regularly, it might be a good idea to let-bind this "
"variable to a value less than the time period between consecutive checks.  "
"For example:"
msgstr ""

#. type: example
#: original_texis/files.texi:3672
#, no-wrap
msgid ""
"(defun display-time-file-nonempty-p (file)\n"
"  (let ((remote-file-name-inhibit-cache\n"
"         (- display-time-interval 5)))\n"
"    (and (file-exists-p file)\n"
"         (< 0 (file-attribute-size\n"
"               (file-attributes\n"
"                (file-chase-links file)))))))\n"
msgstr ""

#. type: section
#: original_texis/files.texi:3676
#, no-wrap
msgid "File Format Conversion"
msgstr ""

#. type: cindex
#: original_texis/files.texi:3678
#, no-wrap
msgid "file format conversion"
msgstr ""

#. type: cindex
#: original_texis/files.texi:3679
#, no-wrap
msgid "encoding file formats"
msgstr ""

#. type: cindex
#: original_texis/files.texi:3680
#, no-wrap
msgid "decoding file formats"
msgstr ""

#. type: cindex
#: original_texis/files.texi:3681
#, no-wrap
msgid "text properties in files"
msgstr ""

#. type: cindex
#: original_texis/files.texi:3682
#, no-wrap
msgid "saving text properties"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3689
msgid ""
"Emacs performs several steps to convert the data in a buffer (text, text "
"properties, and possibly other information) to and from a representation "
"suitable for storing into a file.  This section describes the fundamental "
"functions that perform this @dfn{format conversion}, namely "
"@code{insert-file-contents} for reading a file into a buffer, and "
"@code{write-region} for writing a buffer into a file."
msgstr ""

#. type: menuentry
#: original_texis/files.texi:3694
msgid "Overview: Format Conversion Overview"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:3694
msgid "@code{insert-file-contents} and @code{write-region}."
msgstr ""

#. type: menuentry
#: original_texis/files.texi:3694
msgid "Round-Trip: Format Conversion Round-Trip"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:3694
msgid "Using @code{format-alist}."
msgstr ""

#. type: menuentry
#: original_texis/files.texi:3694
msgid "Piecemeal: Format Conversion Piecemeal"
msgstr ""

#. type: menuentry
#: original_texis/files.texi:3694
msgid "Specifying non-paired conversion."
msgstr ""

#. type: node
#: original_texis/files.texi:3696
#, no-wrap
msgid "Format Conversion Overview"
msgstr ""

#. type: subsection
#: original_texis/files.texi:3697
#, no-wrap
msgid "Overview"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3700
msgid "The function @code{insert-file-contents}:"
msgstr ""

#. type: item
#: original_texis/files.texi:3702
#, no-wrap
msgid "initially, inserts bytes from the file into the buffer;"
msgstr ""

#. type: item
#: original_texis/files.texi:3703
#, no-wrap
msgid "decodes bytes to characters as appropriate;"
msgstr ""

#. type: item
#: original_texis/files.texi:3704
#, no-wrap
msgid "processes formats as defined by entries in @code{format-alist}; and"
msgstr ""

#. type: item
#: original_texis/files.texi:3705
#, no-wrap
msgid "calls functions in @code{after-insert-file-functions}."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3710
msgid "The function @code{write-region}:"
msgstr ""

#. type: item
#: original_texis/files.texi:3712
#, no-wrap
msgid "initially, calls functions in @code{write-region-annotate-functions};"
msgstr ""

#. type: item
#: original_texis/files.texi:3713
#, no-wrap
msgid "processes formats as defined by entries in @code{format-alist};"
msgstr ""

#. type: item
#: original_texis/files.texi:3714
#, no-wrap
msgid "encodes characters to bytes as appropriate; and"
msgstr ""

#. type: item
#: original_texis/files.texi:3715
#, no-wrap
msgid "modifies the file with the bytes."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3723
msgid ""
"This shows the symmetry of the lowest-level operations; reading and writing "
"handle things in opposite order.  The rest of this section describes the two "
"facilities surrounding the three variables named above, as well as some "
"related functions.  @ref{Coding Systems}, for details on character encoding "
"and decoding."
msgstr ""

#. type: node
#: original_texis/files.texi:3724
#, no-wrap
msgid "Format Conversion Round-Trip"
msgstr ""

#. type: subsection
#: original_texis/files.texi:3725
#, no-wrap
msgid "Round-Trip Specification"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3733
msgid ""
"The most general of the two facilities is controlled by the variable "
"@code{format-alist}, a list of @dfn{file format} specifications, which "
"describe textual representations used in files for the data in an Emacs "
"buffer.  The descriptions for reading and writing are paired, which is why "
"we call this ``round-trip'' specification (@pxref{Format Conversion "
"Piecemeal}, for non-paired specification)."
msgstr ""

#. type: defvar
#: original_texis/files.texi:3734
#, no-wrap
msgid "format-alist"
msgstr ""

#. type: defvar
#: original_texis/files.texi:3737
msgid ""
"This list contains one format definition for each defined file format.  Each "
"format definition is a list of this form:"
msgstr ""

#. type: example
#: original_texis/files.texi:3740
#, no-wrap
msgid ""
"(@var{name} @var{doc-string} @var{regexp} @var{from-fn} @var{to-fn} "
"@var{modify} @var{mode-fn} @var{preserve})\n"
msgstr ""

#. type: cindex
#: original_texis/files.texi:3743
#, no-wrap
msgid "format definition"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3746
msgid "Here is what the elements in a format definition mean:"
msgstr ""

#. type: item
#: original_texis/files.texi:3748
#, no-wrap
msgid "name"
msgstr ""

#. type: table
#: original_texis/files.texi:3750
msgid "The name of this format."
msgstr ""

#. type: item
#: original_texis/files.texi:3751
#, no-wrap
msgid "doc-string"
msgstr ""

#. type: table
#: original_texis/files.texi:3753
msgid "A documentation string for the format."
msgstr ""

#. type: item
#: original_texis/files.texi:3754
#, no-wrap
msgid "regexp"
msgstr ""

#. type: table
#: original_texis/files.texi:3757
msgid ""
"A regular expression which is used to recognize files represented in this "
"format.  If @code{nil}, the format is never applied automatically."
msgstr ""

#. type: item
#: original_texis/files.texi:3758
#, no-wrap
msgid "from-fn"
msgstr ""

#. type: table
#: original_texis/files.texi:3761
msgid ""
"A shell command or function to decode data in this format (to convert file "
"data into the usual Emacs data representation)."
msgstr ""

#. type: table
#: original_texis/files.texi:3764
msgid ""
"A shell command is represented as a string; Emacs runs the command as a "
"filter to perform the conversion."
msgstr ""

#. type: table
#: original_texis/files.texi:3770
msgid ""
"If @var{from-fn} is a function, it is called with two arguments, @var{begin} "
"and @var{end}, which specify the part of the buffer it should convert.  It "
"should convert the text by editing it in place.  Since this can change the "
"length of the text, @var{from-fn} should return the modified end position."
msgstr ""

#. type: table
#: original_texis/files.texi:3776
msgid ""
"One responsibility of @var{from-fn} is to make sure that the beginning of "
"the file no longer matches @var{regexp}.  Otherwise it is likely to get "
"called again.  Also, @var{from-fn} must not involve buffers or files other "
"than the one being decoded, otherwise the internal buffer used for "
"formatting might be overwritten."
msgstr ""

#. type: item
#: original_texis/files.texi:3777
#, no-wrap
msgid "to-fn"
msgstr ""

#. type: table
#: original_texis/files.texi:3780
msgid ""
"A shell command or function to encode data in this format---that is, to "
"convert the usual Emacs data representation into this format."
msgstr ""

#. type: table
#: original_texis/files.texi:3783
msgid ""
"If @var{to-fn} is a string, it is a shell command; Emacs runs the command as "
"a filter to perform the conversion."
msgstr ""

#. type: table
#: original_texis/files.texi:3788
msgid ""
"If @var{to-fn} is a function, it is called with three arguments: @var{begin} "
"and @var{end}, which specify the part of the buffer it should convert, and "
"@var{buffer}, which specifies which buffer.  There are two ways it can do "
"the conversion:"
msgstr ""

#. type: itemize
#: original_texis/files.texi:3793
msgid ""
"By editing the buffer in place.  In this case, @var{to-fn} should return the "
"end-position of the range of text, as modified."
msgstr ""

#. type: itemize
#: original_texis/files.texi:3800
msgid ""
"By returning a list of annotations.  This is a list of elements of the form "
"@code{(@var{position} . @var{string})}, where @var{position} is an integer "
"specifying the relative position in the text to be written, and @var{string} "
"is the annotation to add there.  The list must be sorted in order of "
"position when @var{to-fn} returns it."
msgstr ""

#. type: itemize
#: original_texis/files.texi:3804
msgid ""
"When @code{write-region} actually writes the text from the buffer to the "
"file, it intermixes the specified annotations at the corresponding "
"positions.  All this takes place without modifying the buffer."
msgstr ""

#. type: table
#: original_texis/files.texi:3809
msgid ""
"@var{to-fn} must not involve buffers or files other than the one being "
"encoded, otherwise the internal buffer used for formatting might be "
"overwritten."
msgstr ""

#. type: item
#: original_texis/files.texi:3810
#, no-wrap
msgid "modify"
msgstr ""

#. type: table
#: original_texis/files.texi:3813
msgid ""
"A flag, @code{t} if the encoding function modifies the buffer, and "
"@code{nil} if it works by returning a list of annotations."
msgstr ""

#. type: item
#: original_texis/files.texi:3814
#, no-wrap
msgid "mode-fn"
msgstr ""

#. type: table
#: original_texis/files.texi:3818
msgid ""
"A minor-mode function to call after visiting a file converted from this "
"format.  The function is called with one argument, the integer 1; that tells "
"a minor-mode function to enable the mode."
msgstr ""

#. type: item
#: original_texis/files.texi:3819
#, no-wrap
msgid "preserve"
msgstr ""

#. type: table
#: original_texis/files.texi:3822
msgid ""
"A flag, @code{t} if @code{format-write-file} should not remove this format "
"from @code{buffer-file-format}."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3830
msgid ""
"The function @code{insert-file-contents} automatically recognizes file "
"formats when it reads the specified file.  It checks the text of the "
"beginning of the file against the regular expressions of the format "
"definitions, and if it finds a match, it calls the decoding function for "
"that format.  Then it checks all the known formats over again.  It keeps "
"checking them until none of them is applicable."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3836
msgid ""
"Visiting a file, with @code{find-file-noselect} or the commands that use it, "
"performs conversion likewise (because it calls @code{insert-file-contents}); "
"it also calls the mode function for each format that it decodes.  It stores "
"a list of the format names in the buffer-local variable "
"@code{buffer-file-format}."
msgstr ""

#. type: defvar
#: original_texis/files.texi:3837
#, no-wrap
msgid "buffer-file-format"
msgstr ""

#. type: defvar
#: original_texis/files.texi:3842
msgid ""
"This variable states the format of the visited file.  More precisely, this "
"is a list of the file format names that were decoded in the course of "
"visiting the current buffer's file.  It is always buffer-local in all "
"buffers."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3847
msgid ""
"When @code{write-region} writes data into a file, it first calls the "
"encoding functions for the formats listed in @code{buffer-file-format}, in "
"the order of appearance in the list."
msgstr ""

#. type: deffn
#: original_texis/files.texi:3848
#, no-wrap
msgid "Command format-write-file file format &optional confirm"
msgstr ""

#. type: deffn
#: original_texis/files.texi:3860
msgid ""
"This command writes the current buffer contents into the file @var{file} in "
"a format based on @var{format}, which is a list of format names.  It "
"constructs the actual format starting from @var{format}, then appending any "
"elements from the value of @code{buffer-file-format} with a non-@code{nil} "
"@var{preserve} flag (see above), if they are not already present in "
"@var{format}.  It then updates @code{buffer-file-format} with this format, "
"making it the default for future saves.  Except for the @var{format} "
"argument, this command is similar to @code{write-file}.  In particular, "
"@var{confirm} has the same meaning and interactive treatment as the "
"corresponding argument to @code{write-file}.  @xref{Definition of "
"write-file}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:3862
#, no-wrap
msgid "Command format-find-file file format"
msgstr ""

#. type: deffn
#: original_texis/files.texi:3866
msgid ""
"This command finds the file @var{file}, converting it according to format "
"@var{format}.  It also makes @var{format} the default if the buffer is saved "
"later."
msgstr ""

#. type: deffn
#: original_texis/files.texi:3870 original_texis/files.texi:3885
msgid ""
"The argument @var{format} is a list of format names.  If @var{format} is "
"@code{nil}, no conversion takes place.  Interactively, typing just @key{RET} "
"for @var{format} specifies @code{nil}."
msgstr ""

#. type: deffn
#: original_texis/files.texi:3872
#, no-wrap
msgid "Command format-insert-file file format &optional beg end"
msgstr ""

#. type: deffn
#: original_texis/files.texi:3877
msgid ""
"This command inserts the contents of file @var{file}, converting it "
"according to format @var{format}.  If @var{beg} and @var{end} are "
"non-@code{nil}, they specify which part of the file to read, as in "
"@code{insert-file-contents} (@pxref{Reading from Files})."
msgstr ""

#. type: deffn
#: original_texis/files.texi:3881
msgid ""
"The return value is like what @code{insert-file-contents} returns: a list of "
"the absolute file name and the length of the data inserted (after "
"conversion)."
msgstr ""

#. type: defvar
#: original_texis/files.texi:3887
#, no-wrap
msgid "buffer-auto-save-file-format"
msgstr ""

#. type: defvar
#: original_texis/files.texi:3895
msgid ""
"This variable specifies the format to use for auto-saving.  Its value is a "
"list of format names, just like the value of @code{buffer-file-format}; "
"however, it is used instead of @code{buffer-file-format} for writing "
"auto-save files.  If the value is @code{t}, the default, auto-saving uses "
"the same format as a regular save in the same buffer.  This variable is "
"always buffer-local in all buffers."
msgstr ""

#. type: node
#: original_texis/files.texi:3897
#, no-wrap
msgid "Format Conversion Piecemeal"
msgstr ""

#. type: subsection
#: original_texis/files.texi:3898
#, no-wrap
msgid "Piecemeal Specification"
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3904
msgid ""
"In contrast to the round-trip specification described in the previous "
"subsection (@pxref{Format Conversion Round-Trip}), you can use the variables "
"@code{after-insert-file-functions} and "
"@code{write-region-annotate-functions} to separately control the respective "
"reading and writing conversions."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3910
msgid ""
"Conversion starts with one representation and produces another "
"representation.  When there is only one conversion to do, there is no "
"conflict about what to start with.  However, when there are multiple "
"conversions involved, conflict may arise when two conversions need to start "
"with the same data."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3918
msgid ""
"This situation is best understood in the context of converting text "
"properties during @code{write-region}.  For example, the character at "
"position 42 in a buffer is @samp{X} with a text property @code{foo}.  If the "
"conversion for @code{foo} is done by inserting into the buffer, say, "
"@samp{FOO:}, then that changes the character at position 42 from @samp{X} to "
"@samp{F}.  The next conversion will start with the wrong data straight away."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3923
msgid ""
"To avoid conflict, cooperative conversions do not modify the buffer, but "
"instead specify @dfn{annotations}, a list of elements of the form "
"@code{(@var{position} . @var{string})}, sorted in order of increasing "
"@var{position}."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3929
msgid ""
"If there is more than one conversion, @code{write-region} merges their "
"annotations destructively into one sorted list.  Later, when the text from "
"the buffer is actually written to the file, it intermixes the specified "
"annotations at the corresponding positions.  All this takes place without "
"modifying the buffer."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3945
msgid ""
"In contrast, when reading, the annotations intermixed with the text are "
"handled immediately.  @code{insert-file-contents} sets point to the "
"beginning of some text to be converted, then calls the conversion functions "
"with the length of that text.  These functions should always return with "
"point at the beginning of the inserted text.  This approach makes sense for "
"reading because annotations removed by the first converter can't be "
"mistakenly processed by a later converter.  Each conversion function should "
"scan for the annotations it recognizes, remove the annotation, modify the "
"buffer text (to set a text property, for example), and return the updated "
"length of the text, as it stands after those changes.  The value returned by "
"one function becomes the argument to the next function."
msgstr ""

#. type: defvar
#: original_texis/files.texi:3946
#, no-wrap
msgid "write-region-annotate-functions"
msgstr ""

#. type: defvar
#: original_texis/files.texi:3951
msgid ""
"A list of functions for @code{write-region} to call.  Each function in the "
"list is called with two arguments: the start and end of the region to be "
"written.  These functions should not alter the contents of the buffer.  "
"Instead, they should return annotations."
msgstr ""

#. type: defvar
#: original_texis/files.texi:3959
msgid ""
"As a special case, a function may return with a different buffer current.  "
"Emacs takes this to mean that the current buffer contains altered text to be "
"output.  It therefore changes the @var{start} and @var{end} arguments of the "
"@code{write-region} call, giving them the values of @code{point-min} and "
"@code{point-max} in the new buffer, respectively.  It also discards all "
"previous annotations, because they should have been dealt with by this "
"function."
msgstr ""

#. type: defvar
#: original_texis/files.texi:3961
#, no-wrap
msgid "write-region-post-annotation-function"
msgstr ""

#. type: defvar
#: original_texis/files.texi:3965
msgid ""
"The value of this variable, if non-@code{nil}, should be a function.  This "
"function is called, with no arguments, after @code{write-region} has "
"completed."
msgstr ""

#. type: defvar
#: original_texis/files.texi:3971
msgid ""
"If any function in @code{write-region-annotate-functions} returns with a "
"different buffer current, Emacs calls "
"@code{write-region-post-annotation-function} more than once.  Emacs calls it "
"with the last buffer that was current, and again with the buffer before "
"that, and so on back to the original buffer."
msgstr ""

#. type: defvar
#: original_texis/files.texi:3976
msgid ""
"Thus, a function in @code{write-region-annotate-functions} can create a "
"buffer, give this variable the local value of @code{kill-buffer} in that "
"buffer, set up the buffer with altered text, and make the buffer current.  "
"The buffer will be killed after @code{write-region} is done."
msgstr ""

#. type: defvar
#: original_texis/files.texi:3978
#, no-wrap
msgid "after-insert-file-functions"
msgstr ""

#. type: defvar
#: original_texis/files.texi:3986
msgid ""
"Each function in this list is called by @code{insert-file-contents} with one "
"argument, the number of characters inserted, and with point at the beginning "
"of the inserted text.  Each function should leave point unchanged, and "
"return the new character count describing the inserted text as modified by "
"the function."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3992
msgid ""
"We invite users to write Lisp programs to store and retrieve text properties "
"in files, using these hooks, and thus to experiment with various data "
"formats and find good ones.  Eventually we hope users will produce good, "
"general extensions we can install in Emacs."
msgstr ""

#. type: Plain text
#: original_texis/files.texi:3996
msgid ""
"We suggest not trying to handle arbitrary Lisp objects as text property "
"names or values---because a program that general is probably difficult to "
"write, and slow.  Instead, choose a set of possible data types that are "
"reasonably flexible, and not too hard to encode."
msgstr ""
