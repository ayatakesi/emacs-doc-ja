# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2024-05-03 09:37+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: original_texis/syntax.texi:6 original_texis/syntax.texi:7
#, no-wrap
msgid "Syntax Tables"
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:8
#, no-wrap
msgid "parsing buffer text"
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:9
#, no-wrap
msgid "syntax table"
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:10
#, no-wrap
msgid "text parsing"
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:17
msgid ""
"A @dfn{syntax table} specifies the syntactic role of each character in a "
"buffer.  It can be used to determine where words, symbols, and other "
"syntactic constructs begin and end.  This information is used by many Emacs "
"facilities, including Font Lock mode (@pxref{Font Lock Mode}) and the "
"various complex movement commands (@pxref{Motion})."
msgstr ""

#. type: menuentry
#: original_texis/syntax.texi:28
msgid "Basics: Syntax Basics"
msgstr ""

#. type: menuentry
#: original_texis/syntax.texi:28
msgid "Basic concepts of syntax tables."
msgstr ""

#. type: section
#: original_texis/syntax.texi:28 original_texis/syntax.texi:87
#: original_texis/syntax.texi:88
#, no-wrap
msgid "Syntax Descriptors"
msgstr ""

#. type: menuentry
#: original_texis/syntax.texi:28
msgid "How characters are classified."
msgstr ""

#. type: section
#: original_texis/syntax.texi:28 original_texis/syntax.texi:394
#: original_texis/syntax.texi:395
#, no-wrap
msgid "Syntax Table Functions"
msgstr ""

#. type: menuentry
#: original_texis/syntax.texi:28
msgid "How to create, examine and alter syntax tables."
msgstr ""

#. type: section
#: original_texis/syntax.texi:28 original_texis/syntax.texi:532
#: original_texis/syntax.texi:533
#, no-wrap
msgid "Syntax Properties"
msgstr ""

#. type: menuentry
#: original_texis/syntax.texi:28
msgid "Overriding syntax with text properties."
msgstr ""

#. type: section
#: original_texis/syntax.texi:28 original_texis/syntax.texi:609
#: original_texis/syntax.texi:610
#, no-wrap
msgid "Motion and Syntax"
msgstr ""

#. type: menuentry
#: original_texis/syntax.texi:28
msgid "Moving over characters with certain syntaxes."
msgstr ""

#. type: section
#: original_texis/syntax.texi:28 original_texis/syntax.texi:650
#: original_texis/syntax.texi:651
#, no-wrap
msgid "Parsing Expressions"
msgstr ""

#. type: menuentry
#: original_texis/syntax.texi:28
msgid "Parsing balanced expressions using the syntax table."
msgstr ""

#. type: section
#: original_texis/syntax.texi:28 original_texis/syntax.texi:977
#: original_texis/syntax.texi:978
#, no-wrap
msgid "Syntax Table Internals"
msgstr ""

#. type: menuentry
#: original_texis/syntax.texi:28
msgid "How syntax table information is stored."
msgstr ""

#. type: section
#: original_texis/syntax.texi:28 original_texis/syntax.texi:1083
#: original_texis/syntax.texi:1084
#, no-wrap
msgid "Categories"
msgstr ""

#. type: menuentry
#: original_texis/syntax.texi:28
msgid "Another way of classifying character syntax."
msgstr ""

#. type: node
#: original_texis/syntax.texi:30
#, no-wrap
msgid "Syntax Basics"
msgstr ""

#. type: section
#: original_texis/syntax.texi:31
#, no-wrap
msgid "Syntax Table Concepts"
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:37
msgid ""
"A syntax table is a data structure which can be used to look up the "
"@dfn{syntax class} and other syntactic properties of each character.  Syntax "
"tables are used by Lisp programs for scanning and moving across text."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:46
msgid ""
"Internally, a syntax table is a char-table (@pxref{Char-Tables}).  The "
"element at index @var{c} describes the character with code @var{c}; its "
"value is a cons cell which specifies the syntax of the character in "
"question.  @xref{Syntax Table Internals}, for details.  However, instead of "
"using @code{aset} and @code{aref} to modify and inspect syntax table "
"contents, you should usually use the higher-level functions "
"@code{char-syntax} and @code{modify-syntax-entry}, which are described in "
"@ref{Syntax Table Functions}."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:47
#, no-wrap
msgid "syntax-table-p object"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:49
msgid "This function returns @code{t} if @var{object} is a syntax table."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:65
msgid ""
"Each buffer has its own major mode, and each major mode has its own idea of "
"the syntax class of various characters.  For example, in Lisp mode, the "
"character @samp{;} begins a comment, but in C mode, it terminates a "
"statement.  To support these variations, the syntax table is local to each "
"buffer.  Typically, each major mode has its own syntax table, which it "
"installs in all buffers that use that mode.  For example, the variable "
"@code{emacs-lisp-mode-syntax-table} holds the syntax table used by Emacs "
"Lisp mode, and @code{c-mode-syntax-table} holds the syntax table used by C "
"mode.  Changing a major mode's syntax table alters the syntax in all of that "
"mode's buffers, as well as in any buffers subsequently put in that mode.  "
"Occasionally, several similar modes share one syntax table.  @xref{Example "
"Major Modes}, for an example of how to set up a syntax table."
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:66
#, no-wrap
msgid "standard syntax table"
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:67
#, no-wrap
msgid "inheritance, syntax table"
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:76
msgid ""
"A syntax table can @dfn{inherit} from another syntax table, which is called "
"its @dfn{parent syntax table}.  A syntax table can leave the syntax class of "
"some characters unspecified, by giving them the ``inherit'' syntax class; "
"such a character then acquires the syntax class specified by the parent "
"syntax table (@pxref{Syntax Class Table}).  Emacs defines a @dfn{standard "
"syntax table}, which is the default parent syntax table, and is also the "
"syntax table used by Fundamental mode."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:77
#, no-wrap
msgid "standard-syntax-table"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:80
msgid ""
"This function returns the standard syntax table, which is the syntax table "
"used in Fundamental mode."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:86
msgid ""
"Syntax tables are not used by the Emacs Lisp reader, which has its own "
"built-in syntactic rules which cannot be changed.  (Some Lisp systems "
"provide ways to redefine the read syntax, but we decided to leave this "
"feature out of Emacs Lisp for simplicity.)"
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:89
#, no-wrap
msgid "syntax class"
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:95
msgid ""
"The @dfn{syntax class} of a character describes its syntactic role.  Each "
"syntax table specifies the syntax class of each character.  There is no "
"necessary relationship between the class of a character in one syntax table "
"and its class in any other table."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:104
msgid ""
"Each syntax class is designated by a mnemonic character, which serves as the "
"name of the class when you need to specify a class.  Usually, this "
"designator character is one that is often assigned that class; however, its "
"meaning as a designator is unvarying and independent of what syntax that "
"character currently has.  Thus, @samp{\\} as a designator character always "
"stands for escape character syntax, regardless of whether the @samp{\\} "
"character actually has that syntax in the current syntax table."
msgstr ""

#. type: ifnottex
#: original_texis/syntax.texi:107
msgid ""
"@xref{Syntax Class Table}, for a list of syntax classes and their designator "
"characters."
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:109
#, no-wrap
msgid "syntax descriptor"
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:115
msgid ""
"A @dfn{syntax descriptor} is a Lisp string that describes the syntax class "
"and other syntactic properties of a character.  When you want to modify the "
"syntax of a character, that is done by calling the function "
"@code{modify-syntax-entry} and passing a syntax descriptor as one of its "
"arguments (@pxref{Syntax Table Functions})."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:122
msgid ""
"The first character in a syntax descriptor must be a syntax class designator "
"character.  The second character, if present, specifies a matching character "
"(e.g., in Lisp, the matching character for @samp{(} is @samp{)}); a space "
"specifies that there is no matching character.  Then come characters "
"specifying additional syntax properties (@pxref{Syntax Flags})."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:125
msgid ""
"If no matching character or flags are needed, only one character (specifying "
"the syntax class) is sufficient."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:132
msgid ""
"For example, the syntax descriptor for the character @samp{*} in C mode is "
"@code{\". 23\"} (i.e., punctuation, matching character slot unused, second "
"character of a comment-starter, first character of a comment-ender), and the "
"entry for @samp{/} is @samp{@w{. 14}} (i.e., punctuation, matching character "
"slot unused, first character of a comment-starter, second character of a "
"comment-ender)."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:136
msgid ""
"Emacs also defines @dfn{raw syntax descriptors}, which are used to describe "
"syntax classes at a lower level.  @xref{Syntax Table Internals}."
msgstr ""

#. type: node
#: original_texis/syntax.texi:140 original_texis/syntax.texi:142
#, no-wrap
msgid "Syntax Class Table"
msgstr ""

#. type: menuentry
#: original_texis/syntax.texi:140
msgid "Table of syntax classes."
msgstr ""

#. type: subsection
#: original_texis/syntax.texi:140 original_texis/syntax.texi:285
#: original_texis/syntax.texi:286
#, no-wrap
msgid "Syntax Flags"
msgstr ""

#. type: menuentry
#: original_texis/syntax.texi:140
msgid "Additional flags each character can have."
msgstr ""

#. type: subsection
#: original_texis/syntax.texi:143
#, no-wrap
msgid "Table of Syntax Classes"
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:144
#, no-wrap
msgid "syntax class table"
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:148
msgid ""
"Here is a table of syntax classes, the characters that designate them, their "
"meanings, and examples of their use."
msgstr ""

#. type: item
#: original_texis/syntax.texi:150
#, no-wrap
msgid "Whitespace characters: @samp{@ } or @samp{-}"
msgstr ""

#. type: table
#: original_texis/syntax.texi:156
msgid ""
"Characters that separate symbols and words from each other.  Typically, "
"whitespace characters have no other syntactic significance, and multiple "
"whitespace characters are syntactically equivalent to a single one.  Space, "
"tab, and formfeed are classified as whitespace in almost all major modes."
msgstr ""

#. type: table
#: original_texis/syntax.texi:159
msgid ""
"This syntax class can be designated by either @w{@samp{@ }} or @samp{-}.  "
"Both designators are equivalent."
msgstr ""

#. type: item
#: original_texis/syntax.texi:160
#, no-wrap
msgid "Word constituents: @samp{w}"
msgstr ""

#. type: table
#: original_texis/syntax.texi:164
msgid ""
"Parts of words in human languages.  These are typically used in variable and "
"command names in programs.  All upper- and lower-case letters, and the "
"digits, are typically word constituents."
msgstr ""

#. type: item
#: original_texis/syntax.texi:165
#, no-wrap
msgid "Symbol constituents: @samp{_}"
msgstr ""

#. type: table
#: original_texis/syntax.texi:171
msgid ""
"Extra characters used in variable and command names along with word "
"constituents.  Examples include the characters @samp{$&*+-_<>} in Lisp mode, "
"which may be part of a symbol name even though they are not part of English "
"words.  In standard C, the only non-word-constituent character that is valid "
"in symbols is underscore (@samp{_})."
msgstr ""

#. type: item
#: original_texis/syntax.texi:172
#, no-wrap
msgid "Punctuation characters: @samp{.}"
msgstr ""

#. type: table
#: original_texis/syntax.texi:179
msgid ""
"Characters used as punctuation in a human language, or used in a programming "
"language to separate symbols from one another.  Some programming language "
"modes, such as Emacs Lisp mode, have no characters in this class since the "
"few characters that are not symbol or word constituents all have other "
"uses.  Other programming language modes, such as C mode, use punctuation "
"syntax for operators."
msgstr ""

#. type: item
#: original_texis/syntax.texi:180
#, no-wrap
msgid "Open parenthesis characters: @samp{(}"
msgstr ""

#. type: itemx
#: original_texis/syntax.texi:181
#, no-wrap
msgid "Close parenthesis characters: @samp{)}"
msgstr ""

#. type: table
#: original_texis/syntax.texi:188
msgid ""
"Characters used in dissimilar pairs to surround sentences or expressions.  "
"Such a grouping is begun with an open parenthesis character and terminated "
"with a close.  Each open parenthesis character matches a particular close "
"parenthesis character, and vice versa.  Normally, Emacs indicates "
"momentarily the matching open parenthesis when you insert a close "
"parenthesis.  @xref{Blinking}."
msgstr ""

#. type: table
#: original_texis/syntax.texi:193
msgid ""
"In human languages, and in C code, the parenthesis pairs are @samp{()}, "
"@samp{[]}, and @samp{@{@}}.  In Emacs Lisp, the delimiters for lists and "
"vectors (@samp{()} and @samp{[]}) are classified as parenthesis characters."
msgstr ""

#. type: item
#: original_texis/syntax.texi:194
#, no-wrap
msgid "String quotes: @samp{\"}"
msgstr ""

#. type: table
#: original_texis/syntax.texi:198
msgid ""
"Characters used to delimit string constants.  The same string quote "
"character appears at the beginning and the end of a string.  Such quoted "
"strings do not nest."
msgstr ""

#. type: table
#: original_texis/syntax.texi:202
msgid ""
"The parsing facilities of Emacs consider a string as a single token.  The "
"usual syntactic meanings of the characters in the string are suppressed."
msgstr ""

#. type: table
#: original_texis/syntax.texi:208
msgid ""
"The Lisp modes have two string quote characters: double-quote (@samp{\"})  "
"and vertical bar (@samp{|}).  @samp{|} is not used in Emacs Lisp, but it is "
"used in Common Lisp.  C also has two string quote characters: double-quote "
"for strings, and apostrophe (@samp{'}) for character constants."
msgstr ""

#. type: table
#: original_texis/syntax.texi:212
msgid ""
"Human text has no string quote characters.  We do not want quotation marks "
"to turn off the usual syntactic properties of other characters in the "
"quotation."
msgstr ""

#. type: item
#: original_texis/syntax.texi:213
#, no-wrap
msgid "Escape-syntax characters: @samp{\\}"
msgstr ""

#. type: table
#: original_texis/syntax.texi:219
msgid ""
"Characters that start an escape sequence, such as is used in string and "
"character constants.  The character @samp{\\} belongs to this class in both "
"C and Lisp.  (In C, it is used thus only inside strings, but it turns out to "
"cause no trouble to treat it this way throughout C code.)"
msgstr ""

#. type: table
#: original_texis/syntax.texi:222 original_texis/syntax.texi:230
msgid ""
"Characters in this class count as part of words if "
"@code{words-include-escapes} is non-@code{nil}.  @xref{Word Motion}."
msgstr ""

#. type: item
#: original_texis/syntax.texi:223
#, no-wrap
msgid "Character quotes: @samp{/}"
msgstr ""

#. type: table
#: original_texis/syntax.texi:227
msgid ""
"Characters used to quote the following character so that it loses its normal "
"syntactic meaning.  This differs from an escape character in that only the "
"character immediately following is ever affected."
msgstr ""

#. type: table
#: original_texis/syntax.texi:232
msgid "This class is used for backslash in @TeX{} mode."
msgstr ""

#. type: item
#: original_texis/syntax.texi:233
#, no-wrap
msgid "Paired delimiters: @samp{$}"
msgstr ""

#. type: table
#: original_texis/syntax.texi:238
msgid ""
"Similar to string quote characters, except that the syntactic properties of "
"the characters between the delimiters are not suppressed.  Only @TeX{} mode "
"uses a paired delimiter presently---the @samp{$} that both enters and leaves "
"math mode."
msgstr ""

#. type: item
#: original_texis/syntax.texi:239
#, no-wrap
msgid "Expression prefixes: @samp{'}"
msgstr ""

#. type: table
#: original_texis/syntax.texi:245
msgid ""
"Characters used for syntactic operators that are considered as part of an "
"expression if they appear next to one.  In Lisp modes, these characters "
"include the apostrophe, @samp{'} (used for quoting), the comma, @samp{,} "
"(used in macros), and @samp{#} (used in the read syntax for certain data "
"types)."
msgstr ""

#. type: item
#: original_texis/syntax.texi:246
#, no-wrap
msgid "Comment starters: @samp{<}"
msgstr ""

#. type: itemx
#: original_texis/syntax.texi:247
#, no-wrap
msgid "Comment enders: @samp{>}"
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:248
#, no-wrap
msgid "comment syntax"
msgstr ""

#. type: table
#: original_texis/syntax.texi:252
msgid ""
"Characters used in various languages to delimit comments.  Human text has no "
"comment characters.  In Lisp, the semicolon (@samp{;}) starts a comment and "
"a newline or formfeed ends one."
msgstr ""

#. type: item
#: original_texis/syntax.texi:253
#, no-wrap
msgid "Inherit standard syntax: @samp{@@}"
msgstr ""

#. type: table
#: original_texis/syntax.texi:257
msgid ""
"This syntax class does not specify a particular syntax.  It says to look in "
"the parent syntax table to find the syntax of this character."
msgstr ""

#. type: item
#: original_texis/syntax.texi:258
#, no-wrap
msgid "Generic comment delimiters: @samp{!}"
msgstr ""

#. type: table
#: original_texis/syntax.texi:264
msgid ""
"(This syntax class is also known as ``comment-fence''.)  Characters that "
"start or end a special kind of comment.  @emph{Any} generic comment "
"delimiter matches @emph{any} generic comment delimiter, but they cannot "
"match a comment starter or comment ender; generic comment delimiters can "
"only match each other."
msgstr ""

#. type: table
#: original_texis/syntax.texi:270
msgid ""
"This syntax class is primarily meant for use with the @code{syntax-table} "
"text property (@pxref{Syntax Properties}).  You can mark any range of "
"characters as forming a comment, by giving the first and last characters of "
"the range @code{syntax-table} properties identifying them as generic comment "
"delimiters."
msgstr ""

#. type: item
#: original_texis/syntax.texi:271
#, no-wrap
msgid "Generic string delimiters: @samp{|}"
msgstr ""

#. type: table
#: original_texis/syntax.texi:277
msgid ""
"(This syntax class is also known as ``string-fence''.)  Characters that "
"start or end a string.  This class differs from the string quote class in "
"that @emph{any} generic string delimiter can match any other generic string "
"delimiter; but they do not match ordinary string quote characters."
msgstr ""

#. type: table
#: original_texis/syntax.texi:283
msgid ""
"This syntax class is primarily meant for use with the @code{syntax-table} "
"text property (@pxref{Syntax Properties}).  You can mark any range of "
"characters as forming a string constant, by giving the first and last "
"characters of the range @code{syntax-table} properties identifying them as "
"generic string delimiters."
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:287
#, no-wrap
msgid "syntax flags"
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:293
msgid ""
"In addition to the classes, entries for characters in a syntax table can "
"specify flags.  There are eight possible flags, represented by the "
"characters @samp{1}, @samp{2}, @samp{3}, @samp{4}, @samp{b}, @samp{c}, "
"@samp{n}, and @samp{p}."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:305
msgid ""
"All the flags except @samp{p} are used to describe comment delimiters.  The "
"digit flags are used for comment delimiters made up of 2 characters.  They "
"indicate that a character can @emph{also} be part of a comment sequence, in "
"addition to the syntactic properties associated with its character class.  "
"The flags are independent of the class and each other for the sake of "
"characters such as @samp{*} in C mode, which is a punctuation character, "
"@emph{and} the second character of a start-of-comment sequence (@samp{/*}), "
"@emph{and} the first character of an end-of-comment sequence (@samp{*/}).  "
"The flags @samp{b}, @samp{c}, and @samp{n} are used to qualify the "
"corresponding comment delimiter."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:308
msgid ""
"Here is a table of the possible flags for a character @var{c}, and what they "
"mean:"
msgstr ""

#. type: itemize
#: original_texis/syntax.texi:313
msgid ""
"@samp{1} means @var{c} is the start of a two-character comment-start "
"sequence."
msgstr ""

#. type: itemize
#: original_texis/syntax.texi:316
msgid "@samp{2} means @var{c} is the second character of such a sequence."
msgstr ""

#. type: itemize
#: original_texis/syntax.texi:320
msgid "@samp{3} means @var{c} is the start of a two-character comment-end sequence."
msgstr ""

#. type: itemize
#: original_texis/syntax.texi:323
msgid "@samp{4} means @var{c} is the second character of such a sequence."
msgstr ""

#. type: itemize
#: original_texis/syntax.texi:329
msgid ""
"@samp{b} means that @var{c} as a comment delimiter belongs to the "
"alternative ``b'' comment style.  For a two-character comment starter, this "
"flag is only significant on the second char, and for a 2-character comment "
"ender it is only significant on the first char."
msgstr ""

#. type: itemize
#: original_texis/syntax.texi:334
msgid ""
"@samp{c} means that @var{c} as a comment delimiter belongs to the "
"alternative ``c'' comment style.  For a two-character comment delimiter, "
"@samp{c} on either character makes it of style ``c''."
msgstr ""

#. type: itemize
#: original_texis/syntax.texi:340
msgid ""
"@samp{n} on a comment delimiter character specifies that this kind of "
"comment can be nested.  Inside such a comment, only comments of the same "
"style will be recognized.  For a two-character comment delimiter, @samp{n} "
"on either character makes it nestable."
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:341
#, no-wrap
msgid "comment style"
msgstr ""

#. type: itemize
#: original_texis/syntax.texi:351
msgid ""
"Emacs supports several comment styles simultaneously in any one syntax "
"table.  A comment style is a set of flags @samp{b}, @samp{c}, and @samp{n}, "
"so there can be up to 8 different comment styles, each one named by the set "
"of its flags.  Each comment delimiter has a style and only matches comment "
"delimiters of the same style.  Thus if a comment starts with the "
"comment-start sequence of style ``bn'', it will extend until the next "
"matching comment-end sequence of style ``bn''.  When the set of flags has "
"neither flag @samp{b} nor flag @samp{c} set, the resulting style is called "
"the ``a'' style."
msgstr ""

#. type: itemize
#: original_texis/syntax.texi:353
msgid "The appropriate comment syntax settings for C++ can be as follows:"
msgstr ""

#. type: samp{#1}
#: original_texis/syntax.texi:355
#, no-wrap
msgid "/"
msgstr ""

#. type: samp{#1}
#: original_texis/syntax.texi:357
msgid "124"
msgstr ""

#. type: samp{#1}
#: original_texis/syntax.texi:357
#, no-wrap
msgid "*"
msgstr ""

#. type: samp{#1}
#: original_texis/syntax.texi:359
msgid "23b"
msgstr ""

#. type: item
#: original_texis/syntax.texi:359 original_texis/syntax.texi:378
#, no-wrap
msgid "newline"
msgstr ""

#. type: samp{#1}
#: original_texis/syntax.texi:361
msgid ">"
msgstr ""

#. type: itemize
#: original_texis/syntax.texi:364
msgid "This defines four comment-delimiting sequences:"
msgstr ""

#. type: samp{#1}
#: original_texis/syntax.texi:366
#, no-wrap
msgid "/*"
msgstr ""

#. type: table
#: original_texis/syntax.texi:369
msgid ""
"This is a comment-start sequence for ``b'' style because the second "
"character, @samp{*}, has the @samp{b} flag."
msgstr ""

#. type: samp{#1}
#: original_texis/syntax.texi:370
#, no-wrap
msgid "//"
msgstr ""

#. type: table
#: original_texis/syntax.texi:373
msgid ""
"This is a comment-start sequence for ``a'' style because the second "
"character, @samp{/}, does not have the @samp{b} flag."
msgstr ""

#. type: samp{#1}
#: original_texis/syntax.texi:374
#, no-wrap
msgid "*/"
msgstr ""

#. type: table
#: original_texis/syntax.texi:377
msgid ""
"This is a comment-end sequence for ``b'' style because the first character, "
"@samp{*}, has the @samp{b} flag."
msgstr ""

#. type: table
#: original_texis/syntax.texi:381
msgid ""
"This is a comment-end sequence for ``a'' style, because the newline "
"character does not have the @samp{b} flag."
msgstr ""

#. type: itemize
#: original_texis/syntax.texi:388
msgid ""
"@samp{p} identifies an additional prefix character for Lisp syntax.  These "
"characters are treated as whitespace when they appear between expressions.  "
"When they appear within an expression, they are handled according to their "
"usual syntax classes."
msgstr ""

#. type: itemize
#: original_texis/syntax.texi:392
msgid ""
"The function @code{backward-prefix-chars} moves back over these characters, "
"as well as over characters whose primary syntax class is prefix (@samp{'}).  "
"@xref{Motion and Syntax}."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:399
msgid ""
"In this section we describe functions for creating, accessing and altering "
"syntax tables."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:400
#, no-wrap
msgid "make-syntax-table &optional table"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:404
msgid ""
"This function creates a new syntax table.  If @var{table} is non-@code{nil}, "
"the parent of the new syntax table is @var{table}; otherwise, the parent is "
"the standard syntax table."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:408
msgid ""
"In the new syntax table, all characters are initially given the ``inherit'' "
"(@samp{@@}) syntax class, i.e., their syntax is inherited from the parent "
"table (@pxref{Syntax Class Table})."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:410
#, no-wrap
msgid "copy-syntax-table &optional table"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:415
msgid ""
"This function constructs a copy of @var{table} and returns it.  If "
"@var{table} is omitted or @code{nil}, it returns a copy of the standard "
"syntax table.  Otherwise, an error is signaled if @var{table} is not a "
"syntax table."
msgstr ""

#. type: deffn
#: original_texis/syntax.texi:417
#, no-wrap
msgid "Command modify-syntax-entry char syntax-descriptor  &optional table"
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:418
#, no-wrap
msgid "syntax entry, setting"
msgstr ""

#. type: deffn
#: original_texis/syntax.texi:424
msgid ""
"This function sets the syntax entry for @var{char} according to "
"@var{syntax-descriptor}.  @var{char} must be a character, or a cons cell of "
"the form @code{(@var{min} . @var{max})}; in the latter case, the function "
"sets the syntax entries for all characters in the range between @var{min} "
"and @var{max}, inclusive."
msgstr ""

#. type: deffn
#: original_texis/syntax.texi:427
msgid ""
"The syntax is changed only for @var{table}, which defaults to the current "
"buffer's syntax table, and not in any other syntax table."
msgstr ""

#. type: deffn
#: original_texis/syntax.texi:433
msgid ""
"The argument @var{syntax-descriptor} is a syntax descriptor, i.e., a string "
"whose first character is a syntax class designator and whose second and "
"subsequent characters optionally specify a matching character and syntax "
"flags.  @xref{Syntax Descriptors}.  An error is signaled if "
"@var{syntax-descriptor} is not a valid syntax descriptor."
msgstr ""

#. type: deffn
#: original_texis/syntax.texi:436
msgid ""
"This function always returns @code{nil}.  The old syntax information in the "
"table for this character is discarded."
msgstr ""

#. type: exdent
#: original_texis/syntax.texi:439
#, no-wrap
msgid "@r{Examples:}"
msgstr ""

#. type: group
#: original_texis/syntax.texi:444
#, no-wrap
msgid ""
";; @r{Put the space character in class whitespace.}\n"
"(modify-syntax-entry ?\\s \" \")\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/syntax.texi:451
#, no-wrap
msgid ""
";; @r{Make @samp{$} an open parenthesis character,}\n"
";;   @r{with @samp{^} as its matching close.}\n"
"(modify-syntax-entry ?$ \"(^\")\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/syntax.texi:458
#, no-wrap
msgid ""
";; @r{Make @samp{^} a close parenthesis character,}\n"
";;   @r{with @samp{$} as its matching open.}\n"
"(modify-syntax-entry ?^ \")$\")\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/syntax.texi:467
#, no-wrap
msgid ""
";; @r{Make @samp{/} a punctuation character,}\n"
";;   @r{the first character of a start-comment sequence,}\n"
";;   @r{and the second character of an end-comment sequence.}\n"
";;   @r{This is used in C mode.}\n"
"(modify-syntax-entry ?/ \". 14\")\n"
"     @result{} nil\n"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:471
#, no-wrap
msgid "char-syntax character"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:476
msgid ""
"This function returns the syntax class of @var{character}, represented by "
"its designator character (@pxref{Syntax Class Table}).  This returns "
"@emph{only} the class, not its matching character or syntax flags."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:479
msgid ""
"The following examples apply to C mode.  (We use @code{string} to make it "
"easier to see the character returned by @code{char-syntax}.)"
msgstr ""

#. type: group
#: original_texis/syntax.texi:485
#, no-wrap
msgid ""
";; Space characters have whitespace syntax class.\n"
"(string (char-syntax ?\\s))\n"
"     @result{} \" \"\n"
msgstr ""

#. type: group
#: original_texis/syntax.texi:493
#, no-wrap
msgid ""
";; Forward slash characters have punctuation syntax.\n"
";; Note that this @code{char-syntax} call does not reveal\n"
";; that it is also part of comment-start and -end sequences.\n"
"(string (char-syntax ?/))\n"
"     @result{} \".\"\n"
msgstr ""

#. type: group
#: original_texis/syntax.texi:501
#, no-wrap
msgid ""
";; Open parenthesis characters have open parenthesis syntax.\n"
";; Note that this @code{char-syntax} call does not reveal that\n"
";; it has a matching character, @samp{)}.\n"
"(string (char-syntax ?\\())\n"
"     @result{} \"(\"\n"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:506
#, no-wrap
msgid "set-syntax-table table"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:509
msgid ""
"This function makes @var{table} the syntax table for the current buffer.  It "
"returns @var{table}."
msgstr ""

#. type: var{#1}
#: original_texis/syntax.texi:511 original_texis/syntax.texi:544
#, no-wrap
msgid "syntax-table"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:514
msgid ""
"This function returns the current syntax table, which is the table for the "
"current buffer."
msgstr ""

#. type: deffn
#: original_texis/syntax.texi:516
#, no-wrap
msgid "Command describe-syntax &optional buffer"
msgstr ""

#. type: deffn
#: original_texis/syntax.texi:519
msgid ""
"This command displays the contents of the syntax table of @var{buffer} (by "
"default, the current buffer) in a help buffer."
msgstr ""

#. type: defmac
#: original_texis/syntax.texi:521
#, no-wrap
msgid "with-syntax-table table body@dots{}"
msgstr ""

#. type: defmac
#: original_texis/syntax.texi:525
msgid ""
"This macro executes @var{body} using @var{table} as the current syntax "
"table.  It returns the value of the last form in @var{body}, after restoring "
"the old current syntax table."
msgstr ""

#. type: defmac
#: original_texis/syntax.texi:530
msgid ""
"Since each buffer has its own current syntax table, we should make that more "
"precise: @code{with-syntax-table} temporarily alters the current syntax "
"table of whichever buffer is current at the time the macro execution "
"starts.  Other buffers are not affected."
msgstr ""

#. type: kindex
#: original_texis/syntax.texi:534
#, no-wrap
msgid "syntax-table @r{(text property)}"
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:540
msgid ""
"When the syntax table is not flexible enough to specify the syntax of a "
"language, you can override the syntax table for specific character "
"occurrences in the buffer, by applying a @code{syntax-table} text property.  "
"@xref{Text Properties}, for how to apply text properties."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:542
msgid "The valid values of @code{syntax-table} text property are:"
msgstr ""

#. type: table
#: original_texis/syntax.texi:548
msgid ""
"If the property value is a syntax table, that table is used instead of the "
"current buffer's syntax table to determine the syntax for the underlying "
"text character."
msgstr ""

#. type: code{#1}
#: original_texis/syntax.texi:549
#, no-wrap
msgid "(@var{syntax-code} . @var{matching-char})"
msgstr ""

#. type: table
#: original_texis/syntax.texi:553
msgid ""
"A cons cell of this format is a raw syntax descriptor (@pxref{Syntax Table "
"Internals}), which directly specifies a syntax class for the underlying text "
"character."
msgstr ""

#. type: code{#1}
#: original_texis/syntax.texi:554
#, no-wrap
msgid "nil"
msgstr ""

#. type: table
#: original_texis/syntax.texi:557
msgid ""
"If the property is @code{nil}, the character's syntax is determined from the "
"current syntax table in the usual way."
msgstr ""

#. type: defvar
#: original_texis/syntax.texi:559
#, no-wrap
msgid "parse-sexp-lookup-properties"
msgstr ""

#. type: defvar
#: original_texis/syntax.texi:563
msgid ""
"If this is non-@code{nil}, the syntax scanning functions, like "
"@code{forward-sexp}, pay attention to @code{syntax-table} text properties.  "
"Otherwise they use only the current syntax table."
msgstr ""

#. type: defvar
#: original_texis/syntax.texi:565
#, no-wrap
msgid "syntax-propertize-function"
msgstr ""

#. type: defvar
#: original_texis/syntax.texi:570
msgid ""
"This variable, if non-@code{nil}, should store a function for applying "
"@code{syntax-table} properties to a specified stretch of text.  It is "
"intended to be used by major modes to install a function which applies "
"@code{syntax-table} properties in some mode-appropriate way."
msgstr ""

#. type: defvar
#: original_texis/syntax.texi:583
msgid ""
"The function is called by @code{syntax-ppss} (@pxref{Position Parse}), and "
"by Font Lock mode during syntactic fontification (@pxref{Syntactic Font "
"Lock}).  It is called with two arguments, @var{start} and @var{end}, which "
"are the starting and ending positions of the text on which it should act.  "
"It is allowed to arbitrarily move point within the region delimited by "
"@var{start} and @var{end}; such motions don't need to use "
"@code{save-excursion} (@pxref{Excursions}).  It is also allowed to call "
"@code{syntax-ppss} on any position before @var{end}, but if a Lisp program "
"calls @code{syntax-ppss} on some position and later modifies the buffer at "
"some earlier position, then it is that program's responsibility to call "
"@code{syntax-ppss-flush-cache} to flush the now obsolete info from the "
"cache."
msgstr ""

#. type: defvar
#: original_texis/syntax.texi:592
msgid ""
"@strong{Caution:} When this variable is non-@code{nil}, Emacs removes "
"@code{syntax-table} text properties arbitrarily and relies on "
"@code{syntax-propertize-function} to reapply them.  Thus if this facility is "
"used at all, the function must apply @strong{all} @code{syntax-table} text "
"properties used by the major mode.  In particular, Modes derived from a CC "
"Mode mode must not use this variable, since CC Mode uses other means to "
"apply and remove these text properties."
msgstr ""

#. type: defvar
#: original_texis/syntax.texi:594
#, no-wrap
msgid "syntax-propertize-extend-region-functions"
msgstr ""

#. type: defvar
#: original_texis/syntax.texi:601
msgid ""
"This abnormal hook is run by the syntax parsing code prior to calling "
"@code{syntax-propertize-function}.  Its role is to help locate safe starting "
"and ending buffer positions for passing to "
"@code{syntax-propertize-function}.  For example, a major mode can add a "
"function to this hook to identify multi-line syntactic constructs, and "
"ensure that the boundaries do not fall in the middle of one."
msgstr ""

#. type: defvar
#: original_texis/syntax.texi:607
msgid ""
"Each function in this hook should accept two arguments, @var{start} and "
"@var{end}.  It should return either a cons cell of two adjusted buffer "
"positions, @code{(@var{new-start} . @var{new-end})}, or @code{nil} if no "
"adjustment is necessary.  The hook functions are run in turn, repeatedly, "
"until they all return @code{nil}."
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:611
#, no-wrap
msgid "moving across syntax classes"
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:612
#, no-wrap
msgid "skipping characters of certain syntax"
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:616
msgid ""
"This section describes functions for moving across characters that have "
"certain syntax classes."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:617
#, no-wrap
msgid "skip-syntax-forward syntaxes &optional limit"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:623
msgid ""
"This function moves point forward across characters having syntax classes "
"mentioned in @var{syntaxes} (a string of syntax class characters).  It stops "
"when it encounters the end of the buffer, or position @var{limit} (if "
"specified), or a character it is not supposed to skip."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:626 original_texis/syntax.texi:639
msgid ""
"If @var{syntaxes} starts with @samp{^}, then the function skips characters "
"whose syntax is @emph{not} in @var{syntaxes}."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:629
msgid "The return value is the distance traveled, which is a nonnegative integer."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:631
#, no-wrap
msgid "skip-syntax-backward syntaxes &optional limit"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:636
msgid ""
"This function moves point backward across characters whose syntax classes "
"are mentioned in @var{syntaxes}.  It stops when it encounters the beginning "
"of the buffer, or position @var{limit} (if specified), or a character it is "
"not supposed to skip."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:642
msgid ""
"The return value indicates the distance traveled.  It is an integer that is "
"zero or less."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:644
#, no-wrap
msgid "backward-prefix-chars"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:648
msgid ""
"This function moves point backward over any number of characters with "
"expression prefix syntax.  This includes both characters in the expression "
"prefix syntax class, and characters with the @samp{p} flag."
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:652
#, no-wrap
msgid "parsing expressions"
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:653
#, no-wrap
msgid "scanning expressions"
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:664
msgid ""
"This section describes functions for parsing and scanning balanced "
"expressions.  We will refer to such expressions as @dfn{sexps}, following "
"the terminology of Lisp, even though these functions can act on languages "
"other than Lisp.  Basically, a sexp is either a balanced parenthetical "
"grouping, a string, or a symbol (i.e., a sequence of characters whose syntax "
"is either word constituent or symbol constituent).  However, characters in "
"the expression prefix syntax class (@pxref{Syntax Class Table}) are treated "
"as part of the sexp if they appear next to it."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:669
msgid ""
"The syntax table controls the interpretation of characters, so these "
"functions can be used for Lisp expressions when in Lisp mode and for C "
"expressions when in C mode.  @xref{List Motion}, for convenient higher-level "
"functions for moving over balanced expressions."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:676
msgid ""
"A character's syntax controls how it changes the state of the parser, rather "
"than describing the state itself.  For example, a string delimiter character "
"toggles the parser state between in-string and in-code, but the syntax of "
"characters does not directly say whether they are inside a string.  For "
"example (note that 15 is the syntax code for generic string delimiters),"
msgstr ""

#. type: example
#: original_texis/syntax.texi:679
#, no-wrap
msgid "(put-text-property 1 9 'syntax-table '(15 . nil))\n"
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:685
msgid ""
"does not tell Emacs that the first eight chars of the current buffer are a "
"string, but rather that they are all string delimiters.  As a result, Emacs "
"treats them as four consecutive empty string constants."
msgstr ""

#. type: node
#: original_texis/syntax.texi:692 original_texis/syntax.texi:694
#, no-wrap
msgid "Motion via Parsing"
msgstr ""

#. type: menuentry
#: original_texis/syntax.texi:692
msgid "Motion functions that work by parsing."
msgstr ""

#. type: node
#: original_texis/syntax.texi:692 original_texis/syntax.texi:760
#, no-wrap
msgid "Position Parse"
msgstr ""

#. type: menuentry
#: original_texis/syntax.texi:692
msgid "Determining the syntactic state of a position."
msgstr ""

#. type: subsection
#: original_texis/syntax.texi:692 original_texis/syntax.texi:807
#: original_texis/syntax.texi:808
#, no-wrap
msgid "Parser State"
msgstr ""

#. type: menuentry
#: original_texis/syntax.texi:692
msgid "How Emacs represents a syntactic state."
msgstr ""

#. type: subsection
#: original_texis/syntax.texi:692 original_texis/syntax.texi:906
#: original_texis/syntax.texi:907
#, no-wrap
msgid "Low-Level Parsing"
msgstr ""

#. type: menuentry
#: original_texis/syntax.texi:692
msgid "Parsing across a specified region."
msgstr ""

#. type: node
#: original_texis/syntax.texi:692 original_texis/syntax.texi:945
#, no-wrap
msgid "Control Parsing"
msgstr ""

#. type: menuentry
#: original_texis/syntax.texi:692
msgid "Parameters that affect parsing."
msgstr ""

#. type: subsection
#: original_texis/syntax.texi:695
#, no-wrap
msgid "Motion Commands Based on Parsing"
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:696
#, no-wrap
msgid "motion based on parsing"
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:700
msgid ""
"This section describes simple point-motion functions that operate based on "
"parsing expressions."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:701
#, no-wrap
msgid "scan-lists from count depth"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:705
msgid ""
"This function scans forward @var{count} balanced parenthetical groupings "
"from position @var{from}.  It returns the position where the scan stops.  If "
"@var{count} is negative, the scan moves backwards."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:713
msgid ""
"If @var{depth} is nonzero, treat the starting position as being @var{depth} "
"parentheses deep.  The scanner moves forward or backward through the buffer "
"until the depth changes to zero @var{count} times.  Hence, a positive value "
"for @var{depth} has the effect of moving out @var{depth} levels of "
"parenthesis from the starting position, while a negative @var{depth} has the "
"effect of moving deeper by @var{-depth} levels of parenthesis."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:716 original_texis/syntax.texi:730
msgid ""
"Scanning ignores comments if @code{parse-sexp-ignore-comments} is "
"non-@code{nil}."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:721
msgid ""
"If the scan reaches the beginning or end of the accessible part of the "
"buffer before it has scanned over @var{count} parenthetical groupings, the "
"return value is @code{nil} if the depth at that point is zero; if the depth "
"is non-zero, a @code{scan-error} error is signaled."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:723
#, no-wrap
msgid "scan-sexps from count"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:727
msgid ""
"This function scans forward @var{count} sexps from position @var{from}.  It "
"returns the position where the scan stops.  If @var{count} is negative, the "
"scan moves backwards."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:735
msgid ""
"If the scan reaches the beginning or end of (the accessible part of) the "
"buffer while in the middle of a parenthetical grouping, an error is "
"signaled.  If it reaches the beginning or end between groupings but before "
"count is used up, @code{nil} is returned."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:737
#, no-wrap
msgid "forward-comment count"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:749
msgid ""
"This function moves point forward across @var{count} complete comments (that "
"is, including the starting delimiter and the terminating delimiter if any), "
"plus any whitespace encountered on the way.  It moves backward if "
"@var{count} is negative.  If it encounters anything other than a comment or "
"whitespace, it stops, leaving point at the place where it stopped.  This "
"includes (for instance) finding the end of a comment when moving forward and "
"expecting the beginning of one.  The function also stops immediately after "
"moving over the specified number of complete comments.  If @var{count} "
"comments are found as expected, with nothing except whitespace between them, "
"it returns @code{t}; otherwise it returns @code{nil}."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:753
msgid ""
"This function cannot tell whether the comments it traverses are embedded "
"within a string.  If they look like comments, it treats them as comments."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:758
msgid ""
"To move forward over all comments and whitespace following point, use "
"@code{(forward-comment (buffer-size))}.  @code{(buffer-size)} is a good "
"argument to use, because the number of comments in the buffer cannot exceed "
"that many."
msgstr ""

#. type: subsection
#: original_texis/syntax.texi:761
#, no-wrap
msgid "Finding the Parse State for a Position"
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:762
#, no-wrap
msgid "parse state for a position"
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:767
msgid ""
"For syntactic analysis, such as in indentation, often the useful thing is to "
"compute the syntactic state corresponding to a given buffer position.  This "
"function does that conveniently."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:768
#, no-wrap
msgid "syntax-ppss &optional pos"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:772
msgid ""
"This function returns the parser state that the parser would reach at "
"position @var{pos} starting from the beginning of the visible portion of the "
"buffer."
msgstr ""

#. type: iftex
#: original_texis/syntax.texi:774
msgid "See the next section"
msgstr ""

#. type: ifnottex
#: original_texis/syntax.texi:777
msgid "@xref{Parser State},"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:779
msgid "for a description of the parser state."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:787
msgid ""
"The return value is the same as if you call the low-level parsing function "
"@code{parse-partial-sexp} to parse from the beginning of the visible portion "
"of the buffer to @var{pos} (@pxref{Low-Level Parsing}).  However, "
"@code{syntax-ppss} uses caches to speed up the computation.  Due to this "
"optimization, the second value (previous complete subexpression) and sixth "
"value (minimum parenthesis depth) in the returned parser state are not "
"meaningful."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:797
msgid ""
"This function has a side effect: it adds a buffer-local entry to "
"@code{before-change-functions} (@pxref{Change Hooks}) for "
"@code{syntax-ppss-flush-cache} (see below).  This entry keeps the cache "
"consistent as the buffer is modified.  However, the cache might not be "
"updated if @code{syntax-ppss} is called while @code{before-change-functions} "
"is temporarily let-bound, or if the buffer is modified without running the "
"hook, such as when using @code{inhibit-modification-hooks}.  In those cases, "
"it is necessary to call @code{syntax-ppss-flush-cache} explicitly."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:799
#, no-wrap
msgid "syntax-ppss-flush-cache beg &rest ignored-args"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:805
msgid ""
"This function flushes the cache used by @code{syntax-ppss}, starting at "
"position @var{beg}.  The remaining arguments, @var{ignored-args}, are "
"ignored; this function accepts them so that it can be directly used on hooks "
"such as @code{before-change-functions} (@pxref{Change Hooks})."
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:809
#, no-wrap
msgid "parser state"
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:816
msgid ""
"A @dfn{parser state} is a list of (currently) eleven elements describing the "
"state of the syntactic parser, after it parses the text between a specified "
"starting point and a specified end point in the buffer using "
"@code{parse-partial-sexp} (@pxref{Low-Level Parsing}).  Parsing functions "
"such as @code{syntax-ppss}"
msgstr ""

#. type: ifnottex
#: original_texis/syntax.texi:818
msgid "(@pxref{Position Parse})"
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:821
msgid ""
"also return a parser state as the value.  @code{parse-partial-sexp} can "
"accept a parser state as an argument, for resuming parsing."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:823
msgid "Here are the meanings of the elements of the parser state:"
msgstr ""

#. type: enumerate
#: original_texis/syntax.texi:829
msgid ""
"The depth in parentheses, counting from 0.  @strong{Warning:} this can be "
"negative if there are more close parens than open parens between the "
"parser's starting point and end point."
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:831
#, no-wrap
msgid "innermost containing parentheses"
msgstr ""

#. type: enumerate
#: original_texis/syntax.texi:834
msgid ""
"The character position of the start of the innermost parenthetical grouping "
"containing the stopping point; @code{nil} if none."
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:836
#, no-wrap
msgid "previous complete subexpression"
msgstr ""

#. type: enumerate
#: original_texis/syntax.texi:839
msgid ""
"The character position of the start of the last complete subexpression "
"terminated; @code{nil} if none."
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:841
#, no-wrap
msgid "inside string"
msgstr ""

#. type: enumerate
#: original_texis/syntax.texi:845
msgid ""
"Non-@code{nil} if inside a string.  More precisely, this is the character "
"that will terminate the string, or @code{t} if a generic string delimiter "
"character should terminate it."
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:847
#, no-wrap
msgid "inside comment"
msgstr ""

#. type: enumerate
#: original_texis/syntax.texi:851
msgid ""
"@code{t} if inside a non-nestable comment (of any comment style; "
"@pxref{Syntax Flags}); or the comment nesting level if inside a comment that "
"can be nested."
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:853
#, no-wrap
msgid "quote character"
msgstr ""

#. type: enumerate
#: original_texis/syntax.texi:855
msgid "@code{t} if the end point is just after a quote character."
msgstr ""

#. type: enumerate
#: original_texis/syntax.texi:858
msgid "The minimum parenthesis depth encountered during this scan."
msgstr ""

#. type: enumerate
#: original_texis/syntax.texi:864
msgid ""
"What kind of comment is active: @code{nil} if not in a comment or in a "
"comment of style @samp{a}; 1 for a comment of style @samp{b}; 2 for a "
"comment of style @samp{c}; and @code{syntax-table} for a comment that should "
"be ended by a generic comment delimiter character."
msgstr ""

#. type: enumerate
#: original_texis/syntax.texi:870
msgid ""
"The string or comment start position.  While inside a comment, this is the "
"position where the comment began; while inside a string, this is the "
"position where the string began.  When outside of strings and comments, this "
"element is @code{nil}."
msgstr ""

#. type: enumerate
#: original_texis/syntax.texi:874
msgid ""
"The list of the positions of the currently open parentheses, starting with "
"the outermost."
msgstr ""

#. type: enumerate
#: original_texis/syntax.texi:881
msgid ""
"When the last buffer position scanned was the (potential) first character of "
"a two character construct (comment delimiter or escaped/char-quoted "
"character pair), the @var{syntax-code} (@pxref{Syntax Table Internals}) of "
"that position.  Otherwise @code{nil}."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:886
msgid ""
"Elements 1, 2, and 6 are ignored in a state which you pass as an argument to "
"@code{parse-partial-sexp} to continue parsing.  Elements 9 and 10 are mainly "
"used internally by the parser code."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:889
msgid ""
"Some additional useful information is available from a parser state using "
"these functions:"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:890
#, no-wrap
msgid "syntax-ppss-toplevel-pos state"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:895
msgid ""
"This function extracts, from parser state @var{state}, the last position "
"scanned in the parse which was at top level in grammatical structure.  ``At "
"top level'' means outside of any parentheses, comments, or strings."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:898
msgid ""
"The value is @code{nil} if @var{state} represents a parse which has arrived "
"at a top level position."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:900
#, no-wrap
msgid "syntax-ppss-context state"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:904
msgid ""
"Return @code{string} if the end position of the scan returning @var{state} "
"is in a string, and @code{comment} if it's in a comment.  Otherwise return "
"@code{nil}."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:912
msgid ""
"The most basic way to use the expression parser is to tell it to start at a "
"given position with a certain state, and parse up to a specified end "
"position."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:913
#, no-wrap
msgid ""
"parse-partial-sexp start limit &optional target-depth stop-before state "
"stop-comment"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:918
msgid ""
"This function parses a sexp in the current buffer starting at @var{start}, "
"not scanning past @var{limit}.  It stops at position @var{limit} or when "
"certain criteria described below are met, and sets point to the location "
"where parsing stops.  It returns a parser state"
msgstr ""

#. type: ifinfo
#: original_texis/syntax.texi:920
msgid "(@pxref{Parser State})"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:922
msgid "describing the status of the parse at the point where it stops."
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:923
#, no-wrap
msgid "parenthesis depth"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:927
msgid ""
"If the third argument @var{target-depth} is non-@code{nil}, parsing stops if "
"the depth in parentheses becomes equal to @var{target-depth}.  The depth "
"starts at 0, or at whatever is given in @var{state}."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:935
msgid ""
"If the fourth argument @var{stop-before} is non-@code{nil}, parsing stops "
"when it comes to any character that starts a sexp.  If @var{stop-comment} is "
"non-@code{nil}, parsing stops after the start of an unnested comment.  If "
"@var{stop-comment} is the symbol @code{syntax-table}, parsing stops after "
"the start of an unnested comment or a string, or after the end of an "
"unnested comment or a string, whichever comes first."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:943
msgid ""
"If @var{state} is @code{nil}, @var{start} is assumed to be at the top level "
"of parenthesis structure, such as the beginning of a function definition.  "
"Alternatively, you might wish to resume parsing in the middle of the "
"structure.  To do this, you must provide a @var{state} argument that "
"describes the initial status of parsing.  The value returned by a previous "
"call to @code{parse-partial-sexp} will do nicely."
msgstr ""

#. type: subsection
#: original_texis/syntax.texi:946
#, no-wrap
msgid "Parameters to Control Parsing"
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:947
#, no-wrap
msgid "parsing, control parameters"
msgstr ""

#. type: defvar
#: original_texis/syntax.texi:949
#, no-wrap
msgid "multibyte-syntax-as-symbol"
msgstr ""

#. type: defvar
#: original_texis/syntax.texi:954
msgid ""
"If this variable is non-@code{nil}, @code{scan-sexps} treats all "
"non-@acronym{ASCII} characters as symbol constituents regardless of what the "
"syntax table says about them.  (However, @code{syntax-table }text properties "
"can still override the syntax.)"
msgstr ""

#. type: defopt
#: original_texis/syntax.texi:956
#, no-wrap
msgid "parse-sexp-ignore-comments"
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:957
#, no-wrap
msgid "skipping comments"
msgstr ""

#. type: defopt
#: original_texis/syntax.texi:961
msgid ""
"If the value is non-@code{nil}, then comments are treated as whitespace by "
"the functions in this section and by @code{forward-sexp}, @code{scan-lists} "
"and @code{scan-sexps}."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:965
msgid ""
"The behavior of @code{parse-partial-sexp} is also affected by "
"@code{parse-sexp-lookup-properties} (@pxref{Syntax Properties})."
msgstr ""

#. type: defvar
#: original_texis/syntax.texi:966
#, no-wrap
msgid "comment-end-can-be-escaped"
msgstr ""

#. type: defvar
#: original_texis/syntax.texi:972
msgid ""
"If this buffer local variable is non-@code{nil}, a single character which "
"usually terminates a comment doesn't do so when that character is escaped.  "
"This is used in C and C++ Modes, where line comments starting with @samp{//} "
"can be continued onto the next line by escaping the newline with @samp{\\}."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:976
msgid ""
"You can use @code{forward-comment} to move forward or backward over one "
"comment or several comments."
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:979
#, no-wrap
msgid "syntax table internals"
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:987
msgid ""
"Syntax tables are implemented as char-tables (@pxref{Char-Tables}), but most "
"Lisp programs don't work directly with their elements.  Syntax tables do not "
"store syntax data as syntax descriptors (@pxref{Syntax Descriptors}); they "
"use an internal format, which is documented in this section.  This internal "
"format can also be assigned as syntax properties (@pxref{Syntax "
"Properties})."
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:988
#, no-wrap
msgid "syntax code"
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:989
#, no-wrap
msgid "raw syntax descriptor"
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:996
msgid ""
"Each entry in a syntax table is a @dfn{raw syntax descriptor}: a cons cell "
"of the form @code{(@var{syntax-code} . @var{matching-char})}.  "
"@var{syntax-code} is an integer which encodes the syntax class and syntax "
"flags, according to the table below.  @var{matching-char}, if "
"non-@code{nil}, specifies a matching character (similar to the second "
"character in a syntax descriptor)."
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:997
#, no-wrap
msgid "syntax tables (accessing elements of)"
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:1000
msgid ""
"Use @code{aref} (@pxref{Array Functions}) to get the raw syntax descriptor "
"of a character, e.g. @w{@code{(aref (syntax-table) ch)}}."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:1003
msgid "Here are the syntax codes corresponding to the various syntax classes:"
msgstr ""

#. type: i{#1}
#: original_texis/syntax.texi:1007
msgid "Code"
msgstr ""

#. type: i{#1}
#: original_texis/syntax.texi:1007
msgid "Class"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1007
msgid "@i{Class}"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1009
msgid "0"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1009
msgid "whitespace"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1009
msgid "8"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1009
msgid "paired delimiter"
msgstr ""

#. type: samp{#1}
#: original_texis/syntax.texi:1011 original_texis/syntax.texi:1038
msgid "1"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1011
msgid "punctuation"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1011
msgid "9"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1011
msgid "escape"
msgstr ""

#. type: samp{#1}
#: original_texis/syntax.texi:1013 original_texis/syntax.texi:1040
msgid "2"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1013
msgid "word"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1013
msgid "10"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1013
msgid "character quote"
msgstr ""

#. type: samp{#1}
#: original_texis/syntax.texi:1015 original_texis/syntax.texi:1042
msgid "3"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1015
msgid "symbol"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1015
msgid "11"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1015
msgid "comment-start"
msgstr ""

#. type: samp{#1}
#: original_texis/syntax.texi:1017 original_texis/syntax.texi:1044
msgid "4"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1017
msgid "open parenthesis"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1017
msgid "12"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1017
msgid "comment-end"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1019
msgid "5"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1019
msgid "close parenthesis"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1019
msgid "13"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1019
msgid "inherit"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1021
msgid "6"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1021
msgid "expression prefix"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1021
msgid "14"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1021
msgid "generic comment"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1023
msgid "7"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1023
msgid "string quote"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1023
msgid "15"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1023
msgid "generic string"
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:1028
msgid ""
"For example, in the standard syntax table, the entry for @samp{(} is "
"@code{(4 . 41)}.  41 is the character code for @samp{)}."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:1032
msgid ""
"Syntax flags are encoded in higher order bits, starting 16 bits from the "
"least significant bit.  This table gives the power of two which corresponds "
"to each syntax flag."
msgstr ""

#. type: i{#1}
#: original_texis/syntax.texi:1036
msgid "Prefix"
msgstr ""

#. type: i{#1}
#: original_texis/syntax.texi:1036
msgid "Flag"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1036
msgid "@i{Flag}"
msgstr ""

#. type: code{#1}
#: original_texis/syntax.texi:1038
msgid "(ash 1 16)"
msgstr ""

#. type: samp{#1}
#: original_texis/syntax.texi:1038
msgid "p"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1038
msgid "@code{(ash 1 20)}"
msgstr ""

#. type: code{#1}
#: original_texis/syntax.texi:1040
msgid "(ash 1 17)"
msgstr ""

#. type: samp{#1}
#: original_texis/syntax.texi:1040
msgid "b"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1040
msgid "@code{(ash 1 21)}"
msgstr ""

#. type: code{#1}
#: original_texis/syntax.texi:1042
msgid "(ash 1 18)"
msgstr ""

#. type: samp{#1}
#: original_texis/syntax.texi:1042
msgid "n"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1042
msgid "@code{(ash 1 22)}"
msgstr ""

#. type: code{#1}
#: original_texis/syntax.texi:1044
msgid "(ash 1 19)"
msgstr ""

#. type: samp{#1}
#: original_texis/syntax.texi:1044
msgid "c"
msgstr ""

#. type: multitable
#: original_texis/syntax.texi:1044
msgid "@code{(ash 1 23)}"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1046
#, no-wrap
msgid "string-to-syntax desc"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1049
msgid ""
"Given a syntax descriptor @var{desc} (a string), this function returns the "
"corresponding raw syntax descriptor."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1051
#, no-wrap
msgid "syntax-class-to-char syntax"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1054
msgid ""
"Given a raw syntax descriptor @var{syntax} (an integer), this function "
"returns the corresponding syntax descriptor (a character)."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1056
#, no-wrap
msgid "syntax-after pos"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1062
msgid ""
"This function returns the raw syntax descriptor for the character in the "
"buffer after position @var{pos}, taking account of syntax properties as well "
"as the syntax table.  If @var{pos} is outside the buffer's accessible "
"portion (@pxref{Narrowing, accessible portion}), the return value is "
"@code{nil}."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1064
#, no-wrap
msgid "syntax-class syntax"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1069
msgid ""
"This function returns the syntax code for the raw syntax descriptor "
"@var{syntax}.  More precisely, it takes the raw syntax descriptor's "
"@var{syntax-code} component, masks off the high 16 bits which record the "
"syntax flags, and returns the resulting integer."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1072
msgid ""
"If @var{syntax} is @code{nil}, the return value is @code{nil}.  This is so "
"that the expression"
msgstr ""

#. type: example
#: original_texis/syntax.texi:1075
#, no-wrap
msgid "(syntax-class (syntax-after pos))\n"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1081
msgid ""
"evaluates to @code{nil} if @code{pos} is outside the buffer's accessible "
"portion, without throwing errors or returning an incorrect code."
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:1085
#, no-wrap
msgid "categories of characters"
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:1086
#, no-wrap
msgid "character categories"
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:1093
msgid ""
"@dfn{Categories} provide an alternate way of classifying characters "
"syntactically.  You can define several categories as needed, then "
"independently assign each character to one or more categories.  Unlike "
"syntax classes, categories are not mutually exclusive; it is normal for one "
"character to belong to several categories."
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:1094
#, no-wrap
msgid "category table"
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:1100
msgid ""
"Each buffer has a @dfn{category table} which records which categories are "
"defined and also which characters belong to each category.  Each category "
"table defines its own categories, but normally these are initialized by "
"copying from the standard categories table, so that the standard categories "
"are available in all modes."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:1104
msgid ""
"Each category has a name, which is an @acronym{ASCII} printing character in "
"the range @w{@samp{ }} to @samp{~}.  You specify the name of a category when "
"you define it with @code{define-category}."
msgstr ""

#. type: cindex
#: original_texis/syntax.texi:1105
#, no-wrap
msgid "category set"
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:1112
msgid ""
"The category table is actually a char-table (@pxref{Char-Tables}).  The "
"element of the category table at index @var{c} is a @dfn{category set}---a "
"bool-vector---that indicates which categories character @var{c} belongs to.  "
"In this category set, if the element at index @var{cat} is @code{t}, that "
"means category @var{cat} is a member of the set, and that character @var{c} "
"belongs to category @var{cat}."
msgstr ""

#. type: Plain text
#: original_texis/syntax.texi:1115
msgid ""
"For the next three functions, the optional argument @var{table} defaults to "
"the current buffer's category table."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1116
#, no-wrap
msgid "define-category char docstring &optional table"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1119
msgid ""
"This function defines a new category, with name @var{char} and documentation "
"@var{docstring}, for the category table @var{table}."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1126
msgid ""
"Here's an example of defining a new category for characters that have strong "
"right-to-left directionality (@pxref{Bidirectional Display})  and using it "
"in a special category table.  To obtain the information about the "
"directionality of characters, the example code uses the @samp{bidi-class} "
"Unicode property (@pxref{Character Properties, bidi-class})."
msgstr ""

#. type: example
#: original_texis/syntax.texi:1146
#, no-wrap
msgid ""
"(defvar special-category-table-for-bidi\n"
"  ;;     Make an empty category-table.\n"
"  (let ((category-table (make-category-table))\n"
"        ;; Create a char-table which gives the 'bidi-class' Unicode\n"
"        ;; property for each character.\n"
"        (uniprop-table\n"
"         (unicode-property-table-internal 'bidi-class)))\n"
"    (define-category ?R \"Characters of bidi-class R, AL, or RLO\"\n"
"                     category-table)\n"
"    ;; Modify the category entry of each character whose\n"
"    ;; 'bidi-class' Unicode property is R, AL, or RLO --\n"
"    ;; these have a right-to-left directionality.\n"
"    (map-char-table\n"
"     (lambda (key val)\n"
"       (if (memq val '(R AL RLO))\n"
"           (modify-category-entry key ?R category-table)))\n"
"     uniprop-table)\n"
"    category-table))\n"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1149
#, no-wrap
msgid "category-docstring category &optional table"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1152
msgid ""
"This function returns the documentation string of category @var{category} in "
"category table @var{table}."
msgstr ""

#. type: example
#: original_texis/syntax.texi:1158
#, no-wrap
msgid ""
"(category-docstring ?a)\n"
"     @result{} \"ASCII\"\n"
"(category-docstring ?l)\n"
"     @result{} \"Latin\"\n"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1161
#, no-wrap
msgid "get-unused-category &optional table"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1165
msgid ""
"This function returns a category name (a character) which is not currently "
"defined in @var{table}.  If all possible categories are in use in "
"@var{table}, it returns @code{nil}."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1167
#, no-wrap
msgid "category-table"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1169
msgid "This function returns the current buffer's category table."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1171
#, no-wrap
msgid "category-table-p object"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1174
msgid ""
"This function returns @code{t} if @var{object} is a category table, "
"otherwise @code{nil}."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1176
#, no-wrap
msgid "standard-category-table"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1178
msgid "This function returns the standard category table."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1180
#, no-wrap
msgid "copy-category-table &optional table"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1185
msgid ""
"This function constructs a copy of @var{table} and returns it.  If "
"@var{table} is not supplied (or is @code{nil}), it returns a copy of the "
"standard category table.  Otherwise, an error is signaled if @var{table} is "
"not a category table."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1187
#, no-wrap
msgid "set-category-table table"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1190
msgid ""
"This function makes @var{table} the category table for the current buffer.  "
"It returns @var{table}."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1192
#, no-wrap
msgid "make-category-table"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1196
msgid ""
"This creates and returns an empty category table.  In an empty category "
"table, no categories have been allocated, and no characters belong to any "
"categories."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1198
#, no-wrap
msgid "make-category-set categories"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1204
msgid ""
"This function returns a new category set---a bool-vector---whose initial "
"contents are the categories listed in the string @var{categories}.  The "
"elements of @var{categories} should be category names; the new category set "
"has @code{t} for each of those categories, and @code{nil} for all other "
"categories."
msgstr ""

#. type: example
#: original_texis/syntax.texi:1208
#, no-wrap
msgid ""
"(make-category-set \"al\")\n"
"     @result{} #&128\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\2\\20\\0\\0\"\n"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1211
#, no-wrap
msgid "char-category-set char"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1217
msgid ""
"This function returns the category set for character @var{char} in the "
"current buffer's category table.  This is the bool-vector which records "
"which categories the character @var{char} belongs to.  The function "
"@code{char-category-set} does not allocate storage, because it returns the "
"same bool-vector that exists in the category table."
msgstr ""

#. type: example
#: original_texis/syntax.texi:1221
#, no-wrap
msgid ""
"(char-category-set ?a)\n"
"     @result{} #&128\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\2\\20\\0\\0\"\n"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1224
#, no-wrap
msgid "category-set-mnemonics category-set"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1228
msgid ""
"This function converts the category set @var{category-set} into a string "
"containing the characters that designate the categories that are members of "
"the set."
msgstr ""

#. type: example
#: original_texis/syntax.texi:1232
#, no-wrap
msgid ""
"(category-set-mnemonics (char-category-set ?a))\n"
"     @result{} \"al\"\n"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1235
#, no-wrap
msgid "modify-category-entry char category &optional table reset"
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1242
msgid ""
"This function modifies the category set of @var{char} in category table "
"@var{table} (which defaults to the current buffer's category table).  "
"@var{char} can be a character, or a cons cell of the form @code{(@var{min} "
". @var{max})}; in the latter case, the function modifies the category sets "
"of all characters in the range between @var{min} and @var{max}, inclusive."
msgstr ""

#. type: defun
#: original_texis/syntax.texi:1246
msgid ""
"Normally, it modifies a category set by adding @var{category} to it.  But if "
"@var{reset} is non-@code{nil}, then it deletes @var{category} instead."
msgstr ""

#. type: deffn
#: original_texis/syntax.texi:1248
#, no-wrap
msgid "Command describe-categories &optional buffer-or-name"
msgstr ""

#. type: deffn
#: original_texis/syntax.texi:1253
msgid ""
"This function describes the category specifications in the current category "
"table.  It inserts the descriptions in a buffer, and then displays that "
"buffer.  If @var{buffer-or-name} is non-@code{nil}, it describes the "
"category table of that buffer instead."
msgstr ""
