# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2024-10-06 07:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: original_texis/keymaps.texi:5 original_texis/keymaps.texi:6
#, no-wrap
msgid "Keymaps"
msgstr ""

#. type: var{#1}
#: original_texis/keymaps.texi:7 original_texis/keymaps.texi:1204
#, no-wrap
msgid "keymap"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:15
msgid ""
"The command bindings of input events are recorded in data structures called "
"@dfn{keymaps}.  Each entry in a keymap associates (or @dfn{binds}) an "
"individual event type, either to another keymap or to a command.  When an "
"event type is bound to a keymap, that keymap is used to look up the next "
"input event; this continues until a command is found.  The whole process is "
"called @dfn{key lookup}."
msgstr ""

#. type: section
#: original_texis/keymaps.texi:39 original_texis/keymaps.texi:41 original_texis/keymaps.texi:42
#, no-wrap
msgid "Key Sequences"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:39
msgid "Key sequences as Lisp objects."
msgstr ""

#. type: section
#: original_texis/keymaps.texi:39 original_texis/keymaps.texi:107 original_texis/keymaps.texi:108
#, no-wrap
msgid "Keymap Basics"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:39
msgid "Basic concepts of keymaps."
msgstr ""

#. type: section
#: original_texis/keymaps.texi:39 original_texis/keymaps.texi:159 original_texis/keymaps.texi:160
#, no-wrap
msgid "Format of Keymaps"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:39
msgid "What a keymap looks like as a Lisp object."
msgstr ""

#. type: section
#: original_texis/keymaps.texi:39 original_texis/keymaps.texi:311 original_texis/keymaps.texi:312
#, no-wrap
msgid "Creating Keymaps"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:39
msgid "Functions to create and copy keymaps."
msgstr ""

#. type: section
#: original_texis/keymaps.texi:39 original_texis/keymaps.texi:569 original_texis/keymaps.texi:570
#, no-wrap
msgid "Inheritance and Keymaps"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:39
msgid "How one keymap can inherit the bindings of another keymap."
msgstr ""

#. type: section
#: original_texis/keymaps.texi:39 original_texis/keymaps.texi:656 original_texis/keymaps.texi:657
#, no-wrap
msgid "Prefix Keys"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:39
msgid "Defining a key with a keymap as its definition."
msgstr ""

#. type: section
#: original_texis/keymaps.texi:39 original_texis/keymaps.texi:814 original_texis/keymaps.texi:815
#, no-wrap
msgid "Active Keymaps"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:39
msgid "How Emacs searches the active keymaps for a key binding."
msgstr ""

#. type: node
#: original_texis/keymaps.texi:39 original_texis/keymaps.texi:892
#, no-wrap
msgid "Searching Keymaps"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:39
msgid "A pseudo-Lisp summary of searching active maps."
msgstr ""

#. type: node
#: original_texis/keymaps.texi:39 original_texis/keymaps.texi:943
#, no-wrap
msgid "Controlling Active Maps"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:39
msgid ""
"Each buffer has a local keymap to override the standard (global) bindings.  "
"A minor mode can also override them."
msgstr ""

#. type: section
#: original_texis/keymaps.texi:39 original_texis/keymaps.texi:1151 original_texis/keymaps.texi:1152
#, no-wrap
msgid "Key Lookup"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:39
msgid "Finding a key's binding in one keymap."
msgstr ""

#. type: section
#: original_texis/keymaps.texi:39 original_texis/keymaps.texi:1263 original_texis/keymaps.texi:1264
#, no-wrap
msgid "Functions for Key Lookup"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:39
msgid "How to request key lookup."
msgstr ""

#. type: section
#: original_texis/keymaps.texi:39 original_texis/keymaps.texi:1426 original_texis/keymaps.texi:1427
#, no-wrap
msgid "Changing Key Bindings"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:39
msgid "Redefining a key in a keymap."
msgstr ""

#. type: section
#: original_texis/keymaps.texi:39 original_texis/keymaps.texi:1700 original_texis/keymaps.texi:1701
#, no-wrap
msgid "Low-Level Key Binding"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:39
msgid "Legacy key syntax description."
msgstr ""

#. type: section
#: original_texis/keymaps.texi:39 original_texis/keymaps.texi:1868 original_texis/keymaps.texi:1869
#, no-wrap
msgid "Remapping Commands"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:39
msgid "A keymap can translate one command to another."
msgstr ""

#. type: node
#: original_texis/keymaps.texi:39 original_texis/keymaps.texi:1930
#, no-wrap
msgid "Translation Keymaps"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:39
msgid "Keymaps for translating sequences of events."
msgstr ""

#. type: node
#: original_texis/keymaps.texi:39 original_texis/keymaps.texi:2082
#, no-wrap
msgid "Key Binding Commands"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:39
msgid "Interactive interfaces for redefining keys."
msgstr ""

#. type: section
#: original_texis/keymaps.texi:39 original_texis/keymaps.texi:2185 original_texis/keymaps.texi:2186
#, no-wrap
msgid "Scanning Keymaps"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:39
msgid "Looking through all keymaps, for printing help."
msgstr ""

#. type: section
#: original_texis/keymaps.texi:39 original_texis/keymaps.texi:2364 original_texis/keymaps.texi:2365
#, no-wrap
msgid "Menu Keymaps"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:39
msgid "Defining a menu as a keymap."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:43
#, no-wrap
msgid "key"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:44
#, no-wrap
msgid "keystroke"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:45
#, no-wrap
msgid "key sequence"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:54
msgid ""
"A @dfn{key sequence}, or @dfn{key} for short, is a sequence of one or more "
"input events that form a unit.  Input events include characters, function "
"keys, mouse actions, or system events external to Emacs, such as "
"@code{iconify-frame} (@pxref{Input Events}).  The Emacs Lisp representation "
"for a key sequence is a string or vector.  Unless otherwise stated, any "
"Emacs Lisp function that accepts a key sequence as an argument can handle "
"both representations."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:66
msgid ""
"In the string representation, alphanumeric characters ordinarily stand for "
"themselves; for example, @code{\"a\"} represents @kbd{a} and @code{\"2\"} "
"represents @kbd{2}.  Control character events are prefixed by the substring "
"@code{\"\\C-\"}, and meta characters by @code{\"\\M-\"}; for example, "
"@code{\"\\C-x\"} represents the key @kbd{C-x}.  In addition, the @key{TAB}, "
"@key{RET}, @key{ESC}, and @key{DEL} events are represented by "
"@code{\"\\t\"}, @code{\"\\r\"}, @code{\"\\e\"}, and @code{\"\\d\"} "
"respectively.  The string representation of a complete key sequence is the "
"concatenation of the string representations of the constituent events; thus, "
"@code{\"\\C-xl\"} represents the key sequence @kbd{C-x l}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:71
msgid ""
"Key sequences containing function keys, mouse button events, system events, "
"or non-@acronym{ASCII} characters such as @kbd{C-=} or @kbd{H-a} cannot be "
"represented as strings; they have to be represented as vectors."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:75
msgid ""
"In the vector representation, each element of the vector represents an input "
"event, in its Lisp form.  @xref{Input Events}.  For example, the vector "
"@code{[?\\C-x ?l]} represents the key sequence @kbd{C-x l}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:78
msgid ""
"For examples of key sequences written in string and vector representations, "
"@ref{Init Rebinding,,, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:79
#, no-wrap
msgid "kbd keyseq-text"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:87
msgid ""
"This function converts the text @var{keyseq-text} (a string constant)  into "
"a key sequence (a string or vector constant).  The contents of "
"@var{keyseq-text} should use the same syntax as in the buffer invoked by the "
"@kbd{C-x C-k @key{RET}} (@code{kmacro-edit-macro}) command; in particular, "
"you must surround function key names with @samp{<@dots{}>}.  @xref{Edit "
"Keyboard Macro,,, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: example
#: original_texis/keymaps.texi:97
#, no-wrap
msgid ""
"(kbd \"C-x\") @result{} \"\\C-x\"\n"
"(kbd \"C-x C-f\") @result{} \"\\C-x\\C-f\"\n"
"(kbd \"C-x 4 C-f\") @result{} \"\\C-x4\\C-f\"\n"
"(kbd \"X\") @result{} \"X\"\n"
"(kbd \"RET\") @result{} \"^M\"\n"
"(kbd \"C-c SPC\") @result{} \"\\C-c@ \"\n"
"(kbd \"<f1> SPC\") @result{} [f1 32]\n"
"(kbd \"C-M-<down>\") @result{} [C-M-down]\n"
msgstr ""

#. type: findex
#: original_texis/keymaps.texi:99
#, no-wrap
msgid "key-valid-p"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:104
msgid ""
"The @code{kbd} function is very permissive, and will try to return something "
"sensible even if the syntax used isn't completely conforming.  To check "
"whether the syntax is actually valid, use the @code{key-valid-p} function."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:109
#, no-wrap
msgid "key binding"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:110
#, no-wrap
msgid "binding of a key"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:111
#, no-wrap
msgid "complete key"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:112
#, no-wrap
msgid "undefined key"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:116
msgid ""
"A keymap is a Lisp data structure that specifies @dfn{key bindings} for "
"various key sequences."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:124
msgid ""
"A single keymap directly specifies definitions for individual events.  When "
"a key sequence consists of a single event, its binding in a keymap is the "
"keymap's definition for that event.  The binding of a longer key sequence is "
"found by an iterative process: first find the definition of the first event "
"(which must itself be a keymap); then find the second event's definition in "
"that keymap, and so on until all the events in the key sequence have been "
"processed."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:133
msgid ""
"If the binding of a key sequence is a keymap, we call the key sequence a "
"@dfn{prefix key}.  Otherwise, we call it a @dfn{complete key} (because no "
"more events can be added to it).  If the binding is @code{nil}, we call the "
"key @dfn{undefined}.  Examples of prefix keys are @kbd{C-c}, @kbd{C-x}, and "
"@kbd{C-x 4}.  Examples of defined complete keys are @kbd{X}, @key{RET}, and "
"@kbd{C-x 4 C-f}.  Examples of undefined complete keys are @kbd{C-x C-g}, and "
"@kbd{C-c 3}.  @xref{Prefix Keys}, for more details."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:142
msgid ""
"The rule for finding the binding of a key sequence assumes that the "
"intermediate bindings (found for the events before the last) are all "
"keymaps; if this is not so, the sequence of events does not form a unit---it "
"is not really one key sequence.  In other words, removing one or more events "
"from the end of any valid key sequence must always yield a prefix key.  For "
"example, @kbd{C-f C-n} is not a key sequence; @kbd{C-f} is not a prefix key, "
"so a longer sequence starting with @kbd{C-f} cannot be a key sequence."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:148
msgid ""
"The set of possible multi-event key sequences depends on the bindings for "
"prefix keys; therefore, it can be different for different keymaps, and can "
"change when bindings are changed.  However, a one-event sequence is always a "
"key sequence, because it does not depend on any prefix keys for its "
"well-formedness."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:158
msgid ""
"At any time, several primary keymaps are @dfn{active}---that is, in use for "
"finding key bindings.  These are the @dfn{global map}, which is shared by "
"all buffers; the @dfn{local keymap}, which is usually associated with a "
"specific major mode; and zero or more @dfn{minor mode keymaps}, which belong "
"to currently enabled minor modes.  (Not all minor modes have keymaps.)  The "
"local keymap bindings shadow (i.e., take precedence over) the corresponding "
"global bindings.  The minor mode keymaps shadow both local and global "
"keymaps.  @xref{Active Keymaps}, for details."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:161
#, no-wrap
msgid "format of keymaps"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:162
#, no-wrap
msgid "keymap format"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:163
#, no-wrap
msgid "full keymap"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:164
#, no-wrap
msgid "sparse keymap"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:171
msgid ""
"Each keymap is a list whose @sc{car} is the symbol @code{keymap}.  The "
"remaining elements of the list define the key bindings of the keymap.  A "
"symbol whose function definition is a keymap is also a keymap.  Use the "
"function @code{keymapp} (see below) to test whether an object is a keymap."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:174
msgid ""
"Several kinds of elements may appear in a keymap, after the symbol "
"@code{keymap} that begins it:"
msgstr ""

#. type: item
#: original_texis/keymaps.texi:176
#, no-wrap
msgid "(@var{type} .@: @var{binding})"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:181
msgid ""
"This specifies one binding, for events of type @var{type}.  Each ordinary "
"binding applies to events of a particular @dfn{event type}, which is always "
"a character or a symbol.  @xref{Classifying Events}.  In this kind of "
"binding, @var{binding} is a command."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:182
#, no-wrap
msgid "(@var{type} @var{item-name} .@: @var{binding})"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:185
msgid ""
"This specifies a binding which is also a simple menu item that displays as "
"@var{item-name} in the menu.  @xref{Simple Menu Items}."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:186
#, no-wrap
msgid "(@var{type} @var{item-name} @var{help-string} .@: @var{binding})"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:188
msgid "This is a simple menu item with help string @var{help-string}."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:189
#, no-wrap
msgid "(@var{type} menu-item .@: @var{details})"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:192
msgid ""
"This specifies a binding which is also an extended menu item.  This allows "
"use of other features.  @xref{Extended Menu Items}."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:193
#, no-wrap
msgid "(t .@: @var{binding})"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:194
#, no-wrap
msgid "default key binding"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:201
msgid ""
"This specifies a @dfn{default key binding}; any event not bound by other "
"elements of the keymap is given @var{binding} as its binding.  Default "
"bindings allow a keymap to bind all possible event types without having to "
"enumerate all of them.  A keymap that has a default binding completely masks "
"any lower-precedence keymap, except for events explicitly bound to "
"@code{nil} (see below)."
msgstr ""

#. type: var{#1}
#: original_texis/keymaps.texi:202
#, no-wrap
msgid "char-table"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:209
msgid ""
"If an element of a keymap is a char-table, it counts as holding bindings for "
"all character events with no modifier bits (@pxref{modifier bits}): the "
"element whose index is @var{c} is the binding for the character @var{c}.  "
"This is a compact way to record lots of bindings.  A keymap with such a "
"char-table is called a @dfn{full keymap}.  Other keymaps are called "
"@dfn{sparse keymaps}."
msgstr ""

#. type: var{#1}
#: original_texis/keymaps.texi:210
#, no-wrap
msgid "vector"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:218
msgid ""
"This kind of element is similar to a char-table: the element whose index is "
"@var{c} is the binding for the character @var{c}.  Since the range of "
"characters that can be bound this way is limited by the vector size, and "
"vector creation allocates space for all character codes from 0 up, this "
"format should not be used except for creating menu keymaps (@pxref{Menu "
"Keymaps}), where the bindings themselves don't matter."
msgstr ""

#. type: var{#1}
#: original_texis/keymaps.texi:219
#, no-wrap
msgid "string"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:220
#, no-wrap
msgid "keymap prompt string"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:221
#, no-wrap
msgid "overall prompt string"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:222
#, no-wrap
msgid "prompt string of keymap"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:227
msgid ""
"Aside from elements that specify bindings for keys, a keymap can also have a "
"string as an element.  This is called the @dfn{overall prompt string} and "
"makes it possible to use the keymap as a menu.  @xref{Defining Menus}."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:228
#, no-wrap
msgid "(keymap @dots{})"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:232
msgid ""
"If an element of a keymap is itself a keymap, it counts as if this inner "
"keymap were inlined in the outer keymap.  This is used for "
"multiple-inheritance, such as in @code{make-composed-keymap}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:240
msgid ""
"When the binding is @code{nil}, it doesn't constitute a definition but it "
"does take precedence over a default binding or a binding in the parent "
"keymap.  On the other hand, a binding of @code{nil} does @emph{not} override "
"lower-precedence keymaps; thus, if the local map gives a binding of "
"@code{nil}, Emacs uses the binding from the global map."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:241
#, no-wrap
msgid "meta characters lookup"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:249
msgid ""
"Keymaps do not directly record bindings for the meta characters.  Instead, "
"meta characters are regarded for purposes of key lookup as sequences of two "
"characters, the first of which is @key{ESC} (or whatever is currently the "
"value of @code{meta-prefix-char}).  Thus, the key @kbd{M-a} is internally "
"represented as @kbd{@key{ESC} a}, and its global binding is found at the "
"slot for @kbd{a} in @code{esc-map} (@pxref{Prefix Keys})."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:253
msgid ""
"This conversion applies only to characters, not to function keys or other "
"input events; thus, @kbd{M-@key{end}} has nothing to do with @kbd{@key{ESC} "
"@key{end}}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:258
msgid ""
"Here as an example is the local keymap for Lisp mode, a sparse keymap.  It "
"defines bindings for @key{DEL}, @kbd{C-c C-z}, @kbd{C-M-q}, and @kbd{C-M-x} "
"(the actual value also contains a menu binding, which is omitted here for "
"the sake of brevity)."
msgstr ""

#. type: group
#: original_texis/keymaps.texi:263
#, no-wrap
msgid ""
"lisp-mode-map\n"
"@result{}\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:269
#, no-wrap
msgid ""
"(keymap\n"
" (3 keymap\n"
"    ;; @kbd{C-c C-z}\n"
"    (26 . run-lisp))\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:274
#, no-wrap
msgid ""
" (27 keymap\n"
"     ;; @r{@kbd{C-M-x}, treated as @kbd{@key{ESC} C-x}}\n"
"     (24 . lisp-send-defun))\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:280
#, no-wrap
msgid ""
" ;; @r{This part is inherited from @code{lisp-mode-shared-map}.}\n"
" keymap\n"
" ;; @key{DEL}\n"
" (127 . backward-delete-char-untabify)\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:285
#, no-wrap
msgid ""
" (27 keymap\n"
"     ;; @r{@kbd{C-M-q}, treated as @kbd{@key{ESC} C-q}}\n"
"     (17 . indent-sexp)))\n"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:288
#, no-wrap
msgid "keymapp object"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:293
msgid ""
"This function returns @code{t} if @var{object} is a keymap, @code{nil} "
"otherwise.  More precisely, this function tests for a list whose @sc{car} is "
"@code{keymap}, or for a symbol whose function definition satisfies "
"@code{keymapp}."
msgstr ""

#. type: group
#: original_texis/keymaps.texi:298
#, no-wrap
msgid ""
"(keymapp '(keymap))\n"
"    @result{} t\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:303
#, no-wrap
msgid ""
"(fset 'foo '(keymap))\n"
"(keymapp 'foo)\n"
"    @result{} t\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:307
#, no-wrap
msgid ""
"(keymapp (current-global-map))\n"
"    @result{} t\n"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:313
#, no-wrap
msgid "creating keymaps"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:316
msgid "Here we describe the functions for creating keymaps."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:317
#, no-wrap
msgid "make-sparse-keymap &optional prompt"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:322
msgid ""
"This function creates and returns a new sparse keymap with no entries.  (A "
"sparse keymap is the kind of keymap you usually want.)  The new keymap does "
"not contain a char-table, unlike @code{make-keymap}, and does not bind any "
"events."
msgstr ""

#. type: group
#: original_texis/keymaps.texi:327
#, no-wrap
msgid ""
"(make-sparse-keymap)\n"
"    @result{} (keymap)\n"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:337
msgid ""
"If you specify @var{prompt}, that becomes the overall prompt string for the "
"keymap.  You should specify this only for menu keymaps (@pxref{Defining "
"Menus}).  A keymap with an overall prompt string will always present a mouse "
"menu or a keyboard menu if it is active for looking up the next input "
"event.  Don't specify an overall prompt string for the main map of a major "
"or minor mode, because that would cause the command loop to present a "
"keyboard menu every time."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:339
#, no-wrap
msgid "make-keymap &optional prompt"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:346
msgid ""
"This function creates and returns a new full keymap.  That keymap contains a "
"char-table (@pxref{Char-Tables}) with slots for all characters without "
"modifiers.  The new keymap initially binds all these characters to "
"@code{nil}, and does not bind any other kind of event.  The argument "
"@var{prompt} specifies a prompt string, as in @code{make-sparse-keymap}."
msgstr ""

#. type: group
#: original_texis/keymaps.texi:353
#, no-wrap
msgid ""
"(make-keymap)\n"
"    @result{} (keymap #^[nil nil keymap nil nil nil @dots{}])\n"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:358
msgid ""
"A full keymap is more efficient than a sparse keymap when it holds lots of "
"bindings; for just a few, the sparse keymap is better."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:360
#, no-wrap
msgid "define-keymap &key options... &rest pairs..."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:368
msgid ""
"You can create a keymap with the functions described above, and then use "
"@code{keymap-set} (@pxref{Changing Key Bindings}) to specify key bindings in "
"that map.  When writing modes, however, you frequently have to bind a large "
"number of keys at once, and using @code{keymap-set} on them all can be "
"tedious and error-prone.  Instead you can use @code{define-keymap}, which "
"creates a keymap and binds a number of keys.  Here's a very basic example:"
msgstr ""

#. type: lisp
#: original_texis/keymaps.texi:374
#, no-wrap
msgid ""
"(define-keymap\n"
"  \"n\" #'forward-line\n"
"  \"f\" #'previous-line\n"
"  \"C-c C-c\" #'quit-window)\n"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:379
msgid ""
"This function creates a new sparse keymap, defines the keystrokes in "
"@var{pairs}, and returns the new keymap.  It signals an error if there are "
"duplicate key bindings in @var{pairs}."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:385
msgid ""
"@var{pairs} is a list of alternating key bindings and key definitions, as "
"accepted by @code{keymap-set}.  In addition, the key can be the special "
"symbol @code{:menu}, in which case the definition should be a menu "
"definition as accepted by @code{easy-menu-define} (@pxref{Easy Menu}).  "
"Here's a brief example of this usage:"
msgstr ""

#. type: lisp
#: original_texis/keymaps.texi:392
#, no-wrap
msgid ""
"(define-keymap :full t\n"
"  \"g\" #'eww-reload\n"
"  :menu '(\"Eww\"\n"
"          [\"Exit\" quit-window t]\n"
"          [\"Reload\" eww-reload t]))\n"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:399
msgid ""
"A number of keywords can be used before the key/definition pairs to change "
"features of the new keymap.  If any of the feature keywords is missing from "
"the @code{define-keymap} call, the default value for that feature is "
"@code{nil}.  Here's a list of the available feature keywords:"
msgstr ""

#. type: item
#: original_texis/keymaps.texi:401
#, no-wrap
msgid ":full"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:406
msgid ""
"If non-@code{nil}, create a char-table keymap (as from @code{make-keymap}) "
"instead of a sparse keymap (as from @code{make-sparse-keymap} "
"(@pxref{Creating Keymaps}).  A sparse keymap is the default."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:407
#, no-wrap
msgid ":parent"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:410
msgid ""
"If non-@code{nil}, the value should be a keymap to use as the parent "
"(@pxref{Inheritance and Keymaps})."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:411
#, no-wrap
msgid ":keymap"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:414
msgid ""
"If non-@code{nil}, the value should be a keymap.  Instead of creating a new "
"keymap, the specified keymap is modified instead."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:415
#, no-wrap
msgid ":suppress"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:421
msgid ""
"If non-@code{nil}, the keymap will be suppressed with @code{suppress-keymap} "
"(@pxref{Changing Key Bindings}).  By default, digits and the minus sign are "
"exempt from suppressing, but if the value is @code{nodigits}, this "
"suppresses digits and minus-sign like it does with other characters."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:422
#, no-wrap
msgid ":name"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:426
msgid ""
"If non-@code{nil}, the value should be a string to use as the menu for the "
"keymap if you use it as a menu with @code{x-popup-menu} (@pxref{Pop-Up "
"Menus})."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:427
#, no-wrap
msgid ":prefix"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:431
msgid ""
"If non-@code{nil}, the value should be a symbol to be used as a prefix "
"command (@pxref{Prefix Keys}).  If this is the case, this symbol is returned "
"by @code{define-keymap} instead of the map itself."
msgstr ""

#. type: defmac
#: original_texis/keymaps.texi:435
#, no-wrap
msgid "defvar-keymap name &key options... &rest pairs..."
msgstr ""

#. type: defmac
#: original_texis/keymaps.texi:439
msgid ""
"By far, the most common thing to do with a keymap is to bind it to a "
"variable.  This is what virtually all modes do---a mode called @code{foo} "
"almost always has a variable called @code{foo-mode-map}."
msgstr ""

#. type: defmac
#: original_texis/keymaps.texi:444
msgid ""
"This macro defines @var{name} as a variable, passes @var{options} and "
"@var{pairs} to @code{define-keymap}, and uses the result as the default "
"value for the variable.  It signals an error if there are duplicate key "
"bindings in @var{pairs}."
msgstr ""

#. type: defmac
#: original_texis/keymaps.texi:448
msgid ""
"@var{options} is like the keywords in @code{define-keymap}, but there's an "
"additional @code{:doc} keyword that provides the doc string for the defined "
"variable."
msgstr ""

#. type: defmac
#: original_texis/keymaps.texi:450
msgid "Here's an example:"
msgstr ""

#. type: lisp
#: original_texis/keymaps.texi:457
#, no-wrap
msgid ""
"(defvar-keymap eww-textarea-map\n"
"  :parent text-mode-map\n"
"  :doc \"Keymap for the eww text area.\"\n"
"  \"RET\" #'forward-line\n"
"  \"TAB\" #'shr-next-link)\n"
msgstr ""

#. type: kindex
#: original_texis/keymaps.texi:459
#, no-wrap
msgid ":repeat"
msgstr ""

#. type: kindex
#: original_texis/keymaps.texi:460
#, no-wrap
msgid "repeat-mode"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:461
#, no-wrap
msgid "repeatable key bindings"
msgstr ""

#. type: defmac
#: original_texis/keymaps.texi:465
msgid ""
"Each command in the keymap can be marked as `repeatable', i.e. usable in "
"@code{repeat-mode}, by putting a @code{repeat-map} property on it, e.g."
msgstr ""

#. type: lisp
#: original_texis/keymaps.texi:468
#, no-wrap
msgid "(put 'undo 'repeat-map 'undo-repeat-map)\n"
msgstr ""

#. type: defmac
#: original_texis/keymaps.texi:472
msgid "where the value of the property is the map to be used by @code{repeat-mode}."
msgstr ""

#. type: defmac
#: original_texis/keymaps.texi:477
msgid ""
"To avoid repetitive invocations of @code{put}, @code{defvar-keymap} also has "
"a @code{:repeat} keyword, which can be used to specify which commands in the "
"keymap are usable by @code{repeat-mode}.  The following values are "
"available:"
msgstr ""

#. type: item
#: original_texis/keymaps.texi:479
#, no-wrap
msgid "t"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:482
msgid ""
"This means all the commands in the keymap are repeatable, and is the most "
"common usage."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:483
#, no-wrap
msgid ""
"(:enter (commands ...) :exit (commands ...) :hints ((command . \"hint\") "
"...))"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:487
msgid ""
"This specifies that the commands in the @code{:enter} list enter "
"@code{repeat-mode}, and the commands in the @code{:exit} list exit repeat "
"mode."
msgstr ""

#. type: table
#: original_texis/keymaps.texi:492
msgid ""
"If the @code{:enter} list is empty, then all commands in the map enter "
"@code{repeat-mode}.  Specifying one or more commands in this list is useful "
"if there is a command which doesn't exist in the map being defined, but "
"which should have the @code{repeat-map} property."
msgstr ""

#. type: table
#: original_texis/keymaps.texi:497
msgid ""
"If the @code{:exit} list is empty then no commands in the map exit "
"@code{repeat-mode}.  Specifying one or more commands in this list is useful "
"if the keymap being defined contains a command that should not have the "
"@code{repeat-map} property."
msgstr ""

#. type: table
#: original_texis/keymaps.texi:501
msgid ""
"The @code{:hints} list can contain cons pairs where the @sc{car} is a "
"command and the @sc{cdr} is a string that is displayed alongside of the "
"repeatable key in the echo area."
msgstr ""

#. type: defmac
#: original_texis/keymaps.texi:505
msgid ""
"In order to make e.g.@: @kbd{u} repeat the @code{undo} command, the "
"following two stanzas are equivalent:"
msgstr ""

#. type: lisp
#: original_texis/keymaps.texi:510
#, no-wrap
msgid ""
"(defvar-keymap undo-repeat-map\n"
"  \"u\" #'undo)\n"
"(put 'undo 'repeat-map 'undo-repeat-map)\n"
msgstr ""

#. type: defmac
#: original_texis/keymaps.texi:513
msgid "and"
msgstr ""

#. type: lisp
#: original_texis/keymaps.texi:518
#, no-wrap
msgid ""
"(defvar-keymap undo-repeat-map\n"
"  :repeat t\n"
"  \"u\" #'undo)\n"
msgstr ""

#. type: defmac
#: original_texis/keymaps.texi:522
msgid ""
"The latter is preferred when there are many commands in the map, all of "
"which should be repeatable."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:524
#, no-wrap
msgid "copy-keymap keymap"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:529
msgid ""
"This function returns a copy of @var{keymap}.  This is almost never needed.  "
"If you want a keymap that's like another yet with a few changes, you should "
"use map inheritance rather than copying.  I.e., something like:"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:536
#, no-wrap
msgid ""
"(let ((map (make-sparse-keymap)))\n"
"  (set-keymap-parent map <theirmap>)\n"
"  (keymap-set map ...)\n"
"  ...)\n"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:544
msgid ""
"When performing @code{copy-keymap}, any keymaps that appear directly as "
"bindings in @var{keymap} are also copied recursively, and so on to any "
"number of levels.  However, recursive copying does not take place when the "
"definition of a character is a symbol whose function definition is a keymap; "
"the same symbol appears in the new copy."
msgstr ""

#. type: group
#: original_texis/keymaps.texi:549
#, no-wrap
msgid ""
"(setq map (copy-keymap (current-local-map)))\n"
"@result{} (keymap\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:556
#, no-wrap
msgid ""
"     ;; @r{(This implements meta characters.)}\n"
"     (27 keymap\n"
"         (83 . center-paragraph)\n"
"         (115 . center-line))\n"
"     (9 . tab-to-tab-stop))\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:561
#, no-wrap
msgid ""
"(eq map (current-local-map))\n"
"    @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:565
#, no-wrap
msgid ""
"(equal map (current-local-map))\n"
"    @result{} t\n"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:571
#, no-wrap
msgid "keymap inheritance"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:572
#, no-wrap
msgid "inheritance, keymap"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:576
msgid ""
"A keymap can inherit the bindings of another keymap, which we call the "
"@dfn{parent keymap}.  Such a keymap looks like this:"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:579
#, no-wrap
msgid "(keymap @var{elements}@dots{} . @var{parent-keymap})\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:585
msgid ""
"The effect is that this keymap inherits all the bindings of "
"@var{parent-keymap}, whatever they may be at the time a key is looked up, "
"but can add to them or override them with @var{elements}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:593
msgid ""
"If you change the bindings in @var{parent-keymap} using @code{keymap-set} or "
"other key-binding functions, these changed bindings are visible in the "
"inheriting keymap, unless shadowed by the bindings made by @var{elements}.  "
"The converse is not true: if you use @code{keymap-set} to change bindings in "
"the inheriting keymap, these changes are recorded in @var{elements}, but "
"have no effect on @var{parent-keymap}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:598
msgid ""
"The proper way to construct a keymap with a parent is to use "
"@code{set-keymap-parent}; if you have code that directly constructs a keymap "
"with a parent, please convert the program to use @code{set-keymap-parent} "
"instead."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:599
#, no-wrap
msgid "keymap-parent keymap"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:602
msgid ""
"This returns the parent keymap of @var{keymap}.  If @var{keymap} has no "
"parent, @code{keymap-parent} returns @code{nil}."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:604
#, no-wrap
msgid "set-keymap-parent keymap parent"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:608
msgid ""
"This sets the parent keymap of @var{keymap} to @var{parent}, and returns "
"@var{parent}.  If @var{parent} is @code{nil}, this function gives "
"@var{keymap} no parent at all."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:612
msgid ""
"If @var{keymap} has submaps (bindings for prefix keys), they too receive new "
"parent keymaps that reflect what @var{parent} specifies for those prefix "
"keys."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:616
msgid ""
"Here is an example showing how to make a keymap that inherits from "
"@code{text-mode-map}:"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:621
#, no-wrap
msgid ""
"(let ((map (make-sparse-keymap)))\n"
"  (set-keymap-parent map text-mode-map)\n"
"  map)\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:628
msgid ""
"A non-sparse keymap can have a parent too, but this is not very useful.  A "
"non-sparse keymap always specifies something as the binding for every "
"numeric character code without modifier bits, even if it is @code{nil}, so "
"these character's bindings are never inherited from the parent keymap."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:629
#, no-wrap
msgid "keymap inheritance from multiple maps"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:632
msgid ""
"Sometimes you want to make a keymap that inherits from more than one map.  "
"You can use the function @code{make-composed-keymap} for this."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:633
#, no-wrap
msgid "make-composed-keymap maps &optional parent"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:642
msgid ""
"This function returns a new keymap composed of the existing keymap(s)  "
"@var{maps}, and optionally inheriting from a parent keymap @var{parent}.  "
"@var{maps} can be a single keymap or a list of more than one.  When looking "
"up a key in the resulting new map, Emacs searches in each of the @var{maps} "
"in turn, and then in @var{parent}, stopping at the first match.  A "
"@code{nil} binding in any one of @var{maps} overrides any binding in "
"@var{parent}, but it does not override any non-@code{nil} binding in any "
"other of the @var{maps}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:647
msgid ""
"@code{help-mode-map}, such that it inherits from both "
"@code{button-buffer-map} and @code{special-mode-map}:"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:653
#, no-wrap
msgid ""
"(defvar-keymap help-mode-map\n"
"  :parent (make-composed-keymap button-buffer-map\n"
"                                special-mode-map)\n"
"  ...)\n"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:658
#, no-wrap
msgid "prefix key"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:665
msgid ""
"A @dfn{prefix key} is a key sequence whose binding is a keymap.  The keymap "
"defines what to do with key sequences that extend the prefix key.  For "
"example, @kbd{C-x} is a prefix key, and it uses a keymap that is also stored "
"in the variable @code{ctl-x-map}.  This keymap defines bindings for key "
"sequences starting with @kbd{C-x}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:668
msgid ""
"Some of the standard Emacs prefix keys use keymaps that are also found in "
"Lisp variables:"
msgstr ""

#. type: vindex
#: original_texis/keymaps.texi:671
#, no-wrap
msgid "esc-map"
msgstr ""

#. type: findex
#: original_texis/keymaps.texi:672
#, no-wrap
msgid "ESC-prefix"
msgstr ""

#. type: itemize
#: original_texis/keymaps.texi:676
msgid ""
"@code{esc-map} is the global keymap for the @key{ESC} prefix key.  Thus, the "
"global definitions of all meta characters are actually found here.  This map "
"is also the function definition of @code{ESC-prefix}."
msgstr ""

#. type: kbd{#1}
#: original_texis/keymaps.texi:678
#, no-wrap
msgid "C-h"
msgstr ""

#. type: itemize
#: original_texis/keymaps.texi:680
msgid "@code{help-map} is the global keymap for the @kbd{C-h} prefix key."
msgstr ""

#. type: kbd{#1}
#: original_texis/keymaps.texi:682
#, no-wrap
msgid "C-c"
msgstr ""

#. type: vindex
#: original_texis/keymaps.texi:683
#, no-wrap
msgid "mode-specific-map"
msgstr ""

#. type: itemize
#: original_texis/keymaps.texi:689
msgid ""
"@code{mode-specific-map} is the global keymap for the prefix key @kbd{C-c}.  "
"This map is actually global, not mode-specific, but its name provides useful "
"information about @kbd{C-c} in the output of @kbd{C-h b} "
"(@code{display-bindings}), since the main use of this prefix key is for "
"mode-specific bindings."
msgstr ""

#. type: kbd{#1}
#: original_texis/keymaps.texi:691
#, no-wrap
msgid "C-x"
msgstr ""

#. type: vindex
#: original_texis/keymaps.texi:692
#, no-wrap
msgid "ctl-x-map"
msgstr ""

#. type: findex
#: original_texis/keymaps.texi:693
#, no-wrap
msgid "Control-X-prefix"
msgstr ""

#. type: itemize
#: original_texis/keymaps.texi:697
msgid ""
"@code{ctl-x-map} is the global keymap used for the @kbd{C-x} prefix key.  "
"This map is found via the function cell of the symbol "
"@code{Control-X-prefix}."
msgstr ""

#. type: kbd{#1}
#: original_texis/keymaps.texi:699
#, no-wrap
msgid "C-x @key{RET}"
msgstr ""

#. type: vindex
#: original_texis/keymaps.texi:700
#, no-wrap
msgid "mule-keymap"
msgstr ""

#. type: itemize
#: original_texis/keymaps.texi:703
msgid ""
"@code{mule-keymap} is the global keymap used for the @kbd{C-x @key{RET}} "
"prefix key."
msgstr ""

#. type: kbd{#1}
#: original_texis/keymaps.texi:705
#, no-wrap
msgid "C-x 4"
msgstr ""

#. type: vindex
#: original_texis/keymaps.texi:706
#, no-wrap
msgid "ctl-x-4-map"
msgstr ""

#. type: itemize
#: original_texis/keymaps.texi:709
msgid "@code{ctl-x-4-map} is the global keymap used for the @kbd{C-x 4} prefix key."
msgstr ""

#. type: kbd{#1}
#: original_texis/keymaps.texi:711
#, no-wrap
msgid "C-x 5"
msgstr ""

#. type: vindex
#: original_texis/keymaps.texi:712
#, no-wrap
msgid "ctl-x-5-map"
msgstr ""

#. type: itemize
#: original_texis/keymaps.texi:715
msgid "@code{ctl-x-5-map} is the global keymap used for the @kbd{C-x 5} prefix key."
msgstr ""

#. type: kbd{#1}
#: original_texis/keymaps.texi:717
#, no-wrap
msgid "C-x 6"
msgstr ""

#. type: vindex
#: original_texis/keymaps.texi:718
#, no-wrap
msgid "2C-mode-map"
msgstr ""

#. type: itemize
#: original_texis/keymaps.texi:721
msgid "@code{2C-mode-map} is the global keymap used for the @kbd{C-x 6} prefix key."
msgstr ""

#. type: kbd{#1}
#: original_texis/keymaps.texi:723
#, no-wrap
msgid "C-x t"
msgstr ""

#. type: vindex
#: original_texis/keymaps.texi:724
#, no-wrap
msgid "tab-prefix-map"
msgstr ""

#. type: itemize
#: original_texis/keymaps.texi:727
msgid ""
"@code{tab-prefix-map} is the global keymap used for the @kbd{C-x t} prefix "
"key."
msgstr ""

#. type: kbd{#1}
#: original_texis/keymaps.texi:729
#, no-wrap
msgid "C-x v"
msgstr ""

#. type: vindex
#: original_texis/keymaps.texi:730
#, no-wrap
msgid "vc-prefix-map"
msgstr ""

#. type: itemize
#: original_texis/keymaps.texi:733
msgid ""
"@code{vc-prefix-map} is the global keymap used for the @kbd{C-x v} prefix "
"key."
msgstr ""

#. type: kbd{#1}
#: original_texis/keymaps.texi:735
#, no-wrap
msgid "M-g"
msgstr ""

#. type: vindex
#: original_texis/keymaps.texi:736
#, no-wrap
msgid "goto-map"
msgstr ""

#. type: itemize
#: original_texis/keymaps.texi:739
msgid "@code{goto-map} is the global keymap used for the @kbd{M-g} prefix key."
msgstr ""

#. type: kbd{#1}
#: original_texis/keymaps.texi:741
#, no-wrap
msgid "M-s"
msgstr ""

#. type: vindex
#: original_texis/keymaps.texi:742
#, no-wrap
msgid "search-map"
msgstr ""

#. type: itemize
#: original_texis/keymaps.texi:745
msgid "@code{search-map} is the global keymap used for the @kbd{M-s} prefix key."
msgstr ""

#. type: itemize
#: original_texis/keymaps.texi:750
msgid ""
"The other Emacs prefix keys are @kbd{C-x @@}, @kbd{C-x a i}, @kbd{C-x "
"@key{ESC}} and @kbd{@key{ESC} @key{ESC}}.  They use keymaps that have no "
"special names."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:759
msgid ""
"The keymap binding of a prefix key is used for looking up the event that "
"follows the prefix key.  (It may instead be a symbol whose function "
"definition is a keymap.  The effect is the same, but the symbol serves as a "
"name for the prefix key.)  Thus, the binding of @kbd{C-x} is the symbol "
"@code{Control-X-prefix}, whose function cell holds the keymap for @kbd{C-x} "
"commands.  (The same keymap is also the value of @code{ctl-x-map}.)"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:766
msgid ""
"Prefix key definitions can appear in any active keymap.  The definitions of "
"@kbd{C-c}, @kbd{C-x}, @kbd{C-h} and @key{ESC} as prefix keys appear in the "
"global map, so these prefix keys are always available.  Major and minor "
"modes can redefine a key as a prefix by putting a prefix key definition for "
"it in the local map or the minor mode's map.  @xref{Active Keymaps}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:771
msgid ""
"If a key is defined as a prefix in more than one active map, then its "
"various definitions are in effect merged: the commands defined in the minor "
"mode keymaps come first, followed by those in the local map's prefix "
"definition, and then by those from the global map."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:777
msgid ""
"In the following example, we make @kbd{C-p} a prefix key in the local "
"keymap, in such a way that @kbd{C-p} is identical to @kbd{C-x}.  Then the "
"binding for @kbd{C-p C-f} is the function @code{find-file}, just like "
"@kbd{C-x C-f}.  By contrast, the key sequence @kbd{C-p 9} is not found in "
"any active keymap."
msgstr ""

#. type: group
#: original_texis/keymaps.texi:782
#, no-wrap
msgid ""
"(use-local-map (make-sparse-keymap))\n"
"    @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:786
#, no-wrap
msgid ""
"(keymap-local-set \"C-p\" ctl-x-map)\n"
"    @result{} (keymap #^[nil nil keymap @dots{}\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:790
#, no-wrap
msgid ""
"(keymap-lookup nil \"C-p C-f\")\n"
"    @result{} find-file\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:794
#, no-wrap
msgid ""
"(keymap-lookup nil \"C-p 9\")\n"
"    @result{} nil\n"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:797
#, no-wrap
msgid "define-prefix-command symbol &optional mapvar prompt"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:798
#, no-wrap
msgid "prefix command"
msgstr ""

#. type: anchor{#1}
#: original_texis/keymaps.texi:804
msgid "Definition of define-prefix-command"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:804
msgid ""
"This function prepares @var{symbol} for use as a prefix key's binding: it "
"creates a sparse keymap and stores it as @var{symbol}'s function "
"definition.  Subsequently binding a key sequence to @var{symbol} will make "
"that key sequence into a prefix key.  The return value is @code{symbol}."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:808
msgid ""
"This function also sets @var{symbol} as a variable, with the keymap as its "
"value.  But if @var{mapvar} is non-@code{nil}, it sets @var{mapvar} as a "
"variable instead."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:812
msgid ""
"If @var{prompt} is non-@code{nil}, that becomes the overall prompt string "
"for the keymap.  The prompt string should be given for menu keymaps "
"(@pxref{Defining Menus})."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:816
#, no-wrap
msgid "active keymap"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:822
msgid ""
"Emacs contains many keymaps, but at any time only a few keymaps are "
"@dfn{active}.  When Emacs receives user input, it translates the input event "
"(@pxref{Translation Keymaps}), and looks for a key binding in the active "
"keymaps."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:828
msgid ""
"Usually, the active keymaps are: (i) the keymap specified by the "
"@code{keymap} property, (ii) the keymaps of enabled minor modes, (iii)  the "
"current buffer's local keymap, and (iv) the global keymap, in that order.  "
"Emacs searches for each input key sequence in all these keymaps."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:832
msgid ""
"Of these usual keymaps, the highest-precedence one is specified by the "
"@code{keymap} text or overlay property at point, if any.  (For a mouse input "
"event, Emacs uses the event position instead of point;"
msgstr ""

#. type: iftex
#: original_texis/keymaps.texi:834
msgid "see the next section for details.)"
msgstr ""

#. type: ifnottex
#: original_texis/keymaps.texi:837
msgid "@pxref{Searching Keymaps}.)"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:844
msgid ""
"Next in precedence are keymaps specified by enabled minor modes.  These "
"keymaps, if any, are specified by the variables "
"@code{emulation-mode-map-alists}, @code{minor-mode-overriding-map-alist}, "
"and @code{minor-mode-map-alist}.  @xref{Controlling Active Maps}."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:845
#, no-wrap
msgid "local keymap"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:851
msgid ""
"Next in precedence is the buffer's @dfn{local keymap}, containing key "
"bindings specific to the buffer.  The minibuffer also has a local keymap "
"(@pxref{Intro to Minibuffers}).  If there is a @code{local-map} text or "
"overlay property at point, that specifies the local keymap to use, in place "
"of the buffer's default local keymap."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:852
#, no-wrap
msgid "major mode keymap"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:858
msgid ""
"The local keymap is normally set by the buffer's major mode, and every "
"buffer with the same major mode shares the same local keymap.  Hence, if you "
"call @code{keymap-local-set} (@pxref{Key Binding Commands})  to change the "
"local keymap in one buffer, that also affects the local keymaps in other "
"buffers with the same major mode."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:859
#, no-wrap
msgid "global keymap"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:863
msgid ""
"Finally, the @dfn{global keymap} contains key bindings that are defined "
"regardless of the current buffer, such as @kbd{C-f}.  It is always active, "
"and is bound to the variable @code{global-map}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:874
msgid ""
"Apart from the above usual keymaps, Emacs provides special ways for programs "
"to make other keymaps active.  Firstly, the variable "
"@code{overriding-local-map} specifies a keymap that replaces the usual "
"active keymaps, except for the global keymap.  Secondly, the terminal-local "
"variable @code{overriding-terminal-local-map} specifies a keymap that takes "
"precedence over @emph{all} other keymaps (including "
"@code{overriding-local-map}); this is normally used for modal/transient key "
"bindings (the function @code{set-transient-map} provides a convenient "
"interface for this).  @xref{Controlling Active Maps}, for details."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:878
msgid ""
"Making keymaps active is not the only way to use them.  Keymaps are also "
"used in other ways, such as for translating events within "
"@code{read-key-sequence}.  @xref{Translation Keymaps}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:880
msgid "@xref{Standard Keymaps}, for a list of some standard keymaps."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:881
#, no-wrap
msgid "current-active-maps &optional olp position"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:890
msgid ""
"This returns the list of active keymaps that would be used by the command "
"loop in the current circumstances to look up a key sequence.  Normally it "
"ignores @code{overriding-local-map} and "
"@code{overriding-terminal-local-map}, but if @var{olp} is non-@code{nil} "
"then it pays attention to them.  @var{position} can optionally be either an "
"event position as returned by @code{event-start} or a buffer position, and "
"may change the keymaps as described for @code{keymap-lookup} "
"(@pxref{Functions for Key Lookup, keymap-lookup})."
msgstr ""

#. type: section
#: original_texis/keymaps.texi:893
#, no-wrap
msgid "Searching the Active Keymaps"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:894
#, no-wrap
msgid "searching active keymaps for keys"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:898
msgid "Here is a pseudo-Lisp summary of how Emacs searches the active keymaps:"
msgstr ""

#. type: lisp
#: original_texis/keymaps.texi:912
#, no-wrap
msgid ""
"(or (if overriding-terminal-local-map\n"
"        (@var{find-in} overriding-terminal-local-map))\n"
"    (if overriding-local-map\n"
"        (@var{find-in} overriding-local-map)\n"
"      (or (@var{find-in} (get-char-property (point) 'keymap))\n"
"          (@var{find-in-any} emulation-mode-map-alists)\n"
"          (@var{find-in-any} minor-mode-overriding-map-alist)\n"
"          (@var{find-in-any} minor-mode-map-alist)\n"
"          (if (get-char-property (point) 'local-map)\n"
"              (@var{find-in} (get-char-property (point) 'local-map))\n"
"            (@var{find-in} (current-local-map)))))\n"
"    (@var{find-in} (current-global-map)))\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:920
msgid ""
"Here, @var{find-in} and @var{find-in-any} are pseudo functions that search "
"in one keymap and in an alist of keymaps, respectively.  Note that the "
"@code{set-transient-map} function works by setting "
"@code{overriding-terminal-local-map} (@pxref{Controlling Active Maps})."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:932
msgid ""
"In the above pseudo-code, if a key sequence starts with a mouse event "
"(@pxref{Mouse Events}), that event's position is used instead of point, and "
"the event's buffer is used instead of the current buffer.  In particular, "
"this affects how the @code{keymap} and @code{local-map} properties are "
"looked up.  If a mouse event occurs on a string embedded with a "
"@code{display}, @code{before-string}, or @code{after-string} property "
"(@pxref{Special Properties}), and the string has a non-@code{nil} "
"@code{keymap} or @code{local-map} property, that overrides the corresponding "
"property in the underlying buffer text (i.e., the property specified by the "
"underlying text is ignored)."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:939
msgid ""
"When a key binding is found in one of the active keymaps, and that binding "
"is a command, the search is over---the command is executed.  However, if the "
"binding is a symbol with a value or a string, Emacs replaces the input key "
"sequences with the variable's value or the string, and restarts the search "
"of the active keymaps.  @xref{Key Lookup}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:942
msgid ""
"The command which is finally found might also be remapped.  @xref{Remapping "
"Commands}."
msgstr ""

#. type: section
#: original_texis/keymaps.texi:944
#, no-wrap
msgid "Controlling the Active Keymaps"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:945
#, no-wrap
msgid "active keymap, controlling"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:947
#, no-wrap
msgid "global-map"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:952
msgid ""
"This variable contains the default global keymap that maps Emacs keyboard "
"input to commands.  The global keymap is normally this keymap.  The default "
"global keymap is a full keymap that binds @code{self-insert-command} to all "
"of the printing characters."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:956
msgid ""
"It is normal practice to change the bindings in the global keymap, but you "
"should not assign this variable any value other than the keymap it starts "
"out with."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:958
#, no-wrap
msgid "current-global-map"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:964
msgid ""
"This function returns the current global keymap.  This is the same as the "
"value of @code{global-map} unless you change one or the other.  The return "
"value is a reference, not a copy; if you use @code{keymap-set} or other "
"functions on it you will alter global bindings."
msgstr ""

#. type: group
#: original_texis/keymaps.texi:970
#, no-wrap
msgid ""
"(current-global-map)\n"
"@result{} (keymap [set-mark-command beginning-of-line @dots{}\n"
"            delete-backward-char])\n"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:974
#, no-wrap
msgid "current-local-map"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:980
msgid ""
"This function returns the current buffer's local keymap, or @code{nil} if it "
"has none.  In the following example, the keymap for the @file{*scratch*} "
"buffer (using Lisp Interaction mode) is a sparse keymap in which the entry "
"for @key{ESC}, @acronym{ASCII} code 27, is another sparse keymap."
msgstr ""

#. type: group
#: original_texis/keymaps.texi:988
#, no-wrap
msgid ""
"(current-local-map)\n"
"@result{} (keymap\n"
"    (10 . eval-print-last-sexp)\n"
"    (9 . lisp-indent-line)\n"
"    (127 . backward-delete-char-untabify)\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:993
#, no-wrap
msgid ""
"    (27 keymap\n"
"        (24 . eval-defun)\n"
"        (17 . indent-sexp)))\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1000
msgid ""
"@code{current-local-map} returns a reference to the local keymap, not a copy "
"of it; if you use @code{keymap-set} or other functions on it you will alter "
"local bindings."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1001
#, no-wrap
msgid "current-minor-mode-maps"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1003
msgid ""
"This function returns a list of the keymaps of currently enabled minor "
"modes."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1005
#, no-wrap
msgid "use-global-map keymap"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1008
msgid ""
"This function makes @var{keymap} the new current global keymap.  It returns "
"@code{nil}."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1010
msgid "It is very unusual to change the global keymap."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1012
#, no-wrap
msgid "use-local-map keymap"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1017
msgid ""
"This function makes @var{keymap} the new local keymap of the current "
"buffer.  If @var{keymap} is @code{nil}, then the buffer has no local "
"keymap.  @code{use-local-map} returns @code{nil}.  Most major mode commands "
"use this function."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1019
#, no-wrap
msgid "minor-mode-map-alist"
msgstr ""

#. type: anchor{#1}
#: original_texis/keymaps.texi:1024
msgid "Definition of minor-mode-map-alist"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1024
msgid ""
"This variable is an alist describing keymaps that may or may not be active "
"according to the values of certain variables.  Its elements look like this:"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:1027
#, no-wrap
msgid "(@var{variable} . @var{keymap})\n"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1032
msgid ""
"The keymap @var{keymap} is active whenever @var{variable} has a "
"non-@code{nil} value.  Typically @var{variable} is the variable that enables "
"or disables a minor mode.  @xref{Keymaps and Minor Modes}."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1038
msgid ""
"Note that elements of @code{minor-mode-map-alist} do not have the same "
"structure as elements of @code{minor-mode-alist}.  The map must be the "
"@sc{cdr} of the element; a list with the map as the second element will not "
"do.  The @sc{cdr} can be either a keymap (a list) or a symbol whose function "
"definition is a keymap."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1043
msgid ""
"When more than one minor mode keymap is active, the earlier one in "
"@code{minor-mode-map-alist} takes priority.  But you should design minor "
"modes so that they don't interfere with each other.  If you do this "
"properly, the order will not matter."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1047
msgid ""
"See @ref{Keymaps and Minor Modes}, for more information about minor modes.  "
"See also @code{minor-mode-key-binding} (@pxref{Functions for Key Lookup})."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1049
#, no-wrap
msgid "minor-mode-overriding-map-alist"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1054
msgid ""
"This variable allows major modes to override the key bindings for particular "
"minor modes.  The elements of this alist look like the elements of "
"@code{minor-mode-map-alist}: @code{(@var{variable} . @var{keymap})}."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1059
msgid ""
"If a variable appears as an element of "
"@code{minor-mode-overriding-map-alist}, the map specified by that element "
"totally replaces any map specified for the same variable in "
"@code{minor-mode-map-alist}."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1062
msgid ""
"@code{minor-mode-overriding-map-alist} is automatically buffer-local in all "
"buffers."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1064
#, no-wrap
msgid "overriding-local-map"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1069
msgid ""
"If non-@code{nil}, this variable holds a keymap to use instead of the "
"buffer's local keymap, any text property or overlay keymaps, and any minor "
"mode keymaps.  This keymap, if specified, overrides all other maps that "
"would have been active, except for the current global map."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1071
#, no-wrap
msgid "overriding-terminal-local-map"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1075
msgid ""
"If non-@code{nil}, this variable holds a keymap to use instead of "
"@code{overriding-local-map}, the buffer's local keymap, text property or "
"overlay keymaps, and all the minor mode keymaps."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1079
msgid ""
"This variable is always local to the current terminal and cannot be "
"buffer-local.  @xref{Multiple Terminals}.  It is used to implement "
"incremental search mode."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1081
#, no-wrap
msgid "overriding-local-map-menu-flag"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1086
msgid ""
"If this variable is non-@code{nil}, the value of @code{overriding-local-map} "
"or @code{overriding-terminal-local-map} can affect the display of the menu "
"bar.  The default value is @code{nil}, so those map variables have no effect "
"on the menu bar."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1094
msgid ""
"Note that these two map variables do affect the execution of key sequences "
"entered using the menu bar, even if they do not affect the menu bar "
"display.  So if a menu bar key sequence comes in, you should clear the "
"variables before looking up and executing that key sequence.  Modes that use "
"the variables would typically do this anyway; normally they respond to "
"events that they do not handle by ``unreading'' them and exiting."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1096
#, no-wrap
msgid "special-event-map"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1100
msgid ""
"This variable holds a keymap for special events.  If an event type has a "
"binding in this keymap, then it is special, and the binding for the event is "
"run directly by @code{read-event}.  @xref{Special Events}."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1102
#, no-wrap
msgid "emulation-mode-map-alists"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1110
msgid ""
"This variable holds a list of keymap alists to use for emulation modes.  It "
"is intended for modes or packages using multiple minor-mode keymaps.  Each "
"element is a keymap alist which has the same format and meaning as "
"@code{minor-mode-map-alist}, or a symbol with a variable binding which is "
"such an alist.  The active keymaps in each alist are used before "
"@code{minor-mode-map-alist} and @code{minor-mode-overriding-map-alist}."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1112
#, no-wrap
msgid "transient keymap"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1113
#, no-wrap
msgid "set-transient-map keymap &optional keep-pred on-exit"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1116
msgid ""
"This function adds @var{keymap} as a @dfn{transient} keymap, which takes "
"precedence over other keymaps for one (or more) subsequent keys."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1122
msgid ""
"Normally, @var{keymap} is used just once, to look up the very next key.  If "
"the optional argument @var{keep-pred} is @code{t}, the map stays active as "
"long as the user types keys defined in @var{keymap}; when the user types a "
"key that is not in @var{keymap}, the transient keymap is deactivated and "
"normal key lookup continues for that key."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1127
msgid ""
"The @var{keep-pred} argument can also be a function.  In that case, the "
"function is called with no arguments, prior to running each command, while "
"@var{keymap} is active; it should return non-@code{nil} if @var{keymap} "
"should stay active."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1131
msgid ""
"The optional argument @var{on-exit}, if non-@code{nil}, specifies a function "
"that is called, with no arguments, after @var{keymap} is deactivated."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1138
msgid ""
"The optional argument @var{message} specifies the message to display after "
"activating the transient map.  If @var{message} is a string, it is the "
"format string for the message, and any @samp{%k} specifier in that string is "
"replaced with the list of keys from the transient map.  Any other "
"non-@code{nil} value of @var{message} stands for the default message format "
"@samp{Repeat with %k}."
msgstr ""

#. type: vindex
#: original_texis/keymaps.texi:1139
#, no-wrap
msgid "set-transient-map-timeout"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1145
msgid ""
"If the optional argument @var{timeout} is non-@code{nil}, it should be a "
"number that specifies how many seconds of idle time to wait before "
"deactivating @var{keymap}.  The value of the variable "
"@code{set-transient-map-timeout}, if non-@code{nil}, overrides the value of "
"this argument."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1149
msgid ""
"This function works by adding and removing @var{keymap} from the variable "
"@code{overriding-terminal-local-map}, which takes precedence over all other "
"active keymaps (@pxref{Searching Keymaps})."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1153
#, no-wrap
msgid "key lookup"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1154
#, no-wrap
msgid "keymap entry"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1159
msgid ""
"@dfn{Key lookup} is the process of finding the binding of a key sequence "
"from a given keymap.  The execution or use of the binding is not part of key "
"lookup."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1166
msgid ""
"Key lookup uses just the event type of each event in the key sequence; the "
"rest of the event is ignored.  In fact, a key sequence used for key lookup "
"may designate a mouse event with just its types (a symbol)  instead of the "
"entire event (a list).  @xref{Input Events}.  Such a key sequence is "
"insufficient for @code{command-execute} to run, but it is sufficient for "
"looking up or rebinding a key."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1176
msgid ""
"When the key sequence consists of multiple events, key lookup processes the "
"events sequentially: the binding of the first event is found, and must be a "
"keymap; then the second event's binding is found in that keymap, and so on "
"until all the events in the key sequence are used up.  (The binding thus "
"found for the last event may or may not be a keymap.)  Thus, the process of "
"key lookup is defined in terms of a simpler process for looking up a single "
"event in a keymap.  How that is done depends on the type of object "
"associated with the event in that keymap."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1184
msgid ""
"Let's use the term @dfn{keymap entry} to describe the value found by looking "
"up an event type in a keymap.  (This doesn't include the item string and "
"other extra elements in a keymap element for a menu item, because "
"@code{keymap-lookup} and other key lookup functions don't include them in "
"the returned value.)  While any Lisp object may be stored in a keymap as a "
"keymap entry, not all make sense for key lookup.  Here is a table of the "
"meaningful types of keymap entries:"
msgstr ""

#. type: code{#1}
#: original_texis/keymaps.texi:1186
#, no-wrap
msgid "nil"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1187
#, no-wrap
msgid "@code{nil} in keymap"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:1192
msgid ""
"@code{nil} means that the events used so far in the lookup form an undefined "
"key.  When a keymap fails to mention an event type at all, and has no "
"default binding, that is equivalent to a binding of @code{nil} for that "
"event type."
msgstr ""

#. type: var{#1}
#: original_texis/keymaps.texi:1193
#, no-wrap
msgid "command"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1194
#, no-wrap
msgid "command in keymap"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:1197
msgid ""
"The events used so far in the lookup form a complete key, and @var{command} "
"is its binding.  @xref{What Is a Function}."
msgstr ""

#. type: var{#1}
#: original_texis/keymaps.texi:1198
#, no-wrap
msgid "array"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1199
#, no-wrap
msgid "string in keymap"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:1203
msgid ""
"The array (either a string or a vector) is a keyboard macro.  The events "
"used so far in the lookup form a complete key, and the array is its "
"binding.  See @ref{Keyboard Macros}, for more information."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1205
#, no-wrap
msgid "keymap in keymap"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:1208
msgid ""
"The events used so far in the lookup form a prefix key.  The next event of "
"the key sequence is looked up in @var{keymap}."
msgstr ""

#. type: var{#1}
#: original_texis/keymaps.texi:1209
#, no-wrap
msgid "list"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1210
#, no-wrap
msgid "list in keymap"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:1212
msgid "The meaning of a list depends on what it contains:"
msgstr ""

#. type: itemize
#: original_texis/keymaps.texi:1217
msgid ""
"If the @sc{car} of @var{list} is the symbol @code{keymap}, then the list is "
"a keymap, and is treated as a keymap (see above)."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1219
#, no-wrap
msgid "@code{lambda} in keymap"
msgstr ""

#. type: itemize
#: original_texis/keymaps.texi:1225
msgid ""
"If the @sc{car} of @var{list} is @code{lambda}, then the list is a lambda "
"expression.  This is presumed to be a function, and is treated as such (see "
"above).  In order to execute properly as a key binding, this function must "
"be a command---it must have an @code{interactive} specification.  "
"@xref{Defining Commands}."
msgstr ""

#. type: var{#1}
#: original_texis/keymaps.texi:1227
#, no-wrap
msgid "symbol"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1228
#, no-wrap
msgid "symbol in keymap"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:1233
msgid ""
"The function definition of @var{symbol} is used in place of @var{symbol}.  "
"If that too is a symbol, then this process is repeated, any number of "
"times.  Ultimately this should lead to an object that is a keymap, a "
"command, or a keyboard macro."
msgstr ""

#. type: table
#: original_texis/keymaps.texi:1240
msgid ""
"Note that keymaps and keyboard macros (strings and vectors) are not valid "
"functions, so a symbol with a keymap, string, or vector as its function "
"definition is invalid as a function.  It is, however, valid as a key "
"binding.  If the definition is a keyboard macro, then the symbol is also "
"valid as an argument to @code{command-execute} (@pxref{Interactive Call})."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1241
#, no-wrap
msgid "@code{undefined} in keymap"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:1247
msgid ""
"The symbol @code{undefined} is worth special mention: it means to treat the "
"key as undefined.  Strictly speaking, the key is defined, and its binding is "
"the command @code{undefined}; but that command does the same thing that is "
"done automatically for an undefined key: it rings the bell (by calling "
"@code{ding}) but does not signal an error."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1248
#, no-wrap
msgid "preventing prefix key"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:1253
msgid ""
"@code{undefined} is used in local keymaps to override a global key binding "
"and make the key undefined locally.  A local binding of @code{nil} would "
"fail to do this because it would not override the global binding."
msgstr ""

#. type: var{#1}
#: original_texis/keymaps.texi:1254
#, no-wrap
msgid "anything else"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:1258
msgid ""
"If any other type of object is found, the events used so far in the lookup "
"form a complete key, and the object is its binding, but the binding is not "
"executable as a command."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1262
msgid ""
"In short, a keymap entry may be a keymap, a command, a keyboard macro, a "
"symbol that leads to one of them, or @code{nil}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1267
msgid "Here are the functions and variables pertaining to key lookup."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1268
#, no-wrap
msgid "keymap-lookup keymap key &optional accept-defaults no-remap position"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1272
msgid ""
"This function returns the definition of @var{key} in @var{keymap}.  All the "
"other functions described in this chapter that look up keys use "
"@code{keymap-lookup}.  Here are examples:"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1277
#, no-wrap
msgid ""
"(keymap-lookup (current-global-map) \"C-x C-f\")\n"
"    @result{} find-file\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1281
#, no-wrap
msgid ""
"(keymap-lookup (current-global-map) \"C-x C-f 1 2 3 4 5\")\n"
"    @result{} 2\n"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1289
msgid ""
"If the string or vector @var{key} is not a valid key sequence according to "
"the prefix keys specified in @var{keymap}, it must be too long and have "
"extra events at the end that do not fit into a single key sequence.  Then "
"the value is a number, the number of events at the front of @var{key} that "
"compose a complete key."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1296
msgid ""
"If @var{accept-defaults} is non-@code{nil}, then @code{keymap-lookup} "
"considers default bindings as well as bindings for the specific events in "
"@var{key}.  Otherwise, @code{keymap-lookup} reports only bindings for the "
"specific sequence @var{key}, ignoring default bindings except when you "
"explicitly ask about them.  (To do this, supply @code{t} as an element of "
"@var{key}; see @ref{Format of Keymaps}.)"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1302
msgid ""
"If @var{key} contains a meta character (not a function key), that character "
"is implicitly replaced by a two-character sequence: the value of "
"@code{meta-prefix-char}, followed by the corresponding non-meta character.  "
"Thus, the first example below is handled by conversion into the second "
"example."
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1307
#, no-wrap
msgid ""
"(keymap-lookup (current-global-map) \"M-f\")\n"
"    @result{} forward-word\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1311
#, no-wrap
msgid ""
"(keymap-lookup (current-global-map) \"ESC f\")\n"
"    @result{} forward-word\n"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1319
msgid ""
"The @var{keymap} argument can be @code{nil}, meaning to look up @var{key} in "
"the current keymaps (as returned by @code{current-active-maps}, "
"@pxref{Active Keymaps}); or it can be a keymap or a list of keymaps, meaning "
"to look up @var{key} only in the specified keymaps."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1324
msgid ""
"Unlike @code{read-key-sequence}, this function does not modify the specified "
"events in ways that discard information (@pxref{Key Sequence Input}).  In "
"particular, it does not convert letters to lower case and it does not change "
"drag events to clicks."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1330
msgid ""
"Like the normal command loop, @code{keymap-lookup} will remap the command "
"resulting from looking up @var{key} by looking up the command in the current "
"keymaps.  However, if the optional third argument @var{no-remap} is "
"non-@code{nil}, @code{keymap-lookup} returns the command without remapping."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1338
msgid ""
"If the optional argument @var{position} is non-@code{nil}, it specifies a "
"mouse position as returned by @code{event-start} and @code{event-end}, and "
"the lookup occurs in the keymaps associated with that position, instead of "
"in @var{keymap}.  @var{position} can also be a number or a marker, in which "
"case it is interpreted as a buffer position, and the function uses the "
"keymap properties at that position instead of at point."
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:1340
#, no-wrap
msgid "Command undefined"
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:1343
msgid ""
"Used in keymaps to undefine keys.  It calls @code{ding}, but does not cause "
"an error."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1345
#, no-wrap
msgid "keymap-local-lookup key &optional accept-defaults"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1348 original_texis/keymaps.texi:1840
msgid ""
"This function returns the binding for @var{key} in the current local keymap, "
"or @code{nil} if it is undefined there."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1351 original_texis/keymaps.texi:1359 original_texis/keymaps.texi:1376
msgid ""
"The argument @var{accept-defaults} controls checking for default bindings, "
"as in @code{keymap-lookup} (above)."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1353
#, no-wrap
msgid "keymap-global-lookup key &optional accept-defaults"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1356 original_texis/keymaps.texi:1848
msgid ""
"This function returns the binding for command @var{key} in the current "
"global keymap, or @code{nil} if it is undefined there."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1361
#, no-wrap
msgid "minor-mode-key-binding key &optional accept-defaults"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1368
msgid ""
"This function returns a list of all the active minor mode bindings of "
"@var{key}.  More precisely, it returns an alist of pairs "
"@code{(@var{modename} . @var{binding})}, where @var{modename} is the "
"variable that enables the minor mode, and @var{binding} is @var{key}'s "
"binding in that mode.  If @var{key} has no minor-mode bindings, the value is "
"@code{nil}."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1373
msgid ""
"If the first binding found is not a prefix definition (a keymap or a symbol "
"defined as a keymap), all subsequent bindings from other minor modes are "
"omitted, since they would be completely shadowed.  Similarly, the list omits "
"non-prefix bindings that follow prefix bindings."
msgstr ""

#. type: defopt
#: original_texis/keymaps.texi:1378
#, no-wrap
msgid "meta-prefix-char"
msgstr ""

#. type: key{#1}
#: original_texis/keymaps.texi:1379
#, no-wrap
msgid "ESC"
msgstr ""

#. type: defopt
#: original_texis/keymaps.texi:1385
msgid ""
"This variable is the meta-prefix character code.  It is used for translating "
"a meta character to a two-character sequence so it can be looked up in a "
"keymap.  For useful results, the value should be a prefix event "
"(@pxref{Prefix Keys}).  The default value is 27, which is the "
"@acronym{ASCII} code for @key{ESC}."
msgstr ""

#. type: defopt
#: original_texis/keymaps.texi:1393
msgid ""
"As long as the value of @code{meta-prefix-char} remains 27, key lookup "
"translates @kbd{M-b} into @kbd{@key{ESC} b}, which is normally defined as "
"the @code{backward-word} command.  However, if you were to set "
"@code{meta-prefix-char} to 24, the code for @kbd{C-x}, then Emacs will "
"translate @kbd{M-b} into @kbd{C-x b}, whose standard binding is the "
"@code{switch-to-buffer} command.  (Don't actually do this!)  Here is an "
"illustration of what would happen:"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1398
#, no-wrap
msgid ""
"meta-prefix-char                    ; @r{The default value.}\n"
"     @result{} 27\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1402
#, no-wrap
msgid ""
"(key-binding \"\\M-b\")\n"
"     @result{} backward-word\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1406
#, no-wrap
msgid ""
"?\\C-x                               ; @r{The print representation}\n"
"     @result{} 24                          ;   @r{of a character.}\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1410
#, no-wrap
msgid ""
"(setq meta-prefix-char 24)\n"
"     @result{} 24\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1415
#, no-wrap
msgid ""
"(key-binding \"\\M-b\")\n"
"     @result{} switch-to-buffer            ; @r{Now, typing @kbd{M-b} is}\n"
"                                    ;   @r{like typing @kbd{C-x b}.}\n"
"\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1418
#, no-wrap
msgid ""
"(setq meta-prefix-char 27)          ; @r{Avoid confusion!}\n"
"     @result{} 27                          ; @r{Restore the default "
"value!}\n"
msgstr ""

#. type: defopt
#: original_texis/keymaps.texi:1424
msgid ""
"This translation of one event into two happens only for characters, not for "
"other kinds of input events.  Thus, @kbd{M-@key{F1}}, a function key, is not "
"converted into @kbd{@key{ESC} @key{F1}}."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1428
#, no-wrap
msgid "changing key bindings"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1429
#, no-wrap
msgid "rebinding"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1440
msgid ""
"The way to rebind a key is to change its entry in a keymap.  If you change a "
"binding in the global keymap, the change is effective in all buffers (though "
"it has no direct effect in buffers that shadow the global binding with a "
"local one).  If you change the current buffer's local map, that usually "
"affects all buffers using the same major mode.  The @code{keymap-global-set} "
"and @code{keymap-local-set} functions are convenient interfaces for these "
"operations (@pxref{Key Binding Commands}).  You can also use "
"@code{keymap-set}, a more general function; then you must explicitly specify "
"the map to change."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1444
msgid ""
"When choosing the key sequences for Lisp programs to rebind, please follow "
"the Emacs conventions for use of various keys (@pxref{Key Binding "
"Conventions})."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1447
msgid ""
"The functions below signal an error if @var{keymap} is not a keymap, or if "
"@var{key} is not a valid key."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1451
msgid ""
"@var{key} is a string representing a single key or a series of key strokes, "
"and must satisfy @code{key-valid-p}.  Key strokes are separated by a single "
"space character."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1457
msgid ""
"Each key stroke is either a single character, or the name of an event, "
"surrounded by angle brackets.  In addition, any key stroke may be preceded "
"by one or more modifier keys.  Finally, a limited number of characters have "
"a special shorthand syntax.  Here's some example key sequences:"
msgstr ""

#. type: item
#: original_texis/keymaps.texi:1459
#, no-wrap
msgid "f"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:1461
msgid "The key @kbd{f}."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:1462
#, no-wrap
msgid "S o m"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:1464
msgid "A three key sequence of the keys @kbd{S}, @kbd{o} and @kbd{m}."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:1465
#, no-wrap
msgid "C-c o"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:1468
msgid ""
"A two key sequence of the keys @kbd{c} with the control modifier and then "
"the key @kbd{o}"
msgstr ""

#. type: item
#: original_texis/keymaps.texi:1469
#, no-wrap
msgid "H-<left>"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:1471
msgid "The key named @kbd{left} with the hyper modifier."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:1472
#, no-wrap
msgid "M-RET"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:1474
msgid "The @kbd{return} key with a meta modifier."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:1475
#, no-wrap
msgid "C-M-<space>"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:1477
msgid "The @kbd{space} key with both the control and meta modifiers."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1481
msgid ""
"The only keys that have a special shorthand syntax are @kbd{NUL}, @kbd{RET}, "
"@kbd{TAB}, @kbd{LFD}, @kbd{ESC}, @kbd{SPC} and @kbd{DEL}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1484
msgid ""
"The modifiers have to be specified in alphabetical order: "
"@samp{A-C-H-M-S-s}, which is @samp{Alt-Control-Hyper-Meta-Shift-super}."
msgstr ""

#. type: findex
#: original_texis/keymaps.texi:1485
#, no-wrap
msgid "keymap-set"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1486
#, no-wrap
msgid "keymap-set keymap key binding"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1493
msgid ""
"This function sets the binding for @var{key} in @var{keymap}.  (If @var{key} "
"is more than one event long, the change is actually made in another keymap "
"reached from @var{keymap}.)  The argument @var{binding} can be any Lisp "
"object, but only certain types are meaningful.  (For a list of meaningful "
"types, see @ref{Key Lookup}.)  The value returned by @code{keymap-set} is "
"@var{binding}."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1497
msgid ""
"If @var{key} is @kbd{<t>}, this sets the default binding in @var{keymap}.  "
"When an event has no binding of its own, the Emacs command loop uses the "
"keymap's default binding, if there is one."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1498
#, no-wrap
msgid "invalid prefix key error"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1499
#, no-wrap
msgid "key sequence error"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1504
msgid ""
"Every prefix of @var{key} must be a prefix key (i.e., bound to a keymap)  or "
"undefined; otherwise an error is signaled.  If some prefix of @var{key} is "
"undefined, then @code{keymap-set} defines it as a prefix key so that the "
"rest of @var{key} can be defined as specified."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1509
msgid ""
"If there was previously no binding for @var{key} in @var{keymap}, the new "
"binding is added at the beginning of @var{keymap}.  The order of bindings in "
"a keymap makes no difference for keyboard input, but it does matter for menu "
"keymaps (@pxref{Menu Keymaps})."
msgstr ""

#. type: findex
#: original_texis/keymaps.texi:1511
#, no-wrap
msgid "keymap-unset"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1512
#, no-wrap
msgid "keymap-unset keymap key &optional remove"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1521
msgid ""
"This function is the inverse of @code{keymap-set}, it unsets the binding for "
"@var{key} in @var{keymap}, which is the same as setting the binding to "
"@code{nil}.  In order to instead remove the binding completely, specify "
"@var{remove} as non-@code{nil}.  This only makes a difference if "
"@var{keymap} has a parent keymap: if you just unset a key in a child map, it "
"will still shadow the same key in the parent keymap; using @var{remove} "
"instead will allow the key in the parent keymap to be used."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1528
msgid ""
"Note: using @code{keymap-unset} with @var{remove} non-@code{nil} is intended "
"for users to put in their init file; Emacs packages should avoid using it if "
"possible, since they have complete control over their own keymaps anyway, "
"and they should not be altering other packages' keymaps."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1531
msgid "This example creates a sparse keymap and makes a number of bindings in it:"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1536
#, no-wrap
msgid ""
"(setq map (make-sparse-keymap))\n"
"    @result{} (keymap)\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1540
#, no-wrap
msgid ""
"(keymap-set map \"C-f\" 'forward-char)\n"
"    @result{} forward-char\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1544
#, no-wrap
msgid ""
"map\n"
"    @result{} (keymap (6 . forward-char))\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1550
#, no-wrap
msgid ""
";; @r{Build sparse submap for @kbd{C-x} and bind @kbd{f} in that.}\n"
"(keymap-set map \"C-x f\" 'forward-word)\n"
"    @result{} forward-word\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1557
#, no-wrap
msgid ""
"map\n"
"@result{} (keymap\n"
"    (24 keymap                ; @kbd{C-x}\n"
"        (102 . forward-word)) ;      @kbd{f}\n"
"    (6 . forward-char))       ; @kbd{C-f}\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1564
#, no-wrap
msgid ""
";; @r{Bind @kbd{C-p} to the @code{ctl-x-map}.}\n"
"(keymap-set map \"C-p\" ctl-x-map)\n"
";; @code{ctl-x-map}\n"
"@result{} [nil @dots{} find-file @dots{} backward-kill-sentence]\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1570
#, no-wrap
msgid ""
";; @r{Bind @kbd{C-f} to @code{foo} in the @code{ctl-x-map}.}\n"
"(keymap-set map \"C-p C-f\" 'foo)\n"
"@result{} 'foo\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1578
#, no-wrap
msgid ""
"map\n"
"@result{} (keymap     ; @r{Note @code{foo} in @code{ctl-x-map}.}\n"
"    (16 keymap [nil @dots{} foo @dots{} backward-kill-sentence])\n"
"    (24 keymap\n"
"        (102 . forward-word))\n"
"    (6 . forward-char))\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1586
msgid ""
"Note that storing a new binding for @kbd{C-p C-f} actually works by changing "
"an entry in @code{ctl-x-map}, and this has the effect of changing the "
"bindings of both @kbd{C-p C-f} and @kbd{C-x C-f} in the default global map."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1593
msgid ""
"@code{keymap-set} is the general work horse for defining a key in a keymap.  "
"When writing modes, however, you frequently have to bind a large number of "
"keys at once, and using @code{keymap-set} on them all can be tedious and "
"error-prone.  Instead you can use @code{define-keymap}, which creates a "
"keymap and binds a number of keys.  @xref{Creating Keymaps}, for details."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1599
msgid ""
"The function @code{substitute-key-definition} scans a keymap for keys that "
"have a certain binding and rebinds them with a different binding.  Another "
"feature which is cleaner and can often produce the same results is to remap "
"one command into another (@pxref{Remapping Commands})."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1600 original_texis/keymaps.texi:1776
#, no-wrap
msgid "substitute-key-definition olddef newdef keymap &optional oldmap"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1601
#, no-wrap
msgid "replace bindings"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1606
msgid ""
"This function replaces @var{olddef} with @var{newdef} for any keys in "
"@var{keymap} that were bound to @var{olddef}.  In other words, @var{olddef} "
"is replaced with @var{newdef} wherever it appears.  The function returns "
"@code{nil}."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1609
msgid ""
"For example, this redefines @kbd{C-x C-f}, if you do it in an Emacs with "
"standard bindings:"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1614
#, no-wrap
msgid ""
"(substitute-key-definition\n"
" 'find-file 'find-file-read-only (current-global-map))\n"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1622
msgid ""
"If @var{oldmap} is non-@code{nil}, that changes the behavior of "
"@code{substitute-key-definition}: the bindings in @var{oldmap} determine "
"which keys to rebind.  The rebindings still happen in @var{keymap}, not in "
"@var{oldmap}.  Thus, you can change one map under the control of the "
"bindings in another.  For example,"
msgstr ""

#. type: smallexample
#: original_texis/keymaps.texi:1627
#, no-wrap
msgid ""
"(substitute-key-definition\n"
"  'delete-backward-char 'my-funny-delete\n"
"  my-map global-map)\n"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1632
msgid ""
"puts the special deletion command in @code{my-map} for whichever keys are "
"globally bound to the standard deletion command."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1634
msgid "Here is an example showing a keymap before and after substitution:"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1642
#, no-wrap
msgid ""
"(setq map (list 'keymap\n"
"                (cons ?1 olddef-1)\n"
"                (cons ?2 olddef-2)\n"
"                (cons ?3 olddef-1)))\n"
"@result{} (keymap (49 . olddef-1) (50 . olddef-2) (51 . olddef-1))\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1647
#, no-wrap
msgid ""
"(substitute-key-definition 'olddef-1 'newdef map)\n"
"@result{} nil\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1651
#, no-wrap
msgid ""
"map\n"
"@result{} (keymap (49 . newdef) (50 . olddef-2) (51 . newdef))\n"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1655
#, no-wrap
msgid "suppress-keymap keymap &optional nodigits"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1656
#, no-wrap
msgid "@code{self-insert-command} override"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1662
msgid ""
"This function changes the contents of the full keymap @var{keymap} by "
"remapping @code{self-insert-command} to the command @code{undefined} "
"(@pxref{Remapping Commands}).  This has the effect of undefining all "
"printing characters, thus making ordinary insertion of text impossible.  "
"@code{suppress-keymap} returns @code{nil}."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1667
msgid ""
"If @var{nodigits} is @code{nil}, then @code{suppress-keymap} defines digits "
"to run @code{digit-argument}, and @kbd{-} to run @code{negative-argument}.  "
"Otherwise it makes them undefined like the rest of the printing characters."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1668
#, no-wrap
msgid "yank suppression"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1669
#, no-wrap
msgid "@code{quoted-insert} suppression"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1674
msgid ""
"The @code{suppress-keymap} function does not make it impossible to modify a "
"buffer, as it does not suppress commands such as @code{yank} and "
"@code{quoted-insert}.  To prevent any modification of a buffer, make it "
"read-only (@pxref{Read Only Buffers})."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1680
msgid ""
"Since this function modifies @var{keymap}, you would normally use it on a "
"newly created keymap.  Operating on an existing keymap that is used for some "
"other purpose is likely to cause trouble; for example, suppressing "
"@code{global-map} would make it impossible to use most of Emacs."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1687
msgid ""
"This function can be used to initialize the local keymap of a major mode for "
"which insertion of text is not desirable.  But usually such a mode should be "
"derived from @code{special-mode} (@pxref{Basic Major Modes}); then its "
"keymap will automatically inherit from @code{special-mode-map}, which is "
"already suppressed.  Here is how @code{special-mode-map} is defined:"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:1696
#, no-wrap
msgid ""
"(defvar special-mode-map\n"
"  (let ((map (make-sparse-keymap)))\n"
"    (suppress-keymap map)\n"
"    (keymap-set map \"q\" 'quit-window)\n"
"    @dots{}\n"
"    map))\n"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1702
#, no-wrap
msgid "low-level key bindings"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1710
msgid ""
"Historically, Emacs has supported a number of different syntaxes for "
"defining keys.  The documented way to bind a key today is to use the syntax "
"supported by @code{key-valid-p}, which is what all the functions like "
"@code{keymap-set} and @code{keymap-lookup} supports.  This section documents "
"the old-style syntax and interface functions; they should not be used in new "
"code."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1711
#, no-wrap
msgid "meta character key constants"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1712
#, no-wrap
msgid "control character key constants"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1715
msgid ""
"@code{define-key} (and other low-level functions that are used to rebind "
"keys) understand a number of different syntaxes for the keys."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:1717
#, no-wrap
msgid "A vector containing lists of keys."
msgstr ""

#. type: table
#: original_texis/keymaps.texi:1722
msgid ""
"You can use a list containing modifier names plus one base event (a "
"character or function key name).  For example, @code{[(control ?a)  (meta "
"b)]} is equivalent to @kbd{C-a M-b} and @code{[(hyper control left)]} is "
"equivalent to @kbd{C-H-left}."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:1723
#, no-wrap
msgid "A string of characters with modifiers"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:1731
msgid ""
"Internally, key sequences are often represented as strings using the special "
"escape sequences for shift, control and meta modifiers (@pxref{String "
"Type}), but this representation can also be used by users when rebinding "
"keys.  A string like @code{\"\\M-x\"} is read as containing a single "
"@kbd{M-x}, @code{\"\\C-f\"} is read as containing a single @kbd{C-f}, and "
"@code{\"\\M-\\C-x\"} and @code{\"\\C-\\M-x\"} are both read as containing a "
"single @kbd{C-M-x}."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:1732
#, no-wrap
msgid "A vector of characters and key symbols"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:1738
msgid ""
"This is the other internal representation of key sequences.  It supports a "
"fuller range of modifiers than the string representation, and also support "
"function keys.  An example is @w{@samp{[?\\C-\\H-x home]}}, which represents "
"the @w{@kbd{C-H-x @key{home}}} key sequence.  @xref{Character Type}."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1740
#, no-wrap
msgid "define-key keymap key binding &optional remove"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1743
msgid ""
"This function is like @code{keymap-set} (@pxref{Changing Key Bindings}, but "
"understands only the legacy key syntaxes."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1751
msgid ""
"In addition, this function also has a @var{remove} argument.  If it is "
"non-@code{nil}, the definition will be removed.  This is almost the same as "
"setting the definition to @code{nil}, but makes a difference if the "
"@var{keymap} has a parent, and @var{key} is shadowing the same binding in "
"the parent.  With @var{remove}, subsequent lookups will return the binding "
"in the parent, whereas with a @code{nil} definition the lookups will return "
"@code{nil}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1755
msgid ""
"Here are other legacy key definition functions and commands, with the "
"equivalent modern function to use instead in new code."
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:1756
#, no-wrap
msgid "Command global-set-key key binding"
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:1759
msgid ""
"This function sets the binding of @var{key} in the current global map to "
"@var{binding}.  Use @code{keymap-global-set} instead."
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:1761
#, no-wrap
msgid "Command global-unset-key key"
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:1764
msgid ""
"This function removes the binding of @var{key} from the current global map.  "
"Use @code{keymap-global-unset} instead."
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:1766
#, no-wrap
msgid "Command local-set-key key binding"
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:1769
msgid ""
"This function sets the binding of @var{key} in the current local keymap to "
"@var{binding}.  Use @code{keymap-local-set} instead."
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:1771
#, no-wrap
msgid "Command local-unset-key key"
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:1774
msgid ""
"This function removes the binding of @var{key} from the current local map.  "
"Use @code{keymap-local-unset} instead."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1781
msgid ""
"This function replaces @var{olddef} with @var{newdef} for any keys in "
"@var{keymap} that were bound to @var{olddef}.  In other words, @var{olddef} "
"is replaced with @var{newdef} wherever it appears.  The function returns "
"@code{nil}.  Use @code{keymap-substitute} instead."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1783
#, no-wrap
msgid "define-key-after map key binding &optional after"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1793
msgid ""
"Define a binding in @var{map} for @var{key}, with value @var{binding}, just "
"like @code{define-key}, but position the binding in @var{map} after the "
"binding for the event @var{after}.  The argument @var{key} should be of "
"length one---a vector or string with just one element.  But @var{after} "
"should be a single event type---a symbol or a character, not a sequence.  "
"The new binding goes after the binding for @var{after}.  If @var{after} is "
"@code{t} or is omitted, then the new binding goes last, at the end of the "
"keymap.  However, new bindings are added before any inherited keymap.  Use "
"@code{keymap-set-after} instead of this function."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1795
#, no-wrap
msgid "keyboard-translate from to"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1800
msgid ""
"This function modifies @code{keyboard-translate-table} to translate "
"character code @var{from} into character code @var{to}.  It creates the "
"keyboard translate table if necessary.  Use @code{key-translate} instead."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1802
#, no-wrap
msgid "key-binding key &optional accept-defaults no-remap position"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1814
msgid ""
"This function returns the binding for @var{key} according to the current "
"active keymaps.  The result is @code{nil} if @var{key} is undefined in the "
"keymaps.  The argument @var{accept-defaults} controls checking for default "
"bindings, as in @code{lookup-key} (@pxref{Functions for Key Lookup}).  If "
"@var{no-remap} is non-@code{nil}, @code{key-binding} ignores command "
"remappings (@pxref{Remapping Commands}) and returns the binding directly "
"specified for @var{key}.  The optional argument @var{position} should be "
"either a buffer position or an event position like the value of "
"@code{event-start}; it tells the function to consult the maps determined "
"based on that @var{position}."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1816
msgid "Emacs signals an error if @var{key} is not a string or a vector."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1818 original_texis/keymaps.texi:1835
msgid "Use @code{keymap-lookup} instead of this function."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1820
#, no-wrap
msgid "lookup-key keymap key &optional accept-defaults"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1827
msgid ""
"This function returns the definition of @var{key} in @var{keymap}.  If the "
"string or vector @var{key} is not a valid key sequence according to the "
"prefix keys specified in @var{keymap}, it must be too long and have extra "
"events at the end that do not fit into a single key sequence.  Then the "
"value is a number, the number of events at the front of @var{key} that "
"compose a complete key."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1833
msgid ""
"If @var{accept-defaults} is non-@code{nil}, then @code{lookup-key} considers "
"default bindings as well as bindings for the specific events in @var{key}.  "
"Otherwise, @code{lookup-key} reports only bindings for the specific sequence "
"@var{key}, ignoring default bindings except when you explicitly ask about "
"them."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1837
#, no-wrap
msgid "local-key-binding key &optional accept-defaults"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1843 original_texis/keymaps.texi:1851
msgid ""
"The argument @var{accept-defaults} controls checking for default bindings, "
"as in @code{lookup-key} (above)."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1845
#, no-wrap
msgid "global-key-binding key &optional accept-defaults"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1853
#, no-wrap
msgid "event-convert-list list"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1857
msgid ""
"This function converts a list of modifier names and a basic event type to an "
"event type which specifies all of them.  The basic event type must be the "
"last element of the list.  For example,"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:1865
#, no-wrap
msgid ""
"(event-convert-list '(control ?a))\n"
"     @result{} 1\n"
"(event-convert-list '(control meta ?a))\n"
"     @result{} -134217727\n"
"(event-convert-list '(control super f1))\n"
"     @result{} C-s-f1\n"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1870
#, no-wrap
msgid "remapping commands"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1879
msgid ""
"A special kind of key binding can be used to @dfn{remap} one command to "
"another, without having to refer to the key sequence(s) bound to the "
"original command.  To use this feature, make a key binding for a key "
"sequence that starts with the dummy event @code{remap}, followed by the "
"command name you want to remap; for the binding, specify the new definition "
"(usually a command name, but possibly any other valid definition for a key "
"binding)."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1884
msgid ""
"For example, suppose My mode provides a special command @code{my-kill-line}, "
"which should be invoked instead of @code{kill-line}.  To establish this, its "
"mode keymap should contain the following remapping:"
msgstr ""

#. type: smallexample
#: original_texis/keymaps.texi:1887
#, no-wrap
msgid "(keymap-set my-mode-map \"<remap> <kill-line>\" 'my-kill-line)\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1893
msgid ""
"Then, whenever @code{my-mode-map} is active, if the user types @kbd{C-k} "
"(the default global key sequence for @code{kill-line}) Emacs will instead "
"run @code{my-kill-line}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1899
msgid ""
"Note that remapping only takes place through active keymaps; for example, "
"putting a remapping in a prefix keymap like @code{ctl-x-map} typically has "
"no effect, as such keymaps are not themselves active.  In addition, "
"remapping only works through a single level; in the following example,"
msgstr ""

#. type: smallexample
#: original_texis/keymaps.texi:1903
#, no-wrap
msgid ""
"(keymap-set my-mode-map \"<remap> <kill-line>\" 'my-kill-line)\n"
"(keymap-set my-mode-map \"<remap> <my-kill-line>\" 'my-other-kill-line)\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1910
msgid ""
"@code{kill-line} is @emph{not} remapped to @code{my-other-kill-line}.  "
"Instead, if an ordinary key binding specifies @code{kill-line}, it is "
"remapped to @code{my-kill-line}; if an ordinary binding specifies "
"@code{my-kill-line}, it is remapped to @code{my-other-kill-line}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1912
msgid "To undo the remapping of a command, remap it to @code{nil}; e.g.,"
msgstr ""

#. type: smallexample
#: original_texis/keymaps.texi:1915
#, no-wrap
msgid "(keymap-set my-mode-map \"<remap> <kill-line>\" nil)\n"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1917
#, no-wrap
msgid "command-remapping command &optional position keymaps"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1924
msgid ""
"This function returns the remapping for @var{command} (a symbol), given the "
"current active keymaps.  If @var{command} is not remapped (which is the "
"usual situation), or not a symbol, the function returns @code{nil}.  "
"@code{position} can optionally specify a buffer position or an event "
"position to determine the keymaps to use, as in @code{key-binding}."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:1928
msgid ""
"If the optional argument @code{keymaps} is non-@code{nil}, it specifies a "
"list of keymaps to search in.  This argument is ignored if @code{position} "
"is non-@code{nil}."
msgstr ""

#. type: section
#: original_texis/keymaps.texi:1931
#, no-wrap
msgid "Keymaps for Translating Sequences of Events"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1932
#, no-wrap
msgid "translation keymap"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1933
#, no-wrap
msgid "keymaps for translating events"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1940
msgid ""
"When the @code{read-key-sequence} function reads a key sequence (@pxref{Key "
"Sequence Input}), it uses @dfn{translation keymaps} to translate certain "
"event sequences into others.  The translation keymaps are "
"@code{input-decode-map}, @code{local-function-key-map}, and "
"@code{key-translation-map} (in order of priority)."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1949
msgid ""
"Translation keymaps have the same structure as other keymaps, but are used "
"differently: they specify translations to make while reading key sequences, "
"rather than bindings for complete key sequences.  As each key sequence is "
"read, it is checked against each translation keymap.  If one of the "
"translation keymaps binds @var{k} to a vector @var{v}, then whenever @var{k} "
"appears as a sub-sequence @emph{anywhere} in a key sequence, that "
"sub-sequence is replaced with the events in @var{v}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1958
msgid ""
"For example, VT100 terminals send @kbd{@key{ESC} O P} when the keypad key "
"@key{PF1} is pressed.  On such terminals, Emacs must translate that sequence "
"of events into a single event @code{pf1}.  This is done by binding "
"@kbd{@key{ESC} O P} to @code{[pf1]} in @code{input-decode-map}.  Thus, when "
"you type @kbd{C-c @key{PF1}} on the terminal, the terminal emits the "
"character sequence @kbd{C-c @key{ESC} O P}, and @code{read-key-sequence} "
"translates this back into @kbd{C-c @key{PF1}} and returns it as the vector "
"@code{[?\\C-c pf1]}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:1962
msgid ""
"Translation keymaps take effect only after Emacs has decoded the keyboard "
"input (via the input coding system specified by "
"@code{keyboard-coding-system}).  @xref{Terminal I/O Encoding}."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1963
#, no-wrap
msgid "input-decode-map"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1966
msgid ""
"This variable holds a keymap that describes the character sequences sent by "
"function keys on an ordinary character terminal."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1973
msgid ""
"The value of @code{input-decode-map} is usually set up automatically "
"according to the terminal's Terminfo or Termcap entry, but sometimes those "
"need help from terminal-specific Lisp files.  Emacs comes with "
"terminal-specific files for many common terminals; their main purpose is to "
"make entries in @code{input-decode-map} beyond those that can be deduced "
"from Termcap and Terminfo.  @xref{Terminal-Specific}."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:1975
#, no-wrap
msgid "function-key-map"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1976
#, no-wrap
msgid "local-function-key-map"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1981
msgid ""
"This variable holds a keymap similar to @code{input-decode-map} except that "
"it describes key sequences which should be translated to alternative "
"interpretations that are usually preferred.  It applies after "
"@code{input-decode-map} and before @code{key-translation-map}."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1986
msgid ""
"Entries in @code{local-function-key-map} are ignored if they conflict with "
"bindings made in the minor mode, local, or global keymaps.  I.e., the "
"remapping only applies if the original key sequence would otherwise not have "
"any binding."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1990
msgid ""
"@code{local-function-key-map} inherits from @code{function-key-map}.  The "
"latter should only be altered if you want the binding to apply in all "
"terminals, so using the former is almost always preferred."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1992
#, no-wrap
msgid "key-translation-map"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:1998
msgid ""
"This variable is another keymap used just like @code{input-decode-map} to "
"translate input events into other events.  It differs from "
"@code{input-decode-map} in that it goes to work after "
"@code{local-function-key-map} is finished rather than before; it receives "
"the results of translation by @code{local-function-key-map}."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:2007
msgid ""
"Just like @code{input-decode-map}, but unlike @code{local-function-key-map}, "
"this keymap is applied regardless of whether the input key-sequence has a "
"normal binding.  Note however that actual key bindings can have an effect on "
"@code{key-translation-map}, even though they are overridden by it.  Indeed, "
"actual key bindings override @code{local-function-key-map} and thus may "
"alter the key sequence that @code{key-translation-map} receives.  Clearly, "
"it is better to avoid this type of situation."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:2011
msgid ""
"The intent of @code{key-translation-map} is for users to map one character "
"set to another, including ordinary characters normally bound to "
"@code{self-insert-command}."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:2013
#, no-wrap
msgid "key translation function"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2019
msgid ""
"You can use @code{input-decode-map}, @code{local-function-key-map}, and "
"@code{key-translation-map} for more than simple aliases, by using a "
"function, instead of a key sequence, as the translation of a key.  Then this "
"function is called to compute the translation of that key."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2024
msgid ""
"The key translation function receives one argument, which is the prompt that "
"was specified in @code{read-key-sequence}---or @code{nil} if the key "
"sequence is being read by the editor command loop.  In most cases you can "
"ignore the prompt value."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2028
msgid ""
"If the function reads input itself, it can have the effect of altering the "
"event that follows.  For example, here's how to define @kbd{C-c h} to turn "
"the character that follows into a Hyper character:"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:2038
#, no-wrap
msgid ""
"(defun hyperify (prompt)\n"
"  (let ((e (read-event)))\n"
"    (vector (if (numberp e)\n"
"                (logior (ash 1 24) e)\n"
"              (if (memq 'hyper (event-modifiers e))\n"
"                  e\n"
"                (add-event-modifier \"H-\" e))))))\n"
"\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:2046
#, no-wrap
msgid ""
"(defun add-event-modifier (string e)\n"
"  (let ((symbol (if (symbolp e) e (car e))))\n"
"    (setq symbol (intern (concat string\n"
"                                 (symbol-name symbol))))\n"
"    (if (symbolp e)\n"
"        symbol\n"
"      (cons symbol (cdr e)))))\n"
"\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:2048
#, no-wrap
msgid "(keymap-set local-function-key-map \"C-c h\" 'hyperify)\n"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:2051
#, no-wrap
msgid "accessing events within a key translation function"
msgstr ""

#. type: vindex
#: original_texis/keymaps.texi:2052
#, no-wrap
msgid "current-key-remap-sequence"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2059
msgid ""
"A key translation function might want to adjust its behavior based on "
"parameters to events within a key sequence containing non-key events "
"(@pxref{Input Events}.)  This information is available from the variable "
"@code{current-key-remap-sequence}, which is bound to the key sub-sequence "
"being translated around calls to key translation functions."
msgstr ""

#. type: subsection
#: original_texis/keymaps.texi:2060
#, no-wrap
msgid "Interaction with normal keymaps"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2065
msgid ""
"The end of a key sequence is detected when that key sequence either is bound "
"to a command, or when Emacs determines that no additional event can lead to "
"a sequence that is bound to a command."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2076
msgid ""
"This means that, while @code{input-decode-map} and "
"@code{key-translation-map} apply regardless of whether the original key "
"sequence would have a binding, the presence of such a binding can still "
"prevent translation from taking place.  For example, let us return to our "
"VT100 example above and add a binding for @kbd{C-c @key{ESC}} to the global "
"map; now when the user hits @kbd{C-c @key{PF1}} Emacs will fail to decode "
"@kbd{C-c @key{ESC} O P} into @kbd{C-c @key{PF1}} because it will stop "
"reading keys right after @kbd{C-c @key{ESC}}, leaving @kbd{O P} for later.  "
"This is in case the user really hit @kbd{C-c @key{ESC}}, in which case Emacs "
"should not sit there waiting for the next key to decide whether the user "
"really pressed @kbd{@key{ESC}} or @kbd{@key{PF1}}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2081
msgid ""
"For that reason, it is better to avoid binding commands to key sequences "
"where the end of the key sequence is a prefix of a key translation.  The "
"main such problematic suffixes/prefixes are @kbd{@key{ESC}}, @kbd{M-O} "
"(which is really @kbd{@key{ESC} O}) and @kbd{M-[} (which is really "
"@kbd{@key{ESC} [})."
msgstr ""

#. type: section
#: original_texis/keymaps.texi:2083
#, no-wrap
msgid "Commands for Binding Keys"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2096
msgid ""
"This section describes some convenient interactive interfaces for changing "
"key bindings.  They work by calling @code{keymap-set} (@pxref{Changing Key "
"Bindings}).  In interactive use, these commands prompt for the argument "
"@var{key} and expect the user to type a valid key sequence; they also prompt "
"for the @var{binding} of the key sequence, and expect the name of a command "
"(i.e., a symbol that satisfies @code{commandp}, @pxref{Interactive Call}).  "
"When called from Lisp, these commands expect @var{key} to be a string that "
"satisfies @code{key-valid-p} (@pxref{Key Sequences}), and @var{binding} to "
"be any Lisp object that is meaningful in a keymap (@pxref{Key Lookup})."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2099
msgid ""
"People often use @code{keymap-global-set} in their init files (@pxref{Init "
"File}) for simple customization.  For example,"
msgstr ""

#. type: smallexample
#: original_texis/keymaps.texi:2102
#, no-wrap
msgid "(keymap-global-set \"C-x C-\\\\\" 'next-line)\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2106
msgid "redefines @kbd{C-x C-\\} to move down a line."
msgstr ""

#. type: smallexample
#: original_texis/keymaps.texi:2109
#, no-wrap
msgid "(keymap-global-set \"M-<mouse-1>\" 'mouse-set-point)\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2114
msgid ""
"redefines the first (leftmost) mouse button, entered with the Meta key, to "
"set point where you click."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:2115
#, no-wrap
msgid "non-@acronym{ASCII} text in key bindings"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2120
msgid ""
"Be careful when using non-@acronym{ASCII} text characters in Lisp "
"specifications of keys to bind.  If these are read as multibyte text, as "
"they usually will be in a Lisp file (@pxref{Loading Non-ASCII}), you must "
"type the keys as multibyte too.  For instance, if you use this:"
msgstr ""

#. type: smallexample
#: original_texis/keymaps.texi:2123
#, no-wrap
msgid "(keymap-global-set \"ö\" 'my-function) ; bind o-umlaut\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2132
msgid ""
"and your language environment is multibyte Latin-1, these commands actually "
"bind the multibyte character with code 246, not the byte code 246 "
"(@kbd{M-v}) sent by a Latin-1 terminal.  In order to use this binding, you "
"need to teach Emacs how to decode the keyboard by using an appropriate input "
"method (@pxref{Input Methods, , Input Methods, emacs, The GNU Emacs "
"Manual})."
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:2133
#, no-wrap
msgid "Command keymap-global-set key binding"
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:2136
msgid ""
"This function sets the binding of @var{key} in the current global map to "
"@var{binding}."
msgstr ""

#. type: group
#: original_texis/keymaps.texi:2142
#, no-wrap
msgid ""
"(keymap-global-set @var{key} @var{binding})\n"
"@equiv{}\n"
"(keymap-set (current-global-map) @var{key} @var{binding})\n"
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:2146
#, no-wrap
msgid "Command keymap-global-unset key"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:2147
#, no-wrap
msgid "unbinding keys"
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:2150
msgid "This function removes the binding of @var{key} from the current global map."
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:2154
msgid ""
"One use of this function is in preparation for defining a longer key that "
"uses @var{key} as a prefix---which would not be allowed if @var{key} has a "
"non-prefix binding.  For example:"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:2159
#, no-wrap
msgid ""
"(keymap-global-unset \"C-l\")\n"
"    @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:2163
#, no-wrap
msgid ""
"(keymap-global-set \"C-l C-l\" 'redraw-display)\n"
"    @result{} nil\n"
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:2167
#, no-wrap
msgid "Command keymap-local-set key binding"
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:2170
msgid ""
"This function sets the binding of @var{key} in the current local keymap to "
"@var{binding}."
msgstr ""

#. type: group
#: original_texis/keymaps.texi:2176
#, no-wrap
msgid ""
"(keymap-local-set @var{key} @var{binding})\n"
"@equiv{}\n"
"(keymap-set (current-local-map) @var{key} @var{binding})\n"
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:2180
#, no-wrap
msgid "Command keymap-local-unset key"
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:2183
msgid "This function removes the binding of @var{key} from the current local map."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:2187
#, no-wrap
msgid "scanning keymaps"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:2188
#, no-wrap
msgid "keymaps, scanning"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2195
msgid ""
"This section describes functions used to scan all the current keymaps for "
"the sake of printing help information.  To display the bindings in a "
"particular keymap, you can use the @code{describe-keymap} command "
"(@pxref{Misc Help, , Other Help Commands, emacs, The GNU Emacs Manual})"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:2196
#, no-wrap
msgid "accessible-keymaps keymap &optional prefix"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:2202
msgid ""
"This function returns a list of all the keymaps that can be reached (via "
"zero or more prefix keys) from @var{keymap}.  The value is an association "
"list with elements of the form @code{(@var{key} .@: @var{map})}, where "
"@var{key} is a prefix key whose definition in @var{keymap} is @var{map}."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:2207
msgid ""
"The elements of the alist are ordered so that the @var{key} increases in "
"length.  The first element is always @code{([] .@: @var{keymap})}, because "
"the specified keymap is accessible from itself with a prefix of no events."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:2213
msgid ""
"If @var{prefix} is given, it should be a prefix key sequence; then "
"@code{accessible-keymaps} includes only the submaps whose prefixes start "
"with @var{prefix}.  These elements look just as they do in the value of "
"@code{(accessible-keymaps)}; the only difference is that some elements are "
"omitted."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:2218
msgid ""
"In the example below, the returned alist indicates that the key @key{ESC}, "
"which is displayed as @samp{^[}, is a prefix key whose definition is the "
"sparse keymap @code{(keymap (83 .@: center-paragraph)  (115 .@: foo))}."
msgstr ""

#. type: group
#: original_texis/keymaps.texi:2227
#, no-wrap
msgid ""
"(accessible-keymaps (current-local-map))\n"
"@result{}(([] keymap\n"
"      (27 keymap   ; @r{Note this keymap for @key{ESC} is repeated below.}\n"
"          (83 . center-paragraph)\n"
"          (115 . center-line))\n"
"      (9 . tab-to-tab-stop))\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:2233
#, no-wrap
msgid ""
"   (\"^[\" keymap\n"
"    (83 . center-paragraph)\n"
"    (115 . foo)))\n"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:2242
msgid ""
"In the following example, @kbd{C-h} is a prefix key that uses a sparse "
"keymap starting with @code{(keymap (118 . describe-variable)@dots{})}.  "
"Another prefix, @kbd{C-x 4}, uses a keymap which is also the value of the "
"variable @code{ctl-x-4-map}.  The event @code{mode-line} is one of several "
"dummy events used as prefixes for mouse actions in special parts of a "
"window."
msgstr ""

#. type: group
#: original_texis/keymaps.texi:2248
#, no-wrap
msgid ""
"(accessible-keymaps (current-global-map))\n"
"@result{} (([] keymap [set-mark-command beginning-of-line @dots{}\n"
"                   delete-backward-char])\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:2252
#, no-wrap
msgid ""
"    (\"^H\" keymap (118 . describe-variable) @dots{}\n"
"     (8 . help-for-help))\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:2256
#, no-wrap
msgid ""
"    (\"^X\" keymap [x-flush-mouse-queue @dots{}\n"
"     backward-kill-sentence])\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:2260
#, no-wrap
msgid ""
"    (\"^[\" keymap [mark-sexp backward-sexp @dots{}\n"
"     backward-kill-word])\n"
msgstr ""

#. type: smallexample
#: original_texis/keymaps.texi:2262
#, no-wrap
msgid "    (\"^X4\" keymap (15 . display-buffer) @dots{})\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:2265
#, no-wrap
msgid ""
"    ([mode-line] keymap\n"
"     (S-mouse-2 . mouse-split-window-horizontally) @dots{}))\n"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:2270
msgid "These are not all the keymaps you would see in actuality."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:2272
#, no-wrap
msgid "map-keymap function keymap"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:2279
msgid ""
"The function @code{map-keymap} calls @var{function} once for each binding in "
"@var{keymap}.  It passes two arguments, the event type and the value of the "
"binding.  If @var{keymap} has a parent, the parent's bindings are included "
"as well.  This works recursively: if the parent has itself a parent, then "
"the grandparent's bindings are also included and so on."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:2282
msgid "This function is the cleanest way to examine all the bindings in a keymap."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:2284
#, no-wrap
msgid "where-is-internal command &optional keymap firstonly noindirect no-remap"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:2289
msgid ""
"This function is a subroutine used by the @code{where-is} command "
"(@pxref{Help, , Help, emacs,The GNU Emacs Manual}).  It returns a list of "
"all key sequences (of any length) that are bound to @var{command} in a set "
"of keymaps."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:2292
msgid ""
"The argument @var{command} can be any object; it is compared with all keymap "
"entries using @code{eq}."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:2298
msgid ""
"If @var{keymap} is @code{nil}, then the maps used are the current active "
"keymaps, disregarding @code{overriding-local-map} (that is, pretending its "
"value is @code{nil}).  If @var{keymap} is a keymap, then the maps searched "
"are @var{keymap} and the global keymap.  If @var{keymap} is a list of "
"keymaps, only those keymaps are searched."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:2303
msgid ""
"Usually it's best to use @code{overriding-local-map} as the expression for "
"@var{keymap}.  Then @code{where-is-internal} searches precisely the keymaps "
"that are active.  To search only the global map, pass the value "
"@code{(keymap)} (an empty keymap) as @var{keymap}."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:2311
msgid ""
"If @var{firstonly} is @code{non-ascii}, then the value is a single vector "
"representing the first key sequence found, rather than a list of all "
"possible key sequences.  If @var{firstonly} is @code{t}, then the value is "
"the first key sequence, except that key sequences consisting entirely of "
"@acronym{ASCII} characters (or meta variants of @acronym{ASCII} characters) "
"are preferred to all other key sequences and that the return value can never "
"be a menu binding."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:2315
msgid ""
"If @var{noindirect} is non-@code{nil}, @code{where-is-internal} doesn't look "
"inside menu-items to find their commands.  This makes it possible to search "
"for a menu-item itself."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:2319
msgid ""
"The fifth argument, @var{no-remap}, determines how this function treats "
"command remappings (@pxref{Remapping Commands}).  There are two cases of "
"interest:"
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2321
#, no-wrap
msgid "If a command @var{other-command} is remapped to @var{command}:"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2327
msgid ""
"If @var{no-remap} is @code{nil}, find the bindings for @var{other-command} "
"and treat them as though they are also bindings for @var{command}.  If "
"@var{no-remap} is non-@code{nil}, include the vector @code{[remap "
"@var{other-command}]} in the list of possible key sequences, instead of "
"finding those bindings."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2328
#, no-wrap
msgid "If @var{command} is remapped to @var{other-command}:"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2333
msgid ""
"If @var{no-remap} is @code{nil}, return the bindings for @var{other-command} "
"rather than @var{command}.  If @var{no-remap} is non-@code{nil}, return the "
"bindings for @var{command}, ignoring the fact that it is remapped."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:2339
msgid ""
"If a command maps to a key binding like @code{[some-event]}, and "
"@code{some-event} has a symbol plist containing a non-@code{nil} "
"@code{non-key-event} property, then that binding is ignored by "
"@code{where-is-internal}."
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:2341
#, no-wrap
msgid "Command describe-bindings &optional prefix buffer-or-name"
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:2345
msgid ""
"This function creates a listing of all current key bindings, and displays it "
"in a buffer named @file{*Help*}.  The text is grouped by modes---minor modes "
"first, then the major mode, then global bindings."
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:2348
msgid ""
"If @var{prefix} is non-@code{nil}, it should be a prefix key; then the "
"listing includes only keys that start with @var{prefix}."
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:2358
msgid ""
"When several characters with consecutive @acronym{ASCII} codes have the same "
"definition, they are shown together, as "
"@samp{@var{firstchar}..@var{lastchar}}.  In this instance, you need to know "
"the @acronym{ASCII} codes to understand which characters this means.  For "
"example, in the default global map, the characters @samp{@key{SPC} ..@: ~} "
"are described by a single line.  @key{SPC} is @acronym{ASCII} 32, @kbd{~} is "
"@acronym{ASCII} 126, and the characters between them include all the normal "
"printing characters, (e.g., letters, digits, punctuation, etc.@:); all these "
"characters are bound to @code{self-insert-command}."
msgstr ""

#. type: deffn
#: original_texis/keymaps.texi:2362
msgid ""
"If @var{buffer-or-name} is non-@code{nil}, it should be a buffer or a buffer "
"name.  Then @code{describe-bindings} lists that buffer's bindings, instead "
"of the current buffer's."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:2366
#, no-wrap
msgid "menu keymaps"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2373
msgid ""
"A keymap can operate as a menu as well as defining bindings for keyboard "
"keys and mouse buttons.  Menus are usually actuated with the mouse, but they "
"can function with the keyboard also.  If a menu keymap is active for the "
"next input event, that activates the keyboard menu feature."
msgstr ""

#. type: subsection
#: original_texis/keymaps.texi:2383 original_texis/keymaps.texi:2385 original_texis/keymaps.texi:2386
#, no-wrap
msgid "Defining Menus"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:2383
msgid "How to make a keymap that defines a menu."
msgstr ""

#. type: node
#: original_texis/keymaps.texi:2383 original_texis/keymaps.texi:2729
#, no-wrap
msgid "Mouse Menus"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:2383
msgid "How users actuate the menu with the mouse."
msgstr ""

#. type: node
#: original_texis/keymaps.texi:2383 original_texis/keymaps.texi:2767
#, no-wrap
msgid "Keyboard Menus"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:2383
msgid "How users actuate the menu with the keyboard."
msgstr ""

#. type: subsection
#: original_texis/keymaps.texi:2383 original_texis/keymaps.texi:2794 original_texis/keymaps.texi:2795
#, no-wrap
msgid "Menu Example"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:2383
msgid "Making a simple menu."
msgstr ""

#. type: node
#: original_texis/keymaps.texi:2383 original_texis/keymaps.texi:2866
#, no-wrap
msgid "Menu Bar"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:2383
msgid "How to customize the menu bar."
msgstr ""

#. type: node
#: original_texis/keymaps.texi:2383 original_texis/keymaps.texi:2955
#, no-wrap
msgid "Tool Bar"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:2383
msgid "A tool bar is a row of images."
msgstr ""

#. type: subsection
#: original_texis/keymaps.texi:2383 original_texis/keymaps.texi:3193 original_texis/keymaps.texi:3194
#, no-wrap
msgid "Modifying Menus"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:2383
msgid "How to add new items to a menu."
msgstr ""

#. type: subsection
#: original_texis/keymaps.texi:2383 original_texis/keymaps.texi:3234 original_texis/keymaps.texi:3235
#, no-wrap
msgid "Easy Menu"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:2383
msgid "A convenience macro for making menus."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:2387
#, no-wrap
msgid "defining menus"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:2388
#, no-wrap
msgid "menu prompt string"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:2389
#, no-wrap
msgid "prompt string (of menu)"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:2390
#, no-wrap
msgid "menu item"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2400
msgid ""
"A keymap acts as a menu if it has an @dfn{overall prompt string}, which is a "
"string that appears as an element of the keymap.  (@xref{Format of "
"Keymaps}.)  The string should describe the purpose of the menu's commands.  "
"Emacs displays the overall prompt string as the menu title in some cases, "
"depending on the toolkit (if any) used for displaying menus.@footnote{It is "
"required for menus which do not use a toolkit, e.g., on a text terminal.} "
"Keyboard menus also display the overall prompt string."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2407
msgid ""
"The easiest way to construct a keymap with a prompt string is to specify the "
"string as an argument when you call @code{make-keymap}, "
"@code{make-sparse-keymap} (@pxref{Creating Keymaps}), or "
"@code{define-prefix-command} (@pxref{Definition of define-prefix-command}).  "
"If you do not want the keymap to operate as a menu, don't specify a prompt "
"string for it."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:2408
#, no-wrap
msgid "keymap-prompt keymap"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:2411
msgid ""
"This function returns the overall prompt string of @var{keymap}, or "
"@code{nil} if it has none."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2419
msgid ""
"The menu's items are the bindings in the keymap.  Each binding associates an "
"event type to a definition, but the event types have no significance for the "
"menu appearance.  (Usually we use pseudo-events, symbols that the keyboard "
"cannot generate, as the event types for menu item bindings.)  The menu is "
"generated entirely from the bindings that correspond in the keymap to these "
"events."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2426
msgid ""
"The order of items in the menu is the same as the order of bindings in the "
"keymap.  Since @code{define-key} puts new bindings at the front, you should "
"define the menu items starting at the bottom of the menu and moving to the "
"top, if you care about the order.  When you add an item to an existing menu, "
"you can specify its position in the menu using @code{keymap-set-after} "
"(@pxref{Modifying Menus})."
msgstr ""

#. type: subsubsection
#: original_texis/keymaps.texi:2432 original_texis/keymaps.texi:2434 original_texis/keymaps.texi:2435
#, no-wrap
msgid "Simple Menu Items"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:2432
msgid "A simple kind of menu key binding."
msgstr ""

#. type: subsubsection
#: original_texis/keymaps.texi:2432 original_texis/keymaps.texi:2484 original_texis/keymaps.texi:2485
#, no-wrap
msgid "Extended Menu Items"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:2432
msgid "More complex menu item definitions."
msgstr ""

#. type: subsubsection
#: original_texis/keymaps.texi:2432 original_texis/keymaps.texi:2612 original_texis/keymaps.texi:2613
#, no-wrap
msgid "Menu Separators"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:2432
msgid "Drawing a horizontal line through a menu."
msgstr ""

#. type: subsubsection
#: original_texis/keymaps.texi:2432 original_texis/keymaps.texi:2697 original_texis/keymaps.texi:2698
#, no-wrap
msgid "Alias Menu Items"
msgstr ""

#. type: menuentry
#: original_texis/keymaps.texi:2432
msgid "Using command aliases in menu items."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2439
msgid ""
"The simpler (and original) way to define a menu item is to bind some event "
"type (it doesn't matter what event type) to a binding like this:"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:2442
#, no-wrap
msgid "(@var{item-string} . @var{real-binding})\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2451
msgid ""
"The @sc{car}, @var{item-string}, is the string to be displayed in the menu.  "
"It should be short---preferably one to three words.  It should describe the "
"action of the command it corresponds to.  Note that not all graphical "
"toolkits can display non-@acronym{ASCII} text in menus (it will work for "
"keyboard menus and will work to a large extent with the GTK+ toolkit)."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2453
msgid "You can also supply a second string, called the help string, as follows:"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:2456
#, no-wrap
msgid "(@var{item-string} @var{help} . @var{real-binding})\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2462
msgid ""
"@var{help} specifies a help-echo string to display while the mouse is on "
"that item in the same way as @code{help-echo} text properties (@pxref{Help "
"display})."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2467
msgid ""
"As far as @code{define-key} is concerned, @var{item-string} and "
"@var{help-string} are part of the event's binding.  However, "
"@code{lookup-key} returns just @var{real-binding}, and only "
"@var{real-binding} is used for executing the key."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2470
msgid ""
"If @var{real-binding} is @code{nil}, then @var{item-string} appears in the "
"menu but cannot be selected."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2478
msgid ""
"If @var{real-binding} is a symbol and has a non-@code{nil} "
"@code{menu-enable} property, that property is an expression that controls "
"whether the menu item is enabled.  Every time the keymap is used to display "
"a menu, Emacs evaluates the expression, and it enables the menu item only if "
"the expression's value is non-@code{nil}.  When a menu item is disabled, it "
"is displayed in a fuzzy fashion, and cannot be selected."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2483
msgid ""
"The menu bar does not recalculate which items are enabled every time you "
"look at a menu.  This is because the X toolkit requires the whole tree of "
"menus in advance.  To force recalculation of the menu bar, call "
"@code{force-mode-line-update} (@pxref{Mode Line Format})."
msgstr ""

#. type: kindex
#: original_texis/keymaps.texi:2486
#, no-wrap
msgid "menu-item"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:2487
#, no-wrap
msgid "extended menu item"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2493
msgid ""
"An extended-format menu item is a more flexible and also cleaner alternative "
"to the simple format.  You define an event type with a binding that's a list "
"starting with the symbol @code{menu-item}.  For a non-selectable string, the "
"binding looks like this:"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:2496
#, no-wrap
msgid "(menu-item @var{item-name})\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2501
msgid ""
"A string starting with two or more dashes specifies a separator line; see "
"@ref{Menu Separators}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2504
msgid ""
"To define a real menu item which can be selected, the extended format "
"binding looks like this:"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:2508
#, no-wrap
msgid ""
"(menu-item @var{item-name} @var{real-binding}\n"
"    . @var{item-property-list})\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2513
msgid ""
"Here, @var{item-name} is an expression which evaluates to the menu item "
"string.  Thus, the string need not be a constant."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2520
msgid ""
"The third element, @var{real-binding}, can be the command to execute (in "
"which case you get a normal menu item).  It can also be a keymap, which will "
"result in a submenu, and @var{item-name} is used as the submenu name.  "
"Finally, it can be @code{nil}, in which case you will get a non-selectable "
"menu item.  This is mostly useful when creating separator lines and the "
"like."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2524
msgid ""
"The tail of the list, @var{item-property-list}, has the form of a property "
"list (@pxref{Property Lists}) which contains other information."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2526
msgid "Here is a table of the properties that are supported:"
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2528
#, no-wrap
msgid ":enable @var{form}"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2532
msgid ""
"The result of evaluating @var{form} determines whether the item is enabled "
"(non-@code{nil} means yes).  If the item is not enabled, you can't really "
"click on it."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2533
#, no-wrap
msgid ":visible @var{form}"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2538
msgid ""
"The result of evaluating @var{form} determines whether the item should "
"actually appear in the menu (non-@code{nil} means yes).  If the item does "
"not appear, then the menu is displayed as if this item were not defined at "
"all."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2539 original_texis/keymaps.texi:3333
#, no-wrap
msgid ":help @var{help}"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2545
msgid ""
"The value of this property, @var{help}, specifies a help-echo string to "
"display while the mouse is on that item.  This is displayed in the same way "
"as @code{help-echo} text properties (@pxref{Help display}).  Note that this "
"must be a constant string, unlike the @code{help-echo} property for text and "
"overlays."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2546
#, no-wrap
msgid ":button (@var{type} . @var{selected})"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2551
msgid ""
"This property provides a way to define radio buttons and toggle buttons.  "
"The @sc{car}, @var{type}, says which: it should be @code{:toggle} or "
"@code{:radio}.  The @sc{cdr}, @var{selected}, should be a form; the result "
"of evaluating it says whether this button is currently selected."
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2557
msgid ""
"A @dfn{toggle} is a menu item which is labeled as either on or off according "
"to the value of @var{selected}.  The command itself should toggle "
"@var{selected}, setting it to @code{t} if it is @code{nil}, and to "
"@code{nil} if it is @code{t}.  Here is how the menu item to toggle the "
"@code{debug-on-error} flag is defined:"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:2563
#, no-wrap
msgid ""
"(menu-item \"Debug on Error\" toggle-debug-on-error\n"
"           :button (:toggle\n"
"                    . (and (boundp 'debug-on-error)\n"
"                           debug-on-error)))\n"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2568
msgid ""
"This works because @code{toggle-debug-on-error} is defined as a command "
"which toggles the variable @code{debug-on-error}."
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2575
msgid ""
"@dfn{Radio buttons} are a group of menu items, in which at any time one and "
"only one is selected.  There should be a variable whose value says which one "
"is selected at any time.  The @var{selected} form for each radio button in "
"the group should check whether the variable has the right value for "
"selecting that button.  Clicking on the button should set the variable so "
"that the button you clicked on becomes selected."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2576
#, no-wrap
msgid ":key-sequence @var{key-sequence}"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2583
msgid ""
"This property specifies which key sequence to display as keyboard "
"equivalent.  Before Emacs displays @var{key-sequence} in the menu, it "
"verifies that @var{key-sequence} is really equivalent to this menu item, so "
"it only has an effect if you specify a correct key sequence.  Specifying "
"@code{nil} for @var{key-sequence} is equivalent to the @code{:key-sequence} "
"attribute being absent."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2584
#, no-wrap
msgid ":keys @var{string}"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2588
msgid ""
"This property specifies that @var{string} is the string to display as the "
"keyboard equivalent for this menu item.  You can use the @samp{\\\\[...]} "
"documentation construct in @var{string}."
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2594
msgid ""
"This property can also be a function (which will be called with no "
"arguments).  This function should return a string.  This function will be "
"called every time the menu is computed, so using a function that takes a lot "
"of time to compute is not a good idea, and it should expect to be called "
"from any context."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2595
#, no-wrap
msgid ":filter @var{filter-fn}"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2600
msgid ""
"This property provides a way to compute the menu item dynamically.  The "
"property value @var{filter-fn} should be a function of one argument; when it "
"is called, its argument will be @var{real-binding}.  The function should "
"return the binding to use instead."
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2604
msgid ""
"Emacs can call this function at any time that it does redisplay or operates "
"on menu data structures, so you should write it so it can safely be called "
"at any time."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2605
#, no-wrap
msgid ":wrap @var{wrap-p}"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2610
msgid ""
"If @var{wrap-p} is non-@code{nil} inside a tool bar, the menu item is not "
"displayed, but instead causes subsequent items to be displayed on a new "
"line.  This is not supported when Emacs uses the GTK+ or Nextstep toolkits."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:2614
#, no-wrap
msgid "menu separators"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2619
msgid ""
"A menu separator is a kind of menu item that doesn't display any "
"text---instead, it divides the menu into subparts with a horizontal line.  A "
"separator looks like this in the menu keymap:"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:2622
#, no-wrap
msgid "(menu-item @var{separator-type})\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2626
msgid "where @var{separator-type} is a string starting with two or more dashes."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2630
msgid ""
"In the simplest case, @var{separator-type} consists of only dashes.  That "
"specifies the default kind of separator.  (For compatibility, @code{\"\"} "
"and @code{-} also count as separators.)"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2633
msgid ""
"Certain other values of @var{separator-type} specify a different style of "
"separator.  Here is a table of them:"
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2635
#, no-wrap
msgid "\"--no-line\""
msgstr ""

#. type: itemx
#: original_texis/keymaps.texi:2636
#, no-wrap
msgid "\"--space\""
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2638
msgid "An extra vertical space, with no actual line."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2639
#, no-wrap
msgid "\"--single-line\""
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2641
msgid "A single line in the menu's foreground color."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2642
#, no-wrap
msgid "\"--double-line\""
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2644
msgid "A double line in the menu's foreground color."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2645
#, no-wrap
msgid "\"--single-dashed-line\""
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2647
msgid "A single dashed line in the menu's foreground color."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2648
#, no-wrap
msgid "\"--double-dashed-line\""
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2650
msgid "A double dashed line in the menu's foreground color."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2651
#, no-wrap
msgid "\"--shadow-etched-in\""
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2654
msgid ""
"A single line with a 3D sunken appearance.  This is the default, used "
"separators consisting of dashes only."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2655
#, no-wrap
msgid "\"--shadow-etched-out\""
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2657
msgid "A single line with a 3D raised appearance."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2658
#, no-wrap
msgid "\"--shadow-etched-in-dash\""
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2660
msgid "A single dashed line with a 3D sunken appearance."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2661
#, no-wrap
msgid "\"--shadow-etched-out-dash\""
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2663
msgid "A single dashed line with a 3D raised appearance."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2664
#, no-wrap
msgid "\"--shadow-double-etched-in\""
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2666
msgid "Two lines with a 3D sunken appearance."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2667
#, no-wrap
msgid "\"--shadow-double-etched-out\""
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2669
msgid "Two lines with a 3D raised appearance."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2670
#, no-wrap
msgid "\"--shadow-double-etched-in-dash\""
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2672
msgid "Two dashed lines with a 3D sunken appearance."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2673
#, no-wrap
msgid "\"--shadow-double-etched-out-dash\""
msgstr ""

#. type: table
#: original_texis/keymaps.texi:2675
msgid "Two dashed lines with a 3D raised appearance."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2681
msgid ""
"You can also give these names in another style, adding a colon after the "
"double-dash and replacing each single dash with capitalization of the "
"following word.  Thus, @code{\"--:singleLine\"}, is equivalent to "
"@code{\"--single-line\"}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2684
msgid ""
"You can use a longer form to specify keywords such as @code{:enable} and "
"@code{:visible} for a menu separator:"
msgstr ""

#. type: code{#1}
#: original_texis/keymaps.texi:2686
msgid "(menu-item @var{separator-type} nil . @var{item-property-list})"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2688
msgid "For example:"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:2691
#, no-wrap
msgid "(menu-item \"--\" nil :visible (boundp 'foo))\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2696
msgid ""
"Some systems and display toolkits don't really handle all of these separator "
"types.  If you use a type that isn't supported, the menu displays a similar "
"kind of separator that is supported."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2706
msgid ""
"Sometimes it is useful to make menu items that use the same command but with "
"different enable conditions.  The best way to do this in Emacs now is with "
"extended menu items; before that feature existed, it could be done by "
"defining alias commands and using them in menu items.  Here's an example "
"that makes two aliases for @code{read-only-mode} and gives them different "
"enable conditions:"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:2712
#, no-wrap
msgid ""
"(defalias 'make-read-only 'read-only-mode)\n"
"(put 'make-read-only 'menu-enable '(not buffer-read-only))\n"
"(defalias 'make-writable 'read-only-mode)\n"
"(put 'make-writable 'menu-enable 'buffer-read-only)\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2719
msgid ""
"When using aliases in menus, often it is useful to display the equivalent "
"key bindings for the real command name, not the aliases (which typically "
"don't have any key bindings except for the menu itself).  To request this, "
"give the alias symbol a non-@code{nil} @code{menu-alias} property.  Thus,"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:2723
#, no-wrap
msgid ""
"(put 'make-read-only 'menu-alias t)\n"
"(put 'make-writable 'menu-alias t)\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2728
msgid ""
"causes menu items for @code{make-read-only} and @code{make-writable} to show "
"the keyboard bindings for @code{read-only-mode}."
msgstr ""

#. type: subsection
#: original_texis/keymaps.texi:2730
#, no-wrap
msgid "Menus and the Mouse"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2735
msgid ""
"The usual way to make a menu keymap produce a menu is to make it the "
"definition of a prefix key.  (A Lisp program can explicitly pop up a menu "
"and receive the user's choice---see @ref{Pop-Up Menus}.)"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2742
msgid ""
"If the prefix key ends with a mouse event, Emacs handles the menu keymap by "
"popping up a visible menu, so that the user can select a choice with the "
"mouse.  When the user clicks on a menu item, the event generated is whatever "
"character or symbol has the binding that brought about that menu item.  (A "
"menu item may generate a series of events if the menu has multiple levels or "
"comes from the menu bar.)"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2745
msgid ""
"It's often best to use a button-down event to trigger the menu.  Then the "
"user can select a menu item by releasing the button."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:2746
#, no-wrap
msgid "submenu"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2754
msgid ""
"If the menu keymap contains a binding to a nested keymap, the nested keymap "
"specifies a @dfn{submenu}.  There will be a menu item, labeled by the nested "
"keymap's item string, and clicking on this item automatically pops up the "
"specified submenu.  As a special exception, if the menu keymap contains a "
"single nested keymap and no other menu items, the menu shows the contents of "
"the nested keymap directly, not as a submenu."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2766
msgid ""
"However, if Emacs is compiled without X toolkit support, or on text "
"terminals, submenus are not supported.  Each nested keymap is shown as a "
"menu item, but clicking on it does not automatically pop up the submenu.  If "
"you wish to imitate the effect of submenus, you can do that by giving a "
"nested keymap an item string which starts with @samp{@@}.  This causes Emacs "
"to display the nested keymap using a separate @dfn{menu pane}; the rest of "
"the item string after the @samp{@@} is the pane label.  If Emacs is compiled "
"without X toolkit support, or if a menu is displayed on a text terminal, "
"menu panes are not used; in that case, a @samp{@@} at the beginning of an "
"item string is omitted when the menu label is displayed, and has no other "
"effect."
msgstr ""

#. type: subsection
#: original_texis/keymaps.texi:2768
#, no-wrap
msgid "Menus and the Keyboard"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2774
msgid ""
"When a prefix key ending with a keyboard event (a character or function key) "
"has a definition that is a menu keymap, the keymap operates as a keyboard "
"menu; the user specifies the next event by choosing a menu item with the "
"keyboard."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2783
msgid ""
"Emacs displays the keyboard menu with the map's overall prompt string, "
"followed by the alternatives (the item strings of the map's bindings), in "
"the echo area.  If the bindings don't all fit at once, the user can type "
"@key{SPC} to see the next line of alternatives.  Successive uses of "
"@key{SPC} eventually get to the end of the menu and then cycle around to the "
"beginning.  (The variable @code{menu-prompt-more-char} specifies which "
"character is used for this; @key{SPC} is the default.)"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2787
msgid ""
"When the user has found the desired alternative from the menu, he or she "
"should type the corresponding character---the one whose binding is that "
"alternative."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:2788
#, no-wrap
msgid "menu-prompt-more-char"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:2792
msgid ""
"This variable specifies the character to use to ask to see the next line of "
"a menu.  Its initial value is 32, the code for @key{SPC}."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:2796
#, no-wrap
msgid "menu definition example"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2803
msgid ""
"Here is a complete example of defining a menu keymap.  It is the definition "
"of the @samp{Replace} submenu in the @samp{Edit} menu in the menu bar, and "
"it uses the extended menu item format (@pxref{Extended Menu Items}).  First "
"we create the keymap, and give it a name:"
msgstr ""

#. type: smallexample
#: original_texis/keymaps.texi:2806
#, no-wrap
msgid "(defvar menu-bar-replace-menu (make-sparse-keymap \"Replace\"))\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2810
msgid "Next we define the menu items:"
msgstr ""

#. type: smallexample
#: original_texis/keymaps.texi:2821
#, no-wrap
msgid ""
"(define-key menu-bar-replace-menu [tags-repl-continue]\n"
"  '(menu-item \"Continue Replace\" multifile-continue\n"
"              :help \"Continue last tags replace operation\"))\n"
"(define-key menu-bar-replace-menu [tags-repl]\n"
"  '(menu-item \"Replace in tagged files\" tags-query-replace\n"
"              :help \"Interactively replace a regexp in all tagged "
"files\"))\n"
"(define-key menu-bar-replace-menu [separator-replace-tags]\n"
"  '(menu-item \"--\"))\n"
";; @r{@dots{}}\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2832
msgid ""
"Note the symbols which the bindings are made for; these appear inside square "
"brackets, in the key sequence being defined.  In some cases, this symbol is "
"the same as the command name; sometimes it is different.  These symbols are "
"treated as function keys, but they are not real function keys on the "
"keyboard.  They do not affect the functioning of the menu itself, but they "
"are echoed in the echo area when the user selects from the menu, and they "
"appear in the output of @code{where-is} and @code{apropos}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2838
msgid ""
"The menu in this example is intended for use with the mouse.  If a menu is "
"intended for use with the keyboard, that is, if it is bound to a key "
"sequence ending with a keyboard event, then the menu items should be bound "
"to characters or real function keys, that can be typed with the keyboard."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2843
msgid ""
"The binding whose definition is @code{(\"--\")} is a separator line.  Like a "
"real menu item, the separator has a key symbol, in this case "
"@code{separator-replace-tags}.  If one menu has two separators, they must "
"have two different key symbols."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2845
msgid "Here is how we make this menu appear as an item in the parent menu:"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:2849
#, no-wrap
msgid ""
"(define-key menu-bar-edit-menu [replace]\n"
"  (list 'menu-item \"Replace\" menu-bar-replace-menu))\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2857
msgid ""
"Note that this incorporates the submenu keymap, which is the value of the "
"variable @code{menu-bar-replace-menu}, rather than the symbol "
"@code{menu-bar-replace-menu} itself.  Using that symbol in the parent menu "
"item would be meaningless because @code{menu-bar-replace-menu} is not a "
"command."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2860
msgid ""
"If you wanted to attach the same replace menu to a mouse click, you can do "
"it this way:"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:2864
#, no-wrap
msgid ""
"(define-key global-map [C-S-down-mouse-1]\n"
"   menu-bar-replace-menu)\n"
msgstr ""

#. type: subsection
#: original_texis/keymaps.texi:2867
#, no-wrap
msgid "The Menu Bar"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:2868
#, no-wrap
msgid "menu bar"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2874
msgid ""
"Emacs usually shows a @dfn{menu bar} at the top of each frame.  @xref{Menu "
"Bars,,,emacs, The GNU Emacs Manual}.  Menu bar items are subcommands of the "
"fake function key @key{MENU-BAR}, as defined in the active keymaps."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2879
msgid ""
"To add an item to the menu bar, invent a fake function key of your own "
"(let's call it @var{key}), and make a binding for the key sequence "
"@code{[menu-bar @var{key}]}.  Most often, the binding is a menu keymap, so "
"that pressing a button on the menu bar item leads to another menu."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2885
msgid ""
"When more than one active keymap defines the same function key for the menu "
"bar, the item appears just once.  If the user clicks on that menu bar item, "
"it brings up a single, combined menu containing all the subcommands of that "
"item---the global subcommands, the local subcommands, and the minor mode "
"subcommands."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2890
msgid ""
"The variable @code{overriding-local-map} is normally ignored when "
"determining the menu bar contents.  That is, the menu bar is computed from "
"the keymaps that would be active if @code{overriding-local-map} were "
"@code{nil}.  @xref{Active Keymaps}."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2892
msgid "Here's an example of setting up a menu bar item:"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:2899
#, no-wrap
msgid ""
";; @r{Make a menu keymap (with a prompt string)}\n"
";; @r{and make it the menu bar item's definition.}\n"
"(define-key global-map [menu-bar words]\n"
"  (cons \"Words\" (make-sparse-keymap \"Words\")))\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:2906
#, no-wrap
msgid ""
";; @r{Define specific subcommands in this menu.}\n"
"(define-key global-map\n"
"  [menu-bar words forward]\n"
"  '(\"Forward word\" . forward-word))\n"
msgstr ""

#. type: group
#: original_texis/keymaps.texi:2911
#, no-wrap
msgid ""
"(define-key global-map\n"
"  [menu-bar words backward]\n"
"  '(\"Backward word\" . backward-word))\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2918
msgid ""
"A local keymap can cancel a menu bar item made by the global keymap by "
"rebinding the same fake function key with @code{undefined} as the binding.  "
"For example, this is how Dired suppresses the @samp{Edit} menu bar item:"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:2921
#, no-wrap
msgid "(define-key dired-mode-map [menu-bar edit] 'undefined)\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2928
msgid ""
"Here, @code{edit} is the symbol produced by a fake function key, it is used "
"by the global map for the @samp{Edit} menu bar item.  The main reason to "
"suppress a global menu bar item is to regain space for mode-specific items."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:2929
#, no-wrap
msgid "menu-bar-final-items"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:2932
msgid ""
"Normally the menu bar shows global items followed by items defined by the "
"local maps."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:2937
msgid ""
"This variable holds a list of fake function keys for items to display at the "
"end of the menu bar rather than in normal sequence.  The default value is "
"@code{(help-menu)}; thus, the @samp{Help} menu item normally appears at the "
"end of the menu bar, following local menu items."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:2939
#, no-wrap
msgid "menu-bar-update-hook"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:2945
msgid ""
"This normal hook is run by redisplay to update the menu bar contents, before "
"redisplaying the menu bar.  You can use it to update menus whose contents "
"should vary.  Since this hook is run frequently, we advise you to ensure "
"that the functions it calls do not take much time in the usual case."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2954
msgid ""
"Next to every menu bar item, Emacs displays a key binding that runs the same "
"command (if such a key binding exists).  This serves as a convenient hint "
"for users who do not know the key binding.  If a command has multiple "
"bindings, Emacs normally displays the first one it finds.  You can specify "
"one particular key binding by assigning an @code{:advertised-binding} symbol "
"property to the command.  @xref{Keys in Documentation}."
msgstr ""

#. type: subsection
#: original_texis/keymaps.texi:2956
#, no-wrap
msgid "Tool bars"
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:2957
#, no-wrap
msgid "tool bar"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2962
msgid ""
"A @dfn{tool bar} is a row of clickable icons at the top of a frame, just "
"below the menu bar.  @xref{Tool Bars,,,emacs, The GNU Emacs Manual}.  Emacs "
"normally shows a tool bar on graphical displays."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2970
msgid ""
"On each frame, the frame parameter @code{tool-bar-lines} controls how many "
"lines' worth of height to reserve for the tool bar.  A zero value suppresses "
"the tool bar.  If the value is nonzero, and @code{auto-resize-tool-bars} is "
"non-@code{nil}, the tool bar expands and contracts automatically as needed "
"to hold the specified contents.  If the value is @code{grow-only}, the tool "
"bar expands automatically, but does not contract automatically."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2975
msgid ""
"The tool bar contents are controlled by a menu keymap attached to a fake "
"function key called @key{TOOL-BAR} (much like the way the menu bar is "
"controlled).  So you define a tool bar item using @code{define-key}, like "
"this:"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:2978
#, no-wrap
msgid "(define-key global-map [tool-bar @var{key}] @var{item})\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2984
msgid ""
"where @var{key} is a fake function key to distinguish this item from other "
"items, and @var{item} is a menu item key binding (@pxref{Extended Menu "
"Items}), which says how to display this item and how it behaves."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2990
msgid ""
"The usual menu keymap item properties, @code{:visible}, @code{:enable}, "
"@code{:button}, and @code{:filter}, are useful in tool bar bindings and have "
"their normal meanings.  The @var{real-binding} in the item must be a "
"command, not a keymap; in other words, it does not work to define a tool bar "
"icon as a prefix key."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2994
msgid ""
"The @code{:help} property specifies a help-echo string to display while the "
"mouse is on that item.  This is displayed in the same way as "
"@code{help-echo} text properties (@pxref{Help display})."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:2997
msgid ""
"In addition, you should use the @code{:image} property; this is how you "
"specify the image to display in the tool bar:"
msgstr ""

#. type: item
#: original_texis/keymaps.texi:2999
#, no-wrap
msgid ":image @var{image}"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:3003
msgid ""
"@var{image} is either a single image specification (@pxref{Images}) or a "
"vector of four image specifications.  If you use a vector of four, one of "
"them is used, depending on circumstances:"
msgstr ""

#. type: item
#: original_texis/keymaps.texi:3005
#, no-wrap
msgid "item 0"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:3007
msgid "Used when the item is enabled and selected."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:3007
#, no-wrap
msgid "item 1"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:3009
msgid "Used when the item is enabled and deselected."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:3009
#, no-wrap
msgid "item 2"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:3011
msgid "Used when the item is disabled and selected."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:3011
#, no-wrap
msgid "item 3"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:3013
msgid "Used when the item is disabled and deselected."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:3018
msgid ""
"The GTK+ and NS versions of Emacs ignores items 1 to 3, because disabled "
"and/or deselected images are autocomputed from item 0."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:3022
msgid ""
"If @var{image} is a single image specification, Emacs draws the tool bar "
"button in disabled state by applying an edge-detection algorithm to the "
"image."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:3026
msgid ""
"The @code{:rtl} property specifies an alternative image to use for "
"right-to-left languages.  Only the GTK+ version of Emacs supports this at "
"present."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:3030
msgid ""
"Some toolkits display both an image and a text in the toolbar.  If you want "
"to force using only the image, use a @code{:vert-only} non-@code{nil} "
"property."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:3039
msgid ""
"Like the menu bar, the tool bar can display separators (@pxref{Menu "
"Separators}).  Tool bar separators are vertical rather than horizontal, "
"though, and only a single style is supported.  They are represented in the "
"tool bar keymap by @code{(menu-item \"--\")} entries; properties like "
"@code{:visible} are not supported for tool bar separators.  Separators are "
"rendered natively in GTK+ and Nextstep tool bars; in the other cases, they "
"are rendered using an image of a vertical line."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:3048
msgid ""
"The default tool bar is defined so that items specific to editing do not "
"appear for major modes whose command symbol has a @code{mode-class} property "
"of @code{special} (@pxref{Major Mode Conventions}).  Major modes may add "
"items to the global bar by binding @code{[tool-bar @var{foo}]} in their "
"local map.  It makes sense for some major modes to replace the default tool "
"bar items completely, since not many can be accommodated conveniently, and "
"the default bindings make this easy by using an indirection through "
"@code{tool-bar-map}."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:3049
#, no-wrap
msgid "tool-bar-map"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:3051
msgid "By default, the global map binds @code{[tool-bar]} as follows:"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:3056
#, no-wrap
msgid ""
"(keymap-global-set \"<tool-bar>\"\n"
"                   `(menu-item ,(purecopy \"tool bar\") ignore\n"
"                               :filter tool-bar-make-keymap))\n"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:3065
msgid ""
"The function @code{tool-bar-make-keymap}, in turn, derives the actual tool "
"bar map dynamically from the value of the variable @code{tool-bar-map}.  "
"Hence, you should normally adjust the default (global) tool bar by changing "
"that map.  Some major modes, such as Info mode, completely replace the "
"global tool bar by making @code{tool-bar-map} buffer-local and setting it to "
"a different keymap."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:3069
msgid "There are two convenience functions for defining tool bar items, as follows."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:3070
#, no-wrap
msgid "tool-bar-add-item icon def key &rest props"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:3081
msgid ""
"This function adds an item to the tool bar by modifying "
"@code{tool-bar-map}.  The image to use is defined by @var{icon}, which is "
"the base name of an XPM, XBM or PBM image file to be located by "
"@code{find-image}.  Given a value @samp{\"exit\"}, say, @file{exit.xpm}, "
"@file{exit.pbm} and @file{exit.xbm} would be searched for in that order on a "
"color display.  On a monochrome display, the search order is @samp{.pbm}, "
"@samp{.xbm} and @samp{.xpm}.  The binding to use is the command @var{def}, "
"and @var{key} is the fake function key symbol in the prefix keymap.  The "
"remaining arguments @var{props} are additional property list elements to add "
"to the menu item specification."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:3084
msgid ""
"To define items in some local map, bind @code{tool-bar-map} with @code{let} "
"around calls of this function:"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:3090
#, no-wrap
msgid ""
"(defvar foo-tool-bar-map\n"
"  (let ((tool-bar-map (make-sparse-keymap)))\n"
"    (tool-bar-add-item @dots{})\n"
"    @dots{}\n"
"    tool-bar-map))\n"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:3093
#, no-wrap
msgid "tool-bar-add-item-from-menu command icon &optional map &rest props"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:3102
msgid ""
"This function is a convenience for defining tool bar items which are "
"consistent with existing menu bar bindings.  The binding of @var{command} is "
"looked up in the menu bar in @var{map} (default @code{global-map}) and "
"modified to add an image specification for @var{icon}, which is found in the "
"same way as by @code{tool-bar-add-item}.  The resulting binding is then "
"placed in @code{tool-bar-map}, so use this function only for global tool bar "
"items."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:3106
msgid ""
"@var{map} must contain an appropriate keymap bound to @code{[menu-bar]}.  "
"The remaining arguments @var{props} are additional property list elements to "
"add to the menu item specification."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:3108
#, no-wrap
msgid ""
"tool-bar-local-item-from-menu command icon in-map &optional from-map &rest "
"props"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:3114
msgid ""
"This function is used for making non-global tool bar items.  Use it like "
"@code{tool-bar-add-item-from-menu} except that @var{in-map} specifies the "
"local map to make the definition in.  The argument @var{from-map} is like "
"the @var{map} argument of @code{tool-bar-add-item-from-menu}."
msgstr ""

#. type: vindex
#: original_texis/keymaps.texi:3116
#, no-wrap
msgid "secondary-tool-bar-map"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:3125
msgid ""
"In addition to the tool bar items defined in @code{tool-bar-map}, Emacs also "
"supports displaying an additional row of ``secondary'' tool bar items "
"specified in the keymap @code{secondary-tool-bar-map}.  These items are "
"normally displayed below those defined within @code{tool-bar-map} if the "
"tool bar is positioned at the top of its frame, but are displayed above them "
"if the tool bar is positioned at the bottom (@pxref{Layout Parameters}.)  "
"They are not displayed if the tool bar is positioned at the left or right of "
"a frame."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:3126
#, no-wrap
msgid "auto-resize-tool-bars"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:3130
msgid ""
"If this variable is non-@code{nil}, the tool bar automatically resizes to "
"show all defined tool bar items---but not larger than a quarter of the "
"frame's height."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:3134
msgid ""
"If the value is @code{grow-only}, the tool bar expands automatically, but "
"does not contract automatically.  To contract the tool bar, the user has to "
"redraw the frame by entering @kbd{C-l}."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:3137
msgid ""
"If Emacs is built with GTK+ or Nextstep, the tool bar can only show one "
"line, so this variable has no effect."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:3139
#, no-wrap
msgid "auto-raise-tool-bar-buttons"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:3142
msgid ""
"If this variable is non-@code{nil}, tool bar items display in raised form "
"when the mouse moves over them."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:3144
#, no-wrap
msgid "tool-bar-button-margin"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:3147
msgid ""
"This variable specifies an extra margin to add around tool bar items.  The "
"value is an integer, a number of pixels.  The default is 4."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:3149
#, no-wrap
msgid "tool-bar-button-relief"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:3152
msgid ""
"This variable specifies the shadow width for tool bar items.  The value is "
"an integer, a number of pixels.  The default is 1."
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:3154
#, no-wrap
msgid "tool-bar-border"
msgstr ""

#. type: defvar
#: original_texis/keymaps.texi:3160
msgid ""
"This variable specifies the height of the border drawn below the tool bar "
"area.  An integer specifies height as a number of pixels.  If the value is "
"one of @code{internal-border-width} (the default) or @code{border-width}, "
"the tool bar border height corresponds to the corresponding frame parameter."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:3168
msgid ""
"You can define a special meaning for clicking on a tool bar item with the "
"shift, control, meta, etc., modifiers.  You do this by setting up additional "
"items that relate to the original item through the fake function keys.  "
"Specifically, the additional items should use the modified versions of the "
"same fake function key used to name the original item."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:3170
msgid "Thus, if the original item was defined this way,"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:3175
#, no-wrap
msgid ""
"(define-key global-map [tool-bar shell]\n"
"  '(menu-item \"Shell\" shell\n"
"              :image (image :type xpm :file \"shell.xpm\")))\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:3180
msgid ""
"then here is how you can define clicking on the same tool bar image with the "
"shift modifier:"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:3183
#, no-wrap
msgid "(define-key global-map [tool-bar S-shell] 'some-command)\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:3187
msgid ""
"@xref{Function Keys}, for more information about how to add modifiers to "
"function keys."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:3192
msgid ""
"If you have functions that change whether a tool bar item is enabled or not, "
"this status is not necessarily updated visually immediately.  To force "
"recalculation of the tool bar, call @code{force-mode-line-update} "
"(@pxref{Mode Line Format})."
msgstr ""

#. type: cindex
#: original_texis/keymaps.texi:3195
#, no-wrap
msgid "menu modification"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:3201
msgid ""
"When you insert a new item in an existing menu, you probably want to put it "
"in a particular place among the menu's existing items.  If you use "
"@code{define-key} to add the item, it normally goes at the front of the "
"menu.  To put it elsewhere in the menu, use @code{keymap-set-after}:"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:3202
#, no-wrap
msgid "keymap-set-after map key binding &optional after"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:3213
msgid ""
"Define a binding in @var{map} for @var{key}, with value @var{binding}, just "
"like @code{keymap-set} (@pxref{Changing Key Bindings}), but position the "
"binding in @var{map} after the binding for the event @var{after}.  The "
"argument @var{key} should represent a single menu item or key, and should "
"satisfy @code{key-valid-p} (@pxref{Key Sequences}).  @var{after} should be a "
"single event type---a symbol or a character, not a sequence.  The new "
"binding goes after the binding for @var{after}.  If @var{after} is @code{t} "
"or is omitted, then the new binding goes last, at the end of the keymap.  "
"However, new bindings are added before any inherited keymap."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:3215
msgid "Here is an example:"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:3219
#, no-wrap
msgid ""
"(keymap-set-after my-menu \"<drink>\"\n"
"  '(\"Drink\" . drink-command) 'eat)\n"
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:3224
msgid ""
"makes a binding for the fake function key @key{DRINK} and puts it right "
"after the binding for @key{EAT}."
msgstr ""

#. type: defun
#: original_texis/keymaps.texi:3227
msgid ""
"Here is how to insert an item called @samp{Work} in the @samp{Signals} menu "
"of Shell mode, after the item @code{break}:"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:3231
#, no-wrap
msgid ""
"(keymap-set-after shell-mode-map \"<menu-bar> <signals> <work>\"\n"
"  '(\"Work\" . work-command) 'break)\n"
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:3239
msgid ""
"The following macro provides a convenient way to define pop-up menus and/or "
"menu bar menus."
msgstr ""

#. type: defmac
#: original_texis/keymaps.texi:3240
#, no-wrap
msgid "easy-menu-define symbol maps doc menu"
msgstr ""

#. type: defmac
#: original_texis/keymaps.texi:3243
msgid ""
"This macro defines a pop-up menu and/or menu bar submenu, whose contents are "
"given by @var{menu}."
msgstr ""

#. type: defmac
#: original_texis/keymaps.texi:3248
msgid ""
"If @var{symbol} is non-@code{nil}, it should be a symbol; then this macro "
"defines @var{symbol} as a function for popping up the menu (@pxref{Pop-Up "
"Menus}), with @var{doc} as its documentation string.  @var{symbol} should "
"not be quoted."
msgstr ""

#. type: defmac
#: original_texis/keymaps.texi:3253
msgid ""
"Regardless of the value of @var{symbol}, if @var{maps} is a keymap, the menu "
"is added to that keymap, as a top-level menu for the menu bar (@pxref{Menu "
"Bar}).  It can also be a list of keymaps, in which case the menu is added "
"separately to each of those keymaps."
msgstr ""

#. type: defmac
#: original_texis/keymaps.texi:3257
msgid ""
"The first element of @var{menu} must be a string, which serves as the menu "
"label.  It may be followed by any number of the following keyword-argument "
"pairs:"
msgstr ""

#. type: item
#: original_texis/keymaps.texi:3259
#, no-wrap
msgid ":filter @var{function}"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:3263
msgid ""
"@var{function} must be a function which, if called with one argument---the "
"list of the other menu items---returns the actual items to be displayed in "
"the menu."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:3264 original_texis/keymaps.texi:3311
#, no-wrap
msgid ":visible @var{include}"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:3268
msgid ""
"@var{include} is an expression; if it evaluates to @code{nil}, the menu is "
"made invisible.  @code{:included} is an alias for @code{:visible}."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:3269 original_texis/keymaps.texi:3307
#, no-wrap
msgid ":active @var{enable}"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:3272
msgid ""
"@var{enable} is an expression; if it evaluates to @code{nil}, the menu is "
"not selectable.  @code{:enable} is an alias for @code{:active}."
msgstr ""

#. type: defmac
#: original_texis/keymaps.texi:3275
msgid "The remaining elements in @var{menu} are menu items."
msgstr ""

#. type: defmac
#: original_texis/keymaps.texi:3281
msgid ""
"A menu item can be a vector of three elements, @code{[@var{name} "
"@var{callback} @var{enable}]}.  @var{name} is the menu item name (a "
"string).  @var{callback} is a command to run, or an expression to evaluate, "
"when the item is chosen.  @var{enable} is an expression; if it evaluates to "
"@code{nil}, the item is disabled for selection."
msgstr ""

#. type: defmac
#: original_texis/keymaps.texi:3283
msgid "Alternatively, a menu item may have the form:"
msgstr ""

#. type: smallexample
#: original_texis/keymaps.texi:3286
#, no-wrap
msgid "   [ @var{name} @var{callback} [ @var{keyword} @var{arg} ]... ]\n"
msgstr ""

#. type: defmac
#: original_texis/keymaps.texi:3292
msgid ""
"where @var{name} and @var{callback} have the same meanings as above, and "
"each optional @var{keyword} and @var{arg} pair should be one of the "
"following:"
msgstr ""

#. type: item
#: original_texis/keymaps.texi:3294
#, no-wrap
msgid ":keys @var{keys}"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:3300
msgid ""
"@var{keys} is a string to display as keyboard equivalent to the menu item.  "
"This is normally not needed, as keyboard equivalents are computed "
"automatically.  @var{keys} is expanded with @code{substitute-command-keys} "
"before it is displayed (@pxref{Keys in Documentation})."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:3301
#, no-wrap
msgid ":key-sequence @var{keys}"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:3306
msgid ""
"@var{keys} is a hint indicating which key sequence to display as keyboard "
"equivalent, in case the command is bound to several key sequences.  It has "
"no effect if @var{keys} is not bound to same command as this menu item."
msgstr ""

#. type: table
#: original_texis/keymaps.texi:3310
msgid ""
"@var{enable} is an expression; if it evaluates to @code{nil}, the item is "
"made unselectable.  @code{:enable} is an alias for @code{:active}."
msgstr ""

#. type: table
#: original_texis/keymaps.texi:3315
msgid ""
"@var{include} is an expression; if it evaluates to @code{nil}, the item is "
"made invisible.  @code{:included} is an alias for @code{:visible}."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:3316
#, no-wrap
msgid ":label @var{form}"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:3319
msgid ""
"@var{form} is an expression that is evaluated to obtain a value which serves "
"as the menu item's label (the default is @var{name})."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:3320
#, no-wrap
msgid ":suffix @var{form}"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:3323
msgid ""
"@var{form} is an expression that is dynamically evaluated and whose value is "
"concatenated with the menu entry's label."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:3324
#, no-wrap
msgid ":style @var{style}"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:3328
msgid ""
"@var{style} is a symbol describing the type of menu item; it should be "
"@code{toggle} (a checkbox), or @code{radio} (a radio button), or anything "
"else (meaning an ordinary menu item)."
msgstr ""

#. type: item
#: original_texis/keymaps.texi:3329
#, no-wrap
msgid ":selected @var{selected}"
msgstr ""

#. type: table
#: original_texis/keymaps.texi:3332
msgid ""
"@var{selected} is an expression; the checkbox or radio button is selected "
"whenever the expression's value is non-@code{nil}."
msgstr ""

#. type: table
#: original_texis/keymaps.texi:3335
msgid "@var{help} is a string describing the menu item."
msgstr ""

#. type: defmac
#: original_texis/keymaps.texi:3340
msgid ""
"Alternatively, a menu item can be a string.  Then that string appears in the "
"menu as unselectable text.  A string consisting of dashes is displayed as a "
"separator (@pxref{Menu Separators})."
msgstr ""

#. type: defmac
#: original_texis/keymaps.texi:3343
msgid ""
"Alternatively, a menu item can be a list with the same format as "
"@var{menu}.  This is a submenu."
msgstr ""

#. type: Plain text
#: original_texis/keymaps.texi:3347
msgid ""
"Here is an example of using @code{easy-menu-define} to define a menu similar "
"to the one defined in the example in @ref{Menu Bar}:"
msgstr ""

#. type: example
#: original_texis/keymaps.texi:3354
#, no-wrap
msgid ""
"(easy-menu-define words-menu global-map\n"
"  \"Menu for word navigation commands.\"\n"
"  '(\"Words\"\n"
"     [\"Forward word\" forward-word]\n"
"     [\"Backward word\" backward-word]))\n"
msgstr ""
