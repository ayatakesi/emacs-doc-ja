# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2024-10-06 07:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: original_texis/intro.texi:6 original_texis/intro.texi:7
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:15
msgid ""
"Most of the GNU Emacs text editor is written in the programming language "
"called Emacs Lisp.  You can write new code in Emacs Lisp and install it as "
"an extension to the editor.  However, Emacs Lisp is more than a mere "
"extension language; it is a full computer programming language in its own "
"right.  You can use it as you would any other programming language."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:22
msgid ""
"Because Emacs Lisp is designed for use in an editor, it has special features "
"for scanning and parsing text as well as features for handling files, "
"buffers, displays, subprocesses, and so on.  Emacs Lisp is closely "
"integrated with the editing facilities; thus, editing commands are functions "
"that can also conveniently be called from Lisp programs, and parameters for "
"customization are ordinary Lisp variables."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:29
msgid ""
"This manual attempts to be a full description of Emacs Lisp.  For a "
"beginner's introduction to Emacs Lisp, see @cite{An Introduction to Emacs "
"Lisp Programming}, by Bob Chassell, also published by the Free Software "
"Foundation.  This manual presumes considerable familiarity with the use of "
"Emacs for editing; see @cite{The GNU Emacs Manual} for this basic "
"information."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:34
msgid ""
"Generally speaking, the earlier chapters describe features of Emacs Lisp "
"that have counterparts in many programming languages, and later chapters "
"describe features that are peculiar to Emacs Lisp or relate specifically to "
"editing."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:36
msgid "This is"
msgstr ""

#. type: ifset
#: original_texis/intro.texi:39
msgid "edition @value{VERSION} of"
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:43
msgid ""
"the @cite{GNU Emacs Lisp Reference Manual}, corresponding to Emacs version "
"@value{EMACSVER}."
msgstr ""

#. type: section
#: original_texis/intro.texi:50 original_texis/intro.texi:52 original_texis/intro.texi:53
#, no-wrap
msgid "Caveats"
msgstr ""

#. type: menuentry
#: original_texis/intro.texi:50
msgid "Flaws and a request for help."
msgstr ""

#. type: section
#: original_texis/intro.texi:50 original_texis/intro.texi:96 original_texis/intro.texi:97
#, no-wrap
msgid "Lisp History"
msgstr ""

#. type: menuentry
#: original_texis/intro.texi:50
msgid "Emacs Lisp is descended from Maclisp."
msgstr ""

#. type: section
#: original_texis/intro.texi:50 original_texis/intro.texi:132 original_texis/intro.texi:133
#, no-wrap
msgid "Conventions"
msgstr ""

#. type: menuentry
#: original_texis/intro.texi:50
msgid "How the manual is formatted."
msgstr ""

#. type: node
#: original_texis/intro.texi:50 original_texis/intro.texi:475
#, no-wrap
msgid "Version Info"
msgstr ""

#. type: menuentry
#: original_texis/intro.texi:50
msgid "Which Emacs version is running?"
msgstr ""

#. type: section
#: original_texis/intro.texi:50 original_texis/intro.texi:552 original_texis/intro.texi:553
#, no-wrap
msgid "Acknowledgments"
msgstr ""

#. type: menuentry
#: original_texis/intro.texi:50
msgid "The authors, editors, and sponsors of this manual."
msgstr ""

#. type: cindex
#: original_texis/intro.texi:54
#, no-wrap
msgid "bugs in this manual"
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:62
msgid ""
"This manual has gone through numerous drafts.  It is nearly complete but not "
"flawless.  There are a few topics that are not covered, either because we "
"consider them secondary (such as most of the individual modes) or because "
"they are yet to be written.  Because we are not able to deal with them "
"completely, we have left out several parts intentionally."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:69
msgid ""
"The manual should be fully correct in what it does cover, and it is "
"therefore open to criticism on anything it says---from specific examples and "
"descriptive text, to the ordering of chapters and sections.  If something is "
"confusing, or you find that you have to look at the sources or experiment to "
"learn something not covered in the manual, then perhaps the manual should be "
"fixed.  Please let us know."
msgstr ""

#. type: iftex
#: original_texis/intro.texi:79
msgid ""
"As you use this manual, we ask that you mark pages with corrections so you "
"can later look them up and send them to us.  If you think of a simple, "
"real-life example for a function or group of functions, please make an "
"effort to write it up and send it in.  Please reference any comments to the "
"chapter name, section name, and function name, as appropriate, since page "
"numbers and chapter and section numbers will change and we may have trouble "
"finding the text you are talking about.  Also state the version of the "
"edition you are criticizing."
msgstr ""

#. type: ifnottex
#: original_texis/intro.texi:88
msgid ""
"As you use this manual, we ask that you send corrections as soon as you find "
"them.  If you think of a simple, real life example for a function or group "
"of functions, please make an effort to write it up and send it in.  Please "
"reference any comments to the node name and function or variable name, as "
"appropriate.  Also state the number of the edition you are criticizing."
msgstr ""

#. type: cindex
#: original_texis/intro.texi:90
#, no-wrap
msgid "bugs"
msgstr ""

#. type: cindex
#: original_texis/intro.texi:91
#, no-wrap
msgid "suggestions"
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:95
msgid ""
"Please send comments and corrections using @kbd{M-x report-emacs-bug}.  For "
"more details, @xref{Bugs,, Reporting Bugs, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: cindex
#: original_texis/intro.texi:98
#, no-wrap
msgid "Lisp history"
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:104
msgid ""
"Lisp (LISt Processing language) was first developed in the late 1950s at the "
"Massachusetts Institute of Technology for research in artificial "
"intelligence.  The great power of the Lisp language makes it ideal for other "
"purposes as well, such as writing editing commands."
msgstr ""

#. type: cindex
#: original_texis/intro.texi:105
#, no-wrap
msgid "Maclisp"
msgstr ""

#. type: cindex
#: original_texis/intro.texi:106
#, no-wrap
msgid "Common Lisp"
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:114
msgid ""
"Dozens of Lisp implementations have been built over the years, each with its "
"own idiosyncrasies.  Many of them were inspired by Maclisp, which was "
"written in the 1960s at MIT's Project MAC@.  Eventually the implementers of "
"the descendants of Maclisp came together and developed a standard for Lisp "
"systems, called Common Lisp.  In the meantime, Gerry Sussman and Guy Steele "
"at MIT developed a simplified but very powerful dialect of Lisp, called "
"Scheme."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:123
msgid ""
"GNU Emacs Lisp is largely inspired by Maclisp, and a little by Common Lisp.  "
"If you know Common Lisp, you will notice many similarities.  However, many "
"features of Common Lisp have been omitted or simplified in order to reduce "
"the memory requirements of GNU Emacs.  Sometimes the simplifications are so "
"drastic that a Common Lisp user might be very confused.  We will "
"occasionally point out how GNU Emacs Lisp differs from Common Lisp.  If you "
"don't know Common Lisp, don't worry about it; this manual is self-contained."
msgstr ""

#. type: pindex
#: original_texis/intro.texi:124
#, no-wrap
msgid "cl"
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:127
msgid ""
"A certain amount of Common Lisp emulation is available via the @file{cl-lib} "
"library.  @xref{Top,, Overview, cl, Common Lisp Extensions}."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:131
msgid ""
"Emacs Lisp is not at all influenced by Scheme; but the GNU project has an "
"implementation of Scheme, called Guile.  We use it in all new GNU software "
"that calls for extensibility."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:137
msgid ""
"This section explains the notational conventions that are used in this "
"manual.  You may want to skip this section and refer back to it later."
msgstr ""

#. type: subsection
#: original_texis/intro.texi:146 original_texis/intro.texi:148 original_texis/intro.texi:149
#, no-wrap
msgid "Some Terms"
msgstr ""

#. type: menuentry
#: original_texis/intro.texi:146
msgid "Explanation of terms we use in this manual."
msgstr ""

#. type: node
#: original_texis/intro.texi:146 original_texis/intro.texi:164
#, no-wrap
msgid "nil and t"
msgstr ""

#. type: menuentry
#: original_texis/intro.texi:146
msgid "How the symbols @code{nil} and @code{t} are used."
msgstr ""

#. type: subsection
#: original_texis/intro.texi:146 original_texis/intro.texi:213 original_texis/intro.texi:214
#, no-wrap
msgid "Evaluation Notation"
msgstr ""

#. type: menuentry
#: original_texis/intro.texi:146
msgid "The format we use for examples of evaluation."
msgstr ""

#. type: subsection
#: original_texis/intro.texi:146 original_texis/intro.texi:250 original_texis/intro.texi:251
#, no-wrap
msgid "Printing Notation"
msgstr ""

#. type: menuentry
#: original_texis/intro.texi:146
msgid "The format we use when examples print text."
msgstr ""

#. type: subsection
#: original_texis/intro.texi:146 original_texis/intro.texi:276 original_texis/intro.texi:277
#, no-wrap
msgid "Error Messages"
msgstr ""

#. type: menuentry
#: original_texis/intro.texi:146
msgid "The format we use for examples of errors."
msgstr ""

#. type: subsection
#: original_texis/intro.texi:146 original_texis/intro.texi:290 original_texis/intro.texi:291
#, no-wrap
msgid "Buffer Text Notation"
msgstr ""

#. type: menuentry
#: original_texis/intro.texi:146
msgid "The format we use for buffer contents in examples."
msgstr ""

#. type: subsection
#: original_texis/intro.texi:146 original_texis/intro.texi:314 original_texis/intro.texi:315
#, no-wrap
msgid "Format of Descriptions"
msgstr ""

#. type: menuentry
#: original_texis/intro.texi:146
msgid "Notation for describing functions, variables, etc."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:158
msgid ""
"Throughout this manual, the phrases ``the Lisp reader'' and ``the Lisp "
"printer'' refer to those routines in Lisp that convert textual "
"representations of Lisp objects into actual Lisp objects, and vice versa.  "
"@xref{Printed Representation}, for more details.  You, the person reading "
"this manual, are thought of as the programmer and are addressed as ``you''.  "
"The user is the person who uses Lisp programs, including those you write."
msgstr ""

#. type: cindex
#: original_texis/intro.texi:159
#, no-wrap
msgid "typographic conventions"
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:163
msgid ""
"Examples of Lisp code are formatted like this: @code{(list 1 2 3)}.  Names "
"that represent metasyntactic variables, or arguments to a function being "
"described, are formatted like this: @var{first-number}."
msgstr ""

#. type: subsection
#: original_texis/intro.texi:165
#, no-wrap
msgid "@code{nil} and @code{t}"
msgstr ""

#. type: cindex
#: original_texis/intro.texi:166
#, no-wrap
msgid "truth value"
msgstr ""

#. type: cindex
#: original_texis/intro.texi:167
#, no-wrap
msgid "boolean"
msgstr ""

#. type: code{#1}
#: original_texis/intro.texi:169
#, no-wrap
msgid "nil"
msgstr ""

#. type: cindex
#: original_texis/intro.texi:170
#, no-wrap
msgid "false"
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:175
msgid ""
"In Emacs Lisp, the symbol @code{nil} has three separate meanings: it is a "
"symbol with the name @samp{nil}; it is the logical truth value @var{false}; "
"and it is the empty list---the list of zero elements.  When used as a "
"variable, @code{nil} always has the value @code{nil}."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:182
msgid ""
"As far as the Lisp reader is concerned, @samp{()} and @samp{nil} are "
"identical: they stand for the same object, the symbol @code{nil}.  The "
"different ways of writing the symbol are intended entirely for human "
"readers.  After the Lisp reader has read either @samp{()} or @samp{nil}, "
"there is no way to determine which representation was actually written by "
"the programmer."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:187
msgid ""
"In this manual, we write @code{()} when we wish to emphasize that it means "
"the empty list, and we write @code{nil} when we wish to emphasize that it "
"means the truth value @var{false}.  That is a good convention to use in Lisp "
"programs also."
msgstr ""

#. type: example
#: original_texis/intro.texi:191
#, no-wrap
msgid ""
"(cons 'foo ())                ; @r{Emphasize the empty list}\n"
"(setq foo-flag nil)           ; @r{Emphasize the truth value @var{false}}\n"
msgstr ""

#. type: code{#1}
#: original_texis/intro.texi:193
#, no-wrap
msgid "t"
msgstr ""

#. type: cindex
#: original_texis/intro.texi:194
#, no-wrap
msgid "true"
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:201
msgid ""
"In contexts where a truth value is expected, any non-@code{nil} value is "
"considered to be @var{true}.  However, @code{t} is the preferred way to "
"represent the truth value @var{true}.  When you need to choose a value that "
"represents @var{true}, and there is no other basis for choosing, use "
"@code{t}.  The symbol @code{t} always has the value @code{t}."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:207
msgid ""
"In Emacs Lisp, @code{nil} and @code{t} are special symbols that always "
"evaluate to themselves.  This is so that you do not need to quote them to "
"use them as constants in a program.  An attempt to change their values "
"results in a @code{setting-constant} error.  @xref{Constant Variables}."
msgstr ""

#. type: defun
#: original_texis/intro.texi:208
#, no-wrap
msgid "booleanp object"
msgstr ""

#. type: defun
#: original_texis/intro.texi:211
msgid ""
"Return non-@code{nil} if @var{object} is one of the two canonical boolean "
"values: @code{t} or @code{nil}."
msgstr ""

#. type: cindex
#: original_texis/intro.texi:215
#, no-wrap
msgid "evaluation notation"
msgstr ""

#. type: cindex
#: original_texis/intro.texi:216
#, no-wrap
msgid "documentation notation"
msgstr ""

#. type: cindex
#: original_texis/intro.texi:217
#, no-wrap
msgid "notation"
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:222
msgid ""
"A Lisp expression that you can evaluate is called a @dfn{form}.  Evaluating "
"a form always produces a result, which is a Lisp object.  In the examples in "
"this manual, this is indicated with @samp{@result{}}:"
msgstr ""

#. type: example
#: original_texis/intro.texi:226
#, no-wrap
msgid ""
"(car '(1 2))\n"
"     @result{} 1\n"
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:230
msgid "You can read this as ``@code{(car '(1 2))} evaluates to 1''."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:235
msgid ""
"When a form is a macro call, it expands into a new form for Lisp to "
"evaluate.  We show the result of the expansion with @samp{@expansion{}}.  We "
"may or may not show the result of the evaluation of the expanded form."
msgstr ""

#. type: example
#: original_texis/intro.texi:240
#, no-wrap
msgid ""
"(third '(a b c))\n"
"     @expansion{} (car (cdr (cdr '(a b c))))\n"
"     @result{} c\n"
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:245
msgid ""
"To help describe one form, we sometimes show another form that produces "
"identical results.  The exact equivalence of two forms is indicated with "
"@samp{@equiv{}}."
msgstr ""

#. type: example
#: original_texis/intro.texi:248
#, no-wrap
msgid "(make-sparse-keymap) @equiv{} (list 'keymap)\n"
msgstr ""

#. type: cindex
#: original_texis/intro.texi:252
#, no-wrap
msgid "printing notation"
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:261
msgid ""
"Many of the examples in this manual print text when they are evaluated.  If "
"you execute example code in a Lisp Interaction buffer (such as the buffer "
"@file{*scratch*}) by typing @kbd{C-j} after the closing parenthesis of the "
"example, the printed text is inserted into the buffer.  If you execute the "
"example by other means (such as by evaluating the function "
"@code{eval-region}), the printed text is displayed in the echo area."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:266
msgid ""
"Examples in this manual indicate printed text with @samp{@print{}}, "
"irrespective of where that text goes.  The value returned by evaluating the "
"form follows on a separate line with @samp{@result{}}."
msgstr ""

#. type: group
#: original_texis/intro.texi:273
#, no-wrap
msgid ""
"(progn (prin1 'foo) (princ \"\\n\") (prin1 'bar))\n"
"     @print{} foo\n"
"     @print{} bar\n"
"     @result{} bar\n"
msgstr ""

#. type: cindex
#: original_texis/intro.texi:278
#, no-wrap
msgid "error message notation"
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:284
msgid ""
"Some examples signal errors.  This normally displays an error message in the "
"echo area.  We show the error message on a line starting with "
"@samp{@error{}}.  Note that @samp{@error{}} itself does not appear in the "
"echo area."
msgstr ""

#. type: example
#: original_texis/intro.texi:288
#, no-wrap
msgid ""
"(+ 23 'x)\n"
"@error{} Wrong type argument: number-or-marker-p, x\n"
msgstr ""

#. type: cindex
#: original_texis/intro.texi:292
#, no-wrap
msgid "buffer text notation"
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:301
msgid ""
"Some examples describe modifications to the contents of a buffer, by showing "
"the before and after versions of the text.  These examples show the contents "
"of the buffer in question between two lines of dashes containing the buffer "
"name.  In addition, @samp{@point{}} indicates the location of point.  (The "
"symbol for point, of course, is not part of the text in the buffer; it "
"indicates the place @emph{between} two characters where point is currently "
"located.)"
msgstr ""

#. type: example
#: original_texis/intro.texi:306
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the @point{}contents of foo.\n"
"---------- Buffer: foo ----------\n"
"\n"
msgstr ""

#. type: example
#: original_texis/intro.texi:312
#, no-wrap
msgid ""
"(insert \"changed \")\n"
"     @result{} nil\n"
"---------- Buffer: foo ----------\n"
"This is the changed @point{}contents of foo.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: cindex
#: original_texis/intro.texi:316
#, no-wrap
msgid "description format"
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:322
msgid ""
"Functions, variables, macros, commands, user options, and special forms are "
"described in this manual in a uniform format.  The first line of a "
"description contains the name of the item followed by its arguments, if any."
msgstr ""

#. type: ifnottex
#: original_texis/intro.texi:325
msgid ""
"The category---function, variable, or whatever---appears at the beginning of "
"the line."
msgstr ""

#. type: iftex
#: original_texis/intro.texi:329
msgid ""
"The category---function, variable, or whatever---is printed next to the "
"right margin."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:331
msgid "The description follows on succeeding lines, sometimes with examples."
msgstr ""

#. type: subsubsection
#: original_texis/intro.texi:338 original_texis/intro.texi:340 original_texis/intro.texi:341
#, no-wrap
msgid "A Sample Function Description"
msgstr ""

#. type: menuentry
#: original_texis/intro.texi:338
msgid "A description of an imaginary function, @code{foo}."
msgstr ""

#. type: subsubsection
#: original_texis/intro.texi:338 original_texis/intro.texi:449 original_texis/intro.texi:450
#, no-wrap
msgid "A Sample Variable Description"
msgstr ""

#. type: menuentry
#: original_texis/intro.texi:338
msgid "A description of an imaginary variable, @code{electric-future-map}."
msgstr ""

#. type: cindex
#: original_texis/intro.texi:342
#, no-wrap
msgid "function descriptions"
msgstr ""

#. type: cindex
#: original_texis/intro.texi:343
#, no-wrap
msgid "command descriptions"
msgstr ""

#. type: cindex
#: original_texis/intro.texi:344
#, no-wrap
msgid "macro descriptions"
msgstr ""

#. type: cindex
#: original_texis/intro.texi:345
#, no-wrap
msgid "special form descriptions"
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:351
msgid ""
"In a function description, the name of the function being described appears "
"first.  It is followed on the same line by a list of argument names.  These "
"names are also used in the body of the description, to stand for the values "
"of the arguments."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:356
msgid ""
"The appearance of the keyword @code{&optional} in the argument list "
"indicates that the subsequent arguments may be omitted (omitted arguments "
"default to @code{nil}).  Do not write @code{&optional} when you call the "
"function."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:362
msgid ""
"The keyword @code{&rest} (which must be followed by a single argument name) "
"indicates that any number of arguments can follow.  The single argument name "
"following @code{&rest} receives, as its value, a list of all the remaining "
"arguments passed to the function.  Do not write @code{&rest} when you call "
"the function."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:364
msgid "Here is a description of an imaginary function @code{foo}:"
msgstr ""

#. type: defun
#: original_texis/intro.texi:365
#, no-wrap
msgid "foo integer1 &optional integer2 &rest integers"
msgstr ""

#. type: defun
#: original_texis/intro.texi:369
msgid ""
"The function @code{foo} subtracts @var{integer1} from @var{integer2}, then "
"adds all the rest of the arguments to the result.  If @var{integer2} is not "
"supplied, then the number 19 is used by default."
msgstr ""

#. type: example
#: original_texis/intro.texi:375
#, no-wrap
msgid ""
"(foo 1 5 3 9)\n"
"     @result{} 16\n"
"(foo 5)\n"
"     @result{} 14\n"
msgstr ""

#. type: defun
#: original_texis/intro.texi:379
msgid "More generally,"
msgstr ""

#. type: example
#: original_texis/intro.texi:384
#, no-wrap
msgid ""
"(foo @var{w} @var{x} @var{y}@dots{})\n"
"@equiv{}\n"
"(+ (- @var{x} @var{w}) @var{y}@dots{})\n"
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:396
msgid ""
"By convention, any argument whose name contains the name of a type (e.g., "
"@var{integer}, @var{integer1} or @var{buffer}) is expected to be of that "
"type.  A plural of a type (such as @var{buffers}) often means a list of "
"objects of that type.  An argument named @var{object} may be of any type.  "
"(For a list of Emacs object types, @pxref{Lisp Data Types}.)  An argument "
"with any other sort of name (e.g., @var{new-file}) is specific to the "
"function; if the function has a documentation string, the type of the "
"argument should be described there (@pxref{Documentation})."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:399
msgid ""
"@xref{Lambda Expressions}, for a more complete description of arguments "
"modified by @code{&optional} and @code{&rest}."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:406
msgid ""
"Command, macro, and special form descriptions have the same format, but the "
"word @samp{Function} is replaced by @samp{Command}, @samp{Macro}, or "
"@samp{Special Form}, respectively.  Commands are simply functions that may "
"be called interactively; macros process their arguments differently from "
"functions (the arguments are not evaluated), but are presented the same way."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:415
msgid ""
"The descriptions of macros and special forms use a more complex notation to "
"specify optional and repeated arguments, because they can break the argument "
"list down into separate arguments in more complicated ways.  "
"@samp{@r{[}@var{optional-arg}@r{]}} means that @var{optional-arg} is "
"optional and @samp{@var{repeated-args}@dots{}} stands for zero or more "
"arguments.  Parentheses are used when several arguments are grouped into "
"additional levels of list structure.  Here is an example:"
msgstr ""

#. type: defspec
#: original_texis/intro.texi:416
#, no-wrap
msgid "count-loop (var [from to [inc]]) body@dots{}"
msgstr ""

#. type: defspec
#: original_texis/intro.texi:423
msgid ""
"This imaginary special form implements a loop that executes the @var{body} "
"forms and then increments the variable @var{var} on each iteration.  On the "
"first iteration, the variable has the value @var{from}; on subsequent "
"iterations, it is incremented by one (or by @var{inc} if that is given).  "
"The loop exits before executing @var{body} if @var{var} equals @var{to}.  "
"Here is an example:"
msgstr ""

#. type: example
#: original_texis/intro.texi:429
#, no-wrap
msgid ""
"(count-loop (i 0 10)\n"
"  (prin1 i) (princ \" \")\n"
"  (prin1 (aref vector i))\n"
"  (terpri))\n"
msgstr ""

#. type: defspec
#: original_texis/intro.texi:434
msgid ""
"If @var{from} and @var{to} are omitted, @var{var} is bound to @code{nil} "
"before the loop begins, and the loop exits if @var{var} is non-@code{nil} at "
"the beginning of an iteration.  Here is an example:"
msgstr ""

#. type: example
#: original_texis/intro.texi:440
#, no-wrap
msgid ""
"(count-loop (done)\n"
"  (if (pending)\n"
"      (fixit)\n"
"    (setq done t)))\n"
msgstr ""

#. type: defspec
#: original_texis/intro.texi:447
msgid ""
"In this special form, the arguments @var{from} and @var{to} are optional, "
"but must both be present or both absent.  If they are present, @var{inc} may "
"optionally be specified as well.  These arguments are grouped with the "
"argument @var{var} into a list, to distinguish them from @var{body}, which "
"includes all remaining elements of the form."
msgstr ""

#. type: cindex
#: original_texis/intro.texi:451
#, no-wrap
msgid "variable descriptions"
msgstr ""

#. type: cindex
#: original_texis/intro.texi:452
#, no-wrap
msgid "option descriptions"
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:462
msgid ""
"A @dfn{variable} is a name that can be @dfn{bound} (or @dfn{set}) to an "
"object.  The object to which a variable is bound is called a @dfn{value}; we "
"say also that variable holds that value.  Although nearly all variables can "
"be set by the user, certain variables exist specifically so that users can "
"change them; these are called @dfn{user options}.  Ordinary variables and "
"user options are described using a format like that for functions, except "
"that there are no arguments."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:465
msgid "Here is a description of the imaginary @code{electric-future-map} variable."
msgstr ""

#. type: defvar
#: original_texis/intro.texi:466
#, no-wrap
msgid "electric-future-map"
msgstr ""

#. type: defvar
#: original_texis/intro.texi:470
msgid ""
"The value of this variable is a full keymap used by Electric Command Future "
"mode.  The functions in this map allow you to edit commands you have not yet "
"thought about executing."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:474
msgid ""
"User option descriptions have the same format, but @samp{Variable} is "
"replaced by @samp{User Option}."
msgstr ""

#. type: section
#: original_texis/intro.texi:476
#, no-wrap
msgid "Version Information"
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:480
msgid "These facilities provide information about which version of Emacs is in use."
msgstr ""

#. type: deffn
#: original_texis/intro.texi:481
#, no-wrap
msgid "Command emacs-version &optional here"
msgstr ""

#. type: deffn
#: original_texis/intro.texi:484
msgid ""
"This function returns a string describing the version of Emacs that is "
"running.  It is useful to include this string in bug reports."
msgstr ""

#. type: group
#: original_texis/intro.texi:490
#, no-wrap
msgid ""
"(emacs-version)\n"
"  @result{} \"GNU Emacs 26.1 (build 1, x86_64-unknown-linux-gnu,\n"
"             GTK+ Version 3.16) of 2017-06-01\"\n"
msgstr ""

#. type: deffn
#: original_texis/intro.texi:497
msgid ""
"If @var{here} is non-@code{nil}, it inserts the text in the buffer before "
"point, and returns @code{nil}.  When this function is called interactively, "
"it prints the same information in the echo area, but giving a prefix "
"argument makes @var{here} non-@code{nil}."
msgstr ""

#. type: defvar
#: original_texis/intro.texi:499
#, no-wrap
msgid "emacs-build-time"
msgstr ""

#. type: defvar
#: original_texis/intro.texi:504
msgid ""
"The value of this variable indicates the time at which Emacs was built.  It "
"uses the style of @code{current-time} (@pxref{Time of Day}), or is "
"@code{nil} if the information is not available."
msgstr ""

#. type: group
#: original_texis/intro.texi:509
#, no-wrap
msgid ""
"emacs-build-time\n"
"     @result{} (25194 55894 8547 617000)\n"
msgstr ""

#. type: defvar
#: original_texis/intro.texi:513
msgid ""
"(This timestamp is @code{(1651169878008547617 . 1000000000)} if "
"@code{current-time-list} was @code{nil} when Emacs was built.)"
msgstr ""

#. type: defvar
#: original_texis/intro.texi:515
#, no-wrap
msgid "emacs-version"
msgstr ""

#. type: defvar
#: original_texis/intro.texi:522
msgid ""
"The value of this variable is the version of Emacs being run.  It is a "
"string such as @code{\"26.1\"}.  A value with three numeric components, such "
"as @code{\"26.0.91\"}, indicates an unreleased test version.  (Prior to "
"Emacs 26.1, the string includes an extra final component with the integer "
"that is now stored in @code{emacs-build-number}; e.g., @code{\"25.1.1\"}.)"
msgstr ""

#. type: defvar
#: original_texis/intro.texi:524
#, no-wrap
msgid "emacs-major-version"
msgstr ""

#. type: defvar
#: original_texis/intro.texi:527
msgid ""
"The major version number of Emacs, as an integer.  For Emacs version 23.1, "
"the value is 23."
msgstr ""

#. type: defvar
#: original_texis/intro.texi:529
#, no-wrap
msgid "emacs-minor-version"
msgstr ""

#. type: defvar
#: original_texis/intro.texi:532
msgid ""
"The minor version number of Emacs, as an integer.  For Emacs version 23.1, "
"the value is 1."
msgstr ""

#. type: defvar
#: original_texis/intro.texi:534
#, no-wrap
msgid "emacs-build-number"
msgstr ""

#. type: defvar
#: original_texis/intro.texi:538
msgid ""
"An integer that increments each time Emacs is built in the same directory "
"(without cleaning).  This is only of relevance when developing Emacs."
msgstr ""

#. type: defvar
#: original_texis/intro.texi:540
#, no-wrap
msgid "emacs-repository-version"
msgstr ""

#. type: defvar
#: original_texis/intro.texi:544
msgid ""
"A string that gives the repository revision from which Emacs was built.  If "
"Emacs was built outside revision control, the value is @code{nil}."
msgstr ""

#. type: defvar
#: original_texis/intro.texi:546
#, no-wrap
msgid "emacs-repository-branch"
msgstr ""

#. type: defvar
#: original_texis/intro.texi:550
msgid ""
"A string that gives the repository branch from which Emacs was built.  In "
"the most cases this is @code{\"master\"}.  If Emacs was built outside "
"revision control, the value is @code{nil}."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:565
msgid ""
"This manual was originally written by Robert Krawitz, Bil Lewis, Dan "
"LaLiberte, Richard@tie{}M. Stallman and Chris Welty, the volunteers of the "
"GNU manual group, in an effort extending over several years.  "
"Robert@tie{}J. Chassell helped to review and edit the manual, with the "
"support of the Defense Advanced Research Projects Agency, ARPA Order 6082, "
"arranged by Warren@tie{}A. Hunt, Jr.@: of Computational Logic, Inc.  "
"Additional sections have since been written by Miles Bader, Lars Brinkhoff, "
"Chong Yidong, Kenichi Handa, Lute Kamstra, Juri Linkov, Glenn Morris, "
"Thien-Thi Nguyen, Dan Nicolaescu, Martin Rudalics, Kim F. Storm, Luc "
"Teirlinck, and Eli Zaretskii, and others."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:579
msgid ""
"Corrections were supplied by Drew Adams, Juanma Barranquero, Karl Berry, Jim "
"Blandy, Bard Bloom, Stephane Boucher, David Boyes, Alan Carroll, Richard "
"Davis, Lawrence R. Dodd, Peter Doornbosch, David A. Duff, Chris Eich, "
"Beverly Erlebacher, David Eckelkamp, Ralf Fassel, Eirik Fuller, Stephen "
"Gildea, Bob Glickstein, Eric Hanchrow, Jesper Harder, George Hartzell, "
"Nathan Hess, Masayuki Ida, Dan Jacobson, Jak Kirman, Bob Knighten, Frederick "
"M. Korz, Joe Lammens, Glenn M. Lewis, K. Richard Magill, Brian Marick, "
"Roland McGrath, Stefan Monnier, Skip Montanaro, John Gardiner Myers, Thomas "
"A. Peterson, Francesco Potortì, Friedrich Pukelsheim, Arnold D. Robbins, "
"Raul Rockwell, Jason Rumney, Per Starbäck, Shinichirou Sugou, Kimmo "
"Suominen, Edward Tharp, Bill Trost, Rickard Westman, Jean White, Eduard "
"Wiebe, Matthew Wilding, Carl Witty, Dale Worley, Rusty Wright, and David "
"D. Zuhn."
msgstr ""

#. type: Plain text
#: original_texis/intro.texi:581
msgid ""
"For a more complete list of contributors, please see the relevant change log "
"entries in the Emacs source repository."
msgstr ""
