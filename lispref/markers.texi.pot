# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2024-05-02 05:48+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: original_texis/markers.texi:6 original_texis/markers.texi:7
#, no-wrap
msgid "Markers"
msgstr ""

#. type: cindex
#: original_texis/markers.texi:8
#, no-wrap
msgid "markers"
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:14
msgid ""
"A @dfn{marker} is a Lisp object used to specify a position in a buffer "
"relative to the surrounding text.  A marker changes its offset from the "
"beginning of the buffer automatically whenever text is inserted or deleted, "
"so that it stays with the two characters on either side of it."
msgstr ""

#. type: section
#: original_texis/markers.texi:25 original_texis/markers.texi:27
#: original_texis/markers.texi:28
#, no-wrap
msgid "Overview of Markers"
msgstr ""

#. type: menuentry
#: original_texis/markers.texi:25
msgid "The components of a marker, and how it relocates."
msgstr ""

#. type: section
#: original_texis/markers.texi:25 original_texis/markers.texi:119
#: original_texis/markers.texi:120
#, no-wrap
msgid "Predicates on Markers"
msgstr ""

#. type: menuentry
#: original_texis/markers.texi:25
msgid "Testing whether an object is a marker."
msgstr ""

#. type: node
#: original_texis/markers.texi:25 original_texis/markers.texi:144
#, no-wrap
msgid "Creating Markers"
msgstr ""

#. type: menuentry
#: original_texis/markers.texi:25
msgid "Making empty markers or markers at certain places."
msgstr ""

#. type: section
#: original_texis/markers.texi:25 original_texis/markers.texi:274
#: original_texis/markers.texi:275
#, no-wrap
msgid "Information from Markers"
msgstr ""

#. type: menuentry
#: original_texis/markers.texi:25
msgid "Finding the marker's buffer or character position."
msgstr ""

#. type: section
#: original_texis/markers.texi:25 original_texis/markers.texi:321
#: original_texis/markers.texi:322
#, no-wrap
msgid "Marker Insertion Types"
msgstr ""

#. type: menuentry
#: original_texis/markers.texi:25
msgid "Two ways a marker can relocate when you insert where it points."
msgstr ""

#. type: node
#: original_texis/markers.texi:25 original_texis/markers.texi:348
#, no-wrap
msgid "Moving Markers"
msgstr ""

#. type: menuentry
#: original_texis/markers.texi:25
msgid "Moving the marker to a new buffer or position."
msgstr ""

#. type: section
#: original_texis/markers.texi:25 original_texis/markers.texi:400
#: original_texis/markers.texi:401
#, no-wrap
msgid "The Mark"
msgstr ""

#. type: menuentry
#: original_texis/markers.texi:25
msgid "How the mark is implemented with a marker."
msgstr ""

#. type: section
#: original_texis/markers.texi:25 original_texis/markers.texi:682
#: original_texis/markers.texi:683
#, no-wrap
msgid "The Region"
msgstr ""

#. type: menuentry
#: original_texis/markers.texi:25
msgid "How to access the region."
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:37
msgid ""
"A marker specifies a buffer and a position in that buffer.  A marker can be "
"used to represent a position in functions that require one, just as an "
"integer could be used.  In that case, the marker's buffer is normally "
"ignored.  Of course, a marker used in this way usually points to a position "
"in the buffer that the function operates on, but that is entirely the "
"programmer's responsibility.  @xref{Positions}, for a complete description "
"of positions."
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:47
msgid ""
"A marker has three attributes: the marker position, the marker buffer, and "
"the insertion type.  The marker position is an integer that is equivalent "
"(at a given time) to the marker as a position in that buffer.  But the "
"marker's position value can change during the life of the marker, and often "
"does.  Insertion and deletion of text in the buffer relocate the marker.  "
"The idea is that a marker positioned between two characters remains between "
"those two characters despite insertion and deletion elsewhere in the "
"buffer.  Relocation changes the integer equivalent of the marker."
msgstr ""

#. type: cindex
#: original_texis/markers.texi:48
#, no-wrap
msgid "marker relocation"
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:55
msgid ""
"Deleting text around a marker's position leaves the marker between the "
"characters immediately before and after the deleted text.  Inserting text at "
"the position of a marker normally leaves the marker either in front of or "
"after the new text, depending on the marker's @dfn{insertion type} "
"(@pxref{Marker Insertion Types})---unless the insertion is done with "
"@code{insert-before-markers} (@pxref{Insertion})."
msgstr ""

#. type: cindex
#: original_texis/markers.texi:56
#, no-wrap
msgid "marker garbage collection"
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:63
msgid ""
"Insertion and deletion in a buffer must check all the markers and relocate "
"them if necessary.  This slows processing in a buffer with a large number of "
"markers.  For this reason, it is a good idea to make a marker point nowhere "
"if you are sure you don't need it any more.  Markers that can no longer be "
"accessed are eventually removed (@pxref{Garbage Collection})."
msgstr ""

#. type: cindex
#: original_texis/markers.texi:64
#, no-wrap
msgid "markers as numbers"
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:69
msgid ""
"Because it is common to perform arithmetic operations on a marker position, "
"most of these operations (including @code{+} and @code{-}) accept markers as "
"arguments.  In such cases, the marker stands for its current position."
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:72
msgid ""
"Here are examples of creating markers, setting markers, and moving point to "
"markers:"
msgstr ""

#. type: group
#: original_texis/markers.texi:78
#, no-wrap
msgid ""
";; @r{Make a new marker that initially does not point anywhere:}\n"
"(setq m1 (make-marker))\n"
"     @result{} #<marker in no buffer>\n"
msgstr ""

#. type: group
#: original_texis/markers.texi:85
#, no-wrap
msgid ""
";; @r{Set @code{m1} to point between the 99th and 100th characters}\n"
";;   @r{in the current buffer:}\n"
"(set-marker m1 100)\n"
"     @result{} #<marker at 100 in markers.texi>\n"
msgstr ""

#. type: group
#: original_texis/markers.texi:93
#, no-wrap
msgid ""
";; @r{Now insert one character at the beginning of the buffer:}\n"
"(goto-char (point-min))\n"
"     @result{} 1\n"
"(insert \"Q\")\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/markers.texi:99
#, no-wrap
msgid ""
";; @r{@code{m1} is updated appropriately.}\n"
"m1\n"
"     @result{} #<marker at 101 in markers.texi>\n"
msgstr ""

#. type: group
#: original_texis/markers.texi:110
#, no-wrap
msgid ""
";; @r{Two markers that point to the same position}\n"
";;   @r{are not @code{eq}, but they are @code{equal}.}\n"
"(setq m2 (copy-marker m1))\n"
"     @result{} #<marker at 101 in markers.texi>\n"
"(eq m1 m2)\n"
"     @result{} nil\n"
"(equal m1 m2)\n"
"     @result{} t\n"
msgstr ""

#. type: group
#: original_texis/markers.texi:116
#, no-wrap
msgid ""
";; @r{When you are finished using a marker, make it point nowhere.}\n"
"(set-marker m1 nil)\n"
"     @result{} #<marker in no buffer>\n"
msgstr ""

#. type: cindex
#: original_texis/markers.texi:121
#, no-wrap
msgid "predicates for markers"
msgstr ""

#. type: cindex
#: original_texis/markers.texi:122
#, no-wrap
msgid "markers, predicates for"
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:127
msgid ""
"You can test an object to see whether it is a marker, or whether it is "
"either an integer or a marker.  The latter test is useful in connection with "
"the arithmetic functions that work with both markers and integers."
msgstr ""

#. type: defun
#: original_texis/markers.texi:128
#, no-wrap
msgid "markerp object"
msgstr ""

#. type: defun
#: original_texis/markers.texi:132
msgid ""
"This function returns @code{t} if @var{object} is a marker, @code{nil} "
"otherwise.  Note that integers are not markers, even though many functions "
"will accept either a marker or an integer."
msgstr ""

#. type: defun
#: original_texis/markers.texi:134
#, no-wrap
msgid "integer-or-marker-p object"
msgstr ""

#. type: defun
#: original_texis/markers.texi:137
msgid ""
"This function returns @code{t} if @var{object} is an integer or a marker, "
"@code{nil} otherwise."
msgstr ""

#. type: defun
#: original_texis/markers.texi:139
#, no-wrap
msgid "number-or-marker-p object"
msgstr ""

#. type: defun
#: original_texis/markers.texi:142
msgid ""
"This function returns @code{t} if @var{object} is a number (either integer "
"or floating point) or a marker, @code{nil} otherwise."
msgstr ""

#. type: section
#: original_texis/markers.texi:145
#, no-wrap
msgid "Functions that Create Markers"
msgstr ""

#. type: cindex
#: original_texis/markers.texi:146
#, no-wrap
msgid "creating markers"
msgstr ""

#. type: cindex
#: original_texis/markers.texi:147
#, no-wrap
msgid "marker creation"
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:153
msgid ""
"When you create a new marker, you can make it point nowhere, or point to the "
"present position of point, or to the beginning or end of the accessible "
"portion of the buffer, or to the same place as another given marker."
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:156
msgid ""
"The next four functions all return markers with insertion type @code{nil}.  "
"@xref{Marker Insertion Types}."
msgstr ""

#. type: defun
#: original_texis/markers.texi:157
#, no-wrap
msgid "make-marker"
msgstr ""

#. type: defun
#: original_texis/markers.texi:160
msgid "This function returns a newly created marker that does not point anywhere."
msgstr ""

#. type: group
#: original_texis/markers.texi:165
#, no-wrap
msgid ""
"(make-marker)\n"
"     @result{} #<marker in no buffer>\n"
msgstr ""

#. type: defun
#: original_texis/markers.texi:169
#, no-wrap
msgid "point-marker"
msgstr ""

#. type: defun
#: original_texis/markers.texi:173
msgid ""
"This function returns a new marker that points to the present position of "
"point in the current buffer.  @xref{Point}.  For an example, see "
"@code{copy-marker}, below."
msgstr ""

#. type: defun
#: original_texis/markers.texi:175
#, no-wrap
msgid "point-min-marker"
msgstr ""

#. type: defun
#: original_texis/markers.texi:179
msgid ""
"This function returns a new marker that points to the beginning of the "
"accessible portion of the buffer.  This will be the beginning of the buffer "
"unless narrowing is in effect.  @xref{Narrowing}."
msgstr ""

#. type: defun
#: original_texis/markers.texi:181
#, no-wrap
msgid "point-max-marker"
msgstr ""

#. type: defun
#: original_texis/markers.texi:185
msgid ""
"This function returns a new marker that points to the end of the accessible "
"portion of the buffer.  This will be the end of the buffer unless narrowing "
"is in effect.  @xref{Narrowing}."
msgstr ""

#. type: defun
#: original_texis/markers.texi:189
msgid ""
"Here are examples of this function and @code{point-min-marker}, shown in a "
"buffer containing a version of the source file for the text of this chapter."
msgstr ""

#. type: group
#: original_texis/markers.texi:196
#, no-wrap
msgid ""
"(point-min-marker)\n"
"     @result{} #<marker at 1 in markers.texi>\n"
"(point-max-marker)\n"
"     @result{} #<marker at 24080 in markers.texi>\n"
msgstr ""

#. type: group
#: original_texis/markers.texi:201
#, no-wrap
msgid ""
"(narrow-to-region 100 200)\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/markers.texi:205
#, no-wrap
msgid ""
"(point-min-marker)\n"
"     @result{} #<marker at 100 in markers.texi>\n"
msgstr ""

#. type: group
#: original_texis/markers.texi:209
#, no-wrap
msgid ""
"(point-max-marker)\n"
"     @result{} #<marker at 200 in markers.texi>\n"
msgstr ""

#. type: defun
#: original_texis/markers.texi:213
#, no-wrap
msgid "copy-marker &optional marker-or-integer insertion-type"
msgstr ""

#. type: defun
#: original_texis/markers.texi:219
msgid ""
"If passed a marker as its argument, @code{copy-marker} returns a new marker "
"that points to the same place and the same buffer as does "
"@var{marker-or-integer}.  If passed an integer as its argument, "
"@code{copy-marker} returns a new marker that points to position "
"@var{marker-or-integer} in the current buffer."
msgstr ""

#. type: defun
#: original_texis/markers.texi:222
msgid ""
"The new marker's insertion type is specified by the argument "
"@var{insertion-type}.  @xref{Marker Insertion Types}."
msgstr ""

#. type: group
#: original_texis/markers.texi:236
#, no-wrap
msgid ""
"(copy-marker 0)\n"
"     @result{} #<marker at 1 in markers.texi>\n"
msgstr ""

#. type: group
#: original_texis/markers.texi:241
#, no-wrap
msgid ""
"(copy-marker 90000)\n"
"     @result{} #<marker at 24080 in markers.texi>\n"
msgstr ""

#. type: defun
#: original_texis/markers.texi:246
msgid "An error is signaled if @var{marker} is neither a marker nor an integer."
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:251
msgid ""
"Two distinct markers are considered @code{equal} (even though not @code{eq}) "
"to each other if they have the same position and buffer, or if they both "
"point nowhere."
msgstr ""

#. type: group
#: original_texis/markers.texi:256
#, no-wrap
msgid ""
"(setq p (point-marker))\n"
"     @result{} #<marker at 2139 in markers.texi>\n"
msgstr ""

#. type: group
#: original_texis/markers.texi:261
#, no-wrap
msgid ""
"(setq q (copy-marker p))\n"
"     @result{} #<marker at 2139 in markers.texi>\n"
msgstr ""

#. type: group
#: original_texis/markers.texi:266
#, no-wrap
msgid ""
"(eq p q)\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/markers.texi:271
#, no-wrap
msgid ""
"(equal p q)\n"
"     @result{} t\n"
msgstr ""

#. type: cindex
#: original_texis/markers.texi:276
#, no-wrap
msgid "marker information"
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:280
msgid ""
"This section describes the functions for accessing the components of a "
"marker object."
msgstr ""

#. type: defun
#: original_texis/markers.texi:281
#, no-wrap
msgid "marker-position marker"
msgstr ""

#. type: defun
#: original_texis/markers.texi:284
msgid ""
"This function returns the position that @var{marker} points to, or "
"@code{nil} if it points nowhere."
msgstr ""

#. type: defun
#: original_texis/markers.texi:286
#, no-wrap
msgid "marker-buffer marker"
msgstr ""

#. type: defun
#: original_texis/markers.texi:289
msgid ""
"This function returns the buffer that @var{marker} points into, or "
"@code{nil} if it points nowhere."
msgstr ""

#. type: group
#: original_texis/markers.texi:296
#, no-wrap
msgid ""
"(setq m (make-marker))\n"
"     @result{} #<marker in no buffer>\n"
msgstr ""

#. type: group
#: original_texis/markers.texi:300
#, no-wrap
msgid ""
"(marker-position m)\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/markers.texi:304
#, no-wrap
msgid ""
"(marker-buffer m)\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/markers.texi:309
#, no-wrap
msgid ""
"(set-marker m 3770 (current-buffer))\n"
"     @result{} #<marker at 3770 in markers.texi>\n"
msgstr ""

#. type: group
#: original_texis/markers.texi:313
#, no-wrap
msgid ""
"(marker-buffer m)\n"
"     @result{} #<buffer markers.texi>\n"
msgstr ""

#. type: group
#: original_texis/markers.texi:317
#, no-wrap
msgid ""
"(marker-position m)\n"
"     @result{} 3770\n"
msgstr ""

#. type: cindex
#: original_texis/markers.texi:324
#, no-wrap
msgid "insertion type of a marker"
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:331
msgid ""
"When you insert text directly at the place where a marker points, there are "
"two possible ways to relocate that marker: it can point before the inserted "
"text, or point after it.  You can specify which one a given marker should do "
"by setting its @dfn{insertion type}.  Note that use of "
"@code{insert-before-markers} ignores markers' insertion types, always "
"relocating a marker to point after the inserted text."
msgstr ""

#. type: defun
#: original_texis/markers.texi:332
#, no-wrap
msgid "set-marker-insertion-type marker type"
msgstr ""

#. type: defun
#: original_texis/markers.texi:337
msgid ""
"This function sets the insertion type of marker @var{marker} to @var{type}.  "
"If @var{type} is @code{t}, @var{marker} will advance when text is inserted "
"at its position.  If @var{type} is @code{nil}, @var{marker} does not advance "
"when text is inserted there."
msgstr ""

#. type: defun
#: original_texis/markers.texi:339
#, no-wrap
msgid "marker-insertion-type marker"
msgstr ""

#. type: defun
#: original_texis/markers.texi:341
msgid "This function reports the current insertion type of @var{marker}."
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:347
msgid ""
"All functions that create markers without accepting an argument that "
"specifies the insertion type, create them with insertion type @code{nil} "
"(@pxref{Creating Markers}).  Also, the mark has, by default, insertion type "
"@code{nil}."
msgstr ""

#. type: section
#: original_texis/markers.texi:349
#, no-wrap
msgid "Moving Marker Positions"
msgstr ""

#. type: cindex
#: original_texis/markers.texi:350
#, no-wrap
msgid "moving markers"
msgstr ""

#. type: cindex
#: original_texis/markers.texi:351
#, no-wrap
msgid "marker, how to move position"
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:358
msgid ""
"This section describes how to change the position of an existing marker.  "
"When you do this, be sure you know whether the marker is used outside of "
"your program, and, if so, what effects will result from moving "
"it---otherwise, confusing things may happen in other parts of Emacs."
msgstr ""

#. type: defun
#: original_texis/markers.texi:359
#, no-wrap
msgid "set-marker marker position &optional buffer"
msgstr ""

#. type: defun
#: original_texis/markers.texi:363
msgid ""
"This function moves @var{marker} to @var{position} in @var{buffer}.  If "
"@var{buffer} is not provided, it defaults to the current buffer."
msgstr ""

#. type: defun
#: original_texis/markers.texi:373
msgid ""
"If @var{position} is @code{nil} or a marker that points nowhere, then "
"@var{marker} is set to point nowhere."
msgstr ""

#. type: defun
#: original_texis/markers.texi:375
msgid "The value returned is @var{marker}."
msgstr ""

#. type: group
#: original_texis/markers.texi:380
#, no-wrap
msgid ""
"(setq m (point-marker))\n"
"     @result{} #<marker at 4714 in markers.texi>\n"
msgstr ""

#. type: group
#: original_texis/markers.texi:384
#, no-wrap
msgid ""
"(set-marker m 55)\n"
"     @result{} #<marker at 55 in markers.texi>\n"
msgstr ""

#. type: group
#: original_texis/markers.texi:388
#, no-wrap
msgid ""
"(setq b (get-buffer \"foo\"))\n"
"     @result{} #<buffer foo>\n"
msgstr ""

#. type: group
#: original_texis/markers.texi:392
#, no-wrap
msgid ""
"(set-marker m 0 b)\n"
"     @result{} #<marker at 1 in foo>\n"
msgstr ""

#. type: defun
#: original_texis/markers.texi:396
#, no-wrap
msgid "move-marker marker position &optional buffer"
msgstr ""

#. type: defun
#: original_texis/markers.texi:398
msgid "This is another name for @code{set-marker}."
msgstr ""

#. type: cindex
#: original_texis/markers.texi:402
#, no-wrap
msgid "mark, the"
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:409
msgid ""
"Each buffer has a special marker, which is designated @dfn{the mark}.  When "
"a buffer is newly created, this marker exists but does not point anywhere; "
"this means that the mark doesn't exist in that buffer yet.  Subsequent "
"commands can set the mark."
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:419
msgid ""
"The mark specifies a position to bound a range of text for many commands, "
"such as @code{kill-region} and @code{indent-rigidly}.  These commands "
"typically act on the text between point and the mark, which is called the "
"@dfn{region}.  If you are writing a command that operates on the region, "
"don't examine the mark directly; instead, use @code{interactive} with the "
"@samp{r} specification.  This provides the values of point and the mark as "
"arguments to the command in an interactive call, but permits other Lisp "
"programs to specify arguments explicitly.  @xref{Interactive Codes}."
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:426
msgid ""
"Some commands set the mark as a side-effect.  Commands should do this only "
"if it has a potential use to the user, and never for their own internal "
"purposes.  For example, the @code{replace-regexp} command sets the mark to "
"the value of point before doing any replacements, because this enables the "
"user to move back there conveniently after the replace is finished."
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:435
msgid ""
"Once the mark exists in a buffer, it normally never ceases to exist.  "
"However, it may become @dfn{inactive}, if Transient Mark mode is enabled.  "
"The buffer-local variable @code{mark-active}, if non-@code{nil}, means that "
"the mark is active.  A command can call the function @code{deactivate-mark} "
"to deactivate the mark directly, or it can request deactivation of the mark "
"upon return to the editor command loop by setting the variable "
"@code{deactivate-mark} to a non-@code{nil} value."
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:441
msgid ""
"If Transient Mark mode is enabled, certain editing commands that normally "
"apply to text near point, apply instead to the region when the mark is "
"active.  This is the main motivation for using Transient Mark mode.  "
"(Another is that this enables highlighting of the region when the mark is "
"active.  @xref{Display}.)"
msgstr ""

#. type: cindex
#: original_texis/markers.texi:442
#, no-wrap
msgid "mark ring"
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:449
msgid ""
"In addition to the mark, each buffer has a @dfn{mark ring} which is a list "
"of markers containing previous values of the mark.  When editing commands "
"change the mark, they should normally save the old value of the mark on the "
"mark ring.  The variable @code{mark-ring-max} specifies the maximum number "
"of entries in the mark ring; once the list becomes this long, adding a new "
"element deletes the last element."
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:453
msgid ""
"There is also a separate global mark ring, but that is used only in a few "
"particular user-level commands, and is not relevant to Lisp programming.  So "
"we do not describe it here."
msgstr ""

#. type: defun
#: original_texis/markers.texi:454
#, no-wrap
msgid "mark &optional force"
msgstr ""

#. type: cindex
#: original_texis/markers.texi:455
#, no-wrap
msgid "current buffer mark"
msgstr ""

#. type: defun
#: original_texis/markers.texi:458
msgid ""
"This function returns the current buffer's mark position as an integer, or "
"@code{nil} if no mark has ever been set in this buffer."
msgstr ""

#. type: defun
#: original_texis/markers.texi:464
msgid ""
"If Transient Mark mode is enabled, and @code{mark-even-if-inactive} is "
"@code{nil}, @code{mark} signals an error if the mark is inactive.  However, "
"if @var{force} is non-@code{nil}, then @code{mark} disregards inactivity of "
"the mark, and returns the mark position (or @code{nil})  anyway."
msgstr ""

#. type: defun
#: original_texis/markers.texi:466
#, no-wrap
msgid "mark-marker"
msgstr ""

#. type: defun
#: original_texis/markers.texi:471
msgid ""
"This function returns the marker that represents the current buffer's mark.  "
"It is not a copy, it is the marker used internally.  Therefore, changing "
"this marker's position will directly affect the buffer's mark.  Don't do "
"that unless that is the effect you want."
msgstr ""

#. type: group
#: original_texis/markers.texi:476
#, no-wrap
msgid ""
"(setq m (mark-marker))\n"
"     @result{} #<marker at 3420 in markers.texi>\n"
msgstr ""

#. type: group
#: original_texis/markers.texi:480
#, no-wrap
msgid ""
"(set-marker m 100)\n"
"     @result{} #<marker at 100 in markers.texi>\n"
msgstr ""

#. type: group
#: original_texis/markers.texi:484
#, no-wrap
msgid ""
"(mark-marker)\n"
"     @result{} #<marker at 100 in markers.texi>\n"
msgstr ""

#. type: defun
#: original_texis/markers.texi:491
msgid ""
"Like any marker, this marker can be set to point at any buffer you like.  If "
"you make it point at any buffer other than the one of which it is the mark, "
"it will yield perfectly consistent, but rather odd, results.  We recommend "
"that you not do it!"
msgstr ""

#. type: defun
#: original_texis/markers.texi:493
#, no-wrap
msgid "set-mark position"
msgstr ""

#. type: defun
#: original_texis/markers.texi:496
msgid ""
"This function sets the mark to @var{position}, and activates the mark.  The "
"old value of the mark is @emph{not} pushed onto the mark ring."
msgstr ""

#. type: defun
#: original_texis/markers.texi:502
msgid ""
"@strong{Please note:} Use this function only if you want the user to see "
"that the mark has moved, and you want the previous mark position to be "
"lost.  Normally, when a new mark is set, the old one should go on the "
"@code{mark-ring}.  For this reason, most applications should use "
"@code{push-mark} and @code{pop-mark}, not @code{set-mark}."
msgstr ""

#. type: defun
#: original_texis/markers.texi:510
msgid ""
"Novice Emacs Lisp programmers often try to use the mark for the wrong "
"purposes.  The mark saves a location for the user's convenience.  An editing "
"command should not alter the mark unless altering the mark is part of the "
"user-level functionality of the command.  (And, in that case, this effect "
"should be documented.)  To remember a location for internal use in the Lisp "
"program, store it in a Lisp variable.  For example:"
msgstr ""

#. type: group
#: original_texis/markers.texi:516
#, no-wrap
msgid ""
"(let ((beg (point)))\n"
"  (forward-line 1)\n"
"  (delete-region beg (point))).\n"
msgstr ""

#. type: defun
#: original_texis/markers.texi:520
#, no-wrap
msgid "push-mark &optional position nomsg activate"
msgstr ""

#. type: defun
#: original_texis/markers.texi:526
msgid ""
"This function sets the current buffer's mark to @var{position}, and pushes a "
"copy of the previous mark onto @code{mark-ring}.  If @var{position} is "
"@code{nil}, then the value of point is used."
msgstr ""

#. type: defun
#: original_texis/markers.texi:529
msgid ""
"The function @code{push-mark} normally @emph{does not} activate the mark.  "
"To do that, specify @code{t} for the argument @var{activate}."
msgstr ""

#. type: defun
#: original_texis/markers.texi:532
msgid "A @samp{Mark set} message is displayed unless @var{nomsg} is non-@code{nil}."
msgstr ""

#. type: defun
#: original_texis/markers.texi:534
#, no-wrap
msgid "pop-mark"
msgstr ""

#. type: defun
#: original_texis/markers.texi:542
msgid ""
"This function pops off the top element of @code{mark-ring} and makes that "
"mark become the buffer's actual mark.  This does not move point in the "
"buffer, and it does nothing if @code{mark-ring} is empty.  It deactivates "
"the mark."
msgstr ""

#. type: defopt
#: original_texis/markers.texi:544
#, no-wrap
msgid "transient-mark-mode"
msgstr ""

#. type: defopt
#: original_texis/markers.texi:549
msgid ""
"This variable, if non-@code{nil}, enables Transient Mark mode.  In Transient "
"Mark mode, every buffer-modifying primitive sets @code{deactivate-mark}.  As "
"a consequence, most commands that modify the buffer also deactivate the "
"mark."
msgstr ""

#. type: defopt
#: original_texis/markers.texi:554
msgid ""
"When Transient Mark mode is enabled and the mark is active, many commands "
"that normally apply to the text near point instead apply to the region.  "
"Such commands should use the function @code{use-region-p} to test whether "
"they should operate on the region.  @xref{The Region}."
msgstr ""

#. type: defopt
#: original_texis/markers.texi:566
msgid ""
"Lisp programs can set @code{transient-mark-mode} to non-@code{nil}, "
"non-@code{t} values to enable Transient Mark mode temporarily.  If the value "
"is @code{lambda}, Transient Mark mode is automatically turned off after any "
"action, such as buffer modification, that would normally deactivate the "
"mark.  If the value is @w{@code{(only . @var{oldval})}}, then "
"@code{transient-mark-mode} is set to the value @var{oldval} after any "
"subsequent command that moves point and is not shift-translated (@pxref{Key "
"Sequence Input, shift-translation}), or after any other action that would "
"normally deactivate the mark.  (Marking a region with the mouse will "
"temporarily enable @code{transient-mark-mode} in this way.)"
msgstr ""

#. type: defopt
#: original_texis/markers.texi:568
#, no-wrap
msgid "mark-even-if-inactive"
msgstr ""

#. type: defopt
#: original_texis/markers.texi:574
msgid ""
"If this is non-@code{nil}, Lisp programs and the Emacs user can use the mark "
"even when it is inactive.  This option affects the behavior of Transient "
"Mark mode.  When the option is non-@code{nil}, deactivation of the mark "
"turns off region highlighting, but commands that use the mark behave as if "
"the mark were still active."
msgstr ""

#. type: defvar
#: original_texis/markers.texi:576
#, no-wrap
msgid "deactivate-mark"
msgstr ""

#. type: defvar
#: original_texis/markers.texi:582
msgid ""
"If an editor command sets this variable non-@code{nil}, then the editor "
"command loop deactivates the mark after the command returns (if Transient "
"Mark mode is enabled).  All the primitives that change the buffer set "
"@code{deactivate-mark}, to deactivate the mark when the command is "
"finished.  Setting this variable makes it buffer-local."
msgstr ""

#. type: defvar
#: original_texis/markers.texi:587
msgid ""
"To write Lisp code that modifies the buffer without causing deactivation of "
"the mark at the end of the command, bind @code{deactivate-mark} to "
"@code{nil} around the code that does the modification.  For example:"
msgstr ""

#. type: example
#: original_texis/markers.texi:591
#, no-wrap
msgid ""
"(let (deactivate-mark)\n"
"  (insert \" \"))\n"
msgstr ""

#. type: defun
#: original_texis/markers.texi:594
#, no-wrap
msgid "deactivate-mark &optional force"
msgstr ""

#. type: defun
#: original_texis/markers.texi:598
msgid ""
"If Transient Mark mode is enabled or @var{force} is non-@code{nil}, this "
"function deactivates the mark and runs the normal hook "
"@code{deactivate-mark-hook}.  Otherwise, it does nothing."
msgstr ""

#. type: defvar
#: original_texis/markers.texi:600
#, no-wrap
msgid "mark-active"
msgstr ""

#. type: defvar
#: original_texis/markers.texi:606
msgid ""
"The mark is active when this variable is non-@code{nil}.  This variable is "
"always buffer-local in each buffer.  Do @emph{not} use the value of this "
"variable to decide whether a command that normally operates on text near "
"point should operate on the region instead.  Use the function "
"@code{use-region-p} for that (@pxref{The Region})."
msgstr ""

#. type: defvar
#: original_texis/markers.texi:608
#, no-wrap
msgid "activate-mark-hook"
msgstr ""

#. type: defvarx
#: original_texis/markers.texi:609
#, no-wrap
msgid "deactivate-mark-hook"
msgstr ""

#. type: defvar
#: original_texis/markers.texi:614
msgid ""
"These normal hooks are run, respectively, when the mark becomes active and "
"when it becomes inactive.  The hook @code{activate-mark-hook} is also run "
"when the region is reactivated, for instance after using a command that "
"switches back to a buffer that has an active mark."
msgstr ""

#. type: defun
#: original_texis/markers.texi:624
#, no-wrap
msgid "handle-shift-selection"
msgstr ""

#. type: defun
#: original_texis/markers.texi:631
msgid ""
"This function implements the shift-selection behavior of point-motion "
"commands.  @xref{Shift Selection,,, emacs, The GNU Emacs Manual}.  It is "
"called automatically by the Emacs command loop whenever a command with a "
"@samp{^} character in its @code{interactive} spec is invoked, before the "
"command itself is executed (@pxref{Interactive Codes, ^})."
msgstr ""

#. type: defun
#: original_texis/markers.texi:639
msgid ""
"If @code{shift-select-mode} is non-@code{nil} and the current command was "
"invoked via shift translation (@pxref{Key Sequence Input, "
"shift-translation}), this function sets the mark and temporarily activates "
"the region, unless the region was already temporarily activated in this "
"way.  Otherwise, if the region has been activated temporarily, it "
"deactivates the mark and restores the variable @code{transient-mark-mode} to "
"its earlier value."
msgstr ""

#. type: defvar
#: original_texis/markers.texi:641
#, no-wrap
msgid "mark-ring"
msgstr ""

#. type: defvar
#: original_texis/markers.texi:644
msgid ""
"The value of this buffer-local variable is the list of saved former marks of "
"the current buffer, most recent first."
msgstr ""

#. type: group
#: original_texis/markers.texi:651
#, no-wrap
msgid ""
"mark-ring\n"
"@result{} (#<marker at 11050 in markers.texi>\n"
"    #<marker at 10832 in markers.texi>\n"
"    @dots{})\n"
msgstr ""

#. type: defopt
#: original_texis/markers.texi:655
#, no-wrap
msgid "mark-ring-max"
msgstr ""

#. type: defopt
#: original_texis/markers.texi:659
msgid ""
"The value of this variable is the maximum size of @code{mark-ring}.  If more "
"marks than this are pushed onto the @code{mark-ring}, @code{push-mark} "
"discards an old mark when it adds a new one."
msgstr ""

#. type: cindex
#: original_texis/markers.texi:664
#, no-wrap
msgid "@code{delete-selection}, symbol property"
msgstr ""

#. type: findex
#: original_texis/markers.texi:665
#, no-wrap
msgid "delete-selection-helper"
msgstr ""

#. type: findex
#: original_texis/markers.texi:666
#, no-wrap
msgid "delete-selection-pre-hook"
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:681
msgid ""
"When Delete Selection mode (@pxref{Using Region, Delete Selection, , emacs, "
"The GNU Emacs Manual}) is enabled, commands that operate on the active "
"region (a.k.a.@: ``selection'') behave slightly differently.  This works by "
"adding the function @code{delete-selection-pre-hook} to the "
"@code{pre-command-hook} (@pxref{Command Overview}).  That function calls "
"@code{delete-selection-helper} to delete the selection as appropriate for "
"the command.  If you want to adapt a command to Delete Selection mode, put "
"the @code{delete-selection} property on the function's symbol (@pxref{Symbol "
"Plists}); commands that don't have this property on their symbol won't "
"delete the selection.  This property can have one of several values to "
"tailor the behavior to what the command is supposed to do; see the doc "
"strings of @code{delete-selection-pre-hook} and "
"@code{delete-selection-helper} for the details."
msgstr ""

#. type: cindex
#: original_texis/markers.texi:689
#, no-wrap
msgid "region"
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:695
msgid ""
"The text between point and the mark is known as @dfn{the region}.  Various "
"functions operate on text delimited by point and the mark, but only those "
"functions specifically related to the region itself are described here."
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:700
msgid ""
"The next two functions signal an error if the mark does not point anywhere.  "
"If Transient Mark mode is enabled and @code{mark-even-if-inactive} is "
"@code{nil}, they also signal an error if the mark is inactive."
msgstr ""

#. type: defun
#: original_texis/markers.texi:701
#, no-wrap
msgid "region-beginning"
msgstr ""

#. type: defun
#: original_texis/markers.texi:705
msgid ""
"This function returns the position of the beginning of the region (as an "
"integer).  This is the position of either point or the mark, whichever is "
"smaller."
msgstr ""

#. type: defun
#: original_texis/markers.texi:707
#, no-wrap
msgid "region-end"
msgstr ""

#. type: defun
#: original_texis/markers.texi:711
msgid ""
"This function returns the position of the end of the region (as an "
"integer).  This is the position of either point or the mark, whichever is "
"larger."
msgstr ""

#. type: Plain text
#: original_texis/markers.texi:719
msgid ""
"Instead of using @code{region-beginning} and @code{region-end}, a command "
"designed to operate on a region should normally use @code{interactive} with "
"the @samp{r} specification to find the beginning and end of the region.  "
"This lets other Lisp programs specify the bounds explicitly as arguments.  "
"@xref{Interactive Codes}."
msgstr ""

#. type: defun
#: original_texis/markers.texi:720
#, no-wrap
msgid "use-region-p"
msgstr ""

#. type: defun
#: original_texis/markers.texi:725
msgid ""
"This function returns @code{t} if Transient Mark mode is enabled, the mark "
"is active, and there is a valid region in the buffer.  This function is "
"intended to be used by commands that operate on the region, instead of on "
"text near point, when the mark is active."
msgstr ""

#. type: cindex
#: original_texis/markers.texi:726
#, no-wrap
msgid "empty region"
msgstr ""

#. type: vindex
#: original_texis/markers.texi:727
#, no-wrap
msgid "use-empty-active-region"
msgstr ""

#. type: defun
#: original_texis/markers.texi:734
msgid ""
"A region is valid if it has a non-zero size, or if the user option "
"@code{use-empty-active-region} is non-@code{nil} (by default, it is "
"@code{nil}).  The function @code{region-active-p} is similar to "
"@code{use-region-p}, but considers all regions as valid.  In most cases, you "
"should not use @code{region-active-p}, since if the region is empty it is "
"often more appropriate to operate on point."
msgstr ""
