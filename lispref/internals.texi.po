# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Emacs 25.1\n"
"POT-Creation-Date: 2020-06-14 22:39+0900\n"
"PO-Revision-Date: 2020-07-13 07:08+0900\n"
"Last-Translator: Ayanokoji Takesi <ayanokoji.takesi@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: appendix
#: original_texis/internals.texi:6 original_texis/internals.texi:7
#, no-wrap
msgid "GNU Emacs Internals"
msgstr "GNU Emacs Internals"

#. type: Plain text
#: original_texis/internals.texi:12
msgid "This chapter describes how the runnable Emacs executable is dumped with the preloaded Lisp libraries in it, how storage is allocated, and some internal aspects of GNU Emacs that may be of interest to C programmers."
msgstr "このチャプターでは実行可能なEmacs実行可能形式を事前ロードされたLispライブラリーとともにダンプする方法、ストレージが割り当てられる方法、およびCプログラマーが興味をもつかもしれないGNU Emacsの内部的な側面のいくつかを説明します。"

#. type: section
#: original_texis/internals.texi:24 original_texis/internals.texi:26
#: original_texis/internals.texi:27
#, no-wrap
msgid "Building Emacs"
msgstr "Building Emacs"

#. type: menuentry
#: original_texis/internals.texi:24
msgid "How the dumped Emacs is made."
msgstr "ダンプ済みEmacsの作成方法。"

#. type: section
#: original_texis/internals.texi:24 original_texis/internals.texi:174
#: original_texis/internals.texi:175
#, no-wrap
msgid "Pure Storage"
msgstr "Pure Storage"

#. type: menuentry
#: original_texis/internals.texi:24
msgid "Kludge to make preloaded Lisp functions shareable."
msgstr "その場かぎりの事前ロードされたLisp関数を共有する。"

#. type: section
#: original_texis/internals.texi:24 original_texis/internals.texi:234
#: original_texis/internals.texi:235
#, no-wrap
msgid "Garbage Collection"
msgstr "Garbage Collection"

#. type: menuentry
#: original_texis/internals.texi:24
msgid "Reclaiming space for Lisp objects no longer used."
msgstr "Lispオブジェクトの使用されないスペースの回収。"

#. type: section
#: original_texis/internals.texi:24 original_texis/internals.texi:546
#: original_texis/internals.texi:547
#, no-wrap
msgid "Stack-allocated Objects"
msgstr "Stack-allocated Objects"

#. type: menuentry
#: original_texis/internals.texi:24
msgid "Temporary conses and strings on C stack."
msgstr "Cスタック上の一時的なコンスと文字列。"

#. type: section
#: original_texis/internals.texi:24 original_texis/internals.texi:575
#: original_texis/internals.texi:576
#, no-wrap
msgid "Memory Usage"
msgstr "Memory Usage"

#. type: menuentry
#: original_texis/internals.texi:24
msgid "Info about total size of Lisp objects made so far."
msgstr "これまでに作成されたLispオブジェクトの総サイズの情報。"

#. type: section
#: original_texis/internals.texi:24 original_texis/internals.texi:627
#: original_texis/internals.texi:628
#, no-wrap
msgid "C Dialect"
msgstr "C Dialect"

#. type: menuentry
#: original_texis/internals.texi:24
msgid "What C variant Emacs is written in."
msgstr "Emacsを記述するC系言語は何か。"

#. type: section
#: original_texis/internals.texi:24 original_texis/internals.texi:640
#: original_texis/internals.texi:641
#, no-wrap
msgid "Writing Emacs Primitives"
msgstr "Writing Emacs Primitives"

#. type: menuentry
#: original_texis/internals.texi:24
msgid "Writing C code for Emacs."
msgstr "Emacs用にCコードを記述する。"

#. type: node
#: original_texis/internals.texi:24 original_texis/internals.texi:984
#, no-wrap
msgid "Writing Dynamic Modules"
msgstr "Writing Dynamic Modules"

#. type: menuentry
#: original_texis/internals.texi:24
msgid "Writing loadable modules for Emacs."
msgstr "Emacsにロード可能なモジュールの記述。"

#. type: section
#: original_texis/internals.texi:24 original_texis/internals.texi:1686
#: original_texis/internals.texi:1687
#, no-wrap
msgid "Object Internals"
msgstr "Object Internals"

#. type: menuentry
#: original_texis/internals.texi:24
msgid "Data formats of buffers, windows, processes."
msgstr "バッファー、ウィンドウ、プロセスのデータフォーマット。"

#. type: section
#: original_texis/internals.texi:24 original_texis/internals.texi:2399
#: original_texis/internals.texi:2400
#, no-wrap
msgid "C Integer Types"
msgstr "C Integer Types"

#. type: menuentry
#: original_texis/internals.texi:24
msgid "How C integer types are used inside Emacs."
msgstr "Emacs内部でCの整数型が使用される方法。"

#. type: cindex
#: original_texis/internals.texi:28
#, no-wrap
msgid "building Emacs"
msgstr "building Emacs"

#. type: pindex
#: original_texis/internals.texi:29
#, no-wrap
msgid "temacs"
msgstr "temacs"

#. type: Plain text
#: original_texis/internals.texi:35
msgid "This section explains the steps involved in building the Emacs executable.  You don't have to know this material to build and install Emacs, since the makefiles do all these things automatically.  This information is pertinent to Emacs developers."
msgstr "このセクションではEmacs実行可能形式のビルドに関するステップの説明をします。makefileがこれらすべてを自動的に行うので、Emacsをビルドやインストールをするためにこの題材を知る必要はありません。この情報はEmacs開発者に適しています。"

#. type: Plain text
#: original_texis/internals.texi:37
msgid "Building Emacs requires GNU Make version 3.81 or later."
msgstr "EmacsのビルドにはGNU Makeのバージョン3.81以降が必要です。"

#. type: Plain text
#: original_texis/internals.texi:42
msgid "Compilation of the C source files in the @file{src} directory produces an executable file called @file{temacs}, also called a @dfn{bare impure Emacs}.  It contains the Emacs Lisp interpreter and I/O routines, but not the editing commands."
msgstr "@file{src}ディレクトリー内のCソースファイルをコンパイルすることにより、@file{temacs}と呼ばれる実行可能形式ファイルが生成されます。これは@dfn{bare impure Emacs(裸で不純なEmacs)}とも呼ばれます。これにはEmacs LispインタープリターとI/Oルーチンが含まれますが編集コマンドは含まれません。"

#. type: file{#1}
#: original_texis/internals.texi:43
#, no-wrap
msgid "loadup.el"
msgstr "loadup.el"

#. type: Plain text
#: original_texis/internals.texi:49
msgid "The command @w{@command{temacs -l loadup}} would run @file{temacs} and direct it to load @file{loadup.el}.  The @code{loadup} library loads additional Lisp libraries, which set up the normal Emacs editing environment.  After this step, the Emacs executable is no longer @dfn{bare}."
msgstr "コマンド@w{@command{temacs -l loadup}}は@file{temacs}を実行して@file{loadup.el}をロードするように計らいます。@code{loadup}ライブラリーは通常のEmacs編集環境をセットアップする追加のLispライブラリーをロードします。このステップの後にはEmacs実行可能形式は@dfn{bare(裸)}ではなくなります。"

#. type: cindex
#: original_texis/internals.texi:50
#, no-wrap
msgid "dumping Emacs"
msgstr "dumping Emacs"

#. type: Plain text
#: original_texis/internals.texi:60
msgid "Because it takes some time to load the standard Lisp files, the @file{temacs} executable usually isn't run directly by users.  Instead, as one of the last steps of building Emacs, the command @samp{temacs -batch -l loadup dump} is run.  The special @samp{dump} argument causes @command{temacs} to dump out an executable program, called @file{emacs}, which has all the standard Lisp files preloaded.  (The @samp{-batch} argument prevents @file{temacs} from trying to initialize any of its data on the terminal, so that the tables of terminal information are empty in the dumped Emacs.)"
msgstr "標準的なLispファイルのロードには若干の時間を要するので、ユーザーが直接@file{temacs}実行可能形式を実行することは通常はありません。そのかわり、Emacsビルドの最終ステップとしてコマンド@samp{temacs -batch -l loadup dump}が実行されます。特別な引数@samp{dump}により@command{temacs}は@file{emacs}と呼ばれる実行可能形式のプログラムにダンプされます。これには標準的なLispファイルがすべて事前ロードされています(引数@samp{-batch}は@file{temacs}がその端末上でデータの初期化を試みることを防げるので端末情報のテーブルはダンプされたEmacsでは空になる)。"

#. type: cindex
#: original_texis/internals.texi:61
#, no-wrap
msgid "preloaded Lisp files"
msgstr "preloaded Lisp files"

#. type: vindex
#: original_texis/internals.texi:62
#, no-wrap
msgid "preloaded-file-list"
msgstr "preloaded-file-list"

#. type: Plain text
#: original_texis/internals.texi:69
msgid "The dumped @file{emacs} executable (also called a @dfn{pure} Emacs)  is the one which is installed.  The variable @code{preloaded-file-list} stores a list of the Lisp files preloaded into the dumped Emacs.  If you port Emacs to a new operating system, and are not able to implement dumping, then Emacs must load @file{loadup.el} each time it starts."
msgstr "ダンプされた@file{emacs}実行可能形式(@dfn{純粋}なEmacsとも呼ばれる)がインストールされるEmacsになります。変数@code{preloaded-file-list}にはダンプ済みEmacsに事前ロードされるLispファイルのリストが格納されています。新たなオペレーティングシステムにEmacsをポートする際に、そのOSがダンプを実装していなければEmacsは起動時に毎回@file{loadup.el}をロードしなければなりません。"

#. type: cindex
#: original_texis/internals.texi:70
#, no-wrap
msgid "build details"
msgstr "build details"

#. type: cindex
#: original_texis/internals.texi:71
#, no-wrap
msgid "deterministic build"
msgstr "deterministic build"

#. type: cindex
#: original_texis/internals.texi:72
#, no-wrap
msgid "@option{--disable-build-details} option to @command{configure}"
msgstr "@option{--disable-build-details} option to @command{configure}"

#. type: Plain text
#: original_texis/internals.texi:79
msgid "By default the dumped @file{emacs} executable records details such as the build time and host name.  Use the @option{--disable-build-details} option of @command{configure} to suppress these details, so that building and installing Emacs twice from the same sources is more likely to result in identical copies of Emacs."
msgstr "ダンプされた@file{emacs}にはデフォルトではビルド時刻やホスト名のような詳細が記録されます。これらの詳細を抑制するために@command{configure}のオプションに@option{--disable-build-details}を使用すれば、同一のソースからEmacsを2回ビルドしてインストールする際に同一のEmacsのコピーが生成される可能性が高くなります。"

#. type: file{#1}
#: original_texis/internals.texi:80
#, no-wrap
msgid "site-load.el"
msgstr "site-load.el"

#. type: Plain text
#: original_texis/internals.texi:84
msgid "You can specify additional files to preload by writing a library named @file{site-load.el} that loads them.  You may need to rebuild Emacs with an added definition"
msgstr "@file{site-load.el}という名前のライブラリーを記述することにより、事前ロードするファイルを追加指定できます。追加するファイルを保持するために純粋(pure)なスペース@var{n}バイトを追加するように、以下の定義"

#. type: example
#: original_texis/internals.texi:87
#, no-wrap
msgid "#define SITELOAD_PURESIZE_EXTRA @var{n}\n"
msgstr "#define SITELOAD_PURESIZE_EXTRA @var{n}\n"

#. type: Plain text
#: original_texis/internals.texi:95
msgid "to make @var{n} added bytes of pure space to hold the additional files; see @file{src/puresize.h}.  (Try adding increments of 20000 until it is big enough.)  However, the advantage of preloading additional files decreases as machines get faster.  On modern machines, it is usually not advisable."
msgstr "でEmacsをリビルドする必要があるでしょう。@file{src/puresize.h}を参考にしてください(十分大きくなるまで20000ずつ増加させる)。しかし追加ファイルの事前ロードの優位はマシンの高速化により減少します。現代的なマシンでは通常はお勧めしません。"

#. type: Plain text
#: original_texis/internals.texi:101
msgid "After @file{loadup.el} reads @file{site-load.el}, it finds the documentation strings for primitive and preloaded functions (and variables) in the file @file{etc/DOC} where they are stored, by calling @code{Snarf-documentation} (@pxref{Definition of Snarf-documentation,, Accessing Documentation})."
msgstr "@file{loadup.el}が@file{site-load.el}を読み込んだ後に@code{Snarf-documentation}を呼び出すことにより、それらが格納された場所のファイル@file{etc/DOC}内にあるプリミティブと事前ロードされる関数(と変数)のドキュメント文字列を探します(@ref{Definition of Snarf-documentation,, Accessing Documentation}を参照)。"

#. type: file{#1}
#: original_texis/internals.texi:102
#, no-wrap
msgid "site-init.el"
msgstr "site-init.el"

#. type: cindex
#: original_texis/internals.texi:103
#, no-wrap
msgid "preloading additional functions and variables"
msgstr "preloading additional functions and variables"

#. type: Plain text
#: original_texis/internals.texi:107
msgid "You can specify other Lisp expressions to execute just before dumping by putting them in a library named @file{site-init.el}.  This file is executed after the documentation strings are found."
msgstr "@file{site-init.el}という名前のライブラリー名に配置することにより、ダンプ直前に実行する他のLisp式を指定できます。このファイルはドキュメント文字列を見つけた後に実行されます。"

#. type: Plain text
#: original_texis/internals.texi:111
msgid "If you want to preload function or variable definitions, there are three ways you can do this and make their documentation strings accessible when you subsequently run Emacs:"
msgstr "関数や変数の定義を事前ロードしたい場合には、それを行うために3つの方法があります。それらにより定義ロードしてその後のEmacs実行時にドキュメント文字列をアクセス可能にします:"

#. type: itemize
#: original_texis/internals.texi:116
msgid "Arrange to scan these files when producing the @file{etc/DOC} file, and load them with @file{site-load.el}."
msgstr "@file{etc/DOC}の生成時にそれらのファイルをスキャンするよう計らい@file{site-load.el}でロードする。"

#. type: itemize
#: original_texis/internals.texi:120
msgid "Load the files with @file{site-init.el}, then copy the files into the installation directory for Lisp files when you install Emacs."
msgstr "ファイルを@file{site-init.el}でロードしてEmacsインストール時にLispファイルのインストール先ディレクトリーにファイルをコピーする。"

#. type: itemize
#: original_texis/internals.texi:127
msgid "Specify a @code{nil} value for @code{byte-compile-dynamic-docstrings} as a local variable in each of these files, and load them with either @file{site-load.el} or @file{site-init.el}.  (This method has the drawback that the documentation strings take up space in Emacs all the time.)"
msgstr "それらの各ファイルでローカル変数として@code{byte-compile-dynamic-docstrings}に@code{nil}値を指定して@file{site-load.el}か@file{site-init.el}でロードする(この手法にはEmacsが毎回そのドキュメント文字列用のスペースを確保するという欠点がある)。"

#. type: cindex
#: original_texis/internals.texi:129
#, no-wrap
msgid "change @code{load-path} at configure time"
msgstr "change @code{load-path} at configure time"

#. type: cindex
#: original_texis/internals.texi:130
#, no-wrap
msgid "@option{--enable-locallisppath} option to @command{configure}"
msgstr "@option{--enable-locallisppath} option to @command{configure}"

#. type: Plain text
#: original_texis/internals.texi:141
msgid "It is not advisable to put anything in @file{site-load.el} or @file{site-init.el} that would alter any of the features that users expect in an ordinary unmodified Emacs.  If you feel you must override normal features for your site, do it with @file{default.el}, so that users can override your changes if they wish.  @xref{Startup Summary}.  Note that if either @file{site-load.el} or @file{site-init.el} changes @code{load-path}, the changes will be lost after dumping.  @xref{Library Search}.  To make a permanent change to @code{load-path}, use the @option{--enable-locallisppath} option of @command{configure}."
msgstr "通常の未変更のEmacsでユーザーが期待する何らかの機能を変更するような何かを@file{site-load.el}や@file{site-init.el}内に配置することはお勧めしません。あなたのサイトで通常の機能をオーバーライドしなければならないと感じた場合には、@file{default.el}でそれを行えばユーザーが望む場合にあなたの変更をオーバーライドできます。@ref{Startup Summary}を参照してください。@file{site-load.el}か@file{site-init.el}のいずれかが@code{load-path}を変更する場合には変更はダンプ後に失われます。@ref{Library Search}を参照してください。@code{load-path}を永続的に変更するには@command{configure}の@option{--enable-locallisppath}オプションを指定してください。"

#. type: Plain text
#: original_texis/internals.texi:151
msgid "In a package that can be preloaded, it is sometimes necessary (or useful) to delay certain evaluations until Emacs subsequently starts up.  The vast majority of such cases relate to the values of customizable variables.  For example, @code{tutorial-directory} is a variable defined in @file{startup.el}, which is preloaded.  The default value is set based on @code{data-directory}.  The variable needs to access the value of @code{data-directory} when Emacs starts, not when it is dumped, because the Emacs executable has probably been installed in a different location since it was dumped."
msgstr "事前ロード可能なパッケージでは、その後のEmacsスタートアップまで特定の評価の遅延が必要(または便利)なことがあります。そのようなケースの大半はカスタマイズ可能な変数の値に関するものです。たとえば@code{tutorial-directory}は事前ロードされる@file{startup.el}内で定義される変数です。これのデフォルト値は@code{data-directory}にもとづいてセットされます。この変数はEmacsダンプ時ではなくスタート時に@code{data-directory}の値を必要とします。なぜならEmacs実行可能形式はダンプされたものなので、恐らく異なる場所にインストールされるからです。"

#. type: defun
#: original_texis/internals.texi:152
#, no-wrap
msgid "custom-initialize-delay symbol value"
msgstr "custom-initialize-delay symbol value"

#. type: defun
#: original_texis/internals.texi:158
msgid "This function delays the initialization of @var{symbol} to the next Emacs start.  You normally use this function by specifying it as the @code{:initialize} property of a customizable variable.  (The argument @var{value} is unused, and is provided only for compatibility with the form Custom expects.)"
msgstr "この関数は次回のEmacs開始まで@var{symbol}の初期化を遅延する。通常はカスタマイズ可能変数の@code{:initialize}プロパティとしてこの関数を指定することにより使用する(引数@var{value}はフォームCustom由来の互換性のためだけに提供されており使用しない)。"

#. type: Plain text
#: original_texis/internals.texi:163
msgid "In the unlikely event that you need a more general functionality than @code{custom-initialize-delay} provides, you can use @code{before-init-hook} (@pxref{Startup Summary})."
msgstr "@code{custom-initialize-delay}が提供するより一般的な機能を要する稀なケースでは@code{before-init-hook}を使用できます(@ref{Startup Summary}を参照)。"

#. type: defun
#: original_texis/internals.texi:164
#, no-wrap
msgid "dump-emacs to-file from-file"
msgstr "dump-emacs to-file from-file"

#. type: cindex
#: original_texis/internals.texi:165
#, no-wrap
msgid "unexec"
msgstr "unexec"

#. type: defun
#: original_texis/internals.texi:169
msgid "This function dumps the current state of Emacs into an executable file @var{to-file}.  It takes symbols from @var{from-file} (this is normally the executable file @file{temacs})."
msgstr "この関数はEmacsのカレント状態を実行可能ファイル@var{to-file}にダンプする。これは@var{from-file} (通常はファイル@file{temacs})からシンボルを取得する。"

#. type: defun
#: original_texis/internals.texi:172
msgid "If you want to use this function in an Emacs that was already dumped, you must run Emacs with @samp{-batch}."
msgstr "すでにダンプ済みのEmacs内でこの関数を使用する場合には@samp{-batch}でEmacsを実行しなければならない。"

#. type: cindex
#: original_texis/internals.texi:176
#, no-wrap
msgid "pure storage"
msgstr "pure storage"

#. type: Plain text
#: original_texis/internals.texi:184
msgid "Emacs Lisp uses two kinds of storage for user-created Lisp objects: @dfn{normal storage} and @dfn{pure storage}.  Normal storage is where all the new data created during an Emacs session are kept (@pxref{Garbage Collection}).  Pure storage is used for certain data in the preloaded standard Lisp files---data that should never change during actual use of Emacs."
msgstr "Emacs Lispはユーザー作成Lispオブジェクトにたいして、@dfn{通常ストレージ(normal storage)}と@dfn{純粋ストレージ(pure storage)}という2種のストレージをもちます。通常ストレージはEmacsセッションが維持される間に新たにデータが作成される場所です。純粋ストレージは事前ロードされた標準Lispファイル内の特定のデータのために使用されます。このデータは実際のEmacs使用中に決して変更されるべきではないデータです。"

#. type: Plain text
#: original_texis/internals.texi:200
msgid "Pure storage is allocated only while @command{temacs} is loading the standard preloaded Lisp libraries.  In the file @file{emacs}, it is marked as read-only (on operating systems that permit this), so that the memory space can be shared by all the Emacs jobs running on the machine at once.  Pure storage is not expandable; a fixed amount is allocated when Emacs is compiled, and if that is not sufficient for the preloaded libraries, @file{temacs} allocates dynamic memory for the part that didn't fit.  The resulting image will work, but garbage collection (@pxref{Garbage Collection}) is disabled in this situation, causing a memory leak.  Such an overflow normally won't happen unless you try to preload additional libraries or add features to the standard ones.  Emacs will display a warning about the overflow when it starts.  If this happens, you should increase the compilation parameter @code{SYSTEM_PURESIZE_EXTRA} in the file @file{src/puresize.h} and rebuild Emacs."
msgstr "純粋ストレージは@command{temacs}が標準的な事前ローLispライブラリーのロード中にのみ割り当てられます。ファイル@file{emacs}ではこのメモリースペースは読み取り専用とマークされるのでマシン上で実行中のすべてのEmacsジョブで共有できます。純粋ストレージは拡張できません。Emacsのコンパイル時に固定された量が割り当てられて、それが事前ロードされるライブラリーにたいして不足なら@file{temacs}はそれに収まらない部分を動的メモリーに割り当てます。結果イメージは動作するでしょうがこの状況ではメモリーリークとなるのでガーベージコレクション(@ref{Garbage Collection}を参照)は無効です。そのような通常なら発生しないオーバーフローは、あなたが事前ロードライブラリの追加や標準的な事前ロードライブラリに追加を試みないかぎり発生しません。Emacsはオーバーロードの開始時にオーバーロードに関する警告を表示するでしょう。これが発生したらファイル@file{src/puresize.h}内のコンパイルパラメーターを@code{SYSTEM_PURESIZE_EXTRA}を増やしてEmacsをリビルドする必要があります。"

#. type: defun
#: original_texis/internals.texi:201
#, no-wrap
msgid "purecopy object"
msgstr "purecopy object"

#. type: defun
#: original_texis/internals.texi:208
msgid "This function makes a copy in pure storage of @var{object}, and returns it.  It copies a string by simply making a new string with the same characters, but without text properties, in pure storage.  It recursively copies the contents of vectors and cons cells.  It does not make copies of other objects such as symbols, but just returns them unchanged.  It signals an error if asked to copy markers."
msgstr "この関数は純粋ストレージに@var{object}のコピーを作成してリターンする。これは同じ文字で新たに文字列を作成することにより文字列をコピーするが、純粋ストレージではテキストプロパティはない。これはベクターとコンスセルのコンテンツを再帰的にコピーする。シンボルのような他のオブジェクトのコピーは作成しないが未変更でリターンする。マーカーのコピーを試みるとエラーをシグナルする。"

#. type: defun
#: original_texis/internals.texi:211
msgid "This function is a no-op except while Emacs is being built and dumped; it is usually called only in preloaded Lisp files."
msgstr "この関数はEmacsのビルド中とダンプ中を除き何もしない。通常は事前ロードされるLispファイル内でのみ呼び出される。"

#. type: defvar
#: original_texis/internals.texi:213
#, no-wrap
msgid "pure-bytes-used"
msgstr "pure-bytes-used"

#. type: defvar
#: original_texis/internals.texi:218
msgid "The value of this variable is the number of bytes of pure storage allocated so far.  Typically, in a dumped Emacs, this number is very close to the total amount of pure storage available---if it were not, we would preallocate less."
msgstr "この変数の値は、これまでに割り当てられた純粋ストレージのバイト数。ダンプされたEmacsでは通常は利用可能な純粋ストレージの総量とほとんど同じであり、もしそうでないならわたしたちは事前割り当てをもっと少なくするだろう。"

#. type: defvar
#: original_texis/internals.texi:220
#, no-wrap
msgid "purify-flag"
msgstr "purify-flag"

#. type: defvar
#: original_texis/internals.texi:224
msgid "This variable determines whether @code{defun} should make a copy of the function definition in pure storage.  If it is non-@code{nil}, then the function definition is copied into pure storage."
msgstr "この変数は@code{defun}が純粋ストレージにその関数定義のコピーを作成するべきか否かを判断する。これが非@code{nil}ならその関数の定義は純粋ストレージにコピーされる。"

#. type: defvar
#: original_texis/internals.texi:230
msgid "This flag is @code{t} while loading all of the basic functions for building Emacs initially (allowing those functions to be shareable and non-collectible).  Dumping Emacs as an executable always writes @code{nil} in this variable, regardless of the value it actually has before and after dumping."
msgstr "このフラグはEmacsのビルド用の基本的な関数の初回ロード中は@code{t}となる。実行可能形式としてEmacsをダンプすることにより、ダンプ前後の実際の値とは無関係に常にこの変数に@code{nil}が書き込まれる。"

#. type: defvar
#: original_texis/internals.texi:232
msgid "You should not change this flag in a running Emacs."
msgstr "実行中のEmacsでこのフラグを変更しないこと。"

#. type: cindex
#: original_texis/internals.texi:237
#, no-wrap
msgid "memory allocation"
msgstr "memory allocation"

#. type: Plain text
#: original_texis/internals.texi:247
msgid "When a program creates a list or the user defines a new function (such as by loading a library), that data is placed in normal storage.  If normal storage runs low, then Emacs asks the operating system to allocate more memory.  Different types of Lisp objects, such as symbols, cons cells, small vectors, markers, etc., are segregated in distinct blocks in memory.  (Large vectors, long strings, buffers and certain other editing types, which are fairly large, are allocated in individual blocks, one per object; small strings are packed into blocks of 8k bytes, and small vectors are packed into blocks of 4k bytes)."
msgstr "プログラムがリストを作成するときや、(ライブライのロード等により)ユーザーが新しい関数を定義する際には、そのデータは通常ストレージに配置されます。通常ストレージが少なくなるとEmacsはもっとメモリーを割り当てるようにオペレーティングシステムに要求します。シンボル、コンスセル、小さいベクター、マーカー等のような別のタイプのLispオブジェクトはメモリー内の個別のブロックに隔離されます(大きいベクター、長い文字列、バッファー、および他の特定の編集タイプは非常に巨大であり1つのオブジェクトにたいして個別のブロックが割り当てられて、小さな文字列は8kバイトのブロック、小さいベクターは4kバイトのブロックにパックされる)。"

#. type: cindex
#: original_texis/internals.texi:248
#, no-wrap
msgid "vector-like objects, storage"
msgstr "vector-like objects, storage"

#. type: cindex
#: original_texis/internals.texi:249
#, no-wrap
msgid "storage of vector-like Lisp objects"
msgstr "storage of vector-like Lisp objects"

#. type: Plain text
#: original_texis/internals.texi:258
msgid "Beyond the basic vector, a lot of objects like window, buffer, and frame are managed as if they were vectors.  The corresponding C data structures include the @code{union vectorlike_header} field whose @code{size} member contains the subtype enumerated by @code{enum pvec_type} and an information about how many @code{Lisp_Object} fields this structure contains and what the size of the rest data is.  This information is needed to calculate the memory footprint of an object, and used by the vector allocation code while iterating over the vector blocks."
msgstr "基本的なベクトではないウィンドウ、バッファー、フレームがあたかもベクターであるかのように管理されています。対応するCデータ構造体には@code{union vectorlike_header}フィールドが含まれ、そのメンバー@code{size}には@code{enum pvec_type}で列挙されたサブタイプ、その構造体が含む@code{Lisp_Object}フィールドの数に関する情報、および残りのデータのサイズが含まれます。この情報は、オブジェクトのメモリーフットプリントの計算に必要であり、ベクターブロックの繰り返し処理の際のベクター割り当てコードにより使用されます。"

#. type: cindex
#: original_texis/internals.texi:259
#, no-wrap
msgid "garbage collection"
msgstr "garbage collection"

#. type: Plain text
#: original_texis/internals.texi:269
msgid "It is quite common to use some storage for a while, then release it by (for example) killing a buffer or deleting the last pointer to an object.  Emacs provides a @dfn{garbage collector} to reclaim this abandoned storage.  The garbage collector operates by finding and marking all Lisp objects that are still accessible to Lisp programs.  To begin with, it assumes all the symbols, their values and associated function definitions, and any data presently on the stack, are accessible.  Any objects that can be reached indirectly through other accessible objects are also accessible."
msgstr "しばらくの間いくつかのストレージを使用して、(たとえば)バッファーのkillやあるオブジェクトを指す最後のポインターの削除によりそれを解放するのは非常に一般的です。この放棄されたストレージを再利用するためにEmacsは@dfn{ガーベージコレクター(garbage collector)}を提供します。ガーベージコレクターは、いまだLispプログラムからアクセス可能なすべてのLispオブジェクトを検索、マークすることにより動作します。これを開始するにはすべてのシンボル、それらの値と関連付けられている関数定義、現在スタック上にあるすべてのデータをアクセス可能であると仮定します。別のアクセス可能オブジェクトを介して間接的に到達できるすべてのオブジェクトもアクセス可能とみなされます。"

#. type: Plain text
#: original_texis/internals.texi:275
msgid "When marking is finished, all objects still unmarked are garbage.  No matter what the Lisp program or the user does, it is impossible to refer to them, since there is no longer a way to reach them.  Their space might as well be reused, since no one will miss them.  The second (sweep) phase of the garbage collector arranges to reuse them."
msgstr "マーキングが終了してもマークされないオブジェクトはすべてガーベージ(garbage: ごみ)です。Lispプログラムかユーザーの行為かに関わらず、それらに到達する手段はもはや存在しないので参照することは不可能です。誰もそれを失うことはないので、それらのスペースは再利用されることになります。ガーベージコレクターの2つ目ののフェーズ(sweep: スイープ、一掃)ではそれらの再利用を計らいます。"

#. type: cindex
#: original_texis/internals.texi:278
#, no-wrap
msgid "free list"
msgstr "free list"

#. type: Plain text
#: original_texis/internals.texi:288
msgid "The sweep phase puts unused cons cells onto a @dfn{free list} for future allocation; likewise for symbols and markers.  It compacts the accessible strings so they occupy fewer 8k blocks; then it frees the other 8k blocks.  Unreachable vectors from vector blocks are coalesced to create largest possible free areas; if a free area spans a complete 4k block, that block is freed.  Otherwise, the free area is recorded in a free list array, where each entry corresponds to a free list of areas of the same size.  Large vectors, buffers, and other large objects are allocated and freed individually."
msgstr "スイープフェーズは将来の割り当て用に、シンボルやマーカーと同様に未使用のコンスセルを@dfn{フリーリスト(free list)}上に配置します。これはアクセス可能な文字列は少数の8kブロックを占有するように圧縮して、その後に他の8kブロックを解放します。ベクターブロックから到達不可能はベクターは可能なかぎり最大のフリーエリアを作成するために統合して、フリーエリアが完全な4kブロックに跨がるようならブロックは解放されます。それ以外ならフリーエリアはフリーリスト配列に記録されます。これは各エントリーが同サイズのエリアのフリーリストに対応します。巨大なベクター、バッファー、その他の巨大なオブジェクトは個別に割り当てと解放が行われます。"

#. type: cindex
#: original_texis/internals.texi:289
#, no-wrap
msgid "CL note---allocate more storage"
msgstr "CL note---allocate more storage"

#. type: quotation
#: original_texis/internals.texi:296
msgid "@b{Common Lisp note:} Unlike other Lisps, GNU Emacs Lisp does not call the garbage collector when the free list is empty.  Instead, it simply requests the operating system to allocate more storage, and processing continues until @code{gc-cons-threshold} bytes have been used."
msgstr "@b{Common Lispに関する注意:} 他のLispと異なりGNU Emacs Lispはフリーリストが空のときにガーベージコレクターを呼び出さない。かわりに単にオペレーティングシステムに更なるストレージの割り当てを要求して、@code{gc-cons-threshold}バイトを使い切るまで処理を継続する。"

#. type: quotation
#: original_texis/internals.texi:302
msgid "This means that you can make sure that the garbage collector will not run during a certain portion of a Lisp program by calling the garbage collector explicitly just before it (provided that portion of the program does not use so much space as to force a second garbage collection)."
msgstr "これは特定のLispプログラムの範囲の実行直前に明示的にガーベージコレクターを呼び出せば、その範囲の実行中はガーベージコレクターが実行されないだろうと確信できることを意味する(そのプログラム範囲が2回目のガーベージコレクションを強制するほど多くのスペースを使用しないという前提)。"

#. type: deffn
#: original_texis/internals.texi:304
#, no-wrap
msgid "Command garbage-collect"
msgstr "Command garbage-collect"

#. type: deffn
#: original_texis/internals.texi:309
msgid "This command runs a garbage collection, and returns information on the amount of space in use.  (Garbage collection can also occur spontaneously if you use more than @code{gc-cons-threshold} bytes of Lisp data since the previous garbage collection.)"
msgstr "このコマンドはガーベージコレクションを実行して使用中のスペース量の情報をリターンする(前回のガーベージコレクション以降に@code{gc-cons-threshold}バイトより多いLispデータを使用した場合には自然にガーベージコレクションが発生することもあり得る)。"

#. type: deffn
#: original_texis/internals.texi:318
msgid "@code{garbage-collect} returns a list with information on amount of space in use, where each entry has the form @samp{(@var{name} @var{size} @var{used})} or @samp{(@var{name} @var{size} @var{used} @var{free})}.  In the entry, @var{name} is a symbol describing the kind of objects this entry represents, @var{size} is the number of bytes used by each one, @var{used} is the number of those objects that were found live in the heap, and optional @var{free} is the number of those objects that are not live but that Emacs keeps around for future allocations.  So an overall result is:"
msgstr "@code{garbage-collect}は使用中のスペース量の情報をリストでリターンする。これの各エントリーは@samp{(@var{name} @var{size} @var{used})}という形式をもつ。このエントリーで@var{name}はそのエントリーが対応するオブジェクトの種類を記述するシンボル、@var{size}はそれが使用するバイト数、@var{used}はヒープ内で生きていることが解ったオブジェクトの数、オプションの@var{free}は生きていないがEmacsが将来の割り当て用に保持しているオブジェクトの数。全体的な結果は以下のようになる:"

#. type: example
#: original_texis/internals.texi:331
#, no-wrap
msgid ""
"((@code{conses} @var{cons-size} @var{used-conses} @var{free-conses})\n"
" (@code{symbols} @var{symbol-size} @var{used-symbols} @var{free-symbols})\n"
" (@code{miscs} @var{misc-size} @var{used-miscs} @var{free-miscs})\n"
" (@code{strings} @var{string-size} @var{used-strings} @var{free-strings})\n"
" (@code{string-bytes} @var{byte-size} @var{used-bytes})\n"
" (@code{vectors} @var{vector-size} @var{used-vectors})\n"
" (@code{vector-slots} @var{slot-size} @var{used-slots} @var{free-slots})\n"
" (@code{floats} @var{float-size} @var{used-floats} @var{free-floats})\n"
" (@code{intervals} @var{interval-size} @var{used-intervals} @var{free-intervals})\n"
" (@code{buffers} @var{buffer-size} @var{used-buffers})\n"
" (@code{heap} @var{unit-size} @var{total-size} @var{free-size}))\n"
msgstr ""
"((@code{conses} @var{cons-size} @var{used-conses} @var{free-conses})\n"
" (@code{symbols} @var{symbol-size} @var{used-symbols} @var{free-symbols})\n"
" (@code{miscs} @var{misc-size} @var{used-miscs} @var{free-miscs})\n"
" (@code{strings} @var{string-size} @var{used-strings} @var{free-strings})\n"
" (@code{string-bytes} @var{byte-size} @var{used-bytes})\n"
" (@code{vectors} @var{vector-size} @var{used-vectors})\n"
" (@code{vector-slots} @var{slot-size} @var{used-slots} @var{free-slots})\n"
" (@code{floats} @var{float-size} @var{used-floats} @var{free-floats})\n"
" (@code{intervals} @var{interval-size} @var{used-intervals} @var{free-intervals})\n"
" (@code{buffers} @var{buffer-size} @var{used-buffers})\n"
" (@code{heap} @var{unit-size} @var{total-size} @var{free-size}))\n"

#. type: deffn
#: original_texis/internals.texi:334
msgid "Here is an example:"
msgstr "以下は例:"

#. type: example
#: original_texis/internals.texi:343
#, no-wrap
msgid ""
"(garbage-collect)\n"
"      @result{} ((conses 16 49126 8058) (symbols 48 14607 0)\n"
"                 (miscs 40 34 56) (strings 32 2942 2607)\n"
"                 (string-bytes 1 78607) (vectors 16 7247)\n"
"                 (vector-slots 8 341609 29474) (floats 8 71 102)\n"
"                 (intervals 56 27 26) (buffers 944 8)\n"
"                 (heap 1024 11715 2678))\n"
msgstr ""
"(garbage-collect)\n"
"      @result{} ((conses 16 49126 8058) (symbols 48 14607 0)\n"
"                 (miscs 40 34 56) (strings 32 2942 2607)\n"
"                 (string-bytes 1 78607) (vectors 16 7247)\n"
"                 (vector-slots 8 341609 29474) (floats 8 71 102)\n"
"                 (intervals 56 27 26) (buffers 944 8)\n"
"                 (heap 1024 11715 2678))\n"

#. type: deffn
#: original_texis/internals.texi:348
msgid "Below is a table explaining each element.  Note that last @code{heap} entry is optional and present only if an underlying @code{malloc} implementation provides @code{mallinfo} function."
msgstr "以下は各要素を説明するためのテーブル。最後の@code{heap}エントリーはオプションであり、背景にある@code{malloc}実装が@code{mallinfo}関数を提供する場合のみ与えられることに注意。"

#. type: item
#: original_texis/internals.texi:350
#, no-wrap
msgid "cons-size"
msgstr "cons-size"

#. type: table
#: original_texis/internals.texi:352
msgid "Internal size of a cons cell, i.e., @code{sizeof (struct Lisp_Cons)}."
msgstr "コンスセルの内部的サイズ(@code{sizeof (struct Lisp_Cons)})。"

#. type: item
#: original_texis/internals.texi:353
#, no-wrap
msgid "used-conses"
msgstr "used-conses"

#. type: table
#: original_texis/internals.texi:355
msgid "The number of cons cells in use."
msgstr "使用中のコンスセルの数。"

#. type: item
#: original_texis/internals.texi:356
#, no-wrap
msgid "free-conses"
msgstr "free-conses"

#. type: table
#: original_texis/internals.texi:359
msgid "The number of cons cells for which space has been obtained from the operating system, but that are not currently being used."
msgstr "オペレーティングシステムから取得したスペースにあるがカレントで未使用のコンスセルの数。"

#. type: item
#: original_texis/internals.texi:360
#, no-wrap
msgid "symbol-size"
msgstr "symbol-size"

#. type: table
#: original_texis/internals.texi:362
msgid "Internal size of a symbol, i.e., @code{sizeof (struct Lisp_Symbol)}."
msgstr "シンボルの内部的サイズ(@code{sizeof (struct Lisp_Symbol)})。"

#. type: item
#: original_texis/internals.texi:363
#, no-wrap
msgid "used-symbols"
msgstr "used-symbols"

#. type: table
#: original_texis/internals.texi:365
msgid "The number of symbols in use."
msgstr "使用中のシンボルの数。"

#. type: item
#: original_texis/internals.texi:366
#, no-wrap
msgid "free-symbols"
msgstr "free-symbols"

#. type: table
#: original_texis/internals.texi:369
msgid "The number of symbols for which space has been obtained from the operating system, but that are not currently being used."
msgstr "オペレーティングシステムから取得したスペースにあるがカレントで未使用のシンボルの数。"

#. type: item
#: original_texis/internals.texi:370
#, no-wrap
msgid "misc-size"
msgstr "misc-size"

#. type: table
#: original_texis/internals.texi:374
msgid "Internal size of a miscellaneous entity, i.e., @code{sizeof (union Lisp_Misc)}, which is a size of the largest type enumerated in @code{enum Lisp_Misc_Type}."
msgstr "雑多なエンティティーの内部的なサイズ。@code{sizeof (union Lisp_Misc)}は@code{enum Lisp_Misc_Type}に列挙された最大タイプのサイズ。"

#. type: item
#: original_texis/internals.texi:375
#, no-wrap
msgid "used-miscs"
msgstr "used-miscs"

#. type: table
#: original_texis/internals.texi:378
msgid "The number of miscellaneous objects in use.  These include markers and overlays, plus certain objects not visible to users."
msgstr "使用中の雑多なエンティティーの数。これらのエンティティーにはマーカー、オーバーレイに加えて、ユーザーにとって不可視な特定のオブジェクトが含まれる。"

#. type: item
#: original_texis/internals.texi:379
#, no-wrap
msgid "free-miscs"
msgstr "free-miscs"

#. type: table
#: original_texis/internals.texi:382
msgid "The number of miscellaneous objects for which space has been obtained from the operating system, but that are not currently being used."
msgstr "オペレーティングシステムから取得したスペースにあるがカレントで未使用の雑多なオブジェクトの数。"

#. type: item
#: original_texis/internals.texi:383
#, no-wrap
msgid "string-size"
msgstr "string-size"

#. type: table
#: original_texis/internals.texi:385
msgid "Internal size of a string header, i.e., @code{sizeof (struct Lisp_String)}."
msgstr "文字列ヘッダーの内部的サイズ(@code{sizeof (struct Lisp_String)})。"

#. type: item
#: original_texis/internals.texi:386
#, no-wrap
msgid "used-strings"
msgstr "used-strings"

#. type: table
#: original_texis/internals.texi:388
msgid "The number of string headers in use."
msgstr "使用中の文字列ヘッダーの数。"

#. type: item
#: original_texis/internals.texi:389
#, no-wrap
msgid "free-strings"
msgstr "free-strings"

#. type: table
#: original_texis/internals.texi:392
msgid "The number of string headers for which space has been obtained from the operating system, but that are not currently being used."
msgstr "オペレーティングシステムから取得したスペースにあるがカレントで未使用の文字列ヘッダーの数。"

#. type: item
#: original_texis/internals.texi:393
#, no-wrap
msgid "byte-size"
msgstr "byte-size"

#. type: table
#: original_texis/internals.texi:395
msgid "This is used for convenience and equals to @code{sizeof (char)}."
msgstr "これは利便性のために使用されるもので@code{sizeof (char)}と同じ。"

#. type: item
#: original_texis/internals.texi:396
#, no-wrap
msgid "used-bytes"
msgstr "used-bytes"

#. type: table
#: original_texis/internals.texi:398
msgid "The total size of all string data in bytes."
msgstr "すべての文字列データの総バイト数。"

#. type: item
#: original_texis/internals.texi:399
#, no-wrap
msgid "vector-size"
msgstr "vector-size"

#. type: table
#: original_texis/internals.texi:401
msgid "Internal size of a vector header, i.e., @code{sizeof (struct Lisp_Vector)}."
msgstr "ベクターヘッダーの内部的サイズ(@code{sizeof (struct Lisp_Vector)})。"

#. type: item
#: original_texis/internals.texi:402
#, no-wrap
msgid "used-vectors"
msgstr "used-vectors"

#. type: table
#: original_texis/internals.texi:404
msgid "The number of vector headers allocated from the vector blocks."
msgstr "ベクターブロックから割り当てられたベクターブロック数。"

#. type: item
#: original_texis/internals.texi:405
#, no-wrap
msgid "slot-size"
msgstr "slot-size"

#. type: table
#: original_texis/internals.texi:407
msgid "Internal size of a vector slot, always equal to @code{sizeof (Lisp_Object)}."
msgstr "ベクタースロットの内部的なサイズで常に@code{sizeof (Lisp_Object)}と等しい。"

#. type: item
#: original_texis/internals.texi:408
#, no-wrap
msgid "used-slots"
msgstr "used-slots"

#. type: table
#: original_texis/internals.texi:410
msgid "The number of slots in all used vectors."
msgstr "使用されているすべてのベクターのスロット数。"

#. type: item
#: original_texis/internals.texi:411
#, no-wrap
msgid "free-slots"
msgstr "free-slots"

#. type: table
#: original_texis/internals.texi:413
msgid "The number of free slots in all vector blocks."
msgstr "すべてのベクターブロックのフリースロットの数。"

#. type: item
#: original_texis/internals.texi:414
#, no-wrap
msgid "float-size"
msgstr "float-size"

#. type: table
#: original_texis/internals.texi:417
msgid "Internal size of a float object, i.e., @code{sizeof (struct Lisp_Float)}.  (Do not confuse it with the native platform @code{float} or @code{double}.)"
msgstr "浮動小数点数オブジェクトの内部的なサイズ(@code{sizeof (struct Lisp_Float)})。(ネイティブプラットフォームの@code{float}や@code{double}と混同しないこと。)"

#. type: item
#: original_texis/internals.texi:418
#, no-wrap
msgid "used-floats"
msgstr "used-floats"

#. type: table
#: original_texis/internals.texi:420
msgid "The number of floats in use."
msgstr "使用中の浮動小数点数の数。"

#. type: item
#: original_texis/internals.texi:421
#, no-wrap
msgid "free-floats"
msgstr "free-floats"

#. type: table
#: original_texis/internals.texi:424
msgid "The number of floats for which space has been obtained from the operating system, but that are not currently being used."
msgstr "オペレーティングシステムから取得したスペースにあるがカレントで未使用の浮動小数点数の数。"

#. type: item
#: original_texis/internals.texi:425
#, no-wrap
msgid "interval-size"
msgstr "interval-size"

#. type: table
#: original_texis/internals.texi:427
msgid "Internal size of an interval object, i.e., @code{sizeof (struct interval)}."
msgstr "インターバルオブジェクト(interval object)の内部的なサイズ(@code{sizeof (struct interval)})。"

#. type: item
#: original_texis/internals.texi:428
#, no-wrap
msgid "used-intervals"
msgstr "used-intervals"

#. type: table
#: original_texis/internals.texi:430
msgid "The number of intervals in use."
msgstr "使用中のインターバルの数。"

#. type: item
#: original_texis/internals.texi:431
#, no-wrap
msgid "free-intervals"
msgstr "free-intervals"

#. type: table
#: original_texis/internals.texi:434
msgid "The number of intervals for which space has been obtained from the operating system, but that are not currently being used."
msgstr "オペレーティングシステムから取得したスペースにあるがカレントで未使用のインターバルの数。"

#. type: item
#: original_texis/internals.texi:435
#, no-wrap
msgid "buffer-size"
msgstr "buffer-size"

#. type: table
#: original_texis/internals.texi:438
msgid "Internal size of a buffer, i.e., @code{sizeof (struct buffer)}.  (Do not confuse with the value returned by @code{buffer-size} function.)"
msgstr "バッファーの内部的なサイズ(@code{sizeof (struct buffer)})。(@code{buffer-size}関数がリターンする値と混同しないこと。)"

#. type: item
#: original_texis/internals.texi:439
#, no-wrap
msgid "used-buffers"
msgstr "used-buffers"

#. type: table
#: original_texis/internals.texi:442
msgid "The number of buffer objects in use.  This includes killed buffers invisible to users, i.e., all buffers in @code{all_buffers} list."
msgstr "使用中のバッファーオブジェクトの数。これにはユーザーからは不可視のkillされたバッファー、つまりリスト@code{all_buffers}内のバッファーすべてが含まれる。"

#. type: item
#: original_texis/internals.texi:443
#, no-wrap
msgid "unit-size"
msgstr "unit-size"

#. type: table
#: original_texis/internals.texi:445
msgid "The unit of heap space measurement, always equal to 1024 bytes."
msgstr "ヒープスペースを計る単位であり常に1024バイトと等しい。"

#. type: item
#: original_texis/internals.texi:446
#, no-wrap
msgid "total-size"
msgstr "total-size"

#. type: table
#: original_texis/internals.texi:448
msgid "Total heap size, in @var{unit-size} units."
msgstr "@var{unit-size}単位での総ヒープサイズ。"

#. type: item
#: original_texis/internals.texi:449
#, no-wrap
msgid "free-size"
msgstr "free-size"

#. type: table
#: original_texis/internals.texi:451
msgid "Heap space which is not currently used, in @var{unit-size} units."
msgstr "@var{unit-size}単位でのカレントで未使用のヒープスペース。"

#. type: deffn
#: original_texis/internals.texi:456
msgid "If there was overflow in pure space (@pxref{Pure Storage}), @code{garbage-collect} returns @code{nil}, because a real garbage collection cannot be done."
msgstr "純粋スペース(@ref{Pure Storage}を参照)内にオーバーフローがあれば実際にガーベージコレクションを行うことは不可能なので@code{garbage-collect}は@code{nil}をリターンする。"

#. type: defopt
#: original_texis/internals.texi:458
#, no-wrap
msgid "garbage-collection-messages"
msgstr "garbage-collection-messages"

#. type: defopt
#: original_texis/internals.texi:462
msgid "If this variable is non-@code{nil}, Emacs displays a message at the beginning and end of garbage collection.  The default value is @code{nil}."
msgstr "この変数が非@code{nil}ならEmacsはガーベージコレクションの最初と最後にメッセージを表示する。デフォルト値は@code{nil}。"

#. type: defvar
#: original_texis/internals.texi:464
#, no-wrap
msgid "post-gc-hook"
msgstr "post-gc-hook"

#. type: defvar
#: original_texis/internals.texi:468
msgid "This is a normal hook that is run at the end of garbage collection.  Garbage collection is inhibited while the hook functions run, so be careful writing them."
msgstr "これはガーベージコレクションの終わりに実行されるノーマルフック。ガーベージコレクションはこのフックの関数の実行中は抑制されるので慎重に記述すること。"

#. type: defopt
#: original_texis/internals.texi:470
#, no-wrap
msgid "gc-cons-threshold"
msgstr "gc-cons-threshold"

#. type: defopt
#: original_texis/internals.texi:479
msgid "The value of this variable is the number of bytes of storage that must be allocated for Lisp objects after one garbage collection in order to trigger another garbage collection.  You can use the result returned by @code{garbage-collect} to get an information about size of the particular object type; space allocated to the contents of buffers does not count.  Note that the subsequent garbage collection does not happen immediately when the threshold is exhausted, but only the next time the Lisp interpreter is called."
msgstr "この変数の値は別のガーベージコレクションをトリガーするために、ガーベージコレクション後にLispオブジェクト用に割り当てなければならないストレージのバイト数。特定のオブジェクトタイプに関する情報を取得するために、@code{garbage-collect}がリターンした結果を使用できる。バッファーのコンテンツに割り当てられたスペースは勘定に入らない。後続のガーベージコレクションはこのthreshold(閾値)が消費されても即座には実行されず、次回にLispインタープリターが呼び出されたときにのみ実行されることに注意。"

#. type: defopt
#: original_texis/internals.texi:487
msgid "The initial threshold value is @code{GC_DEFAULT_THRESHOLD}, defined in @file{alloc.c}.  Since it's defined in @code{word_size} units, the value is 400,000 for the default 32-bit configuration and 800,000 for the 64-bit one.  If you specify a larger value, garbage collection will happen less often.  This reduces the amount of time spent garbage collecting, but increases total memory use.  You may want to do this when running a program that creates lots of Lisp data."
msgstr "thresholdの初期値は@code{GC_DEFAULT_THRESHOLD}であり、これは@file{alloc.c}内で定義されている。これは@code{word_size}単位で定義されているので、デフォルトの32ビット設定では400,000、64ビット設定では800,000になる。大きい値を指定するとガーベージコレクションの頻度が下る。これはガーベージコレクションにより費やされる時間を減少させるがメモリーの総使用量は増大する。大量のLispデータを作成するプログラムの実行時にはこれを行いたいと思うかもしれない。"

#. type: defopt
#: original_texis/internals.texi:492
msgid "You can make collections more frequent by specifying a smaller value, down to 1/10th of @code{GC_DEFAULT_THRESHOLD}.  A value less than this minimum will remain in effect only until the subsequent garbage collection, at which time @code{garbage-collect} will set the threshold back to the minimum."
msgstr "@code{GC_DEFAULT_THRESHOLD}の1/10まで下げた小さな値を指定することにより、より頻繁にガーベージコレクションを発生させることができる。この最小値より小さい値は後続のガーベージコレクションで、@code{garbage-collect}がthresholdを最小値に戻すときまでしか効果をもたないだろう。"

#. type: defopt
#: original_texis/internals.texi:494
#, no-wrap
msgid "gc-cons-percentage"
msgstr "gc-cons-percentage"

#. type: defopt
#: original_texis/internals.texi:499
msgid "The value of this variable specifies the amount of consing before a garbage collection occurs, as a fraction of the current heap size.  This criterion and @code{gc-cons-threshold} apply in parallel, and garbage collection occurs only when both criteria are satisfied."
msgstr "この変数の値はガーベージコレクション発生するまでのコンス(訳注: これは@code{gc-cons-threshold}や@code{gc-cons-percentage}の@samp{-cons-}のことで、これらの変数が定義されている@file{alloc.c}内ではLisp方言での@samp{cons}をより一般化したメモリー割り当てプロセスのことを指す模様)の量をカレントヒープサイズにたいする割り合いで指定する。この条件と@code{gc-cons-threshold}を並行して適用して、条件が両方満足されたときだけガーベージコレクションが発生する。"

#. type: defopt
#: original_texis/internals.texi:503
msgid "As the heap size increases, the time to perform a garbage collection increases.  Thus, it can be desirable to do them less frequently in proportion."
msgstr "ヒープサイズ増加にともないガーベージコレクションの処理時間は増大する。したがってガーベージコレクションの頻度割合を減らすのが望ましいことがある。"

#. type: Plain text
#: original_texis/internals.texi:509
msgid "The value returned by @code{garbage-collect} describes the amount of memory used by Lisp data, broken down by data type.  By contrast, the function @code{memory-limit} provides information on the total amount of memory Emacs is currently using."
msgstr "@code{garbage-collect}がリターンする値はデータ型に分類されたLispデータのメモリー使用量を記述します。それとは対照的に関数@code{memory-limit}はEmacsがカレントで使用中の総メモリー量の情報を提供します。"

#. type: defun
#: original_texis/internals.texi:510
#, no-wrap
msgid "memory-limit"
msgstr "memory-limit"

#. type: defun
#: original_texis/internals.texi:514
msgid "This function returns the address of the last byte Emacs has allocated, divided by 1024.  We divide the value by 1024 to make sure it fits in a Lisp integer."
msgstr "この関数はEmacsが割り当てたメモリーの最後のバイトアドレスを1024で除した値をリターンする。値を1024で除しているのはLisp整数に収まるようにするため。"

#. type: defun
#: original_texis/internals.texi:517
msgid "You can use this to get a general idea of how your actions affect the memory usage."
msgstr "あなたのアクションがメモリー使用に与える影響について大まかなアイデアを得るためにこれを使用することができる。"

#. type: defvar
#: original_texis/internals.texi:519
#, no-wrap
msgid "memory-full"
msgstr "memory-full"

#. type: defvar
#: original_texis/internals.texi:522
msgid "This variable is @code{t} if Emacs is nearly out of memory for Lisp objects, and @code{nil} otherwise."
msgstr "この変数はLispオブジェクト用のメモリーが不足に近い状態なら@code{t}、それ以外なら@code{nil}。"

#. type: defun
#: original_texis/internals.texi:524
#, no-wrap
msgid "memory-use-counts"
msgstr "memory-use-counts"

#. type: defun
#: original_texis/internals.texi:528
msgid "This returns a list of numbers that count the number of objects created in this Emacs session.  Each of these counters increments for a certain kind of object.  See the documentation string for details."
msgstr "これはそのEmacsセッションで作成されたオブジェクト数をカウントしたリスト。これらのカウンターはそれぞれ特定の種類のオブジェクトを数える。詳細はドキュメント文字列を参照のこと。"

#. type: defun
#: original_texis/internals.texi:530
#, no-wrap
msgid "memory-info"
msgstr "memory-info"

#. type: defun
#: original_texis/internals.texi:533
msgid "This functions returns an amount of total system memory and how much of it is free.  On an unsupported system, the value may be @code{nil}."
msgstr "この関数はシステムメモリーのトータル量とフリーな量をリターンする。サポートされないシステムでは値は@code{nil}かもしれない。"

#. type: defvar
#: original_texis/internals.texi:535
#, no-wrap
msgid "gcs-done"
msgstr "gcs-done"

#. type: defvar
#: original_texis/internals.texi:538
msgid "This variable contains the total number of garbage collections done so far in this Emacs session."
msgstr "この変数はそのEmacsセッションでそれまでに行われたガーベージコレクションの合計回数。"

#. type: defvar
#: original_texis/internals.texi:540
#, no-wrap
msgid "gc-elapsed"
msgstr "gc-elapsed"

#. type: defvar
#: original_texis/internals.texi:544
msgid "This variable contains the total number of seconds of elapsed time during garbage collection so far in this Emacs session, as a floating-point number."
msgstr "この変数はそのEmacsセッションでガーベージコレクションの間に費やされた経過時間を浮動小数点数で表した総秒数。"

#. type: cindex
#: original_texis/internals.texi:549
#, no-wrap
msgid "stack allocated Lisp objects"
msgstr "stack allocated Lisp objects"

#. type: cindex
#: original_texis/internals.texi:550
#, no-wrap
msgid "Lisp objects, stack-allocated"
msgstr "Lisp objects, stack-allocated"

#. type: Plain text
#: original_texis/internals.texi:562
msgid "The garbage collector described above is used to manage data visible from Lisp programs, as well as most of the data internally used by the Lisp interpreter.  Sometimes it may be useful to allocate temporary internal objects using the C stack of the interpreter.  This can help performance, as stack allocation is typically faster than using heap memory to allocate and the garbage collector to free.  The downside is that using such objects after they are freed results in undefined behavior, so uses should be well thought out and carefully debugged by using the @code{GC_CHECK_MARKED_OBJECTS} feature (see @file{src/alloc.c}).  In particular, stack-allocated objects should never be made visible to user Lisp code."
msgstr "上述のガーベージコレクターはLispプログラムから可視なデータ、同様にLispインタープリターが内部的に使用するほとんどのデータの管理に使用されます。インタプリターのCスタックを使用して一時的に内部オブジェクトを割り当てることが有用なときがあります。割り当てとガーベージコレクターによる解放は、ヒープメモリーよりスタック割り当てを使用するほうが通常は高速なので、これはパフォーマンスの改善の助けになります。これには解放後にそのようなオブジェクトを使用することにより未定義の挙動を引き起こすという欠点があるので、使用においては熟考するとともに@code{GC_CHECK_MARKED_OBJECTS}機能(@file{src/alloc.c}を参照)を使用して慎重にデバッグするべきです。特にスタックに割り当てられたオブジェクトはユーザーのLispコードからは決して可視にならないようにする必要があります。"

#. type: Plain text
#: original_texis/internals.texi:570
msgid "Currently, cons cells and strings can be allocated this way.  This is implemented by C macros like @code{AUTO_CONS} and @code{AUTO_STRING} that define a named @code{Lisp_Object} with block lifetime.  These objects are not freed by the garbage collector; instead, they have automatic storage duration, i.e., they are allocated like local variables and are automatically freed at the end of execution of the C block that defined the object."
msgstr "現在のことろコンスセルと文字列をこの方法で割り当てできます。これはblock寿命をもつ名前つき@code{Lisp_Object}を定義する@code{AUTO_CONS}や@code{AUTO_STRING}のようなCマクロで実装されています。これらのオブジェクトはガーベージコレクターでは解放されません。かわりにこれらは自動記憶期間(automatic storage duration)をもちます。つまりそれらはすべてローカル変数のように割り当てられて、そのオブジェクトを定義するCブロックの実行の最後に自動的に解放されます。"

#. type: Plain text
#: original_texis/internals.texi:574
msgid "For performance reasons, stack-allocated strings are limited to @acronym{ASCII} characters, and many of these strings are immutable, i.e., calling @code{ASET} on them produces undefined behavior."
msgstr "性能的な理由によりスタックに割り当てられる文字列は@acronym{ASCII}文字に限定されており、それらの多くが不変です。つまりそれらにたいして@code{ASET}を呼び出すと未定義の挙動を引き起こします。"

#. type: cindex
#: original_texis/internals.texi:577
#, no-wrap
msgid "memory usage"
msgstr "memory usage"

#. type: Plain text
#: original_texis/internals.texi:585
msgid "These functions and variables give information about the total amount of memory allocation that Emacs has done, broken down by data type.  Note the difference between these and the values returned by @code{garbage-collect}; those count objects that currently exist, but these count the number or size of all allocations, including those for objects that have since been freed."
msgstr "以下の関数と変数はEmacsが行なったメモリー割り当ての総量に関する情報をデータ型ごとに分類して提供します。これらの関数や変数と@code{garbage-collect}がリターンする値との違いに注意してください。@code{garbage-collect}はカレントで存在するオブジェクトを計数しますが、以下の関数や変数はすでに解放されたオブジェクトを含めて割り当てのすべての数やサイズを計数します。"

#. type: defvar
#: original_texis/internals.texi:586
#, no-wrap
msgid "cons-cells-consed"
msgstr "cons-cells-consed"

#. type: defvar
#: original_texis/internals.texi:589
msgid "The total number of cons cells that have been allocated so far in this Emacs session."
msgstr "そのEmacsセッションでそれまでに割り当てられたコンスセルの総数。"

#. type: defvar
#: original_texis/internals.texi:591
#, no-wrap
msgid "floats-consed"
msgstr "floats-consed"

#. type: defvar
#: original_texis/internals.texi:594
msgid "The total number of floats that have been allocated so far in this Emacs session."
msgstr "そのEmacsセッションでそれまでに割り当てられた浮動小数点数の総数。"

#. type: defvar
#: original_texis/internals.texi:596
#, no-wrap
msgid "vector-cells-consed"
msgstr "vector-cells-consed"

#. type: defvar
#: original_texis/internals.texi:599
msgid "The total number of vector cells that have been allocated so far in this Emacs session."
msgstr "そのEmacsセッションでそれまでに割り当てられたベクターセル"

#. type: defvar
#: original_texis/internals.texi:601
#, no-wrap
msgid "symbols-consed"
msgstr "symbols-consed"

#. type: defvar
#: original_texis/internals.texi:604
msgid "The total number of symbols that have been allocated so far in this Emacs session."
msgstr "そのEmacsセッションでそれまでに割り当てられたシンボルの総数。"

#. type: defvar
#: original_texis/internals.texi:606
#, no-wrap
msgid "string-chars-consed"
msgstr "string-chars-consed"

#. type: defvar
#: original_texis/internals.texi:609
msgid "The total number of string characters that have been allocated so far in this session."
msgstr "そのEmacsセッションでそれまでに割り当てられた文字列の文字の総数。"

#. type: defvar
#: original_texis/internals.texi:611
#, no-wrap
msgid "misc-objects-consed"
msgstr "misc-objects-consed"

#. type: defvar
#: original_texis/internals.texi:615
msgid "The total number of miscellaneous objects that have been allocated so far in this session.  These include markers and overlays, plus certain objects not visible to users."
msgstr "そのEmacsセッションでそれまでに割り当てられた雑多なオブジェクトの総数。これにはマーカー、オーバーレイに加えてユーザーには不可視な特定のオブジェクトが含まれる。"

#. type: defvar
#: original_texis/internals.texi:617
#, no-wrap
msgid "intervals-consed"
msgstr "intervals-consed"

#. type: defvar
#: original_texis/internals.texi:620
msgid "The total number of intervals that have been allocated so far in this Emacs session."
msgstr "そのEmacsセッションでそれまでに割り当てられたインターバルの総数。"

#. type: defvar
#: original_texis/internals.texi:622
#, no-wrap
msgid "strings-consed"
msgstr "strings-consed"

#. type: defvar
#: original_texis/internals.texi:625
msgid "The total number of strings that have been allocated so far in this Emacs session."
msgstr "そのEmacsセッションでそれまでに割り当てられた文字列の総数。"

#. type: cindex
#: original_texis/internals.texi:629
#, no-wrap
msgid "C programming language"
msgstr "C programming language"

#. type: Plain text
#: original_texis/internals.texi:637
msgid "The C part of Emacs is portable to C99 or later: C11-specific features such as @samp{<stdalign.h>} and @samp{_Noreturn} are not used without a check, typically at configuration time, and the Emacs build procedure provides a substitute implementation if necessary.  Some C11 features, such as anonymous structures and unions, are too difficult to emulate, so they are avoided entirely."
msgstr "EmacsのC部分はC99にたいして可搬性があります。@samp{<stdalign.h>}や@samp{_Noreturn}のようなC11固有の機能は通常はconfigure時に行われるチェックなしでは使用しておらず、Emacsのビルド手順は必要なら代替えの実装を提供します。無名な構造体や共用体のようないくつかのC11機能はエミュレートが非常に困難なので完全に無視しています。"

#. type: Plain text
#: original_texis/internals.texi:639
msgid "At some point in the future the base C dialect will no doubt change to C11."
msgstr "そう遠くない将来のある時点で基本となるC方言は間違いなくC11に変更されるでしょう。"

#. type: cindex
#: original_texis/internals.texi:642
#, no-wrap
msgid "primitive function internals"
msgstr "primitive function internals"

#. type: cindex
#: original_texis/internals.texi:643
#, no-wrap
msgid "writing Emacs primitives"
msgstr "writing Emacs primitives"

#. type: Plain text
#: original_texis/internals.texi:649
msgid "Lisp primitives are Lisp functions implemented in C@.  The details of interfacing the C function so that Lisp can call it are handled by a few C macros.  The only way to really understand how to write new C code is to read the source, but we can explain some things here."
msgstr "LispプリミティブとはCで実装されたLisp関数です。Lispから呼び出せるようにC関数インターフェースの詳細はCのマクロで処理されます。新たなCコードの記述のしかたを真に理解するにはソースを読むのが唯一の方法ですが、ここではいくつかの事項について説明します。"

#. type: Plain text
#: original_texis/internals.texi:653
msgid "An example of a special form is the definition of @code{or}, from @file{eval.c}.  (An ordinary function would have the same general appearance.)"
msgstr "スペシャルフォームの例として以下は@file{eval.c}の@code{or}です(通常の関数は同様の一般的な外観をもつ)。"

#. type: group
#: original_texis/internals.texi:661
#, no-wrap
msgid ""
"DEFUN (\"or\", For, Sor, 0, UNEVALLED, 0,\n"
"  doc: /* Eval args until one of them yields non-nil, then return\n"
"that value.\n"
"The remaining args are not evalled at all.\n"
"If all args return nil, return nil.\n"
msgstr ""
"DEFUN (\"or\", For, Sor, 0, UNEVALLED, 0,\n"
"  doc: /* Eval args until one of them yields non-nil, then return\n"
"that value.\n"
"The remaining args are not evalled at all.\n"
"If all args return nil, return nil.\n"

#. type: group
#: original_texis/internals.texi:667
#, no-wrap
msgid ""
"usage: (or CONDITIONS...)  */)\n"
"  (Lisp_Object args)\n"
"@{\n"
"  Lisp_Object val = Qnil;\n"
msgstr ""
"usage: (or CONDITIONS...)  */)\n"
"  (Lisp_Object args)\n"
"@{\n"
"  Lisp_Object val = Qnil;\n"

#. type: group
#: original_texis/internals.texi:678
#, no-wrap
msgid ""
"  while (CONSP (args))\n"
"    @{\n"
"      val = eval_sub (XCAR (args));\n"
"      if (!NILP (val))\n"
"        break;\n"
"      args = XCDR (args);\n"
"      maybe_quit ();\n"
"    @}\n"
msgstr ""
"  while (CONSP (args))\n"
"    @{\n"
"      val = eval_sub (XCAR (args));\n"
"      if (!NILP (val))\n"
"        break;\n"
"      args = XCDR (args);\n"
"      maybe_quit ();\n"
"    @}\n"

#. type: group
#: original_texis/internals.texi:683
#, no-wrap
msgid ""
"  return val;\n"
"@}\n"
msgstr ""
"  return val;\n"
"@}\n"

#. type: cindex
#: original_texis/internals.texi:686
#, no-wrap
msgid "@code{DEFUN}, C macro to define Lisp primitives"
msgstr "@code{DEFUN}, C macro to define Lisp primitives"

#. type: Plain text
#: original_texis/internals.texi:689
msgid "Let's start with a precise explanation of the arguments to the @code{DEFUN} macro.  Here is a template for them:"
msgstr "では@code{DEFUN}マクロの引数について詳細に説明しましょう。以下はそれらのテンプレートです:"

#. type: example
#: original_texis/internals.texi:692
#, no-wrap
msgid "DEFUN (@var{lname}, @var{fname}, @var{sname}, @var{min}, @var{max}, @var{interactive}, @var{doc})\n"
msgstr "DEFUN (@var{lname}, @var{fname}, @var{sname}, @var{min}, @var{max}, @var{interactive}, @var{doc})\n"

#. type: item
#: original_texis/internals.texi:695
#, no-wrap
msgid "lname"
msgstr "lname"

#. type: table
#: original_texis/internals.texi:698
msgid "This is the name of the Lisp symbol to define as the function name; in the example above, it is @code{or}."
msgstr "これは関数名として定義するLispシンボル名。上記例では@code{or}。"

#. type: item
#: original_texis/internals.texi:699
#, no-wrap
msgid "fname"
msgstr "fname"

#. type: table
#: original_texis/internals.texi:705
msgid "This is the C function name for this function.  This is the name that is used in C code for calling the function.  The name is, by convention, @samp{F} prepended to the Lisp name, with all dashes (@samp{-}) in the Lisp name changed to underscores.  Thus, to call this function from C code, call @code{For}."
msgstr "これは関数のC関数名。これはCコードでその関数を呼び出すために使用される名前。名前は慣習として@samp{F}の後にLisp名をつけて、Lisp名のすべてのダッシュ(@samp{-})をアンダースコアに変更する。つまりCコードから呼び出す場合には@code{For}を呼び出す。"

#. type: item
#: original_texis/internals.texi:706
#, no-wrap
msgid "sname"
msgstr "sname"

#. type: table
#: original_texis/internals.texi:713
msgid "This is a C variable name to use for a structure that holds the data for the subr object that represents the function in Lisp.  This structure conveys the Lisp symbol name to the initialization routine that will create the symbol and store the subr object as its definition.  By convention, this name is always @var{fname} with @samp{F} replaced with @samp{S}."
msgstr "これはLispでその関数を表すsubrオブジェクト用にデータ保持のための構造体に使用されるC変数名。この構造体はそのシンボルを作成してそれの定義にsubrオブジェクトを格納する初期化ルーチンでLispシンボル名を伝達する。慣習により常に@var{fname}の@samp{F}を@samp{S}に置き換えた名前になる。"

#. type: item
#: original_texis/internals.texi:714
#, no-wrap
msgid "min"
msgstr "min"

#. type: table
#: original_texis/internals.texi:717
msgid "This is the minimum number of arguments that the function requires.  The function @code{or} allows a minimum of zero arguments."
msgstr "これは関数が要求する引数の最小個数。関数@code{or}は最小で0個の引数を受け入れる。"

#. type: item
#: original_texis/internals.texi:718
#, no-wrap
msgid "max"
msgstr "max"

#. type: table
#: original_texis/internals.texi:726
msgid "This is the maximum number of arguments that the function accepts, if there is a fixed maximum.  Alternatively, it can be @code{UNEVALLED}, indicating a special form that receives unevaluated arguments, or @code{MANY}, indicating an unlimited number of evaluated arguments (the equivalent of @code{&rest}).  Both @code{UNEVALLED} and @code{MANY} are macros.  If @var{max} is a number, it must be more than @var{min} but less than 8."
msgstr "これは関数が受け入れる引数の最大個数が定数なら引数の最大個数。あるいは@code{UNEVALLED}なら未評価の引数を受け取るスペシャルフォーム、@code{MANY}なら評価される引数の個数に制限がないことを意味する(@code{&rest}と等価)。@code{UNEVALLED}と@code{MANY}はいずれもマクロ。@var{max}が数字なら@var{min}より大きく8より小さいこと。"

#. type: cindex
#: original_texis/internals.texi:727
#, no-wrap
msgid "interactive specification in primitives"
msgstr "interactive specification in primitives"

#. type: item
#: original_texis/internals.texi:728
#, no-wrap
msgid "interactive"
msgstr "interactive"

#. type: table
#: original_texis/internals.texi:737
msgid "This is an interactive specification, a string such as might be used as the argument of @code{interactive} in a Lisp function (@pxref{Using Interactive}).  In the case of @code{or}, it is 0 (a null pointer), indicating that @code{or} cannot be called interactively.  A value of @code{\"\"} indicates a function that should receive no arguments when called interactively.  If the value begins with a @samp{\"(}, the string is evaluated as a Lisp form.  For example:"
msgstr "これはLisp関数で@code{interactive} (@ref{Using Interactive}を参照)の引数として使用されるようなインタラクティブ仕様(文字列)。@code{or}の場合は0(nullポインター)であり@code{or}がインタラクティブに呼び出せないことを示す。値@code{\"\"}はインタラクティブに呼び出す際に関数が引き受けるべきではないことを示す。値が@samp{\"(}で始まる場合には、その文字列はLispフォームとして評価される。たとえば:"

#. type: group
#: original_texis/internals.texi:745
#, no-wrap
msgid ""
"DEFUN (\"foo\", Ffoo, Sfoo, 0, UNEVALLED, 0\n"
"       \"(list (read-char-by-name \\\"Insert character: \\\")\\\n"
"              (prefix-numeric-value current-prefix-arg)\\\n"
"              t))\",\n"
"  doc: /* @dots{} */)\n"
msgstr ""
"DEFUN (\"foo\", Ffoo, Sfoo, 0, UNEVALLED, 0\n"
"       \"(list (read-char-by-name \\\"Insert character: \\\")\\\n"
"              (prefix-numeric-value current-prefix-arg)\\\n"
"              t))\",\n"
"  doc: /* @dots{} */)\n"

#. type: item
#: original_texis/internals.texi:748
#, no-wrap
msgid "doc"
msgstr "doc"

#. type: table
#: original_texis/internals.texi:755
msgid "This is the documentation string.  It uses C comment syntax rather than C string syntax because comment syntax requires nothing special to include multiple lines.  The @samp{doc:} identifies the comment that follows as the documentation string.  The @samp{/*} and @samp{*/} delimiters that begin and end the comment are not part of the documentation string."
msgstr "これはドキュメント文字列。複数行を含むために特別なことを要しないので、これにはCの文字列構文ではなくCコメント構文を使用する。@samp{doc:}の後のコメントはドキュメント文字列として認識される。コメントの開始と終了の区切り文字@samp{/*}と@samp{*/}はドキュメント文字列の一部にはならない。"

#. type: table
#: original_texis/internals.texi:762
msgid "If the last line of the documentation string begins with the keyword @samp{usage:}, the rest of the line is treated as the argument list for documentation purposes.  This way, you can use different argument names in the documentation string from the ones used in the C code.  @samp{usage:} is required if the function has an unlimited number of arguments."
msgstr "ドキュメント文字列の最後の行がキーワード@samp{usage:}で始まる場合には、その行の残りの部分は引数リストをドキュメント化するためのものとして扱われる。この方法によりCコード内で使用される引数名とは異なる引数名をドキュメント文字列内で使用することができる。その関数の引数の個数に制限がなければ@samp{usage:}は必須。"

#. type: table
#: original_texis/internals.texi:766
msgid "All the usual rules for documentation strings in Lisp code (@pxref{Documentation Tips}) apply to C code documentation strings too."
msgstr "Lispコードでのドキュメント文字列にたいするすべての通常ルール(@ref{Documentation Tips}を参照)はCコードのドキュメント文字列にも適用される。"

#. type: table
#: original_texis/internals.texi:770
msgid "The documentation string can be followed by a list of C function attributes for the C function that implements the primitive, like this:"
msgstr "以下のようにドキュメント文字列の後に、そのプリミティブを実装するC関数にたいするC関数属性のリストがあるかもしれない:"

#. type: group
#: original_texis/internals.texi:776
#, no-wrap
msgid ""
"DEFUN (\"bar\", Fbar, Sbar, 0, UNEVALLED, 0\n"
"  doc: /* @dots{} */\n"
"  attributes: @var{attr1} @var{attr2} @dots{})\n"
msgstr ""
"DEFUN (\"bar\", Fbar, Sbar, 0, UNEVALLED, 0\n"
"  doc: /* @dots{} */\n"
"  attributes: @var{attr1} @var{attr2} @dots{})\n"

#. type: table
#: original_texis/internals.texi:782
msgid "You can specify more than a single attribute, one after the other.  Currently, only the following attributes are recognized:"
msgstr "後に続けることにより複数の属性を指定できる。現在のところ以下の属性が認識される:"

#. type: item
#: original_texis/internals.texi:784
#, no-wrap
msgid "noreturn"
msgstr "noreturn"

#. type: table
#: original_texis/internals.texi:789
msgid "Declares the C function as one that never returns.  This corresponds to the C11 keyword @code{_Noreturn} and to @w{@code{__attribute__ ((__noreturn__))}} attribute of GCC (@pxref{Function Attributes,,, gcc, Using the GNU Compiler Collection})."
msgstr "決してリターンしないC関数を宣言する。これはC11のキーワード@code{_Noreturn}、GCCの属性@w{@code{__attribute__ ((__noreturn__))}}に対応している(@ref{Function Attributes,,, gcc, Using the GNU Compiler Collection}を参照)。"

#. type: item
#: original_texis/internals.texi:790
#, no-wrap
msgid "const"
msgstr "const"

#. type: table
#: original_texis/internals.texi:795
msgid "Declares that the function does not examine any values except its arguments, and has no effects except the return value.  This corresponds to @w{@code{__attribute__ ((__const__))}} attribute of GCC."
msgstr "引数以外の値を検査せず、リターン値以外に影響しない関数を宣言する。これはGCCの属性@w{@code{__attribute__ ((__const__))}}に対応している。"

#. type: item
#: original_texis/internals.texi:796
#, no-wrap
msgid "noinline"
msgstr "noinline"

#. type: table
#: original_texis/internals.texi:801
msgid "This corresponds to @w{@code{__attribute__ ((__noinline__))}} attribute of GCC, which prevents the function from being considered for inlining.  This might be needed, e.g., to countermand effects of link-time optimizations on stack-based variables."
msgstr "これは関数がインラインとみなされることを抑止するGCCの属性@w{@code{__attribute__ ((__noinline__))}}に対応している。これはたとえばスタックベースの変数にたいするリンク時の最適化の効果を取り消すために必要になるかもしれない。"

#. type: Plain text
#: original_texis/internals.texi:820
msgid "After the call to the @code{DEFUN} macro, you must write the argument list for the C function, including the types for the arguments.  If the primitive accepts a fixed maximum number of Lisp arguments, there must be one C argument for each Lisp argument, and each argument must be of type @code{Lisp_Object}.  (Various macros and functions for creating values of type @code{Lisp_Object} are declared in the file @file{lisp.h}.)  If the primitive has no upper limit on the number of Lisp arguments, it must have exactly two C arguments: the first is the number of Lisp arguments, and the second is the address of a block containing their values.  These have types @code{int} and @w{@code{Lisp_Object *}} respectively.  Since @code{Lisp_Object} can hold any Lisp object of any data type, you can determine the actual data type only at run time; so if you want a primitive to accept only a certain type of argument, you must check the type explicitly using a suitable predicate (@pxref{Type Predicates})."
msgstr "@code{DEFUN}マクロ呼び出しの後には、そのC関数にたいする引数リストを引数のタイプを含めて記述しなければなりません。そのプリミティブがLispで固定された最大個数をもつ引数を受け入れるならLisp引数それぞれにたいして1つのC引数をもち、各引数のタイプは@code{Lisp_Object}でなければなりません(ファイル@file{lisp.h}ではタイプ@code{Lisp_Object}の値を作成する種々のマクロと関数が宣言されている)。そのプリミティブのLispの最大引数個数に上限がなければ正確に2つのC引数をもたなければなりません。1つ目はLisp引数の個数で、2つ目はそれらの値を含むブロックのアドレスです。これらはそれぞれ@code{int}、@w{@code{Lisp_Object *}}のタイプをもちます。@code{Lisp_Object}は任意のデータ型と任意のLispオブジェクトを保持できるので実行時のみ実際のデータ型を判断できます。特定のタイプの引数だけを受け入れるプリミティブを記述したければ適切な述語を使用してタイプを明確にチェックしなければなりません(@ref{Type Predicates}を参照)。"

#. type: cindex
#: original_texis/internals.texi:820
#, no-wrap
msgid "type checking internals"
msgstr "type checking internals"

#. type: cindex
#: original_texis/internals.texi:822
#, no-wrap
msgid "garbage collection protection"
msgstr "garbage collection protection"

#. type: cindex
#: original_texis/internals.texi:823
#, no-wrap
msgid "protect C variables from garbage collection"
msgstr "protect C variables from garbage collection"

#. type: Plain text
#: original_texis/internals.texi:833
msgid "Within the function @code{For} itself, the local variable @code{args} refers to objects controlled by Emacs's stack-marking garbage collector.  Although the garbage collector does not reclaim objects reachable from C @code{Lisp_Object} stack variables, it may move non-object components of an object, such as string contents; so functions that access non-object components must take care to refetch their addresses after performing Lisp evaluation.  Lisp evaluation can occur via calls to @code{eval_sub} or @code{Feval}, either directly or indirectly."
msgstr "関数@code{For}自体ではローカル変数@code{args}はEmacsのスタックマーキングによるガーベージコレクションで制御されるオブジェクトを参照します。たとえガーベージコレクターがCの@code{Lisp_Object}スタック変数から到達可能なオブジェクトは再利用しないとしても、文字列の内容のようなオブジェクトの非オブジェクトコンポーネントは移動するかもしれないので、非オブジェクトコンポーネントにアクセスする関数はLisp評価を処理した後にはそれらのアドレスを再取得するよう注意しなければなりません。Lisp評価は直接と間接を問わず@code{eval_sub}か@code{Feval}の呼び出しを通じて発生する可能性があります。"

#. type: cindex
#: original_texis/internals.texi:834
#, no-wrap
msgid "@code{maybe_quit}, use in Lisp primitives"
msgstr "@code{maybe_quit}, use in Lisp primitives"

#. type: Plain text
#: original_texis/internals.texi:841
msgid "Note the call to @code{maybe_quit} inside the loop: this function checks whether the user pressed @kbd{C-g}, and if so, aborts the processing.  You should do that in any loop that can potentially require a large number of iterations; in this case, the list of arguments could be very long.  This increases Emacs responsiveness and improves user experience."
msgstr "ループ内部の@code{maybe_quit}呼び出しに注意してください。この関数はユーザーが@kbd{C-g}を渡したかどうかをチェックして、もしそうなら処理をabortします。多数の繰り返しを要する可能性があるすべてのループ内でこれを行うべきです。この場合には引数のリストは非常に長くなるかもしれません。これはEmacsの応答性とユーザーエクスペリエンスを向上させます。"

#. type: Plain text
#: original_texis/internals.texi:847
msgid "You must not use C initializers for static or global variables unless the variables are never written once Emacs is dumped.  These variables with initializers are allocated in an area of memory that becomes read-only (on certain operating systems) as a result of dumping Emacs.  @xref{Pure Storage}."
msgstr "Emacsが一度ダンプされた後に変数に何か書き込まれているときには、その静的変数やグローバル変数にCの初期化を使用してはなりません。初期化されたこれらの変数はEmacsのダンプの結果として、(特定のオペレーティングシステムでは)読み取り専用となるメモリーエリアに割り当てられます。@ref{Pure Storage}を参照してください。"

#. type: cindex
#: original_texis/internals.texi:848
#, no-wrap
msgid "@code{defsubr}, Lisp symbol for a primitive"
msgstr "@code{defsubr}, Lisp symbol for a primitive"

#. type: Plain text
#: original_texis/internals.texi:853
msgid "Defining the C function is not enough to make a Lisp primitive available; you must also create the Lisp symbol for the primitive and store a suitable subr object in its function cell.  The code looks like this:"
msgstr "C関数の定義だけではLispプリミティブを利用可能にするのに十分ではありません。そのプリミティブにたいしてLispシンボルを作成して関数セルに適切なsubrオブジェクトを格納しなければなりません。このコードは以下のようになるでしょう:"

#. type: example
#: original_texis/internals.texi:856
#, no-wrap
msgid "defsubr (&@var{sname});\n"
msgstr "defsubr (&@var{sname});\n"

#. type: Plain text
#: original_texis/internals.texi:860
msgid "Here @var{sname} is the name you used as the third argument to @code{DEFUN}."
msgstr "ここで@var{sname}は@code{DEFUN}の3つ目の引数として使用する名前です。"

#. type: Plain text
#: original_texis/internals.texi:869
msgid "If you add a new primitive to a file that already has Lisp primitives defined in it, find the function (near the end of the file) named @code{syms_of_@var{something}}, and add the call to @code{defsubr} there.  If the file doesn't have this function, or if you create a new file, add to it a @code{syms_of_@var{filename}} (e.g., @code{syms_of_myfile}).  Then find the spot in @file{emacs.c} where all of these functions are called, and add a call to @code{syms_of_@var{filename}} there."
msgstr "すでにLispプリミティブが定義されたファイルにプリミティブを追加する場合には、(そのファイル終端付近にある)@code{syms_of_@var{something}}という名前の関数を探して@code{defsubr}の呼び出しを追加してください。ファイルにこの関数がない、または新たなファイルを作成する場合には@code{syms_of_@var{filename}} (例: @code{syms_of_myfile})を追加します。それから@file{emacs.c}でそれらの関数が呼び出されるすべての箇所を探して@code{syms_of_@var{filename}}の呼び出しを追加してください。"

#. type: anchor{#1}
#: original_texis/internals.texi:871
msgid "Defining Lisp variables in C"
msgstr "Defining Lisp variables in C"

#. type: vindex
#: original_texis/internals.texi:871
#, no-wrap
msgid "byte-boolean-vars"
msgstr "byte-boolean-vars"

#. type: cindex
#: original_texis/internals.texi:872
#, no-wrap
msgid "defining Lisp variables in C"
msgstr "defining Lisp variables in C"

#. type: cindex
#: original_texis/internals.texi:873
#, no-wrap
msgid "@code{DEFVAR_INT}, @code{DEFVAR_LISP}, @code{DEFVAR_BOOL}"
msgstr "@code{DEFVAR_INT}, @code{DEFVAR_LISP}, @code{DEFVAR_BOOL}"

#. type: Plain text
#: original_texis/internals.texi:883
msgid "The function @code{syms_of_@var{filename}} is also the place to define any C variables that are to be visible as Lisp variables.  @code{DEFVAR_LISP} makes a C variable of type @code{Lisp_Object} visible in Lisp.  @code{DEFVAR_INT} makes a C variable of type @code{int} visible in Lisp with a value that is always an integer.  @code{DEFVAR_BOOL} makes a C variable of type @code{int} visible in Lisp with a value that is either @code{t} or @code{nil}.  Note that variables defined with @code{DEFVAR_BOOL} are automatically added to the list @code{byte-boolean-vars} used by the byte compiler."
msgstr "関数@code{syms_of_@var{filename}}はLisp変数として可視となるすべてのC変数を定義する場所でもあります。@code{DEFVAR_LISP}はタイプ@code{Lisp_Object}のC変数をLispから可視にします。@code{DEFVAR_INT}はタイプ@code{int}のC変数を常に整数となる値をもつようにしてLispから可視にします。@code{DEFVAR_BOOL}はタイプ@code{int}のC変数を常に@code{t}か@code{nil}のいずれかとなる値をもつようにしてLispから可視にします。@code{DEFVAR_BOOL}で定義された変数はバイトコンパイラーに使用されるリスト@code{byte-boolean-vars}に自動的に追加されることに注意してください。"

#. type: cindex
#: original_texis/internals.texi:884
#, no-wrap
msgid "defining customization variables in C"
msgstr "defining customization variables in C"

#. type: Plain text
#: original_texis/internals.texi:888
msgid "If you want to make a Lisp variable that is defined in C behave like one declared with @code{defcustom}, add an appropriate entry to @file{cus-start.el}."
msgstr "Cで定義されたLisp変数を@code{defcustom}で宣言された変数のように振る舞わせたい場合には、@file{cus-start.el}に適切なエントリーを追加してください。"

#. type: cindex
#: original_texis/internals.texi:889
#, no-wrap
msgid "@code{staticpro}, protection from GC"
msgstr "@code{staticpro}, protection from GC"

#. type: Plain text
#: original_texis/internals.texi:893
msgid "If you define a file-scope C variable of type @code{Lisp_Object}, you must protect it from garbage-collection by calling @code{staticpro} in @code{syms_of_@var{filename}}, like this:"
msgstr "タイプ@code{Lisp_Object}のファイルをスコープとするC変数を定義する場合には、以下のように@code{syms_of_@var{filename}}内で@code{staticpro}を呼び出してガーベージコレクションから保護しなければなりません:"

#. type: example
#: original_texis/internals.texi:896
#, no-wrap
msgid "staticpro (&@var{variable});\n"
msgstr "staticpro (&@var{variable});\n"

#. type: Plain text
#: original_texis/internals.texi:901
msgid "Here is another example function, with more complicated arguments.  This comes from the code in @file{window.c}, and it demonstrates the use of macros and functions to manipulate Lisp objects."
msgstr "以下はより複雑な引数をもつ別の関数例です。これは@file{window.c}からのコードであり、Lispオブジェクトを操作するためのマクロと関数の使用を示すものです。"

#. type: group
#: original_texis/internals.texi:908
#, no-wrap
msgid ""
"DEFUN (\"coordinates-in-window-p\", Fcoordinates_in_window_p,\n"
"  Scoordinates_in_window_p, 2, 2, 0,\n"
"  doc: /* Return non-nil if COORDINATES are in WINDOW.\n"
"  ...\n"
msgstr ""
"DEFUN (\"coordinates-in-window-p\", Fcoordinates_in_window_p,\n"
"  Scoordinates_in_window_p, 2, 2, 0,\n"
"  doc: /* Return non-nil if COORDINATES are in WINDOW.\n"
"  ...\n"

#. type: group
#: original_texis/internals.texi:917
#, no-wrap
msgid ""
"  or `right-margin' is returned.  */)\n"
"  (register Lisp_Object coordinates, Lisp_Object window)\n"
"@{\n"
"  struct window *w;\n"
"  struct frame *f;\n"
"  int x, y;\n"
"  Lisp_Object lx, ly;\n"
msgstr ""
"  or `right-margin' is returned.  */)\n"
"  (register Lisp_Object coordinates, Lisp_Object window)\n"
"@{\n"
"  struct window *w;\n"
"  struct frame *f;\n"
"  int x, y;\n"
"  Lisp_Object lx, ly;\n"

#. type: group
#: original_texis/internals.texi:930
#, no-wrap
msgid ""
"  CHECK_LIVE_WINDOW (window);\n"
"  w = XWINDOW (window);\n"
"  f = XFRAME (w->frame);\n"
"  CHECK_CONS (coordinates);\n"
"  lx = Fcar (coordinates);\n"
"  ly = Fcdr (coordinates);\n"
"  CHECK_NUMBER_OR_FLOAT (lx);\n"
"  CHECK_NUMBER_OR_FLOAT (ly);\n"
"  x = FRAME_PIXEL_X_FROM_CANON_X (f, lx) + FRAME_INTERNAL_BORDER_WIDTH(f);\n"
"  y = FRAME_PIXEL_Y_FROM_CANON_Y (f, ly) + FRAME_INTERNAL_BORDER_WIDTH(f);\n"
msgstr ""
"  CHECK_LIVE_WINDOW (window);\n"
"  w = XWINDOW (window);\n"
"  f = XFRAME (w->frame);\n"
"  CHECK_CONS (coordinates);\n"
"  lx = Fcar (coordinates);\n"
"  ly = Fcdr (coordinates);\n"
"  CHECK_NUMBER_OR_FLOAT (lx);\n"
"  CHECK_NUMBER_OR_FLOAT (ly);\n"
"  x = FRAME_PIXEL_X_FROM_CANON_X (f, lx) + FRAME_INTERNAL_BORDER_WIDTH(f);\n"
"  y = FRAME_PIXEL_Y_FROM_CANON_Y (f, ly) + FRAME_INTERNAL_BORDER_WIDTH(f);\n"

#. type: group
#: original_texis/internals.texi:937
#, no-wrap
msgid ""
"  switch (coordinates_in_window (w, x, y))\n"
"    @{\n"
"    case ON_NOTHING:            /* NOT in window at all.  */\n"
"      return Qnil;\n"
msgstr ""
"  switch (coordinates_in_window (w, x, y))\n"
"    @{\n"
"    case ON_NOTHING:            /* NOT in window at all.  */\n"
"      return Qnil;\n"

#. type: smallexample
#: original_texis/internals.texi:940 original_texis/internals.texi:947
#, no-wrap
msgid ""
"    ...\n"
"\n"
msgstr ""
"    ...\n"
"\n"

#. type: group
#: original_texis/internals.texi:944
#, no-wrap
msgid ""
"    case ON_MODE_LINE:          /* In mode line of window.  */\n"
"      return Qmode_line;\n"
msgstr ""
"    case ON_MODE_LINE:          /* In mode line of window.  */\n"
"      return Qmode_line;\n"

#. type: group
#: original_texis/internals.texi:952
#, no-wrap
msgid ""
"    case ON_SCROLL_BAR:         /* On scroll-bar of window.  */\n"
"      /* Historically we are supposed to return nil in this case.  */\n"
"      return Qnil;\n"
msgstr ""
"    case ON_SCROLL_BAR:         /* On scroll-bar of window.  */\n"
"      /* Historically we are supposed to return nil in this case.  */\n"
"      return Qnil;\n"

#. type: group
#: original_texis/internals.texi:959
#, no-wrap
msgid ""
"    default:\n"
"      abort ();\n"
"    @}\n"
"@}\n"
msgstr ""
"    default:\n"
"      abort ();\n"
"    @}\n"
"@}\n"

#. type: Plain text
#: original_texis/internals.texi:970
msgid "Note that C code cannot call functions by name unless they are defined in C@.  The way to call a function written in Lisp is to use @code{Ffuncall}, which embodies the Lisp function @code{funcall}.  Since the Lisp function @code{funcall} accepts an unlimited number of arguments, in C it takes two: the number of Lisp-level arguments, and a one-dimensional array containing their values.  The first Lisp-level argument is the Lisp function to call, and the rest are the arguments to pass to it."
msgstr "CコードはCで記述されていなければ名前で呼び出すことはできないことに注意してください。Lispで記述された関数を呼び出すには関数@code{funcall}をCで具現化した@code{Ffuncall}を使用します。Lisp関数@code{funcall}は個数制限なしの引数を受け付けるので、Cでの引数はLispレベルでの引数個数とそれらの値を含む1次元配列という2個の引数になります。Lispレベルでの1つ目の引数は呼び出す関数、残りはそれに渡す引数です。"

#. type: Plain text
#: original_texis/internals.texi:974
msgid "The C functions @code{call0}, @code{call1}, @code{call2}, and so on, provide handy ways to call a Lisp function conveniently with a fixed number of arguments.  They work by calling @code{Ffuncall}."
msgstr "C関数@code{call0}、@code{call1}、@code{call2}、...は個数が固定された引数でLisp関数を手軽に呼び出す便利な方法を提供します。これらは@code{Ffuncall}を呼び出すことにより機能します。"

#. type: Plain text
#: original_texis/internals.texi:978
msgid "@file{eval.c} is a very good file to look through for examples; @file{lisp.h} contains the definitions for some important macros and functions."
msgstr "@file{eval.c}は例を探すのに適したファイルです。@file{lisp.h}には重要なマクロと関数の定義がいくつか含まれています。"

#. type: Plain text
#: original_texis/internals.texi:983
msgid "If you define a function which is side-effect free, update the code in @file{byte-opt.el} that binds @code{side-effect-free-fns} and @code{side-effect-and-error-free-fns} so that the compiler optimizer knows about it."
msgstr "副作用をもたない関数を定義する場合には、コンパイラーのオプティマイザーに知らせるために@code{side-effect-free-fns}と@code{side-effect-and-error-free-fns}をバインドする@file{byte-opt.el}内のコードを更新してください。"

#. type: section
#: original_texis/internals.texi:985
#, no-wrap
msgid "Writing Dynamically-Loaded Modules"
msgstr "Writing Dynamically-Loaded Modules"

#. type: cindex
#: original_texis/internals.texi:986
#, no-wrap
msgid "writing emacs modules"
msgstr "writing emacs modules"

#. type: cindex
#: original_texis/internals.texi:987
#, no-wrap
msgid "dynamic modules, writing"
msgstr "dynamic modules, writing"

#. type: cindex
#: original_texis/internals.texi:989
#, no-wrap
msgid "module @acronym{API}"
msgstr "module @acronym{API}"

#. type: Plain text
#: original_texis/internals.texi:998
msgid "This section describes the Emacs module @acronym{API} and how to use it as part of writing extension modules for Emacs.  The module @acronym{API} is defined in the C programming language, therefore the description and the examples in this section assume the module is written in C@.  For other programming languages, you will need to use the appropriate bindings, interfaces and facilities for calling C code.  Emacs C code requires a C99 or later compiler (@pxref{C Dialect}), and so the code examples in this section also follow that standard."
msgstr "このセクションでがEmacsのモジュール@acronym{API}、およびEmacs用の拡張モジュール記述の一部としてそれらを使用する方法について説明します。モジュール@acronym{API}はCプログラム言語で定義されているので、このセクション内の記述と例はモジュールがCで記述されていると仮定します。別のプログラム言語ではCコード呼び出しのための適切なバインディングやインターフェースと機能の使用が必要になるでしょう。EmacsのCコードにはC99以降のコンパイラー(@ref{C Dialect}を参照)が必要であり、このセクションもこの標準にしたがいます。"

#. type: Plain text
#: original_texis/internals.texi:1001
msgid "Writing a module and integrating it into Emacs comprises the following tasks:"
msgstr "モジュールの記述とEmacsへの統合には以下のタスクが含まれます:"

#. type: itemize
#: original_texis/internals.texi:1005
msgid "Writing initialization code for the module."
msgstr "モジュール用の初期化コードの記述。"

#. type: itemize
#: original_texis/internals.texi:1008
msgid "Writing one or more module functions."
msgstr "1つ以上のモジュール関数の記述。"

#. type: itemize
#: original_texis/internals.texi:1012
msgid "Communicating values and objects between Emacs and your module functions."
msgstr "Emacsとモジュール間での値とオブジェクトのやり取り。"

#. type: itemize
#: original_texis/internals.texi:1015
msgid "Handling of error conditions and nonlocal exits."
msgstr "エラーコンディションと非ローカル脱出のハンドリング。"

#. type: Plain text
#: original_texis/internals.texi:1020
msgid "The following subsections describe these tasks and the @acronym{API} itself in more detail."
msgstr "以下のサクセクションこれらのタスクと@acronym{API}自体の詳細を説明します。"

#. type: Plain text
#: original_texis/internals.texi:1025
msgid "Once your module is written, compile it to produce a shared library, according to the conventions of the underlying platform.  Then place the shared library in a directory mentioned in @code{load-path} (@pxref{Library Search}), where Emacs will find it."
msgstr "モジュールを一度記述したら共有ライブラリーを生成するために、背景のプラットドームの慣習に応じてモジュールをコンパイルします。その後で@code{load-path} (@ref{Library Search}を参照)に言及されたディレクトリー内(Emacsが共有ライブラリーを探す場所)にそれを配置します。"

#. type: Plain text
#: original_texis/internals.texi:1029
msgid "If you wish to verify the conformance of a module to the Emacs dynamic module @acronym{API}, invoke Emacs with the @kbd{--module-assertions} option.  @xref{Initial Options,,,emacs, The GNU Emacs Manual}."
msgstr "Emacsダイナミックモジュール@acronym{API}にたいしてモジュールの適合性を検証したければ@kbd{--module-assertions}オプションでEmacsを呼び出します。@ref{Initial Options,,,emacs, The GNU Emacs Manual}を参照してください。"

#. type: menuentry
#: original_texis/internals.texi:1036
msgid "Module Initialization::"
msgstr "Module Initialization::"

#. type: menuentry
#: original_texis/internals.texi:1036
msgid "Module Functions::"
msgstr "Module Functions::"

#. type: menuentry
#: original_texis/internals.texi:1036
msgid "Module Values::"
msgstr "Module Values::"

#. type: menuentry
#: original_texis/internals.texi:1036
msgid "Module Misc::"
msgstr "Module Misc::"

#. type: node
#: original_texis/internals.texi:1036 original_texis/internals.texi:1574
#, no-wrap
msgid "Module Nonlocal"
msgstr "Module Nonlocal"

#. type: node
#: original_texis/internals.texi:1038
#, no-wrap
msgid "Module Initialization"
msgstr "Module Initialization"

#. type: subsection
#: original_texis/internals.texi:1039
#, no-wrap
msgid "Module Initialization Code"
msgstr "Module Initialization Code"

#. type: cindex
#: original_texis/internals.texi:1040
#, no-wrap
msgid "module initialization"
msgstr "module initialization"

#. type: Plain text
#: original_texis/internals.texi:1044
msgid "Begin your module by including the header file @file{emacs-module.h} and defining the GPL compatibility symbol:"
msgstr "ヘッダーファイル@file{emacs-module.h}のインクルードとGPL互換性シンボル(GPL compatibility symbol)によりモジュールの記述を始めましょう:"

#. type: example
#: original_texis/internals.texi:1047
#, no-wrap
msgid ""
"#include <emacs-module.h>\n"
"\n"
msgstr "#include <emacs-module.h>\n\n"

#. type: example
#: original_texis/internals.texi:1049
#, no-wrap
msgid "int plugin_is_GPL_compatible;\n"
msgstr "int plugin_is_GPL_compatible;\n"

#. type: Plain text
#: original_texis/internals.texi:1054
msgid "The @file{emacs-module.h} file is installed into your system's include tree as part of the Emacs installation.  Alternatively, you can find it in the Emacs source tree."
msgstr "Emacsインストールの一部としてシステムのインクルードツリーに@file{emacs-module.h}ファイルがインストールされます。かわりにEmacsのソースツリー内で見つけることもできます。"

#. type: anchor{#1}
#: original_texis/internals.texi:1057
msgid "module initialization function"
msgstr "module initialization function"

#. type: Plain text
#: original_texis/internals.texi:1057
msgid "Next, write an initialization function for the module."
msgstr "次にモジュール用の初期化関数を記述します。"

#. type: deftypefn
#: original_texis/internals.texi:1058
#, no-wrap
msgid "Function int emacs_module_init (struct emacs_runtime *@var{runtime})"
msgstr "Function int emacs_module_init (struct emacs_runtime *@var{runtime})"

#. type: deftypefn
#: original_texis/internals.texi:1068
msgid "Emacs calls this function when it loads a module.  If a module does not export a function named @code{emacs_module_init}, trying to load the module will signal an error.  The initialization function should return zero if the initialization succeeds, non-zero otherwise.  In the latter case, Emacs will signal an error, and the loading of the module will fail.  If the user presses @kbd{C-g} during the initialization, Emacs ignores the return value of the initialization function and quits (@pxref{Quitting}).  (If needed, you can catch user quitting inside the initialization function, @pxref{should_quit}.)"
msgstr "Emacsはモジュールをロードする際にこの関数を呼び出す。モジュールが@code{emacs_module_init}という名前の関数をエクスポートしていなければモジュールはエラーをシグナルする。この初期化関数は初期化成功時には0、それ以外は非0をリターンすること。後者の場合にはEmacsはエラーをシグナルして、モジュールのロードは失敗する。初期化中にユーザーが@kbd{C-g}を押下すると、Emacsは初期化関数のリターン値を無視してquitする(@ref{Quitting}を参照)(必要なら初期化関数内でユーザーのquitをcatchできる。@ref{should_quit}を参照)。"

#. type: deftypefn
#: original_texis/internals.texi:1074
msgid "The argument @var{runtime} is a pointer to a C @code{struct} that includes 2 public fields: @code{size}, which provides the size of the structure in bytes; and @code{get_environment}, which provides a pointer to a function that allows the module initialization function access to the Emacs environment object and its interfaces."
msgstr "引数@var{runtime}は2つのパブリックなフィールドを含むCの@code{struct}へのポインター、@code{size}はその構造体のバイトサイズ、@code{get_environment}はEmacsの環境オブジェクトとそのインターフェースにモジュール初期化関数をアクセス可能にする関数へのポインターを提供する。"

#. type: deftypefn
#: original_texis/internals.texi:1078
msgid "The initialization function should perform whatever initialization is required for the module.  In addition, it can perform the following tasks:"
msgstr "初期化関数はモジュールに必要な初期化は何であれすべて行うこと。さらに以下のタスクを行うことができる:"

#. type: cindex
#: original_texis/internals.texi:1080
#, no-wrap
msgid "compatibility, between modules and Emacs"
msgstr "compatibility, between modules and Emacs"

#. type: item
#: original_texis/internals.texi:1081
#, no-wrap
msgid "Compatibility verification"
msgstr "互換性の検証"

#. type: table
#: original_texis/internals.texi:1085
msgid "A module can verify that the Emacs executable which loads the module is compatible with the module, by comparing the @code{size} member of the @var{runtime} structure with the value compiled into the module:"
msgstr "モジュールにコンパイルされた@var{runtime}構造体の@code{size}メンバーの値を比較することにより、モジュールをロードするEmacs実行可能形式がモジュールと互換性があるか検証できる。"

#. type: example
#: original_texis/internals.texi:1093
#, no-wrap
msgid ""
"int\n"
"emacs_module_init (struct emacs_runtime *ert)\n"
"@{\n"
"  if (ert->size < sizeof (*ert))\n"
"    return 1;\n"
"@}\n"
msgstr ""
"int\n"
"emacs_module_init (struct emacs_runtime *ert)\n"
"@{\n"
"  if (ert->size < sizeof (*ert))\n"
"    return 1;\n"
"@}\n"

#. type: table
#: original_texis/internals.texi:1100
msgid "If the size of the runtime object passed to the module is smaller than what it expects, it means the module was compiled for an Emacs version newer (later) than the one which attempts to load it, i.e.@: the module might be incompatible with the Emacs binary."
msgstr "モジュールに渡されたruntimeオブジェクトのsizeが期待する値より小さければ、ロードしようとしているモジュールがEmacsの新しい(最近の)バージョン向けにコンパイルされていることを意味する(そのモジュールはEmacsのバイナリーとは非互換かもしれない)。"

#. type: table
#: original_texis/internals.texi:1105
msgid "In addition, a module can verify the compatibility of the module @acronym{API} with what the module expects.  The following sample code assumes it is part of the @code{emacs_module_init} function shown above:"
msgstr "さらにモジュールは期待しているモジュール@acronym{API}の互換性も検証できる。以下の例では上述の@code{emacs_module_init}関数の一部であることを仮定している:"

#. type: example
#: original_texis/internals.texi:1110
#, no-wrap
msgid ""
"  emacs_env *env = ert->get_environment (ert);\n"
"  if (env->size < sizeof (*env))\n"
"    return 2;\n"
msgstr ""
"  emacs_env *env = ert->get_environment (ert);\n"
"  if (env->size < sizeof (*env))\n"
"    return 2;\n"

#. type: cindex
#: original_texis/internals.texi:1113
#, no-wrap
msgid "module runtime environment"
msgstr "module runtime environment"

#. type: table
#: original_texis/internals.texi:1118
msgid "This calls the @code{get_environment} function using the pointer provided in the @code{runtime} structure to retrieve a pointer to the @acronym{API}'s @dfn{environment}, a C @code{struct} which also has a @code{size} field holding the size of the structure in bytes."
msgstr "これは@acronym{API}の@dfn{環境(environment)}へのポインターの取得用に構造体@code{runtime} (@code{size}フィールドに構造体のバイトサイズも保有するC@code{struct} )で提供されるポインターを使用して@code{get_environment}関数を呼び出す。"

#. type: table
#: original_texis/internals.texi:1122
msgid "Finally, you can write a module that will work with older versions of Emacs, by comparing the size of the environment passed by Emacs with known sizes, like this:"
msgstr "最後にEmacsから渡された環境のサイズと既知のサイズを比較することによって、以下のように古いバージョンのEmacsで動作するモジュールを記述できる:"

#. type: example
#: original_texis/internals.texi:1131
#, no-wrap
msgid ""
"  emacs_env *env = ert->get_environment (ert);\n"
"  if (env->size >= sizeof (struct emacs_env_26))\n"
"    emacs_version = 26;  /* Emacs 26 or later.  */\n"
"  else if (env->size >= sizeof (struct emacs_env_25))\n"
"    emacs_version = 25;\n"
"  else\n"
"    return 2; /* Unknown or unsupported version.  */\n"
msgstr ""
"  emacs_env *env = ert->get_environment (ert);\n"
"  if (env->size >= sizeof (struct emacs_env_26))\n"
"    emacs_version = 26;  /* Emacs 26 or later.  */\n"
"  else if (env->size >= sizeof (struct emacs_env_25))\n"
"    emacs_version = 25;\n"
"  else\n"
"    return 2; /* Unknown or unsupported version.  */\n"

#. type: table
#: original_texis/internals.texi:1139
msgid "This works because later Emacs versions always @emph{add} members to the environment, never @emph{remove} any members, so the size can only grow with new Emacs releases.  Given the version of Emacs, the module can use only the parts of the module @acronym{API} that existed in that version, since those parts are identical in later versions."
msgstr "新しいバージョンのEmacsではメンバーを環境に常に@emph{追加}して@emph{削除}は決して行わないので、新たなEmacsのリリースではサイズは増加するだけであることにより機能する。与えられたバージョンのEmacsにたいして、そのバージョンに存在するモジュール@acronym{API}は新しいバージョンのものと等しいので、その部分だけを使用できる。"

#. type: table
#: original_texis/internals.texi:1144
msgid "We recommend that modules always perform the compatibility verification, unless they do their job entirely in the initialization function, and don't access any Lisp objects or use any Emacs functions accessible through the environment structure."
msgstr "モジュールが処理全体を初期化関数内で行い、Lispオブジェクトにアクセスしたり環境構造体を通じてアクセス可能なEmacs関数を使用することがない場合を除いて、モジュールの互換性検証を常に行うことを推奨する。"

#. type: item
#: original_texis/internals.texi:1145
#, no-wrap
msgid "Binding module functions to Lisp symbols"
msgstr "Lispシンボルへのモジュール関数のバインド"

#. type: table
#: original_texis/internals.texi:1149
msgid "This gives the module functions names so that Lisp code could call it by that name.  We describe how to do this in @ref{Module Functions} below."
msgstr "これはLispコードが名前で呼び出せるようにモジュール関数に名前を与える。これを行う方法については以下の@ref{Module Functions}で説明する。"

#. type: node
#: original_texis/internals.texi:1152
#, no-wrap
msgid "Module Functions"
msgstr "Module Functions"

#. type: subsection
#: original_texis/internals.texi:1153
#, no-wrap
msgid "Writing Module Functions"
msgstr "Writing Module Functions"

#. type: cindex
#: original_texis/internals.texi:1154
#, no-wrap
msgid "writing module functions"
msgstr "writing module functions"

#. type: cindex
#: original_texis/internals.texi:1155
#, no-wrap
msgid "module functions"
msgstr "module functions"

#. type: Plain text
#: original_texis/internals.texi:1160
msgid "The main reason for writing an Emacs module is to make additional functions available to Lisp programs that load the module.  This subsection describes how to write such @dfn{module functions}."
msgstr "Emacsモジュールを記述する主な理由は、そのモジュールをロードしたLispプログラムが追加の関数を利用できるようにするためです。このサブセクションでは、そのような@dfn{モジュール関数(module functions)}の記述方法を説明します。"

#. type: Plain text
#: original_texis/internals.texi:1162
msgid "A module function has the following general form and signature:"
msgstr "モジュール関数は以下のような一般的なフォームとシグネチャをもっています:"

#. type: deftypefn
#: original_texis/internals.texi:1163
#, no-wrap
msgid "Function emacs_value module_func (emacs_env *@var{env}, ptrdiff_t @var{nargs}, emacs_value *@var{args}, void *@var{data})"
msgstr "Function emacs_value module_func (emacs_env *@var{env}, ptrdiff_t @var{nargs}, emacs_value *@var{args}, void *@var{data})"

#. type: deftypefn
#: original_texis/internals.texi:1173
msgid "The @var{env} argument provides a pointer to the @acronym{API} environment, needed to access Emacs objects and functions.  The @var{nargs} argument is the required number of arguments, which can be zero (see @code{make_function} below for more flexible specification of the argument number), and @var{args} is a pointer to the array of the function arguments.  The argument @var{data} points to additional data required by the function, which was arranged when @code{make_function} (see below) was called to create an Emacs function from @code{module_func}."
msgstr "引数@var{env}はEmacsのオブジェクトや関数へのアクセスに必要となる@acronym{API}環境へのポインターを提供する。引数@var{nargs}は要求される引数の個数であり0もあり得る(引数の個数にたいするより柔軟な仕様については以下の@code{make_function}を参照)。@var{args}は関数の引数へのポインター。引数@var{data}は関数により要求される追加データへのポインターであり、@code{module_func}からEmacs関数を作成するために@code{make_function} (以下参照)が呼び出される際にアレンジされる。"

#. type: deftypefn
#: original_texis/internals.texi:1179
msgid "Module functions use the type @code{emacs_value} to communicate Lisp objects between Emacs and the module (@pxref{Module Values}).  The @acronym{API}, described below and in the following subsections, provides facilities for conversion between basic C data types and the corresponding @code{emacs_value} objects."
msgstr "モジュール関数はEmacsとモジュール間でLispオブジェクトをやり取りするためにタイプ@code{emacs_value}を使用する(@ref{Module Values}を参照)。以下で説明する@acronym{API}と以降のサブセクションではCの基本データ型と、それらに対応する@code{emacs_value}オブジェクトの慣習にたいする機能を提供する。"

#. type: deftypefn
#: original_texis/internals.texi:1187
msgid "A module function always returns a value.  If the function returns normally, the Lisp code which called it will see the Lisp object corresponding to the @code{emacs_value} value the function returned.  However, if the user typed @kbd{C-g}, or if the module function or its callees signaled an error or exited nonlocally (@pxref{Module Nonlocal}), Emacs will ignore the returned value and quit or throw as it does when Lisp code encounters the same situations."
msgstr "モジュール関数は常に値をリターンする。関数が正常にリターンすると、それに呼び出されたLispコードは関数がリターンした@code{emacs_value}値に対応するLispオブジェクトを目にすることになる。しかしユーザーが@kbd{C-g}をタイプしたり、モジュール関数やその呼び出し先がエラーをシグナルしたり非ローカルなexit (@ref{Module Nonlocal}を参照)を行なった場合には、Emacsはリターン値を無視してLispコードが同じ状況に遭遇した際のようにquitやthrrowを行う。"

#. type: Plain text
#: original_texis/internals.texi:1196
msgid "After writing your C code for a module function, you should make a Lisp function object from it using the @code{make_function} function, whose pointer is provided in the environment (recall that the pointer to the environment is returned by @code{get_environment}).  This is normally done in the module initialization function (@pxref{module initialization function}), after verifying the @acronym{API} compatibility."
msgstr "モジュール関数用のCコード記述後には、そこから@code{make_function}を使用してLisp関数オブジェクトを作成する必要があります。@code{make_function}関数へのポインターは環境内で提供されます(環境へのポインターは@code{get_environment}がリターンすることを思い出してほしい)。これは通常は@acronym{API}のモジュール初期化関数(@ref{module initialization function}を参照)の内部で互換性検証後に行われます。"

#. type: deftypefn
#: original_texis/internals.texi:1197
#, no-wrap
msgid "Function emacs_value make_function (emacs_env *@var{env}, ptrdiff_t @var{min_arity}, ptrdiff_t @var{max_arity}, subr @var{func}, const char *@var{docstring}, void *@var{data})"
msgstr "Function emacs_value make_function (emacs_env *@var{env}, ptrdiff_t @var{min_arity}, ptrdiff_t @var{max_arity}, subr @var{func}, const char *@var{docstring}, void *@var{data})"

#. type: vindex
#: original_texis/internals.texi:1198
#, no-wrap
msgid "emacs_variadic_function"
msgstr "emacs_variadic_function"

#. type: deftypefn
#: original_texis/internals.texi:1207
msgid "This returns an Emacs function created from the C function @var{func}, whose signature is as described for @code{module_func} above (assumed here to be @code{typedef}'ed as @code{subr}).  The arguments @var{min_arity} and @var{max_arity} specify the minimum and maximum number of arguments that @var{func} can accept.  The @var{max_arity} argument can have the special value @code{emacs_variadic_function}, which makes the function accept an unlimited number of arguments, like the @code{&rest} keyword in Lisp (@pxref{Argument List})."
msgstr "これは上述の@code{module_func} (ここでは@code{subr}として@code{typedef}されたものとしている)で説明したようなシグネチャをもつC関数@var{func}によって作成されたEmacs関数をリターンする。引数@var{min_arity}と@var{max_arity}は、@var{func}が受け付ける引数の最大個数と最小個数を指定する。引数@var{max_arity}は特別な値@code{emacs_variadic_function}をもつことができる。これはLispの@code{&rest}キーワードのように、関数の受け付ける引数の個数を無制限にする(@ref{Argument List}を参照)。"

#. type: deftypefn
#: original_texis/internals.texi:1212
msgid "The argument @var{data} is a way to arrange for arbitrary additional data to be passed to @var{func} when it is called.  Whatever pointer is passed to @code{make_function} will be passed unaltered to @var{func}."
msgstr "引数@var{data}は@var{func}の呼び出し時に任意の追加データを渡すための手段である。@code{make_function}に渡されたポインターが何であれ、それは変更されずに@var{func}に渡される。"

#. type: deftypefn
#: original_texis/internals.texi:1219
msgid "The argument @var{docstring} specifies the documentation string for the function.  It should be either an @acronym{ASCII} string, or a UTF-8 encoded non-@acronym{ASCII} string, or a @code{NULL} pointer; in the latter case the function will have no documentation.  The documentation string can end with a line that specifies the advertised calling convention, see @ref{Function Documentation}."
msgstr "引数@var{docstring}はその関数用のドキュメント文字列を指定する。これは@acronym{ASCII}文字列かUTF-8にエンコードされた非@acronym{ASCII}文字列、または@code{NULL}ポインターのいずれかであること。後者の場合には関数がドキュメントをもたないことを意味する。ドキュメント文字列はadvertised-calling-conventionを指定する行で終端できる。@ref{Function Documentation}を参照のこと。"

#. type: deftypefn
#: original_texis/internals.texi:1225
msgid "Since every module function must accept the pointer to the environment as its first argument, the call to @code{make_function} could be made from any module function, but you will normally want to do that from the module initialization function, so that all the module functions are known to Emacs once the module is loaded."
msgstr "すべてのモジュール関数は1つ目の引数として環境へのポインターを受け取らなければならないので、@code{make_function}は任意のモジュール関数から呼び出され得るが、モジュールが一度ロードされればすべてのモジュール関数がEmacsに既知となるように、通常はこれをモジュール初期化関数で行うことを望むだろう。"

#. type: Plain text
#: original_texis/internals.texi:1231
msgid "Finally, you should bind the Lisp function to a symbol, so that Lisp code could call your function by name.  For that, use the module @acronym{API} function @code{intern} (@pxref{intern}) whose pointer is also provided in the environment that module functions can access."
msgstr "最後にLispコードが関数を名前で呼び出せるようにLisp関数をシンボルにバインドする必要があります。これを行うにはモジュール@acronym{API}関数@code{intern} (@ref{intern}を参照)を使用します。この関数のポインターもモジュール関数がアクセス可能な環境内で提供されています。"

#. type: Plain text
#: original_texis/internals.texi:1235
msgid "Combining the above steps, code that arranges for a C function @code{module_func} to be callable as @code{module-func} from Lisp will look like this, as part of the module initialization function:"
msgstr "上述のステップを組み合わせて、モジュール初期化関数の中で以下のようにC用にアレンジしたコード@code{module_func}が、Lispから@code{module-func}として呼び出し可能になります:"

#. type: example
#: original_texis/internals.texi:1243
#, no-wrap
msgid ""
" emacs_env *env = ert->get_environment (ert);\n"
" emacs_value func = env->make_function (env, min_arity, max_arity,\n"
"                                        module_func, docstring, data);\n"
" emacs_value symbol = env->intern (env, \"module-func\");\n"
" emacs_value args[] = @{symbol, func@};\n"
" env->funcall (env, env->intern (env, \"defalias\"), 2, args);\n"
msgstr ""
" emacs_env *env = ert->get_environment (ert);\n"
" emacs_value func = env->make_function (env, min_arity, max_arity,\n"
"                                        module_func, docstring, data);\n"
" emacs_value symbol = env->intern (env, \"module-func\");\n"
" emacs_value args[] = @{symbol, func@};\n"
" env->funcall (env, env->intern (env, \"defalias\"), 2, args);\n"

#. type: Plain text
#: original_texis/internals.texi:1251
msgid "This makes the symbol @code{module-func} known to Emacs by calling @code{env->intern}, then invokes @code{defalias} from Emacs to bind the function to that symbol.  Note that it is possible to use @code{fset} instead of @code{defalias}; the differences are described in @ref{Defining Functions, defalias}."
msgstr "@code{env->intern}の呼び出しによりシンボル@code{module-func}はEmacsが知ることとなり、それから関数をこのシンボルにバインドするためにEmacsから@code{defalias}を呼び出します。@code{defalias}のかわりに@code{fset}の使用も可能なことに注意してください。両者の違いは@ref{Defining Functions, defalias}に説明があります。"

#. type: Plain text
#: original_texis/internals.texi:1263
msgid "Using the module @acronym{API}, it is possible to define more complex function and data types: interactive functions, inline functions, macros, etc.  However, the resulting C code will be cumbersome and hard to read.  Therefore, we recommend that you limit the module code which creates functions and data structures to the absolute minimum, and leave the rest for a Lisp package that will accompany your module, because doing these additional tasks in Lisp is much easier, and will produce a much more readable code.  For example, given a module function @code{module-func} defined as above, one way of making an interactive command @code{module-cmd} based on it is with the following simple Lisp wrapper:"
msgstr "モジュール@acronym{API}の使用により、より複雑な関数やデータ型(インタラクティブ関数、インライン関数、マクロ等)の定義が可能になります。ただしCの結果コードは扱いにくく、可読性も低下します。したがって関数やデータ構造を作成するモジュールコードを可能なかぎり最小限に留めるとともに、残りの部分をモジュールに付属するLispパッケージに付託することを推奨します。なぜならこれらの追加タスクをLispで行うのはより用意であり、より可読性の高いコードが生成されるでしょう。たとえば上記のように定義されたモジュール関数@code{module-func}がある場合には、以下のようなシンプルなLispラッパーにもとづくインタラクティブなコマンド@code{module-cmd}を作成するのも1つの方法です:"

#. type: lisp
#: original_texis/internals.texi:1269
#, no-wrap
msgid ""
"(defun module-cmd (&rest args)\n"
"  \"Documentation string for the command.\"\n"
"  (interactive @var{spec})\n"
"  (apply 'module-func args))\n"
msgstr ""
"(defun module-cmd (&rest args)\n"
"  \"Documentation string for the command.\"\n"
"  (interactive @var{spec})\n"
"  (apply 'module-func args))\n"

#. type: Plain text
#: original_texis/internals.texi:1274
msgid "The Lisp package which goes with your module could then load the module using the @code{module-load} primitive (@pxref{Dynamic Modules}) when the package is loaded into Emacs."
msgstr "モジュールに同梱されるLispパッケージは、Emacsにパッケージがロードされる際に@code{module-load}プリミティブ(@ref{Dynamic Modules}を参照)を使用してモジュールをロードできます。"

#. type: node
#: original_texis/internals.texi:1275
#, no-wrap
msgid "Module Values"
msgstr "Module Values"

#. type: subsection
#: original_texis/internals.texi:1276
#, no-wrap
msgid "Conversion Between Lisp and Module Values"
msgstr "Conversion Between Lisp and Module Values"

#. type: cindex
#: original_texis/internals.texi:1277
#, no-wrap
msgid "module values, conversion"
msgstr "module values, conversion"

#. type: cindex
#: original_texis/internals.texi:1279
#, no-wrap
msgid "@code{emacs_value} data type"
msgstr "@code{emacs_value} data type"

#. type: Plain text
#: original_texis/internals.texi:1291
msgid "With very few exceptions, most modules need to exchange data with Lisp programs that call them: accept arguments to module functions and return values from module functions.  For this purpose, the module @acronym{API} provides the @code{emacs_value} type, which represents Emacs Lisp objects communicated via the @acronym{API}; it is the functional equivalent of the @code{Lisp_Object} type used in Emacs C primitives (@pxref{Writing Emacs Primitives}).  This section describes the parts of the module @acronym{API} that allow to create @code{emacs_value} objects corresponding to basic Lisp data types, and how to access from C data in @code{emacs_value} objects that correspond to Lisp objects."
msgstr "非常に少数の例外を除くほとんどのモジュールでは、モジュールを呼び出すLispプログラムとの間でモジュール関数への引数やリターン値の受け渡しでデータのやり取りが必要になります。この目的にたいしてモジュール@acronym{API}は@code{emacs_value}タイプを提供しています。これは@acronym{API}を通じたやり取りにおいてEmacsのLispオブジェクトを表現するタイプであり、EmacsのCプリミティブ(@ref{Writing Emacs Primitives}を参照)で使用される@code{Lisp_Object}タイプと機能的には等価です。このセクションではLispの基本データ型に対応する@code{emacs_value}オブジェクトの作成を可能とするモジュール@acronym{API}の部分と、Lispオブジェクトに対応する@code{emacs_value}オブジェクト内のCデータへのアクセス方法について説明します。"

#. type: Plain text
#: original_texis/internals.texi:1296
msgid "All of the functions described below are actually @emph{function pointers} provided via the pointer to the environment which every module function accepts.  Therefore, module code should call these functions through the environment pointer, like this:"
msgstr "以下で説明するすべての関数は、実際にはすべてのモジュール関数が受け取る環境へのポインターを介して提供される@emph{関数ポインター(function pointers)}です。したがってモジュールのコードでは以下のように環境ポインターを通じてこれらの関数を呼び出す必要があります:"

#. type: example
#: original_texis/internals.texi:1300
#, no-wrap
msgid ""
"emacs_env *env;  /* the environment pointer */\n"
"env->some_function (arguments@dots{});\n"
msgstr ""
"emacs_env *env;  /* the environment pointer */\n"
"env->some_function (arguments@dots{});\n"

#. type: Plain text
#: original_texis/internals.texi:1306
msgid "The @code{emacs_env} pointer will usually come from the first argument to the module function, or from the call to @code{get_environment} if you need the environment in the module initialization function."
msgstr "@code{emacs_env}ポインターは通常はモジュール関数の1つ目の引数、モジュール初期化関数内で環境が必要な場合には@code{get_environment}の呼び出しから取得できます。"

#. type: Plain text
#: original_texis/internals.texi:1311
msgid "Most of the functions described below became available in Emacs 25, the first Emacs release that supported dynamic modules.  For the few functions that became available in later Emacs releases, we mention the first Emacs version that supported them."
msgstr "以下で説明するもののほとんどはEmacs 25で利用可能になった関数であり、Emacs 25はダイナミックモジュールを最初にサポートした最初のEmacsリリースです。それ以降のリリースで利用可能になったいくつかの関数につていは、それらをサポートする最初のEmacsバージョンを付記します。"

#. type: Plain text
#: original_texis/internals.texi:1321
msgid "The following @acronym{API} functions extract values of various C data types from @code{emacs_value} objects.  They all raise the @code{wrong-type-argument} error condition (@pxref{Type Predicates})  if the argument @code{emacs_value} object is not of the type expected by the function.  @xref{Module Nonlocal}, for details of how signaling errors works in Emacs modules, and how to catch error conditions inside the module before they are reported to Emacs.  The @acronym{API} function @code{type_of} (@pxref{Module Misc, type_of})  can be used to obtain the type of a @code{emacs_value} object."
msgstr "以下の@acronym{API}関数は@code{emacs_value}オブジェクトから種々のCデータ型を抽出します。これらすべては引数の@code{emacs_value}オブジェクトがその関数の期待するタイプでなければ、エラーコンディション@code{wrong-type-argument}をraiseします(@ref{Type Predicates}を参照)。Emacsモジュール内でエラーをシグナルする方法、およびEmacsにエラーが報告される前にモジュール内部でエラーコンディションをcatchする方法の詳細は@ref{Module Nonlocal}を参照してください。@code{emacs_value}のタイプ取得には@acronym{API}関数@code{type_of}を使用できます(@ref{Module Misc, type_of}を参照)。"

#. type: deftypefn
#: original_texis/internals.texi:1322
#, no-wrap
msgid "Function intmax_t extract_integer (emacs_env *@var{env}, emacs_value @var{arg})"
msgstr "Function intmax_t extract_integer (emacs_env *@var{env}, emacs_value @var{arg})"

#. type: deftypefn
#: original_texis/internals.texi:1327
msgid "This function returns the value of a Lisp integer specified by @var{arg}.  The C data type of the return value, @code{intmax_t}, is the widest integral data type supported by the C compiler, typically @w{@code{long long}}."
msgstr "この関数は@var{arg}で指定されたLisp整数の値をリターンする。リターン値のCデータ型@code{intmax_t}はCコンパイラーがサポートする最大の整数型であり、一般的には@w{@code{long long}}。"

#. type: deftypefn
#: original_texis/internals.texi:1329
#, no-wrap
msgid "Function double extract_float (emacs_env *@var{env}, emacs_value @var{arg})"
msgstr "Function double extract_float (emacs_env *@var{env}, emacs_value @var{arg})"

#. type: deftypefn
#: original_texis/internals.texi:1332
msgid "This function returns the value of a Lisp float specified by @var{arg}, as a C @code{double} value."
msgstr "この関数は@var{arg}で指定されたLisp浮動小数の値をCの@code{double}値としてリターンする。"

#. type: deftypefn
#: original_texis/internals.texi:1334
#, no-wrap
msgid "Function bool copy_string_contents (emacs_env *@var{env}, emacs_value @var{arg}, char *@var{buf}, ptrdiff_t *@var{len})"
msgstr "Function bool copy_string_contents (emacs_env *@var{env}, emacs_value @var{arg}, char *@var{buf}, ptrdiff_t *@var{len})"

#. type: deftypefn
#: original_texis/internals.texi:1341
msgid "This function stores the UTF-8 encoded text of a Lisp string specified by @var{arg} in the array of @code{char} pointed by @var{buf}, which should have enough space to hold at least @code{*@var{len}} bytes, including the terminating null byte.  The argument @var{len} must not be a @code{NULL} pointer, and, when the function is called, it should point to a value that specifies the size of @var{buf} in bytes."
msgstr "これは@var{arg}で指定されたLisp文字列をUTF-8にエンコードしたテキストを@var{buf}が指す@code{char}配列に格納する。@var{buf}は少なくとも終端のnullバイトを含む@code{*@var{len}}バイトを保持するために十分なスペースをもつこと。引数@var{len}は@code{NULL}ポインターであってはならない。この関数の呼び出し時には@var{buf}のバイトサイズを指定する値を指していること。"

#. type: deftypefn
#: original_texis/internals.texi:1350
msgid "If the buffer size specified by @code{*@var{len}} is large enough to hold the string's text, the function stores in @code{*@var{len}} the actual number of bytes copied to @var{buf}, including the terminating null byte, and returns @code{true}.  If the buffer is too small, the function raises the @code{args-out-of-range} error condition, stores the required number of bytes in @code{*@var{len}}, and returns @code{false}.  @xref{Module Nonlocal}, for how to handle pending error conditions."
msgstr "@code{*@var{len}}で指定されたバッファーサイズが文字列のテキストを保持するために十分大きければ、関数は終端のnullバイト含む実際にコピーされる@code{*@var{len}}バイトを@var{buf}にコピーして@code{true}をリターンする。バッファーが小さすぎる場合には、関数はエラーコンディション@code{args-out-of-range}をraiseするとともに、必要なバイト数を@code{*@var{len}}に格納して@code{false}をリターンする。保留中のエラーコンディションのハンドル方法は@ref{Module Nonlocal}を参照のこと。"

#. type: deftypefn
#: original_texis/internals.texi:1360
msgid "The argument @var{buf} can be a @code{NULL} pointer, in which case the function stores in @code{*@var{len}} the number of bytes required for storing the contents of @var{arg}, and returns @code{true}.  This is how you can determine the size of @var{buf} needed to store a particular string: first call @code{copy_string_contents} with @code{NULL} as @var{buf}, then allocate enough memory to hold the number of bytes stored by the function in @code{*@var{len}}, and call the function again with non-@code{NULL} @var{buf} to actually perform the text copying."
msgstr "引数@var{buf}は@code{NULL}ポインターでもよく、この場合には関数は@var{arg}のコンテンツの格納に必要なバイト数を@code{*@var{len}}に格納して@code{true}をリターンする。これは特定の文字列を格納するために必要な@var{buf}サイズを決定する手段となり得る。1回目は@var{buf}を@code{NULL}で@code{copy_string_contents}を呼び出して、関数により@code{*@var{len}}に格納されたバイト数の保持に十分なメモリーを割り当ててから、実際にテキストのコピーを行うために非@code{NULL}の@var{buf}で関数を再び呼び出す。"

#. type: deftypefn
#: original_texis/internals.texi:1362
#, no-wrap
msgid "Function emacs_value vec_get (emacs_env *@var{env}, emacs_value @var{vector}, ptrdiff_t @var{index})"
msgstr "Function emacs_value vec_get (emacs_env *@var{env}, emacs_value @var{vector}, ptrdiff_t @var{index})"

#. type: deftypefn
#: original_texis/internals.texi:1370
msgid "This function returns the element of @var{vector} at @var{index}.  The @var{index} of the first vector element is zero.  The function raises the @code{args-out-of-range} error condition if the value of @var{index} is invalid.  To extract C data from the value the function returns, use the other extraction functions described here, as appropriate for the Lisp data type stored in that element of the vector."
msgstr "この関数は@var{vector}の@var{index}の要素をリターンする。ベクターの最初の要素の@var{index}は0。@var{index}の値が無効ならこの関数はエラーコンディション@code{args-out-of-range}をraiseする。関数のリターン値からCデータを抽出するためには、ベクターの当該要素に格納されたLispデータタイプに応じて、ここで説明している他の抽出関数を使用すればよい。"

#. type: deftypefn
#: original_texis/internals.texi:1372
#, no-wrap
msgid "Function ptrdiff_t vec_size (emacs_env *@var{env}, emacs_value @var{vector})"
msgstr "Function ptrdiff_t vec_size (emacs_env *@var{env}, emacs_value @var{vector})"

#. type: deftypefn
#: original_texis/internals.texi:1374
msgid "This function returns the number of elements in @var{vector}."
msgstr "この関数は@var{vector}内の要素数をリターンする。"

#. type: deftypefn
#: original_texis/internals.texi:1376
#, no-wrap
msgid "Function void vec_set (emacs_env *@var{env}, emacs_value @var{vector}, ptrdiff_t @var{index}, emacs_value @var{value})"
msgstr "Function void vec_set (emacs_env *@var{env}, emacs_value @var{vector}, ptrdiff_t @var{index}, emacs_value @var{value})"

#. type: deftypefn
#: original_texis/internals.texi:1380
msgid "This function stores @var{value} in the element of @var{vector} whose index is @var{index}.  It raises the @code{args-out-of-range} error condition if the value of @var{index} is invalid."
msgstr "この関数は@var{vector}のインデックス@var{index}の要素に@var{value}を格納する。@var{index}の値が無効ならこの関数はエラーコンディション@code{args-out-of-range}をraiseする。"

#. type: Plain text
#: original_texis/internals.texi:1385
msgid "The following @acronym{API} functions create @code{emacs_value} objects from basic C data types.  They all return the created @code{emacs_value} object."
msgstr "以下はCの基本データ型から@code{emacs_value}オブジェクトを作成する@acronym{API}関数です。これらはすべて作成した@code{emacs_value}オブジェクトをリターンします。"

#. type: deftypefn
#: original_texis/internals.texi:1386
#, no-wrap
msgid "Function emacs_value make_integer (emacs_env *@var{env}, intmax_t @var{n})"
msgstr "Function emacs_value make_integer (emacs_env *@var{env}, intmax_t @var{n})"

#. type: deftypefn
#: original_texis/internals.texi:1393
msgid "This function takes an integer argument @var{n} and returns the corresponding @code{emacs_value} object.  It raises the @code{overflow-error} error condition if the value of @var{n} cannot be represented as an Emacs integer, i.e.@: is not inside the limits set by @code{most-negative-fixnum} and @code{most-positive-fixnum} (@pxref{Integer Basics})."
msgstr "この関数は引数@var{n} (整数)を受け取り対応する@code{emacs_value}オブジェクトをリターンする。@var{n}の値をEmacs整数で表現できない、すなわち@code{most-negative-fixnum}と@code{most-positive-fixnum}の範囲外(@ref{Integer Basics}を参照)ならエラーコンディション@code{overflow-error}をraiseする。"

#. type: deftypefn
#: original_texis/internals.texi:1395
#, no-wrap
msgid "Function emacs_value make_float (emacs_env *@var{env}, double @var{d})"
msgstr "Function emacs_value make_float (emacs_env *@var{env}, double @var{d})"

#. type: deftypefn
#: original_texis/internals.texi:1398
msgid "This function takes a @code{double} argument @var{d} and returns the corresponding Emacs floating-point value."
msgstr "この関数は@code{double}の引数@var{d}を受け取り対応するEmacs浮動小数点値をリターンする。"

#. type: deftypefn
#: original_texis/internals.texi:1400
#, no-wrap
msgid "Function emacs_value make_string (emacs_env *@var{env}, const char *@var{str}, ptrdiff_t @var{strlen})"
msgstr "Function emacs_value make_string (emacs_env *@var{env}, const char *@var{str}, ptrdiff_t @var{strlen})"

#. type: deftypefn
#: original_texis/internals.texi:1410
msgid "This function creates an Emacs string from C text string pointed by @var{str} whose length in bytes, not including the terminating null byte, is @var{strlen}.  The original string in @var{str} can be either an @acronym{ASCII} string or a UTF-8 encoded non-@acronym{ASCII} string; it can include embedded null bytes, and doesn't have to end in a terminating null byte at @code{@var{str}[@var{strlen}]}.  The function raises the @code{overflow-error} error condition if @var{strlen} is negative or exceeds the maximum length of an Emacs string."
msgstr "この関数は@var{str}が指す、終端のnullバイトを含まないバイト長が@var{strlen}であるようなCテキスト文字列からEmacs文字列を作成する。@var{str}の元文字列は@acronym{ASCII}文字列かUTF-8にエンコードされた非@acronym{ASCII}文字列が可能であり、文字列には埋め込みのnullバイトを含むことができ、@code{@var{str}[@var{strlen}]}にあるnullバイトで終端される必要はない。@var{strlen}が負、またはEmacs文字列の最大長を超過する場合には、この関数はエラーコンディション@code{overflow-error}をraiseする。"

#. type: Plain text
#: original_texis/internals.texi:1419
msgid "The @acronym{API} does not provide functions to manipulate Lisp data structures, for example, create lists with @code{cons} and @code{list} (@pxref{Building Lists}), extract list members with @code{car} and @code{cdr} (@pxref{List Elements}), create vectors with @code{vector} (@pxref{Vector Functions}), etc.  For these, use @code{intern} and @code{funcall}, described in the next subsection, to call the corresponding Lisp functions."
msgstr "この@acronym{API}はたとえば@code{cons}と@code{list}によるリスト作成(@ref{Building Lists}を参照)、@code{car}と@code{cdr}によるリストメンバーの抽出(@ref{List Elements}を参照)、@code{vector}によるベクター作成(@ref{Vector Functions}を参照)等のようなLispデータ構造を操作する関数は提供しません。これらにたいしてはたいおう するLisp関数を呼び出すために、次のサブセクションで説明する@code{intern}と@code{funcall}を使用します。"

#. type: Plain text
#: original_texis/internals.texi:1425
msgid "Normally, @code{emacs_value} objects have a rather short lifetime: it ends when the @code{emacs_env} pointer used for their creation goes out of scope.  Occasionally, you may need to create @dfn{global references}: @code{emacs_value} objects that live as long as you wish.  Use the following two functions to manage such objects."
msgstr "@code{emacs_value}オブジェクトのライフタイムはかなり短いのが普通です。このライフタイムはオブジェクトの作成に使用された@code{emacs_env}ポインターがスコープ外になると終了します。@code{emacs_value}が望む間は行き続けるような@dfn{グローバル参照(global references)}を作成を要する場合もあるかもしれません。そのようなオブジェクトの管理には以下の2つの関数を使用します。"

#. type: deftypefn
#: original_texis/internals.texi:1426
#, no-wrap
msgid "Function emacs_value make_global_ref (emacs_env *@var{env}, emacs_value @var{value})"
msgstr "Function emacs_value make_global_ref (emacs_env *@var{env}, emacs_value @var{value})"

#. type: deftypefn
#: original_texis/internals.texi:1428
msgid "This function returns a global reference for @var{value}."
msgstr "この関数は@var{value}のグローバル参照をリターンする。"

#. type: deftypefn
#: original_texis/internals.texi:1430
#, no-wrap
msgid "Function void free_global_ref (emacs_env *@var{env}, emacs_value @var{global_value})"
msgstr "Function void free_global_ref (emacs_env *@var{env}, emacs_value @var{global_value})"

#. type: deftypefn
#: original_texis/internals.texi:1435
msgid "This function frees the @var{global_value} previously created by @code{make_global_ref}.  The @var{global_value} is no longer valid after the call.  Your module code should pair each call to @code{make_global_ref} with the corresponding @code{free_global_ref}."
msgstr "この関数は以前に@code{make_global_ref}で作成した@var{global_value}を解放する。@var{global_value}はこの呼び出し後は無効になる。モジュールのコードでは@code{make_global_ref}と対応する@code{free_global_ref}の呼び出しそれぞれをペアーとすること。"

#. type: cindex
#: original_texis/internals.texi:1437
#, no-wrap
msgid "user pointer, using in module functions"
msgstr "user pointer, using in module functions"

#. type: Plain text
#: original_texis/internals.texi:1448
msgid "An alternative to keeping around C data structures that need to be passed to module functions later is to create @dfn{user pointer} objects.  A user pointer, or @code{user-ptr}, object is a Lisp object that encapsulates a C pointer and can have an associated finalizer function, which is called when the object is garbage-collected (@pxref{Garbage Collection}).  The module @acronym{API} provides functions to create and access @code{user-ptr} objects.  These functions raise the @code{wrong-type-argument} error condition if they are called on @code{emacs_value} that doesn't represent a @code{user-ptr} object."
msgstr "後でモジュール関数に渡す必要があるCデータ構造体を追跡するための代替え手段は@dfn{ユーザーポインター(user pointer)}オブジェクトの作成です。ユーザーポインター(または@code{user-ptr} )はCポインターをカプセル化したLispオブジェクトであり、関連付けられたファイナライザー(オブジェクトがガーベージコレクトされる際に呼び出される。@ref{Garbage Collection}を参照)をもつことができます。モジュール@acronym{API}は@code{user-ptr}オブジェクトの作成やアクセスを行う関数を提供します。これらの関数は@code{user-ptr}オブジェクトを表現しない@code{emacs_value}で呼び出されるとエラーコンディション@code{wrong-type-argument}をraiseします。"

#. type: deftypefn
#: original_texis/internals.texi:1449
#, no-wrap
msgid "Function emacs_value make_user_ptr (emacs_env *@var{env}, emacs_finalizer @var{fin}, void *@var{ptr})"
msgstr "Function emacs_value make_user_ptr (emacs_env *@var{env}, emacs_finalizer @var{fin}, void *@var{ptr})"

#. type: deftypefn
#: original_texis/internals.texi:1454
msgid "This function creates and returns a @code{user-ptr} object which wraps the C pointer @var{ptr}.  The finalizer function @var{fin} can be a @code{NULL} pointer (meaning no finalizer), or it can be a function of the following signature:"
msgstr "この関数はCポインター@var{ptr}をラップした@code{user-ptr}オブジェクトを作成してリターンする。ファイナライザー関数@var{fin}は@code{NULL} (ファイナライザーなし)、または以下のシグネチャをもつ関数のいずれか:"

#. type: example
#: original_texis/internals.texi:1457
#, no-wrap
msgid "typedef void (*emacs_finalizer) (void *@var{ptr});\n"
msgstr "typedef void (*emacs_finalizer) (void *@var{ptr});\n"

#. type: deftypefn
#: original_texis/internals.texi:1464
msgid "If @var{fin} is not a @code{NULL} pointer, it will be called with the @var{ptr} as the argument when the @code{user-ptr} object is garbage-collected.  Don't run any expensive code in a finalizer, because GC must finish quickly to keep Emacs responsive."
msgstr "@var{fin}が@code{NULL}ポインターでなければ、@code{user-ptr}オブジェクトがガーベージコレクトされる際に@var{ptr}を引数として呼び出される。Emacsの応答性を維持するためにGCは短時間で終了しなければならないので、ファイナライザーでは高価なコードの実行は行ってはならない。"

#. type: deftypefn
#: original_texis/internals.texi:1466
#, no-wrap
msgid "Function void *get_user_ptr (emacs_env *@var{env}, emacs_value val)"
msgstr "Function void *get_user_ptr (emacs_env *@var{env}, emacs_value val)"

#. type: deftypefn
#: original_texis/internals.texi:1469
msgid "This function extracts the C pointer from the Lisp object represented by @var{val}."
msgstr "この関数は@var{val}で表されるLispオブジェクトからCポインターを抽出する。"

#. type: deftypefn
#: original_texis/internals.texi:1471
#, no-wrap
msgid "Function void set_user_ptr (emacs_env *@var{env}, emacs_value @var{value}, void *@var{ptr})"
msgstr "Function void set_user_ptr (emacs_env *@var{env}, emacs_value @var{value}, void *@var{ptr})"

#. type: deftypefn
#: original_texis/internals.texi:1474
msgid "This function sets the C pointer embedded in the @code{user-ptr} object represented by @var{value} to @var{ptr}."
msgstr "この関数は@var{value}で表される@code{user-ptr}オブジェクトに埋め込まれたCポインターに@var{ptr}をセットする。"

#. type: deftypefn
#: original_texis/internals.texi:1476
#, no-wrap
msgid "Function emacs_finalizer get_user_finalizer (emacs_env *@var{env}, emacs_value val)"
msgstr "Function emacs_finalizer get_user_finalizer (emacs_env *@var{env}, emacs_value val)"

#. type: deftypefn
#: original_texis/internals.texi:1479
msgid "This function returns the finalizer of the @code{user-ptr} object represented by @var{val}, or @code{NULL} if it doesn't have a finalizer."
msgstr "この関数は@var{val}で表される@code{user-ptr}オブジェクトのファイナライザー、ファイナライザーがなければ@code{NULL}をリターンする。"

#. type: deftypefn
#: original_texis/internals.texi:1481
#, no-wrap
msgid "Function void set_user_finalizer (emacs_env *@var{env}, emacs_value @var{val}, emacs_finalizer @var{fin})"
msgstr "Function void set_user_finalizer (emacs_env *@var{env}, emacs_value @var{val}, emacs_finalizer @var{fin})"

#. type: deftypefn
#: original_texis/internals.texi:1485
msgid "This function changes the finalizer of the @code{user-ptr} object represented by @var{val} to be @var{fin}.  If @var{fin} is a @code{NULL} pointer, the @code{user-ptr} object will have no finalizer."
msgstr "この関数は@var{val}で表される@code{user-ptr}オブジェクトのファイナライザーを@var{fin}に変更する。@var{fin}が@code{NULL}なら@code{user-ptr}オブジェクトのファイナライザーはなくなる。"

#. type: node
#: original_texis/internals.texi:1487
#, no-wrap
msgid "Module Misc"
msgstr "Module Misc"

#. type: subsection
#: original_texis/internals.texi:1488
#, no-wrap
msgid "Miscellaneous Convenience Functions for Modules"
msgstr "Miscellaneous Convenience Functions for Modules"

#. type: Plain text
#: original_texis/internals.texi:1496
msgid "This subsection describes a few convenience functions provided by the module @acronym{API}.  Like the functions described in previous subsections, all of them are actually function pointers, and need to be called via the @code{emacs_env} pointer.  Description of functions that were introduced after Emacs 25 calls out the first version where they became available."
msgstr "このサブセクションではモジュール@acronym{API}が提供する便利な関数をいくつか説明します。前のサブセクションで説明した関数と同じようにこれらの関数は実際には関数ポインターであり、@code{emacs_env}ポインターを介して呼び出す必要があります。Emacs 25以降に導入された関数の説明はそれらが利用可能になった最初のバージョンを付記します。"

#. type: deftypefn
#: original_texis/internals.texi:1497
#, no-wrap
msgid "Function bool eq (emacs_env *@var{env}, emacs_value @var{val1}, emacs_value @var{val2})"
msgstr "Function bool eq (emacs_env *@var{env}, emacs_value @var{val1}, emacs_value @var{val2})"

#. type: deftypefn
#: original_texis/internals.texi:1503
msgid "This function returns @code{true} if the Lisp objects represented by @var{val1} and @var{val2} are identical, @code{false} otherwise.  This is the same as the Lisp function @code{eq} (@pxref{Equality Predicates}), but avoids the need to intern the objects represented by the arguments."
msgstr "この関数は@var{val1}と@var{val2}が表すLispオブジェクトが等しければ@code{true}、それ以外なら@code{false}をリターンする。これはLisp関数@code{eq} (@ref{Equality Predicates}を参照)と同じだが、引数が表すオブジェクトのinternの要否を無視する。"

#. type: deftypefn
#: original_texis/internals.texi:1507
msgid "There are no @acronym{API} functions for other equality predicates, so you will need to use @code{intern} and @code{funcall}, described below, to perform more complex equality tests."
msgstr "等価性に関する他の述語は@acronym{API}関数には存在しないので、より複雑な等価性のテストを行うためには、以下で説明する@code{intern}と@code{funcall}を使う必要がある。"

#. type: deftypefn
#: original_texis/internals.texi:1509
#, no-wrap
msgid "Function bool is_not_nil (emacs_env *@var{env}, emacs_value @var{val})"
msgstr "Function bool is_not_nil (emacs_env *@var{env}, emacs_value @var{val})"

#. type: deftypefn
#: original_texis/internals.texi:1512
msgid "This function tests whether the Lisp object represented by @var{val} is non-@code{nil}; it returns @code{true} or @code{false} accordingly."
msgstr "このえ関数は@var{val}で表されるLispオブジェクトをテストして非@code{nil}なら@code{true}、それ以外は@code{false}をリターンする。"

#. type: deftypefn
#: original_texis/internals.texi:1517
msgid "Note that you could implement an equivalent test by using @code{intern} to get an @code{emacs_value} representing @code{nil}, then use @code{eq}, described above, to test for equality.  But using this function is more convenient."
msgstr "等価性をテストするたに@code{intern}を使って@code{nil}を表す@code{emacs_value}を取得して、上述の@code{eq}を使用すれば自身で等価性テストを実装できることに注意。しかしこの関数を使用するほうが簡便だろう。"

#. type: deftypefn
#: original_texis/internals.texi:1519
#, no-wrap
msgid "Function emacs_value type_of (emacs_env *@var{env}, emacs_value @code{object})"
msgstr "Function emacs_value type_of (emacs_env *@var{env}, emacs_value @code{object})"

#. type: deftypefn
#: original_texis/internals.texi:1525
msgid "This function returns the type of @var{object} as a value that represents a symbol: @code{string} for a string, @code{integer} for an integer, @code{process} for a process, etc.  @xref{Type Predicates}.  You can use @code{intern} and @code{eq} to compare against known type symbols, if your code needs to depend on the object type."
msgstr "この関数はシンボルを表す値(文字列は@code{string}、整数は@code{integer}、プロセスなら@code{process}等)として@var{object}のタイプをリターンする。@ref{Type Predicates}を参照のこと。オブジェクトのタイプにコードが依存する必要があれば、既知のタイプシンボルと比較するために@code{intern}と@code{eq}を使用できる。"

#. type: anchor{#1}
#: original_texis/internals.texi:1528
msgid "intern"
msgstr "intern"

#. type: deftypefn
#: original_texis/internals.texi:1528
#, no-wrap
msgid "Function emacs_value intern (emacs_env *@var{env}, const char *name)"
msgstr "Function emacs_value intern (emacs_env *@var{env}, const char *name)"

#. type: deftypefn
#: original_texis/internals.texi:1532
msgid "This function returns an interned Emacs symbol whose name is @var{name}, which should be an @acronym{ASCII} null-terminated string.  It creates a new symbol if one does not already exist."
msgstr "この関数は名前が@var{name} (null終端された@acronym{ASCII}文字列であること)であるような、internされたEmacsシンボルをリターンする。すでに存在していなれば新たにシンボルを作成する。"

#. type: deftypefn
#: original_texis/internals.texi:1539
msgid "Together with @code{funcall}, described below, this function provides a means for invoking any Lisp-callable Emacs function, provided that its name is a pure @acronym{ASCII} string.  For example, here's how to intern a symbol whose name @code{name_str} is non-@acronym{ASCII}, by calling the more powerful Emacs @code{intern} function (@pxref{Creating Symbols}):"
msgstr "この関数は以下で説明する@code{funcall}と共に用いることにより、Lispで呼び出し可能なEmcas関数(名前が純粋な@acronym{ASCII}文字列である場合にかぎる)純粋な@acronym{ASCII}文字列であるようなを呼び出す手段を提供する。たとえば以下はより協力なEmacsの@code{intern}関数(@ref{Creating Symbols}を参照)を呼び出すことにより、名前@code{name_str}が非@acronym{ASCII}であるようなシンボルをinternする方法:"

#. type: example
#: original_texis/internals.texi:1546
#, no-wrap
msgid ""
"emacs_value fintern = env->intern (env, \"intern\");\n"
"emacs_value sym_name =\n"
"  env->make_string (env, name_str, strlen (name_str));\n"
"emacs_value intern_args[] = @{ sym_name, env->intern (env, \"nil\") @};\n"
"emacs_value symbol = env->funcall (env, fintern, 2, intern_args);\n"
msgstr ""
"emacs_value fintern = env->intern (env, \"intern\");\n"
"emacs_value sym_name =\n"
"  env->make_string (env, name_str, strlen (name_str));\n"
"emacs_value intern_args[] = @{ sym_name, env->intern (env, \"nil\") @};\n"
"emacs_value symbol = env->funcall (env, fintern, 2, intern_args);\n"

#. type: deftypefn
#: original_texis/internals.texi:1550
#, no-wrap
msgid "Function emacs_value funcall (emacs_env *@var{env}, emacs_value @var{func}, ptrdiff_t @var{nargs}, emacs_value *@var{args})"
msgstr "Function emacs_value funcall (emacs_env *@var{env}, emacs_value @var{func}, ptrdiff_t @var{nargs}, emacs_value *@var{args})"

#. type: deftypefn
#: original_texis/internals.texi:1557
msgid "This function calls the specified @var{func} passing it @var{nargs} arguments from the array pointed to by @var{args}.  The argument @var{func} can be a function symbol (e.g., returned by @code{intern} described above), a module function returned by @code{make_function} (@pxref{Module Functions}), a subroutine written in C, etc.  If @var{nargs} is zero, @var{args} can be a @code{NULL} pointer."
msgstr "この関数は@var{args}が指す配列の@var{nargs}個の引数を渡して@var{func}の指定先を呼び出す。引数@var{func}は(上述の@code{intern}がリターンした)関数シンボル、@code{make_function}がリターンしたモジュール関数(@ref{Module Functions}を参照)、Cで記述されたサブルーチン等。@var{nargs}が0なら@var{args}は@code{NULL}ポインターでもよい。"

#. type: deftypefn
#: original_texis/internals.texi:1559
msgid "The function returns the value that @var{func} returned."
msgstr "この関数は@var{func}がリターンした値をリターンする。"

#. type: Plain text
#: original_texis/internals.texi:1566
msgid "If your module includes potentially long-running code, it is a good idea to check from time to time in that code whether the user wants to quit, e.g., by typing @kbd{C-g} (@pxref{Quitting}).  The following function, which is available since Emacs 26.1, is provided for that purpose."
msgstr "モジュールに長時間実行される可能性のあるコードが含まれる場合には、たとえば@kbd{C-g}をタイプする(@ref{Quitting}を参照)等によりユーザーがquitを望むかどうかをコード内でときどきチェックするのはよいアイデアです。Emacs 26.1から利用可能になった以下の関数は、この目的のために提供されました。"

#. type: anchor{#1}
#: original_texis/internals.texi:1568
msgid "should_quit"
msgstr "should_quit"

#. type: deftypefn
#: original_texis/internals.texi:1568
#, no-wrap
msgid "Function bool should_quit (emacs_env *@var{env})"
msgstr "Function bool should_quit (emacs_env *@var{env})"

#. type: deftypefn
#: original_texis/internals.texi:1572
msgid "This function returns @code{true} if the user wants to quit.  In that case, we recommend that your module function aborts any on-going processing and returns as soon as possible."
msgstr "この関数はユーザーがquitを望むようなら@code{true}をリターンする。この場合にはモジュール関数は実行中の処理をabortして可能なかぎり速やかにリターンすることを推奨する。"

#. type: subsection
#: original_texis/internals.texi:1575
#, no-wrap
msgid "Nonlocal Exits in Modules"
msgstr "Nonlocal Exits in Modules"

#. type: cindex
#: original_texis/internals.texi:1576
#, no-wrap
msgid "nonlocal exits, in modules"
msgstr "nonlocal exits, in modules"

#. type: Plain text
#: original_texis/internals.texi:1590
msgid "Emacs Lisp supports nonlocal exits, whereby program control is transfered from one point in a program to another remote point.  @xref{Nonlocal Exits}.  Thus, Lisp functions called by your module might exit nonlocally by calling @code{signal} or @code{throw}, and your module functions must handle such nonlocal exits properly.  Such handling is needed because C programs will not automatically release resources and perform other cleanups in these cases; your module code must itself do it.  The module @acronym{API} provides facilities for that, described in this subsection.  They are generally available since Emacs 25; those of them that became available in later releases explicitly call out the first Emacs version where they became part of the @acronym{API}."
msgstr "Emacs Lispは非ローカル脱出(nonlocal exits)をサポートしており、これによりプログラムの制御はプログラムのあるポイントから別の離れたポイントに転送されます。@ref{Nonlocal Exits}を参照してください。したがってモジュールから呼び出されたLisp関数は@code{signal}や@code{throw}を呼び出して非ローカルにexitするかもしれず、そのような非ローカル脱出をモジュール関数は正しくハンドルしなければなりません。このようなハンドリングはCプログラムがリソースを自動的に解放せず、このような場合には別のクリーンアップを行うために必要になります。モジュールコードは自身でこれを行わなければなりません。そのための機能をモジュール@acronym{API}は提供しており、このサブセクションではそれを説明します。これらは一般的にはEmacs 25以降で利用可能です。これ以降のリリースで利用可能になったものについては、@acronym{API}に含まれるようになった最初のEmacsのバージョンを付記します。"

#. type: Plain text
#: original_texis/internals.texi:1601
msgid "When some Lisp code called by a module function signals an error or throws, the nonlocal exit is trapped, and the pending exit and its associated data are stored in the environment.  Whenever a nonlocal exit is pending in the environment, any module @acronym{API} function called with a pointer to that environment will return immediately without any processing (the functions @code{non_local_exit_check}, @code{non_local_exit_get}, and @code{non_local_exit_clear} are exceptions from this rule).  If your module function then does nothing and returns to Emacs, a pending nonlocal exit will cause Emacs to act on it: signal an error or throw to the corresponding @code{catch}."
msgstr "モジュール関数から呼び出されたLispコードがエラーをシグナルしたりthrowを行う際には、非ローカル脱出はtrapされて保留中のexitと関連するデータは環境内に格納されます。環境内で非ローカル脱出が保留中の際には、環境へのポインターで呼び出されたすべてのモジュール@acronym{API}関数は何も処理を行わずに即座にリターンします(関数@code{non_local_exit_check}、@code{non_local_exit_get}、@code{non_local_exit_clear}はこのルールの例外)。モジュール関数が何も行わずにEmacsにリターンすれば、保留中の非ローカル脱出にたいしてEmacsがエラーをシグナルしたり、対応する@code{catch}へのthrowという対処を行うでしょう。"

#. type: Plain text
#: original_texis/internals.texi:1605
msgid "So the simplest ``handling'' of nonlocal exits in module functions is to do nothing special and let the rest of your code to run as if nothing happened.  However, this can cause two classes of problems:"
msgstr "したがって特別なことな何も行わずに、何事もなかったかのようにコードの残りを実行するのが、モジュール関数での非ローカル脱出にけるもっともシンプルな``ハンドリング''です。しかしこれは2つのクラスの問題を引き起こすかもしれません:"

#. type: itemize
#: original_texis/internals.texi:1611
msgid "Your module function might use uninitialized or undefined values, since @acronym{API} functions return immediately without producing the expected results."
msgstr "期待する値を生成することなく@acronym{API}関数は即座にリターンするので、初期化や定義が行われていない値をモジュール関数が使用するかもしれない。"

#. type: itemize
#: original_texis/internals.texi:1615
msgid "Your module might leak resources, because it might not have the opportunity to release them."
msgstr "リソースを解放する機会がないかもしれないのでモジュールがリソースをリークするかもしれない。"

#. type: Plain text
#: original_texis/internals.texi:1620
msgid "Therefore, we recommend that your module functions check for nonlocal exit conditions and recover from them, using the functions described below."
msgstr "したがってモジュール関数は以下に説明する関数を使用して、非ローカル脱出のコンディションのチェックとリカバリングを行うことを推奨します。"

#. type: deftypefn
#: original_texis/internals.texi:1621
#, no-wrap
msgid "Function enum emacs_funcall_exit non_local_exit_check (emacs_env *@var{env})"
msgstr "Function enum emacs_funcall_exit non_local_exit_check (emacs_env *@var{env})"

#. type: deftypefn
#: original_texis/internals.texi:1624
msgid "This function returns the kind of nonlocal exit condition stored in @var{env}.  The possible values are:"
msgstr "この関数は@var{env}に格納された非ローカル脱出のコンディションをリターンする。可能な値は:"

#. type: vindex
#: original_texis/internals.texi:1625
#, no-wrap
msgid "emacs_funcall_exit@r{, enumeration}"
msgstr "emacs_funcall_exit@r{, enumeration}"

#. type: deftypefn
#: original_texis/internals.texi:1627
msgid "@vtable @code"
msgstr "@vtable @code"

#. type: item
#: original_texis/internals.texi:1627
#, no-wrap
msgid "emacs_funcall_exit_return"
msgstr "emacs_funcall_exit_return"

#. type: deftypefn
#: original_texis/internals.texi:1629
msgid "The last @acronym{API} function exited normally."
msgstr "最後の@acronym{API}関数は正常にexitした。"

#. type: item
#: original_texis/internals.texi:1629
#, no-wrap
msgid "emacs_funcall_exit_signal"
msgstr "emacs_funcall_exit_signal"

#. type: deftypefn
#: original_texis/internals.texi:1631
msgid "The last @acronym{API} function signaled an error."
msgstr "最後の@acronym{API}関数はエラーをシグナルした。"

#. type: item
#: original_texis/internals.texi:1631
#, no-wrap
msgid "emacs_funcall_exit_throw"
msgstr "emacs_funcall_exit_throw"

#. type: deftypefn
#: original_texis/internals.texi:1633
msgid "The last @acronym{API} function exited via @code{throw}."
msgstr "最後の@acronym{API}関数は@code{throw}を通じてexitした。"

#. type: deftypefn
#: original_texis/internals.texi:1636
#, no-wrap
msgid "Function emacs_funcall_exit non_local_exit_get (emacs_env *@var{env}, emacs_value *@var{symbol}, emacs_value *@var{data})"
msgstr "Function emacs_funcall_exit non_local_exit_get (emacs_env *@var{env}, emacs_value *@var{symbol}, emacs_value *@var{data})"

#. type: deftypefn
#: original_texis/internals.texi:1648
msgid "This function returns the kind of nonlocal exit condition stored in @var{env}, like @code{non_local_exit_check} does, but it also returns the full information about the nonlocal exit, if any.  If the return value is @code{emacs_funcall_exit_signal}, the function stores the error symbol in @code{*@var{symbol}} and the error data in @code{*@var{data}} (@pxref{Signaling Errors}).  If the return value is @code{emacs_funcall_exit_throw}, the function stores the @code{catch} tag symbol in @code{*@var{symbol}} and the @code{throw} value in @code{*@var{data}}.  The function doesn't store anything in memory pointed by these arguments when the return value is @code{emacs_funcall_exit_return}."
msgstr "この関数は@code{non_local_exit_check}が行うように@var{env}に格納された非ローカル脱出の種別をリターンするが、もしあれば非ローカル脱出に関する完全な情報もリターンする。リターン値が@code{emacs_funcall_exit_signal}なら関数は@code{*@var{symbol}}にエラーシンボル、@code{*@var{data}}にエラーデータを格納する(@ref{Signaling Errors}を参照)。リターン値が@code{emacs_funcall_exit_throw}なら関数は@code{*@var{symbol}}に@code{catch}されたたタグシンボル、@code{*@var{data}}に@code{throw}された値を格納する。リターン値が@code{emacs_funcall_exit_return}なら関数はこれらの引数が指すメンモリー内に何も格納しない。"

#. type: Plain text
#: original_texis/internals.texi:1654
msgid "You should check nonlocal exit conditions where it matters: before you allocated some resource or after you allocated a resource that might need freeing, or where a failure means further processing is impossible or infeasible."
msgstr "何らかのリソースの割り当て前や解放を要するリソースの割り当て後、あるいは失敗がそれ以上の処理が不可能もしくは実行不能を意味するような場合のように、非ローカル脱出が問題になるようならチェックするべきです。"

#. type: Plain text
#: original_texis/internals.texi:1659
msgid "Once your module function detected that a nonlocal exit is pending, it can either return to Emacs (after performing the necessary local cleanup), or it can attempt to recover from the nonlocal exit.  The following @acronym{API} functions will help with these tasks."
msgstr "モジュール関数が保留中の非ローカル脱出を一度検知すれば、(必要なローカルクリーンアップの実施後に)Emacsにリターンしたり、非ローカル脱出からのリカバリーを試みることができます。以下の@acronym{API}関数はこれらのタスクの助けとなるでしょう。"

#. type: deftypefn
#: original_texis/internals.texi:1660
#, no-wrap
msgid "Function void non_local_exit_clear (emacs_env *@var{env})"
msgstr "Function void non_local_exit_clear (emacs_env *@var{env})"

#. type: deftypefn
#: original_texis/internals.texi:1668
msgid "This function clears the pending nonlocal exit conditions and data from @var{env}.  After calling it, the module @acronym{API} functions will work normally.  Use this function if your module function can recover from nonlocal exits of the Lisp functions it calls and continue, and also before calling any of the following two functions (or any other @acronym{API} functions, if you want them to perform their intended processing when a nonlocal exit is pending)."
msgstr "この関数は保留中の非ローカル脱出のコンディションと@var{env}由来のデータをクリアーする。これの呼び出し後にはモジュール@acronym{API}関数は通常どおり機能するだろう。モジュール関数が呼び出したLisp関数の非ローカル脱出からリカバーして継続可能な場合、あるいは以下の2つの関数のいずれか(非ローカル脱出が保留中の際に他の@acronym{API}関数に意図した動作を行わせたい場合にはそれらの@acronym{API}関数も)を呼び出す前にもこの関数を使用すること"

#. type: deftypefn
#: original_texis/internals.texi:1670
#, no-wrap
msgid "Function void non_local_exit_throw (emacs_env *@var{env}, emacs_value @var{tag}, emacs_value @var{value})"
msgstr "Function void non_local_exit_throw (emacs_env *@var{env}, emacs_value @var{tag}, emacs_value @var{value})"

#. type: deftypefn
#: original_texis/internals.texi:1676
msgid "This function throws to the Lisp @code{catch} symbol represented by @var{tag}, passing it @var{value} as the value to return.  Your module function should in general return soon after calling this function.  One use of this function is when you want to re-throw a non-local exit from one of the called @acronym{API} or Lisp functions."
msgstr "この関数は@var{tag}で表されるLispの@code{catch}シンボルにリターン値として@var{value}を渡してthrowを行う。モジュール関数は一般的にはこの関数の呼び出し後は即座にリターンすること。この関数は呼び出された@acronym{API}関数やLisp関数のいずれかから非ローカル脱出を再throwしたい際の1つの手段である。"

#. type: deftypefn
#: original_texis/internals.texi:1678
#, no-wrap
msgid "Function void non_local_exit_signal (emacs_env *@var{env}, emacs_value @var{error}, emacs_value @var{data})"
msgstr "Function void non_local_exit_signal (emacs_env *@var{env}, emacs_value @var{error}, emacs_value @var{data})"

#. type: deftypefn
#: original_texis/internals.texi:1683
msgid "This function signals the error represented by @var{error} with the specified error data @var{data}.  The module function should return soon after calling this function.  This function could be useful, e.g., for signaling errors from module functions to Emacs."
msgstr "この関数は@var{error}で表されるエラーを、指定したエラーデータ@var{data}とともにシグナルする。モジュール関数はこの関数の呼び出し後は即座にリターンすること。この関数はたとえばモジュール関数からEmacsにエラーをシグナルする際に有用かもしれない。"

#. type: cindex
#: original_texis/internals.texi:1688
#, no-wrap
msgid "object internals"
msgstr "object internals"

#. type: Plain text
#: original_texis/internals.texi:1698
msgid "Emacs Lisp provides a rich set of the data types.  Some of them, like cons cells, integers and strings, are common to nearly all Lisp dialects.  Some others, like markers and buffers, are quite special and needed to provide the basic support to write editor commands in Lisp.  To implement such a variety of object types and provide an efficient way to pass objects between the subsystems of an interpreter, there is a set of C data structures and a special type to represent the pointers to all of them, which is known as @dfn{tagged pointer}."
msgstr "Emacs Lispは豊富なデータタイプのセットを提供します。コンスセル、整数、文字列のようにこれらのいくつかは、ほとんどすべてのLisp方言で一般的です。マーカやバッファーのようなそれ以外のものはLisp内でエディターコマンドを記述するための基本的サポートを提供するために極めて特別かつ必要なものです。そのような種々のオブジェクトタイプを実装してインタープリターのサブシステムとの間でオブジェクトを渡す効果的な方法を提供するために、Cデータ構造体セットとそれらすべてにたいするポインターを表す@dfn{タグ付きポインター(tagged pointer)}と呼ばれる特別なタイプが存在します。"

#. type: Plain text
#: original_texis/internals.texi:1715
msgid "In C, the tagged pointer is an object of type @code{Lisp_Object}.  Any initialized variable of such a type always holds the value of one of the following basic data types: integer, symbol, string, cons cell, float, vectorlike or miscellaneous object.  Each of these data types has the corresponding tag value.  All tags are enumerated by @code{enum Lisp_Type} and placed into a 3-bit bitfield of the @code{Lisp_Object}.  The rest of the bits is the value itself.  Integers are immediate, i.e., directly represented by those @dfn{value bits}, and all other objects are represented by the C pointers to a corresponding object allocated from the heap.  Width of the @code{Lisp_Object} is platform- and configuration-dependent: usually it's equal to the width of an underlying platform pointer (i.e., 32-bit on a 32-bit machine and 64-bit on a 64-bit one), but also there is a special configuration where @code{Lisp_Object} is 64-bit but all pointers are 32-bit.  The latter trick was designed to overcome the limited range of values for Lisp integers on a 32-bit system by using 64-bit @code{long long} type for @code{Lisp_Object}."
msgstr "Cではタグ付きポインターはタイプ@code{Lisp_Object}のオブジェクトです。そのようなタイプの初期化された変数は基本的なデータタイプである整数、シンボル、文字列、コンスセル、浮動小数点数、ベクター類似オブジェクトや、その他の雑多なオブジェクトのいずれかを値として常に保持します。これらのデータタイプのそれぞれは対応するタグ値をもちます。すべてのタグは@code{enum Lisp_Type}により列挙されており、@code{Lisp_Object}の3ビットのビットフィールドに配置されます。残りのビットはそれ自身の値です。整数は即値(@dfn{値ビット}で直接表される)、他のすべてのオブジェクトはヒープに割り当てられた対応するオブジェクトへのCポインターで表されます。@code{Lisp_Object}のサイズはプラットフォームと設定に依存します。これは通常は背景プラットフォームのポインターと同一(32ビットマシンなら32ビット、64ビットマシンなら64ビット)ですが@code{Lisp_Object}が64ビットでも、すべてのポインターが32ビットのような特別な構成もあります。後者は@code{Lisp_Object}にたいして64ビットの@code{long long}タイプを使用することにより、32ビットシステム上のLisp整数にたいする値範囲の制限を乗り越えるためにデザインされたトリックです。"

#. type: Plain text
#: original_texis/internals.texi:1718
msgid "The following C data structures are defined in @file{lisp.h} to represent the basic data types beyond integers:"
msgstr "以下のCデータ構造体は整数ではない基本的なデータタイプを表すために@file{lisp.h}で定義されています:"

#. type: item
#: original_texis/internals.texi:1720
#, no-wrap
msgid "struct Lisp_Cons"
msgstr "struct Lisp_Cons"

#. type: table
#: original_texis/internals.texi:1722
msgid "Cons cell, an object used to construct lists."
msgstr "コンスセル。リストを構築するために使用されるオブジェクト。"

#. type: item
#: original_texis/internals.texi:1723
#, no-wrap
msgid "struct Lisp_String"
msgstr "struct Lisp_String"

#. type: table
#: original_texis/internals.texi:1725
msgid "String, the basic object to represent a sequence of characters."
msgstr "文字列。文字シーケンスを表す基本的オブジェクト。"

#. type: item
#: original_texis/internals.texi:1726
#, no-wrap
msgid "struct Lisp_Vector"
msgstr "struct Lisp_Vector"

#. type: table
#: original_texis/internals.texi:1728
msgid "Array, a fixed-size set of Lisp objects which may be accessed by an index."
msgstr "配列。インデックスによりアクセスできる固定サイズのLispオブジェクトのセット。"

#. type: item
#: original_texis/internals.texi:1729
#, no-wrap
msgid "struct Lisp_Symbol"
msgstr "struct Lisp_Symbol"

#. type: table
#: original_texis/internals.texi:1731
msgid "Symbol, the unique-named entity commonly used as an identifier."
msgstr "シンボル。一般的に識別子として使用される一意な名前のエンティティ。"

#. type: item
#: original_texis/internals.texi:1732
#, no-wrap
msgid "struct Lisp_Float"
msgstr "struct Lisp_Float"

#. type: table
#: original_texis/internals.texi:1734
msgid "Floating-point value."
msgstr "Floating-point value."

#. type: item
#: original_texis/internals.texi:1735
#, no-wrap
msgid "union Lisp_Misc"
msgstr "union Lisp_Misc"

#. type: table
#: original_texis/internals.texi:1737
msgid "Miscellaneous kinds of objects which don't fit into any of the above."
msgstr "上記のいずれにも適合しない雑多な種類のオブジェクト。"

#. type: Plain text
#: original_texis/internals.texi:1746
msgid "These types are the first-class citizens of an internal type system.  Since the tag space is limited, all other types are the subtypes of either @code{Lisp_Vectorlike} or @code{Lisp_Misc}.  Vector subtypes are enumerated by @code{enum pvec_type}, and nearly all complex objects like windows, buffers, frames, and processes fall into this category.  The rest of special types, including markers and overlays, are enumerated by @code{enum Lisp_Misc_Type} and form the set of subtypes of @code{Lisp_Misc}."
msgstr "これらのタイプは内部的タイプシステムのファーストクラスの市民です。タグスペースは限られているので他のすべてのタイプは@code{Lisp_Vectorlike}か@code{Lisp_Misc}のサブクラスです。サブタイプのベクターは@code{enum pvec_type}により列挙されておりウィンドウ、バッファー、フレーム、プロセスのようなほとんどすべての複雑なオブジェクトはこのカテゴリーに分類されます。マーカーとオーバーレイを含む残りのスペシャルタイプは@code{enum Lisp_Misc_Type}により列挙されており、@code{Lisp_Misc}のサブタイプセットを形成します。"

#. type: Plain text
#: original_texis/internals.texi:1754
msgid "Below there is a description of a few subtypes of @code{Lisp_Vectorlike}.  Buffer object represents the text to display and edit.  Window is the part of display structure which shows the buffer or is used as a container to recursively place other windows on the same frame.  (Do not confuse Emacs Lisp window object with the window as an entity managed by the user interface system like X; in Emacs terminology, the latter is called frame.)  Finally, process object is used to manage the subprocesses."
msgstr "@code{Lisp_Vectorlike}のいくつかのサブタイプを説明します。バッファーオブジェクトは表示や編集を行うテキストを表します。ウィンドウはバッファーを表示したり、同一フレーム上で再帰的に他のウィンドウを配置するためのコンテナーとして使用される表示構造の一部です(Emacs Lispのウィンドウオブジェクトと、のようなユーザーインターフェースシステムに管理されるエンティティとしてのウィンドウを混同しないこと。Emacsの用語では後者はフレームと呼ばれる)。最後にプロセスオブジェクトはサブプロセスの管理に使用されます。"

#. type: subsection
#: original_texis/internals.texi:1759 original_texis/internals.texi:1761
#: original_texis/internals.texi:1762
#, no-wrap
msgid "Buffer Internals"
msgstr "Buffer Internals"

#. type: menuentry
#: original_texis/internals.texi:1759
msgid "Components of a buffer structure."
msgstr "バッファー構造体の構成子。"

#. type: subsection
#: original_texis/internals.texi:1759 original_texis/internals.texi:2039
#: original_texis/internals.texi:2040
#, no-wrap
msgid "Window Internals"
msgstr "Window Internals"

#. type: menuentry
#: original_texis/internals.texi:1759
msgid "Components of a window structure."
msgstr "ウィンドウ構造体の構成子。"

#. type: subsection
#: original_texis/internals.texi:1759 original_texis/internals.texi:2303
#: original_texis/internals.texi:2304
#, no-wrap
msgid "Process Internals"
msgstr "Process Internals"

#. type: menuentry
#: original_texis/internals.texi:1759
msgid "Components of a process structure."
msgstr "プロセス構造体の構成子。"

#. type: cindex
#: original_texis/internals.texi:1763
#, no-wrap
msgid "internals, of buffer"
msgstr "internals, of buffer"

#. type: cindex
#: original_texis/internals.texi:1764
#, no-wrap
msgid "buffer internals"
msgstr "buffer internals"

#. type: Plain text
#: original_texis/internals.texi:1771
msgid "Two structures (see @file{buffer.h}) are used to represent buffers in C@.  The @code{buffer_text} structure contains fields describing the text of a buffer; the @code{buffer} structure holds other fields.  In the case of indirect buffers, two or more @code{buffer} structures reference the same @code{buffer_text} structure."
msgstr "Cでバッファーを表すために2つの構造体(@file{buffer.h}を参照)が使用されます。@code{buffer_text}構造体にはバッファーのテキストを記述するフィールドが含まれます。@code{buffer}構造体は他のフィールドを保持します。インダイレクトバッファーの場合には、2つ以上の@code{buffer}構造体が同じ@code{buffer_text}構造体を参照します。"

#. type: Plain text
#: original_texis/internals.texi:1773
msgid "Here are some of the fields in @code{struct buffer_text}:"
msgstr "以下に@code{struct buffer_text}内のフィールドをいくつか示します:"

#. type: item
#: original_texis/internals.texi:1775
#, no-wrap
msgid "beg"
msgstr "beg"

#. type: table
#: original_texis/internals.texi:1778
msgid "The address of the buffer contents.  The buffer contents is a linear C array of @code{char}, with the gap somewhere in its midst."
msgstr "バッファーコンテンツのアドレス。バッファーコンテンツは途中にギャップをもつ@code{char}の線形C配列。"

#. type: item
#: original_texis/internals.texi:1779
#, no-wrap
msgid "gpt"
msgstr "gpt"

#. type: itemx
#: original_texis/internals.texi:1780
#, no-wrap
msgid "gpt_byte"
msgstr "gpt_byte"

#. type: table
#: original_texis/internals.texi:1783
msgid "The character and byte positions of the buffer gap.  @xref{Buffer Gap}."
msgstr "バッファーのギャップの文字位置とバイト位置。@ref{Buffer Gap}を参照のこと。"

#. type: item
#: original_texis/internals.texi:1784
#, no-wrap
msgid "z"
msgstr "z"

#. type: itemx
#: original_texis/internals.texi:1785
#, no-wrap
msgid "z_byte"
msgstr "z_byte"

#. type: table
#: original_texis/internals.texi:1787
msgid "The character and byte positions of the end of the buffer text."
msgstr "バッファーテキストの終端の文字位置とバイト位置。"

#. type: item
#: original_texis/internals.texi:1788
#, no-wrap
msgid "gap_size"
msgstr "gap_size"

#. type: table
#: original_texis/internals.texi:1790
msgid "The size of buffer's gap.  @xref{Buffer Gap}."
msgstr "バッファーのギャップのサイズ。@ref{Buffer Gap}を参照のこと。"

#. type: item
#: original_texis/internals.texi:1791
#, no-wrap
msgid "modiff"
msgstr "modiff"

#. type: itemx
#: original_texis/internals.texi:1792
#, no-wrap
msgid "save_modiff"
msgstr "save_modiff"

#. type: itemx
#: original_texis/internals.texi:1793
#, no-wrap
msgid "chars_modiff"
msgstr "chars_modiff"

#. type: itemx
#: original_texis/internals.texi:1794
#, no-wrap
msgid "overlay_modiff"
msgstr "overlay_modiff"

#. type: table
#: original_texis/internals.texi:1803
msgid "These fields count the number of buffer-modification events performed in this buffer.  @code{modiff} is incremented after each buffer-modification event, and is never otherwise changed; @code{save_modiff} contains the value of @code{modiff} the last time the buffer was visited or saved; @code{chars_modiff} counts only modifications to the characters in the buffer, ignoring all other kinds of changes (such as text properties); and @code{overlay_modiff} counts only modifications to the buffer's overlays."
msgstr "これらのフィールドは、そのバッファーで行われたバッファー変更イベントの数をカウントする。@code{modiff}はバッファー変更イベントのたびに増分されて、それ以外では決して変化しない。@code{save_modiff}にはバッファーが最後にvisitや保存されたときの@code{modiff}の値が含まれる。@code{chars_modiff}はバッファー内の文字にたいする変更だけをカウントして、(テキストプロパティのように)その他すべての種類の変更を無視する。@code{overlay_modiff}はバッファーのオーバーレイにたいする変更だけをカウントする。"

#. type: item
#: original_texis/internals.texi:1804
#, no-wrap
msgid "beg_unchanged"
msgstr "beg_unchanged"

#. type: itemx
#: original_texis/internals.texi:1805
#, no-wrap
msgid "end_unchanged"
msgstr "end_unchanged"

#. type: table
#: original_texis/internals.texi:1808
msgid "The number of characters at the start and end of the text that are known to be unchanged since the last complete redisplay."
msgstr "最後の再表示完了以降に未変更だと解っているテキスト、開始と終了の箇所での文字数。"

#. type: item
#: original_texis/internals.texi:1809
#, no-wrap
msgid "unchanged_modified"
msgstr "unchanged_modified"

#. type: itemx
#: original_texis/internals.texi:1810
#, no-wrap
msgid "overlay_unchanged_modified"
msgstr "overlay_unchanged_modified"

#. type: table
#: original_texis/internals.texi:1816
msgid "The values of @code{modiff} and @code{overlay_modiff}, respectively, after the last complete redisplay.  If their current values match @code{modiff} or @code{overlay_modiff}, that means @code{beg_unchanged} and @code{end_unchanged} contain no useful information."
msgstr "それぞれ最後に再表示が完了した後の@code{modiff}と@code{overlay_modiff}の値。これらのカレント値が@code{modiff}や@code{overlay_modiff}とマッチしたら、それは@code{beg_unchanged}と@code{end_unchanged}に有用な情報が含まれないことを意味する。"

#. type: item
#: original_texis/internals.texi:1817
#, no-wrap
msgid "markers"
msgstr "markers"

#. type: table
#: original_texis/internals.texi:1821
msgid "The markers that refer to this buffer.  This is actually a single marker, and successive elements in its marker @code{chain} are the other markers referring to this buffer text."
msgstr "このバッファーを参照するマーカー。これは実際には単一のマーカーであり、自身のマーカー``チェーン''内の一連の要素がバッファー内のテキストを参照する他のマーカーになる。"

#. type: item
#: original_texis/internals.texi:1822
#, no-wrap
msgid "intervals"
msgstr "intervals"

#. type: table
#: original_texis/internals.texi:1824
msgid "The interval tree which records the text properties of this buffer."
msgstr "そのバッファーのテキストプロパティを記録するインターバルツリー。"

#. type: Plain text
#: original_texis/internals.texi:1827
msgid "Some of the fields of @code{struct buffer} are:"
msgstr "@code{struct buffer}のいくつかのフィールドを以下に示します:"

#. type: item
#: original_texis/internals.texi:1829
#, no-wrap
msgid "header"
msgstr "header"

#. type: table
#: original_texis/internals.texi:1832
msgid "A header of type @code{union vectorlike_header} is common to all vectorlike objects."
msgstr "タイプ@code{union vectorlike_header}のヘッダーは、すべてのベクター類似のオブジェクトに共通。"

#. type: item
#: original_texis/internals.texi:1833
#, no-wrap
msgid "own_text"
msgstr "own_text"

#. type: table
#: original_texis/internals.texi:1836
msgid "A @code{struct buffer_text} structure that ordinarily holds the buffer contents.  In indirect buffers, this field is not used."
msgstr "構造体@code{struct buffer_text}は通常はバッファーのコンテンツを保持する。このフィールドはインダイレクトバッファーでは使用されない。"

#. type: item
#: original_texis/internals.texi:1837
#, no-wrap
msgid "text"
msgstr "text"

#. type: table
#: original_texis/internals.texi:1841
msgid "A pointer to the @code{buffer_text} structure for this buffer.  In an ordinary buffer, this is the @code{own_text} field above.  In an indirect buffer, this is the @code{own_text} field of the base buffer."
msgstr "そのバッファーの@code{buffer_text}構造体へのポインター。通常のバッファーでは上述の@code{own_text}フィールド。インダイレクトバッファーではベースバッファーの@code{own_text}フィールド。"

#. type: item
#: original_texis/internals.texi:1842 original_texis/internals.texi:2082
#, no-wrap
msgid "next"
msgstr "next"

#. type: table
#: original_texis/internals.texi:1846
msgid "A pointer to the next buffer, in the chain of all buffers, including killed buffers.  This chain is used only for allocation and garbage collection, in order to collect killed buffers properly."
msgstr "killされたバッファーを含むすべてのバッファーのチェーン内において次のバッファーへのポインター。このチェーンはkillされたバッファーを正しく回収するために割り当てとガーベージコレクションのためだけに使用される。"

#. type: item
#: original_texis/internals.texi:1847
#, no-wrap
msgid "pt"
msgstr "pt"

#. type: itemx
#: original_texis/internals.texi:1848
#, no-wrap
msgid "pt_byte"
msgstr "pt_byte"

#. type: table
#: original_texis/internals.texi:1850
msgid "The character and byte positions of point in a buffer."
msgstr "バッファー内のポイントの文字位置とバイト位置。"

#. type: item
#: original_texis/internals.texi:1851
#, no-wrap
msgid "begv"
msgstr "begv"

#. type: itemx
#: original_texis/internals.texi:1852
#, no-wrap
msgid "begv_byte"
msgstr "begv_byte"

#. type: table
#: original_texis/internals.texi:1855
msgid "The character and byte positions of the beginning of the accessible range of text in the buffer."
msgstr "そのバッファー内のアクセス可能範囲の先頭位置の文字位置とバイト位置。"

#. type: item
#: original_texis/internals.texi:1856
#, no-wrap
msgid "zv"
msgstr "zv"

#. type: itemx
#: original_texis/internals.texi:1857
#, no-wrap
msgid "zv_byte"
msgstr "zv_byte"

#. type: table
#: original_texis/internals.texi:1860
msgid "The character and byte positions of the end of the accessible range of text in the buffer."
msgstr "そのバッファー内のアクセス可能範囲の終端位置の文字位置とバイト位置。"

#. type: item
#: original_texis/internals.texi:1861
#, no-wrap
msgid "base_buffer"
msgstr "base_buffer"

#. type: table
#: original_texis/internals.texi:1864
msgid "In an indirect buffer, this points to the base buffer.  In an ordinary buffer, it is null."
msgstr "インダイレクトバッファーではベースバッファーのポイント。通常のバッファーではnull。"

#. type: item
#: original_texis/internals.texi:1865
#, no-wrap
msgid "local_flags"
msgstr "local_flags"

#. type: table
#: original_texis/internals.texi:1871
msgid "This field contains flags indicating that certain variables are local in this buffer.  Such variables are declared in the C code using @code{DEFVAR_PER_BUFFER}, and their buffer-local bindings are stored in fields in the buffer structure itself.  (Some of these fields are described in this table.)"
msgstr "このフィールドはバッファー内でローカルな変数にたいしてそれを示すフラグを含む。そのような変数はCコードでは@code{DEFVAR_PER_BUFFER}を使用して宣言され、それらのバッファーローカルなバインディングはバッファー構造体自身内のフィールドに格納される(これらのフィールドのいくつかはこのテーブル内で説明している)。"

#. type: item
#: original_texis/internals.texi:1872
#, no-wrap
msgid "modtime"
msgstr "modtime"

#. type: table
#: original_texis/internals.texi:1877
msgid "The modification time of the visited file.  It is set when the file is written or read.  Before writing the buffer into a file, this field is compared to the modification time of the file to see if the file has changed on disk.  @xref{Buffer Modification}."
msgstr "visitされているファイルの変更時刻。これはファイルの書き込みと読み込み時にセットされる。そのバッファーをファイルに書き込む前にファイルがディスク上で変更されていないことを確認するために、このフィールドとそのファイルの変更時刻を比較する。@ref{Buffer Modification}を参照のこと。"

#. type: item
#: original_texis/internals.texi:1878
#, no-wrap
msgid "auto_save_modified"
msgstr "auto_save_modified"

#. type: table
#: original_texis/internals.texi:1880
msgid "The time when the buffer was last auto-saved."
msgstr "そのバッファーが最後に自動保存されたときの時刻。"

#. type: item
#: original_texis/internals.texi:1881
#, no-wrap
msgid "last_window_start"
msgstr "last_window_start"

#. type: table
#: original_texis/internals.texi:1884
msgid "The @code{window-start} position in the buffer as of the last time the buffer was displayed in a window."
msgstr "そのバッファーが最後にウィンドウに表示されたときのバッファー内での@code{window-start}位置。"

#. type: item
#: original_texis/internals.texi:1885
#, no-wrap
msgid "clip_changed"
msgstr "clip_changed"

#. type: table
#: original_texis/internals.texi:1888
msgid "This flag indicates that narrowing has changed in the buffer.  @xref{Narrowing}."
msgstr "このフラグはバッファーでのナローイングが変更されているかを示す。@ref{Narrowing}を参照のこと。"

#. type: item
#: original_texis/internals.texi:1889
#, no-wrap
msgid "prevent_redisplay_optimizations_p"
msgstr "prevent_redisplay_optimizations_p"

#. type: table
#: original_texis/internals.texi:1892
msgid "This flag indicates that redisplay optimizations should not be used to display this buffer."
msgstr "このフラグはバッファーの表示において再表示最適化が使用されるべきではないことを示す。"

#. type: item
#: original_texis/internals.texi:1893
#, no-wrap
msgid "overlay_center"
msgstr "overlay_center"

#. type: table
#: original_texis/internals.texi:1896
msgid "This field holds the current overlay center position.  @xref{Managing Overlays}."
msgstr "このフィールドはカレントオーバーレイの中心位置を保持する。@ref{Managing Overlays}を参照のこと。"

#. type: item
#: original_texis/internals.texi:1897
#, no-wrap
msgid "overlays_before"
msgstr "overlays_before"

#. type: itemx
#: original_texis/internals.texi:1898
#, no-wrap
msgid "overlays_after"
msgstr "overlays_after"

#. type: table
#: original_texis/internals.texi:1905
msgid "These fields hold, respectively, a list of overlays that end at or before the current overlay center, and a list of overlays that end after the current overlay center.  @xref{Managing Overlays}.  @code{overlays_before} is sorted in order of decreasing end position, and @code{overlays_after} is sorted in order of increasing beginning position."
msgstr "これらのフィールドはカレントオーバーレイ中心、またはその前で終わるオーバーレイのリスト、およびカレントオーバーレイの後で終わるオーバーレイのリスト。@ref{Managing Overlays}を参照のこと。@code{overlays_before}は終端位置の記述順、@code{overlays_after}は先頭位置増加順で格納される。"

#. type: item
#: original_texis/internals.texi:1908 original_texis/internals.texi:2312
#, no-wrap
msgid "name"
msgstr "name"

#. type: table
#: original_texis/internals.texi:1914
msgid "A Lisp string that names the buffer.  It is guaranteed to be unique.  @xref{Buffer Names}.  This and the following fields have their names in the C struct definition end in a @code{_} to indicate that they should not be accessed directly, but via the @code{BVAR} macro, like this:"
msgstr "バッファーを命名するLisp文字列。一意であることが保証されている。@ref{Buffer Names}を参照のこと。このフィールドと以降のフィールドは以下のように@code{BVAR}を介するアクセス以外の方法で直接アクセスするべきではないことを示すためにC構造体定義内の名前の最後に@code{_}をもつ:"

#. type: example
#: original_texis/internals.texi:1917
#, no-wrap
msgid "  Lisp_Object buf_name = BVAR (buffer, name);\n"
msgstr "  Lisp_Object buf_name = BVAR (buffer, name);\n"

#. type: item
#: original_texis/internals.texi:1919
#, no-wrap
msgid "save_length"
msgstr "save_length"

#. type: table
#: original_texis/internals.texi:1926
msgid "The length of the file this buffer is visiting, when last read or saved.  It can have 2 special values: @minus{}1 means auto-saving was turned off in this buffer, and @minus{}2 means don't turn off auto-saving if buffer text shrinks a lot.  This and other fields concerned with saving are not kept in the @code{buffer_text} structure because indirect buffers are never saved."
msgstr "そのバッファーがvisitしているファイルを最後に読み込み、または保存したときの長さ。2つの特別な値をもつことができる。@minus{}1はそのバッファーで自動保存がオフであること、@minus{}2はバッファーのテキストが大量に減少するようなら自動保存をオフに切り替えないことを意味する。インダイレクトバッファーは決して保存されることはないので、保存に関して、このフィールドとその他のフィールドは@code{buffer_text}構造体で維持されない"

#. type: item
#: original_texis/internals.texi:1927
#, no-wrap
msgid "directory"
msgstr "directory"

#. type: table
#: original_texis/internals.texi:1930
msgid "The directory for expanding relative file names.  This is the value of the buffer-local variable @code{default-directory} (@pxref{File Name Expansion})."
msgstr "相対ファイル名を展開するディレクトリー。これはバッファーローカル変数@code{default-directory}の値(@ref{File Name Expansion}を参照)。"

#. type: item
#: original_texis/internals.texi:1931
#, no-wrap
msgid "filename"
msgstr "filename"

#. type: table
#: original_texis/internals.texi:1935
msgid "The name of the file visited in this buffer, or @code{nil}.  This is the value of the buffer-local variable @code{buffer-file-name} (@pxref{Buffer File Name})."
msgstr "そのバッファーがvisitしているファイルの名前。これはバッファーローカル変数@code{buffer-file-name}の値(@ref{Buffer File Name}を参照)。"

#. type: item
#: original_texis/internals.texi:1936
#, no-wrap
msgid "undo_list"
msgstr "undo_list"

#. type: itemx
#: original_texis/internals.texi:1937
#, no-wrap
msgid "backed_up"
msgstr "backed_up"

#. type: itemx
#: original_texis/internals.texi:1938
#, no-wrap
msgid "auto_save_file_name"
msgstr "auto_save_file_name"

#. type: itemx
#: original_texis/internals.texi:1939
#, no-wrap
msgid "auto_save_file_format"
msgstr "auto_save_file_format"

#. type: itemx
#: original_texis/internals.texi:1940
#, no-wrap
msgid "read_only"
msgstr "read_only"

#. type: itemx
#: original_texis/internals.texi:1941
#, no-wrap
msgid "file_format"
msgstr "file_format"

#. type: itemx
#: original_texis/internals.texi:1942
#, no-wrap
msgid "file_truename"
msgstr "file_truename"

#. type: itemx
#: original_texis/internals.texi:1943
#, no-wrap
msgid "invisibility_spec"
msgstr "invisibility_spec"

#. type: itemx
#: original_texis/internals.texi:1944
#, no-wrap
msgid "display_count"
msgstr "display_count"

#. type: itemx
#: original_texis/internals.texi:1945
#, no-wrap
msgid "display_time"
msgstr "display_time"

#. type: table
#: original_texis/internals.texi:1951
msgid "These fields store the values of Lisp variables that are automatically buffer-local (@pxref{Buffer-Local Variables}), whose corresponding variable names have the additional prefix @code{buffer-} and have underscores replaced with dashes.  For instance, @code{undo_list} stores the value of @code{buffer-undo-list}."
msgstr "これらのフィールドは自動的にバッファーローカル(@ref{Buffer-Local Variables}を参照)になるLisp変数の値を格納する。これらに対応する変数は名前に追加のプレフィクス@code{buffer-}がつき、アンダースコアがダッシュで置換される。たとえば@code{undo_list}は@code{buffer-undo-list}の値を格納する。"

#. type: item
#: original_texis/internals.texi:1952 original_texis/internals.texi:2338
#, no-wrap
msgid "mark"
msgstr "mark"

#. type: table
#: original_texis/internals.texi:1955
msgid "The mark for the buffer.  The mark is a marker, hence it is also included on the list @code{markers}.  @xref{The Mark}."
msgstr "そのバッファーにたいするマーク。マークはマーカーなのでリスト@code{markers}内にも含まれる。@ref{The Mark}を参照のこと。"

#. type: item
#: original_texis/internals.texi:1956
#, no-wrap
msgid "local_var_alist"
msgstr "local_var_alist"

#. type: table
#: original_texis/internals.texi:1961
msgid "The association list describing the buffer-local variable bindings of this buffer, not including the built-in buffer-local bindings that have special slots in the buffer object.  (Those slots are omitted from this table.)  @xref{Buffer-Local Variables}."
msgstr "この連想リストはバッファーのバッファーローカル変数のバインディングを記述する。これにはバッファーオブジェクト内に特別なスロットをもつ、ビルトインのバッファーローカルなバインディングは含まれない(このテーブルではそれらのスロットは省略している)。@ref{Buffer-Local Variables}を参照のこと。"

#. type: item
#: original_texis/internals.texi:1962
#, no-wrap
msgid "major_mode"
msgstr "major_mode"

#. type: table
#: original_texis/internals.texi:1964
msgid "Symbol naming the major mode of this buffer, e.g., @code{lisp-mode}."
msgstr "そのバッファーのメジャーモードを命名するシンボル(例: @code{lisp-mode})。"

#. type: item
#: original_texis/internals.texi:1965
#, no-wrap
msgid "mode_name"
msgstr "mode_name"

#. type: table
#: original_texis/internals.texi:1967
msgid "Pretty name of the major mode, e.g., @code{\"Lisp\"}."
msgstr "そのメジャーモードの愛称(例: @code{\"Lisp\"})。"

#. type: item
#: original_texis/internals.texi:1968
#, no-wrap
msgid "keymap"
msgstr "keymap"

#. type: itemx
#: original_texis/internals.texi:1969
#, no-wrap
msgid "abbrev_table"
msgstr "abbrev_table"

#. type: itemx
#: original_texis/internals.texi:1970
#, no-wrap
msgid "syntax_table"
msgstr "syntax_table"

#. type: itemx
#: original_texis/internals.texi:1971
#, no-wrap
msgid "category_table"
msgstr "category_table"

#. type: item
#: original_texis/internals.texi:1972 original_texis/internals.texi:2274
#, no-wrap
msgid "display_table"
msgstr "display_table"

#. type: table
#: original_texis/internals.texi:1977
msgid "These fields store the buffer's local keymap (@pxref{Keymaps}), abbrev table (@pxref{Abbrev Tables}), syntax table (@pxref{Syntax Tables}), category table (@pxref{Categories}), and display table (@pxref{Display Tables})."
msgstr "これらのフィールドはバッファーのローカルキーマップ(@ref{Keymaps}を参照)、abbrevテーブル(@ref{Abbrev Tables}を参照)、構文テーブル(@ref{Syntax Tables}を参照)、カテゴリーテーブル(@ref{Categories}を参照)、ディスプレーテーブル(@ref{Display Tables}を参照)を格納する。"

#. type: item
#: original_texis/internals.texi:1978
#, no-wrap
msgid "downcase_table"
msgstr "downcase_table"

#. type: itemx
#: original_texis/internals.texi:1979
#, no-wrap
msgid "upcase_table"
msgstr "upcase_table"

#. type: itemx
#: original_texis/internals.texi:1980
#, no-wrap
msgid "case_canon_table"
msgstr "case_canon_table"

#. type: table
#: original_texis/internals.texi:1984
msgid "These fields store the conversion tables for converting text to lower case, upper case, and for canonicalizing text for case-fold search.  @xref{Case Tables}."
msgstr "これらのフィールドはテキストを小文字、大文字、およびcase-fold検索でのテキストの正規化の変換テーブルを格納する。@ref{Case Tables}を参照のこと。"

#. type: item
#: original_texis/internals.texi:1985
#, no-wrap
msgid "minor_modes"
msgstr "minor_modes"

#. type: table
#: original_texis/internals.texi:1987
msgid "An alist of the minor modes of this buffer."
msgstr "そのバッファーのマイナーモードのalist。"

#. type: item
#: original_texis/internals.texi:1988
#, no-wrap
msgid "pt_marker"
msgstr "pt_marker"

#. type: itemx
#: original_texis/internals.texi:1989
#, no-wrap
msgid "begv_marker"
msgstr "begv_marker"

#. type: itemx
#: original_texis/internals.texi:1990
#, no-wrap
msgid "zv_marker"
msgstr "zv_marker"

#. type: table
#: original_texis/internals.texi:1995
msgid "These fields are only used in an indirect buffer, or in a buffer that is the base of an indirect buffer.  Each holds a marker that records @code{pt}, @code{begv}, and @code{zv} respectively, for this buffer when the buffer is not current."
msgstr "これらのフィールドはインダイレクトバッファー、またはインダイレクトバッファーのベースバッファーであるようなバッファーでのみ使用される。これらはそれぞれバッファーがカレントでないときにバッファーにたいする@code{pt}、@code{begv}、@code{zv}を記録するマーカーを保持する。"

#. type: item
#: original_texis/internals.texi:1996
#, no-wrap
msgid "mode_line_format"
msgstr "mode_line_format"

#. type: itemx
#: original_texis/internals.texi:1997
#, no-wrap
msgid "header_line_format"
msgstr "header_line_format"

#. type: itemx
#: original_texis/internals.texi:1998
#, no-wrap
msgid "case_fold_search"
msgstr "case_fold_search"

#. type: itemx
#: original_texis/internals.texi:1999
#, no-wrap
msgid "tab_width"
msgstr "tab_width"

#. type: itemx
#: original_texis/internals.texi:2000
#, no-wrap
msgid "fill_column"
msgstr "fill_column"

#. type: itemx
#: original_texis/internals.texi:2001
#, no-wrap
msgid "left_margin"
msgstr "left_margin"

#. type: itemx
#: original_texis/internals.texi:2002
#, no-wrap
msgid "auto_fill_function"
msgstr "auto_fill_function"

#. type: itemx
#: original_texis/internals.texi:2003
#, no-wrap
msgid "truncate_lines"
msgstr "truncate_lines"

#. type: itemx
#: original_texis/internals.texi:2004
#, no-wrap
msgid "word_wrap"
msgstr "word_wrap"

#. type: itemx
#: original_texis/internals.texi:2005
#, no-wrap
msgid "ctl_arrow"
msgstr "ctl_arrow"

#. type: itemx
#: original_texis/internals.texi:2006
#, no-wrap
msgid "bidi_display_reordering"
msgstr "bidi_display_reordering"

#. type: itemx
#: original_texis/internals.texi:2007
#, no-wrap
msgid "bidi_paragraph_direction"
msgstr "bidi_paragraph_direction"

#. type: itemx
#: original_texis/internals.texi:2008
#, no-wrap
msgid "selective_display"
msgstr "selective_display"

#. type: itemx
#: original_texis/internals.texi:2009
#, no-wrap
msgid "selective_display_ellipses"
msgstr "selective_display_ellipses"

#. type: itemx
#: original_texis/internals.texi:2010
#, no-wrap
msgid "overwrite_mode"
msgstr "overwrite_mode"

#. type: itemx
#: original_texis/internals.texi:2011
#, no-wrap
msgid "abbrev_mode"
msgstr "abbrev_mode"

#. type: itemx
#: original_texis/internals.texi:2012
#, no-wrap
msgid "mark_active"
msgstr "mark_active"

#. type: itemx
#: original_texis/internals.texi:2013
#, no-wrap
msgid "enable_multibyte_characters"
msgstr "enable_multibyte_characters"

#. type: itemx
#: original_texis/internals.texi:2014
#, no-wrap
msgid "buffer_file_coding_system"
msgstr "buffer_file_coding_system"

#. type: itemx
#: original_texis/internals.texi:2015
#, no-wrap
msgid "cache_long_line_scans"
msgstr "cache_long_line_scans"

#. type: itemx
#: original_texis/internals.texi:2016
#, no-wrap
msgid "point_before_scroll"
msgstr "point_before_scroll"

#. type: item
#: original_texis/internals.texi:2017 original_texis/internals.texi:2189
#, no-wrap
msgid "left_fringe_width"
msgstr "left_fringe_width"

#. type: itemx
#: original_texis/internals.texi:2018 original_texis/internals.texi:2190
#, no-wrap
msgid "right_fringe_width"
msgstr "right_fringe_width"

#. type: item
#: original_texis/internals.texi:2019 original_texis/internals.texi:2194
#, no-wrap
msgid "fringes_outside_margins"
msgstr "fringes_outside_margins"

#. type: item
#: original_texis/internals.texi:2020 original_texis/internals.texi:2179
#, no-wrap
msgid "scroll_bar_width"
msgstr "scroll_bar_width"

#. type: itemx
#: original_texis/internals.texi:2021
#, no-wrap
msgid "indicate_empty_lines"
msgstr "indicate_empty_lines"

#. type: itemx
#: original_texis/internals.texi:2022
#, no-wrap
msgid "indicate_buffer_boundaries"
msgstr "indicate_buffer_boundaries"

#. type: itemx
#: original_texis/internals.texi:2023
#, no-wrap
msgid "fringe_indicator_alist"
msgstr "fringe_indicator_alist"

#. type: itemx
#: original_texis/internals.texi:2024
#, no-wrap
msgid "fringe_cursor_alist"
msgstr "fringe_cursor_alist"

#. type: itemx
#: original_texis/internals.texi:2025
#, no-wrap
msgid "scroll_up_aggressively"
msgstr "scroll_up_aggressively"

#. type: itemx
#: original_texis/internals.texi:2026
#, no-wrap
msgid "scroll_down_aggressively"
msgstr "scroll_down_aggressively"

#. type: itemx
#: original_texis/internals.texi:2027
#, no-wrap
msgid "cursor_type"
msgstr "cursor_type"

#. type: itemx
#: original_texis/internals.texi:2028
#, no-wrap
msgid "cursor_in_non_selected_windows"
msgstr "cursor_in_non_selected_windows"

#. type: table
#: original_texis/internals.texi:2033
msgid "These fields store the values of Lisp variables that are automatically buffer-local (@pxref{Buffer-Local Variables}), whose corresponding variable names have underscores replaced with dashes.  For instance, @code{mode_line_format} stores the value of @code{mode-line-format}."
msgstr "これらのフィールドは自動的にバッファーローカル(@ref{Buffer-Local Variables}を参照)になるLisp変数の値を格納する。これらに対応する変数は名前のアンダースコアがダッシュで置換される。たとえば@code{mode_line_format}は@code{mode-line-format}の値を格納する。"

#. type: item
#: original_texis/internals.texi:2034
#, no-wrap
msgid "last_selected_window"
msgstr "last_selected_window"

#. type: table
#: original_texis/internals.texi:2037
msgid "This is the last window that was selected with this buffer in it, or @code{nil} if that window no longer displays this buffer."
msgstr "これは最後に選択されていたときにそのバッファーを表示していたウィンドウ、またはそのウィンドウがすでにそのバッファーを表示していなければ@code{nil}。"

#. type: cindex
#: original_texis/internals.texi:2041
#, no-wrap
msgid "internals, of window"
msgstr "internals, of window"

#. type: cindex
#: original_texis/internals.texi:2042
#, no-wrap
msgid "window internals"
msgstr "window internals"

#. type: Plain text
#: original_texis/internals.texi:2046
msgid "The fields of a window (for a complete list, see the definition of @code{struct window} in @file{window.h}) include:"
msgstr "ウィンドウのフィールドには以下が含まれます(完全なリストは@file{window.h}の@code{struct window}を参照):"

#. type: item
#: original_texis/internals.texi:2048
#, no-wrap
msgid "frame"
msgstr "frame"

#. type: table
#: original_texis/internals.texi:2050
msgid "The frame that this window is on, as a Lisp object."
msgstr "そのウィンドウがあるフレーム(Lispオブジェクト)。"

#. type: item
#: original_texis/internals.texi:2051
#, no-wrap
msgid "mini"
msgstr "mini"

#. type: table
#: original_texis/internals.texi:2054
msgid "Non-zero if this window is a minibuffer window, a window showing the minibuffer or the echo area."
msgstr "そのウィンドウがミニバッファーウィンドウ、ミニバッファーかエコーエリアを表示しているウィンドウなら非0。"

#. type: item
#: original_texis/internals.texi:2055
#, no-wrap
msgid "pseudo_window_p"
msgstr "pseudo_window_p"

#. type: cindex
#: original_texis/internals.texi:2056
#, no-wrap
msgid "pseudo window"
msgstr "pseudo window"

#. type: table
#: original_texis/internals.texi:2062
msgid "Non-zero if this window is a @dfn{pseudo window}.  A pseudo window is either a window used to display the menu bar or the tool bar (when Emacs uses toolkits that don't display their own menu bar and tool bar) or a window showing a tooltip on a tooltip frame.  Pseudo windows are in general not accessible from Lisp code."
msgstr "そのウィンドウが@dfn{疑似ウィンドウ(pseudo window)}なら非0。疑似ウィンドウとはメニューバーかツールバーの表示に使用されているウィンドウ(自身のメニューバーうあツールバーを表示しないツールキットをEmacsが使用している場合)、またはツールチップフレーム上でツールチップを表示しているウィンドウのいずれか。一般的には疑似ウィンドウはLispコードからアクセスできない。"

#. type: item
#: original_texis/internals.texi:2063
#, no-wrap
msgid "parent"
msgstr "parent"

#. type: table
#: original_texis/internals.texi:2069
msgid "Internally, Emacs arranges windows in a tree; each group of siblings has a parent window whose area includes all the siblings.  This field points to the window's parent in that tree, as a Lisp object.  For the root window of the tree and a minibuffer window this is always @code{nil}."
msgstr "Emacsは内部的にウィンドウをツリーにアレンジする。ウィンドウの兄弟グループは、そのエリアがすべての兄弟を含むような親ウィンドウをもつ。このフィールドはツリー内でのウィンドウの親をLispオブジェクトとして指す。これはツリーのルートウィンドウとミニバッファーウィンドウでは常に@code{nil}。"

#. type: table
#: original_texis/internals.texi:2074
msgid "Parent windows do not display buffers, and play little role in display except to shape their child windows.  Emacs Lisp programs cannot directly manipulate parent windows; they operate on the windows at the leaves of the tree, which actually display buffers."
msgstr "親ウィンドウはバッファーを表示せず、子ウィンドウ形成を除いて表示では少ししか役割を果たさない。Emacs Lispプログラムは親ウィンドウを直接操作できない。Emacs Lispプログラムでは実際にバッファーを表示するツリーの子ノードのウィンドウにたいして操作を行う。"

#. type: item
#: original_texis/internals.texi:2075
#, no-wrap
msgid "contents"
msgstr "contents"

#. type: table
#: original_texis/internals.texi:2081
msgid "For a leaf window and windows showing a tooltip, this is the buffer, as a Lisp object, that the window is displaying.  For an internal (``parent'') window, this is its first child window.  For a pseudo window showing a menu or tool bar this is @code{nil}.  It is also @code{nil} for a window that has been deleted."
msgstr "リーフウィンドウ(leaf window)およびツールチップを表示中のウィンドウでは、そのウィンドウが表示しているLispオブジェクトとしてのバッファー、内部ウィンドウ(``親''ウィンドウ)では最初の子ウィンドウ、メニューバーやツールバーを表示している疑似ウィンドウでは@code{nil}、削除されたウィンドウでも@code{nil}。"

#. type: itemx
#: original_texis/internals.texi:2083
#, no-wrap
msgid "prev"
msgstr "prev"

#. type: table
#: original_texis/internals.texi:2091
msgid "The next and previous sibling of this window as Lisp objects.  @code{next} is @code{nil} if the window is the right-most or bottom-most in its group; @code{prev} is @code{nil} if it is the left-most or top-most in its group.  Whether the sibling is left/right or up/down is determined by the @code{horizontal} field of the sibling's parent: if it's non-zero, the siblings are arranged horizontally."
msgstr "そのウィンドウの次の兄弟と前の兄弟(Lispオブジェクト)。自身のグループ内でそのウィンドウが右端か下端なら@code{next}は@code{nil}。自身のグループ内でそのウィンドウが左端か上端なら@code{prev}は@code{nil}。兄弟が左右あるいは上下であるかは兄弟の親の@code{horizontal}フィールドで判断される。これが非0なら兄弟は水平に配置されている。"

#. type: table
#: original_texis/internals.texi:2098
msgid "As a special case, @code{next} of a frame's root window points to the frame's minibuffer window, provided this is not a minibuffer-only or minibuffer-less frame.  On such frames @code{prev} of the minibuffer window points to that frame's root window.  In any other case, the root window's @code{next} and the minibuffer window's (if present)  @code{prev} fields are @code{nil}."
msgstr "特別なケースとしてミニバッファーのみのフレームやミニバッファーなしのフレームでなければ、フレームのルートウィンドウの@code{next}は、そのフレームのミニバッファーウィンドウを指す。そのようなフレームのミニバッファーウィンドウの@code{prev}は、そのフレームのルートウィンドウを指す。それ以外の場合にはルートウィンドウの@code{next}フィールド、および(もしあれば)ミニバッファーの@code{prev}フィールドは@code{nil}。"

#. type: item
#: original_texis/internals.texi:2099
#, no-wrap
msgid "left_col"
msgstr "left_col"

#. type: table
#: original_texis/internals.texi:2102
msgid "The left-hand edge of the window, measured in columns, relative to the leftmost column (column 0) of the window's native frame."
msgstr "そのウィンドウの左端をウィンドウのネイティブフレームの最左列(列0)から相対的に数えた列数。"

#. type: item
#: original_texis/internals.texi:2103
#, no-wrap
msgid "top_line"
msgstr "top_line"

#. type: table
#: original_texis/internals.texi:2106
msgid "The top edge of the window, measured in lines, relative to the topmost line (line 0) of the window's native frame."
msgstr "そのウィンドウの上端をウィンドウのネイティブフレームの最上行(行0)から相対的に数えた行数。"

#. type: item
#: original_texis/internals.texi:2107
#, no-wrap
msgid "pixel_left"
msgstr "pixel_left"

#. type: itemx
#: original_texis/internals.texi:2108
#, no-wrap
msgid "pixel_top"
msgstr "pixel_top"

#. type: table
#: original_texis/internals.texi:2111
msgid "The left-hand and top edges of this window, measured in pixels, relative to the top-left corner (0, 0) of the window's native frame."
msgstr "そのウィンドウの左側上端をウィンドウのネイティブフレームの左上隅(0, 0)から相対的に計測したピクセル数。"

#. type: item
#: original_texis/internals.texi:2112
#, no-wrap
msgid "total_cols"
msgstr "total_cols"

#. type: itemx
#: original_texis/internals.texi:2113
#, no-wrap
msgid "total_lines"
msgstr "total_lines"

#. type: table
#: original_texis/internals.texi:2118
msgid "The total width and height of the window, measured in columns and lines respectively.  The values include scroll bars and fringes, dividers and/or the separator line on the right of the window (if any)."
msgstr "列数または行数で数えた、そのウィンドウの幅または高さの合計。値にはスクロールバーとフリンジ、ディバイダー、および/または(もしあれば)ウィンドウ右側のセパレーターラインが含まれる。"

#. type: item
#: original_texis/internals.texi:2119
#, no-wrap
msgid "pixel_width;"
msgstr "pixel_width;"

#. type: itemx
#: original_texis/internals.texi:2120
#, no-wrap
msgid "pixel_height;"
msgstr "pixel_height;"

#. type: table
#: original_texis/internals.texi:2122
msgid "The total width and height of the window measured in pixels."
msgstr "ピクセルで計測したウィンドウの幅または高さの合計。"

#. type: item
#: original_texis/internals.texi:2123
#, no-wrap
msgid "start"
msgstr "start"

#. type: table
#: original_texis/internals.texi:2127
msgid "A marker pointing to the position in the buffer that is the first character (in the logical order, @pxref{Bidirectional Display})  displayed in the window."
msgstr "そのウィンドウ内に表示されるバッファーで、ウィンドウに最初(ロジカル順。@ref{Bidirectional Display}を参照)に表示される文字の位置を指すマーカー。"

#. type: item
#: original_texis/internals.texi:2128
#, no-wrap
msgid "pointm"
msgstr "pointm"

#. type: cindex
#: original_texis/internals.texi:2129
#, no-wrap
msgid "window point internals"
msgstr "window point internals"

#. type: table
#: original_texis/internals.texi:2132
msgid "This is the value of point in the current buffer when this window is selected; when it is not selected, it retains its previous value."
msgstr "これはウィンドウが選択されているときのカレントバッファーのポイント値。選択されていなければ前の値が保たれる。"

#. type: item
#: original_texis/internals.texi:2133
#, no-wrap
msgid "old_pointm"
msgstr "old_pointm"

#. type: table
#: original_texis/internals.texi:2135
msgid "The value of @code{pointm} at the last redisplay time."
msgstr "最後の再表示時の@code{pointm}の値。"

#. type: item
#: original_texis/internals.texi:2136
#, no-wrap
msgid "force_start"
msgstr "force_start"

#. type: table
#: original_texis/internals.texi:2143
msgid "If this flag is non-@code{nil}, it says that the window has been scrolled explicitly by the Lisp program, and the value of the the window's @code{start} was set for redisplay to honor.  This affects what the next redisplay does if point is off the screen: instead of scrolling the window to show the text around point, it moves point to a location that is on the screen."
msgstr "このフラグが非@code{nil}ならLispプログラムによりそのウィンドウが明示的にスクロールされたことを示し、再表示のためにウィンドウの@code{start}の値がセットされる。これはポイントがスクリーン外の場合の次回再表示に影響を与える。影響とはポイント周辺のテキストを表示するためにウィンドウをスクロールするかわりに、スクリーン上にある位置にポイントを移動するというものである。"

#. type: item
#: original_texis/internals.texi:2144
#, no-wrap
msgid "optional_new_start"
msgstr "optional_new_start"

#. type: table
#: original_texis/internals.texi:2147
msgid "This is similar to @code{force_start}, but the next redisplay will only obey it if point stays visible."
msgstr "これは@code{force_start}と同様だが、次回表示ではポイントが可視の場合のみしたがう。"

#. type: item
#: original_texis/internals.texi:2148
#, no-wrap
msgid "start_at_line_beg"
msgstr "start_at_line_beg"

#. type: table
#: original_texis/internals.texi:2151
msgid "Non-@code{nil} means current value of @code{start} was the beginning of a line when it was chosen."
msgstr "非@code{nil}は@code{start}のカレント値がウィンドウ選択時に先頭行だったことを意味する。"

#. type: item
#: original_texis/internals.texi:2152
#, no-wrap
msgid "use_time"
msgstr "use_time"

#. type: table
#: original_texis/internals.texi:2155
msgid "This is the last time that the window was selected.  The function @code{get-lru-window} uses this field."
msgstr "これはウィンドウが最後に選択された時刻。関数@code{get-lru-window}はこの値を使用する。"

#. type: item
#: original_texis/internals.texi:2156
#, no-wrap
msgid "sequence_number"
msgstr "sequence_number"

#. type: table
#: original_texis/internals.texi:2158
msgid "A unique number assigned to this window when it was created."
msgstr "そのウィンドウ作成時に割り当てられた一意な番号。"

#. type: item
#: original_texis/internals.texi:2159
#, no-wrap
msgid "last_modified"
msgstr "last_modified"

#. type: table
#: original_texis/internals.texi:2162
msgid "The @code{modiff} field of the window's buffer, as of the last time a redisplay completed in this window."
msgstr "前回のそのウィンドウの再表示完了時のウィンドウのバッファーの@code{modiff}フィールド。"

#. type: item
#: original_texis/internals.texi:2163
#, no-wrap
msgid "last_overlay_modified"
msgstr "last_overlay_modified"

#. type: table
#: original_texis/internals.texi:2166
msgid "The @code{overlay_modiff} field of the window's buffer, as of the last time a redisplay completed in this window."
msgstr "前回のウィンドウの再表示完了時のウィンドウのバッファーの@code{overlay_modiff}フィールド。"

#. type: item
#: original_texis/internals.texi:2167
#, no-wrap
msgid "last_point"
msgstr "last_point"

#. type: table
#: original_texis/internals.texi:2170
msgid "The buffer's value of point, as of the last time a redisplay completed in this window."
msgstr "前回のウィンドウの再表示完了時のウィンドウのバッファーのポイント値。"

#. type: item
#: original_texis/internals.texi:2171
#, no-wrap
msgid "last_had_star"
msgstr "last_had_star"

#. type: table
#: original_texis/internals.texi:2174
msgid "A non-zero value means the window's buffer was modified when the window was last updated."
msgstr "非0値はウィンドウが最後に更新されたとき、そのウィンドウのバッファーが変更されたことを意味する。"

#. type: item
#: original_texis/internals.texi:2175
#, no-wrap
msgid "vertical_scroll_bar_type"
msgstr "vertical_scroll_bar_type"

#. type: itemx
#: original_texis/internals.texi:2176
#, no-wrap
msgid "horizontal_scroll_bar_type"
msgstr "horizontal_scroll_bar_type"

#. type: table
#: original_texis/internals.texi:2178
msgid "The types of this window's vertical and horizontal scroll bars."
msgstr "そのウィンドウの垂直スクロールバーおよび水平スクロールバーのタイプ。"

#. type: itemx
#: original_texis/internals.texi:2180
#, no-wrap
msgid "scroll_bar_height"
msgstr "scroll_bar_height"

#. type: table
#: original_texis/internals.texi:2183
msgid "The width of this window's vertical scroll bar and the height of this window's horizontal scroll bar, in pixels."
msgstr "そのウィンドウの垂直スクロールバーの幅および水平スクロールバーの高さ(ピクセル単位)。"

#. type: item
#: original_texis/internals.texi:2184
#, no-wrap
msgid "left_margin_cols"
msgstr "left_margin_cols"

#. type: itemx
#: original_texis/internals.texi:2185
#, no-wrap
msgid "right_margin_cols"
msgstr "right_margin_cols"

#. type: table
#: original_texis/internals.texi:2188
msgid "The widths of the left and right margins in this window.  A value of zero means no margin."
msgstr "そのウィンドウの左マージンと右マージンの幅。値0はマージンがないことを意味する。"

#. type: table
#: original_texis/internals.texi:2193
msgid "The pixel widths of the left and right fringes in this window.  A value of @minus{}1 means use the values of the frame."
msgstr "そのウィンドウの左フリンジと右フリンジのピクセル幅。値@minus{}1はフレームの値の使用を意味する。"

#. type: table
#: original_texis/internals.texi:2197
msgid "A non-zero value means the fringes outside the display margins; othersize they are between the margin and the text."
msgstr "非0値はディスプレーマージン外側のフリンジ、それ以外ならフリンジはマージンとテキストの間にあることを意味する。"

#. type: item
#: original_texis/internals.texi:2198
#, no-wrap
msgid "window_end_pos"
msgstr "window_end_pos"

#. type: table
#: original_texis/internals.texi:2202
msgid "This is computed as @code{z} minus the buffer position of the last glyph in the current matrix of the window.  The value is only valid if @code{window_end_valid} is non-zero."
msgstr "これは@code{z}から、そのウィンドウのカレントマトリクス内の最後のグリフのバッファー位置を減じて算出される。この値は@code{window_end_valid}が非0のときだけ有効である。"

#. type: item
#: original_texis/internals.texi:2203
#, no-wrap
msgid "window_end_bytepos"
msgstr "window_end_bytepos"

#. type: table
#: original_texis/internals.texi:2205
msgid "The byte position corresponding to @code{window_end_pos}."
msgstr "@code{window_end_pos}に対応するバイト位置。"

#. type: item
#: original_texis/internals.texi:2206
#, no-wrap
msgid "window_end_vpos"
msgstr "window_end_vpos"

#. type: table
#: original_texis/internals.texi:2209
msgid "The window-relative vertical position of the line containing @code{window_end_pos}."
msgstr "@code{window_end_pos}を含む行のウィンドウに相対的な垂直位置。"

#. type: item
#: original_texis/internals.texi:2210
#, no-wrap
msgid "window_end_valid"
msgstr "window_end_valid"

#. type: table
#: original_texis/internals.texi:2215
msgid "This field is set to a non-zero value if @code{window_end_pos} and @code{window_end_vpos} are truly valid.  This is zero if nontrivial redisplay is pre-empted, since in that case the display that @code{window_end_pos} was computed for did not get onto the screen."
msgstr "このフィールドは@code{window_end_pos}および@code{window_end_vpos}が真に有効なら非0値にセットされる。これは重要な再表示が先に割り込んだ場合には、@code{window_end_pos}を算出した表示がスクリーン上に出現しなくなるので0になる。"

#. type: item
#: original_texis/internals.texi:2216
#, no-wrap
msgid "cursor"
msgstr "cursor"

#. type: table
#: original_texis/internals.texi:2218
msgid "A structure describing where the cursor is in this window."
msgstr "そのウィンドウ内でカーソルがどこにあるかを記述する構造体。"

#. type: item
#: original_texis/internals.texi:2219
#, no-wrap
msgid "last_cursor_vpos"
msgstr "last_cursor_vpos"

#. type: table
#: original_texis/internals.texi:2222
msgid "The window-relative vertical position of the line showing the cursor as of the last redisplay that finished."
msgstr "最後の再表示完了時にカーソルを表示していた行の、ウィンドウに相対的な垂直位置。"

#. type: item
#: original_texis/internals.texi:2223
#, no-wrap
msgid "phys_cursor"
msgstr "phys_cursor"

#. type: table
#: original_texis/internals.texi:2225
msgid "A structure describing where the cursor of this window physically is."
msgstr "そのウィンドウのカーソルが物理的にどこにあるかを記述する構造体。"

#. type: item
#: original_texis/internals.texi:2226
#, no-wrap
msgid "phys_cursor_type"
msgstr "phys_cursor_type"

#. type: itemx
#: original_texis/internals.texi:2229
#, no-wrap
msgid "phys_cursor_height"
msgstr "phys_cursor_height"

#. type: itemx
#: original_texis/internals.texi:2230
#, no-wrap
msgid "phys_cursor_width"
msgstr "phys_cursor_width"

#. type: table
#: original_texis/internals.texi:2233
msgid "The type, height, and width of the cursor that was last displayed on this window."
msgstr "そのウィンドウの最後の表示でのカーソルのタイプ、高さ、幅。"

#. type: item
#: original_texis/internals.texi:2234
#, no-wrap
msgid "phys_cursor_on_p"
msgstr "phys_cursor_on_p"

#. type: table
#: original_texis/internals.texi:2236
msgid "This field is non-zero if the cursor is physically on."
msgstr "このフィールドはカーソルが物理的にオンなら非0。"

#. type: item
#: original_texis/internals.texi:2237
#, no-wrap
msgid "cursor_off_p"
msgstr "cursor_off_p"

#. type: table
#: original_texis/internals.texi:2240
msgid "Non-zero means the cursor in this window is logically off.  This is used for blinking the cursor."
msgstr "非0はそのウィンドウのカーソルが論理的にオフであることを意味する。これはカーソルの点滅に使用される。"

#. type: item
#: original_texis/internals.texi:2241
#, no-wrap
msgid "last_cursor_off_p"
msgstr "last_cursor_off_p"

#. type: table
#: original_texis/internals.texi:2244
msgid "This field contains the value of @code{cursor_off_p} as of the time of the last redisplay."
msgstr "このフィールドは最後の再表示時の@code{cursor_off_p}の値を含む。"

#. type: item
#: original_texis/internals.texi:2245
#, no-wrap
msgid "must_be_updated_p"
msgstr "must_be_updated_p"

#. type: table
#: original_texis/internals.texi:2247
msgid "This is set to 1 during redisplay when this window must be updated."
msgstr "これはウィンドウを更新しなければならないとき、再表示の間は1にセットされる。"

#. type: item
#: original_texis/internals.texi:2248
#, no-wrap
msgid "hscroll"
msgstr "hscroll"

#. type: table
#: original_texis/internals.texi:2253
msgid "This is the number of columns that the display in the window is scrolled horizontally to the left.  Normally, this is 0.  When only the current line is hscrolled, this describes how much the current line is scrolled."
msgstr "これはウィンドウ内の表示が左へ水平スクロールされている列数。通常は0。カレント行だけが水平スクロールされている際には、カレント行がどれだけ左へ水平スクロールされているかを示す。"

#. type: item
#: original_texis/internals.texi:2254
#, no-wrap
msgid "min_hscroll"
msgstr "min_hscroll"

#. type: table
#: original_texis/internals.texi:2259
msgid "Minimum value of @code{hscroll}, set by the user via @code{set-window-hscroll} (@pxref{Horizontal Scrolling}).  When only the current line is hscrolled, this describes the horizontal scrolling of lines other than the current one."
msgstr "@code{set-window-hscroll}を通じてユーザーがセットする@code{hscroll}の最小値(@ref{Horizontal Scrolling}を参照)。カレント行だけが水平スクロールされている際には、カレント行以外の行がどれだけ左へ水平スクロールされているかを示す。"

#. type: item
#: original_texis/internals.texi:2260
#, no-wrap
msgid "vscroll"
msgstr "vscroll"

#. type: table
#: original_texis/internals.texi:2262
msgid "Vertical scroll amount, in pixels.  Normally, this is 0."
msgstr "ピクセル単位での垂直スクロール量。これは通常は0。"

#. type: item
#: original_texis/internals.texi:2263
#, no-wrap
msgid "dedicated"
msgstr "dedicated"

#. type: table
#: original_texis/internals.texi:2265
msgid "Non-@code{nil} if this window is dedicated to its buffer."
msgstr "そのウィンドウがそれのバッファー専用(dedicated)なら非@code{nil}。"

#. type: item
#: original_texis/internals.texi:2266
#, no-wrap
msgid "combination_limit"
msgstr "combination_limit"

#. type: table
#: original_texis/internals.texi:2270
msgid "This window's combination limit, meaningful only for a parent window.  If this is @code{t}, then it is not allowed to delete this window and recombine its child windows with other siblings of this window."
msgstr "このウィンドウの組み合わせ限界は親ウィンドウにとってのみ意味がある。これが@code{t}ならそのウィンドウの削除は許されず、そのウィンドウの他の兄弟と子ウィンドウを再組み合わせする。"

#. type: item
#: original_texis/internals.texi:2271
#, no-wrap
msgid "window_parameters"
msgstr "window_parameters"

#. type: table
#: original_texis/internals.texi:2273
msgid "The alist of this window's parameters."
msgstr "そのウィンドウのパラメーターのalist。"

#. type: table
#: original_texis/internals.texi:2276
msgid "The window's display table, or @code{nil} if none is specified for it."
msgstr "そのウィンドウのディスプレーテーブル、何も指定されていなければ@code{nil}。"

#. type: item
#: original_texis/internals.texi:2277
#, no-wrap
msgid "update_mode_line"
msgstr "update_mode_line"

#. type: table
#: original_texis/internals.texi:2279
msgid "Non-zero means this window's mode line needs to be updated."
msgstr "非0はウィンドウのモードラインの更新が必要なことを意味する。"

#. type: item
#: original_texis/internals.texi:2280
#, no-wrap
msgid "mode_line_height"
msgstr "mode_line_height"

#. type: itemx
#: original_texis/internals.texi:2281
#, no-wrap
msgid "header_line_height"
msgstr "header_line_height"

#. type: table
#: original_texis/internals.texi:2284
msgid "The height in pixels of the mode line and the header line, or @minus{}1 if not known."
msgstr "モードラインおよびヘッダーラインのピクセル高さ、不明なら@minus{}1。"

#. type: item
#: original_texis/internals.texi:2285
#, no-wrap
msgid "base_line_number"
msgstr "base_line_number"

#. type: table
#: original_texis/internals.texi:2288
msgid "The line number of a certain position in the buffer, or zero.  This is used for displaying the line number of point in the mode line."
msgstr "そのバッファーの特定の位置の行番号か0。これはモードラインでポイントの行番号を表示するために使用される。"

#. type: item
#: original_texis/internals.texi:2289
#, no-wrap
msgid "base_line_pos"
msgstr "base_line_pos"

#. type: table
#: original_texis/internals.texi:2293
msgid "The position in the buffer for which the line number is known, or zero meaning none is known.  If it is @minus{}1, don't display the line number as long as the window shows that buffer."
msgstr "行番号が既知であるバッファー位置、不明なら0。これが@minus{}1なら、そのウィンドウがバッファーを表示するかぎり行番号は表示されない。"

#. type: item
#: original_texis/internals.texi:2294
#, no-wrap
msgid "column_number_displayed"
msgstr "column_number_displayed"

#. type: table
#: original_texis/internals.texi:2297
msgid "The column number currently displayed in this window's mode line, or @minus{}1 if column numbers are not being displayed."
msgstr "そのウィンドウのモードラインに表示されているカレント列番号、列番号が表示されていなければ@minus{}1。"

#. type: item
#: original_texis/internals.texi:2298
#, no-wrap
msgid "current_matrix"
msgstr "current_matrix"

#. type: itemx
#: original_texis/internals.texi:2299
#, no-wrap
msgid "desired_matrix"
msgstr "desired_matrix"

#. type: table
#: original_texis/internals.texi:2301
msgid "Glyph matrices describing the current and desired display of this window."
msgstr "そのウィンドウのカレント、および望まれる表示を記述するグリフ。"

#. type: cindex
#: original_texis/internals.texi:2305
#, no-wrap
msgid "internals, of process"
msgstr "internals, of process"

#. type: cindex
#: original_texis/internals.texi:2306
#, no-wrap
msgid "process internals"
msgstr "process internals"

#. type: Plain text
#: original_texis/internals.texi:2310
msgid "The fields of a process (for a complete list, see the definition of @code{struct Lisp_Process} in @file{process.h}) include:"
msgstr "プロセスのフィールドには以下が含まれます(完全なリストは@file{process.h}の@code{struct Lisp_Process}の定義を参照):"

#. type: table
#: original_texis/internals.texi:2314
msgid "A Lisp string, the name of the process."
msgstr "プロセス名(Lisp文字列)。"

#. type: item
#: original_texis/internals.texi:2315
#, no-wrap
msgid "command"
msgstr "command"

#. type: table
#: original_texis/internals.texi:2319
msgid "A list containing the command arguments that were used to start this process.  For a network or serial process, it is @code{nil} if the process is running or @code{t} if the process is stopped."
msgstr "そのプロセスの開始に使用されたコマンド引数を含むリスト。ネットワークプロセスとシリアルプロセスではプロセスが実行中なら@code{nil}、停止していたら@code{t}。"

#. type: item
#: original_texis/internals.texi:2320
#, no-wrap
msgid "filter"
msgstr "filter"

#. type: table
#: original_texis/internals.texi:2322
msgid "A Lisp function used to accept output from the process."
msgstr "そのプロセスから出力を受け取るために使用されるLisp関数。"

#. type: item
#: original_texis/internals.texi:2323
#, no-wrap
msgid "sentinel"
msgstr "sentinel"

#. type: table
#: original_texis/internals.texi:2325
msgid "A Lisp function called whenever the state of the process changes."
msgstr "そのプロセスの状態が変化したら常に呼び出されるLisp関数。"

#. type: item
#: original_texis/internals.texi:2326
#, no-wrap
msgid "buffer"
msgstr "buffer"

#. type: table
#: original_texis/internals.texi:2328
msgid "The associated buffer of the process."
msgstr "そのプロセスに関連付けられたバッファー。"

#. type: item
#: original_texis/internals.texi:2329
#, no-wrap
msgid "pid"
msgstr "pid"

#. type: table
#: original_texis/internals.texi:2332
msgid "An integer, the operating system's process @acronym{ID}.  Pseudo-processes such as network or serial connections use a value of 0."
msgstr "オペレーティングシステムのプロセス@acronym{ID} (整数)。ネットワークプロセスやシリアルプロセスのような疑似プロセスでは値0を使用する。"

#. type: item
#: original_texis/internals.texi:2333
#, no-wrap
msgid "childp"
msgstr "childp"

#. type: table
#: original_texis/internals.texi:2337
msgid "A flag, @code{t} if this is really a child process.  For a network or serial connection, it is a plist based on the arguments to @code{make-network-process} or @code{make-serial-process}."
msgstr "フラグ。実際に子プロセスなら@code{t}。ネットワークプロセスやシリアルプロセスでは@code{make-network-process}や@code{make-serial-process}にもとづくplist。"

#. type: table
#: original_texis/internals.texi:2342
msgid "A marker indicating the position of the end of the last output from this process inserted into the buffer.  This is often but not always the end of the buffer."
msgstr "そのプロセスの出力からバッファーに挿入された終端位置を示すマーカー。常にではないがこれはバッファー終端であることが多い。"

#. type: item
#: original_texis/internals.texi:2343
#, no-wrap
msgid "kill_without_query"
msgstr "kill_without_query"

#. type: table
#: original_texis/internals.texi:2346
msgid "If this is non-zero, killing Emacs while this process is still running does not ask for confirmation about killing the process."
msgstr "これが非0ならプロセス実行中にEmacsをkillしてもプロセスのkillにたいして確認を求めない。"

#. type: item
#: original_texis/internals.texi:2347
#, no-wrap
msgid "raw_status"
msgstr "raw_status"

#. type: table
#: original_texis/internals.texi:2349
msgid "The raw process status, as returned by the @code{wait} system call."
msgstr "システムコール@code{wait}がリターンするrawプロセス状態。"

#. type: item
#: original_texis/internals.texi:2350
#, no-wrap
msgid "status"
msgstr "status"

#. type: table
#: original_texis/internals.texi:2353
msgid "The process status, as @code{process-status} should return it.  This is a Lisp symbol, a cons cell, or a list."
msgstr "@code{process-status}がリターンするようなプロセス状態。Lispシンボル、コンスセル、またはリストのいずれか。"

#. type: item
#: original_texis/internals.texi:2354
#, no-wrap
msgid "tick"
msgstr "tick"

#. type: itemx
#: original_texis/internals.texi:2355
#, no-wrap
msgid "update_tick"
msgstr "update_tick"

#. type: table
#: original_texis/internals.texi:2359
msgid "If these two fields are not equal, a change in the status of the process needs to be reported, either by running the sentinel or by inserting a message in the process buffer."
msgstr "これら2つのフィールドが等しくないなら、センチネル実行かプロセスバッファーへのメッセージ挿入によりプロセスの状態変更が報告される必要がある。"

#. type: item
#: original_texis/internals.texi:2360
#, no-wrap
msgid "pty_flag"
msgstr "pty_flag"

#. type: table
#: original_texis/internals.texi:2363
msgid "Non-zero if communication with the subprocess uses a pty; zero if it uses a pipe."
msgstr "そのサブプロセスがptyを使用して対話する場合は非0。パイプを使用する場合には0。"

#. type: item
#: original_texis/internals.texi:2364
#, no-wrap
msgid "infd"
msgstr "infd"

#. type: table
#: original_texis/internals.texi:2366
msgid "The file descriptor for input from the process."
msgstr "そのプロセスからの入力にたいするファイルディクリプター。"

#. type: item
#: original_texis/internals.texi:2367
#, no-wrap
msgid "outfd"
msgstr "outfd"

#. type: table
#: original_texis/internals.texi:2369
msgid "The file descriptor for output to the process."
msgstr "そのプロセスへの出力にたいするファイルディクリプター。"

#. type: item
#: original_texis/internals.texi:2370
#, no-wrap
msgid "tty_name"
msgstr "tty_name"

#. type: table
#: original_texis/internals.texi:2373
msgid "The name of the terminal that the subprocess is using, or @code{nil} if it is using pipes."
msgstr "そのサブプロセスが使用する端末の名前、パイプを使用する場合には@code{nil}。"

#. type: item
#: original_texis/internals.texi:2374
#, no-wrap
msgid "decode_coding_system"
msgstr "decode_coding_system"

#. type: table
#: original_texis/internals.texi:2376
msgid "Coding-system for decoding the input from this process."
msgstr "そのプロセスからの入力のデコーディングにたいするコーディングシステム。"

#. type: item
#: original_texis/internals.texi:2377
#, no-wrap
msgid "decoding_buf"
msgstr "decoding_buf"

#. type: table
#: original_texis/internals.texi:2379
msgid "A working buffer for decoding."
msgstr "デコーディング用の作業バッファー。"

#. type: item
#: original_texis/internals.texi:2380
#, no-wrap
msgid "decoding_carryover"
msgstr "decoding_carryover"

#. type: table
#: original_texis/internals.texi:2382
msgid "Size of carryover in decoding."
msgstr "デコーディングでのキャリーオーバーのサイズ。"

#. type: item
#: original_texis/internals.texi:2383
#, no-wrap
msgid "encode_coding_system"
msgstr "encode_coding_system"

#. type: table
#: original_texis/internals.texi:2385
msgid "Coding-system for encoding the output to this process."
msgstr "そのプロセスからの出力のエンコーディングにたいするコーディングシステム。"

#. type: item
#: original_texis/internals.texi:2386
#, no-wrap
msgid "encoding_buf"
msgstr "encoding_buf"

#. type: table
#: original_texis/internals.texi:2388
msgid "A working buffer for encoding."
msgstr "エンコーディング用の作業バッファー。"

#. type: item
#: original_texis/internals.texi:2389
#, no-wrap
msgid "inherit_coding_system_flag"
msgstr "inherit_coding_system_flag"

#. type: table
#: original_texis/internals.texi:2392
msgid "Flag to set @code{coding-system} of the process buffer from the coding system used to decode process output."
msgstr "プロセス出力のデコードに使用されるコーディングシステムからプロセスバッファーの@code{coding-system}をセットするフラグ。"

#. type: item
#: original_texis/internals.texi:2393
#, no-wrap
msgid "type"
msgstr "type"

#. type: table
#: original_texis/internals.texi:2396
msgid "Symbol indicating the type of process: @code{real}, @code{network}, @code{serial}."
msgstr "プロセスのタイプを示す@code{real}、@code{network}、@code{serial}のいずれかのシンボル。"

#. type: cindex
#: original_texis/internals.texi:2401
#, no-wrap
msgid "integer types (C programming language)"
msgstr "integer types (C programming language)"

#. type: Plain text
#: original_texis/internals.texi:2406
msgid "Here are some guidelines for use of integer types in the Emacs C source code.  These guidelines sometimes give competing advice; common sense is advised."
msgstr "以下はEmacsのCソースコード内で整数タイプを使用する際のガイドラインです。これらのガイドラインはときに相反するアドバイスを与えることがありますが一般的な常識に沿ったものがアドバイスです。"

#. type: itemize
#: original_texis/internals.texi:2412
msgid "Avoid arbitrary limits.  For example, avoid @code{int len = strlen (s);} unless the length of @code{s} is required for other reasons to fit in @code{int} range."
msgstr "任意の制限の使用を避ける。たとえば@code{s}の長さを@code{int}の範囲に収めることが要求されるのでなければ@code{int len = strlen (s);}を使用しないこと。"

#. type: itemize
#: original_texis/internals.texi:2419
msgid "Do not assume that signed integer arithmetic wraps around on overflow.  This is no longer true of Emacs porting targets: signed integer overflow has undefined behavior in practice, and can dump core or even cause earlier or later code to behave illogically.  Unsigned overflow does wrap around reliably, modulo a power of two."
msgstr "符号付き整数の算術演算のオーバーフローのラップアラウンドを前提としてはならない。Emacsのポート対象先によっては成立しない。実際には符号付き整数のオーバーフローは未定義であり、コアダンプや早晩に非論理的な振る舞いさえ起こし得る。符号なし整数のオーバーフローは2のべき乗の剰余に確実にラップアラウンドされることが保証されている。"

#. type: itemize
#: original_texis/internals.texi:2427
msgid "Prefer signed types to unsigned, as code gets confusing when signed and unsigned types are combined.  Many other guidelines assume that types are signed; in the rarer cases where unsigned types are needed, similar advice may apply to the unsigned counterparts (e.g., @code{size_t} instead of @code{ptrdiff_t}, or @code{uintptr_t} instead of @code{intptr_t})."
msgstr "符号なしタイプと符号付きタイプを組み合わせるとコードが混乱するので符号なしタイプより符号付きタイプを優先すること。他のガイドラインの多くはタイプが符号付きだとみなしている。符号なしタイプを要する稀なケースでは、符号付きの符号なし版(@code{ptrdiff_t}のかわりに@code{size_t}、@code{intptr_t}のかわりに@code{uintptr_t})にたいして同様のアドバイスを適用できる。"

#. type: itemize
#: original_texis/internals.texi:2432
msgid "Prefer @code{int} for Emacs character codes, in the range 0 ..@: 0x3FFFFF@.  More generally, prefer @code{int} for integers known to be in @code{int} range, e.g., screen column counts."
msgstr "0から0x3FFFFFまでの範囲ではEmacs文字コードには@code{int}を優先すること。より一般的には、たとえばスクリーン列数のように@code{int}範囲と既知である整数には@code{int}を優先すること。"

#. type: itemize
#: original_texis/internals.texi:2441
msgid "Prefer @code{ptrdiff_t} for sizes, i.e., for integers bounded by the maximum size of any individual C object or by the maximum number of elements in any C array.  This is part of Emacs's general preference for signed types.  Using @code{ptrdiff_t} limits objects to @code{PTRDIFF_MAX} bytes, but larger objects would cause trouble anyway since they would break pointer subtraction, so this does not impose an arbitrary limit."
msgstr "サイズ(たとえばすべての個別のCオブジェクトの最大サイズや、すべてのC配列の最大要素数にバインドされる整数)にたいしては@code{ptrdiff_t}を優先すること。これは符号付きタイプにたいするEmacsの一般的な優先事項である。@code{ptrdiff_t}の使用によりオブジェクトは@code{PTRDIFF_MAX}に制限されるが、より大きいオブジェクトはポインター減算を破壊するかもしれず結局のところ問題を起こす可能性があるので、これは一方的に制限を課すものではない。"

#. type: itemize
#: original_texis/internals.texi:2452
msgid "Avoid @code{ssize_t} except when communicating to low-level APIs that have @code{ssize_t}-related limitations.  Although it's equivalent to @code{ptrdiff_t} on typical platforms, @code{ssize_t} is occasionally narrower, so using it for size-related calculations could overflow.  Also, @code{ptrdiff_t} is more ubiquitous and better-standardized, has standard @code{printf} formats, and is the basis for Emacs's internal size-overflow checking.  When using @code{ssize_t}, please note that POSIX requires support only for values in the range @minus{}1 ..@: @code{SSIZE_MAX}."
msgstr "@code{ssize_t}関連の制限をもつ低レベルAPIト対話する際を除いて@code{ssize_t}を避けること。これは典型的なプラトフォームでは@code{ptrdiff_t}と等価だとしても、@code{ssize_t}は範囲が狭いときがあり使用によりサイズ関連の計算がオーバーフローするかもしれない。同じく@code{ptrdiff_t}はより一般的で標準化されており、標準的な@code{printf}フォーマットをもち、Emacsの内部的なサイズオーバーフローのチェックの基礎である。@code{ssize_t}を使用する際にはPOSIXガ@minus{}から@code{SSIZE_MAX}の範囲の値にたいするサポートだけを要求することに注意してほしい。"

#. type: itemize
#: original_texis/internals.texi:2460
msgid "Prefer @code{intptr_t} for internal representations of pointers, or for integers bounded only by the number of objects that can exist at any given time or by the total number of bytes that can be allocated.  Currently Emacs sometimes uses other types when @code{intptr_t} would be better; fixing this is lower priority, as the code works as-is on Emacs's current porting targets."
msgstr "ポインターの内部表現や与えられた任意のタイミングで存在可能なオブジェクト数や割り当て可能な総バイト数にのみバインドされる整数には@code{intptr_t}を優先すること。現在のことこEmacsは@code{intptr_t}を使用したほうがよいときに別のタイプを使用する場合がある。現在のEmacsのカレント移植先にたいして未修正でコードが動作するので修正の優先度は低い。"

#. type: itemize
#: original_texis/internals.texi:2465
msgid "Prefer the Emacs-defined type @code{EMACS_INT} for representing values converted to or from Emacs Lisp fixnums, as fixnum arithmetic is based on @code{EMACS_INT}."
msgstr "Emacs Lispのfixnumへの変換や逆変換を表す値ではfixnum演算が@code{EMACS_INT}にもとづくのでEmacsで定義されたタイプ@code{EMACS_INT}を優先すること。"

#. type: itemize
#: original_texis/internals.texi:2472
msgid "When representing a system value (such as a file size or a count of seconds since the Epoch), prefer the corresponding system type (e.g., @code{off_t}, @code{time_t}).  Do not assume that a system type is signed, unless this assumption is known to be safe.  For example, although @code{off_t} is always signed, @code{time_t} need not be."
msgstr "(ファイルサイズやエポック以降の経過秒数等の)システム値を表す際には、(@code{off_t}や@code{time_t}等の)システムタイプを優先すること。安全だと解っていなければシステムタイプが符号付きだと仮定してはならない。たとえば@code{off_t}は常に符号付きだが@code{time_t}は符号付きである必要はない。"

#. type: itemize
#: original_texis/internals.texi:2477
msgid "Prefer the Emacs-defined type @code{printmax_t} for representing values that might be any signed integer that can be printed, using a @code{printf}-family function."
msgstr "@code{printf}族の関数を使用してプリントされ得る任意の符号付き整数かもしれない値を表す場合にはEmacsの定義タイプ@code{printmax_t}を優先すること。"

#. type: itemize
#: original_texis/internals.texi:2481
msgid "Prefer @code{intmax_t} for representing values that might be any signed integer value."
msgstr "任意の符号付き整数かもしれない値を表す場合には@code{intmax_t}を優先すること。"

#. type: itemize
#: original_texis/internals.texi:2492
msgid "Prefer @code{bool}, @code{false} and @code{true} for booleans.  Using @code{bool} can make programs easier to read and a bit faster than using @code{int}.  Although it is also OK to use @code{int}, @code{0} and @code{1}, this older style is gradually being phased out.  When using @code{bool}, respect the limitations of the replacement implementation of @code{bool}, as documented in the source file @file{lib/stdbool.in.h}.  In particular, boolean bitfields should be of type @code{bool_bf}, not @code{bool}, so that they work correctly even when compiling Objective C with standard GCC."
msgstr "ブーリーンには@code{bool}、@code{false}、@code{true}を使用すること。@code{bool}の使用によりプログラムの可読性が増して、@code{int}を使用するより若干高速になる。@code{int}、@code{0}、@code{1}を使用しても大丈夫だが旧スタイルは段階的に廃止される。@code{bool}を使用する際にはソースファイル@file{lib/stdbool.in.h}に文書化されている@code{bool}の代替実装の制限を尊重すること。特にブーリーンのビットフィールドは@code{bool}ではなく@code{bool_bf}タイプであること。そうすれば標準のGCCでObjective Cをコンパイルするときでさえ正しく機能する。"

#. type: itemize
#: original_texis/internals.texi:2498
msgid "In bitfields, prefer @code{unsigned int} or @code{signed int} to @code{int}, as @code{int} is less portable: it might be signed, and might not be.  Single-bit bit fields should be @code{unsigned int} or @code{bool_bf} so that their values are 0 or 1."
msgstr "ビットフィールドでは@code{int}は可搬性に劣るので、@code{int}より@code{unsigned int}か@code{signed int}を優先すること。単一ビットのビットフィールドの値は0か1なので@code{unsigned int}か@code{bool_bf}を使用すること。"
