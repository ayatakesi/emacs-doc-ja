# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Emacs 26.1\n"
"POT-Creation-Date: 2023-07-27 19:46+0900\n"
"PO-Revision-Date: 2023-08-12 15:26+0900\n"
"Last-Translator: Ayanokoji Takesi <ayanokoji.takesi@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: node
#: original_texis/modes.texi:6
#, no-wrap
msgid "Modes"
msgstr "Modes"

#. type: chapter
#: original_texis/modes.texi:7
#, no-wrap
msgid "Major and Minor Modes"
msgstr "Major and Minor Modes"

#. type: cindex
#: original_texis/modes.texi:8
#, no-wrap
msgid "mode"
msgstr "mode"

#. type: Plain text
#: original_texis/modes.texi:16
msgid "A @dfn{mode} is a set of definitions that customize Emacs behavior in useful ways.  There are two varieties of modes: @dfn{minor modes}, which provide features that users can turn on and off while editing; and @dfn{major modes}, which are used for editing or interacting with a particular kind of text.  Each buffer has exactly one @dfn{major mode} at a time."
msgstr "@dfn{モード(mode)}とはEmacsの挙動を簡便な方法でカスタマイズする定義のセットです。モードは2種類あります。@dfn{マイナーモード(minor modes)}は編集時にユーザーがオンとオフを切り替えられる機能を提供します。@dfn{メジャーモード(major modes)}は特定の種類のテキストにたいする編集や相互作用に使用します。ある時点においてバッファーはそれぞれ正確に1つの@dfn{メジャーモード}をもちます。"

#. type: Plain text
#: original_texis/modes.texi:21
msgid "This chapter describes how to write both major and minor modes, how to indicate them in the mode line, and how they run hooks supplied by the user.  For related topics such as keymaps and syntax tables, see @ref{Keymaps}, and @ref{Syntax Tables}."
msgstr "このチャプターではメジャーモードとマイナーモードを記述する方法、それらをモードラインに示す方法、そしてそれらのモードがユーザーが提供するフックを実行する方法を説明します。キーマップ(keymaps)や構文テーブル(syntax tables)のような関連するトピックについては@ref{Keymaps}と@ref{Syntax Tables}を参照してください。"

#. type: section
#: original_texis/modes.texi:32 original_texis/modes.texi:34
#: original_texis/modes.texi:35
#, no-wrap
msgid "Hooks"
msgstr "Hooks"

#. type: menuentry
#: original_texis/modes.texi:32
msgid "How to use hooks; how to write code that provides hooks."
msgstr "フックの使用法とフックを提供するコードの記述方法。"

#. type: section
#: original_texis/modes.texi:32 original_texis/modes.texi:228
#: original_texis/modes.texi:229
#, no-wrap
msgid "Major Modes"
msgstr "Major Modes"

#. type: menuentry
#: original_texis/modes.texi:32
msgid "Defining major modes."
msgstr "メジャーモードの定義。"

#. type: section
#: original_texis/modes.texi:32 original_texis/modes.texi:1477
#: original_texis/modes.texi:1478
#, no-wrap
msgid "Minor Modes"
msgstr "Minor Modes"

#. type: menuentry
#: original_texis/modes.texi:32
msgid "Defining minor modes."
msgstr "マイナーモードの定義。"

#. type: section
#: original_texis/modes.texi:32 original_texis/modes.texi:1938
#: original_texis/modes.texi:1939
#, no-wrap
msgid "Mode Line Format"
msgstr "Mode Line Format"

#. type: menuentry
#: original_texis/modes.texi:32
msgid "Customizing the text that appears in the mode line."
msgstr "モードラインに表示されるテキストのカスタマイズ。"

#. type: cindex
#: original_texis/modes.texi:32 original_texis/modes.texi:2719
#: original_texis/modes.texi:2720 original_texis/modes.texi:2722
#, no-wrap
msgid "Imenu"
msgstr "Imenu"

#. type: menuentry
#: original_texis/modes.texi:32
msgid "Providing a menu of definitions made in a buffer."
msgstr "バッファーで作成された定義のメニューを提供する。"

#. type: section
#: original_texis/modes.texi:32 original_texis/modes.texi:2941
#: original_texis/modes.texi:2942
#, no-wrap
msgid "Font Lock Mode"
msgstr "Font Lock Mode"

#. type: menuentry
#: original_texis/modes.texi:32
msgid "How modes can highlight text according to syntax."
msgstr "モードが構文に応じてテキストをハイライトする方法。"

#. type: node
#: original_texis/modes.texi:32 original_texis/modes.texi:4247
#, no-wrap
msgid "Auto-Indentation"
msgstr "Auto-Indentation"

#. type: menuentry
#: original_texis/modes.texi:32
msgid "How to teach Emacs to indent for a major mode."
msgstr "メジャーモードにたいするインデントをEmacsに伝える方法。"

#. type: section
#: original_texis/modes.texi:32 original_texis/modes.texi:5216
#: original_texis/modes.texi:5217
#, no-wrap
msgid "Desktop Save Mode"
msgstr "Desktop Save Mode"

#. type: menuentry
#: original_texis/modes.texi:32
msgid "How modes can have buffer state saved between Emacs sessions."
msgstr "Emacsセッション間でモードがバッファー状態を保存する方法。"

#. type: cindex
#: original_texis/modes.texi:36
#, no-wrap
msgid "hooks"
msgstr "hooks"

#. type: Plain text
#: original_texis/modes.texi:44
msgid "A @dfn{hook} is a variable where you can store a function or functions (@pxref{What Is a Function}) to be called on a particular occasion by an existing program.  Emacs provides hooks for the sake of customization.  Most often, hooks are set up in the init file (@pxref{Init File}), but Lisp programs can set them also.  @xref{Standard Hooks}, for a list of some standard hook variables."
msgstr "@dfn{フック(hook)}とは既存のプログラムから特定のタイミングで呼び出される関数(複数可)を格納できる変数のことです(@ref{What Is a Function}を参照)。Emacsはカスタマイズ用にフックを提供します。ほとんどの場合にはinitファイル内(@ref{Init File}を参照)でフックをセットアップしますが、Lispプログラムもフックをセットできます。標準的なフック変数のリストは@ref{Standard Hooks}を参照してください。"

#. type: cindex
#: original_texis/modes.texi:45
#, no-wrap
msgid "normal hook"
msgstr "normal hook"

#. type: Plain text
#: original_texis/modes.texi:51
msgid "Most of the hooks in Emacs are @dfn{normal hooks}.  These variables contain lists of functions to be called with no arguments.  By convention, whenever the hook name ends in @samp{-hook}, that tells you it is normal.  We try to make all hooks normal, as much as possible, so that you can use them in a uniform way."
msgstr "Emacsのほとんどのフックは@dfn{ノーマルフック(normal hooks)}です。これらの変数は、引数なしで呼び出される関数のリストを含んでいます。慣習により名前が@samp{-hook}で終わるフックは、そのフックがノーマルフックであることを意味します。わたしたちは一貫した方法でフックを使用できるように、すべてのフックが可能な限りノーマルフックとなるよう努力しています。"

#. type: Plain text
#: original_texis/modes.texi:59
msgid "Every major mode command is supposed to run a normal hook called the @dfn{mode hook} as one of the last steps of initialization.  This makes it easy for a user to customize the behavior of the mode, by overriding the buffer-local variable assignments already made by the mode.  Most minor mode functions also run a mode hook at the end.  But hooks are used in other contexts too.  For example, the hook @code{suspend-hook} runs just before Emacs suspends itself (@pxref{Suspending Emacs})."
msgstr "すべてのメジャーモードコマンドは、初期化の最終ステップの1つとして、@dfn{モードフック(mode hook)}と呼ばれるノーマルフックを実行するとみなされます。これによってそのモードですでに作成されたバッファーローカル変数割り当てをオーバーライドすることにより、ユーザーがそのモードの動作をカスタマイズするのが簡単になります。ほとんどのマイナーモード関数も最後にモードフックを実行します。しかしフックは他のコンテキストでも使用されます。たとえばフック@code{suspend-hook}は、Emacsが自身をサスペンド(@ref{Suspending Emacs}を参照)する直前に実行されます。"

#. type: cindex
#: original_texis/modes.texi:60
#, no-wrap
msgid "abnormal hook"
msgstr "abnormal hook"

#. type: Plain text
#: original_texis/modes.texi:69
msgid "If the hook variable's name does not end with @samp{-hook}, that indicates it is probably an @dfn{abnormal hook}.  These differ from normal hooks in two ways: they can be called with one or more arguments, and their return values can be used in some way.  The hook's documentation says how the functions are called and how their return values are used.  Any functions added to an abnormal hook must follow the hook's calling convention.  By convention, abnormal hook names end in @samp{-functions}."
msgstr "フック変数の名前が@samp{-hook}で終わらなければ、それが恐らく@dfn{アブノーマルフック(abnormal hook)}であることを示しています。これらとノーマルフック違うのはフック関数が1つ以上の引数とともに呼ぶ出されること、何らかの方法によってそのリターン値が使用されることという2つの点です。その関数の呼び出し方や引数の使われ方はそのフックのドキュメントに記載されています。アブノーマルフックに追加する関数は、フックの呼び出し規約にしたがって関数を記述しなければなりません。慣習によりアブノーマルフックの名前の最後は@samp{-functions}です。"

#. type: cindex
#: original_texis/modes.texi:70
#, no-wrap
msgid "single-function hook"
msgstr "single-function hook"

#. type: Plain text
#: original_texis/modes.texi:76
msgid "If the name of the variable ends in @samp{-predicate} or @samp{-function} (singular) then its value must be a function, not a list of functions.  As with abnormal hooks, the expected arguments and meaning of the return value vary across such @emph{single function hooks}.  The details are explained in each variable's docstring."
msgstr "変数名の最後が@samp{-predicate}や@samp{-function} (単数形)なら、値は関数のリストではなく単一の関数でなければなりません。このような@emph{単一関数フック(single function hook)}が期待する引数やリターン値の意味はアブノーマルフックと同様さまざまです。それらの詳細については、各変数のdocstringで説明されています。"

#. type: Plain text
#: original_texis/modes.texi:91
msgid "Since hooks (both multi and single function) are variables, their values can be modified with @code{setq} or temporarily with @code{let}.  However, it is often useful to add or remove a particular function from a hook while preserving any other functions it might have.  For multi function hooks, the recommended way of doing this is with @code{add-hook} and @code{remove-hook} (@pxref{Setting Hooks}).  Most normal hook variables are initially void; @code{add-hook} knows how to deal with this.  You can add hooks either globally or buffer-locally with @code{add-hook}.  For hooks which hold only a single function, @code{add-hook} is not appropriate, but you can use @code{add-function} (@pxref{Advising Functions}) to combine new functions with the hook.  Note that some single function hooks may be @code{nil} which @code{add-function} cannot deal with, so you must check for that before calling @code{add-function}."
msgstr "フック(単一関数と複数関数の両方)とは変数なので、値は@code{setq}、または一時的に@code{let}で変更できます。しかしフックがもつ他の関数を保持しつつ、特定の関数の追加や削除ができると便利なことがあります。複数関数フックでこれを行う推奨方法は@code{add-hook}と@code{remove-hook}です(@ref{Setting Hooks}を参照)。ほとんどのノーマルフック変数の初期値はvoidであり、@code{add-hook}はこれを扱う方法を理解しています。フックへのグローバルまたはバッファーローカルな追加は@code{add-hook}で行うことができます。単一の関数だけを保持するフックでは@code{add-hook}は不適切ですが、フックに新たな関数を組み合わせるために@code{add-function} (@ref{Advising Functions}を参照)を使用できます。いくつかの単一関数フックは@code{add-function}が扱えない@code{nil}かもしれないので、@code{add-function}の呼び出し前にそれをチェックしなければならないことに注意してください。"

#. type: subsection
#: original_texis/modes.texi:95 original_texis/modes.texi:97
#: original_texis/modes.texi:98
#, no-wrap
msgid "Running Hooks"
msgstr "Running Hooks"

#. type: menuentry
#: original_texis/modes.texi:95
msgid "How to run a hook."
msgstr "フックの実行方法。"

#. type: subsection
#: original_texis/modes.texi:95 original_texis/modes.texi:146
#: original_texis/modes.texi:147
#, no-wrap
msgid "Setting Hooks"
msgstr "Setting Hooks"

#. type: menuentry
#: original_texis/modes.texi:95
msgid "How to put functions on a hook, or remove them."
msgstr "関数をフックに登録、削除する方法。"

#. type: Plain text
#: original_texis/modes.texi:103
msgid "In this section, we document the @code{run-hooks} function, which is used to run a normal hook.  We also document the functions for running various kinds of abnormal hooks."
msgstr "このセクションではノーマルフックを実行するために使用される@code{run-hooks}について説明します。またさまざまな種類のアブノーマルフックを実行する関数についても説明します。"

#. type: defun
#: original_texis/modes.texi:104
#, no-wrap
msgid "run-hooks &rest hookvars"
msgstr "run-hooks &rest hookvars"

#. type: defun
#: original_texis/modes.texi:109
msgid "This function takes one or more normal hook variable names as arguments, and runs each hook in turn.  Each argument should be a symbol that is a normal hook variable.  These arguments are processed in the order specified."
msgstr "この関数は引数として1つ以上のノーマルフック変数名を受け取って、各フックを順に実行する。引数はそれぞれノーマルフック変数であるようなシンボルであること。これらの引数は指定された順に処理される。"

#. type: defun
#: original_texis/modes.texi:113
msgid "If a hook variable has a non-@code{nil} value, that value should be a list of functions.  @code{run-hooks} calls all the functions, one by one, with no arguments."
msgstr "フック変数の値が非@code{nil}ならその値は関数のリストであること。@code{run-hooks}はすべての関数を引数なしで1つずつ呼び出す。"

#. type: defun
#: original_texis/modes.texi:117
msgid "The hook variable's value can also be a single function---either a lambda expression or a symbol with a function definition---which @code{run-hooks} calls.  But this usage is obsolete."
msgstr "フック変数の値には、単一の関数(ラムダ式、またはシンボルの関数定義)も指定でき、その場合@code{run-hooks}はそれを呼び出す。しかしこの使い方は時代遅れである。"

#. type: defun
#: original_texis/modes.texi:122
msgid "If the hook variable is buffer-local, the buffer-local variable will be used instead of the global variable.  However, if the buffer-local variable contains the element @code{t}, the global hook variable will be run as well."
msgstr "フック変数がバッファーローカルならグローバル変数のかわりにそのバッファーローカル変数が使用される。しかしそのバッファーローカル変数が要素@code{t}を含む場合には、そのグローバルフック変数も同様に実行されるだろう。"

#. type: defun
#: original_texis/modes.texi:124
#, no-wrap
msgid "run-hook-with-args hook &rest args"
msgstr "run-hook-with-args hook &rest args"

#. type: defun
#: original_texis/modes.texi:127
msgid "This function runs an abnormal hook by calling all the hook functions in @var{hook}, passing each one the arguments @var{args}."
msgstr "この関数は、@var{hook}内のすべての関数に1つの引数@var{args}を渡して呼び出すことによってアブノーマルフックを実行する。"

#. type: defun
#: original_texis/modes.texi:129
#, no-wrap
msgid "run-hook-with-args-until-failure hook &rest args"
msgstr "run-hook-with-args-until-failure hook &rest args"

#. type: defun
#: original_texis/modes.texi:135
msgid "This function runs an abnormal hook by calling each hook function in turn, stopping if one of them fails by returning @code{nil}.  Each hook function is passed the arguments @var{args}.  If this function stops because one of the hook functions fails, it returns @code{nil}; otherwise it returns a non-@code{nil} value."
msgstr "この関数は各フック関数を順に呼び出すことによりアブノーマルフック関数を実行し、それらのうち1つが@code{nil}をリターンして失敗すると停止する。それぞれのフック関数は引数として@var{args}を渡される。この関数はフック関数の1つが失敗して停止したら@code{nil}、それ以外は非@code{nil}値をリターンする。"

#. type: defun
#: original_texis/modes.texi:137
#, no-wrap
msgid "run-hook-with-args-until-success hook &rest args"
msgstr "run-hook-with-args-until-success hook &rest args"

#. type: defun
#: original_texis/modes.texi:144
msgid "This function runs an abnormal hook by calling each hook function, stopping if one of them succeeds by returning a non-@code{nil} value.  Each hook function is passed the arguments @var{args}.  If this function stops because one of the hook functions returns a non-@code{nil} value, it returns that value; otherwise it returns @code{nil}."
msgstr "この関数は各フック関数を順に呼び出すことによりアブノーマルフック関数を実行して、それらのうち1つが非@code{nil}値をリターンして成功したら停止する。それぞれのフック関数は引数として@var{args}を渡される。この関数はフック関数の1つが失敗して停止したらその値、それ以外は@code{nil}をリターンする。"

#. type: Plain text
#: original_texis/modes.texi:151
msgid "Here's an example that adds a function to a mode hook to turn on Auto Fill mode when in Lisp Interaction mode:"
msgstr "以下はLisp InteractionモードのときにAuto Fillモードをオンに切り替えるためにモードフックに関数を追加する例です:"

#. type: example
#: original_texis/modes.texi:154
#, no-wrap
msgid "(add-hook 'lisp-interaction-mode-hook 'auto-fill-mode)\n"
msgstr "(add-hook 'lisp-interaction-mode-hook 'auto-fill-mode)\n"

#. type: Plain text
#: original_texis/modes.texi:161
msgid "The value of a hook variable should be a list of functions.  You can manipulate that list using the normal Lisp facilities, but the modular way is to use the functions @code{add-hook} and @code{remove-hook}, defined below.  They take care to handle some unusual situations and avoid problems."
msgstr "フック変数の値は関数のリストにする必要があります。通常のLisp機能を使用してこのリストを操作できますが、モジュール方式では以下で説明する関数@code{add-hook}と@code{remove-hook}を使用します。これらの関数はいくつかの異常な状況を処理して問題を回避します。"

#. type: Plain text
#: original_texis/modes.texi:168
msgid "It works to put a @code{lambda}-expression function on a hook, but we recommend avoiding this because it can lead to confusion.  If you add the same @code{lambda}-expression a second time but write it slightly differently, you will get two equivalent but distinct functions on the hook.  If you then remove one of them, the other will still be on it."
msgstr "フックに@code{lambda}式を配置しても機能しますが、これは混乱を招くので避けることを推奨します。2回目は記述を微妙に変えて同じ@code{lambda}式を追加すると、そのフックは等価な2つの別々の関数をもつことになります。それから一方を削除しても、もう一方は残り続けるでしょう。"

#. type: defun
#: original_texis/modes.texi:169
#, no-wrap
msgid "add-hook hook function &optional depth local"
msgstr "add-hook hook function &optional depth local"

#. type: defun
#: original_texis/modes.texi:174
msgid "This function is the handy way to add function @var{function} to hook variable @var{hook}.  You can use it for abnormal hooks as well as for normal hooks.  @var{function} can be any Lisp function that can accept the proper number of arguments for @var{hook}.  For example,"
msgstr "この関数はフック変数に関数@var{function}を追加する手軽な方法である。ノーマルフックと同じようにアブノーマルフックにたいしてもこの関数を使用できる。@var{function}には正しい数の引数を受け付ける任意のLisp関数を指定できる。たとえば、"

#. type: example
#: original_texis/modes.texi:177
#, no-wrap
msgid "(add-hook 'text-mode-hook 'my-text-hook-function)\n"
msgstr "(add-hook 'text-mode-hook 'my-text-hook-function)\n"

#. type: defun
#: original_texis/modes.texi:181
msgid "adds @code{my-text-hook-function} to the hook called @code{text-mode-hook}."
msgstr "は@code{text-mode-hook}と呼ばれるフックに@code{my-text-hook-function}を追加する。"

#. type: defun
#: original_texis/modes.texi:184
msgid "If @var{function} is already present in @var{hook} (comparing using @code{equal}), then @code{add-hook} does not add it a second time."
msgstr "@var{hook}内に@var{function}がすでに存在する場合(比較には@code{equal}を使用)、@code{add-hook}は2回目の追加を行わない。"

#. type: defun
#: original_texis/modes.texi:189
msgid "If @var{function} has a non-@code{nil} property @code{permanent-local-hook}, then @code{kill-all-local-variables} (or changing major modes) won't delete it from the hook variable's local value."
msgstr "@var{function}のプロパティ@code{permanent-local-hook}が非@code{nil}なら@code{kill-all-local-variables}(またはメジャーモードを変更しても)はそのフック変数のローカル値から関数を削除しない。"

#. type: defun
#: original_texis/modes.texi:195
msgid "For a normal hook, hook functions should be designed so that the order in which they are executed does not matter.  Any dependence on the order is asking for trouble.  However, the order is predictable: normally, @var{function} goes at the front of the hook list, so it is executed first (barring another @code{add-hook} call)."
msgstr "ノーマルフックにたいしてフック関数は実行される順序に無関係であるようにデザインされるべきである。順序への依存はトラブルを招く。とはいえその順序は予測可能である。@var{function}は通常はフックリストの先頭に追加されるので、(他の@code{add-hook}呼び出しがなければ)それは最初に実行される。"

#. type: defun
#: original_texis/modes.texi:206
msgid "In some cases, it is important to control the relative ordering of functions on the hook.  The optional argument @var{depth} lets you indicate where the function should be inserted in the list: it should then be a number between -100 and 100 where the higher the value, the closer to the end of the list the function should go.  The @var{depth} defaults to 0 and for backward compatibility when @var{depth} is a non-@code{nil} symbol it is interpreted as a depth of 90.  Furthermore, when @var{depth} is strictly greater than 0 the function is added @emph{after} rather than before functions of the same depth.  One should never use a depth of 100 (or -100), because one can never be sure that no other function will ever need to come before (or after) us."
msgstr "いくつかのケースではフック上の相対順序の制御が重要になる。オプション引数によりリストのどこに関数を挿入するべきかを指定できる。値は-100から100の数値であり、より大きい値では関数はリストの終端に近づく。@var{depth}のデフォルトは0であり、後方互換のために非@code{nil}ならdepthを90と解釈する。さらに@var{depth}が厳密に0より大なら、関数は同じdepthの関数の前ではなく@emph{後}に追加される。あなたの関数の前(や後)に他の関数を配置する必要が絶対ないとは限らないので、100(や-100)のをdepthは決して使用しないこと。"

#. type: defun
#: original_texis/modes.texi:210
msgid "@code{add-hook} can handle the cases where @var{hook} is void or its value is a single function; it sets or changes the value to a list of functions."
msgstr "@code{add-hook}は@var{hook}がvoidのとき、または値が単一の関数の場合には、値を関数リストにセットまたは変更してそれらを扱うことができる。"

#. type: defun
#: original_texis/modes.texi:216
msgid "If @var{local} is non-@code{nil}, that says to add @var{function} to the buffer-local hook list instead of to the global hook list.  This makes the hook buffer-local and adds @code{t} to the buffer-local value.  The latter acts as a flag to run the hook functions in the default value as well as in the local value."
msgstr "@var{local}が非@code{nil}なら、グローバルフックリストではなくバッファーローカルフックリストに@var{function}を追加する。これはフックをバッファーローカルにして、そのバッファーローカルな値に@code{t}を追加する。バッファーローカルな値への@code{t}の追加は、ローカル値と同じようにデフォルト値でもフック関数を実行するためのフラグである。"

#. type: defun
#: original_texis/modes.texi:218
#, no-wrap
msgid "remove-hook hook function &optional local"
msgstr "remove-hook hook function &optional local"

#. type: defun
#: original_texis/modes.texi:223
msgid "This function removes @var{function} from the hook variable @var{hook}.  It compares @var{function} with elements of @var{hook} using @code{equal}, so it works for both symbols and lambda expressions."
msgstr "この関数はフック変数@var{hook}から@var{function}を削除する。これは@code{equal}を使用して@var{function}と@var{hook}要素を比較するので、その比較はシンボルとラムダ式の両方で機能する。"

#. type: defun
#: original_texis/modes.texi:226
msgid "If @var{local} is non-@code{nil}, that says to remove @var{function} from the buffer-local hook list instead of from the global hook list."
msgstr "@var{local}が非@code{nil}なら、それはグローバルフックリストではなくバッファーローカルフックリストから@var{function}を削除する。"

#. type: cindex
#: original_texis/modes.texi:230
#, no-wrap
msgid "major mode"
msgstr "major mode"

#. type: cindex
#: original_texis/modes.texi:232
#, no-wrap
msgid "major mode command"
msgstr "major mode command"

#. type: cindex
#: original_texis/modes.texi:233
#, no-wrap
msgid "suspend major mode temporarily"
msgstr "suspend major mode temporarily"

#. type: Plain text
#: original_texis/modes.texi:244
msgid "Major modes specialize Emacs for editing or interacting with particular kinds of text.  Each buffer has exactly one major mode at a time.  Every major mode is associated with a @dfn{major mode command}, whose name should end in @samp{-mode}.  This command takes care of switching to that mode in the current buffer, by setting various buffer-local variables such as a local keymap.  @xref{Major Mode Conventions}.  Note that unlike minor modes there is no way to ``turn off'' a major mode, instead the buffer must be switched to a different one.  However, you can temporarily @dfn{suspend} a major mode and later @dfn{restore} the suspended mode, see below."
msgstr "メジャーモードは特定の種類のテキストの編集や相互作用にたいしてEmacsを特化します。すべてのバッファーは一度に1つのメジャーモードをもちます。すべてのメジャーモードは、@dfn{メジャーモードコマンド(major mode command)}に関連付けられ、そのコマンド名は@samp{-mode}で終わるべきです。このコマンドは、ローカルキーマップのようなさまざまなバッファーローカル変数をセットすることにより、カレントバッファー内でそのモードに切り替える配慮をします。@ref{Major Mode Conventions}を参照してください。マイナーモードとは異なりメジャーモードを``オフに切り替える''手段は存在せず、かわりにバッファーは別のメジャーモードに切り替えられなければなりません。しかしメジャーモードを一時的に@dfn{サスペンド}して、後でサスペンドしたモードを@dfn{リストア}できます。以下を参照してください。"

#. type: Plain text
#: original_texis/modes.texi:247
msgid "The least specialized major mode is called @dfn{Fundamental mode}, which has no mode-specific definitions or variable settings."
msgstr "@dfn{Fundamentalモード}と呼ばれるモードはもっとも特化されていないメジャーモードであり、モード特有な定義や変数セッティングをもちません。"

#. type: deffn
#: original_texis/modes.texi:248
#, no-wrap
msgid "Command fundamental-mode"
msgstr "Command fundamental-mode"

#. type: deffn
#: original_texis/modes.texi:252
msgid "This is the major mode command for Fundamental mode.  Unlike other mode commands, it does @emph{not} run any mode hooks (@pxref{Major Mode Conventions}), since you are not supposed to customize this mode."
msgstr "これはFundamentalモードにたいするメジャーモードコマンドである。他のモードコマンドと異なり、このモードはカスタマイズしてはならないことになっているので、モードフックは何も@emph{実行されない}(@ref{Major Mode Conventions}を参照)。"

#. type: defun
#: original_texis/modes.texi:254
#, no-wrap
msgid "major-mode-suspend"
msgstr "major-mode-suspend"

#. type: defun
#: original_texis/modes.texi:262
msgid "This function works like @code{fundamental-mode}, in that it kills all buffer-local variables, but it also records the major mode in effect, so that it could subsequently be restored.  This function and @code{major-mode-restore} (described next) are useful when you need to put a buffer under some specialized mode other than the one Emacs chooses for it automatically (@pxref{Auto Major Mode}), but would also like to be able to switch back to the original mode later."
msgstr "この関数はすべてのバッファーローカル変数をkillする点において@code{fundamental-mode}のように機能するが、これは後でリストアできるように効力をもつメジャーモードを記録する。この関数と@code{major-mode-restore} (以下参照)は、Emacsがそのバッファー用に自動的に選択したモード(@ref{Auto Major Mode}を参照)ではない何らかの特化したモードにバッファーを置く必要があり、なおかつ後で元のモードに戻れるようにしたい場合に有用。"

#. type: defun
#: original_texis/modes.texi:264
#, no-wrap
msgid "major-mode-restore &optional avoided-modes"
msgstr "major-mode-restore &optional avoided-modes"

#. type: defun
#: original_texis/modes.texi:270
msgid "This function restores the major mode recorded by @code{major-mode-suspend}.  If no major mode was recorded, this function calls @code{normal-mode} (@pxref{Auto Major Mode, normal-mode}), but tries to force it not to choose any modes in @var{avoided-modes}, if that argument is non-@code{nil}."
msgstr "この関数は@code{major-mode-suspend}が記録したメジャーモードをリストアする。メジャーモードが何も記録されていなければ、この関数は@code{normal-mode} (@ref{Auto Major Mode, normal-mode}を参照)を呼び出すが、@var{avoided-modes}引数が非@code{nil}ならこの引数内のモードを選択させないように試みる。"

#. type: defun
#: original_texis/modes.texi:272
#, no-wrap
msgid "clean-mode"
msgstr "clean-mode"

#. type: defun
#: original_texis/modes.texi:282
msgid "Changing the major mode clears out most local variables, but it doesn't remove all artifacts in the buffer (like text properties and overlays).  It's rare to change a buffer from one major mode to another (except from @code{fundamental-mode} to everything else), so this is usually not a concern.  It can sometimes be convenient (mostly when debugging a problem in a buffer) to do a ``full reset'' of the buffer, and that's what the @code{clean-mode} major mode offers.  It will kill all local variables (even the permanently local ones), and also removes all overlays and text properties."
msgstr "メジャーモード変更によってほとんどのローカル変数はクリアーされるが、バッファー内に残された残置物(テキストプロパティやオーバーレイなど)がすべて削除される訳ではない。あるバッファーのメジャーモードを別のモードに変更することは稀であり、これは通常なら問題にならない(@code{fundamental-mode}からそれ以外のメジャーモードへの変更は除く)。バッファーの``完全リセット''を行うことができれば、(主としてバッファーでの問題をデバッグ中には)便利なときがあるかもしれず、正にそれがメジャーモード@code{clean-mode}の提供する機能である。これはすべてのローカル変数(永続的なローカル変数さえも)をkillするとともに、すべてのオーバーレイおよびテキストプロパティを削除する。"

#. type: Plain text
#: original_texis/modes.texi:291
msgid "The easiest way to write a major mode is to use the macro @code{define-derived-mode}, which sets up the new mode as a variant of an existing major mode.  @xref{Derived Modes}.  We recommend using @code{define-derived-mode} even if the new mode is not an obvious derivative of another mode, as it automatically enforces many coding conventions for you.  @xref{Basic Major Modes}, for common modes to derive from."
msgstr "メジャーモードを記述するもっとも簡単な方法はマクロ@code{define-derived-mode}を使用する方法です。これは既存のメジャーモードを変形して新たなモードをセットアップします。@ref{Derived Modes}を参照してください。@code{define-derived-mode}は多くのコーディング規約を自動的に強要するので、たとえ新たなモードが他のモードから明示的に派生されない場合でも、わたしたちは@code{define-derived-mode}の使用を推奨します。派生元とするための一般的なモードについては@ref{Basic Major Modes}を参照してください。"

#. type: Plain text
#: original_texis/modes.texi:296
msgid "The standard GNU Emacs Lisp directory tree contains the code for several major modes, in files such as @file{text-mode.el}, @file{texinfo.el}, @file{lisp-mode.el}, and @file{rmail.el}.  You can study these libraries to see how modes are written."
msgstr "標準的なGNU EmacsのLispディレクトリーツリーには、いくつかのメジャーモードが@file{text-mode.el}、@file{texinfo.el}、@file{lisp-mode.el}、@file{rmail.el}のようなファイルとして含まれています。モードの記述方法を確認するために、これらのライブラリーを学ぶことができます。"

#. type: defopt
#: original_texis/modes.texi:297
#, no-wrap
msgid "major-mode"
msgstr "major-mode"

#. type: defopt
#: original_texis/modes.texi:301
msgid "The buffer-local value of this variable holds the symbol for the current major mode.  Its default value holds the default major mode for new buffers.  The standard default value is @code{fundamental-mode}."
msgstr "この変数のバッファーローカル値はカレントのメジャーモードにたいするシンボルを保持する。この変数のデフォルト値は新たなバッファーにたいするデフォルトのメジャーモードを保持する。標準的なデフォルト値は@code{fundamental-mode}である。"

#. type: defopt
#: original_texis/modes.texi:308
msgid "If the default value is @code{nil}, then whenever Emacs creates a new buffer via a command such as @kbd{C-x b} (@code{switch-to-buffer}), the new buffer is put in the major mode of the previously current buffer.  As an exception, if the major mode of the previous buffer has a @code{mode-class} symbol property with value @code{special}, the new buffer is put in Fundamental mode (@pxref{Major Mode Conventions})."
msgstr "デフォルト値が@code{nil}なら、@kbd{C-x b} (@code{switch-to-buffer})のようなコマンドを通じてEmacsが新たなバッファーを作成したとき、新たなバッファーは以前カレントだったバッファーのメジャーモードになる。例外として以前のバッファーのメジャーモードのシンボルプロパティ@code{mode-class}が値@code{special}をもつ場合には、新たなバッファーはFundamentalモードになる(@ref{Major Mode Conventions}を参照)。"

#. type: subsection
#: original_texis/modes.texi:322 original_texis/modes.texi:324
#: original_texis/modes.texi:325
#, no-wrap
msgid "Major Mode Conventions"
msgstr "Major Mode Conventions"

#. type: menuentry
#: original_texis/modes.texi:322
msgid "Coding conventions for keymaps, etc."
msgstr "キーマップなどにたいするコーディング規約。"

#. type: node
#: original_texis/modes.texi:322 original_texis/modes.texi:613
#, no-wrap
msgid "Auto Major Mode"
msgstr "Auto Major Mode"

#. type: menuentry
#: original_texis/modes.texi:322
msgid "How Emacs chooses the major mode automatically."
msgstr "Emacsが自動的にメジャーモードを選択する方法。"

#. type: node
#: original_texis/modes.texi:322 original_texis/modes.texi:787
#, no-wrap
msgid "Mode Help"
msgstr "Mode Help"

#. type: menuentry
#: original_texis/modes.texi:322
msgid "Finding out how to use a mode."
msgstr "モードの使用方法の探し方。"

#. type: node
#: original_texis/modes.texi:322 original_texis/modes.texi:809
#, no-wrap
msgid "Derived Modes"
msgstr "Derived Modes"

#. type: menuentry
#: original_texis/modes.texi:322
msgid "Defining a new major mode based on another major mode."
msgstr "他のメジャーモードにもとづき新たなメジャーモードを定義する。"

#. type: subsection
#: original_texis/modes.texi:322 original_texis/modes.texi:940
#: original_texis/modes.texi:941
#, no-wrap
msgid "Basic Major Modes"
msgstr "Basic Major Modes"

#. type: menuentry
#: original_texis/modes.texi:322
msgid "Modes that other modes are often derived from."
msgstr "他のモードからよく派生元とされるモード。"

#. type: subsection
#: original_texis/modes.texi:322 original_texis/modes.texi:996
#: original_texis/modes.texi:997
#, no-wrap
msgid "Mode Hooks"
msgstr "Mode Hooks"

#. type: menuentry
#: original_texis/modes.texi:322
msgid "Hooks run at the end of major mode functions."
msgstr "メジャーモード関数の最後に実行されるフック。"

#. type: node
#: original_texis/modes.texi:322 original_texis/modes.texi:1059
#, no-wrap
msgid "Tabulated List Mode"
msgstr "Tabulated List Mode"

#. type: menuentry
#: original_texis/modes.texi:322
msgid "Parent mode for buffers containing tabulated data."
msgstr "表形式データを含むバッファーにたいする親モード。"

#. type: subsection
#: original_texis/modes.texi:322 original_texis/modes.texi:1294
#: original_texis/modes.texi:1295
#, no-wrap
msgid "Generic Modes"
msgstr "Generic Modes"

#. type: menuentry
#: original_texis/modes.texi:322
msgid "Defining a simple major mode that supports comment syntax and Font Lock mode."
msgstr "コメント構文とFont Lockモードをサポートするシンプルなメジャーモードの定義。"

#. type: node
#: original_texis/modes.texi:322 original_texis/modes.texi:1335
#, no-wrap
msgid "Example Major Modes"
msgstr "Example Major Modes"

#. type: menuentry
#: original_texis/modes.texi:322
msgid "Text mode and Lisp modes."
msgstr "TextモードとLispモード。"

#. type: cindex
#: original_texis/modes.texi:326
#, no-wrap
msgid "major mode conventions"
msgstr "major mode conventions"

#. type: cindex
#: original_texis/modes.texi:327
#, no-wrap
msgid "conventions for writing major modes"
msgstr "conventions for writing major modes"

#. type: Plain text
#: original_texis/modes.texi:332
msgid "The code for every major mode should follow various coding conventions, including conventions for local keymap and syntax table initialization, function and variable names, and hooks."
msgstr "メジャーモードにたいするすべてのコードはさまざまなコーディング規約にしたがうべきであり、それらの規約にはローカルキーマップおよび構文テーブルの初期化、関数名や変数名、フックにたいする規約が含まれます。"

#. type: Plain text
#: original_texis/modes.texi:337
msgid "If you use the @code{define-derived-mode} macro, it will take care of many of these conventions automatically.  @xref{Derived Modes}.  Note also that Fundamental mode is an exception to many of these conventions, because it represents the default state of Emacs."
msgstr "@code{define-derived-mode}マクロを使用すれば、これらの規約を自動的に配慮します。@ref{Derived Modes}を参照してください。FundamentalモードはEmacsのデフォルト状態を表すモードなので、これらの規約が該当しないことに注意してください。"

#. type: Plain text
#: original_texis/modes.texi:344
msgid "The following list of conventions is only partial.  Each major mode should aim for consistency in general with other Emacs major modes, as this makes Emacs as a whole more coherent.  It is impossible to list here all the possible points where this issue might come up; if the Emacs developers point out an area where your major mode deviates from the usual conventions, please make it compatible."
msgstr "以下の規約リストはほんの一部です。一般的にすべてのメジャーモードはEmacs全体が首尾一貫するよう、他のEmacsメジャーモードとの一貫性を目指すべきです。ここでこの問題を洗い出すすべての想定される要点をリストするのは不可能です。自身の開発するメジャーモードが通常の規約を逸脱する領域を示すような場合には、Emacs開発者は互換性を保つようにしてください。"

#. type: itemize
#: original_texis/modes.texi:352
msgid "Define a major mode command whose name ends in @samp{-mode}.  When called with no arguments, this command should switch to the new mode in the current buffer by setting up the keymap, syntax table, and buffer-local variables in an existing buffer.  It should not change the buffer's contents."
msgstr "名前が@samp{-mode}で終わるようにメジャーモードコマンドを定義する。引数なしで呼び出されたときこのコマンドはキーマップ、構文テーブル、既存バッファーのバッファーローカル変数をセットアップして、カレントバッファーを新たなモードに切り替えること。そのバッファーのコンテンツを変更しないこと。"

#. type: itemize
#: original_texis/modes.texi:356
msgid "Write a documentation string for this command that describes the special commands available in this mode.  @xref{Mode Help}."
msgstr "そのモードで利用できる特別なコマンドを説明するドキュメント文字列を記述する。@ref{Mode Help}を参照のこと。"

#. type: itemize
#: original_texis/modes.texi:362
msgid "The documentation string may include the special documentation substrings, @samp{\\[@var{command}]}, @samp{\\@{@var{keymap}@}}, and @samp{\\<@var{keymap}>}, which allow the help display to adapt automatically to the user's own key bindings.  @xref{Keys in Documentation}."
msgstr "そのユーザー自身のキーバインディングに自動的に適合してヘルプが表示されるように、ドキュメント文字列に特別なドキュメントサブストリング@samp{\\[@var{command}]}、@samp{\\@{@var{keymap}@}}、@samp{\\<@var{keymap}>}を含めるとよいかもしれない。@ref{Keys in Documentation}を参照のこと。"

#. type: itemize
#: original_texis/modes.texi:369
msgid "The major mode command should start by calling @code{kill-all-local-variables}.  This runs the normal hook @code{change-major-mode-hook}, then gets rid of the buffer-local variables of the major mode previously in effect.  @xref{Creating Buffer-Local}."
msgstr "メジャーモードコマンドは@code{kill-all-local-variables}を呼び出すことによって開始すること。これはノーマルフック@code{change-major-mode-hook}を実行してから、前のメジャーモードで効力のあったバッファーローカル変数を解放する。@ref{Creating Buffer-Local}を参照のこと。"

#. type: itemize
#: original_texis/modes.texi:374
msgid "The major mode command should set the variable @code{major-mode} to the major mode command symbol.  This is how @code{describe-mode} discovers which documentation to print."
msgstr "メジャーモードコマンドは変数@code{major-mode}にメジャーモードコマンドのシンボルをセットすること。これは@code{describe-mode}がプリントするドキュメントを探す手掛かりとなる。"

#. type: itemize
#: original_texis/modes.texi:380
msgid "The major mode command should set the variable @code{mode-name} to the ``pretty'' name of the mode, usually a string (but see @ref{Mode Line Data}, for other possible forms).  The name of the mode appears in the mode line."
msgstr "メジャーモードコマンドは変数@code{mode-name}にそのモードの``愛称(pretty name)''をセットすること(これは通常は文字列だが他の利用可能な形式については@ref{Mode Line Data}を参照)。このモード名はモードラインに表示される。"

#. type: itemize
#: original_texis/modes.texi:385
msgid "Calling the major mode command twice in direct succession should not fail and should do the same thing as calling the command only once.  In other words, the major mode command should be idempotent."
msgstr "連続してメジャーモードコマンドを直接呼び出しても失敗せずに、1回だけ呼び出されたときと同じことを行うこと。言い換えるとメジャーモードコマンドはべき等であること。"

#. type: cindex
#: original_texis/modes.texi:387
#, no-wrap
msgid "functions in modes"
msgstr "functions in modes"

#. type: itemize
#: original_texis/modes.texi:392
msgid "Since all global names are in the same name space, all the global variables, constants, and functions that are part of the mode should have names that start with the major mode name (or with an abbreviation of it if the name is long).  @xref{Coding Conventions}."
msgstr "すべてのグローバル名は同じネームスペースにあるので、モードの一部であるようなすべてのグローバルな変数、定数、関数はメジャーモード名(メジャーモード名が長いようなら短縮名)で始まる名前をもつこと。@ref{Coding Conventions}を参照されたい。"

#. type: itemize
#: original_texis/modes.texi:399
msgid "In a major mode for editing some kind of structured text, such as a programming language, indentation of text according to structure is probably useful.  So the mode should set @code{indent-line-function} to a suitable function, and probably customize other variables for indentation.  @xref{Auto-Indentation}."
msgstr "プログラム言語のようなある種の構造型テキストを編集するためのメジャーモードでは、その構造に応じたテキストのインデントがおそらく有用であろう。したがってそのようなモードは@code{indent-line-function}に適切な関数をセットするとともに、インデント用のその他の変数をカスタマイズするべきだろう。@ref{Auto-Indentation}を参照のこと。"

#. type: cindex
#: original_texis/modes.texi:401
#, no-wrap
msgid "keymaps in modes"
msgstr "keymaps in modes"

#. type: itemize
#: original_texis/modes.texi:406
msgid "The major mode should usually have its own keymap, which is used as the local keymap in all buffers in that mode.  The major mode command should call @code{use-local-map} to install this local map.  @xref{Active Keymaps}, for more information."
msgstr "メジャーモードは、通常はそのモードにあるすべてのバッファーのローカルキーマップとして使用されるモード自身のキーマップをもつこと。メジャーモードコマンドはそのローカルマップをインストールするために、@code{use-local-map}を呼び出すこと。詳細は@ref{Active Keymaps}を参照されたい。"

#. type: itemize
#: original_texis/modes.texi:410
msgid "This keymap should be stored permanently in a global variable named @code{@var{modename}-mode-map}.  Normally the library that defines the mode sets this variable."
msgstr "このキーマップは@code{@var{modename}-mode-map}という名前のグローバル変数に永続的に格納されること。そのモードを定義するライブラリーは、通常はこの変数をセットする。"

#. type: itemize
#: original_texis/modes.texi:413
msgid "@xref{Tips for Defining}, for advice about how to write the code to set up the mode's keymap variable."
msgstr "モード用のキーマップ変数をセットアップするコードの記述する方法に関するアドバイスは@ref{Tips for Defining}を参照されたい。"

#. type: itemize
#: original_texis/modes.texi:420
msgid "The key sequences bound in a major mode keymap should usually start with @kbd{C-c}, followed by a control character, a digit, or @kbd{@{}, @kbd{@}}, @kbd{<}, @kbd{>}, @kbd{:} or @kbd{;}.  The other punctuation characters are reserved for minor modes, and ordinary letters are reserved for users."
msgstr "メジャーモードのキーマップ内でバインドされるキーシーケンスは、通常は@kbd{C-c}で始まってその後にコントロール文字、数字、@kbd{@{}、@kbd{@}}、@kbd{<}、@kbd{>}、@kbd{:}、@kbd{;}が続くこと。その他の記号文字(punctuation characters)はマイナーモード、通常のアルファベット文字はユーザー用に予約済みである。"

#. type: itemize
#: original_texis/modes.texi:425
msgid "A major mode can also rebind the keys @kbd{M-n}, @kbd{M-p} and @kbd{M-s}.  The bindings for @kbd{M-n} and @kbd{M-p} should normally be some kind of moving forward and backward, but this does not necessarily mean cursor motion."
msgstr "メジャーモードは@kbd{M-n}、@kbd{M-p}、@kbd{M-s}などのキーもリバインドできる。@kbd{M-n}と@kbd{M-p}にたいするバインディングは、通常は 前方か後方への移動を意味するような類のものであるべきだが、これが必ずしもカーソル移動を意味する必要はない。"

#. type: itemize
#: original_texis/modes.texi:434
msgid "It is legitimate for a major mode to rebind a standard key sequence if it provides a command that does the same job in a way better suited to the text this mode is used for.  For example, a major mode for editing a programming language might redefine @kbd{C-M-a} to move to the beginning of a function in a way that works better for that language.  The recommended way of tailoring @kbd{C-M-a} to the needs of a major mode is to set @code{beginning-of-defun-function} (@pxref{List Motion}) to invoke the function specific to the mode."
msgstr "そのモードにより適した方法でテキストに同じ処理を行うコマンドを提供する場合には、メジャーモードが標準的なキーシーケンスをリバインドするのは正当性がある。たとえばプログラム言語を編集するためのメジャーモードは、その言語にとって関数の先頭に移動するために、より良く機能する方法で@kbd{C-M-a}を再定義するかもしれない。メジャーモードにニーズに応じて@kbd{C-M-a}を構成するための推奨方法は、そのモード固有の関数を呼び出すために@code{beginning-of-defun-function}をセットすること(@ref{List Motion}を参照)。"

#. type: itemize
#: original_texis/modes.texi:441
msgid "It is also legitimate for a major mode to rebind a standard key sequence whose standard meaning is rarely useful in that mode.  For instance, minibuffer modes rebind @kbd{M-r}, whose standard meaning is rarely of any use in the minibuffer.  Major modes such as Dired or Rmail that do not allow self-insertion of text can reasonably redefine letters and other printing characters as special commands."
msgstr "ある標準的なキーシーケンスの標準的な意味がそのモードではほとんど役に立たないような場合にも、メジャーモードが標準的なキーシーケンスをリバインドする正当性がある。たとえば@kbd{M-r}の標準的な意味はミニバッファーではほとんど使用されないので、このキーシーケンスをリバインドする。テキストの自己挿入を許さないDiredやRmailのようなメジャーモードがアルファベット文字や、その他のプリント文字を特別なコマンドに再定義することには正当性がある。"

#. type: itemize
#: original_texis/modes.texi:448
msgid "Major modes for editing text should not define @key{RET} to do anything other than insert a newline.  However, it is ok for specialized modes for text that users don't directly edit, such as Dired and Info modes, to redefine @key{RET} to do something entirely different."
msgstr "テキストを編集するメジャーモードは改行の挿入以外の何かに@key{RET}を定義すべきではない。しかしユーザーが直接テキストを編集しない、DiredやInfoのような特別なモードにたいしては完全に異なることを行うように@key{RET}を再定義しても構わない。"

#. type: itemize
#: original_texis/modes.texi:455
msgid "Major modes should not alter options that are primarily a matter of user preference, such as whether Auto-Fill mode is enabled.  Leave this to each user to decide.  However, a major mode should customize other variables so that Auto-Fill mode will work usefully @emph{if} the user decides to use it."
msgstr "メジャーモードは、たとえばAuto-Fillモードを有効にする等の、主にユーザーの好みに関するオプションを変更しないこと。それらのオプションはユーザーに選択に任せること。ただし@emph{もし}ユーザーがAuto-Fillモードを使用すると決定したら、それが便利に機能するように他の変数をカスタマイズすること。"

#. type: cindex
#: original_texis/modes.texi:457
#, no-wrap
msgid "syntax tables in modes"
msgstr "syntax tables in modes"

#. type: itemize
#: original_texis/modes.texi:462
msgid "The mode may have its own syntax table or may share one with other related modes.  If it has its own syntax table, it should store this in a variable named @code{@var{modename}-mode-syntax-table}.  @xref{Syntax Tables}."
msgstr "モードは自身の構文テーブルをもつことができ、他の関連するモードと構文テーブルを共有するかもすることもできる。モードが自身の構文テーブルをもつ場合には、@code{@var{modename}-mode-syntax-table}という名前の変数にそれを格納すること。@ref{Syntax Tables}を参照されたい。"

#. type: itemize
#: original_texis/modes.texi:467
msgid "If the mode handles a language that has a syntax for comments, it should set the variables that define the comment syntax.  @xref{Options for Comments,, Options Controlling Comments, emacs, The GNU Emacs Manual}."
msgstr "コメントにたいする構文をもつ言語を扱うモードは、コメント構文を定義する変数をセットすること。@ref{Options for Comments,, Options Controlling Comments, emacs, The GNU Emacs Manual}を参照されたい。"

#. type: cindex
#: original_texis/modes.texi:469
#, no-wrap
msgid "abbrev tables in modes"
msgstr "abbrev tables in modes"

#. type: itemize
#: original_texis/modes.texi:476
msgid "The mode may have its own abbrev table or may share one with other related modes.  If it has its own abbrev table, it should store this in a variable named @code{@var{modename}-mode-abbrev-table}.  If the major mode command defines any abbrevs itself, it should pass @code{t} for the @var{system-flag} argument to @code{define-abbrev}.  @xref{Defining Abbrevs}."
msgstr "モードは自身のabbrevテーブルをもつことができ、他の関連するモードと構文テーブルを共有することもできる。モードが自身のabbrevテーブルをもつ場合には、@code{@var{modename}-mode-abbrev-table}という名前の変数にそれを格納すること。メジャーモードコマンドが自身で何らかのabbrevを定義する場合には、@code{define-abbrev}の@var{system-flag}引数に@code{t}を渡すこと。@ref{Defining Abbrevs}を参照されたい。"

#. type: itemize
#: original_texis/modes.texi:481
msgid "The mode should specify how to do highlighting for Font Lock mode, by setting up a buffer-local value for the variable @code{font-lock-defaults} (@pxref{Font Lock Mode})."
msgstr "モードは変数@code{font-lock-defaults}にバッファーローカルな値をセットすることによって、Font Lockモードにたいしてハイライトする方法を指定すること(@ref{Font Lock Mode}を参照)。"

#. type: itemize
#: original_texis/modes.texi:485
msgid "Each face that the mode defines should, if possible, inherit from an existing Emacs face.  @xref{Basic Faces}, and @ref{Faces for Font Lock}."
msgstr "モードが定義するすべてのフェイスは、もし可能なら既存のEmacsフェイスを継承すること。@ref{Basic Faces}と@ref{Faces for Font Lock}を参照されたい。"

#. type: itemize
#: original_texis/modes.texi:491
msgid "Consider adding a mode-specific menu to the menu bar.  This should preferably include the most important menu-specific settings and commands that will allow users discovering the main features quickly and efficiently."
msgstr "メニューバーへのモード固有メニュー追加を検討すること。ユーザーが迅速かつ効率的に主機能を発見できるよう、もっとも重要なモード固有のセッティングとコマンドを含めることが望ましい。"

#. type: cindex
#: original_texis/modes.texi:493
#, no-wrap
msgid "context menus, for a major mode"
msgstr "context menus, for a major mode"

#. type: vindex
#: original_texis/modes.texi:494
#, no-wrap
msgid "context-menu-functions"
msgstr "context-menu-functions"

#. type: itemize
#: original_texis/modes.texi:501
msgid "Consider adding mode-specific context menus for the mode, to be used if and when users activate the @code{context-menu-mode} (@pxref{Menu Mouse Clicks,,, emacs, The Emacs Manual}).  To this end, define a mode-specific function which builds one or more menus depending on the location of the @kbd{mouse-3} click in the buffer, and then add that function to the buffer-local value of @code{context-menu-functions}."
msgstr "そのモードにたいして、ユーザーが@code{context-menu-mode} (@ref{Menu Mouse Clicks,,, emacs, The Emacs Manual}を参照)をアクティブにした際に使用されるモード固有のコンテキストメニューの追加を検討すること。これを達成するにはバッファー内で@kbd{mouse-3}がクリックされた位置に応じて1つ以上のメニューを構築するモード固有関数の定義して、@code{context-menu-functions}のバッファーローカル値にその関数を追加すればよい。"

#. type: itemize
#: original_texis/modes.texi:509
msgid "The mode should specify how Imenu should find the definitions or sections of a buffer, by setting up a buffer-local value for the variable @code{imenu-generic-expression}, for the two variables @code{imenu-prev-index-position-function} and @code{imenu-extract-index-name-function}, or for the variable @code{imenu-create-index-function} (@pxref{Imenu})."
msgstr "モードは変数@code{imenu-generic-expression}、@code{imenu-prev-index-position-function}と@code{imenu-extract-index-name-function}の2つの変数、または変数@code{imenu-create-index-function}にバッファーローカルな値をセットすることによってImenuがバッファー内の定義やセクションを探す方法を指定すること(@ref{Imenu}を参照)。"

#. type: itemize
#: original_texis/modes.texi:515
msgid "The mode can tell ElDoc mode how to retrieve different types of documentation for whatever is at point, by adding one or more buffer-local entries to the special hook @code{eldoc-documentation-functions}."
msgstr "モードはスペシャルフック@code{eldoc-documentation-functions}に1つ以上のバッファーローカルエントリーを追加することにより、ポイント位置にあるものにたいして異なるタイプのドキュメントを取得する方法をElDocモードに指示できる。"

#. type: itemize
#: original_texis/modes.texi:520
msgid "The mode can specify how to complete various keywords by adding one or more buffer-local entries to the special hook @code{completion-at-point-functions}.  @xref{Completion in Buffers}."
msgstr "モードはスペシャルフック@code{completion-at-point-functions}に1つ以上のバッファーローカルエントリーを追加することにより、さまざまなキーワードの補完方法を指定できる。@ref{Completion in Buffers}を参照のこと。"

#. type: cindex
#: original_texis/modes.texi:522
#, no-wrap
msgid "buffer-local variables in modes"
msgstr "buffer-local variables in modes"

#. type: itemize
#: original_texis/modes.texi:529
msgid "To make a buffer-local binding for an Emacs customization variable, use @code{make-local-variable} in the major mode command, not @code{make-variable-buffer-local}.  The latter function would make the variable local to every buffer in which it is subsequently set, which would affect buffers that do not use this mode.  It is undesirable for a mode to have such global effects.  @xref{Buffer-Local Variables}."
msgstr "Emacsのカスタマイズ変数にたいしてバッファーローカルなバインディングを作成するには、@code{make-variable-buffer-local}ではなくメジャーモードコマンド内で@code{make-local-variable}を使用すること。関数@code{make-variable-buffer-local}はそれ以降にカスタマイズ変数をセットするすべてのバッファーにたいしてその変数をローカルにして、そのモードを使用しないバッファーにたいしても影響があるだろう。そのようなグローバルな効果はモードにとって好ましくない。@ref{Buffer-Local Variables}を参照のこと。"

#. type: itemize
#: original_texis/modes.texi:534
msgid "With rare exceptions, the only reasonable way to use @code{make-variable-buffer-local} in a Lisp package is for a variable which is used only within that package.  Using it on a variable used by other packages would interfere with them."
msgstr "稀な例外としてLispパッケージ内で@code{make-variable-buffer-local}を使用する唯一の正当な方法は、そのパッケージ内でのみ使用される変数にたいして使用をする場合である。他のパッケージにより使用される変数にたいしてこの関数を使用すると競合が発生するだろう。"

#. type: cindex
#: original_texis/modes.texi:536
#, no-wrap
msgid "mode hook"
msgstr "mode hook"

#. type: cindex
#: original_texis/modes.texi:537
#, no-wrap
msgid "major mode hook"
msgstr "major mode hook"

#. type: itemize
#: original_texis/modes.texi:545
msgid "Each major mode should have a normal @dfn{mode hook} named @code{@var{modename}-mode-hook}.  The very last thing the major mode command should do is to call @code{run-mode-hooks}.  This runs the normal hook @code{change-major-mode-after-body-hook}, the mode hook, the function @code{hack-local-variables} (when the buffer is visiting a file), and then the normal hook @code{after-change-major-mode-hook}.  @xref{Mode Hooks}."
msgstr "すべてのメジャーモードは@code{@var{modename}-mode-hook}という名前のノーマルな@dfn{モードフック(mode hook)}をもつこと。メジャーモードコマンドが一番最後に@code{run-mode-hooks}を呼び出すこと。これはノーマルフック@code{change-major-mode-after-body-hook}、モードフック、(バッファーがファイルをvisitしていれば)関数@code{hack-local-variables}、その後にノーマルフック@code{after-change-major-mode-hook}を実行する。@ref{Mode Hooks}を参照のこと。"

#. type: itemize
#: original_texis/modes.texi:555
msgid "The major mode command may start by calling some other major mode command (called the @dfn{parent mode}) and then alter some of its settings.  A mode that does this is called a @dfn{derived mode}.  The recommended way to define one is to use the @code{define-derived-mode} macro, but this is not required.  Such a mode should call the parent mode command inside a @code{delay-mode-hooks} form.  (Using @code{define-derived-mode} does this automatically.)  @xref{Derived Modes}, and @ref{Mode Hooks}."
msgstr "メジャーモードコマンドは@dfn{親モード(parent mode)}と呼ばれる他のいくつかのメジャーモードを呼び出すことにより開始されるかもしれず、それらのセッティングのいくつかを変更するかもしれない。これを行うモードは@dfn{派生モード(derived mode)}と呼ばれる。派生モードを定義する推奨方法は@code{define-derived-mode}マクロの使用だが必須ではない。そのようなモードは@code{delay-mode-hooks}フォーム内で親のモードコマンドを呼び出すこと(@code{define-derived-mode}は自動的にこれを行う)。@ref{Derived Modes}と@ref{Mode Hooks}を参照されたい。"

#. type: itemize
#: original_texis/modes.texi:560
msgid "If something special should be done if the user switches a buffer from this mode to any other major mode, this mode can set up a buffer-local value for @code{change-major-mode-hook} (@pxref{Creating Buffer-Local})."
msgstr "ユーザーがそのモードのバッファーから他のモードのバッファーに切り替える際に特別な何かを行う必要がある場合、モードは@code{change-major-mode-hook}にたいしてバッファーローカル値をセットアップできる(@ref{Creating Buffer-Local}を参照)。"

#. type: itemize
#: original_texis/modes.texi:567
msgid "If this mode is appropriate only for specially-prepared text produced by the mode itself (rather than by the user typing at the keyboard or by an external file), then the major mode command symbol should have a property named @code{mode-class} with value @code{special}, put on as follows:"
msgstr "そのモードが、(ユーザーがキーボードでタイプしたテキストや外部ファイルのテキストではなく)モード自身が生成する特別に用意されたテキストにたいしてのみ適している場合、メジャーモードコマンドのシンボルは以下のように@code{mode-class}という名前のプロパティに値@code{special}をputすること:"

#. type: kindex
#: original_texis/modes.texi:568
#, no-wrap
msgid "mode-class @r{(property)}"
msgstr "mode-class @r{(property)}"

#. type: cindex
#: original_texis/modes.texi:569
#, no-wrap
msgid "@code{special} modes"
msgstr "@code{special} modes"

#. type: example
#: original_texis/modes.texi:572
#, no-wrap
msgid "(put 'funny-mode 'mode-class 'special)\n"
msgstr "(put 'funny-mode 'mode-class 'special)\n"

#. type: itemize
#: original_texis/modes.texi:582
msgid "This tells Emacs that new buffers created while the current buffer is in Funny mode should not be put in Funny mode, even though the default value of @code{major-mode} is @code{nil}.  By default, the value of @code{nil} for @code{major-mode} means to use the current buffer's major mode when creating new buffers (@pxref{Auto Major Mode}), but with such @code{special} modes, Fundamental mode is used instead.  Modes such as Dired, Rmail, and Buffer List use this feature."
msgstr "これはEmacsにたいしてカレントバッファーがFunnyモードのときに新たなバッファーを作成したとき、たとえ@code{major-mode}のデフォルト値が@code{nil}であってもそのバッファーをFunnyモードにしないよう指示する。デフォルトでは@code{major-mode}にたいする値@code{nil}は新たなバッファー作成時にカレントバッファーのメジャーモードを使用することを意味するが(@ref{Auto Major Mode}を参照)、@code{special}なモードにたいしてはかわりにFundamentalモードが使用される。Dired、Rmail、Buffer Listのようなモードはこの機能を使用する。"

#. type: itemize
#: original_texis/modes.texi:586
msgid "The function @code{view-buffer} does not enable View mode in buffers whose mode-class is special, because such modes usually provide their own View-like bindings."
msgstr "関数@code{view-buffer}はmode-classがspecialであるようなバッファーではViewモードを有効にしない。そのようなモードは通常は自身でViewに相当するバインディングを提供するからである。"

#. type: itemize
#: original_texis/modes.texi:591
msgid "The @code{define-derived-mode} macro automatically marks the derived mode as special if the parent mode is special.  Special mode is a convenient parent for such modes to inherit from; @xref{Basic Major Modes}."
msgstr "@code{define-derived-mode}マクロは親モードがspecialなら、自動的に派生モードをspecialにマークする。親モードでspecialモードが有用ならそれを継承したモードでも有用だろう。@ref{Basic Major Modes}を参照のこと。"

#. type: itemize
#: original_texis/modes.texi:602
msgid "If you want to make the new mode the default for files with certain recognizable names, add an element to @code{auto-mode-alist} to select the mode for those file names (@pxref{Auto Major Mode}).  If you define the mode command to autoload, you should add this element in the same file that calls @code{autoload}.  If you use an autoload cookie for the mode command, you can also use an autoload cookie for the form that adds the element (@pxref{autoload cookie}).  If you do not autoload the mode command, it is sufficient to add the element in the file that contains the mode definition."
msgstr "新たなモードを識別可能な特定のファイルにたいするデフォルトとしたければ、そのようなファイル名にたいしてそのモードを選択するために@code{auto-mode-alist}に要素を追加する。autoload用にモードコマンドを定義する場合には、@code{autoload}を呼び出すのと同じファイル内にその要素を追加すること。モードコマンドにたいしてautoload cookieを使用する場合はに、その要素を追加するフォームにたいしてもautoload cookieを使用できる(@ref{autoload cookie}を参照)。モードコマンドをautoloadしない場合には、モード定義を含むファイル内で要素を追加すれば十分である。"

#. type: cindex
#: original_texis/modes.texi:604
#, no-wrap
msgid "mode loading"
msgstr "mode loading"

#. type: itemize
#: original_texis/modes.texi:610
msgid "The top-level forms in the file defining the mode should be written so that they may be evaluated more than once without adverse consequences.  For instance, use @code{defvar} or @code{defcustom} to set mode-related variables, so that they are not reinitialized if they already have a value (@pxref{Defining Variables})."
msgstr "悪影響を与えることなく1回以上評価されるように、モード定義はファイル内のトップレベルのフォームとして記述すべきである。たとえばすでに値をもつ変数が再初期化されないように、モードに関連した変数をセットするときは@code{defvar}か@code{defcustom}を使用する(@ref{Defining Variables}を参照)。"

#. type: subsection
#: original_texis/modes.texi:614
#, no-wrap
msgid "How Emacs Chooses a Major Mode"
msgstr "How Emacs Chooses a Major Mode"

#. type: cindex
#: original_texis/modes.texi:615
#, no-wrap
msgid "major mode, automatic selection"
msgstr "major mode, automatic selection"

#. type: Plain text
#: original_texis/modes.texi:620
msgid "When Emacs visits a file, it automatically selects a major mode for the buffer based on information in the file name or in the file itself.  It also processes local variables specified in the file text."
msgstr "Emacsはファイルをvisitするとき、ファイル名やファイル自体の内容などの情報を元にそのバッファーにたいするメジャーモードを選択します。またファイルのテキスト内で指定されたローカル変数も処理します。"

#. type: deffn
#: original_texis/modes.texi:621
#, no-wrap
msgid "Command normal-mode &optional find-file"
msgstr "Command normal-mode &optional find-file"

#. type: deffn
#: original_texis/modes.texi:628
msgid "This function establishes the proper major mode and buffer-local variable bindings for the current buffer.  It calls @code{set-auto-mode} (see below).  As of Emacs 26.1, it no longer runs @code{hack-local-variables}, this now being done in @code{run-mode-hooks} at the initialization of major modes (@pxref{Mode Hooks})."
msgstr "この関数はカレントバッファーにたいして適切なメジャーモード、およびバッファーローカル変数のバインディングを設定する。これは@code{set-auto-mode} (以下参照)を呼び出す。Emacs 26.1ではもはや@code{hack-local-variables}を呼び出さずに、メジャーモードの初期化時の@code{run-mode-hooks}でこれが行われる(@ref{Mode Hooks}を参照)。"

#. type: deffn
#: original_texis/modes.texi:636
msgid "If the @var{find-file} argument to @code{normal-mode} is non-@code{nil}, @code{normal-mode} assumes that the @code{find-file} function is calling it.  In this case, it may process local variables in the @samp{-*-} line or at the end of the file.  The variable @code{enable-local-variables} controls whether to do so.  @xref{File Variables, , Local Variables in Files, emacs, The GNU Emacs Manual}, for the syntax of the local variables section of a file."
msgstr "@code{normal-mode}の@var{find-file}引数が非@code{nil}なら、@code{normal-mode}は@code{find-file}関数が自身を呼び出したとみなす。この場合、@code{normal-mode}はそのファイル内の@samp{-*-}行、またはファイルの最後にあるローカル変数を処理できる。これを行うかどうかは変数@code{enable-local-variables}が制御する。ファイルのローカル変数セクションの構文は@ref{File Variables, , Local Variables in Files, emacs, The GNU Emacs Manual}を参照のこと。"

#. type: deffn
#: original_texis/modes.texi:640
msgid "If you run @code{normal-mode} interactively, the argument @var{find-file} is normally @code{nil}.  In this case, @code{normal-mode} unconditionally processes any file local variables."
msgstr "インタラクティブに@code{normal-mode}を実行すると、引数@var{find-file}は通常は@code{nil}である。この場合、@code{normal-mode}は無条件に任意のファイルローカル変数を処理する。"

#. type: deffn
#: original_texis/modes.texi:644
msgid "The function calls @code{set-auto-mode} to choose and set a major mode.  If this does not specify a mode, the buffer stays in the major mode determined by the default value of @code{major-mode} (see below)."
msgstr "この関数はメジャーモードを選択してセットするために@code{set-auto-mode}を呼び出す。この関数がモードを特定しなければバッファーの@code{major-mode} (以下参照)のデフォルト値により決定されるメジャーモードに留まる。"

#. type: cindex
#: original_texis/modes.texi:645
#, no-wrap
msgid "file mode specification error"
msgstr "file mode specification error"

#. type: deffn
#: original_texis/modes.texi:649
msgid "@code{normal-mode} uses @code{condition-case} around the call to the major mode command, so errors are caught and reported as a @samp{File mode specification error}, followed by the original error message."
msgstr "@code{normal-mode}はメジャーモードコマンド呼び出しの周囲に@code{condition-case}を使用するのでエラーはcatchされて、@samp{File mode specification error}とともに元のエラーメッセージがその後に報告される。"

#. type: defun
#: original_texis/modes.texi:651
#, no-wrap
msgid "set-auto-mode &optional keep-mode-if-same"
msgstr "set-auto-mode &optional keep-mode-if-same"

#. type: cindex
#: original_texis/modes.texi:652
#, no-wrap
msgid "visited file mode"
msgstr "visited file mode"

#. type: defun
#: original_texis/modes.texi:664
msgid "This function selects and sets the major mode that is appropriate for the current buffer.  It bases its decision (in order of precedence) on the @w{@samp{-*-}} line, on any @samp{mode:} local variable near the end of a file, on the @w{@samp{#!}} line (using @code{interpreter-mode-alist}), on the text at the beginning of the buffer (using @code{magic-mode-alist}), and finally on the visited file name (using @code{auto-mode-alist}).  @xref{Choosing Modes, , How Major Modes are Chosen, emacs, The GNU Emacs Manual}.  If @code{enable-local-variables} is @code{nil}, @code{set-auto-mode} does not check the @w{@samp{-*-}} line, or near the end of the file, for any mode tag."
msgstr "この関数はカレントバッファーにたいして適切なメジャーモードを選択してセットする。この選択は関数自身の(優先順位による)決定にもとづく。優先順位は@w{@samp{-*-}}行、ファイル終端近傍の任意の@samp{mode:}ローカル変数、@w{@samp{#!}}行(@code{interpreter-mode-alist}を使用)、バッファーの先頭のテキスト(@code{magic-mode-alist}を使用)、最後がvisitされるファイル名(@code{auto-mode-alist}を使用)の順。@ref{Choosing Modes, , How Major Modes are Chosen, emacs, The GNU Emacs Manual}を参照のこと。@code{enable-local-variables}が@code{nil}なら@code{set-auto-mode}は@w{@samp{-*-}}行とファイル終端近傍にたいしてmodeタグのチェックを何も行わない。"

#. type: vindex
#: original_texis/modes.texi:665
#, no-wrap
msgid "inhibit-local-variables-regexps"
msgstr "inhibit-local-variables-regexps"

#. type: defun
#: original_texis/modes.texi:676
msgid "There are some file types where it is not appropriate to scan the file contents for a mode specifier.  For example, a tar archive may happen to contain, near the end of the file, a member file that has a local variables section specifying a mode for that particular file.  This should not be applied to the containing tar file.  Similarly, a tiff image file might just happen to contain a first line that seems to match the @w{@samp{-*-}} pattern.  For these reasons, both these file extensions are members of the list @code{inhibit-local-variables-regexps}.  Add patterns to this list to prevent Emacs searching them for local variables of any kind (not just mode specifiers)."
msgstr "モード特定のためにファイル内容をスキャンするのがふさわしくないファイルタイプがいくつかある。たとえばtarアーカイブファイルの終端付近に特定のファイルにたいしてモードを指定するローカル変数セクションをもつアーカイブメンバーファイルがたまたま含まれているかもしれない。こがそのファイルを含んだtarファイルに適用されるべきではないだろう。同様にtiffイメージファイルが@w{@samp{-*-}}パターンにマッチするように見える行を最初の行に偶然含むかもしれない。これらの理由により、これらのファイル拡張子はいずれも@code{inhibit-local-variables-regexps}リストのメンバーになっている。Emacsが、(モード指定に限らず)ファイルから任意の種類のローカル変数を検索することを防ぐには、このリストにパターンを追加する。"

#. type: defun
#: original_texis/modes.texi:682
msgid "If @var{keep-mode-if-same} is non-@code{nil}, this function does not call the mode command if the buffer is already in the proper major mode.  For instance, @code{set-visited-file-name} sets this to @code{t} to avoid killing buffer local variables that the user may have set."
msgstr "@var{keep-mode-if-same}が非@code{nil}なら、すでにそのバッファーが適切なメジャーモードをもつときにこの関数はモードコマンドを呼び出さない。たとえば@code{set-visited-file-name}はユーザーがセットしたかもしれないバッファーローカル変数をkillすることを防ぐために、これを@code{t}にセットする。"

#. type: defun
#: original_texis/modes.texi:684
#, no-wrap
msgid "set-buffer-major-mode buffer"
msgstr "set-buffer-major-mode buffer"

#. type: defun
#: original_texis/modes.texi:690
msgid "This function sets the major mode of @var{buffer} to the default value of @code{major-mode}; if that is @code{nil}, it uses the current buffer's major mode (if that is suitable).  As an exception, if @var{buffer}'s name is @file{*scratch*}, it sets the mode to @code{initial-major-mode}."
msgstr "この関数は@var{buffer}のメジャーモードを@code{major-mode}のデフォルト値にセットする。@code{major-mode}が@code{nil}なら、(それが適切なら)カレントバッファーのメジャーモードを使用する。例外として@var{buffer}の名前が@file{*scratch*}なら、モードを@code{initial-major-mode}にセットする。"

#. type: defun
#: original_texis/modes.texi:694
msgid "The low-level primitives for creating buffers do not use this function, but medium-level commands such as @code{switch-to-buffer} and @code{find-file-noselect} use it whenever they create buffers."
msgstr "バッファーを作成する低レベルのプリミティブはこの関数を使用しないが、@code{switch-to-buffer}や@code{find-file-noselect}のような中位レベルのコマンドは、バッファー作成時は常にこの関数を使用する。"

#. type: defopt
#: original_texis/modes.texi:696
#, no-wrap
msgid "initial-major-mode"
msgstr "initial-major-mode"

#. type: file{#1}
#: original_texis/modes.texi:697
#, no-wrap
msgid "*scratch*"
msgstr "*scratch*"

#. type: defopt
#: original_texis/modes.texi:701
msgid "The value of this variable determines the major mode of the initial @file{*scratch*} buffer.  The value should be a symbol that is a major mode command.  The default value is @code{lisp-interaction-mode}."
msgstr "この変数の値は@file{*scratch*}バッファーの初期のメジャーモードを決定する。値はメジャーモードコマンドであるようなシンボルであること。デフォルト値は@code{lisp-interaction-mode}。"

#. type: defvar
#: original_texis/modes.texi:703
#, no-wrap
msgid "interpreter-mode-alist"
msgstr "interpreter-mode-alist"

#. type: defvar
#: original_texis/modes.texi:710
msgid "This variable specifies major modes to use for scripts that specify a command interpreter in a @samp{#!} line.  Its value is an alist with elements of the form @code{(@var{regexp} . @var{mode})}; this says to use mode @var{mode} if the file specifies an interpreter which matches @code{\\\\`@var{regexp}\\\\'}.  For example, one of the default elements is @code{(\"python[0-9.]*\" . python-mode)}."
msgstr "この変数は@samp{#!}行内のコマンドインタープリターを指定するスクリプトにたいして使用するメジャーモードを指定する。変数の値は@code{(@var{regexp} . @var{mode})}という形式の要素をもつalistである。これはそのファイルが@code{\\\\`@var{regexp}\\\\'}にマッチするインタープリターを指定する場合には@var{mode}を使用することを意味する。たとえばデフォルト要素の1つは@code{(\"python[0-9.]*\" . python-mode)}である。"

#. type: defvar
#: original_texis/modes.texi:712
#, no-wrap
msgid "magic-mode-alist"
msgstr "magic-mode-alist"

#. type: defvar
#: original_texis/modes.texi:720
msgid "This variable's value is an alist with elements of the form @code{(@var{regexp} .  @var{function})}, where @var{regexp} is a regular expression and @var{function} is a function or @code{nil}.  After visiting a file, @code{set-auto-mode} calls @var{function} if the text at the beginning of the buffer matches @var{regexp} and @var{function} is non-@code{nil}; if @var{function} is @code{nil}, @code{auto-mode-alist} gets to decide the mode."
msgstr "この変数の値は@code{(@var{regexp} @var{function})}という形式の要素をもつalistである。ここで@var{regexp}は正規表現、@var{function}は関数、または@code{nil}である。ファイルをvisitした後にバッファーの先頭のテキストが@var{regexp}にマッチした場合、@var{function}が非@code{nil}なら@code{set-auto-mode}は@var{function}を呼び出す。@var{function}が@code{nil}なら@code{auto-mode-alist}がモードを決定する。"

#. type: defvar
#: original_texis/modes.texi:722
#, no-wrap
msgid "magic-fallback-mode-alist"
msgstr "magic-fallback-mode-alist"

#. type: defvar
#: original_texis/modes.texi:725
msgid "This works like @code{magic-mode-alist}, except that it is handled only if @code{auto-mode-alist} does not specify a mode for this file."
msgstr "これは@code{magic-mode-alist}と同様に機能するが、そのファイルにたいして@code{auto-mode-alist}がモードを指定しない場合だけ処理される点が異なる。"

#. type: defvar
#: original_texis/modes.texi:727
#, no-wrap
msgid "auto-mode-alist"
msgstr "auto-mode-alist"

#. type: defvar
#: original_texis/modes.texi:733
msgid "This variable contains an association list of file name patterns (regular expressions) and corresponding major mode commands.  Usually, the file name patterns test for suffixes, such as @samp{.el} and @samp{.c}, but this need not be the case.  An ordinary element of the alist looks like @code{(@var{regexp} .  @var{mode-function})}."
msgstr "この変数はファイル名パターン(正規表現)と対応するメジャーモードコマンドの連想リストを含む。ファイル名パターンは通常は@samp{.el}や@samp{.c}のようなサフィックスをテストするが必須ではない。このalistの通常の要素は@code{(@var{regexp} .  @var{mode-function})}のようになる。"

#. type: table
#: original_texis/modes.texi:735 original_texis/modes.texi:3283
#: original_texis/modes.texi:3303 original_texis/modes.texi:3800
msgid "For example,"
msgstr "たとえば、"

#. type: group
#: original_texis/modes.texi:741
#, no-wrap
msgid ""
"((\"\\\\`/tmp/fol/\" . text-mode)\n"
" (\"\\\\.texinfo\\\\'\" . texinfo-mode)\n"
" (\"\\\\.texi\\\\'\" . texinfo-mode)\n"
msgstr ""
"((\"\\\\`/tmp/fol/\" . text-mode)\n"
" (\"\\\\.texinfo\\\\'\" . texinfo-mode)\n"
" (\"\\\\.texi\\\\'\" . texinfo-mode)\n"

#. type: group
#: original_texis/modes.texi:747
#, no-wrap
msgid ""
" (\"\\\\.el\\\\'\" . emacs-lisp-mode)\n"
" (\"\\\\.c\\\\'\" . c-mode)\n"
" (\"\\\\.h\\\\'\" . c-mode)\n"
" @dots{})\n"
msgstr ""
" (\"\\\\.el\\\\'\" . emacs-lisp-mode)\n"
" (\"\\\\.c\\\\'\" . c-mode)\n"
" (\"\\\\.h\\\\'\" . c-mode)\n"
" @dots{})\n"

#. type: defvar
#: original_texis/modes.texi:756
msgid "When you visit a file whose expanded file name (@pxref{File Name Expansion}), with version numbers and backup suffixes removed using @code{file-name-sans-versions} (@pxref{File Name Components}), matches a @var{regexp}, @code{set-auto-mode} calls the corresponding @var{mode-function}.  This feature enables Emacs to select the proper major mode for most files."
msgstr "バージョン番号とバックアップ用サフィックスをもつファイルをvisitしたとき、それらのサフィックスは@code{file-name-sans-versions} (@ref{File Name Components}を参照)を使用して展開されたファイル名(@ref{File Name Expansion}を参照)から取り除かれて@var{regexp}とマッチされて、@code{set-auto-mode}はそれに対応する@var{mode-function}を呼び出す。この機能によりほとんどのファイルにたいしてEmacsが適切なメジャーモードを選択することが可能になる。"

#. type: defvar
#: original_texis/modes.texi:764
msgid "If an element of @code{auto-mode-alist} has the form @code{(@var{regexp} @var{function} t)}, then after calling @var{function}, Emacs searches @code{auto-mode-alist} again for a match against the portion of the file name that did not match before.  This feature is useful for uncompression packages: an entry of the form @code{(\"\\\\.gz\\\\'\" @var{function} t)} can uncompress the file and then put the uncompressed file in the proper mode according to the name sans @samp{.gz}."
msgstr "@code{auto-mode-alist}の要素が@code{(@var{regexp} @var{function} t)}という形式なら、@var{function}を呼び出した後にEmacsは前回マッチしなかったファイル名部分にたいしてマッチするために再度@code{auto-mode-alist}を検索する。この機能は圧縮されたパッケージにたいして有用である。@code{(\"\\\\.gz\\\\'\" @var{function} t)}という形式のエントリーは、ファイルを解凍してから@samp{.gz}抜きのファイル名の解凍されたファイルを適切なモードに置く。"

#. type: defvar
#: original_texis/modes.texi:767
msgid "If @code{auto-mode-alist} has more than one element whose @var{regexp} matches the file name, Emacs will use the first match."
msgstr "@var{regexp}がファイル名にマッチする要素が@code{auto-mode-alist}に複数ある場合には、Emacsは最初のマッチを使用する。"

#. type: defvar
#: original_texis/modes.texi:771
msgid "Here is an example of how to prepend several pattern pairs to @code{auto-mode-alist}.  (You might use this sort of expression in your init file.)"
msgstr "以下は@code{auto-mode-alist}の先頭に複数のパターンペアーを追加する方法の例である(あなたはinitファイル内でこの種の式を使ったことがあるかもしれない)。"

#. type: group
#: original_texis/modes.texi:783
#, no-wrap
msgid ""
"(setq auto-mode-alist\n"
"  (append\n"
"   ;; @r{File name (within directory) starts with a dot.}\n"
"   '((\"/\\\\.[^/]*\\\\'\" . fundamental-mode)\n"
"     ;; @r{File name has no dot.}\n"
"     (\"/[^\\\\./]*\\\\'\" . fundamental-mode)\n"
"     ;; @r{File name ends in @samp{.C}.}\n"
"     (\"\\\\.C\\\\'\" . c++-mode))\n"
"   auto-mode-alist))\n"
msgstr ""
"(setq auto-mode-alist\n"
"  (append\n"
"   ;; @r{ドットで始まる(ディレクトリー名付きの)ファイル名}\n"
"   '((\"/\\\\.[^/]*\\\\'\" . fundamental-mode)\n"
"     ;; @r{ドットのないファイル名}\n"
"     (\"/[^\\\\./]*\\\\'\" . fundamental-mode)\n"
"     ;; @r{@samp{.C}で終わるファイル名}\n"
"     (\"\\\\.C\\\\'\" . c++-mode))\n"
"   auto-mode-alist))\n"

#. type: subsection
#: original_texis/modes.texi:788
#, no-wrap
msgid "Getting Help about a Major Mode"
msgstr "Getting Help about a Major Mode"

#. type: cindex
#: original_texis/modes.texi:789
#, no-wrap
msgid "mode help"
msgstr "mode help"

#. type: cindex
#: original_texis/modes.texi:790
#, no-wrap
msgid "help for major mode"
msgstr "help for major mode"

#. type: cindex
#: original_texis/modes.texi:791
#, no-wrap
msgid "documentation for major mode"
msgstr "documentation for major mode"

#. type: Plain text
#: original_texis/modes.texi:797
msgid "The @code{describe-mode} function provides information about major modes.  It is normally bound to @kbd{C-h m}.  It uses the value of the variable @code{major-mode} (@pxref{Major Modes}), which is why every major mode command needs to set that variable."
msgstr "@code{describe-mode}関数はメジャーモードに関する情報を提供します。これは通常は@kbd{C-h m}にバインドされています。この関数は変数@code{major-mode} (@ref{Major Modes}を参照)の値を使用します。すべてのメジャーモードがこの変数をセットする必要があるのはこれが理由です。"

#. type: deffn
#: original_texis/modes.texi:798
#, no-wrap
msgid "Command describe-mode &optional buffer"
msgstr "Command describe-mode &optional buffer"

#. type: deffn
#: original_texis/modes.texi:803
msgid "This command displays the documentation of the current buffer's major mode and minor modes.  It uses the @code{documentation} function to retrieve the documentation strings of the major and minor mode commands (@pxref{Accessing Documentation})."
msgstr "このコマンドはカレントバッファーのメジャーモードとマイナーモードのドキュメントを表示する。この関数はメジャーモードおよびマイナーモードのコマンドのドキュメント文字列を取得するために@code{documentation}関数を使用する(@ref{Accessing Documentation}を参照)。"

#. type: deffn
#: original_texis/modes.texi:807
msgid "If called from Lisp with a non-@code{nil} @var{buffer} argument, this function displays the documentation for that buffer's major and minor modes, rather than those of the current buffer."
msgstr "@var{buffer}引数に非@code{nil}を指定してLispから呼び出されると、この関数はカレントバッファーではなくそのバッファーのメジャーモードとマイナーモードのドキュメントを表示する。"

#. type: subsection
#: original_texis/modes.texi:810
#, no-wrap
msgid "Defining Derived Modes"
msgstr "Defining Derived Modes"

#. type: cindex
#: original_texis/modes.texi:811
#, no-wrap
msgid "derived mode"
msgstr "derived mode"

#. type: Plain text
#: original_texis/modes.texi:819
msgid "The recommended way to define a new major mode is to derive it from an existing one using @code{define-derived-mode}.  If there is no closely related mode, you should inherit from either @code{text-mode}, @code{special-mode}, or @code{prog-mode}.  @xref{Basic Major Modes}.  If none of these are suitable, you can inherit from @code{fundamental-mode} (@pxref{Major Modes})."
msgstr "新しいメジャーモードを定義する推奨方法は、@code{define-derived-mode}を使用して既存のメジャーモードから派生させる方法です。それほど近いモードが存在しない場合は@code{text-mode}、@code{special-mode}、または@code{prog-mode}から継承するべきです。@ref{Basic Major Modes}を参照してください。これらがいずれも適切でなければ、@code{fundamental-mode}から継承することができます(@ref{Major Modes}を参照)。"

#. type: defmac
#: original_texis/modes.texi:820
#, no-wrap
msgid "define-derived-mode variant parent name docstring keyword-args@dots{} body@dots{}"
msgstr "define-derived-mode variant parent name docstring keyword-args@dots{} body@dots{}"

#. type: defmac
#: original_texis/modes.texi:824
msgid "This macro defines @var{variant} as a major mode command, using @var{name} as the string form of the mode name.  @var{variant} and @var{parent} should be unquoted symbols."
msgstr "このマクロは@var{variant}をメジャーモードコマンドとして定義して、@var{name}をモード名の文字列形式とする。@var{variant}と@var{parent}はクォートされていないシンボルであること。"

#. type: defmac
#: original_texis/modes.texi:827
msgid "The new command @var{variant} is defined to call the function @var{parent}, then override certain aspects of that parent mode:"
msgstr "新たなコマンド@var{variant}は関数@var{parent}を呼び出すよう定義されて、その後その親モードの特定の性質をオーバーライドする。"

#. type: itemize
#: original_texis/modes.texi:834
msgid "The new mode has its own sparse keymap, named @code{@var{variant}-map}.  @code{define-derived-mode} makes the parent mode's keymap the parent of the new map, unless @code{@var{variant}-map} is already set and already has a parent."
msgstr "新たなモードは@code{@var{variant}-map}という名前の、自身のsparseキーマップ(疎キーマップ)をもつ。@code{define-derived-mode}は@code{@var{variant}-map}がすでにセットされていて、かつすでに親をもつ場合を除いて親モードのキーマップを新たなマップの親キーマップにする。"

#. type: itemize
#: original_texis/modes.texi:842
msgid "The new mode has its own syntax table, kept in the variable @code{@var{variant}-syntax-table}, unless you override this using the @code{:syntax-table} keyword (see below).  @code{define-derived-mode} makes the parent mode's syntax-table the parent of @code{@var{variant}-syntax-table}, unless the latter is already set and already has a parent different from the standard syntax table."
msgstr "新たなモードは自身の構文テーブル(syntax table)をもち、それは変数@code{@var{variant}-syntax-table}に保持される。ただし@code{:syntax-table}キーワード(以下参照)を使用してこれをオーバーライドした場合は異なる。@code{define-derived-mode}は@code{@var{variant}-syntax-table}がすでにセットされていて、かつ標準的な構文テーブルよ異なる親をもつ場合を除いて、親モードの構文テーブルを@code{@var{variant}-syntax-table}の親とする。"

#. type: itemize
#: original_texis/modes.texi:847
msgid "The new mode has its own abbrev table, kept in the variable @code{@var{variant}-abbrev-table}, unless you override this using the @code{:abbrev-table} keyword (see below)."
msgstr "新たなモードは自身のabbrevテーブル(略語テーブル)をもち、それは変数@code{@var{variant}-abbrev-table}に保持される。ただし@code{:abbrev-table}キーワード(以下参照)を使用してこれをオーバーライドした場合は異なる。"

#. type: itemize
#: original_texis/modes.texi:853
msgid "The new mode has its own mode hook, @code{@var{variant}-hook}.  It runs this hook, after running the hooks of its ancestor modes, with @code{run-mode-hooks}, as the last thing it does, apart from running any @code{:after-hook} form it may have.  @xref{Mode Hooks}."
msgstr "新たなモードは自身のモードフック@code{@var{variant}-hook}をもつ。これはフックを実行した後に@code{:after-hook}があればそれを実行して、それとは別に最後に@code{run-mode-hooks}によって自身の祖先のモードのフックを実行する。"

#. type: defmac
#: original_texis/modes.texi:859
msgid "In addition, you can specify how to override other aspects of @var{parent} with @var{body}.  The command @var{variant} evaluates the forms in @var{body} after setting up all its usual overrides, just before running the mode hooks."
msgstr "これらに加えて@var{body}で@var{parent}のその他の性質をオーバーライドする方法を指定できます。コマンド@var{variant}は通常のオーバーライドをセットアップした後、そのモードのフックを実行する直前に@var{body}内のフォームを評価します。"

#. type: defmac
#: original_texis/modes.texi:865
msgid "If @var{parent} has a non-@code{nil} @code{mode-class} symbol property, then @code{define-derived-mode} sets the @code{mode-class} property of @var{variant} to the same value.  This ensures, for example, that if @var{parent} is a special mode, then @var{variant} is also a special mode (@pxref{Major Mode Conventions})."
msgstr "@var{parent}が非@code{nil}の@code{mode-class}シンボルプロパティをもつ場合、@code{define-derived-mode}は@var{variant}の@code{mode-class}プロパティに同じ値をセットします。これはたとえば@var{parent}がspecialモードなら@var{variant}もspecialモードになることを保証します(@ref{Major Mode Conventions}を参照)。"

#. type: defmac
#: original_texis/modes.texi:869
msgid "You can also specify @code{nil} for @var{parent}.  This gives the new mode no parent.  Then @code{define-derived-mode} behaves as described above, but, of course, omits all actions connected with @var{parent}."
msgstr "@var{parent}にたいして@code{nil}を指定することもできます。これにより新たなモードは親をもたなくなります。その後に@code{define-derived-mode}は上述のように振る舞いますが、当然@var{parent}につながるすべてのアクションは省略されます。"

#. type: defmac
#: original_texis/modes.texi:875
msgid "The argument @var{docstring} specifies the documentation string for the new mode.  @code{define-derived-mode} adds some general information about the mode's hook, followed by the mode's keymap, at the end of this documentation string.  If you omit @var{docstring}, @code{define-derived-mode} generates a documentation string."
msgstr "引数@var{docstring}は新たなモードにたいするドキュメント文字列を指定します。@code{define-derived-mode}はこのドキュメント文字列の最後にそのモードフックに関する一般的な情報と、その後にそのモードのキーマップを追加します。@var{docstring}を省略すると@code{define-derived-mode}がドキュメント文字列を生成します。"

#. type: defmac
#: original_texis/modes.texi:879
msgid "The @var{keyword-args} are pairs of keywords and values.  The values, except for @code{:after-hook}'s, are evaluated.  The following keywords are currently supported:"
msgstr "@var{keyword-args}はキーワードと値のペアー。@code{:after-hook}のものを除いて値は評価される。現在のところ以下のキーワードがサポートされる:"

#. type: item
#: original_texis/modes.texi:881
#, no-wrap
msgid ":syntax-table"
msgstr ":syntax-table"

#. type: table
#: original_texis/modes.texi:888
msgid "You can use this to explicitly specify a syntax table for the new mode.  If you specify a @code{nil} value, the new mode uses the same syntax table as @var{parent}, or the standard syntax table if @var{parent} is @code{nil}.  (Note that this does @emph{not} follow the convention used for non-keyword arguments that a @code{nil} value is equivalent with not specifying the argument.)"
msgstr "新たなモードにたいする構文テーブルを明示的に指定するためにこれを使用できる。@code{nil}値を指定すると新たなモードは@var{parent}と同じ構文テーブル、@var{parent}も@code{nil}なら標準的な構文テーブルを使用する(これは@code{nil}値の非キーワード引数は引数を指定しないのと同じという通常の慣習には@emph{したがわない}ことに注意)。"

#. type: item
#: original_texis/modes.texi:889
#, no-wrap
msgid ":abbrev-table"
msgstr ":abbrev-table"

#. type: table
#: original_texis/modes.texi:895
msgid "You can use this to explicitly specify an abbrev table for the new mode.  If you specify a @code{nil} value, the new mode uses the same abbrev table as @var{parent}, or @code{fundamental-mode-abbrev-table} if @var{parent} is @code{nil}.  (Again, a @code{nil} value is @emph{not} equivalent to not specifying this keyword.)"
msgstr "新たなモードにたいするabbrevテーブルを明示的に指定するためにこれを使用できる。@code{nil}値を指定すると新たなモードは@var{parent}と同じabbrevテーブル、@var{parent}も@code{nil}なら@code{fundamental-mode-abbrev-table}を使用する(繰り返すが@code{nil}値はこのキーワードを指定しないことでは@emph{ない})。"

#. type: item
#: original_texis/modes.texi:896
#, no-wrap
msgid ":interactive"
msgstr ":interactive"

#. type: table
#: original_texis/modes.texi:902
msgid "Modes are interactive commands by default.  If you specify a @code{nil} value, the mode defined here won't be interactive.  This is useful for modes that are never meant to be activated by users manually, but are only supposed to be used in some specially-formatted buffer."
msgstr "モードはデフォルトではインタラクティブコマンド。@code{nil}値を指定すると、ここで指定したモードはインタラクティブにならない。これはユーザーが手動でアクティブにされることはないが、特別にフォーマットされたバッファーでのみ使用されることを意図したモードで有用。"

#. type: item
#: original_texis/modes.texi:903
#, no-wrap
msgid ":group"
msgstr ":group"

#. type: table
#: original_texis/modes.texi:908
msgid "If this is specified, the value should be the customization group for this mode.  (Not all major modes have one.)  The command @code{customize-mode} uses this.  @code{define-derived-mode} does @emph{not} automatically define the specified customization group."
msgstr "これが指定する場合、値はそのモードにたいするカスタマイズグループ(customization group)であること(すべてのメジャーモードがカスタマイズグループをもつ訳ではない)。@code{customize-mode}コマンドはこれを使用する。@code{define-derived-mode}は指定されたカスタマイズグループを自動的に@emph{定義しない}。"

#. type: item
#: original_texis/modes.texi:909
#, no-wrap
msgid ":after-hook"
msgstr ":after-hook"

#. type: table
#: original_texis/modes.texi:917
msgid "This optional keyword specifies a single Lisp form to evaluate as the final act of the mode function, after the mode hooks have been run.  It should not be quoted.  Since the form might be evaluated after the mode function has terminated, it should not access any element of the mode function's local state.  An @code{:after-hook} form is useful for setting up aspects of the mode which depend on the user's settings, which in turn may have been changed in a mode hook."
msgstr "このオプションのｋｅｙはモードフック実行後にモード関数の最後の活動として評価される単一のLispフォームを指定する。クォートしないこと。モードにが終了した後にフォーが評価されるので、モード関数のローカル状態のすべての要素にアクセスするべきではない。@code{:after-hook}フォームはモードフックで変更されているかもしれないユーザーのセッティングに依存するモードの様相をセットアップするために有用。"

#. type: defmac
#: original_texis/modes.texi:920
msgid "Here is a hypothetical example:"
msgstr "以下は架空の例:"

#. type: example
#: original_texis/modes.texi:924
#, no-wrap
msgid ""
"(defvar-keymap hypertext-mode-map\n"
"  \"<down-mouse-3>\" #'do-hyper-link)\n"
"\n"
msgstr ""
"(defvar-keymap hypertext-mode-map\n"
"  \"<down-mouse-3>\" #'do-hyper-link)\n"
"\n"

#. type: example
#: original_texis/modes.texi:929
#, no-wrap
msgid ""
"(define-derived-mode hypertext-mode\n"
"  text-mode \"Hypertext\"\n"
"  \"Major mode for hypertext.\"\n"
"  (setq-local case-fold-search nil))\n"
msgstr ""
"(define-derived-mode hypertext-mode\n"
"  text-mode \"Hypertext\"\n"
"  \"ハイパーテキスト用のメジャーモード\"\n"
"  (setq-local case-fold-search nil))\n"

#. type: defmac
#: original_texis/modes.texi:933
msgid "Do not write an @code{interactive} spec in the definition; @code{define-derived-mode} does that automatically."
msgstr "@code{define-derived-mode}が自動的に行うので、この定義内に@code{interactive}指定を記述してはならない。"

#. type: defun
#: original_texis/modes.texi:935
#, no-wrap
msgid "derived-mode-p &rest modes"
msgstr "derived-mode-p &rest modes"

#. type: defun
#: original_texis/modes.texi:938
msgid "This function returns non-@code{nil} if the current major mode is derived from any of the major modes given by the symbols @var{modes}."
msgstr "この関数はカレントメジャーモードがシンボル@var{modes}で与えられたメジャーモードのいずれかから派生されていたら非@code{nil}をリターンする。"

#. type: Plain text
#: original_texis/modes.texi:948
msgid "Apart from Fundamental mode, there are three major modes that other major modes commonly derive from: Text mode, Prog mode, and Special mode.  While Text mode is useful in its own right (e.g., for editing files ending in @file{.txt}), Prog mode and Special mode exist mainly to let other modes derive from them."
msgstr "Fundamentalモードは別として他のメジャーモードの一般的な派生元となるメジャーモードが3つあります。それはTextモード、Progモード、およびSpecialモードです。Textモードはその本来もつ機能から有用なモードです(たとえば@file{.txt}ファイルの編集など)。一方、ProgモードとSpecialモードは主にそのようなモード以外のモードの派生元とするために存在します。"

#. type: vindex
#: original_texis/modes.texi:949
#, no-wrap
msgid "prog-mode-hook"
msgstr "prog-mode-hook"

#. type: Plain text
#: original_texis/modes.texi:955
msgid "As far as possible, new major modes should be derived, either directly or indirectly, from one of these three modes.  One reason is that this allows users to customize a single mode hook (e.g., @code{prog-mode-hook}) for an entire family of relevant modes (e.g., all programming language modes)."
msgstr "新たなモードは直接と間接を問わず、可能な限りそれら3つのモードから派生させるべきです。その理由の1つは関連のあるモードファミリー全体(たとえばすべてのプログラミング言語のモード)にたいして、ユーザーが単一のモードフックをカスタマイズできるからからです。"

#. type: deffn
#: original_texis/modes.texi:956
#, no-wrap
msgid "Command text-mode"
msgstr "Command text-mode"

#. type: deffn
#: original_texis/modes.texi:962
msgid "Text mode is a major mode for editing human languages.  It defines the @samp{\"} and @samp{\\} characters as having punctuation syntax (@pxref{Syntax Class Table}), and binds @kbd{M-@key{TAB}} to @code{ispell-complete-word} (@pxref{Spelling,,, emacs, The GNU Emacs Manual})."
msgstr "Textモードは人間の言語を編集するためのメジャーモードである。このモードは文字@samp{\"}と@samp{\\}を区切り文字構文(punctuation syntax: @ref{Syntax Class Table}を参照)としてもち、@kbd{M-@key{TAB}}を@code{ispell-complete-word}にバインドする(@ref{Spelling,,, emacs, The GNU Emacs Manual}を参照)。"

#. type: deffn
#: original_texis/modes.texi:965
msgid "An example of a major mode derived from Text mode is HTML mode.  @xref{HTML Mode,,SGML and HTML Modes, emacs, The GNU Emacs Manual}."
msgstr "Textモードから派生されたメジャーモードの例としてHTMLモードがある。@ref{HTML Mode,,SGML and HTML Modes, emacs, The GNU Emacs Manual}を参照のこと。"

#. type: deffn
#: original_texis/modes.texi:967
#, no-wrap
msgid "Command prog-mode"
msgstr "Command prog-mode"

#. type: deffn
#: original_texis/modes.texi:971
msgid "Prog mode is a basic major mode for buffers containing programming language source code.  Most of the programming language major modes built into Emacs are derived from it."
msgstr "Progモードはプログラミング言語のソースコードを含むバッファーにたいする基本的なメジャーモードである。Emacsビルトインのプログラミング言語用メジャーモードはこのモードから派生されている。"

#. type: deffn
#: original_texis/modes.texi:975
msgid "Prog mode binds @code{parse-sexp-ignore-comments} to @code{t} (@pxref{Motion via Parsing}) and @code{bidi-paragraph-direction} to @code{left-to-right} (@pxref{Bidirectional Display})."
msgstr "Progモードは@code{parse-sexp-ignore-comments}を@code{t} (@ref{Motion via Parsing}を参照)、@code{bidi-paragraph-direction}を@code{left-to-right} (@ref{Bidirectional Display}を参照)にバインドする。"

#. type: deffn
#: original_texis/modes.texi:977
#, no-wrap
msgid "Command special-mode"
msgstr "Command special-mode"

#. type: deffn
#: original_texis/modes.texi:982
msgid "Special mode is a basic major mode for buffers containing text that is produced specially by Emacs, rather than directly from a file.  Major modes derived from Special mode are given a @code{mode-class} property of @code{special} (@pxref{Major Mode Conventions})."
msgstr "Specialモードはファイルから直接ではなく、Emacsにより特別(specially)に生成されたテキストを含むバッファーにたいする基本的なメジャーモードである。Specialモードから派生されたメジャーモードは@code{mode-class}プロパティに@code{special}が与えられる(@ref{Major Mode Conventions}を参照)。"

#. type: deffn
#: original_texis/modes.texi:986
msgid "Special mode sets the buffer to read-only.  Its keymap defines several common bindings, including @kbd{q} for @code{quit-window} and @kbd{g} for @code{revert-buffer} (@pxref{Reverting})."
msgstr "Specialモードはバッファーを読み取り専用にセットする。このモードのキーマップはいくつかの一般的なバインディングを定義して、それには@code{quit-window}にたいする@kbd{q}、@code{revert-buffer} (@ref{Reverting}を参照)にたいする@kbd{g}が含まれる。"

#. type: deffn
#: original_texis/modes.texi:990
msgid "An example of a major mode derived from Special mode is Buffer Menu mode, which is used by the @file{*Buffer List*} buffer.  @xref{List Buffers,,Listing Existing Buffers, emacs, The GNU Emacs Manual}."
msgstr "Specialから派生されたメジャーモードの例としてはBuffer Menuモードがあり、これは@file{*Buffer List*}バッファーにより使用される。@ref{List Buffers,,Listing Existing Buffers, emacs, The GNU Emacs Manual}を参照のこと。"

#. type: Plain text
#: original_texis/modes.texi:995
msgid "In addition, modes for buffers of tabulated data can inherit from Tabulated List mode, which is in turn derived from Special mode.  @xref{Tabulated List Mode}."
msgstr "これらに加えて表形式データのバッファーにたいするモードをTabulated Listモードから継承できます。このモードはSpecialモードから順に派生されているモードです。@ref{Tabulated List Mode}を参照してください。"

#. type: Plain text
#: original_texis/modes.texi:1008
msgid "Every major mode command should finish by running the mode-independent normal hook @code{change-major-mode-after-body-hook}, its mode hook, and the normal hook @code{after-change-major-mode-hook}.  It does this by calling @code{run-mode-hooks}.  If the major mode is a derived mode, that is if it calls another major mode (the parent mode)  in its body, it should do this inside @code{delay-mode-hooks} so that the parent won't run these hooks itself.  Instead, the derived mode's call to @code{run-mode-hooks} runs the parent's mode hook too.  @xref{Major Mode Conventions}."
msgstr "すべてのメジャーモードコマンドはモード独自のノーマルフック@code{change-major-mode-after-body-hook}、そのモードのモードフック、ノーマルフック@code{after-change-major-mode-hook}を実行することによって終了すべきです。これは@code{run-mode-hooks}を呼び出すことにより行われます。もしそのモードが派生モードなら自身のbody内で他のメジャーモード(親モード)を呼び出す場合には、親モードが自身でこれらのフックを実行しないように@code{delay-mode-hooks}の中でこれを行うべきです。かわりに派生モードは親のモードフックも実行する@code{run-mode-hooks}を呼び出します。@ref{Major Mode Conventions}を参照してください。"

#. type: Plain text
#: original_texis/modes.texi:1016
msgid "Emacs versions before Emacs 22 did not have @code{delay-mode-hooks}.  Versions before 24 did not have @code{change-major-mode-after-body-hook}.  When user-implemented major modes do not use @code{run-mode-hooks} and have not been updated to use these newer features, they won't entirely follow these conventions: they may run the parent's mode hook too early, or fail to run @code{after-change-major-mode-hook}.  If you encounter such a major mode, please correct it to follow these conventions."
msgstr "Emacs 22より前のバージョンのEmacsには@code{delay-mode-hooks}がありません。またEmacs 24より前のバージョンには@code{change-major-mode-after-body-hook}がありません。ユーザー実装のメジャーモードが@code{run-mode-hooks}を使用せず、これらの新しい機能を使用するようにアップデートされていないときは、これらのメジャーモードは以下の慣習に完全にしたがわないでしょう。それらのモードは親のモードフックをあまりに早く実行したり、@code{after-change-major-mode-hook}の実行に失敗するかもしれません。そのようなメジャーモードに遭遇したら以下の慣習にしたがって修正をお願いします。"

#. type: Plain text
#: original_texis/modes.texi:1021
msgid "When you define a major mode using @code{define-derived-mode}, it automatically makes sure these conventions are followed.  If you define a major mode ``by hand'', not using @code{define-derived-mode}, use the following functions to handle these conventions automatically."
msgstr "@code{define-derived-mode}を使用してメジャーモードを定義したときは、自動的にこれらの慣習にしたがうことが保証されます。@code{define-derived-mode}を使用せずにメジャーモードを``手動''で定義したら、これらの慣習を自動的に処理するように以下の関数を使用してください。"

#. type: defun
#: original_texis/modes.texi:1022
#, no-wrap
msgid "run-mode-hooks &rest hookvars"
msgstr "run-mode-hooks &rest hookvars"

#. type: defun
#: original_texis/modes.texi:1030
msgid "Major modes should run their mode hook using this function.  It is similar to @code{run-hooks} (@pxref{Hooks}), but it also runs @code{change-major-mode-after-body-hook}, @code{hack-local-variables} (when the buffer is visiting a file) (@pxref{File Local Variables}), and @code{after-change-major-mode-hook}.  The last thing it does is to evaluate any @code{:after-hook} forms declared by parent modes (@pxref{Derived Modes})."
msgstr "メジャーモードはこの関数を使用してモードフックを実行すること。これは@code{run-hooks} (@ref{Hooks}を参照)と似ているが@code{change-major-mode-after-body-hook}、(バッファーがファイルをvisitしていれば)@code{hack-local-variables} (@ref{File Local Variables}を参照)、@code{after-change-major-mode-hook}も実行する。これは最後に親モード(@ref{Derived Modes}を参照)で宣言されている@code{:after-hook}フォームをすべて評価する。"

#. type: defun
#: original_texis/modes.texi:1036
msgid "When this function is called during the execution of a @code{delay-mode-hooks} form, it does not run the hooks or @code{hack-local-variables} or evaluate the forms immediately.  Instead, it arranges for the next call to @code{run-mode-hooks} to run them."
msgstr "この関数が@code{delay-mode-hooks}フォーム実行中に呼び出されたときはフックや@code{hack-local-variables}の実行、およびフォームの評価を即座には行わない。かわりに次の@code{run-mode-hooks}呼び出しでそれらを実行するようにアレンジする。"

#. type: defmac
#: original_texis/modes.texi:1038
#, no-wrap
msgid "delay-mode-hooks body@dots{}"
msgstr "delay-mode-hooks body@dots{}"

#. type: defmac
#: original_texis/modes.texi:1041
msgid "When one major mode command calls another, it should do so inside of @code{delay-mode-hooks}."
msgstr "あるメジャーモードコマンドが他のメジャーモードコマンドを呼び出すときは@code{delay-mode-hooks}の内部で行うこと。"

#. type: defmac
#: original_texis/modes.texi:1047
msgid "This macro executes @var{body}, but tells all @code{run-mode-hooks} calls during the execution of @var{body} to delay running their hooks.  The hooks will actually run during the next call to @code{run-mode-hooks} after the end of the @code{delay-mode-hooks} construct."
msgstr "このマクロは@var{body}を実行するが、@var{body}実行中はすべての@code{run-mode-hooks}呼び出しにたいしてそれらのフックの実行を遅延するよう指示する。それらのフックは実際には@code{delay-mode-hooks}構造の最後の後、次の@code{run-mode-hooks}呼び出しの間に実行されるだろう。"

#. type: defvar
#: original_texis/modes.texi:1049
#, no-wrap
msgid "change-major-mode-after-body-hook"
msgstr "change-major-mode-after-body-hook"

#. type: defvar
#: original_texis/modes.texi:1052
msgid "This is a normal hook run by @code{run-mode-hooks}.  It is run before the mode hooks."
msgstr "これは@code{run-mode-hooks}により実行されるノーマルフックである。これはそのモードのフックの前に実行される。"

#. type: defvar
#: original_texis/modes.texi:1054
#, no-wrap
msgid "after-change-major-mode-hook"
msgstr "after-change-major-mode-hook"

#. type: defvar
#: original_texis/modes.texi:1057
msgid "This is a normal hook run by @code{run-mode-hooks}.  It is run at the very end of every properly-written major mode command."
msgstr "これは@code{run-mode-hooks}により実行されるノーマルフックである。これはすべての適切に記述されたメジャーモードコマンドの一番最後に実行される。"

#. type: cindex
#: original_texis/modes.texi:1060 original_texis/modes.texi:1061
#, no-wrap
msgid "Tabulated List mode"
msgstr "Tabulated List mode"

#. type: Plain text
#: original_texis/modes.texi:1069
msgid "Tabulated List mode is a major mode for displaying tabulated data, i.e., data consisting of @dfn{entries}, each entry occupying one row of text with its contents divided into columns.  Tabulated List mode provides facilities for pretty-printing rows and columns, and sorting the rows according to the values in each column.  It is derived from Special mode (@pxref{Basic Major Modes})."
msgstr "Tabulated Listモードとは、表形式データ(@dfn{エントリー}から構成されるデータで各エントリーはそれぞれテキストの1行を占め、エントリーの内容は列に分割されるようなデータ)を表示するためのメジャーモードです。Tabulated Listモードは行列の見栄えよくプリントする機能、および各列の値に応じて行をソートする機能を提供します。これはSpecialモードから派生されたモードです(@ref{Basic Major Modes}を参照)。"

#. type: findex
#: original_texis/modes.texi:1070
#, no-wrap
msgid "make-vtable"
msgstr "make-vtable"

#. type: cindex
#: original_texis/modes.texi:1071
#, no-wrap
msgid "variable pitch tables"
msgstr "variable pitch tables"

#. type: Plain text
#: original_texis/modes.texi:1079
msgid "Tabulated List mode is geared towards displaying text using monospaced fonts, using a single font and text size.  If you want to display a table using variable pitch fonts or images, @code{make-vtable} can be used instead.  vtable also support having more than a single table in a buffer, or having a buffer that contains both a table and additional text in it.  @xref{Introduction,,, vtable}, for more information."
msgstr "Tabulated Listモードは単一のフォントとテキストサイズによりモノスペースフォントを使用してテキストを表示するように調整されています。可変ピッチフォントやイメージを使用したテーブルが表示したければ、かわりに@code{make-vtable}を使うことができます。vtableでは1つのバッファーに複数のテーブルをもったり、テーブルと追加のテキストの両方を含んだバッファーをもつことができます。詳細については@ref{Introduction,,, vtable}を参照してください。"

#. type: Plain text
#: original_texis/modes.texi:1084
msgid "Tabulated List mode is intended to be used as a parent mode by a more specialized major mode.  Examples include Process Menu mode (@pxref{Process Information}) and Package Menu mode (@pxref{Package Menu,,, emacs, The GNU Emacs Manual})."
msgstr "Tabulated Listモードは、より特化したメジャーモードの親モードとして使用されることを意図しています。例としてはProcess Menuモード(@ref{Process Information}を参照)、Package Menuモード(@ref{Package Menu,,, emacs, The GNU Emacs Manual}を参照)が含まれます。"

#. type: findex
#: original_texis/modes.texi:1085
#, no-wrap
msgid "tabulated-list-mode"
msgstr "tabulated-list-mode"

#. type: Plain text
#: original_texis/modes.texi:1093
msgid "Such a derived mode should use @code{define-derived-mode} in the usual way, specifying @code{tabulated-list-mode} as the second argument (@pxref{Derived Modes}).  The body of the @code{define-derived-mode} form should specify the format of the tabulated data, by assigning values to the variables documented below; optionally, it can then call the function @code{tabulated-list-init-header}, which will populate a header with the names of the columns."
msgstr "このような派生されたモードは@code{tabulated-list-mode}を2つ目の引数に指定して、通常の方法で@code{define-derived-mode}を使用するべきです(@ref{Derived Modes}を参照)。@code{define-derived-mode}フォームのbodyは以下にドキュメントされている変数に値を割り当てることにより、表形式データのフォーマットを指定するべきです。その後にオプションで列名のヘッダーを挿入する関数@code{tabulated-list-init-header}を呼び出すことができます。"

#. type: Plain text
#: original_texis/modes.texi:1099
msgid "The derived mode should also define a @dfn{listing command}.  This, not the mode command, is what the user calls (e.g., @kbd{M-x list-processes}).  The listing command should create or switch to a buffer, turn on the derived mode, specify the tabulated data, and finally call @code{tabulated-list-print} to populate the buffer."
msgstr "派生されたモードは@dfn{リスティングコマンド(listing command)}も定義するべきです。これはモードコマンドではなく、(@kbd{M-x list-processes}のように)ユーザーが呼び出すコマンドです。リスティングコマンドはバッファーを作成または切り替えて、派生モードをオンにして表形式データを指定し、最後にそのバッファーを事前設定(populate)するために@code{tabulated-list-print}を呼び出すべきです。"

#. type: defopt
#: original_texis/modes.texi:1100
#, no-wrap
msgid "tabulated-list-gui-sort-indicator-asc"
msgstr "tabulated-list-gui-sort-indicator-asc"

#. type: defopt
#: original_texis/modes.texi:1103
msgid "This variable specifies the character to be used on GUI frames as an indication that the column is sorted in the ascending order."
msgstr "この変数はGUIフレームにおいて列が昇順でソートされていることを示すために使用する文字を指定する。"

#. type: defopt
#: original_texis/modes.texi:1106
msgid "Whenever you change the sort direction in Tabulated List buffers, this indicator toggles between ascending (``asc'') and descending (``desc'')."
msgstr "Tabulated Listバッファーでソート方向を変更するたびに、このインジケーターの昇順(``asc'')と降順(``desc'')が切り替わる。"

#. type: defopt
#: original_texis/modes.texi:1108
#, no-wrap
msgid "tabulated-list-gui-sort-indicator-desc"
msgstr "tabulated-list-gui-sort-indicator-desc"

#. type: defopt
#: original_texis/modes.texi:1111
msgid "Like @code{tabulated-list-gui-sort-indicator-asc}, but used when the column is sorted in the descending order."
msgstr "@code{tabulated-list-gui-sort-indicator-asc}と同様だが列が降順でソートされている際に使用される。"

#. type: defopt
#: original_texis/modes.texi:1113
#, no-wrap
msgid "tabulated-list-tty-sort-indicator-asc"
msgstr "tabulated-list-tty-sort-indicator-asc"

#. type: defopt
#: original_texis/modes.texi:1116
msgid "Like @code{tabulated-list-gui-sort-indicator-asc}, but used for text-mode frames."
msgstr "@code{tabulated-list-gui-sort-indicator-asc}と同様だがテキストモードのフレームに使用される。"

#. type: defopt
#: original_texis/modes.texi:1118
#, no-wrap
msgid "tabulated-list-tty-sort-indicator-desc"
msgstr "tabulated-list-tty-sort-indicator-desc"

#. type: defopt
#: original_texis/modes.texi:1121
msgid "Like @code{tabulated-list-tty-sort-indicator-asc}, but used when the column is sorted in the descending order."
msgstr "@code{tabulated-list-tty-sort-indicator-asc}と同様だが列が降順でソートされている際に使用される。"

#. type: defvar
#: original_texis/modes.texi:1123
#, no-wrap
msgid "tabulated-list-format"
msgstr "tabulated-list-format"

#. type: defvar
#: original_texis/modes.texi:1128
msgid "This buffer-local variable specifies the format of the Tabulated List data.  Its value should be a vector.  Each element of the vector represents a data column, and should be a list @code{(@var{name} @var{width} @var{sort})}, where"
msgstr "このバッファーローカル変数は表形式データのフォーマットを指定する。値はベクターであり、ベクターの各要素はデータ列を表すリスト@code{(@var{name} @var{width} @var{sort})}である。ここで"

#. type: itemize
#: original_texis/modes.texi:1132
msgid "@var{name} is the column's name (a string)."
msgstr "@var{name}は列の名前(文字列)。"

#. type: itemize
#: original_texis/modes.texi:1136
msgid "@var{width} is the width to reserve for the column (an integer).  This is meaningless for the last column, which runs to the end of each line."
msgstr "@var{width}は列にたいして予約される文字数幅(整数)。最終列は各行の終端までなので意味がない。"

#. type: itemize
#: original_texis/modes.texi:1144
msgid "@var{sort} specifies how to sort entries by the column.  If @code{nil}, the column cannot be used for sorting.  If @code{t}, the column is sorted by comparing string values.  Otherwise, this should be a predicate function for @code{sort} (@pxref{Rearrangement}), which accepts two arguments with the same form as the elements of @code{tabulated-list-entries} (see below)."
msgstr "@var{sort}は列によりエントリーをソートする方法を指定する。@code{nil}ならその列はソートに使用できない。@code{t}なら列の文字列値を比較することによりソートされる。それ以外なら@code{tabulated-list-entries}の要素と同じ形式の2つの引数をとる、@code{sort}にたいする述語関数(predicate function)であること。"

#. type: defvar
#: original_texis/modes.texi:1147
#, no-wrap
msgid "tabulated-list-entries"
msgstr "tabulated-list-entries"

#. type: defvar
#: original_texis/modes.texi:1151
msgid "This buffer-local variable specifies the entries displayed in the Tabulated List buffer.  Its value should be either a list, or a function."
msgstr "このバッファーローカル変数はTabulated Listバッファー内に表示されるエントリーを指定する。値はリストか関数のいずれかであること。"

#. type: defvar
#: original_texis/modes.texi:1154
msgid "If the value is a list, each list element corresponds to one entry, and should have the form @w{@code{(@var{id} @var{contents})}}, where"
msgstr "値がリストなら各リスト要素は1つのエントリーに対応し、@w{@code{(@var{id} @var{contents})}}という形式であること。ここで"

#. type: itemize
#: original_texis/modes.texi:1160
msgid "@var{id} is either @code{nil}, or a Lisp object that identifies the entry.  If the latter, the cursor stays on the same entry when re-sorting entries.  Comparison is done with @code{equal}."
msgstr "@var{id}は@code{nil}、またはエントリーを識別するLispオブジェクト。Lispオブジェクトならエントリーを再ソートした際、カーソルは同じエントリー上に留まる。比較は@code{equal}で行われる。"

#. type: itemize
#: original_texis/modes.texi:1169
msgid "@var{contents} is a vector with the same number of elements as @code{tabulated-list-format}.  Each vector element is either a string, which is inserted into the buffer as-is; an image descriptor, which is used to insert an image (@pxref{Image Descriptors}); or a list @w{@code{(@var{label} . @var{properties})}}, which means to insert a text button by calling @code{insert-text-button} with @var{label} and @var{properties} as arguments (@pxref{Making Buttons})."
msgstr "@var{contents}は@code{tabulated-list-format}と要素数が同じベクター。ベクター要素は文字列(バッファーにそのまま挿入される)、あるいはイメージディスクリプター(イメージの挿入に使用される; @ref{Image Descriptors}を参照)、あるいは@w{@code{(@var{label} . @var{properties})}}という形式のリスト。これは@var{label}と@var{properties}を引数として@code{insert-text-button}を呼び出すことによりテキストボタンを挿入することを意味する(@ref{Making Buttons}を参照)。"

#. type: itemize
#: original_texis/modes.texi:1171
msgid "There should be no newlines in any of these strings."
msgstr "これらの文字列には改行を含めないこと。"

#. type: defvar
#: original_texis/modes.texi:1175
msgid "Otherwise, the value should be a function which returns a list of the above form when called with no arguments."
msgstr "それ以外なら、それは値は引数なしで呼び出されて上記形式のリストをリターンする関数であること。"

#. type: defvar
#: original_texis/modes.texi:1177
#, no-wrap
msgid "tabulated-list-revert-hook"
msgstr "tabulated-list-revert-hook"

#. type: defvar
#: original_texis/modes.texi:1181
msgid "This normal hook is run prior to reverting a Tabulated List buffer.  A derived mode can add a function to this hook to recompute @code{tabulated-list-entries}."
msgstr "このノーマルフックはTabulated Listバッファーのリバートに先立ち実行される。派生モードは@code{tabulated-list-entries}を再計算するためにこのフックに関数を追加できる。"

#. type: defvar
#: original_texis/modes.texi:1183
#, no-wrap
msgid "tabulated-list-printer"
msgstr "tabulated-list-printer"

#. type: defvar
#: original_texis/modes.texi:1190
msgid "The value of this variable is the function called to insert an entry at point, including its terminating newline.  The function should accept two arguments, @var{id} and @var{contents}, having the same meanings as in @code{tabulated-list-entries}.  The default value is a function which inserts an entry in a straightforward way; a mode which uses Tabulated List mode in a more complex way can specify another function."
msgstr "この変数の値はポイント位置にエントリー(エントリーを終端する改行を含む)を挿入するために呼び出される関数である。この関数は@code{tabulated-list-entries}と同じ意味をもつ2つの引数@var{id}と@var{contents}を受け取る。デフォルト値はエントリーをそのまま挿入する関数である。より複雑な方法でTabulated Listモードを使用するモードは別の関数を指定できる。"

#. type: defvar
#: original_texis/modes.texi:1192
#, no-wrap
msgid "tabulated-list-sort-key"
msgstr "tabulated-list-sort-key"

#. type: defvar
#: original_texis/modes.texi:1199
msgid "The value of this variable specifies the current sort key for the Tabulated List buffer.  If it is @code{nil}, no sorting is done.  Otherwise, it should have the form @code{(@var{name} . @var{flip})}, where @var{name} is a string matching one of the column names in @code{tabulated-list-format}, and @var{flip}, if non-@code{nil}, means to invert the sort order."
msgstr "この変数の値はTabulated Listバッファーにたいするカレントのソートキーを指定する。@code{nil}ならソートは行われない。それ以外なら@code{(@var{name} . @var{flip})}という形式の値をもつ。ここで@var{name}は@code{tabulated-list-format}内の列目の1つとマッチする文字列、@var{flip}が非@code{nil}なら逆順でのソートを意味する。"

#. type: defun
#: original_texis/modes.texi:1201
#, no-wrap
msgid "tabulated-list-init-header"
msgstr "tabulated-list-init-header"

#. type: defun
#: original_texis/modes.texi:1205
msgid "This function computes and sets @code{header-line-format} for the Tabulated List buffer (@pxref{Header Lines}), and assigns a keymap to the header line to allow sorting entries by clicking on column headers."
msgstr "この関数はTabulated Listバッファーにたいする@code{header-line-format}を計算してセットし、列ヘッダー上でのクリックでソートを可能にするキーマップをヘッダー行に割り当てる。"

#. type: defun
#: original_texis/modes.texi:1209
msgid "Modes derived from Tabulated List mode should call this after setting the above variables (in particular, only after setting @code{tabulated-list-format})."
msgstr "Tabulated Listから派生したモードは、上記の変数(特に@code{tabulated-list-format}をセットした後のみ)をセットした後にこれを呼び出すこと。"

#. type: defun
#: original_texis/modes.texi:1211
#, no-wrap
msgid "tabulated-list-print &optional remember-pos update"
msgstr "tabulated-list-print &optional remember-pos update"

#. type: defun
#: original_texis/modes.texi:1217
msgid "This function populates the current buffer with entries.  It should be called by the listing command.  It erases the buffer, sorts the entries specified by @code{tabulated-list-entries} according to @code{tabulated-list-sort-key}, then calls the function specified by @code{tabulated-list-printer} to insert each entry."
msgstr "この関数はカレントバッファーにエントリーを挿入する。これをリスティングコマンドとして呼び出すこと。この関数はバッファーを消去して@code{tabulated-list-entries}で指定されるエントリーを@code{tabulated-list-sort-key}にしたがってソートした後、各エントリーを挿入するために@code{tabulated-list-printer}で指定される関数を呼び出す。"

#. type: defun
#: original_texis/modes.texi:1221
msgid "If the optional argument @var{remember-pos} is non-@code{nil}, this function looks for the @var{id} element on the current line, if any, and tries to move to that entry after all the entries are (re)inserted."
msgstr "オプション引数@var{remember-pos}が非@code{nil}なら、この関数はカレント行で@var{id}要素を探して、もしあればすべてのエントリーを(再)挿入して、その後にそのエントリーの移動を試みる。"

#. type: defun
#: original_texis/modes.texi:1228
msgid "If the optional argument @var{update} is non-@code{nil}, this function will only erase or add entries that have changed since the last print.  This is several times faster if most entries haven't changed since the last time this function was called.  The only difference in outcome is that tags placed via @code{tabulated-list-put-tag} will not be removed from entries that haven't changed (normally all tags are removed)."
msgstr "オプション引数@var{update}が非@code{nil}なら、この関数は最後のプリント以降に変更されたエントリーの削除か追加だけを行う。この関数が最後に呼び出されて以降、ほとんどのエントリーが変更されていなければ、この関数は数倍高速になる。結果の違いは@code{tabulated-list-put-tag}を通じて配置されたタグが変更されていないエントリーから削除されないことだけである(通常はすべてのタグが削除される)。"

#. type: defun
#: original_texis/modes.texi:1230
#, no-wrap
msgid "tabulated-list-delete-entry"
msgstr "tabulated-list-delete-entry"

#. type: defun
#: original_texis/modes.texi:1232
msgid "This function deletes the entry at point."
msgstr "この関数はポイント位置のエントリーを削除する。"

#. type: defun
#: original_texis/modes.texi:1237
msgid "It returns a list @code{(@var{id} @var{cols})}, where @var{id} is the ID of the deleted entry and @var{cols} is a vector of its column descriptors.  It moves point to the beginning of the current line.  It returns @code{nil} if there is no entry at point."
msgstr "リスト@code{(@var{id} @var{cols})}をリターンする。ここで@var{id}は削除したエントリーのID、@var{cols}は列修飾子(column descriptors)のベクター。カレント行の先頭にポイントを移動する。ポイント位置にエントリーがなければ@code{nil}をリターンする。"

#. type: defun
#: original_texis/modes.texi:1240
msgid "Note that this function only changes the buffer contents; it does not alter @code{tabulated-list-entries}."
msgstr "この関数はバッファーのコンテンツだけを変更することに注意。@code{tabulated-list-entries}は変更しない。"

#. type: defun
#: original_texis/modes.texi:1242
#, no-wrap
msgid "tabulated-list-get-id &optional pos"
msgstr "tabulated-list-get-id &optional pos"

#. type: defun
#: original_texis/modes.texi:1247
msgid "This @code{defsubst} returns the ID object from @code{tabulated-list-entries} (if that is a list) or from the list returned by @code{tabulated-list-entries} (if it is a function).  If omitted or @code{nil}, @var{pos} defaults to point."
msgstr "この@code{defsubst}は@code{tabulated-list-entries}がリストならIDオブジェクト、関数なら@code{tabulated-list-entries}がリターンするリストからIDオブジェクトをリターンする。@var{pos}が省略か@code{nil}の場合のデフォルトはポイント位置。"

#. type: defun
#: original_texis/modes.texi:1249
#, no-wrap
msgid "tabulated-list-get-entry &optional pos"
msgstr "tabulated-list-get-entry &optional pos"

#. type: defun
#: original_texis/modes.texi:1255
msgid "This @code{defsubst} returns the entry object from @code{tabulated-list-entries} (if that is a list) or from the list returned by @code{tabulated-list-entries} (if it is a function).  This will be a vector for the ID at @var{pos}.  If there is no entry at @var{pos}, then the function returns @code{nil}."
msgstr "この@code{defsubst}は@code{tabulated-list-entries}がリストならエントリーオブジェクト、関数なら@code{tabulated-list-entries}がリターンするリストからエントリーオブジェクトをリターンする。これは@var{pos}にあるIDにたいするベクターになるだろう。@var{pos}にエントリーがなければ、この関数は@code{nil}をリターンする。"

#. type: vindex
#: original_texis/modes.texi:1257
#, no-wrap
msgid "tabulated-list-use-header-line"
msgstr "tabulated-list-use-header-line"

#. type: defun
#: original_texis/modes.texi:1258
#, no-wrap
msgid "tabulated-list-header-overlay-p &optional POS"
msgstr "tabulated-list-header-overlay-p &optional POS"

#. type: defun
#: original_texis/modes.texi:1264
msgid "This @code{defsubst} returns non-@code{nil} if there is a fake header at @var{pos}.  A fake header is used if @code{tabulated-list-use-header-line} is @code{nil} to put the column names at the beginning of the buffer.  If omitted or @code{nil}, @var{pos} defaults to @code{point-min}."
msgstr "この@code{defsubst}は@var{pos}に偽ヘッダーがあれば非@code{nil}をリターンする。偽ヘッダー(fake header)はバッファー先頭に列名を配置するために@code{tabulated-list-use-header-line}が@code{nil}にセットされている場合に使用される。@var{pos}が省略か@code{nil}の場合のデフォルトは@code{point-min}。"

#. type: vindex
#: original_texis/modes.texi:1266
#, no-wrap
msgid "tabulated-list-padding"
msgstr "tabulated-list-padding"

#. type: defun
#: original_texis/modes.texi:1267
#, no-wrap
msgid "tabulated-list-put-tag tag &optional advance"
msgstr "tabulated-list-put-tag tag &optional advance"

#. type: defun
#: original_texis/modes.texi:1274
msgid "This function puts @var{tag} in the padding area of the current line.  The padding area can be empty space at the beginning of the line, the width of which is governed by @code{tabulated-list-padding}.  @var{tag} should be a string, with a length less than or equal to @code{tabulated-list-padding}.  If @var{advance} is non-@code{nil}, this function advances point by one line."
msgstr "この関数はレント行のパディングエリアに@var{tag}を配置する。パディングエリアはその行の先頭にある空スペースであり、幅は@code{tabulated-list-padding}により制御される。@var{tag}は長さが@code{tabulated-list-padding}以下の文字列であること。@var{advance}が非@code{nil}なら、この関数は1行分ポイントを前方に移動する。"

#. type: defun
#: original_texis/modes.texi:1276
#, no-wrap
msgid "tabulated-list-clear-all-tags"
msgstr "tabulated-list-clear-all-tags"

#. type: defun
#: original_texis/modes.texi:1279
msgid "This function clears all tags from the padding area in the current buffer."
msgstr "この関数はカレントバッファーのパディングエリアからすべてのタグをクリアーする。"

#. type: defun
#: original_texis/modes.texi:1281
#, no-wrap
msgid "tabulated-list-set-col col desc &optional change-entry-data"
msgstr "tabulated-list-set-col col desc &optional change-entry-data"

#. type: defun
#: original_texis/modes.texi:1286
msgid "This function changes the tabulated list entry at point, setting @var{col} to @var{desc}.  @var{col} is the column number to change, or the name of the column to change.  @var{desc} is the new column descriptor, which is inserted via @code{tabulated-list-print-col}."
msgstr "この関数は@var{col}を@var{desc}にセットしてポイント位置にあるTabulated Listのエントリーを変更する。@var{col}は変更する列番号か列名、@var{desc}は新たな列記述子であり、@code{tabulated-list-print-col}を通じて挿入される。"

#. type: defun
#: original_texis/modes.texi:1291
msgid "If @var{change-entry-data} is non-@code{nil}, this function modifies the underlying data (usually the column descriptor in the list @code{tabulated-list-entries}) by setting the column descriptor of the vector to @code{desc}."
msgstr "@var{change-entry-data}が非@code{nil}なら、この関数は列記述子のベクターを@code{desc}にセットすることにより、背後のデータ(通常はリスト@code{tabulated-list-entries}内の列記述子)を変更する。"

#. type: cindex
#: original_texis/modes.texi:1296
#, no-wrap
msgid "generic mode"
msgstr "generic mode"

#. type: Plain text
#: original_texis/modes.texi:1302
msgid "@dfn{Generic modes} are simple major modes with basic support for comment syntax and Font Lock mode.  To define a generic mode, use the macro @code{define-generic-mode}.  See the file @file{generic-x.el} for some examples of the use of @code{define-generic-mode}."
msgstr "@dfn{genericモード(汎用モード)}とは、コメント構文にたいする基本的なサポートとFont Lockモードをもつシンプルなメジャーモードです。genericモードを定義するにはマクロ@code{define-generic-mode}を使用します。@code{define-generic-mode}の使い方の例は、ファイル@file{generic-x.el}を参照してください。"

#. type: defmac
#: original_texis/modes.texi:1303
#, no-wrap
msgid "define-generic-mode mode comment-list keyword-list font-lock-list auto-mode-list function-list &optional docstring"
msgstr "define-generic-mode mode comment-list keyword-list font-lock-list auto-mode-list function-list &optional docstring"

#. type: defmac
#: original_texis/modes.texi:1308
msgid "This macro defines a generic mode command named @var{mode} (a symbol, not quoted).  The optional argument @var{docstring} is the documentation for the mode command.  If you do not supply it, @code{define-generic-mode} generates one by default."
msgstr "このマクロは@var{mode} (クォートされていないシンボル)という名前のgenericモードコマンドを定義する。オプション引数@var{docstring}は、そのモードコマンドにたいするドキュメント文字列。これを与えなければ@code{define-generic-mode}がデフォルトのドキュメント文字列を生成する。"

#. type: defmac
#: original_texis/modes.texi:1318
msgid "The argument @var{comment-list} is a list in which each element is either a character, a string of one or two characters, or a cons cell.  A character or a string is set up in the mode's syntax table as a comment starter.  If the entry is a cons cell, the @sc{car} is set up as a comment starter and the @sc{cdr} as a comment ender.  (Use @code{nil} for the latter if you want comments to end at the end of the line.)  Note that the syntax table mechanism has limitations about what comment starters and enders are actually possible.  @xref{Syntax Tables}."
msgstr "引数@var{comment-list}は要素が文字、2文字以下の文字列、またはコンスセルである。文字か文字列ならそのモードの構文テーブル内でコメント開始識別子としてセットアップされる。エントリーがコンスセルなら@sc{car}はコメント開始識別子、@sc{cdr}はコメント終了識別子としてセットアップされる(行末によりコメントを終端させたければ後者に@code{nil}を使用する)。構文テーブルのメカニズムには実際にコメントの開始および終了識別子に関する制限があることに注意。 @ref{Syntax Tables}を参照のこと。"

#. type: defmac
#: original_texis/modes.texi:1325
msgid "The argument @var{keyword-list} is a list of keywords to highlight with @code{font-lock-keyword-face}.  Each keyword should be a string.  Meanwhile, @var{font-lock-list} is a list of additional expressions to highlight.  Each element of this list should have the same form as an element of @code{font-lock-keywords}.  @xref{Search-based Fontification}."
msgstr "引数@var{keyword-list}は@code{font-lock-keyword-face}でハイライトするキーワードのリストである。キーワードは文字列であること。一方、@var{font-lock-list}はハイライトするための追加の式リストである。このリストの各要素は@code{font-lock-keywords}の要素と同じ形式をもつこと。@ref{Search-based Fontification}を参照されたい。"

#. type: defmac
#: original_texis/modes.texi:1329
msgid "The argument @var{auto-mode-list} is a list of regular expressions to add to the variable @code{auto-mode-alist}.  They are added by the execution of the @code{define-generic-mode} form, not by expanding the macro call."
msgstr "引数@var{auto-mode-list}は変数@code{auto-mode-alist}に追加する正規表現のリストである。これらのは、マクロ呼び出しの展開時ではなく、@code{define-generic-mode}の実行時に追加される。"

#. type: defmac
#: original_texis/modes.texi:1333
msgid "Finally, @var{function-list} is a list of functions for the mode command to call for additional setup.  It calls these functions just before it runs the mode hook variable @code{@var{mode}-hook}."
msgstr "最後に@var{function-list}は追加セットアップのためにモードコマンドに呼び出される関数のリストである。これらの関数はモードフック変数@code{@var{mode}-hook}の実行の直前に呼び出される。"

#. type: subsection
#: original_texis/modes.texi:1336
#, no-wrap
msgid "Major Mode Examples"
msgstr "Major Mode Examples"

#. type: Plain text
#: original_texis/modes.texi:1341
msgid "Text mode is perhaps the simplest mode besides Fundamental mode.  Here are excerpts from @file{text-mode.el} that illustrate many of the conventions listed above:"
msgstr "おそらくTextモードは、Fundamentalを除いてもっともシンプルなモードです。上述した慣習の多くを説明するために以下に@file{text-mode.el}の抜粋を示します:"

#. type: group
#: original_texis/modes.texi:1354
#, no-wrap
msgid ""
";; @r{Create the syntax table for this mode.}\n"
"(defvar text-mode-syntax-table\n"
"  (let ((st (make-syntax-table)))\n"
"    (modify-syntax-entry ?\\\" \".   \" st)\n"
"    (modify-syntax-entry ?\\\\ \".   \" st)\n"
"    ;; Add 'p' so M-c on 'hello' leads to 'Hello', not 'hello'.\n"
"    (modify-syntax-entry ?' \"w p\" st)\n"
"    @dots{}\n"
"    st)\n"
"  \"Syntax table used while in `text-mode'.\")\n"
msgstr ""
";; @r{Create the syntax table for this mode.}\n"
"(defvar text-mode-syntax-table\n"
"  (let ((st (make-syntax-table)))\n"
"    (modify-syntax-entry ?\\\" \".   \" st)\n"
"    (modify-syntax-entry ?\\\\ \".   \" st)\n"
"    ;; Add 'p' so M-c on 'hello' leads to 'Hello', not 'hello'.\n"
"    (modify-syntax-entry ?' \"w p\" st)\n"
"    @dots{}\n"
"    st)\n"
"  \"Syntax table used while in `text-mode'.\")\n"

#. type: smallexample
#: original_texis/modes.texi:1357
#, no-wrap
msgid ";; @r{Create the keymap for this mode.}\n"
msgstr ";; @r{このモード用にキーマップを作成}\n"

#. type: group
#: original_texis/modes.texi:1363
#, no-wrap
msgid ""
"(defvar-keymap text-mode-map\n"
"  :doc \"Keymap for `text-mode'.\n"
"Many other modes, such as `mail-mode' and `outline-mode', inherit all\n"
"the commands defined in this map.\"\n"
"  \"C-M-i\" #'ispell-complete-word)\n"
msgstr ""
"(defvar text-mode-map\n"
"  (let ((map (make-sparse-keymap)))\n"
"    (define-key map \"\\e\\t\" 'ispell-complete-word)\n"
"    @dots{}\n"
"    map)\n"
"  \"Keymap for `text-mode'.\n"
"Many other modes, such as `mail-mode', `outline-mode' and\n"
"`indented-text-mode', inherit all the commands defined in this map.\")\n"

#. type: Plain text
#: original_texis/modes.texi:1367
msgid "Here is how the actual mode command is defined now:"
msgstr "そして実際にモードコマンドが定義される方法が以下になります:"

#. type: group
#: original_texis/modes.texi:1377
#, no-wrap
msgid ""
"(define-derived-mode text-mode nil \"Text\"\n"
"  \"Major mode for editing text written for humans to read.\n"
"In this mode, paragraphs are delimited only by blank or white lines.\n"
"You can thus get the full benefit of adaptive filling\n"
" (see the variable `adaptive-fill-mode').\n"
"\\\\@{text-mode-map@}\n"
"Turning on Text mode runs the normal hook `text-mode-hook'.\"\n"
msgstr ""
"(define-derived-mode text-mode nil \"Text\"\n"
"  \"人間が読むために記述されたテキストを編集するためのメジャーモード\n"
"このモードではパラグラフを区切るのはブランク行か空白行だけである\n"
"したがって適応型フィル(adaptive filling)の全恩恵を受けられる\n"
" (変数`adaptive-fill-mode'を参照のこと)\n"
"\\\\@{text-mode-map@}\n"
"Textモードのオンによりノーマルフック`text-mode-hook'が実行される\"\n"

#. type: group
#: original_texis/modes.texi:1381
#, no-wrap
msgid ""
"  (setq-local text-mode-variant t)\n"
"  (setq-local require-final-newline mode-require-final-newline))\n"
msgstr ""
"  (setq-local text-mode-variant t)\n"
"  (setq-local require-final-newline mode-require-final-newline))\n"

#. type: file{#1}
#: original_texis/modes.texi:1384
#, no-wrap
msgid "lisp-mode.el"
msgstr "lisp-mode.el"

#. type: Plain text
#: original_texis/modes.texi:1389
msgid "The three Lisp modes (Lisp mode, Emacs Lisp mode, and Lisp Interaction mode) have more features than Text mode and the code is correspondingly more complicated.  Here are excerpts from @file{lisp-mode.el} that illustrate how these modes are written."
msgstr "3つのLisp用モード(Lispモード、Emacs Lispモード、Lisp Interactionモード)はTextモードより多くの機能をもち、それにふさわしくコードもより複雑です。そのようなモードの記述方法を説明するために@file{lisp-mode.el}の抜粋を示します。"

#. type: Plain text
#: original_texis/modes.texi:1391
msgid "Here is how the Lisp mode syntax and abbrev tables are defined:"
msgstr "以下はLispモードの構文テーブルとabbrevテーブルを定義する方法です:"

#. type: cindex
#: original_texis/modes.texi:1392
#, no-wrap
msgid "syntax table example"
msgstr "syntax table example"

#. type: group
#: original_texis/modes.texi:1398
#, no-wrap
msgid ""
";; @r{Create mode-specific table variables.}\n"
"(define-abbrev-table 'lisp-mode-abbrev-table ()\n"
"  \"Abbrev table for Lisp mode.\")\n"
"\n"
msgstr ""
";; @r{モード固有のテーブル変数の作成}\n"
"(define-abbrev-table 'lisp-mode-abbrev-table ()\n"
"  \"Abbrev table for Lisp mode.\")\n"
"\n"

#. type: group
#: original_texis/modes.texi:1407
#, no-wrap
msgid ""
"(defvar lisp-mode-syntax-table\n"
"  (let ((table (make-syntax-table lisp--mode-syntax-table)))\n"
"    (modify-syntax-entry ?\\[ \"_   \" table)\n"
"    (modify-syntax-entry ?\\] \"_   \" table)\n"
"    (modify-syntax-entry ?# \"' 14\" table)\n"
"    (modify-syntax-entry ?| \"\\\" 23bn\" table)\n"
"    table)\n"
"  \"Syntax table used in `lisp-mode'.\")\n"
msgstr ""
"(defvar lisp-mode-syntax-table\n"
"  (let ((table (make-syntax-table lisp--mode-syntax-table)))\n"
"    (modify-syntax-entry ?\\[ \"_   \" table)\n"
"    (modify-syntax-entry ?\\] \"_   \" table)\n"
"    (modify-syntax-entry ?# \"' 14\" table)\n"
"    (modify-syntax-entry ?| \"\\\" 23bn\" table)\n"
"    table)\n"
"  \"`lisp-mode'で使用される構文テーブル\")\n"

#. type: Plain text
#: original_texis/modes.texi:1413
msgid "The three modes for Lisp share much of their code.  For instance, Lisp mode and Emacs Lisp mode inherit from Lisp Data mode and Lisp Interaction Mode inherits from Emacs Lisp mode."
msgstr "Lisp用の3つのモードは多くのコードを共有します。たとえばLispモードとEmacs LispモードはLisp Dataモード、Lisp InteractionモードはEmacs Lispモードから派生したモードです。"

#. type: Plain text
#: original_texis/modes.texi:1417
msgid "Amongst other things, Lisp Data mode sets up the @code{comment-start} variable to handle Lisp comments:"
msgstr "その中でも特にLisp Dataモードは、Lispコメントを処理するために変数@code{comment-start}をセットアップします:"

#. type: group
#: original_texis/modes.texi:1422
#, no-wrap
msgid ""
"  (setq-local comment-start \";\")\n"
"  @dots{}\n"
msgstr ""
"  (setq-local comment-start \";\")\n"
"  @dots{}\n"

#. type: Plain text
#: original_texis/modes.texi:1429
msgid "Each of the different Lisp modes has a slightly different keymap.  For example, Lisp mode binds @kbd{C-c C-z} to @code{run-lisp}, but the other Lisp modes do not.  However, all Lisp modes have some commands in common.  The following code sets up the common commands:"
msgstr "これらの異なるLisp用モードは、微妙に異なるキーマップをもちます。たとえばLispモードは@kbd{C-c C-z}を@code{run-lisp}にバインドしますが、他のLisp用モードはこれを行いません。とはいえすべてのLisp用モードに共通なコマンドがいくつかあります。以下のコードはそれらの共通コマンドをセットアップします:"

#. type: group
#: original_texis/modes.texi:1437
#, no-wrap
msgid ""
"(defvar-keymap lisp-mode-shared-map\n"
"  :parent prog-mode-map\n"
"  :doc \"Keymap for commands shared by all sorts of Lisp modes.\"\n"
"  \"C-M-q\" #'indent-sexp\n"
"  \"DEL\" #'backward-delete-char-untabify)\n"
msgstr ""
"(defvar-keymap lisp-mode-shared-map\n"
"  :parent prog-mode-map\n"
"  :doc \"Keymap for commands shared by all sorts of Lisp modes.\"\n"
"  \"C-M-q\" #'indent-sexp\n"
"  \"DEL\" #'backward-delete-char-untabify)\n"

#. type: Plain text
#: original_texis/modes.texi:1442
msgid "And here is the code to set up the keymap for Lisp mode:"
msgstr "そして以下がLispモードのためのキーマップをセットアップするコードです:"

#. type: group
#: original_texis/modes.texi:1451
#, no-wrap
msgid ""
"(defvar-keymap lisp-mode-map\n"
"  :doc \"Keymap for ordinary Lisp mode.\n"
"All commands in `lisp-mode-shared-map' are inherited by this map.\"\n"
"  :parent lisp-mode-shared-map\n"
"  \"C-M-x\" #'lisp-eval-defun\n"
"  \"C-c C-z\" #'run-lisp)\n"
msgstr ""
"(defvar-keymap lisp-mode-map\n"
"  :doc \"Keymap for ordinary Lisp mode.\n"
"All commands in `lisp-mode-shared-map' are inherited by this map.\"\n"
"  :parent lisp-mode-shared-map\n"
"  \"C-M-x\" #'lisp-eval-defun\n"
"  \"C-c C-z\" #'run-lisp)\n"

#. type: Plain text
#: original_texis/modes.texi:1456
msgid "Finally, here is the major mode command for Lisp mode:"
msgstr "最後はLispモードのためのメジャーモードコマンドです:"

#. type: group
#: original_texis/modes.texi:1464
#, no-wrap
msgid ""
"(define-derived-mode lisp-mode lisp-data-mode \"Lisp\"\n"
"  \"Major mode for editing Lisp code for Lisps other than GNU Emacs Lisp.\n"
"Commands:\n"
"Delete converts tabs to spaces as it moves back.\n"
"Blank lines separate paragraphs.  Semicolons start comments.\n"
"\n"
msgstr ""
"(define-derived-mode lisp-mode lisp-data-mode \"Lisp\"\n"
"  \"GNU Emacs Lisp以外のLispコードを編集するためのメジャーモード\n"
"コマンド:\n"
"あたかも後方に移動するようにタブをスペースに削除変換する\n"
"パラグラフ区切りはブランク行でコメント開始はセミコロン\n"
"\n"

#. type: group
#: original_texis/modes.texi:1468
#, no-wrap
msgid ""
"\\\\@{lisp-mode-map@}\n"
"Note that `run-lisp' may be used either to start an inferior Lisp job\n"
"or to switch back to an existing one.\"\n"
msgstr ""
"\\\\@{lisp-mode-map@}\n"
"`run-lisp'はinferior Lispジョブの開始と既存ジョブ\n"
"から戻るための両方に使われるかもしれないことに注意\"\n"

#. type: group
#: original_texis/modes.texi:1474
#, no-wrap
msgid ""
"  (setq-local find-tag-default-function 'lisp-find-tag-default)\n"
"  (setq-local comment-start-skip\n"
"              \"\\\\(\\\\(^\\\\|[^\\\\\\n]\\\\)\\\\(\\\\\\\\\\\\\\\\\\\\)*\\\\)\\\\(;+\\\\|#|\\\\) *\")\n"
"  (setq imenu-case-fold-search t))\n"
msgstr ""
"  (setq-local find-tag-default-function 'lisp-find-tag-default)\n"
"  (setq-local comment-start-skip\n"
"              \"\\\\(\\\\(^\\\\|[^\\\\\\n]\\\\)\\\\(\\\\\\\\\\\\\\\\\\\\)*\\\\)\\\\(;+\\\\|#|\\\\) *\")\n"
"  (setq imenu-case-fold-search t))\n"

#. type: cindex
#: original_texis/modes.texi:1479
#, no-wrap
msgid "minor mode"
msgstr "minor mode"

#. type: Plain text
#: original_texis/modes.texi:1484
msgid "A @dfn{minor mode} provides optional features that users may enable or disable independently of the choice of major mode.  Minor modes can be enabled individually or in combination."
msgstr "@dfn{マイナーモード(minor mode)}はメジャーモードの選択とは無関係にユーザーが有効や無効にできるオプション機能の使用を提供します。マイナーモードは個別、あるいは組み合わせて有効にできます。"

#. type: Plain text
#: original_texis/modes.texi:1491
msgid "Most minor modes implement features that are independent of the major mode, and can thus be used with most major modes.  For example, Auto Fill mode works with any major mode that permits text insertion.  A few minor modes, however, are specific to a particular major mode.  For example, Diff Auto Refine mode is a minor mode that is intended to be used only with Diff mode."
msgstr "ほとんどのマイナーモードはメジャーモードとは独立した機能を実装するので、ほとんどのメジャーモードと一緒に使用することができます。たとえばAuto Fillモードはテキスト挿入を許容する任意のメジャーモードとともに機能します。しかし少数ながら特定のメジャーモードに特化したマイナーモードもあります。たとえばDiff Auto RefineモードはDiffモードとの使用だけを意図したマイナーモードです。"

#. type: Plain text
#: original_texis/modes.texi:1495
msgid "Ideally, a minor mode should have its desired effect regardless of the other minor modes in effect.  It should be possible to activate and deactivate minor modes in any order."
msgstr "理想的にはマイナーモードは他のマイナーモードの効果と無関係に期待した効果をもつべきです。任意の順序でマイナーモードをアクティブや非アクティブにすることも可能であるべきです。"

#. type: defvar
#: original_texis/modes.texi:1496
#, no-wrap
msgid "local-minor-modes"
msgstr "local-minor-modes"

#. type: defvar
#: original_texis/modes.texi:1499
msgid "This buffer-local variable lists the currently enabled minor modes in the current buffer, and is a list of symbols."
msgstr "このバッファーローカル変数はカレントバッファーで有効なマイナーモード(シンボル)のリスト。"

#. type: defvar
#: original_texis/modes.texi:1501
#, no-wrap
msgid "global-minor-modes"
msgstr "global-minor-modes"

#. type: defvar
#: original_texis/modes.texi:1504
msgid "This variable lists the currently enabled global minor modes, and is a list of symbols."
msgstr "このバッファーローカル変数はカレントで有効なマイナーグローバルモード(シンボル)のリスト。"

#. type: defvar
#: original_texis/modes.texi:1506
#, no-wrap
msgid "minor-mode-list"
msgstr "minor-mode-list"

#. type: defvar
#: original_texis/modes.texi:1508
msgid "The value of this variable is a list of all minor mode commands."
msgstr "この変数の値はすべてのマイナーモードコマンドのリスト。"

#. type: node
#: original_texis/modes.texi:1514 original_texis/modes.texi:1516
#, no-wrap
msgid "Minor Mode Conventions"
msgstr "Minor Mode Conventions"

#. type: menuentry
#: original_texis/modes.texi:1514
msgid "Tips for writing a minor mode."
msgstr "マイナーモードを記述するためのTips。"

#. type: subsection
#: original_texis/modes.texi:1514 original_texis/modes.texi:1665
#: original_texis/modes.texi:1666
#, no-wrap
msgid "Keymaps and Minor Modes"
msgstr "Keymaps and Minor Modes"

#. type: menuentry
#: original_texis/modes.texi:1514
msgid "How a minor mode can have its own keymap."
msgstr "マイナーモードが自身のキーマップをもつための方法。"

#. type: subsection
#: original_texis/modes.texi:1514 original_texis/modes.texi:1689
#: original_texis/modes.texi:1690
#, no-wrap
msgid "Defining Minor Modes"
msgstr "Defining Minor Modes"

#. type: menuentry
#: original_texis/modes.texi:1514
msgid "A convenient facility for defining minor modes."
msgstr "マイナーモードを定義するための便利な機能。"

#. type: subsection
#: original_texis/modes.texi:1517
#, no-wrap
msgid "Conventions for Writing Minor Modes"
msgstr "Conventions for Writing Minor Modes"

#. type: cindex
#: original_texis/modes.texi:1518
#, no-wrap
msgid "minor mode conventions"
msgstr "minor mode conventions"

#. type: cindex
#: original_texis/modes.texi:1519
#, no-wrap
msgid "conventions for writing minor modes"
msgstr "conventions for writing minor modes"

#. type: Plain text
#: original_texis/modes.texi:1525
msgid "There are conventions for writing minor modes just as there are for major modes (@pxref{Major Modes}).  These conventions are described below.  The easiest way to follow them is to use the macro @code{define-minor-mode}.  @xref{Defining Minor Modes}."
msgstr "メジャーモードにも監修があるように(@ref{Major Modes}を参照)、マイナーモードの記述にも慣習があります。その慣習について以下で説明します。これらの慣習にしたがうにはマクロ@code{define-minor-mode}を使用するのがもっとも簡単な方法です。@ref{Defining Minor Modes}を参照してください。"

#. type: cindex
#: original_texis/modes.texi:1528
#, no-wrap
msgid "mode variable"
msgstr "mode variable"

#. type: itemize
#: original_texis/modes.texi:1534
msgid "Define a variable whose name ends in @samp{-mode}.  We call this the @dfn{mode variable}.  The minor mode command should set this variable.  The value will be @code{nil} if the mode is disabled, and non-@code{nil} if the mode is enabled.  The variable should be buffer-local if the minor mode is buffer-local."
msgstr "名前が@samp{-mode}で終わる変数を定義する。これを@dfn{モード変数(mode variable)}と呼ぶ。マイナーモードコマンドはこの変数をセットすること。値はそのモードが無効なら@code{nil}、有効なら非@code{nil}になる。そのマイナーモードがバッファーローカルならこの変数もバッファーローカルであること。"

#. type: itemize
#: original_texis/modes.texi:1540
msgid "This variable is used in conjunction with the @code{minor-mode-alist} to display the minor mode name in the mode line.  It also determines whether the minor mode keymap is active, via @code{minor-mode-map-alist} (@pxref{Controlling Active Maps}).  Individual commands or hooks can also check its value."
msgstr "この変数はモードラインにマイナーモードの名前を表示するために@code{minor-mode-alist}と結合して使用される。これは@code{minor-mode-map-alist}を通じて、そのマイナーモードのキーマップがアクティブかどうかも判定する(@ref{Controlling Active Maps}を参照)。個々のコマンドやフックもこの変数の値をチェックできる。"

#. type: itemize
#: original_texis/modes.texi:1546
msgid "Define a command, called the @dfn{mode command}, whose name is the same as the mode variable.  Its job is to set the value of the mode variable, plus anything else that needs to be done to actually enable or disable the mode's features."
msgstr "モード変数と同じ名前をもつ@dfn{モードコマンド(mode command)}と呼ばれるコマンドを定義する。このコマンドの役目はモード変数の値のセットに加えて、そのモードの機能を使用を実際に有効や無効にするために必要な他のすべてを行うことである。"

#. type: itemize
#: original_texis/modes.texi:1552
msgid "The mode command should accept one optional argument.  If called interactively with no prefix argument, it should toggle the mode (i.e., enable if it is disabled, and disable if it is enabled).  If called interactively with a prefix argument, it should enable the mode if the argument is positive and disable it otherwise."
msgstr "モードコマンドは1つのオプション引数を受け入れること。プレフィクス引数なしでinteractiveに呼び出されたらモードをトグルする(toggle: 切り替える。たとえば無効なら有効に、有効なら無効にする)こと。プレフィクス引数とともにinteractiveに呼び出された場合にはその引数が正であればモードを有効にして、それ以外なら無効にすること。"

#. type: itemize
#: original_texis/modes.texi:1558
msgid "If the mode command is called from Lisp (i.e., non-interactively), it should enable the mode if the argument is omitted or @code{nil}; it should toggle the mode if the argument is the symbol @code{toggle}; otherwise it should treat the argument in the same way as for an interactive call with a numeric prefix argument, as described above."
msgstr "モードコマンドがLispから(つまり非interactiveに)呼び出された場合は、引数が省略または@code{nil}ならモードを有効にすること。引数がシンボル@code{toggle}ならモードをトグルして、それ以外なら上述の数引数とともにinteractiveに呼び出されたときと同じ方法によってその引数を扱うこと。"

#. type: itemize
#: original_texis/modes.texi:1561
msgid "The following example shows how to implement this behavior (it is similar to the code generated by the @code{define-minor-mode} macro):"
msgstr "以下はこの挙動の実装方法を示す例である(@code{define-minor-mode}マクロが生成するコードもこれに類似する)。"

#. type: example
#: original_texis/modes.texi:1571
#, no-wrap
msgid ""
"(interactive (list (or current-prefix-arg 'toggle)))\n"
"(let ((enable\n"
"       (if (eq arg 'toggle)\n"
"           (not foo-mode) ; @r{this is the mode's mode variable}\n"
"         (> (prefix-numeric-value arg) 0))))\n"
"  (if enable\n"
"      @var{do-enable}\n"
"    @var{do-disable}))\n"
msgstr ""
"(interactive (list (or current-prefix-arg 'toggle)))\n"
"(let ((enable\n"
"       (if (eq arg 'toggle)\n"
"           (not foo-mode) ; @r{そのモードのモード変数}\n"
"         (> (prefix-numeric-value arg) 0))))\n"
"  (if enable\n"
"      @var{do-enable}\n"
"    @var{do-disable}))\n"

#. type: itemize
#: original_texis/modes.texi:1576
msgid "The reason for this somewhat complex behavior is that it lets users easily toggle the minor mode interactively, and also lets the minor mode be easily enabled in a mode hook, like this:"
msgstr "やや複雑なこの挙動の理由は、ユーザーが簡単かつinteractiveにマイナーモードをトグルできることと、以下のようにモードフック内で簡単にマイナーモードを有効にできるからである:"

#. type: example
#: original_texis/modes.texi:1579
#, no-wrap
msgid "(add-hook 'text-mode-hook 'foo-mode)\n"
msgstr "(add-hook 'text-mode-hook 'foo-mode)\n"

#. type: itemize
#: original_texis/modes.texi:1586
msgid "This behaves correctly whether or not @code{foo-mode} was already enabled, since the @code{foo-mode} mode command unconditionally enables the minor mode when it is called from Lisp with no argument.  Disabling a minor mode in a mode hook is a little uglier:"
msgstr "@code{foo-mode}モードコマンドは引数なしでLispから呼び出されたときは無条件にそのマイナーモードを有効にするので、これは@code{foo-mode}がすでに有効でもそうでなくても正しく振る舞う。モードフック内でマイナーモードを無効にする場合は少々醜くなる:"

#. type: example
#: original_texis/modes.texi:1589
#, no-wrap
msgid "(add-hook 'text-mode-hook (lambda () (foo-mode -1)))\n"
msgstr "(add-hook 'text-mode-hook (lambda () (foo-mode -1)))\n"

#. type: itemize
#: original_texis/modes.texi:1593
msgid "However, this is not very commonly done."
msgstr "しかしこれは頻繁には行われない。"

#. type: itemize
#: original_texis/modes.texi:1597
msgid "Enabling or disabling a minor mode twice in direct succession should not fail and should do the same thing as enabling or disabling it only once.  In other words, the minor mode command should be idempotent."
msgstr "マイナーモードを2回連続で直接有効(や無効)にしても失敗せずに、1回だけ有効(や無効)にしたときと同じことを行うこと。言い換えるとマイナーモードコマンドはべき等であること。"

#. type: itemize
#: original_texis/modes.texi:1603
msgid "Add an element to @code{minor-mode-alist} for each minor mode (@pxref{Definition of minor-mode-alist}), if you want to indicate the minor mode in the mode line.  This element should be a list of the following form:"
msgstr "モードラインにマイナーモードを表示したければ、それぞれのマイナーモードにたいして要素を@code{minor-mode-alist}に追加する(@ref{Definition of minor-mode-alist}を参照)。この要素は以下の形式のリストであること:"

#. type: smallexample
#: original_texis/modes.texi:1606
#, no-wrap
msgid "(@var{mode-variable} @var{string})\n"
msgstr "(@var{mode-variable} @var{string})\n"

#. type: itemize
#: original_texis/modes.texi:1612
msgid "Here @var{mode-variable} is the variable that controls enabling of the minor mode, and @var{string} is a short string, starting with a space, to represent the mode in the mode line.  These strings must be short so that there is room for several of them at once."
msgstr "ここで@var{mode-variable}はマイナーモードの有効化を制御する変数、@var{string}はモードラインに表示するためのスペースで始まる短い文字列である。一度に複数モードの文字列がスペースを占有するので、これらの文字列は短くなければならない。"

#. type: itemize
#: original_texis/modes.texi:1615
msgid "When you add an element to @code{minor-mode-alist}, use @code{assq} to check for an existing element, to avoid duplication.  For example:"
msgstr "@code{minor-mode-alist}に要素を追加する際は、重複を避けるために既存要素のチェックに@code{assq}を使用すること。たとえば:"

#. type: group
#: original_texis/modes.texi:1620
#, no-wrap
msgid ""
"(unless (assq 'leif-mode minor-mode-alist)\n"
"  (push '(leif-mode \" Leif\") minor-mode-alist))\n"
msgstr ""
"(unless (assq 'leif-mode minor-mode-alist)\n"
"  (push '(leif-mode \" Leif\") minor-mode-alist))\n"

#. type: itemize
#: original_texis/modes.texi:1625
msgid "or like this, using @code{add-to-list} (@pxref{List Variables}):"
msgstr "または以下のように@code{add-to-list}(@ref{List Variables}を参照)を使用すること:"

#. type: group
#: original_texis/modes.texi:1629
#, no-wrap
msgid "(add-to-list 'minor-mode-alist '(leif-mode \" Leif\"))\n"
msgstr "(add-to-list 'minor-mode-alist '(leif-mode \" Leif\"))\n"

#. type: Plain text
#: original_texis/modes.texi:1637
msgid "In addition, several major mode conventions (@pxref{Major Mode Conventions}) apply to minor modes as well: those regarding the names of global symbols, the use of a hook at the end of the initialization function, and the use of keymaps and other tables."
msgstr "これらに加えてメジャーモードにたいする慣習(@ref{Major Mode Conventions}を参照)のいくつかは、マイナーモードにたいしても同様に適用されます。それらの慣習はグローバルシンボルの名前、初期化関数の最後でのフックの使用、キーマップおよびその他のテーブルの使用です。"

#. type: Plain text
#: original_texis/modes.texi:1648
msgid "The minor mode should, if possible, support enabling and disabling via Custom (@pxref{Customization}).  To do this, the mode variable should be defined with @code{defcustom}, usually with @code{:type 'boolean}.  If just setting the variable is not sufficient to enable the mode, you should also specify a @code{:set} method which enables the mode by invoking the mode command.  Note in the variable's documentation string that setting the variable other than via Custom may not take effect.  Also, mark the definition with an autoload cookie (@pxref{autoload cookie}), and specify a @code{:require} so that customizing the variable will load the library that defines the mode.  For example:"
msgstr "マイナーモードは、可能ならCustom(@ref{Customization}を参照)を通じた有効化と無効化をサポートするべきです。これを行うには、モード変数は@code{:type 'boolean}とともに@code{defcustom}で通常は定義されるべきです。その変数をセットするだけではモードの有効化に不足なら、モードコマンドを呼び出すことによりモードを有効にする@code{:set}メソッドも指定するべきです。そしてその変数のドキュメント文字列にCustomを通じて変数をセットしなければ効果がないことを注記してください。さらにその定義をautoload cookie(@ref{autoload cookie}を参照)でマークして、その変数のカスタマイズによりモードを定義するライブラリーがロードされるように@code{:require}を指定します。たとえば:"

#. type: group
#: original_texis/modes.texi:1662
#, no-wrap
msgid ""
";;;###autoload\n"
"(defcustom msb-mode nil\n"
"  \"Toggle msb-mode.\n"
"Setting this variable directly does not take effect;\n"
"use either \\\\[customize] or the function `msb-mode'.\"\n"
"  :set 'custom-set-minor-mode\n"
"  :initialize 'custom-initialize-default\n"
"  :version \"20.4\"\n"
"  :type    'boolean\n"
"  :group   'msb\n"
"  :require 'msb)\n"
msgstr ""
";;;###autoload\n"
"(defcustom msb-mode nil\n"
"  \"msb-modeをトグルする\n"
"この変数を直接セットしても効果がない\n"
"\\\\[customize]か関数`msb-mode'を使用すること\"\n"
"  :set 'custom-set-minor-mode\n"
"  :initialize 'custom-initialize-default\n"
"  :version \"20.4\"\n"
"  :type    'boolean\n"
"  :group   'msb\n"
"  :require 'msb)\n"

#. type: Plain text
#: original_texis/modes.texi:1671
msgid "Each minor mode can have its own keymap, which is active when the mode is enabled.  To set up a keymap for a minor mode, add an element to the alist @code{minor-mode-map-alist}.  @xref{Definition of minor-mode-map-alist}."
msgstr "マイナーモードはそれぞれ自身のキーマップをもつことができ、そのモードが有効になるとそのキーマップがアクティブになります。マイナーモード用のキーマップをセットアップするには@code{minor-mode-map-alist}というalistに要素を追加します。@ref{Definition of minor-mode-map-alist}を参照してください。"

#. type: cindex
#: original_texis/modes.texi:1672
#, no-wrap
msgid "@code{self-insert-command}, minor modes"
msgstr "@code{self-insert-command}, minor modes"

#. type: Plain text
#: original_texis/modes.texi:1682
msgid "One use of minor mode keymaps is to modify the behavior of certain self-inserting characters so that they do something else as well as self-insert.  (Another way to customize @code{self-insert-command} is through @code{post-self-insert-hook}, see @ref{Commands for Insertion}.  Apart from this, the facilities for customizing @code{self-insert-command} are limited to special cases, designed for abbrevs and Auto Fill mode.  Do not try substituting your own definition of @code{self-insert-command} for the standard one.  The editor command loop handles this function specially.)"
msgstr "特定の自己挿入文字にたいして自己挿入と同様に他の何かを行うように振る舞いを変更するのは、マイナーモードキーマップの1つの使い方です。(@code{self-insert-command}をカスタマイズする別の方法は@code{post-self-insert-hook}を通じて行う方法。@ref{Commands for Insertion}を参照のこと。これ以外の@code{self-insert-command}カスタマイズ用の機能は特別なケースに限定されておりabbrevモードとAuto Fillモードのためにデザインされている。@code{self-insert-command}の標準定義から独自の定義への置き換えを試みてはならない。エディターコマンドループはこの関数を特別に処理する。)"

#. type: Plain text
#: original_texis/modes.texi:1688
msgid "Minor modes may bind commands to key sequences consisting of @kbd{C-c} followed by a punctuation character.  However, sequences consisting of @kbd{C-c} followed by one of @kbd{@{@}<>:;}, or a control character or digit, are reserved for major modes.  Also, @kbd{C-c @var{letter}} is reserved for users.  @xref{Key Binding Conventions}."
msgstr "マイナーモードはコマンドを@kbd{C-c}とその後の区切り文字よって構成されるキーシーケンスにバインドできます。しかし@kbd{C-c}とその後の@kbd{@{@}<>:;}のいずれかの文字、またはコントロール文字、数字より構成されるシーケンスはメジャーモード用に予約済みです。また@kbd{C-c @var{letter}}はユーザー用に予約済みです。@ref{Key Binding Conventions}を参照してください。"

#. type: Plain text
#: original_texis/modes.texi:1694
msgid "The macro @code{define-minor-mode} offers a convenient way of implementing a mode in one self-contained definition."
msgstr "マクロ@code{define-minor-mode}は、自己完結した単一定義内にモードを実装する便利な方法を提供します。"

#. type: defmac
#: original_texis/modes.texi:1695
#, no-wrap
msgid "define-minor-mode mode doc keyword-args@dots{} body@dots{}"
msgstr "define-minor-mode mode doc keyword-args@dots{} body@dots{}"

#. type: defmac
#: original_texis/modes.texi:1699
msgid "This macro defines a new minor mode whose name is @var{mode} (a symbol).  It defines a command named @var{mode} to toggle the minor mode, with @var{doc} as its documentation string."
msgstr "このマクロは名前が@var{mode}(シンボル)の新たなマイナーモードを定義する。これはドキュメント文字列として@var{doc}をもつマイナーモードをトグルするために@var{mode}という名前のコマンドを定義する。"

#. type: defmac
#: original_texis/modes.texi:1708
msgid "The toggle command takes one optional (prefix) argument.  If called interactively with no argument it toggles the mode on or off.  A positive prefix argument enables the mode, any other prefix argument disables it.  From Lisp, an argument of @code{toggle} toggles the mode, whereas an omitted or @code{nil} argument enables the mode.  This makes it easy to enable the minor mode in a major mode hook, for example.  If @var{doc} is @code{nil}, the macro supplies a default documentation string explaining the above."
msgstr "トグルコマンドは1つのオプション(プレフィクス)引数を受け取る。引数なしでinteractiveに呼び出されると、そのモードのオンとオフをトグルする。正のプレフィクス引数はモードを有効にして、それ以外のプレフィクス引数はモードを無効にする。Lispから呼び出すと引数が@code{toggle}ならモードをトグルして、引数が省略か@code{nil}ならモードを有効にする。これはたとえばメジャーモードフック内でマイナーモードを有効にするのを簡便にする。@var{doc}が@code{nil}なら、このマクロは上記を記述したデフォルトのドキュメント文字列を提供する。"

#. type: defmac
#: original_texis/modes.texi:1711
msgid "By default, it also defines a variable named @var{mode}, which is set to @code{t} or @code{nil} by enabling or disabling the mode."
msgstr "デフォルトではこれはモードを有効にすると@code{t}、無効にすると@code{nil}にセットされる、@var{mode}という名前の変数も定義する。"

#. type: defmac
#: original_texis/modes.texi:1714
msgid "The @var{keyword-args} consist of keywords followed by corresponding values.  A few keywords have special meanings:"
msgstr "@var{keyword-args}はキーワードとその後の対応する値により構成され、いくつかのキーワードは特別な意味をもつ:"

#. type: item
#: original_texis/modes.texi:1716
#, no-wrap
msgid ":global @var{global}"
msgstr ":global @var{global}"

#. type: table
#: original_texis/modes.texi:1719
msgid "If non-@code{nil}, this specifies that the minor mode should be global rather than buffer-local.  It defaults to @code{nil}."
msgstr "非@code{nil}ならそのマイナーモードがバッファーローカルでなくグローバルであることを指定する。デフォルトは@code{nil}。"

#. type: table
#: original_texis/modes.texi:1728
msgid "One of the effects of making a minor mode global is that the @var{mode} variable becomes a customization variable.  Toggling it through the Customize interface turns the mode on and off, and its value can be saved for future Emacs sessions (@pxref{Saving Customizations,,, emacs, The GNU Emacs Manual}.  For the saved variable to work, you should ensure that the minor mode function is available each time Emacs starts; usually this is done by marking the @code{define-minor-mode} form as autoloaded."
msgstr "マイナーモードをグローバルにしたときの効果の1つは、@var{mode}変数がカスタマイズ変数になることである。Customizeインターフェイスを通じてこの変数をトグルするとモードがオンやオフになり、変数の値は将来のEmacsセッション用に保存できるようになる(@ref{Saving Customizations,,, emacs, The GNU Emacs Manual}を参照)。保存された変数が機能するためには、Emacsが開始されるたびにマイナーモード関数が利用できるようにする必要がある。これは通常は@code{define-minor-mode}フォームをautoloadすることにより行われる。"

#. type: item
#: original_texis/modes.texi:1729
#, no-wrap
msgid ":init-value @var{init-value}"
msgstr ":init-value @var{init-value}"

#. type: table
#: original_texis/modes.texi:1733
msgid "This is the value to which the @var{mode} variable is initialized.  Except in unusual circumstances (see below), this value must be @code{nil}."
msgstr "これは@var{mode}変数を初期化するための値。特殊な状況(以下参照)を除き、この値は@code{nil}でなければならない。"

#. type: item
#: original_texis/modes.texi:1734
#, no-wrap
msgid ":lighter @var{lighter}"
msgstr ":lighter @var{lighter}"

#. type: table
#: original_texis/modes.texi:1738
msgid "The string @var{lighter} says what to display in the mode line when the mode is enabled; if it is @code{nil}, the mode is not displayed in the mode line."
msgstr "文字列@var{lighter}はモード有効時にモードライン内に何を表示するか指定する。これが@code{nil}ならこのモードはモードライン内に表示されない。"

#. type: item
#: original_texis/modes.texi:1739
#, no-wrap
msgid ":keymap @var{keymap}"
msgstr ":keymap @var{keymap}"

#. type: table
#: original_texis/modes.texi:1743
msgid "The optional argument @var{keymap} specifies the keymap for the minor mode.  If non-@code{nil}, it should be a variable name (whose value is a keymap), a keymap, or an alist of the form"
msgstr "オプション引数@var{keymap}はそのマイナーモードにたいするキーマップを指定する。非@code{nil}なら、それは(値がキーマップであるような)変数の名前かキーマップ、または以下の形式のalistであること"

#. type: example
#: original_texis/modes.texi:1746
#, no-wrap
msgid "(@var{key-sequence} . @var{definition})\n"
msgstr "(@var{key-sequence} . @var{definition})\n"

#. type: table
#: original_texis/modes.texi:1753
msgid "where each @var{key-sequence} and @var{definition} are arguments suitable for passing to @code{define-key} (@pxref{Changing Key Bindings}).  If @var{keymap} is a keymap or an alist, this also defines the variable @code{@var{mode}-map}."
msgstr "ここで@var{key-sequence}と@var{definition}は@code{define-key}に渡すのに適した引数である(@ref{Changing Key Bindings}を参照)。@var{keymap}はキーマップかalistであり、これは変数@code{@var{mode}-map}も定義する。"

#. type: item
#: original_texis/modes.texi:1754
#, no-wrap
msgid ":variable @var{place}"
msgstr ":variable @var{place}"

#. type: table
#: original_texis/modes.texi:1765
msgid "This replaces the default variable @var{mode}, used to store the state of the mode.  If you specify this, the @var{mode} variable is not defined, and any @var{init-value} argument is unused.  @var{place} can be a different named variable (which you must define yourself), or anything that can be used with the @code{setf} function (@pxref{Generalized Variables}).  @var{place} can also be a cons @code{(@var{get} . @var{set})}, where @var{get} is an expression that returns the current state, and @var{set} is a function of one argument (a state) which should be assigned to @var{place}."
msgstr "これはそのモードの状態を格納するために使用されるデフォルトの変数@var{mode}を置き換える。これを指定すると@var{mode}変数は定義されず、すべての@var{init-value}引数は使用されない。@var{place}は異なる名前の変数(あなた自身が定義しなければならない)、または@code{setf}関数とともに使用され得るすべてのもの(@ref{Generalized Variables}を参照)。@var{place}にはコンス@code{(@var{get} . @var{set})}も指定できる。ここで@var{get}はカレント状態をリターンする式であり、@var{set}はそれをセットする1つの引数(@var{place}に割り当てられる状態)をとる関数。"

#. type: item
#: original_texis/modes.texi:1766
#, no-wrap
msgid ":after-hook @var{after-hook}"
msgstr ":after-hook @var{after-hook}"

#. type: table
#: original_texis/modes.texi:1769
msgid "This defines a single Lisp form which is evaluated after the mode hooks have run.  It should not be quoted."
msgstr "これはモードフック実行後に評価される単一のLispフォームを定義する。これをクォートしないこと。"

#. type: item
#: original_texis/modes.texi:1770
#, no-wrap
msgid ":interactive @var{value}"
msgstr ":interactive @var{value}"

#. type: table
#: original_texis/modes.texi:1774
msgid "Minor modes are interactive commands by default.  If @var{value} is @code{nil}, this is inhibited.  If @var{value} is a list of symbols, it's used to say which major modes this minor mode is useful in."
msgstr "デフォルトではインタラクティブコマンドであるようなマイナーモード。@code{nil}値を指定するとこれを抑制。@var{value}がシンボルのリストなら、そのマイナーモードが有用なメジャーモードを指定するために使用される。"

#. type: defmac
#: original_texis/modes.texi:1780
msgid "Any other keyword arguments are passed directly to the @code{defcustom} generated for the variable @var{mode}.  @xref{Variable Definitions}, for the description of those keywords and their values."
msgstr "その他のすべてのキーワード引数は変数@var{mode}にたいして生成された@code{defcustom}に直接渡される。これらのキーワードと値については@ref{Variable Definitions}を参照のこと。"

#. type: defmac
#: original_texis/modes.texi:1787
msgid "The command named @var{mode} first performs the standard actions such as setting the variable named @var{mode} and then executes the @var{body} forms, if any.  It then runs the mode hook variable @code{@var{mode}-hook} and finishes by evaluating any form in @code{:after-hook}.  (Note that all of this, including running the hook, is done both when the mode is enabled and disabled.)"
msgstr "@var{mode}という名前のコマンドは最初に@var{mode}という名前の変数をセットする等の標準的な動作を処理した後に、もしあれば@var{body}フォームを実行する。それからモードフック変数@code{@var{mode}-hook}を実行してから@code{:after-hook}内のフォームを評価して終了する(フック実行を含めて、これらすべてはモードの有効化と無効化の両方で行われることに注意)。"

#. type: Plain text
#: original_texis/modes.texi:1796
msgid "The initial value must be @code{nil} except in cases where (1) the mode is preloaded in Emacs, or (2) it is painless for loading to enable the mode even though the user did not request it.  For instance, if the mode has no effect unless something else is enabled, and will always be loaded by that time, enabling it by default is harmless.  But these are unusual circumstances.  Normally, the initial value must be @code{nil}."
msgstr "@var{init-value}の値は@code{nil}でなければなりません。ただし、(1)Emacsによりそのモードが事前ロードされている、または(2)たとえユーザーが要求しなくともモードを有効にするためにロードするのが容易な場合を除きます。たとえば他の何かが有効でなければそのモードの効果がなく、常にそのタイミングでロードされるような場合には、デフォルトでそのモードを有効にすることに害はありません。しかしこの状況は通常はあり得ません。通常は@var{init-value}の値は@code{nil}でなければなりません。"

#. type: findex
#: original_texis/modes.texi:1797
#, no-wrap
msgid "easy-mmode-define-minor-mode"
msgstr "easy-mmode-define-minor-mode"

#. type: Plain text
#: original_texis/modes.texi:1800
msgid "The name @code{easy-mmode-define-minor-mode} is an alias for this macro."
msgstr "@code{easy-mmode-define-minor-mode}という名前はこのマクロにたいするエイリアスです。"

#. type: Plain text
#: original_texis/modes.texi:1802
msgid "Here is an example of using @code{define-minor-mode}:"
msgstr "以下は@code{define-minor-mode}の使い方の例です:"

#. type: smallexample
#: original_texis/modes.texi:1810
#, no-wrap
msgid ""
"(define-minor-mode hungry-mode\n"
"  \"Toggle Hungry mode.\n"
"Interactively with no argument, this command toggles the mode.\n"
"A positive prefix argument enables the mode, any other prefix\n"
"argument disables it.  From Lisp, argument omitted or nil enables\n"
"the mode, `toggle' toggles the state.\n"
"\n"
msgstr ""
"(define-minor-mode hungry-mode\n"
"  \"Hungryモードをトグルする\n"
"引数なしでinteractiveに呼び出すとモードをトグルする\n"
"正のプレフィクス引数でモードを有効に、その他のプレフィクス引数で\n"
"無効にする。Lispから呼び出す場合、引数を省略、またはnilなら\n"
"モードを有効に、`toggle'なら状態をトグルする\n"
"\n"

#. type: smallexample
#: original_texis/modes.texi:1820
#, no-wrap
msgid ""
"When Hungry mode is enabled, the control delete key\n"
"gobbles all preceding whitespace except the last.\n"
"See the command \\\\[hungry-electric-delete].\"\n"
" ;; The initial value.\n"
" nil\n"
" ;; The indicator for the mode line.\n"
" \" Hungry\"\n"
" ;; The minor mode bindings.\n"
" '(([C-backspace] . hungry-electric-delete)))\n"
msgstr ""
"Hungryモードが有効なときは、C-DELキーは、\n"
"最後を除く先行するすべての空白を飲み込む\n"
"コマンド \\\\[hungry-electric-delete] を参照\"\n"
" ;; 初期値\n"
" nil\n"
" ;; モードラインの標示\n"
" \" Hungry\"\n"
" ;; マイナーモードのバインディング\n"
" '(([C-backspace] . hungry-electric-delete)))\n"

#. type: Plain text
#: original_texis/modes.texi:1830
msgid "This defines a minor mode named ``Hungry mode'', a command named @code{hungry-mode} to toggle it, a variable named @code{hungry-mode} which indicates whether the mode is enabled, and a variable named @code{hungry-mode-map} which holds the keymap that is active when the mode is enabled.  It initializes the keymap with a key binding for @kbd{C-@key{DEL}}.  There are no @var{body} forms---many minor modes don't need any."
msgstr "これは``Hungry mode''という名前のマイナーモード、モードをトグルする@code{hungry-mode}という名前のコマンド、モードが有効かどうかを示す@code{hungry-mode}という名前の変数、モードが有効なときそのキーマップを保持する@code{hungry-mode-map}という名前の変数を定義します。これは@kbd{C-@key{DEL}}にたいするキーバインディングでキーマップを初期化します。@var{body}フォームはありません --- 多くのマイナーモードはそれを必要としません。"

#. type: Plain text
#: original_texis/modes.texi:1832
msgid "Here's an equivalent way to write it:"
msgstr "以下はこれを記述する等価な方法です:"

#. type: smallexample
#: original_texis/modes.texi:1848
#, no-wrap
msgid ""
"(define-minor-mode hungry-mode\n"
"  \"Toggle Hungry mode.\n"
"...rest of documentation as before...\"\n"
" ;; The initial value.\n"
" :init-value nil\n"
" ;; The indicator for the mode line.\n"
" :lighter \" Hungry\"\n"
" ;; The minor mode bindings.\n"
" :keymap\n"
" '(([C-backspace] . hungry-electric-delete)\n"
"   ([C-M-backspace]\n"
"    . (lambda ()\n"
"        (interactive)\n"
"        (hungry-electric-delete t)))))\n"
msgstr ""
"(define-minor-mode hungry-mode\n"
"  \"Hungryモードをトグルする\n"
"...省略...\"\n"
" ;; 初期値\n"
" :init-value nil\n"
" ;; モードラインへのインジケーター\n"
" :lighter \" Hungry\"\n"
" ;; マイナーモードのバインディング\n"
" :keymap\n"
" '(([C-backspace] . hungry-electric-delete)\n"
"   ([C-M-backspace]\n"
"    . (lambda ()\n"
"        (interactive)\n"
"        (hungry-electric-delete t)))))\n"

#. type: defmac
#: original_texis/modes.texi:1850
#, no-wrap
msgid "define-globalized-minor-mode global-mode mode turn-on keyword-args@dots{} body@dots{}"
msgstr "define-globalized-minor-mode global-mode mode turn-on keyword-args@dots{} body@dots{}"

#. type: defmac
#: original_texis/modes.texi:1859
msgid "This defines a global toggle named @var{global-mode} whose meaning is to enable or disable the buffer-local minor mode @var{mode} in all (or some; see below) buffers.  It also executes the @var{body} forms.  To turn on the minor mode in a buffer, it uses the function @var{turn-on}; to turn off the minor mode, it calls @var{mode} with @minus{}1 as argument.  (The function @var{turn-on} is a separate function so it could determine whether to enable the minor mode or not when it is not a priori clear that it should always be enabled.)"
msgstr "これは@var{global-mode}という名前をグローバルにトグルする。これは@var{mode}という名前のバッファーローカルなマイナーモードをすべてのバッファー(または一部のバッファー。以下参照)で有効か無効にするということを意味する。@var{body}フォームの実行も行う。あるバッファー内でそのマイナーモードをオンにするには関数@var{turn-on}を使用する。マイナーモードをオフにするには@minus{}1を引数として@var{mode}を呼び出す(@var{turn-on}は別の関数なのでそのマイナーモードを有効にすべきか先験的に明確でない場合でも有効にするかどうかを決定できる)。"

#. type: defmac
#: original_texis/modes.texi:1864
msgid "Globally enabling the mode also affects buffers subsequently created by visiting files, and buffers that use a major mode other than Fundamental mode; but it does not detect the creation of a new buffer in Fundamental mode."
msgstr "モードをグローバルに有効にすると、それ以降ファイルをvisitすることによって作成されるバッファーやFundamental以外のメジャーモードを使用するバッファーにも影響がある。しかしFundamentalで作成される新たなバッファーは検知しない。"

#. type: defmac
#: original_texis/modes.texi:1871
msgid "This macro defines the customization option @var{global-mode} (@pxref{Customization}), which can be toggled via the Customize interface to turn the minor mode on and off.  As with @code{define-minor-mode}, you should ensure that the @code{define-globalized-minor-mode} form is evaluated each time Emacs starts, for example by providing a @code{:require} keyword."
msgstr "これはCustomizeインターフェイスを通じて、そのマイナーモードのオン/オフを切り替えるカスタムオプション@var{global-mode} (@ref{Customization}を参照)を定義するマクロ。@code{define-minor-mode}と同様に、たとえば@code{:require}を与える等によってEmacs開始時に毎回確実に@code{define-globalized-minor-mode}フォームが評価されるようにすること。"

#. type: defmac
#: original_texis/modes.texi:1874
msgid "Use @code{:group @var{group}} in @var{keyword-args} to specify the custom group for the mode variable of the global minor mode."
msgstr "グローバルマイナーモードのモード変数にたいしてカスタムグループを指定するには@var{keyword-args}内で@code{:group @var{group}}を使用する。"

#. type: defmac
#: original_texis/modes.texi:1879
msgid "By default, the buffer-local minor mode variable that says whether the mode is switched on or off is the same as the name of the mode itself.  Use @code{:variable @var{variable}} if that's not the case--some minor modes use a different variable to store this state information."
msgstr "モードのオンかオフかを示すバッファーローカルなマイナーモード変数は、デフォルトではモード自身の名前なまと同じ。これが該当しない場合(状態情報を異なる変数に格納するいくつかのモード)には、@code{:variable @var{variable}}を使用すること。"

#. type: defmac
#: original_texis/modes.texi:1885
msgid "Generally speaking, when you define a globalized minor mode, you should also define a non-globalized version, so that people could use it (or disable it) in individual buffers.  This also allows them to disable a globally enabled minor mode in a specific major mode, by using that mode's hook."
msgstr "一般的にはグローバル化されたマイナーモードを定義するときは、ユーザーがバッファーごとにモードを使用(または無効に)できるように非グローバル版も定義すること。これにより特定のメジャーモード内でそのモードのフックを使用すればグローバルに有効化されたマイナーモードを無効にすることができるようになる。"

#. type: defmac
#: original_texis/modes.texi:1899
msgid "If the macro is given a @code{:predicate} keyword, it will create a user option called the same as the global mode variable, but with @code{-modes} instead of @code{-mode} at the end, i.e.@: @code{@var{global-mode}s}.  This variable will be used in a predicate function that determines whether the minor mode should be activated in a particular major mode, and users can customize the value of the variable to control the modes in which the minor mode will be switched on.  Valid values of @code{:predicate} (and thus valid values of the user option it creates) include @code{t} (use in all major modes), @code{nil} (don't use in any major modes), or a list of mode names, optionally preceded with @code{not} (as in @w{@code{(not @var{mode-name} @dots{})}}).  These elements can be mixed, as shown in the following examples."
msgstr "キーワード@code{:predicate}が与えられると、このマクロはグローバルモード変数と似ているが@code{-mode}ではなく@code{-modes}で終わるユーザーオプションを作成する(つまり@code{@var{global-mode}s}ということ)。この変数は特定のメジャーモードにおいてそのメジャーモードをアクティブにするかどうかを判断する述語関数で使用される。ユーザーは変数の値をカスタマイズして、そのマイナーモードをオンに切り替えるモードを制御できる。@code{:predicate}にたいする有効な値 (つまりこれが作成するユーザーオプションの有効な値)には@code{t} (すべてのメジャーモードで使用)、@code{nil} (どのメジャーモードでも使用しない)、あるいはモード名のリスト(オプションで@w{@code{(not @var{mode-name} @dots{})}}のように@code{not}を前置して否定)が含まれる。以下の例のようにこれらの要素を混合させることもできる。"

#. type: example
#: original_texis/modes.texi:1902
#, no-wrap
msgid "(c-mode (not mail-mode message-mode) text-mode)\n"
msgstr "(c-mode (not mail-mode message-mode) text-mode)\n"

#. type: defmac
#: original_texis/modes.texi:1909
msgid "This means ``use in modes derived from @code{c-mode}, and not in modes derived from @code{message-mode} or @code{mail-mode}, but do use in modes derived from @code{text-mode}, and otherwise no other modes''."
msgstr "これは``@code{c-mode}の派生モードで使用、@code{message-mode}や@code{mail-mode}の派生モードでは使用せず、@code{text-mode}の派生モードでは使用，それ以外に使用するモードはない''ことを意味する。"

#. type: example
#: original_texis/modes.texi:1912
#, no-wrap
msgid "((not c-mode) t)\n"
msgstr "((not c-mode) t)\n"

#. type: defmac
#: original_texis/modes.texi:1917
msgid "This means ``don't use in modes derived from @code{c-mode}, but do use everywhere else''."
msgstr "``@code{c-mode}の派生モードでは使用しないが、それ以外なら使用する''ことを意味する。"

#. type: example
#: original_texis/modes.texi:1920
#, no-wrap
msgid "(text-mode)\n"
msgstr "(text-mode)\n"

#. type: defmac
#: original_texis/modes.texi:1925
msgid "This means ``use in modes derived from @code{text-mode}, but nowhere else''.  (There's an implicit @code{nil} element at the end.)"
msgstr "これは``@code{text-mode}の派生モードでは使用するが他では使用しない''ことを意味する(終端に@code{nil}要素が暗に存在する)。"

#. type: findex
#: original_texis/modes.texi:1927
#, no-wrap
msgid "buffer-local-restore-state"
msgstr "buffer-local-restore-state"

#. type: defmac
#: original_texis/modes.texi:1928
#, no-wrap
msgid "buffer-local-set-state variable value..."
msgstr "buffer-local-set-state variable value..."

#. type: defmac
#: original_texis/modes.texi:1936
msgid "Minor modes often set buffer-local variables that affect some features in Emacs.  When a minor mode is switched off, the mode is expected to restore the previous state of these variables.  This convenience macro helps with doing that: It works much like @code{setq-local}, but returns an object that can be used to restore these values back to their previous values/states (using the companion function @code{buffer-local-restore-state})."
msgstr "Emacsの一部機能に影響を与えるようなバッファーローカル変数をマイナーモードがセットすることがよくある。あるモードをオフに切り替えた際には、これらの変数の元の状態へのリストアがモードには求められる。これはそれらのことを行う助けとなる利便的なマクロである。これは@code{setq-local}と同じように機能するが、(相方となる関数@code{buffer-local-restore-state}を使って)これらの変数を以前の値や状態をリストアするために使用できるオブジェクトをリターンする。"

#. type: cindex
#: original_texis/modes.texi:1940
#, no-wrap
msgid "mode line"
msgstr "mode line"

#. type: Plain text
#: original_texis/modes.texi:1949
msgid "Each Emacs window (aside from minibuffer windows) typically has a mode line at the bottom, which displays status information about the buffer displayed in the window.  The mode line contains information about the buffer, such as its name, associated file, depth of recursive editing, and major and minor modes.  A window can also have a @dfn{header line}, which is much like the mode line but appears at the top of the window."
msgstr "Emacsの各ウィンドウ(ミニバッファーウィンドウを除く)には、通常は最下部にモードラインがあってそのウィンドウ内に表示されたバッファーに関するステータス情報がモードラインに表示されます。モードラインにはバッファー名、関連するファイル、再帰編集の深さ、およびメジャーモードやマイナーモードなどのようなそのバッファーに関する情報が含まれています。ウィンドウは@dfn{ヘッダーライン(header line)}をもつこともでき、これはモードラインによく似ていますがウィンドウの最上部に表示されます。"

#. type: Plain text
#: original_texis/modes.texi:1954
msgid "This section describes how to control the contents of the mode line and header line.  We include it in this chapter because much of the information displayed in the mode line relates to the enabled major and minor modes."
msgstr "このセクションではモードラインおよびヘッダーラインのコンテンツの制御の仕方について説明します。このチャプターにモードラインを含めた理由は、モードラインに表示される情報の多くが有効化されたメジャーモードとマイナーモードに関連があるからです。"

#. type: menuentry
#: original_texis/modes.texi:1964
msgid "Base: Mode Line Basics"
msgstr "Base: Mode Line Basics"

#. type: menuentry
#: original_texis/modes.texi:1964
msgid "Basic ideas of mode line control."
msgstr "モードライン制御の基本概念。"

#. type: menuentry
#: original_texis/modes.texi:1964
msgid "Data: Mode Line Data"
msgstr "Data: Mode Line Data"

#. type: menuentry
#: original_texis/modes.texi:1964
msgid "The data structure that controls the mode line."
msgstr "モードラインを制御するデータ構造。"

#. type: menuentry
#: original_texis/modes.texi:1964
msgid "Top: Mode Line Top"
msgstr "Top: Mode Line Top"

#. type: menuentry
#: original_texis/modes.texi:1964
msgid "The top level variable, mode-line-format."
msgstr "トップレベル変数、mode-line-format。"

#. type: node
#: original_texis/modes.texi:1964 original_texis/modes.texi:2202
#, no-wrap
msgid "Mode Line Variables"
msgstr "Mode Line Variables"

#. type: menuentry
#: original_texis/modes.texi:1964
msgid "Variables used in that data structure."
msgstr "そのデータ構造で使用される変数。"

#. type: node
#: original_texis/modes.texi:1964 original_texis/modes.texi:2402
#, no-wrap
msgid "%-Constructs"
msgstr "%-Constructs"

#. type: menuentry
#: original_texis/modes.texi:1964
msgid "Putting information into a mode line."
msgstr "モードラインへの情報の配置。"

#. type: node
#: original_texis/modes.texi:1964 original_texis/modes.texi:2541
#, no-wrap
msgid "Properties in Mode"
msgstr "Properties in Mode"

#. type: menuentry
#: original_texis/modes.texi:1964
msgid "Using text properties in the mode line."
msgstr "モードライン内でのテキストプロパティの使用。"

#. type: node
#: original_texis/modes.texi:1964 original_texis/modes.texi:2584
#, no-wrap
msgid "Header Lines"
msgstr "Header Lines"

#. type: menuentry
#: original_texis/modes.texi:1964
msgid "Like a mode line, but at the top."
msgstr "モードラインに類似した最上部のライン。"

#. type: node
#: original_texis/modes.texi:1964 original_texis/modes.texi:2677
#, no-wrap
msgid "Emulating Mode Line"
msgstr "Emulating Mode Line"

#. type: menuentry
#: original_texis/modes.texi:1964
msgid "Formatting text as the mode line would."
msgstr "モードラインのようにテキストをフォーマットする。"

#. type: subsection
#: original_texis/modes.texi:1966 original_texis/modes.texi:1967
#, no-wrap
msgid "Mode Line Basics"
msgstr "Mode Line Basics"

#. type: Plain text
#: original_texis/modes.texi:1978
msgid "The contents of each mode line are specified by the buffer-local variable @code{mode-line-format} (@pxref{Mode Line Top}).  This variable holds a @dfn{mode line construct}: a template that controls what is displayed on the buffer's mode line.  The value of @code{header-line-format} specifies the buffer's header line in the same way.  All windows for the same buffer use the same @code{mode-line-format} and @code{header-line-format} unless a @code{mode-line-format} or @code{header-line-format} parameter has been specified for that window (@pxref{Window Parameters})."
msgstr "各モードラインのコンテンツはバッファーローカル変数@code{mode-line-format}により指定されます(@ref{Mode Line Top}を参照)。この変数は@dfn{モードライン構文(mode line construct)}を保持します。これはバッファーのモードラインに何を表示するかを制御するテンプレートです。@code{header-line-format}の値は同じ方法によりバッファーのヘッダーラインを指定します。同一のバッファーにたいするすべてのウィンドウは、@code{mode-line-format}や@code{header-line-format}のパラメーター(@ref{Window Parameters}を参照)がそのウィンドウに指定されていなければ、同じ@code{mode-line-format}と@code{header-line-format}を使用します。"

#. type: Plain text
#: original_texis/modes.texi:1988
msgid "For efficiency, Emacs does not continuously recompute each window's mode line and header line.  It does so when circumstances appear to call for it---for instance, if you change the window configuration, switch buffers, narrow or widen the buffer, scroll, or modify the buffer.  If you alter any of the variables referenced by @code{mode-line-format} or @code{header-line-format} (@pxref{Mode Line Variables}), or any other data structures that affect how text is displayed (@pxref{Display}), you should use the function @code{force-mode-line-update} to update the display."
msgstr "効率的な理由によりEmacsは各ウィンドウのモードラインとヘッダーラインを連続で再評価しません。たとえばウィンドウ構成(window configuration)の変更やバッファーの切り替え、バッファーのナローイング(narrowing)やワイドニング(widening)、スクロールやバッファーの変更等、それを呼び出す状況が出現したときにEmacsは再評価を行います。@code{mode-line-format}や@code{header-line-format}(@ref{Mode Line Variables}を参照)により参照されるすべての変数、またはテキストが表示される方法に影響を与えるデータ構造(@ref{Display}を参照)を変更する場合には、表示を更新するために関数@code{force-mode-line-update}を使用するべきです。"

#. type: defun
#: original_texis/modes.texi:1989
#, no-wrap
msgid "force-mode-line-update &optional all"
msgstr "force-mode-line-update &optional all"

#. type: defun
#: original_texis/modes.texi:1994
msgid "This function forces Emacs to update the current buffer's mode line and header line, based on the latest values of all relevant variables, during its next redisplay cycle.  If the optional argument @var{all} is non-@code{nil}, it forces an update for all mode lines and header lines."
msgstr "この関数は次の再表示サイクルの間にすべての関連する変数の最新の値にもとづいて、カレントバッファーのモードラインとヘッダーラインの更新をEmacsに強制する。オプション引数@var{all}が非@code{nil}なら、すべてのモードラインとヘッダーラインの更新を強制する。"

#. type: defun
#: original_texis/modes.texi:1996
msgid "This function also forces an update of the menu bar and frame title."
msgstr "この関数はメニューバーとフレームタイトルの更新も強制する。"

#. type: Plain text
#: original_texis/modes.texi:2002
msgid "The selected window's mode line is usually displayed in a different color using the face @code{mode-line-active}.  Other windows' mode lines appear in the face @code{mode-line-inactive} instead.  @xref{Faces}."
msgstr "選択されたウィンドウのモードラインは、通常はフェイス@code{mode-line-active}を使用して異なるカラーで表示されます。かわりに他のウィンドウのモードラインはフェイス@code{mode-line-inactive}で表示されます。@ref{Faces}を参照してください。"

#. type: defun
#: original_texis/modes.texi:2003
#, no-wrap
msgid "mode-line-window-selected-p"
msgstr "mode-line-window-selected-p"

#. type: defun
#: original_texis/modes.texi:2009
msgid "If you want to have more extensive differences between the mode lines in selected and non-selected windows, you can use this predicate in an @code{:eval} construct.  For instance, if you want to display the buffer name in bold in selected windows, but in italics in the other windows, you can say something like:"
msgstr "モードラインのウィンドウの選択/非選択の間にもっと大きな差異をもたせたければ、@code{:eval}構文内でこの述語を使うことができる。たとえば選択されているウィンドウのバッファー名をボールド(bold: 太字)、他のウィンドウはイタリック(italic: 斜体)で表示したければ以下のように記述できる:"

#. type: lisp
#: original_texis/modes.texi:2017
#, no-wrap
msgid ""
"(setq-default\n"
" mode-line-buffer-identification\n"
" '(:eval (propertize \"%12b\"\n"
"\t\t     'face (if (mode-line-window-selected-p)\n"
"\t\t\t       'bold\n"
"\t\t\t     'italic))))\n"
msgstr ""
"(setq-default\n"
" mode-line-buffer-identification\n"
" '(:eval (propertize \"%12b\"\n"
"\t\t     'face (if (mode-line-window-selected-p)\n"
"\t\t\t       'bold\n"
"\t\t\t     'italic))))\n"

#. type: vindex
#: original_texis/modes.texi:2020
#, no-wrap
msgid "mode-line-compact"
msgstr "mode-line-compact"

#. type: Plain text
#: original_texis/modes.texi:2030
msgid "Some modes put a lot of data in the mode line, pushing elements at the end of the mode line off to the right.  Emacs can ``compress'' the mode line if the @code{mode-line-compact} variable is non-@code{nil} by turning stretches of spaces into a single space.  If this variable is @code{long}, this is only done when the mode line is wider than the currently selected window.  (This computation is approximate, based on the number of characters, and not their displayed width.)  This variable can be buffer-local to only compress mode-lines in certain buffers."
msgstr "モードラインに大量のデータを出力して、モードラインの最後にある要素を右側へ押し出すモードがあります。@code{mode-line-compact}変数が非@code{nil}なら、Emacsは連続する複数のスペースを単一のスペースにして、モードラインを``圧縮する''ことができます。この変数が@code{long}なら、モードラインがカレントで選択されたウィンドウより広いときだけこれを行います(これは文字の表示幅ではなく文字数にもとづく近似により計算される)。この変数は特定バッファーでのみモードラインを圧縮するために、バッファーローカルにすることができます。"

#. type: node
#: original_texis/modes.texi:2031
#, no-wrap
msgid "Mode Line Data"
msgstr "Mode Line Data"

#. type: subsection
#: original_texis/modes.texi:2032
#, no-wrap
msgid "The Data Structure of the Mode Line"
msgstr "The Data Structure of the Mode Line"

#. type: cindex
#: original_texis/modes.texi:2033
#, no-wrap
msgid "mode line construct"
msgstr "mode line construct"

#. type: Plain text
#: original_texis/modes.texi:2041
msgid "The mode line contents are controlled by a data structure called a @dfn{mode line construct}, made up of lists, strings, symbols, and numbers kept in buffer-local variables.  Each data type has a specific meaning for the mode line appearance, as described below.  The same data structure is used for constructing frame titles (@pxref{Frame Titles})  and header lines (@pxref{Header Lines})."
msgstr "モードラインのコンテンツは@dfn{モードライン構文(mode line construct)}と呼ばれるデータ構造によって制御されます。モードライン構文はリストやシンボル、数字を保持するバッファーローカル変数により構成されます。それぞれのデータ型は以下で説明するようにモードラインの外見にたいして特別な意味をもちます。フレームタイトル(@ref{Frame Titles}を参照)とヘッダーライン(@ref{Header Lines}を参照)にも同じデータ構造が使用されます。"

#. type: Plain text
#: original_texis/modes.texi:2046
msgid "A mode line construct may be as simple as a fixed string of text, but it usually specifies how to combine fixed strings with variables' values to construct the text.  Many of these variables are themselves defined to have mode line constructs as their values."
msgstr "固定文字列のようなシンプルなモードライン構文の場合もありますが、通常はモードライン構文のテキストを構築するために固定文字列と変数の値を組み合わせる方法を指定します。これらの変数の多くはその変数自体がその値によりモードライン構文を定義する変数です。"

#. type: Plain text
#: original_texis/modes.texi:2048
msgid "Here are the meanings of various data types as mode line constructs:"
msgstr "以下はモードライン構文における、さまざまなデータ型の意味です:"

#. type: cindex
#: original_texis/modes.texi:2050
#, no-wrap
msgid "percent symbol in mode line"
msgstr "percent symbol in mode line"

#. type: var{#1}
#: original_texis/modes.texi:2051
#, no-wrap
msgid "string"
msgstr "string"

#. type: table
#: original_texis/modes.texi:2055
msgid "A string as a mode line construct appears verbatim except for @dfn{@code{%}-constructs} in it.  These stand for substitution of other data; see @ref{%-Constructs}."
msgstr "モードライン構文における文字列は、文字列内に@dfn{@code{%}構文(@code{%}-constructs)}を含む以外はそのまま表現される。これらは他のデータによる置換を意味する。@ref{%-Constructs}を参照のこと。"

#. type: table
#: original_texis/modes.texi:2063
msgid "If parts of the string have @code{face} properties, they control display of the text just as they would text in the buffer.  Any characters which have no @code{face} properties are displayed, by default, in the face @code{mode-line} or @code{mode-line-inactive} (@pxref{Standard Faces,,, emacs, The GNU Emacs Manual}).  The @code{help-echo} and @code{keymap} properties in @var{string} have special meanings.  @xref{Properties in Mode}."
msgstr "文字列の一部が@code{face}プロパティをもつ場合には、バッファー内でそれらが表示されるときと同じようにテキスト表示を制御する。@code{face}プロパティをもたない文字はデフォルトのフェイス@code{mode-line}、または@code{mode-line-inactive}で表示される(@ref{Standard Faces,,, emacs, The GNU Emacs Manual}を参照)。@var{string}内の@code{help-echo}プロパティと@code{keymap}プロパティは特別な意味をもつ。@ref{Properties in Mode}を参照のこと。"

#. type: var{#1}
#: original_texis/modes.texi:2064
#, no-wrap
msgid "symbol"
msgstr "symbol"

#. type: table
#: original_texis/modes.texi:2069
msgid "A symbol as a mode line construct stands for its value.  The value of @var{symbol} is used as a mode line construct, in place of @var{symbol}.  However, the symbols @code{t} and @code{nil} are ignored, as is any symbol whose value is void."
msgstr "モードライン構文におけるシンボルはその値を意味する。モードライン構文としては、@var{symbol}の値は@var{symbol}の位置に使用される。しかしシンボル@code{t}と@code{nil}は値がvoidであるようなシンボルとして無視される。"

#. type: table
#: original_texis/modes.texi:2072
msgid "There is one exception: if the value of @var{symbol} is a string, it is displayed verbatim: the @code{%}-constructs are not recognized."
msgstr "例外が1つある。@var{symbol}の値が文字列なら、それはそのまま表示されて@code{%}構文は認識されない。"

#. type: table
#: original_texis/modes.texi:2080
msgid "Unless @var{symbol} is marked as risky (i.e., it has a non-@code{nil} @code{risky-local-variable} property), all text properties specified in @var{symbol}'s value are ignored.  This includes the text properties of strings in @var{symbol}'s value, as well as all @code{:eval} and @code{:propertize} forms in it.  (The reason for this is security: non-risky variables could be set automatically from file variables without prompting the user.)"
msgstr "@var{symbol}がrisky(危険)とマークされていない(非@code{nil}の@code{risky-local-variable}プロパティをもつ)場合には、@var{symbol}の値中で指定されたテキストプロパティはすべて無視される。これには@var{symbol}の値中の文字列のテキストプロパティ、同様に文字列内の@code{:eval}フォームと@code{:propertize}フォームすべてが含まれる(これはセキュリティー上の理由による。危険とマークされていない変数は、ユーザーへの問い合わせなしでファイル変数から自動的にセットされ得る)。"

#. type: item
#: original_texis/modes.texi:2081
#, no-wrap
msgid "(@var{string} @var{rest}@dots{})"
msgstr "(@var{string} @var{rest}@dots{})"

#. type: itemx
#: original_texis/modes.texi:2082
#, no-wrap
msgid "(@var{list} @var{rest}@dots{})"
msgstr "(@var{list} @var{rest}@dots{})"

#. type: table
#: original_texis/modes.texi:2092
msgid "A list whose first element is a string or list means to process all the elements recursively and concatenate the results.  This is the most common form of mode line construct.  (Note that text properties are handled specially (for reasons of efficiency) when displaying strings in the mode line: Only the text property on the first character of the string are considered, and they are then used over the entire string.  If you need a string with different text properties, you have to use the special @code{:propertize} mode line construct.)"
msgstr "最初の要素が文字列、またはすべての要素を再帰的に処理して結果を結合することを意図したリスト。これはもっとも一般的なモードライン構文である(モードラインへの文字列表示時には、テキストプロパティは(効率的理由により)特別に処理されることに注意。文字列の最初の文字のテキストプロパティだけを考慮して、それを文字列全体に使用する。別のテキストプロパティをもつ文字列が必要なら、特別モードライン構文@code{:propertize}を使う必要がある)。"

#. type: item
#: original_texis/modes.texi:2093
#, no-wrap
msgid "(:eval @var{form})"
msgstr "(:eval @var{form})"

#. type: table
#: original_texis/modes.texi:2098
msgid "A list whose first element is the symbol @code{:eval} says to evaluate @var{form}, and use the result as a string to display.  Make sure this evaluation cannot load any files, as doing so could cause infinite recursion."
msgstr "最初の要素がシンボル@code{:eval}であるようなリストは、@var{form}を評価してその結果を表示する文字列として使用するよう指示する。この評価が任意のファイルをロードできないことを確認すること。ファイルをロードすると無限再帰が発生するかもしれない。"

#. type: item
#: original_texis/modes.texi:2099
#, no-wrap
msgid "(:propertize @var{elt} @var{props}@dots{})"
msgstr "(:propertize @var{elt} @var{props}@dots{})"

#. type: table
#: original_texis/modes.texi:2108
msgid "A list whose first element is the symbol @code{:propertize} says to process the mode line construct @var{elt} recursively, then add the text properties specified by @var{props} to the result.  The argument @var{props} should consist of zero or more pairs @var{text-property} @var{value}.  If @var{elt} is or produces a string with text properties, all the characters of that string should have the same properties, or else some of them might be removed by @code{:propertize}."
msgstr "最初の要素がシンボル@code{:propertize}であるようなリストはモードライン構文@var{elt}を再帰的に処理して、@var{props}により指定されるテキストプロパティに結果を加えるよう指示する。引数@var{props}は0個以上の@var{text-property}と@var{value}のペアーで構成されること。@var{elt}がテキストプロパティをもつ文字列、またはテキストプロパティをもつ文字列を生成する場合には、その文字列内のすべての文字は同一のプロパティをもつこと。さもなければ@code{:propertize}によっていくつかのプロパティは削除されるかもしれない。"

#. type: item
#: original_texis/modes.texi:2109
#, no-wrap
msgid "(@var{symbol} @var{then} @var{else})"
msgstr "(@var{symbol} @var{then} @var{else})"

#. type: table
#: original_texis/modes.texi:2117
msgid "A list whose first element is a symbol that is not a keyword specifies a conditional.  Its meaning depends on the value of @var{symbol}.  If @var{symbol} has a non-@code{nil} value, the second element, @var{then}, is processed recursively as a mode line construct.  Otherwise, the third element, @var{else}, is processed recursively.  You may omit @var{else}; then the mode line construct displays nothing if the value of @var{symbol} is @code{nil} or void."
msgstr "最初の要素がキーワード以外のシンボルであるようなリストは条件文を指定する。その意味は@var{symbol}の値に依存する。@var{symbol}が非@code{nil}値をもつ場合は、モードライン構文として2つ目の要素@var{then}が再帰的に処理され、それ以外は3つ目の要素@var{else}が再帰的に処理される。@var{else}は省略でき、その場合には@var{symbol}の値が@code{nil}かvoidならモードライン構文は何も表示しない。"

#. type: item
#: original_texis/modes.texi:2118
#, no-wrap
msgid "(@var{width} @var{rest}@dots{})"
msgstr "(@var{width} @var{rest}@dots{})"

#. type: table
#: original_texis/modes.texi:2126
msgid "A list whose first element is an integer specifies truncation or padding of the results of @var{rest}.  The remaining elements @var{rest} are processed recursively as mode line constructs and concatenated together.  When @var{width} is positive, the result is space filled on the right if its width is less than @var{width}.  When @var{width} is negative, the result is truncated on the right to @minus{}@var{width} columns if its width exceeds @minus{}@var{width}."
msgstr "最初の要素が整数であるようなリストは@var{rest}の結果の切り詰め、またはパディングを指定する。残りの要素@var{rest}はモードライン構文として再帰的に処理されて互いに結合される。@var{width}が正で結果の幅が@var{width}より少なければ右側にスペースがパディングされる。@var{width}が負で結果の幅が@minus{}@var{width}より大きければ右側が切り詰められる。"

#. type: table
#: original_texis/modes.texi:2129
msgid "For example, the usual way to show what percentage of a buffer is above the top of the window is to use a list like this: @code{(-3 \"%p\")}."
msgstr "たとえばウィンドウ最上部からのバッファー位置をパーセント表示するには@code{(-3 \"%p\")}のようなリストを使用すればよい。"

#. type: node
#: original_texis/modes.texi:2131
#, no-wrap
msgid "Mode Line Top"
msgstr "Mode Line Top"

#. type: subsection
#: original_texis/modes.texi:2132
#, no-wrap
msgid "The Top Level of Mode Line Control"
msgstr "The Top Level of Mode Line Control"

#. type: Plain text
#: original_texis/modes.texi:2136
msgid "The variable in overall control of the mode line is @code{mode-line-format}."
msgstr "変数@code{mode-line-format}はモードラインの全体的な制御を行います。"

#. type: defopt
#: original_texis/modes.texi:2137
#, no-wrap
msgid "mode-line-format"
msgstr "mode-line-format"

#. type: defopt
#: original_texis/modes.texi:2140
msgid "The value of this variable is a mode line construct that controls the contents of the mode-line.  It is always buffer-local in all buffers."
msgstr "この変数の値はモードラインのコンテンツを制御するモードライン構文である。これはすべてのバッファーにおいて常にバッファーローカルである。"

#. type: defopt
#: original_texis/modes.texi:2144
msgid "If you set this variable to @code{nil} in a buffer, that buffer does not have a mode line.  (A window that is just one line tall also does not display a mode line.)"
msgstr "あるバッファー内でこの変数に@code{nil}をセットすると、そのバッファーはモードラインをもたない(高さが1行しかないウィンドウもモードラインを表示しない)。"

#. type: Plain text
#: original_texis/modes.texi:2153
msgid "The default value of @code{mode-line-format} is designed to use the values of other variables such as @code{mode-line-position} and @code{mode-line-modes} (which in turn incorporates the values of the variables @code{mode-name} and @code{minor-mode-alist}).  Very few modes need to alter @code{mode-line-format} itself.  For most purposes, it is sufficient to alter some of the variables that @code{mode-line-format} either directly or indirectly refers to."
msgstr "@code{mode-line-format}のデフォルト値は@code{mode-line-position}や@code{mode-line-modes} (これは@code{mode-name}と@code{minor-mode-alist}の値を組み込む)のような、他の変数の値を使用するようデザインされています。@code{mode-line-format}自体を変更する必要があるモードはほとんどありません。ほとんどの用途にたいしては、@code{mode-line-format}が直接または間接的に参照するいくつかの変数を修正すれば十分です。"

#. type: Plain text
#: original_texis/modes.texi:2160
msgid "If you do alter @code{mode-line-format} itself, the new value should use the same variables that appear in the default value (@pxref{Mode Line Variables}), rather than duplicating their contents or displaying the information in another fashion.  This way, customizations made by the user or by Lisp programs (such as @code{display-time} and major modes) via changes to those variables remain effective."
msgstr "@code{mode-line-format}l自体の変更を行う場合には、コンテンツを複製したり異なる様式で情報を表示するのではなく、新たな値にはデフォルト値(@ref{Mode Line Variables}を参照)に出現する同じ変数を使用するべきです。この方法を使用すればユーザーや(@code{display-time}やメジャーモードのような)Lispプログラムにより行われたカスタマイズは、それらの変数への変更を通じて効力を保ちます。"

#. type: Plain text
#: original_texis/modes.texi:2164
msgid "Here is a hypothetical example of a @code{mode-line-format} that might be useful for Shell mode (in reality, Shell mode does not set @code{mode-line-format}):"
msgstr "以下はShellモードにたいして有用かもしれない架空の@code{mode-line-format}の例です(実際にはShellモードは@code{mode-line-format}をセットしない):"

#. type: group
#: original_texis/modes.texi:2173
#, no-wrap
msgid ""
"(setq mode-line-format\n"
"  (list \"-\"\n"
"   'mode-line-mule-info\n"
"   'mode-line-modified\n"
"   'mode-line-frame-identification\n"
"   \"%b--\"\n"
msgstr ""
"(setq mode-line-format\n"
"  (list \"-\"\n"
"   'mode-line-mule-info\n"
"   'mode-line-modified\n"
"   'mode-line-frame-identification\n"
"   \"%b--\"\n"

#. type: group
#: original_texis/modes.texi:2178
#, no-wrap
msgid ""
"   ;; @r{Note that this is evaluated while making the list.}\n"
"   ;; @r{It makes a mode line construct which is just a string.}\n"
"   (getenv \"HOST\")\n"
msgstr ""
"   ;; @r{これはリスト作成中に評価されることに注意}\n"
"   ;; @r{これは単なる文字列のモードライン構文を作成する}\n"
"   (getenv \"HOST\")\n"

#. type: example
#: original_texis/modes.texi:2189
#, no-wrap
msgid ""
"   \":\"\n"
"   'default-directory\n"
"   \"   \"\n"
"   'global-mode-string\n"
"   \"   %[(\"\n"
"   '(:eval (format-time-string \"%F\"))\n"
"   'mode-line-process\n"
"   'minor-mode-alist\n"
"   \"%n\"\n"
"   \")%]--\"\n"
msgstr ""
"   \":\"\n"
"   'default-directory\n"
"   \"   \"\n"
"   'global-mode-string\n"
"   \"   %[(\"\n"
"   '(:eval (format-time-string \"%F\"))\n"
"   'mode-line-process\n"
"   'minor-mode-alist\n"
"   \"%n\"\n"
"   \")%]--\"\n"

#. type: group
#: original_texis/modes.texi:2194
#, no-wrap
msgid ""
"   '(which-function-mode (\"\" which-func-format \"--\"))\n"
"   '(line-number-mode \"L%l--\")\n"
"   '(column-number-mode \"C%c--\")\n"
"   '(-3 \"%p\")))\n"
msgstr ""
"   '(which-function-mode (\"\" which-func-format \"--\"))\n"
"   '(line-number-mode \"L%l--\")\n"
"   '(column-number-mode \"C%c--\")\n"
"   '(-3 \"%p\")))\n"

#. type: Plain text
#: original_texis/modes.texi:2201
msgid "(The variables @code{line-number-mode}, @code{column-number-mode} and @code{which-function-mode} enable particular minor modes; as usual, these variable names are also the minor mode command names.)"
msgstr "(変数@code{line-number-mode}、@code{column-number-mode}、@code{which-function-mode}は特定のマイナーモードを有効にする。これらの変数名は通常のようにマイナーモードコマンド名でもある。)"

#. type: subsection
#: original_texis/modes.texi:2203
#, no-wrap
msgid "Variables Used in the Mode Line"
msgstr "Variables Used in the Mode Line"

#. type: Plain text
#: original_texis/modes.texi:2214
msgid "This section describes variables incorporated by the standard value of @code{mode-line-format} into the text of the mode line.  There is nothing inherently special about these variables; any other variables could have the same effects on the mode line if the value of @code{mode-line-format} is changed to use them.  However, various parts of Emacs set these variables on the understanding that they will control parts of the mode line; therefore, practically speaking, it is essential for the mode line to use them.  Also see @ref{Optional Mode Line,,, emacs, The GNU Emacs Manual}."
msgstr "このセクションでは@code{mode-line-format}の標準的な値としてモードラインテキストに組み込まれる変数を説明します。これらの変数は本質的には特別なものではありません。@code{mode-line-format}が使用する変数を他の変数に変更すれば、それらはモードライン上で同様の効果をもちます。しかしEmacsのさまざまな部分は、それらの変数がモードラインを制御するという認識の元でそれらの変数をセットします。したがって事実上モードラインでそれらの変数を使用するのは必須なのです。@ref{Optional Mode Line,,, emacs, The GNU Emacs Manual}も参照してください。"

#. type: defvar
#: original_texis/modes.texi:2215
#, no-wrap
msgid "mode-line-mule-info"
msgstr "mode-line-mule-info"

#. type: defvar
#: original_texis/modes.texi:2219
msgid "This variable holds the value of the mode line construct that displays information about the language environment, buffer coding system, and current input method.  @xref{Non-ASCII Characters}."
msgstr "この変数は言語環境(language environment)、バッファーコーディングシステム、カレント入力メソッド(current input method)に関する情報のモードライン構文の値を保持する。@ref{Non-ASCII Characters}を参照のこと。"

#. type: defvar
#: original_texis/modes.texi:2221
#, no-wrap
msgid "mode-line-modified"
msgstr "mode-line-modified"

#. type: defvar
#: original_texis/modes.texi:2227
msgid "This variable holds the value of the mode line construct that displays whether the current buffer is modified.  Its default value displays @samp{**} if the buffer is modified, @samp{--} if the buffer is not modified, @samp{%%} if the buffer is read only, and @samp{%*} if the buffer is read only and modified."
msgstr "この変数はカレントバッファーが変更されたかどうかを表示するモードライン構文の値を保持する。デフォルト値ではバッファーが変更されていれば@samp{**}、バッファーが変更されていなければ@samp{--}、バッファーが読み取り専用なら@samp{%%}、読み取り専用だが変更されているときは@samp{%*}を表示する。"

#. type: defvar
#: original_texis/modes.texi:2229
msgid "Changing this variable does not force an update of the mode line."
msgstr "この変数を変更してもモードラインは強制的に更新されない。"

#. type: defvar
#: original_texis/modes.texi:2231
#, no-wrap
msgid "mode-line-frame-identification"
msgstr "mode-line-frame-identification"

#. type: defvar
#: original_texis/modes.texi:2236
msgid "This variable identifies the current frame.  Its default value displays @code{\" \"} if you are using a window system which can show multiple frames, or @code{\"-%F \"} on an ordinary terminal which shows only one frame at a time."
msgstr "この変数はカレントフレームを識別する。デフォルト値では複製フレームを表示可能なウィンドウシステムを使用している場合は@code{\" \"}、一度に1つのフレームだけを表示する通常の端末では@code{\"-%F \"}を表示する。"

#. type: defvar
#: original_texis/modes.texi:2238
#, no-wrap
msgid "mode-line-buffer-identification"
msgstr "mode-line-buffer-identification"

#. type: defvar
#: original_texis/modes.texi:2242
msgid "This variable identifies the buffer being displayed in the window.  Its default value displays the buffer name, padded with spaces to at least 12 columns."
msgstr "この変数はそのウィンドウ内で表示されているバッファーを識別する。デフォルト値では少なくとも12列になるようスペースパディングされたバッファー名を表示する。"

#. type: defvar
#: original_texis/modes.texi:2244
#, no-wrap
msgid "mode-line-position"
msgstr "mode-line-position"

#. type: defvar
#: original_texis/modes.texi:2248
msgid "This variable indicates the position in the buffer.  Its default value displays the buffer percentage and, optionally, the buffer size, the line number and the column number."
msgstr "この変数はバッファー内での位置を表示する。デフォルト値ではバッファーのパーセント位置、オプションでバッファーサイズ、行番号、列番号を表示する。"

#. type: defopt
#: original_texis/modes.texi:2250
#, no-wrap
msgid "mode-line-percent-position"
msgstr "mode-line-percent-position"

#. type: defopt
#: original_texis/modes.texi:2256
msgid "This option is used in @code{mode-line-position}.  Its value specifies both the buffer percentage to display (one of @code{nil}, @code{\"%o\"}, @code{\"%p\"}, @code{\"%P\"} or @code{\"%q\"}, @pxref{%-Constructs}) and a width to space-fill or truncate to.  You are recommended to set this option with the @code{customize-variable} facility."
msgstr "このオプションは@code{mode-line-position}の中で使用される。これの値はバッファーのパーセンテージ(@code{nil}、@code{\"%o\"}、@code{\"%p\"}、@code{\"%P\"}、@code{\"%q\"}のいずれか。@ref{%-Constructs}を参照)とフィルするスペースか切り詰めの幅の両方を指定する。このオプションは@code{customize-variable}機能でセットすることを推奨する。"

#. type: defvar
#: original_texis/modes.texi:2258
#, no-wrap
msgid "vc-mode"
msgstr "vc-mode"

#. type: defvar
#: original_texis/modes.texi:2263
msgid "The variable @code{vc-mode}, buffer-local in each buffer, records whether the buffer's visited file is maintained with version control, and, if so, which kind.  Its value is a string that appears in the mode line, or @code{nil} for no version control."
msgstr "変数@code{vc-mode}は各バッファーにたいしてバッファーローカルであり、そのバッファーがvisitしているファイルがバージョンコントロールで保守されているかどうか、保守されている場合はバージョンコントロールシステムの種別を表示する。値はモードラインに表示される文字列、またはバージョンコントロールされていなければ@code{nil}。"

#. type: defvar
#: original_texis/modes.texi:2265
#, no-wrap
msgid "mode-line-modes"
msgstr "mode-line-modes"

#. type: defvar
#: original_texis/modes.texi:2269
msgid "This variable displays the buffer's major and minor modes.  Its default value also displays the recursive editing level, information on the process status, and whether narrowing is in effect."
msgstr "この変数はそのバッファーのメジャーモードとマイナーモードを表示する。デフォルト値では再帰編集レベル(recursive editing level)、プロセス状態の情報、ナローイング(narrowing)効果の有無を表示する。"

#. type: defvar
#: original_texis/modes.texi:2271
#, no-wrap
msgid "mode-line-remote"
msgstr "mode-line-remote"

#. type: defvar
#: original_texis/modes.texi:2274
msgid "This variable is used to show whether @code{default-directory} for the current buffer is remote."
msgstr "この変数はカレントバッファーの@code{default-directory}がリモートかどうかを表示するために使用される。"

#. type: defvar
#: original_texis/modes.texi:2276
#, no-wrap
msgid "mode-line-client"
msgstr "mode-line-client"

#. type: defvar
#: original_texis/modes.texi:2278
msgid "This variable is used to identify @code{emacsclient} frames."
msgstr "この変数は@code{emacsclient}フレームを識別するために使用される。"

#. type: Plain text
#: original_texis/modes.texi:2281
msgid "The following three variables are used in @code{mode-line-modes}:"
msgstr "以下の3つの変数は@code{mode-line-modes}内で使用されます:"

#. type: defvar
#: original_texis/modes.texi:2282
#, no-wrap
msgid "mode-name"
msgstr "mode-name"

#. type: defvar
#: original_texis/modes.texi:2290
msgid "This buffer-local variable holds the ``pretty'' name of the current buffer's major mode.  Each major mode should set this variable so that the mode name will appear in the mode line.  The value does not have to be a string, but can use any of the data types valid in a mode-line construct (@pxref{Mode Line Data}).  To compute the string that will identify the mode name in the mode line, use @code{format-mode-line} (@pxref{Emulating Mode Line})."
msgstr "このバッファーローカル変数はカレントバッファーのメジャーモードの``愛称(pretty name)''を保持する。モードラインにモード名が表示されるように、すべてのメジャーモードはこの変数をセットすること。値は文字列である必要はなく、モードライン構文内で有効な任意のデータ型(@ref{Mode Line Data}を参照)を使用できる。モードライン内でモード名を識別する文字列の計算には@code{format-mode-line}を使用する(@ref{Emulating Mode Line}を参照)。"

#. type: defvar
#: original_texis/modes.texi:2292
#, no-wrap
msgid "mode-line-process"
msgstr "mode-line-process"

#. type: defvar
#: original_texis/modes.texi:2300
msgid "This buffer-local variable contains the mode line information on process status in modes used for communicating with subprocesses.  It is displayed immediately following the major mode name, with no intervening space.  For example, its value in the @file{*shell*} buffer is @code{(\":%s\")}, which allows the shell to display its status along with the major mode as: @samp{(Shell:run)}.  Normally this variable is @code{nil}."
msgstr "このバッファーローカル変数には、そのモードにおいてサブプロセスとの通信にたいするプロセス状態のモードライン情報が含まれる。これはメジャーモード名の直後(間にスペースはない)に表示される。たとえば@file{*shell*}バッファーでの値は@code{(\":%s\")}であり、これは@samp{(Shell:run)}のように、メジャーモードとともにその状態を表示する。この変数は通常は@code{nil}。"

#. type: defvar
#: original_texis/modes.texi:2302
#, no-wrap
msgid "mode-line-front-space"
msgstr "mode-line-front-space"

#. type: defvar
#: original_texis/modes.texi:2306
msgid "This variable is displayed at the front of the mode line.  By default, this construct is displayed right at the beginning of the mode line, except that if there is a memory-full message, it is displayed first."
msgstr "この変数はモードラインの一番前に表示される。memory-fullメッセージがある場合を除き、デフォルトではこの構文はモードライン先頭の右側に表示される。"

#. type: defvar
#: original_texis/modes.texi:2308
#, no-wrap
msgid "mode-line-end-spaces"
msgstr "mode-line-end-spaces"

#. type: defvar
#: original_texis/modes.texi:2310
msgid "This variable is displayed at the end of the mode line."
msgstr "この変数はモードラインの終端に表示される。"

#. type: defvar
#: original_texis/modes.texi:2312
#, no-wrap
msgid "mode-line-misc-info"
msgstr "mode-line-misc-info"

#. type: defvar
#: original_texis/modes.texi:2315
msgid "Mode line construct for miscellaneous information.  By default, this shows the information specified by @code{global-mode-string}."
msgstr "その他の情報にたいするモードライン構文。デフォルトでは@code{global-mode-string}で指定される情報を表示する。"

#. type: defvar
#: original_texis/modes.texi:2317
#, no-wrap
msgid "mode-line-position-line-format"
msgstr "mode-line-position-line-format"

#. type: defvar
#: original_texis/modes.texi:2322
msgid "The format used to display line numbers when @code{line-number-mode} (@pxref{Optional Mode Line,,, emacs, The GNU Emacs Manual}) is switched on.  @samp{%l} in the format will be replaced with the line number."
msgstr "@code{line-number-mode} (@ref{Optional Mode Line,,, emacs, The GNU Emacs Manual}を参照)がオンの際に行番号表示に使用するフォーマット。フォーマット内の@samp{%l}は行番号に置き換えられる。"

#. type: defvar
#: original_texis/modes.texi:2324
#, no-wrap
msgid "mode-line-position-column-format"
msgstr "mode-line-position-column-format"

#. type: defvar
#: original_texis/modes.texi:2330
msgid "The format used to display column numbers when @code{column-number-mode} (@pxref{Optional Mode Line,,, emacs, The GNU Emacs Manual}) is switched on.  @samp{%c} in the format will be replaced with a zero-based column number, and @samp{%C} will be replaced with a one-based column number."
msgstr "@code{column-number-mode} (@ref{Optional Mode Line,,, emacs, The GNU Emacs Manual}を参照)をオンに切り替えた際に列番号の表示に使用するフォーマット。フォーマット内の@samp{%c}は0基準、@samp{%C}は1基準の列番号に置き換えられる。"

#. type: defvar
#: original_texis/modes.texi:2332
#, no-wrap
msgid "mode-line-position-column-line-format"
msgstr "mode-line-position-column-line-format"

#. type: defvar
#: original_texis/modes.texi:2337
msgid "The format used to display column numbers when both @code{line-number-mode} and @code{column-number-mode} are switched on.  See the previous two variables for the meaning of the @samp{%l}, @samp{%c} and @samp{%C} format specs."
msgstr "@code{line-number-mode}と@code{column-number-mode}の両方がオンの際に列番号表示に使用するフォーマット。フォーマットspecsの@samp{%l}、@samp{%c}、@samp{%C}の意味については、前出の2つの変数を参照のこと。"

#. type: defvar
#: original_texis/modes.texi:2339
#, no-wrap
msgid "minor-mode-alist"
msgstr "minor-mode-alist"

#. type: anchor{#1}
#: original_texis/modes.texi:2344
msgid "Definition of minor-mode-alist"
msgstr "Definition of minor-mode-alist"

#. type: defvar
#: original_texis/modes.texi:2344
msgid "This variable holds an association list whose elements specify how the mode line should indicate that a minor mode is active.  Each element of the @code{minor-mode-alist} should be a two-element list:"
msgstr "この変数はアクティブなマイナーモードをモードラインに示す方法を指定する要素をもった連想リスト(association list)を保持する。@code{minor-mode-alist}の各要素は以下のような2要素のリストであること:"

#. type: example
#: original_texis/modes.texi:2347
#, no-wrap
msgid "(@var{minor-mode-variable} @var{mode-line-string})\n"
msgstr "(@var{minor-mode-variable} @var{mode-line-string})\n"

#. type: defvar
#: original_texis/modes.texi:2355
msgid "More generally, @var{mode-line-string} can be any mode line construct.  It appears in the mode line when the value of @var{minor-mode-variable} is non-@code{nil}, and not otherwise.  These strings should begin with spaces so that they don't run together.  Conventionally, the @var{minor-mode-variable} for a specific mode is set to a non-@code{nil} value when that minor mode is activated."
msgstr "より一般的には@var{mode-line-string}は任意のモードライン構文を指定できる。@var{minor-mode-variable}の値が非@code{nil}ならモードラインに表示され、それ以外なら表示されない。混合しないようにこれらの文字列はスペースで始めること。慣例的に特定のモードにたいする@var{minor-mode-variable}は、そのマイナーモードがアクティブになった際に非@code{nil}値にセットされる。"

#. type: defvar
#: original_texis/modes.texi:2359
msgid "@code{minor-mode-alist} itself is not buffer-local.  Each variable mentioned in the alist should be buffer-local if its minor mode can be enabled separately in each buffer."
msgstr "@code{minor-mode-alist}自体はバッファーローカルではない。このalist内で参照される各変数は、そのマイナーモードをバッファーごとに個別に有効にできるならバッファーローカルであること。"

#. type: defvar
#: original_texis/modes.texi:2361
#, no-wrap
msgid "global-mode-string"
msgstr "global-mode-string"

#. type: defvar
#: original_texis/modes.texi:2371
msgid "This variable holds a mode line construct that, by default, appears in the mode line as part of @code{mode-line-misc-info}, just after the @code{which-function-mode} information if that minor mode is enabled, else after @code{mode-line-modes}.  Elements that are added to this construct should normally end in a space (to ensure that consecutive @code{global-mode-string} elements display properly).  For instance, the command @code{display-time} sets @code{global-mode-string} to refer to the variable @code{display-time-string}, which holds a string containing the time and load information."
msgstr "この変数は、デフォルトでは@code{mode-line-misc-info}の一部としてモードラインに表示されるモードライン構文が保持されている。マイナーモード@code{which-function-mode}が有効ならこのモード情報の直後、有効でなければ@code{mode-line-modes}の後に表示される。この構文に追加する要素は通常はスペース内に収まること(後続の@code{global-mode-string}要素が正しく表示されるために)。"

#. type: defvar
#: original_texis/modes.texi:2376
msgid "The @samp{%M} construct substitutes the value of @code{global-mode-string}.  This construct is not used by the default mode line, as the variable itself is used in @code{mode-line-misc-info}."
msgstr "@samp{%M}構文は@code{global-mode-string}の値を置き換える。この変数自体は@code{mode-line-misc-info}で使用されているので、この構文はデフォルトのモードライン使用されない。"

#. type: Plain text
#: original_texis/modes.texi:2381
msgid "Here is a simplified version of the default value of @code{mode-line-format}.  The real default value also specifies addition of text properties."
msgstr "以下は@code{mode-line-format}のデフォルト値の簡略化バージョンです。実際のデフォルト値には追加のテキストプロパティ指定も含まれます。"

#. type: group
#: original_texis/modes.texi:2389
#, no-wrap
msgid ""
"(\"-\"\n"
" mode-line-mule-info\n"
" mode-line-modified\n"
" mode-line-frame-identification\n"
" mode-line-buffer-identification\n"
msgstr ""
"(\"-\"\n"
" mode-line-mule-info\n"
" mode-line-modified\n"
" mode-line-frame-identification\n"
" mode-line-buffer-identification\n"

#. type: example
#: original_texis/modes.texi:2394
#, no-wrap
msgid ""
" \"   \"\n"
" mode-line-position\n"
" (vc-mode vc-mode)\n"
" \"   \"\n"
msgstr ""
" \"   \"\n"
" mode-line-position\n"
" (vc-mode vc-mode)\n"
" \"   \"\n"

#. type: group
#: original_texis/modes.texi:2399
#, no-wrap
msgid ""
" mode-line-modes\n"
" (which-function-mode (\"\" which-func-format \"--\"))\n"
" (global-mode-string (\"--\" global-mode-string))\n"
" \"-%-\")\n"
msgstr ""
" mode-line-modes\n"
" (which-function-mode (\"\" which-func-format \"--\"))\n"
" (global-mode-string (\"--\" global-mode-string))\n"
" \"-%-\")\n"

#. type: subsection
#: original_texis/modes.texi:2403
#, no-wrap
msgid "@code{%}-Constructs in the Mode Line"
msgstr "@code{%}-Constructs in the Mode Line"

#. type: Plain text
#: original_texis/modes.texi:2409
msgid "Strings used as mode line constructs can use certain @code{%}-constructs to substitute various kinds of data.  The following is a list of the defined @code{%}-constructs, and what they mean."
msgstr "モードライン構文として使用される文字列では、さまざまな種類のデータを置き換えるために@code{%}構文を使用できます。以下は定義済みの@code{%}構文と意味のリストです。"

#. type: Plain text
#: original_texis/modes.texi:2416
msgid "In any construct except @samp{%%}, you can add a decimal integer after the @samp{%} to specify a minimum field width.  If the width is less, the field is padded to that width.  Purely numeric constructs (@samp{c}, @samp{i}, @samp{I}, and @samp{l}) are padded by inserting spaces to the left, and others are padded by inserting spaces to the right."
msgstr "@samp{%%}以外の構文では、フィールドの最小幅を指定するために@samp{%}の後に10進整数を追加できます。幅がそれより小さければそのフィールドは最小幅にパディングされます。純粋に数値的な構文(@samp{c}、@samp{i}、@samp{I}、@samp{l})は左側、それ以外は右側にスペースを追加してパディングされます。"

#. type: item
#: original_texis/modes.texi:2418
#, no-wrap
msgid "%b"
msgstr "%b"

#. type: table
#: original_texis/modes.texi:2421
msgid "The current buffer name, obtained with the @code{buffer-name} function.  @xref{Buffer Names}."
msgstr "@code{buffer-name}関数により取得されるカレントバッファー名。@ref{Buffer Names}を参照のこと。"

#. type: item
#: original_texis/modes.texi:2422
#, no-wrap
msgid "%c"
msgstr "%c"

#. type: table
#: original_texis/modes.texi:2425
msgid "The current column number of point, counting from zero starting at the left margin of the window."
msgstr "ポイント位置のカレント列番号。そのウィンドウの左マージンより0からカウントされる。"

#. type: item
#: original_texis/modes.texi:2426
#, no-wrap
msgid "%C"
msgstr "%C"

#. type: table
#: original_texis/modes.texi:2429
msgid "The current column number of point, counting from one starting at the left margin of the window."
msgstr "ポイント位置のカレント列番号。そのウィンドウの左マージンより1からカウントされる。"

#. type: item
#: original_texis/modes.texi:2430
#, no-wrap
msgid "%e"
msgstr "%e"

#. type: table
#: original_texis/modes.texi:2433
msgid "When Emacs is nearly out of memory for Lisp objects, a brief message saying so.  Otherwise, this is empty."
msgstr "EmacsがLispオブジェクトにたいしてメモリー不足になりそうなときは、それを伝える簡略なメッセージを示す。それ以外の場合は空。"

#. type: item
#: original_texis/modes.texi:2434
#, no-wrap
msgid "%f"
msgstr "%f"

#. type: table
#: original_texis/modes.texi:2437
msgid "The visited file name, obtained with the @code{buffer-file-name} function.  @xref{Buffer File Name}."
msgstr "@code{buffer-file-name}関数により取得されるvisit中のファイル名。@ref{Buffer File Name}を参照のこと。"

#. type: item
#: original_texis/modes.texi:2438
#, no-wrap
msgid "%F"
msgstr "%F"

#. type: table
#: original_texis/modes.texi:2441
msgid "The title (only on a window system) or the name of the selected frame.  @xref{Basic Parameters}."
msgstr "選択されたフレームのタイトル(ウィンドウシステム上のみ)か名前。@ref{Basic Parameters}を参照のこと。"

#. type: item
#: original_texis/modes.texi:2442
#, no-wrap
msgid "%i"
msgstr "%i"

#. type: table
#: original_texis/modes.texi:2445
msgid "The size of the accessible part of the current buffer; basically @code{(- (point-max) (point-min))}."
msgstr "カレントバッファーのアクセス可能な範囲のサイズ。基本的には@code{(- (point-max) (point-min))}。"

#. type: item
#: original_texis/modes.texi:2446
#, no-wrap
msgid "%I"
msgstr "%I"

#. type: table
#: original_texis/modes.texi:2450
msgid "Like @samp{%i}, but the size is printed in a more readable way by using @samp{k} for 10^3, @samp{M} for 10^6, @samp{G} for 10^9, etc., to abbreviate."
msgstr "@samp{%i}と同様だが10^3は@samp{k}、10^6は@samp{M}、10^9は@samp{G}を使用して略記することで、より読みやすい方法でサイズをプリントする。"

#. type: item
#: original_texis/modes.texi:2451
#, no-wrap
msgid "%l"
msgstr "%l"

#. type: table
#: original_texis/modes.texi:2454
msgid "The current line number of point, counting within the accessible portion of the buffer."
msgstr "ポイント位置のカレント行番号。そのバッファーのアクセス可能な範囲内でカウントされる。"

#. type: item
#: original_texis/modes.texi:2455
#, no-wrap
msgid "%M"
msgstr "%M"

#. type: table
#: original_texis/modes.texi:2458
msgid "The value of @code{global-mode-string} (which is part of @code{mode-line-misc-info} by default)."
msgstr "@code{global-mode-string}の値(デフォルトでは@code{mode-line-misc-info}の一部)。"

#. type: item
#: original_texis/modes.texi:2459
#, no-wrap
msgid "%n"
msgstr "%n"

#. type: table
#: original_texis/modes.texi:2462
msgid "@samp{Narrow} when narrowing is in effect; nothing otherwise (see @code{narrow-to-region} in @ref{Narrowing})."
msgstr "ナローイングが有効なときは@samp{Narrow}、それ以外は何も表示しない(@ref{Narrowing}の@code{narrow-to-region}を参照)。"

#. type: item
#: original_texis/modes.texi:2463
#, no-wrap
msgid "%o"
msgstr "%o"

#. type: table
#: original_texis/modes.texi:2468
msgid "The degree of @dfn{travel} of the window through (the visible portion of) the buffer, i.e. the size of the text above the top of the window expressed as a percentage of all the text outside the window, or @samp{Top}, @samp{Bottom} or @samp{All}."
msgstr "バッファー(の可視な範囲)を通じてウィンドウが@dfn{travel} した割合(ウィンドウ外部にあるすべてのテキストにたいしてウィンドウ上端の上にあるテキストのサイズのパーセンテージまたは@samp{Top}、@samp{Bottom}、@samp{All})。"

#. type: item
#: original_texis/modes.texi:2469
#, no-wrap
msgid "%p"
msgstr "%p"

#. type: table
#: original_texis/modes.texi:2473
msgid "The percentage of the buffer text above the @strong{top} of window, or @samp{Top}, @samp{Bottom} or @samp{All}.  Note that the default mode line construct truncates this to three characters."
msgstr "ウィンドウの@strong{最上部}より上にあるバッファーテキストのパーセント表示、または@samp{Top}、@samp{Bottom}、@samp{All}のいずれか。デフォルトのモードライン構文は、これを3文字に切り詰めることに注意。"

#. type: item
#: original_texis/modes.texi:2474
#, no-wrap
msgid "%P"
msgstr "%P"

#. type: table
#: original_texis/modes.texi:2479
msgid "The percentage of the buffer text that is above the @strong{bottom} of the window (which includes the text visible in the window, as well as the text above the top), plus @samp{Top} if the top of the buffer is visible on screen; or @samp{Bottom} or @samp{All}."
msgstr "ウィンドウの@strong{最下部}より上にあるバッファーテキスト(ウィンドウ内の可視なテキストと最上部の上にあるテキスト)のパーセント表示、およびバッファーの最上部がスクリーン上で可視なら、それに加えて@samp{Top}。または@samp{Bottom}か@samp{All}。"

#. type: item
#: original_texis/modes.texi:2480
#, no-wrap
msgid "%q"
msgstr "%q"

#. type: table
#: original_texis/modes.texi:2483
msgid "The percentages of text above both the @strong{top} and the @strong{bottom} of the window, separated by @samp{-}, or @samp{All}."
msgstr "@samp{-}で区切ったウィンドウの@strong{上端}および@strong{下端}より上にあるテキストのパーセンテージ、または@samp{All}。"

#. type: item
#: original_texis/modes.texi:2484
#, no-wrap
msgid "%s"
msgstr "%s"

#. type: table
#: original_texis/modes.texi:2487
msgid "The status of the subprocess belonging to the current buffer, obtained with @code{process-status}.  @xref{Process Information}."
msgstr "@code{process-status}により取得されるカレントバッファーに属するサブプロセスの状態。@ref{Process Information}を参照のこと。"

#. type: item
#: original_texis/modes.texi:2488
#, no-wrap
msgid "%z"
msgstr "%z"

#. type: table
#: original_texis/modes.texi:2490
msgid "The mnemonics of keyboard, terminal, and buffer coding systems."
msgstr "キーボード、端末、およびバッファーコーディングシステムのニーモニック。"

#. type: item
#: original_texis/modes.texi:2491
#, no-wrap
msgid "%Z"
msgstr "%Z"

#. type: table
#: original_texis/modes.texi:2493
msgid "Like @samp{%z}, but including the end-of-line format."
msgstr "@samp{%z}と同様だが、EOL形式(end-of-line format: 改行形式)を含む。"

#. type: item
#: original_texis/modes.texi:2494
#, no-wrap
msgid "%*"
msgstr "%*"

#. type: table
#: original_texis/modes.texi:2498
msgid "@samp{%} if the buffer is read only (see @code{buffer-read-only}); @* @samp{*} if the buffer is modified (see @code{buffer-modified-p}); @* @samp{-} otherwise.  @xref{Buffer Modification}."
msgstr "バッファーが読み取り専用(@code{buffer-read-only}を参照)なら@samp{%}、@* 変更(@code{buffer-modified-p}を参照)されていればは@samp{*}、@* それ以外は@samp{-}。@ref{Buffer Modification}を参照のこと。"

#. type: item
#: original_texis/modes.texi:2499
#, no-wrap
msgid "%+"
msgstr "%+"

#. type: table
#: original_texis/modes.texi:2504
msgid "@samp{*} if the buffer is modified (see @code{buffer-modified-p}); @* @samp{%} if the buffer is read only (see @code{buffer-read-only}); @* @samp{-} otherwise.  This differs from @samp{%*} only for a modified read-only buffer.  @xref{Buffer Modification}."
msgstr "バッファーが変更(@code{buffer-modified-p}を参照)されていれば@samp{*}@* バッファーが読み取り専用(@code{buffer-read-only}を参照)なら@samp{%}、@* それ以外は@samp{-}。これは読み取り専用バッファーの変更にたいしてのみ@samp{%*}と異なる。@ref{Buffer Modification}を参照のこと。"

#. type: item
#: original_texis/modes.texi:2505
#, no-wrap
msgid "%&"
msgstr "%&"

#. type: table
#: original_texis/modes.texi:2507
msgid "@samp{*} if the buffer is modified, and @samp{-} otherwise."
msgstr "バッファーが変更されてれば@samp{*}、それ以外は@samp{-}。"

#. type: item
#: original_texis/modes.texi:2508
#, no-wrap
msgid "%@@"
msgstr "%@@"

#. type: table
#: original_texis/modes.texi:2511
msgid "@samp{@@} if the buffer's @code{default-directory} (@pxref{File Name Expansion}) is on a remote machine, and @samp{-} otherwise."
msgstr "バッファーの@code{default-directory} (@ref{File Name Expansion}を参照)がリモートマシンなら@samp{@@}、それ以外なら@samp{-}。"

#. type: item
#: original_texis/modes.texi:2512
#, no-wrap
msgid "%["
msgstr "%["

#. type: table
#: original_texis/modes.texi:2516
msgid "An indication of the depth of recursive editing levels (not counting minibuffer levels): one @samp{[} for each editing level.  @xref{Recursive Editing}."
msgstr "再帰編集レベルの深さを表示する(ミニバッファーレベルは勘定しない)編集レベル1つが@samp{[}。@ref{Recursive Editing}を参照のこと。"

#. type: item
#: original_texis/modes.texi:2517
#, no-wrap
msgid "%]"
msgstr "%]"

#. type: table
#: original_texis/modes.texi:2520
msgid "One @samp{]} for each recursive editing level (not counting minibuffer levels)."
msgstr "編集レベル1つが@samp{]}(ミニバッファーレベルは勘定しない)。"

#. type: item
#: original_texis/modes.texi:2521
#, no-wrap
msgid "%-"
msgstr "%-"

#. type: table
#: original_texis/modes.texi:2523
msgid "Dashes sufficient to fill the remainder of the mode line."
msgstr "モードラインの残りを充填するのに十分なダッシュ。"

#. type: item
#: original_texis/modes.texi:2524
#, no-wrap
msgid "%%"
msgstr "%%"

#. type: table
#: original_texis/modes.texi:2527
msgid "The character @samp{%}---this is how to include a literal @samp{%} in a string in which @code{%}-constructs are allowed."
msgstr "文字@samp{%}。@code{%}構文が許される文字列内にリテラル@samp{%}を含めるにはこの方法を使用する。"

#. type: subsubheading
#: original_texis/modes.texi:2529
#, no-wrap
msgid "Obsolete @code{%}-Constructs"
msgstr "廃止となる@code{%}-構文"

#. type: Plain text
#: original_texis/modes.texi:2532
msgid "The following constructs should no longer be used."
msgstr "以下の構文は今後使用するべきではありません。"

#. type: item
#: original_texis/modes.texi:2534
#, no-wrap
msgid "%m"
msgstr "%m"

#. type: table
#: original_texis/modes.texi:2539
msgid "Obsolete; use the @code{mode-name} variable instead.  The @code{%m} construct is inadequate, as it produces an empty string if the value of @code{mode-name} is a non-string mode-line construct (as in @code{emacs-lisp-mode}, for example)."
msgstr "廃止; かわりに@code{mode-name}変数を使うこと。@code{mode-name}の値が(たとえば@code{emacs-lisp-mode}の値のように)非文字列のモードライン構文の場合には、@code{%m}構文は空文字列を生成するので不十分である。"

#. type: subsection
#: original_texis/modes.texi:2542
#, no-wrap
msgid "Properties in the Mode Line"
msgstr "Properties in the Mode Line"

#. type: cindex
#: original_texis/modes.texi:2543
#, no-wrap
msgid "text properties in the mode line"
msgstr "text properties in the mode line"

#. type: Plain text
#: original_texis/modes.texi:2549
msgid "Certain text properties are meaningful in the mode line.  The @code{face} property affects the appearance of text; the @code{help-echo} property associates help strings with the text, and @code{keymap} can make the text mouse-sensitive."
msgstr "モードライン内では特定のテキストプロパティが意味をもちます。@code{face}プロパティはテキストの外見に影響します。@code{help-echo}プロパティはそのテキストのヘルプ文字列に関連し、@code{keymap}によりテキストをマウスに感応させることができます。"

#. type: Plain text
#: original_texis/modes.texi:2552
msgid "There are four ways to specify text properties for text in the mode line:"
msgstr "モードライン内のテキストにたいしてテキストプロパティを指定するには4つの方法があります:"

#. type: enumerate
#: original_texis/modes.texi:2557
msgid "Put a string with a text property directly into the mode line data structure, but see @ref{Mode Line Data} for caveats for that."
msgstr "モードラインデータ構造内にテキストプロパティをもつ文字列を直接配置するが、それに関する注意点は@ref{Mode Line Data}を参照のこと。"

#. type: enumerate
#: original_texis/modes.texi:2561
msgid "Put a text property on a mode line %-construct such as @samp{%12b}; then the expansion of the %-construct will have that same text property."
msgstr "@samp{%12b}のようなモードライン%構文にテキストプロパティを配置する。その場合には%構文を展開すると同じテキストプロパティをもつことになる。"

#. type: enumerate
#: original_texis/modes.texi:2565
msgid "Use a @code{(:propertize @var{elt} @var{props}@dots{})} construct to give @var{elt} a text property specified by @var{props}."
msgstr "@var{props}で指定されるテキストプロパティを@var{elt}に与えるために@code{(:propertize @var{elt} @var{props}@dots{})}構文を使用する。"

#. type: enumerate
#: original_texis/modes.texi:2570
msgid "Use a list containing @code{:eval @var{form}} in the mode line data structure, and make @var{form} evaluate to a string that has a text property."
msgstr "@var{form}がテキストプロパティをもつ文字列に評価されるようにモードラインデータ構造内に@code{:eval @var{form}}を含むリストを使用する。"

#. type: Plain text
#: original_texis/modes.texi:2576
msgid "You can use the @code{keymap} property to specify a keymap.  This keymap only takes real effect for mouse clicks; binding character keys and function keys to it has no effect, since it is impossible to move point into the mode line."
msgstr "キーマップを指定するために@code{keymap}プロパティを使用できます。このキーマップはマウスクリックにたいしてのみ実際の効果をもちます。モードライン内にポイントを移動させるのは不可能なので、これに文字キーやファンクションキーをバインドしても効果はありません。"

#. type: Plain text
#: original_texis/modes.texi:2583
msgid "When the mode line refers to a variable which does not have a non-@code{nil} @code{risky-local-variable} property, any text properties given or specified within that variable's values are ignored.  This is because such properties could otherwise specify functions to be called, and those functions could come from file local variables."
msgstr "@code{risky-local-variable}が非@code{nil}であるようなプロパティをもつ変数をモードラインが参照する場合には、その変数の値から取得または指定されるテキストプロパティはすべて無視されます。そのようなプロパティは呼び出される関数を指定するかもしれず、その関数はファイルローカル変数に由来するかもしれないからです。"

#. type: subsection
#: original_texis/modes.texi:2585
#, no-wrap
msgid "Window Header Lines"
msgstr "Window Header Lines"

#. type: cindex
#: original_texis/modes.texi:2586
#, no-wrap
msgid "header line (of a window)"
msgstr "header line (of a window)"

#. type: cindex
#: original_texis/modes.texi:2587
#, no-wrap
msgid "window header line"
msgstr "window header line"

#. type: Plain text
#: original_texis/modes.texi:2593
msgid "A window can have a @dfn{header line} at the top, just as it can have a mode line at the bottom.  The header line feature works just like the mode line feature, except that it's controlled by @code{header-line-format}:"
msgstr "最下部にモードラインをもつことができるのと同じように、ウィンドウは最上部に@dfn{ヘッダーライン(header line)}をもつことができます。ヘッダーライン機能は、それが@code{header-line-format}によって制御されることを除けばモードラインと同じように機能します。"

#. type: defvar
#: original_texis/modes.texi:2594
#, no-wrap
msgid "header-line-format"
msgstr "header-line-format"

#. type: defvar
#: original_texis/modes.texi:2600
msgid "This variable, local in every buffer, specifies how to display the header line, for windows displaying the buffer.  The format of the value is the same as for @code{mode-line-format} (@pxref{Mode Line Data}).  It is normally @code{nil}, so that ordinary buffers have no header line."
msgstr "すべてのバッファーにたいしてローカルなこの変数は、そのバッファーを表示するバッファーにたいしてヘッダーラインを表示する方法を指定する。この変数の値のフォーマットは@code{mode-line-format}にたいするフォーマットと同じ(@ref{Mode Line Data}を参照)。この変数は通常は@code{nil}なので、通常のバッファーはヘッダーラインをもたない。"

#. type: Plain text
#: original_texis/modes.texi:2613
msgid "If @code{display-line-numbers-mode} is turned on in a buffer (@pxref{Display Custom, display-line-numbers-mode,, emacs, The GNU Emacs Manual}), the buffer text is indented on display by the amount of screen space needed to show the line numbers.  By contrast, text of the header line is not automatically indented, because a header line never displays a line number, and because the text of the header line is not necessarily directly related to buffer text below it.  If a Lisp program needs the header-line text to be aligned with buffer text (for example, if the buffer displays columnar data, like @code{tabulated-list-mode} does, @pxref{Tabulated List Mode}), it should turn on the minor mode @code{header-line-indent-mode}."
msgstr "バッファーで@code{display-line-numbers-mode} (@ref{Display Custom, display-line-numbers-mode,, emacs, The GNU Emacs Manual}を参照)がオンになっていると、バッファーのテキストは行番号の表示に必要なスクリーンスペース分インデントされて表示されます。それとは対照的にヘッダーラインのテキストは自動的にインデントされません。ヘッダーラインに行番号が表示されることはありませんし、ヘッダーラインとその下にあるバッファーのテキストが直接関連する必要はないからです。バッファーのテキストに合わせてヘッダーラインのテキストを位置揃えする必要があるLispプログラムや、@code{tabulated-list-mode} (@ref{Tabulated List Mode}を参照)のように列形式データを表示するバッファーは、マイナーモード@code{header-line-indent-mode}をオンにする必要があります。"

#. type: deffn
#: original_texis/modes.texi:2614
#, no-wrap
msgid "Command header-line-indent-mode"
msgstr "Command header-line-indent-mode"

#. type: deffn
#: original_texis/modes.texi:2623
msgid "This buffer-local minor mode tracks the changes of the width of the line-number display on screen (which may vary depending on the range of line numbers shown in the window), and allows Lisp programs to arrange that header-line text is always aligned with buffer text when the line-number width changes.  Such Lisp programs should turn on this mode in the buffer, and use the variables @code{header-line-indent} and @code{header-line-indent-width} in the @code{header-line-format} to ensure it is adjusted to the text indentation at all times."
msgstr "このバッファーローカルなマイナーモードはスクリーン上で表示されている行番号の幅(そのウィンドウで表示されている行番号範囲に応じて大きく異なる可能性あり)の変更を追跡して、行番号の幅が変更された際にヘッダーラインとバッファーラインのテキストを常に位置揃えさせる手段をLispプログラムに提供する。このようなLispプログラムはバッファーでこのモードをオンにして、常時テキストのインデントを確実に調節するために、@code{header-line-format}の中で@code{header-line-indent}および@code{header-line-indent-width}という変数を使う必要がある。"

#. type: defvar
#: original_texis/modes.texi:2625
#, no-wrap
msgid "header-line-indent"
msgstr "header-line-indent"

#. type: defvar
#: original_texis/modes.texi:2638
msgid "This variable's value is a whitespace string whose width is kept equal to the current width of line-numbers on display, provided that @code{header-line-indent-mode} is turned on in the buffer shown in the window.  The number of spaces is calculated under the assumption that the face of the header-line text uses the same font, including size, as the frame's default font; if that assumption is false, use @code{header-line-indent-width}, described below, instead.  This variable is intended to be used in simple situations where the header-line text needs to be indented as a whole to be realigned with buffer text, by prepending this variable's value to the actual header-line text.  For example, the following definition of @code{header-line-format}:"
msgstr "そのウィンドウで表示されているバッファーで@code{header-line-indent-mode}の場合には、表示中の行番号のカレント幅と同じ幅をもつ空白文字列がこの変数の値となる。空白の個数はヘッダーラインのテキストのフェイスにおいて、サイズも含めてフレームのデフォルトフォントと同じフォントが使用されている前提で計算される。この前提が成り立たない場合には、かわりに下記の@code{header-line-indent-width}を使うこと。これは値をヘッダーラインのテキストの先頭に追加することによって、バッファーのテキストに合わせてヘッダーラインのテキスト全体のインデントを再調整するというシンプルな状況で使用されることを意図した変数である。たとえば以下の@code{header-line-format}の定義では:"

#. type: lisp
#: original_texis/modes.texi:2642
#, no-wrap
msgid ""
"(setq header-line-format\n"
"      `(\"\" header-line-indent ,my-header-line))\n"
msgstr ""
"(setq header-line-format\n"
"      `(\"\" header-line-indent ,my-header-line))\n"

#. type: defvar
#: original_texis/modes.texi:2648
msgid "where @code{my-header-line} is the format string that produces the actual text of the header line, will make sure the header-line text is always indented like the buffer text below it."
msgstr "ここで@code{my-header-line}はヘッダーラインの実際のテキストを生成するフォーマット文字列。これによりヘッダーラインのテキストはその下にあるバッファーと同じように常にインデントされることが保証される。"

#. type: defvar
#: original_texis/modes.texi:2650
#, no-wrap
msgid "header-line-indent-width"
msgstr "header-line-indent-width"

#. type: defvar
#: original_texis/modes.texi:2664
msgid "This variable's value is kept updated to provide the current width, in units of the frame's canonical character width, used for displaying the line numbers, provided that @code{header-line-indent-mode} is turned on in the buffer shown in the window.  It can be used for aligning the header-line text with the buffer text when @code{header-line-indent} is not flexible enough.  For example, if the header line uses a font whose metrics is different from the default face's font, your Lisp program can calculate the width of line-number display in pixels, by multiplying the value of this variable by the value returned by @code{frame-char-width} (@pxref{Frame Font}), and then use the result to align header-line text using the @code{:align-to} display property spec (@pxref{Specified Space}) in pixels on the relevant parts of @code{header-line-frormat}."
msgstr "そのウィンドウで表示されているバッファーで@code{header-line-indent-mode}の場合には、この変数の値は行番号の表示に用いられるフレームの正規文字幅単位でカレント幅を提供するよう最新に保たれる。バッファーのテキストに合わせてヘッダーラインのテキストを位置揃えするにあたり、@code{header-line-indent}では柔軟性に欠けるような際に用いることができる。たとえばヘッダーラインでデフォルトフェイスのフォントと異なるメトリクス(訳注: 個々の文字や全体の文字の平均について様々な値を定義する測定情報のこと)のフォントを使用している場合には、@code{frame-char-width} (@ref{Frame Font}を参照)のリターン値にこの変数の値を乗じて表示されている行番号のピクセル幅を計算、その結果を@code{header-line-frormat}の関連する部分にピクセル単位で適用するためにディスプレイプロパティ仕様@code{:align-to} (@ref{Specified Space}を参照)を用いてヘッダーラインのテキストの位置合わせをを行えばよい。"

#. type: defun
#: original_texis/modes.texi:2666
#, no-wrap
msgid "window-header-line-height &optional window"
msgstr "window-header-line-height &optional window"

#. type: defun
#: original_texis/modes.texi:2670
msgid "This function returns the height in pixels of @var{window}'s header line.  @var{window} must be a live window, and defaults to the selected window."
msgstr "この関数は@var{window}のヘッダーラインの高さをピクセルでリターンする。@var{window}は生きたウィンドウでなければならずデフォルトは選択されたウィンドウ。"

#. type: Plain text
#: original_texis/modes.texi:2676
msgid "A window that is just one line tall never displays a header line.  A window that is two lines tall cannot display both a mode line and a header line at once; if it has a mode line, then it does not display a header line."
msgstr "高さが1行しかないウィンドウがヘッダーラインを表示することは決してありません。また高さが2行しかないウィンドウは、同時にモードラインとヘッダーラインを表示できません。そのようなウィンドウがモードラインをもつ場合にはヘッダーラインは表示されません。"

#. type: subsection
#: original_texis/modes.texi:2678
#, no-wrap
msgid "Emulating Mode Line Formatting"
msgstr "Emulating Mode Line Formatting"

#. type: Plain text
#: original_texis/modes.texi:2683
msgid "You can use the function @code{format-mode-line} to compute the text that would appear in a mode line or header line based on a certain mode line construct."
msgstr "関数@code{format-mode-line}を使用して、特定のモードライン構文にもとづいてモードラインやヘッダーラインに表示されるテキストを計算できます。"

#. type: defun
#: original_texis/modes.texi:2684
#, no-wrap
msgid "format-mode-line format &optional face window buffer"
msgstr "format-mode-line format &optional face window buffer"

#. type: defun
#: original_texis/modes.texi:2691
msgid "This function formats a line of text according to @var{format} as if it were generating the mode line for @var{window}, but it also returns the text as a string.  The argument @var{window} defaults to the selected window.  If @var{buffer} is non-@code{nil}, all the information used is taken from @var{buffer}; by default, it comes from @var{window}'s buffer."
msgstr "この関数は、あたかも@var{window}にたいしてモードラインを生成するかのように@var{format}に応じてテキスト行をフォーマットするが、さらにそのテキストを文字列としてリターンする。引数@var{window}のデフォルトは選択されたウィンドウ。@var{buffer}が非@code{nil}なら、使用されるすべての情報は@var{buffer}から取得される。デフォルトでは@var{window}のバッファーから取得される。"

#. type: defun
#: original_texis/modes.texi:2700
msgid "The value string normally has text properties that correspond to the faces, keymaps, etc., that the mode line would have.  Any character for which no @code{face} property is specified by @var{format} gets a default value determined by @var{face}.  If @var{face} is @code{t}, that stands for either @code{mode-line} if @var{window} is selected, otherwise @code{mode-line-inactive}.  If @var{face} is @code{nil} or omitted, that stands for the default face.  If @var{face} is an integer, the value returned by this function will have no text properties."
msgstr "文字列の値は通常はモードラインがもつであろうフェイス、キーマップ等に対応したテキストプロパティをもつ。@var{format}により指定される@code{face}プロパティをもたないすべての文字は、@var{face}により決定されるデフォルト値を取得する。@var{face}が@code{t}の場合は@var{window}が選択されていれば@code{mode-line}、それ以外は@code{mode-line-inactive}であることを意味する。@var{face}が@code{nil}または省略された場合はデフォルトのフェイスを意味する。@var{face}が整数なら、この関数はテキストプロパティをもたない値をリターンするだろう。"

#. type: defun
#: original_texis/modes.texi:2704
msgid "You can also specify other valid faces as the value of @var{face}.  If specified, that face provides the @code{face} property for characters whose face is not specified by @var{format}."
msgstr "@var{face}の値として他の有効なフェイスを指定することもできる。指定された場合、それは@var{format}でフェイスを指定されていない文字の@code{face}プロパティのフェイスを提供する。"

#. type: defun
#: original_texis/modes.texi:2710
msgid "Note that using @code{mode-line}, @code{mode-line-inactive}, or @code{header-line} as @var{face} will actually redisplay the mode line or the header line, respectively, using the current definitions of the corresponding face, in addition to returning the formatted string.  (Other faces do not cause redisplay.)"
msgstr "@var{face}として@code{mode-line}、@code{mode-line-inactive}、@code{header-line}を使用することにより、フォーマットされた文字列のリターンに加えて、対応するフェイスのカレント定義を使用して実際にモードラインやヘッダーラインの再描画が行われることに注意(他のフェイスでは再描画は行われない)。"

#. type: defun
#: original_texis/modes.texi:2717
msgid "For example, @code{(format-mode-line header-line-format)} returns the text that would appear in the selected window's header line (@code{\"\"} if it has no header line).  @code{(format-mode-line header-line-format 'header-line)} returns the same text, with each character carrying the face that it will have in the header line itself, and also redraws the header line."
msgstr "たとえば@code{(format-mode-line header-line-format)}は選択されたウィンドウに表示されるテキスト(ヘッダーラインがない場合は@code{\"\"})をリターンするだろう。@code{(format-mode-line header-line-format 'header-line)}は、各文字がヘッダーライン内でもつであろうフェイスをもつ同じテキストをリターンするとともに、それに加えてヘッダーラインの再描画も行う。"

#. type: Plain text
#: original_texis/modes.texi:2730
msgid "@dfn{Imenu} is a feature that lets users select a definition or section in the buffer, from a menu which lists all of them, to go directly to that location in the buffer.  Imenu works by constructing a buffer index which lists the names and buffer positions of the definitions, or other named portions of the buffer; then the user can choose one of them and move point to it.  Major modes can add a menu bar item to use Imenu using @code{imenu-add-to-menubar}."
msgstr "@dfn{Imenu}とはバッファー内の定義やセクションをすべてリストするメニューをユーザーが選択することによって、バッファー内の該当箇所に直接移動する機能です。Imenuは定義(またはバッファーのその他の名前つき範囲)の名前とその定義のバッファー内での位置をリストするバッファーインデックスを構築して、ユーザーがそれを選択すればポイントをそこに移動できるようにして機能します。メジャーモードは@code{imenu-add-to-menubar}を使用して、メニューバーアイテムを追加することができます。"

#. type: deffn
#: original_texis/modes.texi:2731
#, no-wrap
msgid "Command imenu-add-to-menubar name"
msgstr "Command imenu-add-to-menubar name"

#. type: deffn
#: original_texis/modes.texi:2734
msgid "This function defines a local menu bar item named @var{name} to run Imenu."
msgstr "この関数はImenuを実行するための@var{name}という名前のローカルメニューバーを定義する。"

#. type: Plain text
#: original_texis/modes.texi:2740
msgid "The user-level commands for using Imenu are described in the Emacs Manual (@pxref{Imenu,, Imenu, emacs, the Emacs Manual}).  This section explains how to customize Imenu's method of finding definitions or buffer portions for a particular major mode."
msgstr "Imenuを使用するためのユーザーレベルコマンドはEmacsマニュアルで説明されています(@ref{Imenu,, Imenu, emacs, the Emacs Manual}を参照)。このセクションでは特定のメジャーモードにたいして定義や名前つき範囲を見つけるImenuメソッドのカスタマイズ方法を説明します。"

#. type: Plain text
#: original_texis/modes.texi:2743
msgid "The usual and simplest way is to set the variable @code{imenu-generic-expression}:"
msgstr "変数@code{imenu-generic-expression}をセットするのが通常、かつもっともシンプルな方法です:"

#. type: defvar
#: original_texis/modes.texi:2744
#, no-wrap
msgid "imenu-generic-expression"
msgstr "imenu-generic-expression"

#. type: defvar
#: original_texis/modes.texi:2748
msgid "This variable, if non-@code{nil}, is a list that specifies regular expressions for finding definitions for Imenu.  Simple elements of @code{imenu-generic-expression} look like this:"
msgstr "この変数が非@code{nil}なら、それはImenuにたいして定義を探すための正規表現を指定するリストである。シンプルな@code{imenu-generic-expression}の要素は以下のようになる:"

#. type: example
#: original_texis/modes.texi:2751
#, no-wrap
msgid "(@var{menu-title} @var{regexp} @var{index})\n"
msgstr "(@var{menu-title} @var{regexp} @var{index})\n"

#. type: defvar
#: original_texis/modes.texi:2758
msgid "Here, if @var{menu-title} is non-@code{nil}, it says that the matches for this element should go in a submenu of the buffer index; @var{menu-title} itself specifies the name for the submenu.  If @var{menu-title} is @code{nil}, the matches for this element go directly in the top level of the buffer index."
msgstr "ここで@var{menu-title}が非@code{nil}なら、それはこの要素にたいするマッチがバッファーインデックスのサブメニューとなることを指示する。@var{menu-title}自体はそのサブメニューにたいして名前を指定する。@var{menu-title}が@code{nil}なら、この要素にたいするマッチは直接トップレベルのバッファーインデックスとなる。"

#. type: defvar
#: original_texis/modes.texi:2764
msgid "The second item in the list, @var{regexp}, is a regular expression (@pxref{Regular Expressions}); anything in the buffer that it matches is considered a definition, something to mention in the buffer index.  The third item, @var{index}, is a non-negative integer that indicates which subexpression in @var{regexp} matches the definition's name."
msgstr "このリストの2つ目の要素@var{regexp}は正規表現である(@ref{Regular Expressions}を参照)。これはバッファー内でこれにマッチするものは定義、あるいはバッファーインデックス内に記載すべき何かであると判断される。3つ目の要素@var{index}は0以上の整数なら、@var{regexp}内の部分式(subexpression)が定義名にマッチすることを示す。"

#. type: defvar
#: original_texis/modes.texi:2766
msgid "An element can also look like this:"
msgstr "以下のような要素もある:"

#. type: example
#: original_texis/modes.texi:2769
#, no-wrap
msgid "(@var{menu-title} @var{regexp} @var{index} @var{function} @var{arguments}@dots{})\n"
msgstr "(@var{menu-title} @var{regexp} @var{index} @var{function} @var{arguments}@dots{})\n"

#. type: defvar
#: original_texis/modes.texi:2774
msgid "Each match for this element creates an index item, and when the index item is selected by the user, it calls @var{function} with arguments consisting of the item name, the buffer position, and @var{arguments}."
msgstr "この要素にたいする各マッチはインデックスアイテムを作成して、ユーザーにがそのインデックスアイテムを選択したときアイテム名、バッファー位置、および@var{arguments}から構成される引数で@var{function}を呼び出す。"

#. type: defvar
#: original_texis/modes.texi:2777
msgid "For Emacs Lisp mode, @code{imenu-generic-expression} could look like this:"
msgstr "Emacs Lispモードでは@code{imenu-generic-expression}は以下のようになるだろう:"

#. type: group
#: original_texis/modes.texi:2783
#, no-wrap
msgid ""
"((nil \"^\\\\s-*(def\\\\(un\\\\|subst\\\\|macro\\\\|advice\\\\)\\\n"
"\\\\s-+\\\\([-A-Za-z0-9+]+\\\\)\" 2)\n"
msgstr ""
"((nil \"^\\\\s-*(def\\\\(un\\\\|subst\\\\|macro\\\\|advice\\\\)\\\n"
"\\\\s-+\\\\([-A-Za-z0-9+]+\\\\)\" 2)\n"

#. type: group
#: original_texis/modes.texi:2787
#, no-wrap
msgid ""
" (\"*Vars*\" \"^\\\\s-*(def\\\\(var\\\\|const\\\\)\\\n"
"\\\\s-+\\\\([-A-Za-z0-9+]+\\\\)\" 2)\n"
msgstr ""
" (\"*Vars*\" \"^\\\\s-*(def\\\\(var\\\\|const\\\\)\\\n"
"\\\\s-+\\\\([-A-Za-z0-9+]+\\\\)\" 2)\n"

#. type: group
#: original_texis/modes.texi:2793
#, no-wrap
msgid ""
" (\"*Types*\"\n"
"  \"^\\\\s-*\\\n"
"(def\\\\(type\\\\|struct\\\\|class\\\\|ine-condition\\\\)\\\n"
"\\\\s-+\\\\([-A-Za-z0-9+]+\\\\)\" 2))\n"
msgstr ""
" (\"*Types*\"\n"
"  \"^\\\\s-*\\\n"
"(def\\\\(type\\\\|struct\\\\|class\\\\|ine-condition\\\\)\\\n"
"\\\\s-+\\\\([-A-Za-z0-9+]+\\\\)\" 2))\n"

#. type: defvar
#: original_texis/modes.texi:2797 original_texis/modes.texi:2806
#: original_texis/modes.texi:2838 original_texis/modes.texi:2853
#: original_texis/modes.texi:2862 original_texis/modes.texi:2910
msgid "Setting this variable makes it buffer-local in the current buffer."
msgstr "この変数はセットによりカレントバッファーにたいしてバッファーローカルになる。"

#. type: defvar
#: original_texis/modes.texi:2799
#, no-wrap
msgid "imenu-case-fold-search"
msgstr "imenu-case-fold-search"

#. type: defvar
#: original_texis/modes.texi:2804
msgid "This variable controls whether matching against the regular expressions in the value of @code{imenu-generic-expression} is case-sensitive: @code{t}, the default, means matching should ignore case."
msgstr "この変数は@code{imenu-generic-expression}の値中の正規表現マッチがcase(大文字小文字)を区別するかどうかを制御する。@code{t}(デフォルト)ならcaseの違いを無視することを意味する。"

#. type: defvar
#: original_texis/modes.texi:2808
#, no-wrap
msgid "imenu-syntax-alist"
msgstr "imenu-syntax-alist"

#. type: defvar
#: original_texis/modes.texi:2812
msgid "This variable is an alist of syntax table modifiers to use while processing @code{imenu-generic-expression}, to override the syntax table of the current buffer.  Each element should have this form:"
msgstr "この変数は@code{imenu-generic-expression}処理中に、カレントバッファーの構文テーブルをオーバーライドするために使用する構文テーブル変更用のalist。このalistの各要素は以下の形式をもつこと:"

#. type: example
#: original_texis/modes.texi:2815
#, no-wrap
msgid "(@var{characters} . @var{syntax-description})\n"
msgstr "(@var{characters} . @var{syntax-description})\n"

#. type: defvar
#: original_texis/modes.texi:2821
msgid "The @sc{car}, @var{characters}, can be either a character or a string.  The element says to give that character or characters the syntax specified by @var{syntax-description}, which is passed to @code{modify-syntax-entry} (@pxref{Syntax Table Functions})."
msgstr "@sc{car}の@var{characters}には文字か文字列を指定できる。この要素はその文字か文字列が@var{syntax-description}により指定される構文であることを示し、@code{modify-syntax-entry}に渡される(@ref{Syntax Table Functions}を参照)。"

#. type: defvar
#: original_texis/modes.texi:2826
msgid "This feature is typically used to give word syntax to characters which normally have symbol syntax, and thus to simplify @code{imenu-generic-expression} and speed up matching.  For example, Fortran mode uses it this way:"
msgstr "典型的にはこの機能はシンボル構文(symbol syntax)をもつ文字にたいして単語構文(word syntax)を与えるために通常は使用され、それにより@code{imenu-generic-expression}が単純になってマッチングのスピードも向上する。たとえばFortranモードでは以下のようにこれを使用する:"

#. type: example
#: original_texis/modes.texi:2829
#, no-wrap
msgid "(setq imenu-syntax-alist '((\"_$\" . \"w\")))\n"
msgstr "(setq imenu-syntax-alist '((\"_$\" . \"w\")))\n"

#. type: defvar
#: original_texis/modes.texi:2836
msgid "The @code{imenu-generic-expression} regular expressions can then use @samp{\\\\sw+} instead of @samp{\\\\(\\\\sw\\\\|\\\\s_\\\\)+}.  Note that this technique may be inconvenient when the mode needs to limit the initial character of a name to a smaller set of characters than are allowed in the rest of a name."
msgstr "@code{imenu-generic-expression}の正規表現は、@samp{\\\\(\\\\sw\\\\|\\\\s_\\\\)+}のかわりに、@samp{\\\\sw+}を使用できる。このテクニックは名前をモード名として許容されるより短い頭文字に制限する必要があるときは不便かもしれないことに注意。"

#. type: Plain text
#: original_texis/modes.texi:2843
msgid "Another way to customize Imenu for a major mode is to set the variables @code{imenu-prev-index-position-function} and @code{imenu-extract-index-name-function}:"
msgstr "あるメジャーモードにたいしてImenuをカスタマイズする別の方法として@code{imenu-prev-index-position-function}と@code{imenu-extract-index-name-function}があります:"

#. type: defvar
#: original_texis/modes.texi:2844
#, no-wrap
msgid "imenu-prev-index-position-function"
msgstr "imenu-prev-index-position-function"

#. type: defvar
#: original_texis/modes.texi:2851
msgid "If this variable is non-@code{nil}, its value should be a function that finds the next definition to put in the buffer index, scanning backward in the buffer from point.  It should return @code{nil} if it doesn't find another definition before point.  Otherwise it should leave point at the place it finds a definition and return any non-@code{nil} value."
msgstr "この変数が非@code{nil}なら、その値はポイント位置からバッファーを後方にスキャンしてバッファーインデックスに配置すべき次の定義を探すための関数であること。そしてポイントより前に他の定義が見つからなければ@code{nil}をリターンすること。見つかった場合には定義を見つけた場所にポイントを残して任意の非@code{nil}値をリターンすること。"

#. type: defvar
#: original_texis/modes.texi:2855
#, no-wrap
msgid "imenu-extract-index-name-function"
msgstr "imenu-extract-index-name-function"

#. type: defvar
#: original_texis/modes.texi:2860
msgid "If this variable is non-@code{nil}, its value should be a function to return the name for a definition, assuming point is in that definition as the @code{imenu-prev-index-position-function} function would leave it."
msgstr "この変数が非@code{nil}なら、その値はポイントが定義中にある(@code{imenu-prev-index-position-function}関数がポイントを残す場所)という想定にもとづき、その定義の名前をリターンする関数であること。"

#. type: Plain text
#: original_texis/modes.texi:2866
msgid "The last way to customize Imenu for a major mode is to set the variable @code{imenu-create-index-function}:"
msgstr "メジャーモードにたいしてImenuをカスタマイズするための最後の方法は変数@code{imenu-create-index-function}のセットです:"

#. type: defvar
#: original_texis/modes.texi:2867
#, no-wrap
msgid "imenu-create-index-function"
msgstr "imenu-create-index-function"

#. type: defvar
#: original_texis/modes.texi:2872
msgid "This variable specifies the function to use for creating a buffer index.  The function should take no arguments, and return an index alist for the current buffer.  It is called within @code{save-excursion}, so where it leaves point makes no difference."
msgstr "この変数はバッファーインデックスを作成するために使用する関数を指定する。この関数は引数がを受け取らず、カレントバッファーにたいするインデックスalist(index alist)をリターンすること。この関数は@code{save-excursion}内で呼び出されるので、どこにポイントを残しても違いはない。"

#. type: defvar
#: original_texis/modes.texi:2875
msgid "The index alist can have three types of elements.  Simple elements look like this:"
msgstr "このインデックスalistは3つのタイプの要素をもつことができる。以下はシンプル要素(simple element)の例:"

#. type: example
#: original_texis/modes.texi:2878
#, no-wrap
msgid "(@var{index-name} . @var{index-position})\n"
msgstr "(@var{index-name} . @var{index-position})\n"

#. type: defvar
#: original_texis/modes.texi:2882
msgid "Selecting a simple element has the effect of moving to position @var{index-position} in the buffer.  Special elements look like this:"
msgstr "シンプル要素の選択はそのバッファー内の位置@var{index-position}に移動する効果をもつ。スペシャル要素(special element)は以下のようなもの:"

#. type: example
#: original_texis/modes.texi:2885
#, no-wrap
msgid "(@var{index-name} @var{index-position} @var{function} @var{arguments}@dots{})\n"
msgstr "(@var{index-name} @var{index-position} @var{function} @var{arguments}@dots{})\n"

#. type: defvar
#: original_texis/modes.texi:2888
msgid "Selecting a special element performs:"
msgstr "スペシャル要素の選択により以下が処理される:"

#. type: example
#: original_texis/modes.texi:2892
#, no-wrap
msgid ""
"(funcall @var{function}\n"
"         @var{index-name} @var{index-position} @var{arguments}@dots{})\n"
msgstr ""
"(funcall @var{function}\n"
"         @var{index-name} @var{index-position} @var{arguments}@dots{})\n"

#. type: defvar
#: original_texis/modes.texi:2895
msgid "A nested sub-alist element looks like this:"
msgstr "ネストされたサブalist要素(nested sub-alist element)は以下のようなもの:"

#. type: example
#: original_texis/modes.texi:2898
#, no-wrap
msgid "(@var{menu-title} . @var{sub-alist})\n"
msgstr "(@var{menu-title} . @var{sub-alist})\n"

#. type: defvar
#: original_texis/modes.texi:2901
msgid "It creates the submenu @var{menu-title} specified by @var{sub-alist}."
msgstr "これは@var{sub-alist}により指定されるサブメニュー@var{menu-title}を作成する。"

#. type: defvar
#: original_texis/modes.texi:2908
msgid "The default value of @code{imenu-create-index-function} is @code{imenu-default-create-index-function}.  This function calls the value of @code{imenu-prev-index-position-function} and the value of @code{imenu-extract-index-name-function} to produce the index alist.  However, if either of these two variables is @code{nil}, the default function uses @code{imenu-generic-expression} instead."
msgstr "@code{imenu-create-index-function}のデフォルト値は@code{imenu-default-create-index-function}。この関数はインデックスalistを生成するために@code{imenu-prev-index-position-function}の値と@code{imenu-extract-index-name-function}の値を呼び出す。しかしこれら2つ変数のいずれかが@code{nil}なら、デフォルト関数はかわりに@code{imenu-generic-expression}を使用する。"

#. type: Plain text
#: original_texis/modes.texi:2914
msgid "If built with tree-sitter, Emacs can automatically generate an Imenu index if the major mode sets relevant variables."
msgstr "tree-sitterとともにEmacsをビルドしていてメジャーモードが関連する変数をセットしていれば、自動的にImenuのインデックスが生成されます。"

#. type: defvar
#: original_texis/modes.texi:2915
#, no-wrap
msgid "treesit-simple-imenu-settings"
msgstr "treesit-simple-imenu-settings"

#. type: defvar
#: original_texis/modes.texi:2919
msgid "This variable instructs Emacs how to generate Imenu indexes.  It should be a list of @w{(@var{category} @var{regexp} @var{pred} @var{name-fn})}."
msgstr "これはどのようにImenuインデックスを生成するかをEmacsに指示するための変数である。@w{(@var{category} @var{regexp} @var{pred} @var{name-fn})}という形式のリストであること。"

#. type: defvar
#: original_texis/modes.texi:2926
msgid "@var{category} should be the name of a category, like \"Function\", \"Class\", etc.  @var{regexp} should be a regexp matching the type of nodes that belong to @var{category}.  @var{pred} should be either @code{nil} or a function that takes a node as the argument.  It should return non-@code{nil} if the node is a valid node for @var{category}, or @code{nil} if not."
msgstr "@var{category}は\"Function\"、\"Class\"等のようなカテゴリー名、@var{regexp}は@var{category}に属すノードタイプにマッチするregexp、@var{pred}は@code{nil}、または引数としてノードを受け取る関数であること。この関数はノードが@var{category}にたいして有効なら非@code{nil}、そうでなければ@code{nil}をリターンする必要がある。"

#. type: defvar
#: original_texis/modes.texi:2930
msgid "@var{category} could also be @code{nil}, in which case the entries matched by @var{regexp} and @var{pred} are not grouped under @var{category}."
msgstr "@var{category}は@code{nil}でもよく、その場合には@var{regexp}と@var{regexp}でマッチされたエントリーは@var{category}下にグループ化されない。"

#. type: defvar
#: original_texis/modes.texi:2936
msgid "@var{name-fn} should be either @code{nil} or a function that takes a defun node and returns the name of that defun, e.g., the function name for a function definition.  If @var{name-fn} is @code{nil}, @code{treesit-defun-name} (@pxref{Tree-sitter Major Modes}) is used instead."
msgstr "@var{name-fn}は@code{nil}、あるいはdefunノードを受け取りそのdefunの名前(関数定義にたいする関数名)をリターンする関数のいずれかであること。@var{name-fn}が@code{nil}の場合には、かわりに@code{treesit-defun-name} (@ref{Tree-sitter Major Modes}を参照)が使用される。"

#. type: defvar
#: original_texis/modes.texi:2939
msgid "@code{treesit-major-mode-setup} (@pxref{Tree-sitter Major Modes})  automatically sets up Imenu if this variable is non-@code{nil}."
msgstr "この変数が非@code{nil}の場合には、@code{treesit-major-mode-setup} (@ref{Tree-sitter Major Modes}を参照)が自動的にImenuをセットアップする。"

#. type: cindex
#: original_texis/modes.texi:2943
#, no-wrap
msgid "Font Lock mode"
msgstr "Font Lock mode"

#. type: cindex
#: original_texis/modes.texi:2944
#, no-wrap
msgid "syntax highlighting and coloring"
msgstr "syntax highlighting and coloring"

#. type: Plain text
#: original_texis/modes.texi:2952
msgid "@dfn{Font Lock mode} is a buffer-local minor mode that automatically attaches @code{face} properties to certain parts of the buffer based on their syntactic role.  How it parses the buffer depends on the major mode; most major modes define syntactic criteria for which faces to use in which contexts.  This section explains how to customize Font Lock for a particular major mode."
msgstr "@dfn{Font Lockモード}とはバッファーの特定の部分にたいして、それらの構文的役割(syntactic role)にもとづき自動的に@code{face}プロパティをアタッチするバッファーローカルなマイナーモードです。このモードがバッファーをパースする方法はそのメジャーモードに依存します。ほとんどのメジャーモードは、どのコンテキストでどのフェイスを使用するかにたいして構文的条件(syntactic criteria)を定義します。このセクションでは特定のメジャーモードにたいしてFont Lockをカスタマイズする方法を説明します。"

#. type: Plain text
#: original_texis/modes.texi:2961
msgid "Font Lock mode finds text to highlight in three ways: through parsing based on a full-blown parser (usually, via an external library or program), through syntactic parsing based on the Emacs's built-in syntax table, or through searching (usually for regular expressions).  If enabled, parser-based fontification happens first (@pxref{Parser-based Font Lock}).  Syntactic fontification happens next; it finds comments and string constants and highlights them.  Search-based fontification happens last."
msgstr "Font Lockモードは(通常は外部のライブラリーやプログラムを介した)本格的なパーサー、Emacs組み込みの構文テーブルにもとづく構文解析、(通常は正規表現にたいする)検索という3つの手法によりハイライトするテキストを見つけます。有効になっていればまずパーサーベース(@ref{Parser-based Font Lock}を参照)のフォント表示、次にコメントと文字列定数を見つけてハイライトする構文的なフォント表示、最後に検索ベースのフォント表示が行われます。"

#. type: subsection
#: original_texis/modes.texi:2976 original_texis/modes.texi:2978
#: original_texis/modes.texi:2979
#, no-wrap
msgid "Font Lock Basics"
msgstr "Font Lock Basics"

#. type: menuentry
#: original_texis/modes.texi:2976
msgid "Overview of customizing Font Lock."
msgstr "Font Lockカスタマイズの概要。"

#. type: subsection
#: original_texis/modes.texi:2976 original_texis/modes.texi:3100
#: original_texis/modes.texi:3101
#, no-wrap
msgid "Search-based Fontification"
msgstr "Search-based Fontification"

#. type: menuentry
#: original_texis/modes.texi:2976
msgid "Fontification based on regexps."
msgstr "正規表現にもとづくフォント表示。"

#. type: node
#: original_texis/modes.texi:2976 original_texis/modes.texi:3331
#, no-wrap
msgid "Customizing Keywords"
msgstr "Customizing Keywords"

#. type: menuentry
#: original_texis/modes.texi:2976
msgid "Customizing search-based fontification."
msgstr "検索ベースフォント表示のカスタマイズ。"

#. type: subsection
#: original_texis/modes.texi:2976 original_texis/modes.texi:3501
#: original_texis/modes.texi:3502
#, no-wrap
msgid "Other Font Lock Variables"
msgstr "Other Font Lock Variables"

#. type: menuentry
#: original_texis/modes.texi:2976
msgid "Additional customization facilities."
msgstr "追加のカスタマイズ機能。"

#. type: subsection
#: original_texis/modes.texi:2976 original_texis/modes.texi:3613
#: original_texis/modes.texi:3614
#, no-wrap
msgid "Levels of Font Lock"
msgstr "Levels of Font Lock"

#. type: menuentry
#: original_texis/modes.texi:2976
msgid "Each mode can define alternative levels so that the user can select more or less."
msgstr "多なりとも少ユーザーが選択できるように、それぞれのモードは代替レベルを定義できる。"

#. type: subsection
#: original_texis/modes.texi:2976 original_texis/modes.texi:3645
#: original_texis/modes.texi:3646
#, no-wrap
msgid "Precalculated Fontification"
msgstr "Precalculated Fontification"

#. type: menuentry
#: original_texis/modes.texi:2976
msgid "How Lisp programs that produce the buffer contents can also specify how to fontify it."
msgstr "バッファーコンテンツを生成するLispプログラムが、どのようにしてそれをフォント表示する方法も指定できるか。"

#. type: subsection
#: original_texis/modes.texi:2976 original_texis/modes.texi:3669
#: original_texis/modes.texi:3670
#, no-wrap
msgid "Faces for Font Lock"
msgstr "Faces for Font Lock"

#. type: menuentry
#: original_texis/modes.texi:2976
msgid "Special faces specifically for Font Lock."
msgstr "Font Lockにたいする具体的な特殊フェイス。"

#. type: subsection
#: original_texis/modes.texi:2976 original_texis/modes.texi:3838
#: original_texis/modes.texi:3839
#, no-wrap
msgid "Syntactic Font Lock"
msgstr "Syntactic Font Lock"

#. type: menuentry
#: original_texis/modes.texi:2976
msgid "Fontification based on syntax tables."
msgstr "構文テーブルにもとづくフォント表示。"

#. type: node
#: original_texis/modes.texi:2976 original_texis/modes.texi:3902
#, no-wrap
msgid "Multiline Font Lock"
msgstr "Multiline Font Lock"

#. type: menuentry
#: original_texis/modes.texi:2976
msgid "How to coerce Font Lock into properly highlighting multiline constructs."
msgstr "Font Lockに複数行構文の正しいハイライトを強制する方法。"

#. type: subsection
#: original_texis/modes.texi:2976 original_texis/modes.texi:4060
#: original_texis/modes.texi:4061
#, no-wrap
msgid "Parser-based Font Lock"
msgstr "Parser-based Font Lock"

#. type: menuentry
#: original_texis/modes.texi:2976
msgid "Use parse data for fontification."
msgstr "解析データを用いたフォント表示。"

#. type: Plain text
#: original_texis/modes.texi:2991
msgid "The Font Lock functionality is based on several basic functions.  Each of these calls the function specified by the corresponding variable.  This indirection allows major and minor modes to modify the way fontification works in the buffers of that mode, and even use the Font Lock mechanisms for features that have nothing to do with fontification.  (This is why the description below says ``should'' when it describes what the functions do: the mode can customize the values of the corresponding variables to do something entirely different.)  The variables mentioned below are described in @ref{Other Font Lock Variables}."
msgstr "Font Lock機能はいくつかの基本的な関数にもとづきます。これらはそれぞれ対応する変数により指定される関数を呼び出します。このインダイレクションによりメジャーモードとマイナーモードはそのモードにあるバッファーのフォント表示が機能する方法を変更したり、フォント表示を何も行わない機能にたいしてさえFont Lockメカニズムを使用することが可能になります(以下の記述で関数が何を行うか説明する際に``should(すること、するべき)''と表現しているのはこれが理由。モードは完全に異なる何かを行うように対応する変数をカスタマイズできる)。以下で言及される変数は@ref{Other Font Lock Variables}で説明されています。"

#. type: defvar
#: original_texis/modes.texi:2993 original_texis/modes.texi:5045
msgid "@ftable @code"
msgstr "@ftable @code"

#. type: item
#: original_texis/modes.texi:2993
#, no-wrap
msgid "font-lock-fontify-buffer"
msgstr "font-lock-fontify-buffer"

#. type: Plain text
#: original_texis/modes.texi:2997
msgid "This function should fontify the current buffer's accessible portion, by calling the function specified by @code{font-lock-fontify-buffer-function}."
msgstr "この関数は@code{font-lock-fontify-buffer-function}で指定される関数の呼び出しにより、カレントバッファーのアクセス可能範囲をフォント表示すること。"

#. type: item
#: original_texis/modes.texi:2998
#, no-wrap
msgid "font-lock-unfontify-buffer"
msgstr "font-lock-unfontify-buffer"

#. type: Plain text
#: original_texis/modes.texi:3001
msgid "Used when turning Font Lock off to remove the fontification.  Calls the function specified by @code{font-lock-unfontify-buffer-function}."
msgstr "フォント表示削除のためにFont Lockをオフに切り替える際に使用する。@code{font-lock-unfontify-buffer-function}で指定される関数を呼び出す。"

#. type: item
#: original_texis/modes.texi:3002
#, no-wrap
msgid "font-lock-fontify-region beg end &optional loudly"
msgstr "font-lock-fontify-region beg end &optional loudly"

#. type: Plain text
#: original_texis/modes.texi:3007
msgid "Should fontify the region between @var{beg} and @var{end}.  If @var{loudly} is non-@code{nil}, should display status messages while fontifying.  Calls the function specified by @code{font-lock-fontify-region-function}."
msgstr "@var{beg}と@var{end}の間のリージョンをフォント表示すること。@var{loudly}が非@code{nil}なら、フォント表示中にステータスメッセージを表示すること。@code{font-lock-fontify-region-function}で指定される関数を呼び出す。"

#. type: item
#: original_texis/modes.texi:3008
#, no-wrap
msgid "font-lock-unfontify-region beg end"
msgstr "font-lock-unfontify-region beg end"

#. type: Plain text
#: original_texis/modes.texi:3012
msgid "Should remove fontification from the region between @var{beg} and @var{end}.  Calls the function specified by @code{font-lock-unfontify-region-function}."
msgstr "@var{beg}と@var{end}の間のリージョンのフォント表示を削除すること。@code{font-lock-unfontify-region-function}で指定される関数を呼び出す。"

#. type: item
#: original_texis/modes.texi:3013
#, no-wrap
msgid "font-lock-flush &optional beg end"
msgstr "font-lock-flush &optional beg end"

#. type: Plain text
#: original_texis/modes.texi:3019
msgid "This function should mark the fontification of the region between @var{beg} and @var{end} as outdated.  If not specified or @code{nil}, @var{beg} and @var{end} default to the beginning and end of the buffer's accessible portion.  Calls the function specified by @code{font-lock-flush-function}."
msgstr "この関数は@var{beg}と@var{end}の間のリージョンのフォント表示を期限切れ(outdated)とマークすること。@var{beg}と@var{end}が未指定または@code{nil}なら、デフォルトはそのバッファーのアクセス可能範囲の先頭と終端。@code{font-lock-flush-function}で指定される関数を呼び出す。"

#. type: item
#: original_texis/modes.texi:3020
#, no-wrap
msgid "font-lock-ensure &optional beg end"
msgstr "font-lock-ensure &optional beg end"

#. type: Plain text
#: original_texis/modes.texi:3026
msgid "This function should make sure the region between @var{beg} and @var{end} has been fontified.  The optional arguments @var{beg} and @var{end} default to the beginning and the end of the buffer's accessible portion.  Calls the function specified by @code{font-lock-ensure-function}."
msgstr "この関数は@var{beg}と@var{end}の間のリージョンのフォント表示を保証すること。オプション引数@var{beg}と@var{end}のデフォルトは、そのバッファーのアクセス可能範囲の先頭と終端。@code{font-lock-ensure-function}で指定される関数を呼び出す。"

#. type: item
#: original_texis/modes.texi:3027
#, no-wrap
msgid "font-lock-debug-fontify"
msgstr "font-lock-debug-fontify"

#. type: Plain text
#: original_texis/modes.texi:3032
msgid "This is a convenience command meant to be used when developing font locking for a mode, and should not be called from Lisp code.  It recomputes all the relevant variables and then calls @code{font-lock-fontify-region} on the entire buffer."
msgstr "これはモード用のFont Lock開発時の使用を意図した利便的なコマンドであり、Lispコードから呼び出すべきではありません。これは関連するすべての変数を再計算してから、バッファー全体にたいして@code{font-lock-fontify-region}を呼び出します。"

#. type: Plain text
#: original_texis/modes.texi:3039
msgid "There are several variables that control how Font Lock mode highlights text.  But major modes should not set any of these variables directly.  Instead, they should set @code{font-lock-defaults} as a buffer-local variable.  The value assigned to this variable is used, if and when Font Lock mode is enabled, to set all the other variables."
msgstr "Font Lockモードのテキストのハイライト方法を制御する変数がいくつかあります。しかしメジャーモードはこれらの変数を直接セットするべきではありません。かわりにメジャーモードはバッファーローカル変数として@code{font-lock-defaults}をセットするべきです。Font Lockモードが有効なときは、他のすべての変数をセットするためにこの変数に割り当てられた値が使用されます。"

#. type: defvar
#: original_texis/modes.texi:3040
#, no-wrap
msgid "font-lock-defaults"
msgstr "font-lock-defaults"

#. type: defvar
#: original_texis/modes.texi:3047
msgid "This variable is set by modes to specify how to fontify text in that mode.  It automatically becomes buffer-local when set.  If its value is @code{nil}, Font Lock mode does no highlighting, and you can use the @samp{Faces} menu (under @samp{Edit} and then @samp{Text Properties} in the menu bar) to assign faces explicitly to text in the buffer."
msgstr "この変数はそのモード内のテキストをフォント表示する方法を指定するためにモードによりセットされる。この変数はセットした際に自動的にバッファーローカルになる。変数の値が@code{nil}ならFont Lockモードはハイライトを行わず、バッファー内のテキストに明示的にフェイスを割り当てるために@samp{Faces}メニュー(メニューバーの@samp{Edit}の下の@samp{Text Properties})を使用できる。"

#. type: defvar
#: original_texis/modes.texi:3049
msgid "If non-@code{nil}, the value should look like this:"
msgstr "非@code{nil}なら値は以下のようであること:"

#. type: example
#: original_texis/modes.texi:3053
#, no-wrap
msgid ""
"(@var{keywords} [@var{keywords-only} [@var{case-fold}\n"
" [@var{syntax-alist} @var{other-vars}@dots{}]]])\n"
msgstr ""
"(@var{keywords} [@var{keywords-only} [@var{case-fold}\n"
" [@var{syntax-alist} @var{other-vars}@dots{}]]])\n"

#. type: defvar
#: original_texis/modes.texi:3065
msgid "The first element, @var{keywords}, indirectly specifies the value of @code{font-lock-keywords} which directs search-based fontification.  It can be a symbol, a variable or a function whose value is the list to use for @code{font-lock-keywords}.  It can also be a list of several such symbols, one for each possible level of fontification.  The first symbol specifies the @samp{mode default} level of fontification, the next symbol level 1 fontification, the next level 2, and so on.  The @samp{mode default} level is normally the same as level 1.  It is used when @code{font-lock-maximum-decoration} has a @code{nil} value.  @xref{Levels of Font Lock}."
msgstr "1つ目の要素@var{keywords}は検索ベースのフォント表示を制御する@code{font-lock-keywords}の値を間接的に指定する。値にはシンボル、変数、または@code{font-lock-keywords}にたいして使用するリストが値であるような関数を指定できる。またそれぞれのシンボルがフォント表示の可能なレベルであるような、いくつかのシンボルからなるリストも指定できる。この場合には、1つ目のシンボルはフォント表示の@samp{モードデフォルト(mode default)}レベル、次のシンボルはフォント表示のレベル1、その次はレベル2、...のようになる。@samp{モードデフォルト}レベルは通常はレベル1と等しい。これは@code{font-lock-maximum-decoration}が@code{nil}値をもつとき使用される。@ref{Levels of Font Lock}を参照のこと。"

#. type: defvar
#: original_texis/modes.texi:3071
msgid "The second element, @var{keywords-only}, specifies the value of the variable @code{font-lock-keywords-only}.  If this is omitted or @code{nil}, syntactic fontification (of strings and comments) is also performed.  If this is non-@code{nil}, syntactic fontification is not performed.  @xref{Syntactic Font Lock}."
msgstr "2つ目の要素@var{keywords-only}は変数@code{font-lock-keywords-only}の値を指定する。これが省略または@code{nil}なら、(文字列とコメントの)構文的フォント表示も行われる。非@code{nil}なら構文的フォント表示は行われない。@ref{Syntactic Font Lock}を参照のこと。"

#. type: defvar
#: original_texis/modes.texi:3075
msgid "The third element, @var{case-fold}, specifies the value of @code{font-lock-keywords-case-fold-search}.  If it is non-@code{nil}, Font Lock mode ignores case during search-based fontification."
msgstr "3つ目の要素@var{case-fold}は@code{font-lock-keywords-case-fold-search}の値を指定する。非@code{nil}なら検索ベースフォント表示の間、Font Lockモードはcaseの違いを無視する。"

#. type: defvar
#: original_texis/modes.texi:3083
msgid "If the fourth element, @var{syntax-alist}, is non-@code{nil}, it should be a list of cons cells of the form @code{(@var{char-or-string} . @var{string})}.  These are used to set up a syntax table for syntactic fontification; the resulting syntax table is stored in @code{font-lock-syntax-table}.  If @var{syntax-alist} is omitted or @code{nil}, syntactic fontification uses the syntax table returned by the @code{syntax-table} function.  @xref{Syntax Table Functions}."
msgstr "4つ目の要素@var{syntax-alist}が非@code{nil}なら、それは@code{(@var{char-or-string} . @var{string})}という形式のコンスセルのリストであること。これらは構文的フォント表示にたいする構文テーブルのセットアップに使用される。結果となる構文テーブルは@code{font-lock-syntax-table}に格納される。@var{syntax-alist}が省略または@code{nil}なら、構文的フォント表示は@code{syntax-table}関数によりリターンされる構文テーブルを使用する。@ref{Syntax Table Functions}を参照のこと。"

#. type: defvar
#: original_texis/modes.texi:3091
msgid "All the remaining elements (if any) are collectively called @var{other-vars}.  Each of these elements should have the form @code{(@var{variable} . @var{value})}---which means, make @var{variable} buffer-local and then set it to @var{value}.  You can use these @var{other-vars} to set other variables that affect fontification, aside from those you can control with the first five elements.  @xref{Other Font Lock Variables}."
msgstr "(もしあれば)残りすべての要素はまとめて@var{other-vars}と呼ばれる。これらの要素はすべて@code{(@var{variable} . @var{value})}という形式をもつこと。これは@var{variable}をバッファーローカルにしてから、それに@var{value}をセットすることを意味する。これら@var{other-vars}を使用して、最初の5つの要素による制御とは別にフォント表示に影響する他の変数をセットできる。@ref{Other Font Lock Variables}を参照のこと。"

#. type: Plain text
#: original_texis/modes.texi:3099
msgid "If your mode fontifies text explicitly by adding @code{font-lock-face} properties, it can specify @code{(nil t)} for @code{font-lock-defaults} to turn off all automatic fontification.  However, this is not required; it is possible to fontify some things using @code{font-lock-face} properties and set up automatic fontification for other parts of the text."
msgstr "モードが@code{font-lock-face}プロパティ追加により明示的にテキストをフォント表示する場合には、自動的なフォント表示すべてをオフにするために@code{font-lock-defaults}に@code{(nil t)}を指定できます。しかしこれは必須ではありません。@code{font-lock-face}を使用して何かをフォント表示して、それ以外の部分のテキストを自動的にフォント表示するようにセットアップすることが可能です。"

#. type: Plain text
#: original_texis/modes.texi:3106
msgid "The variable which directly controls search-based fontification is @code{font-lock-keywords}, which is typically specified via the @var{keywords} element in @code{font-lock-defaults}."
msgstr "検索ベースのフォント表示を直接制御する変数は@code{font-lock-keywords}です。この変数は通常は@code{font-lock-defaults}内の要素@var{keywords}を通じて指定されます。"

#. type: defvar
#: original_texis/modes.texi:3107
#, no-wrap
msgid "font-lock-keywords"
msgstr "font-lock-keywords"

#. type: defvar
#: original_texis/modes.texi:3114
msgid "The value of this variable is a list of the keywords to highlight.  Lisp programs should not set this variable directly.  Normally, the value is automatically set by Font Lock mode, using the @var{keywords} element in @code{font-lock-defaults}.  The value can also be altered using the functions @code{font-lock-add-keywords} and @code{font-lock-remove-keywords} (@pxref{Customizing Keywords})."
msgstr "この変数の値はハイライトするキーワードのリスト。Lispプログラムはこの変数を直接セットしないこと。通常は@code{font-lock-defaults}内の要素@var{keywords}を使用してFont Lockモードが自動的に値をセットする。この値は関数@code{font-lock-add-keywords}と@code{font-lock-remove-keywords}を使用して変更することもできる(@ref{Customizing Keywords}を参照)。"

#. type: Plain text
#: original_texis/modes.texi:3123
msgid "Each element of @code{font-lock-keywords} specifies how to find certain cases of text, and how to highlight those cases.  Font Lock mode processes the elements of @code{font-lock-keywords} one by one, and for each element, it finds and handles all matches.  Ordinarily, once part of the text has been fontified already, this cannot be overridden by a subsequent match in the same text; but you can specify different behavior using the @var{override} element of a @var{subexp-highlighter}."
msgstr "@code{font-lock-keywords}の各要素は、特定の例に該当するテキストを見つける方法や、それらをハイライトする方法を指定します。Font Lockモードは@code{font-lock-keywords}の要素を逐次処理してマッチを探して、すべてのマッチを処理します。通常はテキストの一部はすでに一度はフォント表示されており、同じテキスト内で連続するマッチによりこれをオーバーライドすることははできません。しかし@var{subexp-highlighter}の要素@var{override}を使用して異なる挙動を指定できます。"

#. type: Plain text
#: original_texis/modes.texi:3126
msgid "Each element of @code{font-lock-keywords} should have one of these forms:"
msgstr "@code{font-lock-keywords}の各要素は以下の形式のいずれかをもつべきです:"

#. type: var{#1}
#: original_texis/modes.texi:3128
#, no-wrap
msgid "regexp"
msgstr "regexp"

#. type: table
#: original_texis/modes.texi:3131
msgid "Highlight all matches for @var{regexp} using @code{font-lock-keyword-face}.  For example,"
msgstr "@code{font-lock-keyword-face}を使用して@var{regexp}にたいするすべてのマッチをハイライトする。たとえば、"

#. type: example
#: original_texis/modes.texi:3136
#, no-wrap
msgid ""
";; @r{Highlight occurrences of the word @samp{foo}}\n"
";; @r{using @code{font-lock-keyword-face}.}\n"
"\"\\\\<foo\\\\>\"\n"
msgstr ""
";; @r{@code{font-lock-keyword-face}を使用して}\n"
";; @r{単語@samp{foo}をハイライトする}\n"
"\"\\\\<foo\\\\>\"\n"

#. type: table
#: original_texis/modes.texi:3142
msgid "Be careful when composing these regular expressions; a poorly written pattern can dramatically slow things down! The function @code{regexp-opt} (@pxref{Regexp Functions}) is useful for calculating optimal regular expressions to match several keywords."
msgstr "これらの正規表現を作成するときは慎重に行うこと。下手に記述されたパターンによりスピードが劇的に低下し得る! 関数@code{regexp-opt} (@ref{Regexp Functions}を参照)は、いくつかのキーワードとマッチするために最適な正規表現の計算に有用である。"

#. type: var{#1}
#: original_texis/modes.texi:3143
#, no-wrap
msgid "function"
msgstr "function"

#. type: table
#: original_texis/modes.texi:3146
msgid "Find text by calling @var{function}, and highlight the matches it finds using @code{font-lock-keyword-face}."
msgstr "@var{function}を呼び出すことによりテキストを探し、@code{font-lock-keyword-face}を使用して見つかったマッチをハイライトする。"

#. type: table
#: original_texis/modes.texi:3152
msgid "When @var{function} is called, it receives one argument, the limit of the search; it should begin searching at point, and not search beyond the limit.  It should return non-@code{nil} if it succeeds, and set the match data to describe the match that was found.  Returning @code{nil} indicates failure of the search."
msgstr "@var{function}は呼び出される際に1つの引数(検索のリミット)を受け取る。検索はポイント位置から開始しリミットを超えた検索は行わないこと。これは検索が成功したら非@code{nil}をリターンして見つかったマッチを表すマッチデータをセットすること。@code{nil}のリターンは検索の失敗を示す。"

#. type: table
#: original_texis/modes.texi:3157
msgid "Fontification will call @var{function} repeatedly with the same limit, and with point where the previous invocation left it, until @var{function} fails.  On failure, @var{function} need not reset point in any particular way."
msgstr "フォント表示は前の呼び出しでポイントが残された位置から同じリミットを用いて@var{function}を呼び出し、@var{function}が失敗するまで@var{function}を繰り返し呼び出すだろう。検索が失敗しても何らかの特別な方法で@var{function}がポイントをリセットする必要はない。"

#. type: item
#: original_texis/modes.texi:3158
#, no-wrap
msgid "(@var{matcher} . @var{subexp})"
msgstr "(@var{matcher} . @var{subexp})"

#. type: table
#: original_texis/modes.texi:3163
msgid "In this kind of element, @var{matcher} is either a regular expression or a function, as described above.  The @sc{cdr}, @var{subexp}, specifies which subexpression of @var{matcher} should be highlighted (instead of the entire text that @var{matcher} matched)."
msgstr "この種の要素では@var{matcher}は上述のregexpかfunctionのいずれかである。@sc{cdr}の@var{subexp}は、(@var{matcher}がマッチするテキスト全体のかわりに)@var{matcher}のどの部分式(subexpression)がハイライトされるべきかを指定する。"

#. type: example
#: original_texis/modes.texi:3168
#, no-wrap
msgid ""
";; @r{Highlight the @samp{bar} in each occurrence of @samp{fubar},}\n"
";; @r{using @code{font-lock-keyword-face}.}\n"
"(\"fu\\\\(bar\\\\)\" . 1)\n"
msgstr ""
";; @r{@code{font-lock-keyword-face}を使用して}\n"
";; @r{@samp{bar}が@samp{fubar}の一部のときに}\n"
";; @r{ハイライトする}\n"
"(\"fu\\\\(bar\\\\)\" . 1)\n"

#. type: item
#: original_texis/modes.texi:3170
#, no-wrap
msgid "(@var{matcher} . @var{facespec})"
msgstr "(@var{matcher} . @var{facespec})"

#. type: table
#: original_texis/modes.texi:3175
msgid "In this kind of element, @var{facespec} is an expression whose value specifies the face to use for highlighting.  In the simplest case, @var{facespec} is a Lisp variable (a symbol) whose value is a face name."
msgstr "この種の要素では@var{facespec}の値がハイライトに使用するフェイスを指定する。もっともシンプルな例では@var{facespec}は値がフェイス名であるようなはLisp変数(シンボル)。"

#. type: example
#: original_texis/modes.texi:3180
#, no-wrap
msgid ""
";; @r{Highlight occurrences of @samp{fubar},}\n"
";; @r{using the face which is the value of @code{fubar-face}.}\n"
"(\"fubar\" . fubar-face)\n"
msgstr ""
";; @r{@code{fubar-face}の値のフェイスを使用して}\n"
";; @r{@samp{fubar}をハイライトする}\n"
"(\"fubar\" . fubar-face)\n"

#. type: table
#: original_texis/modes.texi:3183
msgid "However, @var{facespec} can also evaluate to a list of this form:"
msgstr "しかし@var{facespec}は以下のような形式のリストに評価されてもよい:"

#. type: example
#: original_texis/modes.texi:3187
#, no-wrap
msgid ""
"(@var{subexp}\n"
"(face @var{face} @var{prop1} @var{val1} @var{prop2} @var{val2}@dots{}))\n"
msgstr ""
"(@var{subexp}\n"
"(face @var{face} @var{prop1} @var{val1} @var{prop2} @var{val2}@dots{}))\n"

#. type: table
#: original_texis/modes.texi:3198
msgid "to specify the face @var{face} and various additional text properties to put on the text that matches.  If you do this, be sure to add the other text property names that you set in this way to the value of @code{font-lock-extra-managed-props} so that the properties will also be cleared out when they are no longer appropriate.  Alternatively, you can set the variable @code{font-lock-unfontify-region-function} to a function that clears these properties.  @xref{Other Font Lock Variables}."
msgstr "これはマッチしたテキストにフェイス@var{face}を指定し、さまざまなテキストプロパティをputする。これを行う場合には、この方法によって@code{font-lock-extra-managed-props}に値をセットする、他テキストプロパティ名を確実に追加すること。そうすればそれらのプロパティが妥当性を失ったとき、それらのプロパティもクリアーされるだろう。これらのプロパティをクリアーする関数を変数@code{font-lock-unfontify-region-function}にセットすることもできる。@ref{Other Font Lock Variables}を参照のこと。"

#. type: item
#: original_texis/modes.texi:3199
#, no-wrap
msgid "(@var{matcher} . @var{subexp-highlighter})"
msgstr "(@var{matcher} . @var{subexp-highlighter})"

#. type: table
#: original_texis/modes.texi:3203
msgid "In this kind of element, @var{subexp-highlighter} is a list which specifies how to highlight matches found by @var{matcher}.  It has the form:"
msgstr "この種の要素では@var{subexp-highlighter}は@var{matcher}により見つかったマッチをハイライトする方法を指定するリストである。これは以下の形式をもつ。"

#. type: example
#: original_texis/modes.texi:3206
#, no-wrap
msgid "(@var{subexp} @var{facespec} [@var{override} [@var{laxmatch}]])\n"
msgstr "(@var{subexp} @var{facespec} [@var{override} [@var{laxmatch}]])\n"

#. type: table
#: original_texis/modes.texi:3212
msgid "The @sc{car}, @var{subexp}, is an integer specifying which subexpression of the match to fontify (0 means the entire matching text).  The second subelement, @var{facespec}, is an expression whose value specifies the face, as described above."
msgstr "@sc{car}の@var{subexp}はマッチのどの部分式をフォント表示するかを指定する整数(0はマッチしたテキスト全体を意味する)。これの2つ目の要素@var{facespec}は上述したような、値がフェイスを指定する式である。"

#. type: table
#: original_texis/modes.texi:3222
msgid "The last two values in @var{subexp-highlighter}, @var{override} and @var{laxmatch}, are optional flags.  If @var{override} is @code{t}, this element can override existing fontification made by previous elements of @code{font-lock-keywords}.  If it is @code{keep}, then each character is fontified if it has not been fontified already by some other element.  If it is @code{prepend}, the face specified by @var{facespec} is added to the beginning of the @code{font-lock-face} property.  If it is @code{append}, the face is added to the end of the @code{font-lock-face} property."
msgstr "@var{subexp-highlighter}内の残りの値@var{override}と@var{laxmatch}はオプションのフラグである。@var{override}が@code{t}なら、この要素は前の@code{font-lock-keywords}の要素により作成された既存のフォント表示をオーバーライドできる。値が@code{keep}なら、すでに他の要素によりフォント表示されていない文字がフォント表示される。値が@code{prepend}なら、@var{facespec}により指定されたフェイスが@code{font-lock-face}プロパティの先頭に追加される。値が@code{append}なら、そのフェイスが@code{font-lock-face}プロパティの最後に追加される。"

#. type: table
#: original_texis/modes.texi:3230
msgid "If @var{laxmatch} is non-@code{nil}, it means there should be no error if there is no subexpression numbered @var{subexp} in @var{matcher}.  Obviously, fontification of the subexpression numbered @var{subexp} will not occur.  However, fontification of other subexpressions (and other regexps) will continue.  If @var{laxmatch} is @code{nil}, and the specified subexpression is missing, then an error is signaled which terminates search-based fontification."
msgstr "@var{laxmatch}が非@code{nil}なら、それは@var{matcher}内で番号付けされた部分式@var{subexp}が存在しなくてもエラーにならないことを意味する。番号付けされた部分式@var{subexp}のフォント表示は当然発生しない。しかし他の部分式(と他のregexp)のフォント表示は継続されるだろう。@var{laxmatch}が@code{nil}、かつ指定された部分式が存在しなければ、エラーがシグナルされて検索ベースのフォント表示は終了する。"

#. type: table
#: original_texis/modes.texi:3232
msgid "Here are some examples of elements of this kind, and what they do:"
msgstr "以下はこのタイプの要素とそれが何を行うかの例:"

#. type: smallexample
#: original_texis/modes.texi:3238
#, no-wrap
msgid ""
";; @r{Highlight occurrences of either @samp{foo} or @samp{bar}, using}\n"
";; @r{@code{foo-bar-face}, even if they have already been highlighted.}\n"
";; @r{@code{foo-bar-face} should be a variable whose value is a face.}\n"
"(\"foo\\\\|bar\" 0 foo-bar-face t)\n"
"\n"
msgstr ""
";; @r{@code{foo-bar-face}を使用して、たとえハイライト済みでも}\n"
";; @r{@samp{foo}と@samp{bar}をハイライトする}\n"
";; @r{@code{foo-bar-face}は値がフェイスであるような変数であること}\n"
"(\"foo\\\\|bar\" 0 foo-bar-face t)\n"
"\n"

#. type: smallexample
#: original_texis/modes.texi:3243
#, no-wrap
msgid ""
";; @r{Highlight the first subexpression within each occurrence}\n"
";; @r{that the function @code{fubar-match} finds,}\n"
";; @r{using the face which is the value of @code{fubar-face}.}\n"
"(fubar-match 1 fubar-face)\n"
msgstr ""
";; @r{@code{fubar-face}の値のフェイスを使用して}\n"
";; @r{関数@code{fubar-match}が見つけた各マッチの}\n"
";; @r{最初の部分式をハイライトする}\n"
"(fubar-match 1 fubar-face)\n"

#. type: item
#: original_texis/modes.texi:3245
#, no-wrap
msgid "(@var{matcher} . @var{anchored-highlighter})"
msgstr "(@var{matcher} . @var{anchored-highlighter})"

#. type: table
#: original_texis/modes.texi:3251
msgid "In this kind of element, @var{anchored-highlighter} specifies how to highlight text that follows a match found by @var{matcher}.  So a match found by @var{matcher} acts as the anchor for further searches specified by @var{anchored-highlighter}.  @var{anchored-highlighter} is a list of the following form:"
msgstr "この種の要素では@var{anchored-highlighter}は@var{matcher}が見つけたマッチに後続するテキストをハイライトする方法を指定する。つまり@var{matcher}が見つけたマッチは、@var{anchored-highlighter}により指定されるその先の検索にたいするアンカー(anchor)として機能する。@var{anchored-highlighter}は以下の形式のリストである:"

#. type: example
#: original_texis/modes.texi:3256
#, no-wrap
msgid "(@var{anchored-matcher} @var{pre-form} @var{post-form} @var{subexp-highlighters}@dots{})\n"
msgstr "(@var{anchored-matcher} @var{pre-form} @var{post-form} @var{subexp-highlighters}@dots{})\n"

#. type: table
#: original_texis/modes.texi:3265
msgid "Here, @var{anchored-matcher}, like @var{matcher}, is either a regular expression or a function.  After a match of @var{matcher} is found, point is at the end of the match.  Now, Font Lock evaluates the form @var{pre-form}.  Then it searches for matches of @var{anchored-matcher} and uses @var{subexp-highlighters} to highlight these.  A @var{subexp-highlighter} is as described above.  Finally, Font Lock evaluates @var{post-form}."
msgstr "ここで@var{anchored-matcher}は@var{matcher}と同様、正規表現か関数である。@var{matcher}にたいするマッチを見つけた後に、ポイントはそのマッチの終端に移動する。そこでFont Lockはフォーム@var{pre-form}を評価する。それから@var{anchored-matcher}にたいするマッチを検索し、@var{subexp-highlighters}を使用してそれらのマッチをハイライトする。@var{subexp-highlighter}については上記を参照のこと。最後にFont Lockは@var{post-form}を評価する。"

#. type: table
#: original_texis/modes.texi:3272
msgid "The forms @var{pre-form} and @var{post-form} can be used to initialize before, and cleanup after, @var{anchored-matcher} is used.  Typically, @var{pre-form} is used to move point to some position relative to the match of @var{matcher}, before starting with @var{anchored-matcher}.  @var{post-form} might be used to move back, before resuming with @var{matcher}."
msgstr "フォーム@var{pre-form}と@var{post-form}は、@var{anchored-matcher}使用時の事前の初期化と事後のクリーンアップに使用できる。@var{pre-form}は通常は@var{anchored-matcher}の開始前に、@var{matcher}のマッチに関連する何らかの位置にポイントを移動するために使用される。@var{post-form}は、@var{matcher}の再開前にポイントを戻すために使用できる。"

#. type: table
#: original_texis/modes.texi:3281
msgid "After Font Lock evaluates @var{pre-form}, it does not search for @var{anchored-matcher} beyond the end of the line.  However, if @var{pre-form} returns a buffer position that is greater than the position of point after @var{pre-form} is evaluated, then the position returned by @var{pre-form} is used as the limit of the search instead.  It is generally a bad idea to return a position greater than the end of the line; in other words, the @var{anchored-matcher} search should not span lines."
msgstr "@var{pre-form}を評価した後、Font Lockはその行の終端の先にたいして@var{anchored-matcher}の検索を行わない。しかし@var{pre-form}が@var{pre-form}評価後のポイント位置より大きいバッファー位置をリターンした場合には、かわりに@var{pre-form}によりリターンされた位置が検索リミットとして使用される。その行の終端より大きい位置をリターンするのは、一般的にはよいアイデアではない。言い換えると@var{anchored-matcher}検索は複数行にわたる(span lines)べきではない。"

#. type: smallexample
#: original_texis/modes.texi:3289
#, no-wrap
msgid ""
";; @r{Highlight occurrences of the word @samp{item} following}\n"
";; @r{an occurrence of the word @samp{anchor} (on the same line)}\n"
";; @r{in the value of @code{item-face}.}\n"
"(\"\\\\<anchor\\\\>\" \"\\\\<item\\\\>\" nil nil (0 item-face))\n"
msgstr ""
";; @r{@code{item-face}の値を使用して}\n"
";; @r{単語@samp{anchor}に(同一行内で)}\n"
";; @r{後続する単語@samp{item}をハイライトする}\n"
"(\"\\\\<anchor\\\\>\" \"\\\\<item\\\\>\" nil nil (0 item-face))\n"

#. type: table
#: original_texis/modes.texi:3295
msgid "Here, @var{pre-form} and @var{post-form} are @code{nil}.  Therefore searching for @samp{item} starts at the end of the match of @samp{anchor}, and searching for subsequent instances of @samp{anchor} resumes from where searching for @samp{item} concluded."
msgstr "ここでは@var{pre-form}と@var{post-form}は@code{nil}である。したがって@samp{item}にたいする検索は@samp{anchor}にたいするマッチの終端から開始されて、後続する@samp{anchor}インスタンスにたいする検索は@samp{item}にたいする検索が終了した位置から再開される。"

#. type: item
#: original_texis/modes.texi:3296
#, no-wrap
msgid "(@var{matcher} @var{highlighters}@dots{})"
msgstr "(@var{matcher} @var{highlighters}@dots{})"

#. type: table
#: original_texis/modes.texi:3301
msgid "This sort of element specifies several @var{highlighter} lists for a single @var{matcher}.  A @var{highlighter} list can be of the type @var{subexp-highlighter} or @var{anchored-highlighter} as described above."
msgstr "この種の要素は単一の@var{matcher}にたいして複数の@var{highlighter}リストを指定する。@var{highlighter}リストには、上述した@var{subexp-highlighter}か@var{anchored-highlighter}のいずれかを指定できる。"

#. type: smallexample
#: original_texis/modes.texi:3310
#, no-wrap
msgid ""
";; @r{Highlight occurrences of the word @samp{anchor} in the value}\n"
";; @r{of @code{anchor-face}, and subsequent occurrences of the word}\n"
";; @r{@samp{item} (on the same line) in the value of @code{item-face}.}\n"
"(\"\\\\<anchor\\\\>\" (0 anchor-face)\n"
"                (\"\\\\<item\\\\>\" nil nil (0 item-face)))\n"
msgstr ""
";; @r{@code{anchor-face}の値内に現れる単語@samp{anchor}、}\n"
";; @r{および、(同じ行の)後続の@code{item-face}の}\n"
";; @r{ 値内に現れる単語@samp{item}をハイライトする}\n"
"(\"\\\\<anchor\\\\>\" (0 anchor-face)\n"
"                (\"\\\\<item\\\\>\" nil nil (0 item-face)))\n"

#. type: item
#: original_texis/modes.texi:3312
#, no-wrap
msgid "(eval . @var{form})"
msgstr "(eval . @var{form})"

#. type: table
#: original_texis/modes.texi:3316
msgid "Here @var{form} is an expression to be evaluated the first time this value of @code{font-lock-keywords} is used in a buffer.  Its value should have one of the forms described in this table."
msgstr "ここで@var{form}はバッファー内でこの@code{font-lock-keywords}の値が最初に使用されるときに評価される式である。この値は上述のテーブルで説明したいずれかの形式をもつこと。"

#. type: Plain text
#: original_texis/modes.texi:3321
msgid "@strong{Warning:} Do not design an element of @code{font-lock-keywords} to match text which spans lines; this does not work reliably.  For details, @pxref{Multiline Font Lock}."
msgstr "@strong{警告:} 複数行にわたるテキストにたいするマッチさせるために、@code{font-lock-keywords}の要素をデザインしてはならない。これは確実に機能するとは言えない。詳細は@ref{Multiline Font Lock}を参照のこと。"

#. type: Plain text
#: original_texis/modes.texi:3325
msgid "You can use @var{case-fold} in @code{font-lock-defaults} to specify the value of @code{font-lock-keywords-case-fold-search} which says whether search-based fontification should be case-insensitive."
msgstr "検索ベースのフォント表示がcaseを区別すべきかどうかを告げる@code{font-lock-keywords-case-fold-search}の値を指定するために@code{font-lock-defaults}内で@var{case-fold}を使用できる。"

#. type: defvar
#: original_texis/modes.texi:3326
#, no-wrap
msgid "font-lock-keywords-case-fold-search"
msgstr "font-lock-keywords-case-fold-search"

#. type: defvar
#: original_texis/modes.texi:3329
msgid "Non-@code{nil} means that regular expression matching for the sake of @code{font-lock-keywords} should be case-insensitive."
msgstr "非@code{nil}は@code{font-lock-keywords}のための正規表現マッチングがcaseを区別すべきではないことを意味する。"

#. type: subsection
#: original_texis/modes.texi:3332
#, no-wrap
msgid "Customizing Search-Based Fontification"
msgstr "Customizing Search-Based Fontification"

#. type: Plain text
#: original_texis/modes.texi:3339
msgid "You can use @code{font-lock-add-keywords} to add additional search-based fontification rules to a major mode, and @code{font-lock-remove-keywords} to remove rules.  You can also customize the @code{font-lock-ignore} option to selectively disable fontification rules for keywords that match certain criteria."
msgstr "メジャーモードにたいして検索ベースフォント表示ルールを追加するために@code{font-lock-add-keywords}、削除には@code{font-lock-remove-keywords}を使用することができます。特定の条件にマッチするキーワードにたいして選択的にフォント表示を無効にするよう、@code{font-lock-ignore}オプションをカスタマイズすることもできます。"

#. type: defun
#: original_texis/modes.texi:3340
#, no-wrap
msgid "font-lock-add-keywords mode keywords &optional how"
msgstr "font-lock-add-keywords mode keywords &optional how"

#. type: defun
#: original_texis/modes.texi:3344
msgid "This function adds highlighting @var{keywords}, for the current buffer or for major mode @var{mode}.  The argument @var{keywords} should be a list with the same format as the variable @code{font-lock-keywords}."
msgstr "この関数はカレントバッファー、またはメジャーモード@var{mode}にたいしてハイライトする@var{keywords}を追加する。引数@var{keywords}は変数@code{font-lock-keywords}と同じ形式のリストであること。"

#. type: defun
#: original_texis/modes.texi:3350
msgid "If @var{mode} is a symbol which is a major mode command name, such as @code{c-mode}, the effect is that enabling Font Lock mode in @var{mode} will add @var{keywords} to @code{font-lock-keywords}.  Calling with a non-@code{nil} value of @var{mode} is correct only in your @file{~/.emacs} file."
msgstr "@var{mode}が、@code{c-mode}のようにメジャーモードのコマンド名であるようなシンボルなら、その@var{mode}内でFont Lockモードを有効にすることによって@var{keywords}が@code{font-lock-keywords}に追加される効果がある。非@code{nil}値の@var{mode}による呼び出しは@file{~/.emacs}ファイル内でのみ正しい。"

#. type: defun
#: original_texis/modes.texi:3354
msgid "If @var{mode} is @code{nil}, this function adds @var{keywords} to @code{font-lock-keywords} in the current buffer.  This way of calling @code{font-lock-add-keywords} is usually used in mode hook functions."
msgstr "@var{mode}が@code{nil}なら、この関数はカレントバッファーの@code{font-lock-keywords}に@var{keywords}を追加する。この方法での@code{font-lock-add-keywords}呼び出しは通常はモードフック関数内で使用される。"

#. type: defun
#: original_texis/modes.texi:3360
msgid "By default, @var{keywords} are added at the beginning of @code{font-lock-keywords}.  If the optional argument @var{how} is @code{set}, they are used to replace the value of @code{font-lock-keywords}.  If @var{how} is any other non-@code{nil} value, they are added at the end of @code{font-lock-keywords}."
msgstr "デフォルトでは@var{keywords}は@code{font-lock-keywords}の先頭に追加される。オプション引数@var{how}が@code{set}なら、それらは@code{font-lock-keywords}の値の置換に使用される。@var{how}がそれ以外の非@code{nil}値なら、これらは@code{font-lock-keywords}の最後に追加される。"

#. type: defun
#: original_texis/modes.texi:3365
msgid "Some modes provide specialized support you can use in additional highlighting patterns.  See the variables @code{c-font-lock-extra-types}, @code{c++-font-lock-extra-types}, and @code{java-font-lock-extra-types}, for example."
msgstr "追加のハイライトパターンの使用を可能にする、特別なサポートを提供するモードがいくつかある。それらの例については変数@code{c-font-lock-extra-types}、@code{c++-font-lock-extra-types}、@code{java-font-lock-extra-types}を参照のこと。"

#. type: defun
#: original_texis/modes.texi:3372
msgid "@strong{Warning:} Major mode commands must not call @code{font-lock-add-keywords} under any circumstances, either directly or indirectly, except through their mode hooks.  (Doing so would lead to incorrect behavior for some minor modes.)  They should set up their rules for search-based fontification by setting @code{font-lock-keywords}."
msgstr "@strong{警告:} メジャーモードコマンドはモードフックを除き、いかなる状況においても直接間接を問わず@code{font-lock-add-keywords}を呼び出してはならない(これを行うといくつかのマイナーモードは不正な振る舞いを起こしかねない)。メジャーモードコマンドは@code{font-lock-keywords}をセットすることにより、検索ベースフォント表示のルールをセットアップすること。"

#. type: defun
#: original_texis/modes.texi:3374
#, no-wrap
msgid "font-lock-remove-keywords mode keywords"
msgstr "font-lock-remove-keywords mode keywords"

#. type: defun
#: original_texis/modes.texi:3382
msgid "This function removes @var{keywords} from @code{font-lock-keywords} for the current buffer or for major mode @var{mode}.  As in @code{font-lock-add-keywords}, @var{mode} should be a major mode command name or @code{nil}.  All the caveats and requirements for @code{font-lock-add-keywords} apply here too.  The argument @var{keywords} must exactly match the one used by the corresponding @code{font-lock-add-keywords}."
msgstr "この関数はカレントバッファーやメジャーモード@var{mode}にたいして、@code{font-lock-keywords}から@var{keywords}を削除する。@code{font-lock-add-keywords}の場合と同様に@var{mode}はメジャーモードコマンド名か@code{nil}であること。この関数にも@code{font-lock-add-keywords}にたいするすべての制約と条件が適用される。引数@var{keywords}は対応する@code{font-lock-add-keywords}が使用するキーワードと正確に一致しなければならない。"

#. type: Plain text
#: original_texis/modes.texi:3388
msgid "For example, the following code adds two fontification patterns for C mode: one to fontify the word @samp{FIXME}, even in comments, and another to fontify the words @samp{and}, @samp{or} and @samp{not} as keywords."
msgstr "たとえば以下はCモードに2つのフォント表示パターンを追加するコードの例である。フォント表示の1つはたとえコメント内であろうとも単語@samp{FIXME}をフォント表示し、もう1つは@samp{and}、@samp{or}、@samp{not}をキーワードとしてフォント表示する。"

#. type: smallexample
#: original_texis/modes.texi:3393
#, no-wrap
msgid ""
"(font-lock-add-keywords 'c-mode\n"
" '((\"\\\\<\\\\(FIXME\\\\):\" 1 font-lock-warning-face prepend)\n"
"   (\"\\\\<\\\\(and\\\\|or\\\\|not\\\\)\\\\>\" . font-lock-keyword-face)))\n"
msgstr ""
"(font-lock-add-keywords 'c-mode\n"
" '((\"\\\\<\\\\(FIXME\\\\):\" 1 font-lock-warning-face prepend)\n"
"   (\"\\\\<\\\\(and\\\\|or\\\\|not\\\\)\\\\>\" . font-lock-keyword-face)))\n"

#. type: Plain text
#: original_texis/modes.texi:3398
msgid "This example affects only C mode proper.  To add the same patterns to C mode @emph{and} all modes derived from it, do this instead:"
msgstr "この例は厳密にCモードだけに効果がある。Cモード、@emph{および}その派生モードにたいして同じパターンを追加するには、かわりに以下を行う:"

#. type: smallexample
#: original_texis/modes.texi:3406
#, no-wrap
msgid ""
"(add-hook 'c-mode-hook\n"
" (lambda ()\n"
"  (font-lock-add-keywords nil\n"
"   '((\"\\\\<\\\\(FIXME\\\\):\" 1 font-lock-warning-face prepend)\n"
"     (\"\\\\<\\\\(and\\\\|or\\\\|not\\\\)\\\\>\" .\n"
"      font-lock-keyword-face)))))\n"
msgstr ""
"(add-hook 'c-mode-hook\n"
" (lambda ()\n"
"  (font-lock-add-keywords nil\n"
"   '((\"\\\\<\\\\(FIXME\\\\):\" 1 font-lock-warning-face prepend)\n"
"     (\"\\\\<\\\\(and\\\\|or\\\\|not\\\\)\\\\>\" .\n"
"      font-lock-keyword-face)))))\n"

#. type: defopt
#: original_texis/modes.texi:3408
#, no-wrap
msgid "font-lock-ignore"
msgstr "font-lock-ignore"

#. type: cindex
#: original_texis/modes.texi:3409
#, no-wrap
msgid "selectively disabling font-lock fontifications"
msgstr "selectively disabling font-lock fontifications"

#. type: defopt
#: original_texis/modes.texi:3413
msgid "This option defines conditions for selectively disabling fontifications due to certain Font Lock keywords.  If non-@code{nil}, its value is a list of elements of the following form:"
msgstr "このオプションは特定のFont Lockキーワードによってフォント表示を選択的に無効にするための条件を定義する。非@code{nil}なら、値は以下のような形式の要素からなるリストであること:"

#. type: example
#: original_texis/modes.texi:3416
#, no-wrap
msgid "(@var{symbol} @var{condition} @dots{})\n"
msgstr "(@var{symbol} @var{condition} @dots{})\n"

#. type: defopt
#: original_texis/modes.texi:3426
msgid "Here, @var{symbol} is a symbol, usually a major or minor mode.  The subsequent @var{condition}s of a @var{symbol}'s list element will be in effect if @var{symbol} is bound and its value is non-@code{nil}.  For a mode's symbol, it means that the current major mode is derived from that mode, or that minor mode is enabled in the buffer.  When a @var{condition} is in effect, any fontifications caused by @code{font-lock-keywords} elements that match the @var{condition} will be disabled."
msgstr "ここで@var{symbol}はシンボル(通常はメジャーモードかマイナーモード)。@var{symbol}の後のリスト要素@var{condition}は@var{symbol}がバインドされていて、なおかつ値が非@code{nil}なら効力をもつ。あるモードのシンボルについて考えると、カレントのメジャーモードがそのモードの派生モードであること、あるいはバッファーでそのマイナーモードが有効であることを意味する。@var{condition}が効力をもつ間は要素@code{font-lock-keywords}に因をなすすべてのフォント表示は、@var{condition}がマッチした場合には無効化される。"

#. type: defopt
#: original_texis/modes.texi:3428
msgid "Each @var{condition} can be one of the following:"
msgstr "@var{condition}にはそれぞれ以下のいずれかを指定できる:"

#. type: item
#: original_texis/modes.texi:3430
#, no-wrap
msgid "a symbol"
msgstr "シンボル"

#. type: table
#: original_texis/modes.texi:3438
msgid "This condition matches any element of Font Lock keywords that references the symbol.  This is usually a face, but can be any symbol referenced by an element of the @code{font-lock-keywords} list.  The symbol can contain wildcards: @code{*} matches any string in the symbol'ss name, @code{?} matches a single character, and @code{[@var{char-set}]}, where @var{char-set} is a string of one or more characters, matches a single character from the set."
msgstr "この条件はそのシンボルを参照するFont Lockキーワード要素すべてにマッチする。通常はフェイスだが、@code{font-lock-keywords}リストの要素によって参照される任意のシンボルを指定できる。シンボルにはワイルドカードを含めることができる。@code{*}はシンボルの名前に含まれる任意の文字列にマッチ、@code{?}は1文字にマッチ、そして@code{[@var{char-set}]} (@var{char-set}は1文字以上の文字列はその文字セットの1文字にマッチする。"

#. type: item
#: original_texis/modes.texi:3439
#, no-wrap
msgid "a string"
msgstr "文字列"

#. type: table
#: original_texis/modes.texi:3445
msgid "This condition matches any element of Font Lock keywords whose @var{matcher} is a regexp which matches the string.  In other words, this condition matches a Font Lock rule which highlights the string.  Thus, the string could be a specific program keyword whose highlighting you want to disable."
msgstr "この条件は@var{matcher}が文字列にマッチするregexpであるようなFont Lockキーワード要素すべてにマッチする。言い換えると、これはその文字列をハイライトさせるようなFont Lockルールにマッチする条件である。したがってこの文字列に、ハイライトを無効にしたい特定のプログラムキーワードを指定できるかもしれない。"

#. type: code{#1}
#: original_texis/modes.texi:3446
#, no-wrap
msgid "(pred @var{function})"
msgstr "(pred @var{function})"

#. type: table
#: original_texis/modes.texi:3450
msgid "This condition matches any element of Font Lock keywords for which @var{function}, when called with the element as the argument, returns non-@code{nil}."
msgstr "この条件は、その要素を引数として@var{function}を呼び出した際に非@code{nil}がリターンされるようなFont Lockキーワード要素すべてにマッチする。"

#. type: code{#1}
#: original_texis/modes.texi:3451
#, no-wrap
msgid "(not @var{condition})"
msgstr "(not @var{condition})"

#. type: table
#: original_texis/modes.texi:3453
msgid "This matches if @var{condition} doesn't."
msgstr "これは@var{condition}が成り立たなければマッチする。"

#. type: code{#1}
#: original_texis/modes.texi:3454
#, no-wrap
msgid "(and @var{condition} @dots{})"
msgstr "(and @var{condition} @dots{})"

#. type: table
#: original_texis/modes.texi:3456
msgid "This matches if each of the @var{condition}s matches."
msgstr "これはすべての@var{condition}がマッチすればマッチする。"

#. type: code{#1}
#: original_texis/modes.texi:3457
#, no-wrap
msgid "(or @var{condition} @dots{})"
msgstr "(or @var{condition} @dots{})"

#. type: table
#: original_texis/modes.texi:3459
msgid "This matches if at least one of the @var{condition}s matches."
msgstr "これは少なくとも1つの@var{condition}がマッチすればマッチする。"

#. type: code{#1}
#: original_texis/modes.texi:3460
#, no-wrap
msgid "(except @var{condition})"
msgstr "(except @var{condition})"

#. type: table
#: original_texis/modes.texi:3464
msgid "This condition can only be used at top level or inside an @code{or} clause.  It undoes the effect of a previously matching condition on the same level."
msgstr "この条件はトップレベルか@code{or}節内だけで使用できる。同一レベルにおいて前にマッチした条件の効果を取り消す。"

#. type: Plain text
#: original_texis/modes.texi:3468
msgid "As an example, consider the following setting:"
msgstr "セッティングの例として以下を考えてみましょう:"

#. type: smallexample
#: original_texis/modes.texi:3476
#, no-wrap
msgid ""
"(setq font-lock-ignore\n"
"      '((prog-mode font-lock-*-face\n"
"                   (except help-echo))\n"
"        (emacs-lisp-mode (except \";;;###autoload)\")\n"
"        (whitespace-mode whitespace-empty-at-bob-regexp)\n"
"        (makefile-mode (except *))))\n"
msgstr ""
"(setq font-lock-ignore\n"
"      '((prog-mode font-lock-*-face\n"
"                   (except help-echo))\n"
"        (emacs-lisp-mode (except \";;;###autoload)\")\n"
"        (whitespace-mode whitespace-empty-at-bob-regexp)\n"
"        (makefile-mode (except *))))\n"

#. type: Plain text
#: original_texis/modes.texi:3479
msgid "Line by line, this does the following:"
msgstr "これは1行ごとに以下のことを行っています:"

#. type: enumerate
#: original_texis/modes.texi:3485
msgid "In all programming modes, disable fontifications due to all font-lock keywords that apply one of the standard font-lock faces (excluding strings and comments, which are covered by syntactic Font Lock)."
msgstr "すべてのプログラミング用モードで、標準のfont-lockフェイスのいずれかを適用するようなfont-lockキーワードによるフォント表示を無効にする構文的なFont Lockが受けもつ文字列やコメントは除外)。"

#. type: enumerate
#: original_texis/modes.texi:3488
msgid "However, keep any keywords that add a @code{help-echo} text property."
msgstr "ただしテキストプロパティ@code{help-echo}に追加を行うキーワードはすべて保持。"

#. type: enumerate
#: original_texis/modes.texi:3492
msgid "In Emacs Lisp mode, also keep the highlighting of autoload cookies, which would have been excluded by the first condition."
msgstr "Emacs Lispモードでは最初の条件で除外され得るautoload cookieのハイライトは保持。"

#. type: enumerate
#: original_texis/modes.texi:3496
msgid "When @code{whitespace-mode} (a minor mode) is enabled, also don't highlight an empty line at beginning of buffer."
msgstr "@code{whitespace-mode} (マイナーモード)が有効なら、バッファー先頭の空行もハイライトさせない。"

#. type: enumerate
#: original_texis/modes.texi:3499
msgid "Finally, in Makefile mode, don't apply any conditions."
msgstr "最後にMakefileモードでは条件を何も適用しない。"

#. type: Plain text
#: original_texis/modes.texi:3507
msgid "This section describes additional variables that a major mode can set by means of @var{other-vars} in @code{font-lock-defaults} (@pxref{Font Lock Basics})."
msgstr "このセクションでは@code{font-lock-defaults}内の@var{other-vars}を用いて、メジャーモードがセットできる追加の変数について説明します(@ref{Font Lock Basics}を参照)。"

#. type: defvar
#: original_texis/modes.texi:3508
#, no-wrap
msgid "font-lock-mark-block-function"
msgstr "font-lock-mark-block-function"

#. type: defvar
#: original_texis/modes.texi:3512
msgid "If this variable is non-@code{nil}, it should be a function that is called with no arguments, to choose an enclosing range of text for refontification for the command @kbd{M-x font-lock-fontify-block}."
msgstr "この変数が非@code{nil}なら、それはコマンド@kbd{M-x font-lock-fontify-block}で再フォント表示するテキスト範囲を選択するために引数なしで呼び出される関数であること。"

#. type: defvar
#: original_texis/modes.texi:3518
msgid "The function should report its choice by placing the region around it.  A good choice is a range of text large enough to give proper results, but not too large so that refontification becomes slow.  Typical values are @code{mark-defun} for programming modes or @code{mark-paragraph} for textual modes."
msgstr "この関数は結果を報告するために選択されたテキスト範囲にリージョンを配置すること。正しい結果を与えるのに十分、かつ再フォント表示が低速にならない程度のテキスト範囲がよい選択である。典型的な値はプログラミングのモードにたいしては@code{mark-defun}、テキストを扱うモードにたいしては@code{mark-paragraph}。"

#. type: defvar
#: original_texis/modes.texi:3520
#, no-wrap
msgid "font-lock-extra-managed-props"
msgstr "font-lock-extra-managed-props"

#. type: defvar
#: original_texis/modes.texi:3528
msgid "This variable specifies additional properties (other than @code{font-lock-face}) that are being managed by Font Lock mode.  It is used by @code{font-lock-default-unfontify-region}, which normally only manages the @code{font-lock-face} property.  If you want Font Lock to manage other properties as well, you must specify them in a @var{facespec} in @code{font-lock-keywords} as well as add them to this list.  @xref{Search-based Fontification}."
msgstr "この変数は、(@code{font-lock-face}以外の)Font Lockにより管理される追加プロパティを指定する。これらの追加プロパティは通常は@code{font-lock-face}プロパティだけを管理する、@code{font-lock-default-unfontify-region}により使用される。他のプロパティも同様にFont Lockに管理させたければ、このリストに追加するのと同じように@code{font-lock-keywords}内の@var{facespec}内でもこれらを指定しなければならない。@ref{Search-based Fontification}を参照のこと。"

#. type: defvar
#: original_texis/modes.texi:3530
#, no-wrap
msgid "font-lock-fontify-buffer-function"
msgstr "font-lock-fontify-buffer-function"

#. type: defvar
#: original_texis/modes.texi:3533
msgid "Function to use for fontifying the buffer.  The default value is @code{font-lock-default-fontify-buffer}."
msgstr "そのバッファーをフォント表示するために使用する関数。デフォルト値は@code{font-lock-default-fontify-buffer}。"

#. type: defvar
#: original_texis/modes.texi:3535
#, no-wrap
msgid "font-lock-unfontify-buffer-function"
msgstr "font-lock-unfontify-buffer-function"

#. type: defvar
#: original_texis/modes.texi:3539
msgid "Function to use for unfontifying the buffer.  This is used when turning off Font Lock mode.  The default value is @code{font-lock-default-unfontify-buffer}."
msgstr "そのバッファーを非フォント表示するために使用する関数。デフォルト値は@code{font-lock-default-unfontify-buffer}。"

#. type: defvar
#: original_texis/modes.texi:3541
#, no-wrap
msgid "font-lock-fontify-region-function"
msgstr "font-lock-fontify-region-function"

#. type: defvar
#: original_texis/modes.texi:3547
msgid "Function to use for fontifying a region.  It should take two arguments, the beginning and end of the region, and an optional third argument @var{verbose}.  If @var{verbose} is non-@code{nil}, the function should print status messages.  The default value is @code{font-lock-default-fontify-region}."
msgstr "リージョンをフォント表示するための関数。この関数はリージョンの開始と終了の2つを引数に受け取り、オプションで3つ目の引数@var{verbose}を受け取ること。@var{verbose}が非@code{nil}なら、その関数はステータスメッセージをプリントすべきである。デフォルト値は@code{font-lock-default-fontify-region}。"

#. type: defvar
#: original_texis/modes.texi:3549
#, no-wrap
msgid "font-lock-unfontify-region-function"
msgstr "font-lock-unfontify-region-function"

#. type: defvar
#: original_texis/modes.texi:3553
msgid "Function to use for unfontifying a region.  It should take two arguments, the beginning and end of the region.  The default value is @code{font-lock-default-unfontify-region}."
msgstr "リージョンを非フォント表示するための関数。この関数はリージョンの開始と終了の2つを引数に受け取ること。デフォルト値は@code{font-lock-default-unfontify-region}。"

#. type: defvar
#: original_texis/modes.texi:3555
#, no-wrap
msgid "font-lock-flush-function"
msgstr "font-lock-flush-function"

#. type: defvar
#: original_texis/modes.texi:3560
msgid "Function to use for declaring that a region's fontification is out of date.  It takes two arguments, the beginning and end of the region.  The default value of this variable is @code{font-lock-after-change-function}."
msgstr "リージョンのフォント表示の期限切れの宣言に使用する関数。そのリージョンの開始と終了という2つの引数を受け取る。この変数のデフォルト値は@code{font-lock-after-change-function}。"

#. type: defvar
#: original_texis/modes.texi:3562
#, no-wrap
msgid "font-lock-ensure-function"
msgstr "font-lock-ensure-function"

#. type: defvar
#: original_texis/modes.texi:3569
msgid "Function to use for making sure a region of the current buffer has been fontified.  It is called with two arguments, the beginning and end of the region.  The default value of this variable is a function that calls @code{font-lock-default-fontify-buffer} if the buffer is not fontified; the effect is to make sure the entire accessible portion of the buffer is fontified."
msgstr "カレントバッファーのリージョンのフォント表示の保証に使用する関数。そのリージョンの開始と終了という2つの引数を受け取る。この変数のデフォルト値は、バッファーがフォント表示されていないときに@code{font-lock-default-fontify-buffer}を呼び出す関数。効果はそのバッファーのアクセス可能範囲全体がフォント表示されることの保証。"

#. type: defun
#: original_texis/modes.texi:3571
#, no-wrap
msgid "jit-lock-register function &optional contextual"
msgstr "jit-lock-register function &optional contextual"

#. type: defun
#: original_texis/modes.texi:3583
msgid "This function tells Font Lock mode to run the Lisp function @var{function} any time it has to fontify or refontify part of the current buffer.  It calls @var{function} before calling the default fontification functions, and gives it two arguments, @var{start} and @var{end}, which specify the region to be fontified or refontified.  If @var{function} performs fontifications, it can return a list of the form @w{@code{(jit-lock-bounds @var{beg} . @var{end})}}, to indicate the bounds of the region it actually fontified; Just-In-Time (a.k.a.@: @acronym{``JIT''}) font-lock will use this information to optimize subsequent redisplay cycles and regions of buffer text it will pass to future calls to @var{function}."
msgstr "この関数はカレントバッファーの一部をフォント表示/非表示する必要がある任意のタイミングで、Font LockモードがLisp関数@var{function}を実行することを宣言する。これはデフォルトのフォント表示関数が呼び出される前に、フォント表示/非表示するリージョンを指定する2つの引数@var{start}と@var{end}で@var{function}を呼び出す。@var{function}がフォント表示を行う場合には、フォント表示したリージョン領域を示すためにフォーム@w{@code{(jit-lock-bounds @var{beg} . @var{end})}}のリストをリターンできる。後続する再表示サイクルおよび将来@var{function}に渡されるバッファーテキストの最適化に、Just-In-Time(いわゆる@acronym{``JIT''})なfont-lockがこの情報を使用するだろう。"

#. type: defun
#: original_texis/modes.texi:3588
msgid "The optional argument @var{contextual}, if non-@code{nil}, forces Font Lock mode to always refontify a syntactically relevant part of the buffer, and not just the modified lines.  This argument can usually be omitted."
msgstr "オプション引数@var{contextual}が非@code{nil}なら、行が更新されたときに限らずそのバッファーの構文的に関連する部分を常にフォント表示するようFont Lockモードに強制する。この引数は通常は省略できる。"

#. type: defun
#: original_texis/modes.texi:3593
msgid "When Font Lock is activated in a buffer, it calls this function with a non-@code{nil} value of @var{contextual} if the value of @code{font-lock-keywords-only} (@pxref{Syntactic Font Lock}) is @code{nil}."
msgstr "バッファーでFont Lockがアクティブのときには、もし@code{font-lock-keywords-only} (@ref{Syntactic Font Lock}を参照)の値が@code{nil}なら、非@code{nil}値の@var{contextual}でこの関数を呼び出す。"

#. type: defun
#: original_texis/modes.texi:3595
#, no-wrap
msgid "jit-lock-unregister function"
msgstr "jit-lock-unregister function"

#. type: defun
#: original_texis/modes.texi:3598
msgid "If @var{function} was previously registered as a fontification function using @code{jit-lock-register}, this function unregisters it."
msgstr "以前に@code{jit-lock-register}を使用してフォント表示関数として@var{function}を登録した場合は、その関数を未登録にする。"

#. type: cindex
#: original_texis/modes.texi:3600
#, no-wrap
msgid "debugging font-lock"
msgstr "debugging font-lock"

#. type: cindex
#: original_texis/modes.texi:3601
#, no-wrap
msgid "jit-lock functions, debugging"
msgstr "jit-lock functions, debugging"

#. type: deffn
#: original_texis/modes.texi:3602
#, no-wrap
msgid "Command jit-lock-debug-mode &optional arg"
msgstr "Command jit-lock-debug-mode &optional arg"

#. type: deffn
#: original_texis/modes.texi:3611
msgid "This is a minor mode whose purpose is to help in debugging code that is run by JIT font-lock.  When this mode is enabled, most of the code that JIT font-lock normally runs during redisplay cycles, where Lisp errors are suppressed, is instead run by a timer.  Thus, this mode allows using debugging aids such as @code{debug-on-error} (@pxref{Error Debugging}) and Edebug (@pxref{Edebug}) for finding and fixing problems in font-lock code and any other code run by JIT font-lock."
msgstr "これはJIT font-lockが実行するコードのデバッグを支援するためのマイナーモード。このモードが有効だと、(Lispエラーが抑制される)再表示サイクル中にJIT font-lockが実行する通常のコードのほとんどがタイマーによって実行される。したがってこのモードではfont-lockやJIT font-lockが実行するその他のコード内の問題を見つけて訂正するために、@code{debug-on-error} (@ref{Error Debugging}を参照)やEdebug (@ref{Edebug}を参照)のようなデバッグ支援機能を使用することができる。"

#. type: Plain text
#: original_texis/modes.texi:3623
msgid "Some major modes offer three different levels of fontification.  You can define multiple levels by using a list of symbols for @var{keywords} in @code{font-lock-defaults}.  Each symbol specifies one level of fontification; it is up to the user to choose one of these levels, normally by setting @code{font-lock-maximum-decoration} (@pxref{Font Lock,,, emacs, the GNU Emacs Manual}).  The chosen level's symbol value is used to initialize @code{font-lock-keywords}."
msgstr "フォント表示にたいして3つの異なるレベルを提供するモードがいくつかあります。@code{font-lock-defaults}内の@var{keywords}にたいしてシンボルのリストを使用することにより複数のレベルを定義できます。このリストのシンボルはそれぞれフォント表示の1レベルを指定します。これらのレベルの選択は、通常は@code{font-lock-maximum-decoration}をセットすることによりユーザーの責任で行われます(@ref{Font Lock,,, emacs, the GNU Emacs Manual}を参照)。選択されたレベルのシンボルの値は@code{font-lock-keywords}の初期化に使用されます。"

#. type: Plain text
#: original_texis/modes.texi:3626
msgid "Here are the conventions for how to define the levels of fontification:"
msgstr "フォント表示レベルの定義方法に関する慣習を以下に挙げます:"

#. type: itemize
#: original_texis/modes.texi:3632
msgid "Level 1: highlight function declarations, file directives (such as include or import directives), strings and comments.  The idea is speed, so only the most important and top-level components are fontified."
msgstr "レベル1: 関数宣言、(includeやimportのような)ファイルディレクティブ、文字列、コメントをハイライトする。これは、もっとも重要かつトップレベルのコンポーネントだけをフォント表示すれば高速になるという発想である。"

#. type: itemize
#: original_texis/modes.texi:3638
msgid "Level 2: in addition to level 1, highlight all language keywords, including type names that act like keywords, as well as named constant values.  The idea is that all keywords (either syntactic or semantic)  should be fontified appropriately."
msgstr "レベル2: レベル1に加えて、すべての言語のキーワード(キーワードと同様に作用する型名を含む)、および名前付き定数値をハイライトする。これは、(構文的、または意味的な)すべてのキーワードは適切にフォント表示されるべきという発想である。"

#. type: itemize
#: original_texis/modes.texi:3643
msgid "Level 3: in addition to level 2, highlight the symbols being defined in function and variable declarations, and all builtin function names, wherever they appear."
msgstr "レベル3: レベル2に加えて、関数内で定義されるシンボル、変数宣言、およびすべてのビルトイン関数名にたいして、それがどこに出現しようとハイライトする。"

#. type: Plain text
#: original_texis/modes.texi:3652
msgid "Some major modes such as @code{list-buffers} and @code{occur} construct the buffer text programmatically.  The easiest way for them to support Font Lock mode is to specify the faces of text when they insert the text in the buffer."
msgstr "@code{list-buffers}や@code{occur}のようないくつかのメジャーモードは、バッファーのテキストをプログラム的に構築します。これらにたいしてFont Lockモードをサポートするためには、そのバッファーにテキストを挿入するタイミングでテキストのフェイスを指定するのがもっとも簡単な方法です。"

#. type: Plain text
#: original_texis/modes.texi:3658
msgid "The way to do this is to specify the faces in the text with the special text property @code{font-lock-face} (@pxref{Special Properties}).  When Font Lock mode is enabled, this property controls the display, just like the @code{face} property.  When Font Lock mode is disabled, @code{font-lock-face} has no effect on the display."
msgstr "これはスペシャルテキストプロパティ@code{font-lock-face} (@ref{Special Properties}を参照)により、テキスト内にフェイスを指定することによって行われます。Font Lockモードが有効になったとき、このプロパティは@code{face}と同じように表示を制御します。Font Lockモードが無効になると@code{font-lock-face}は表示に効果をもちません。"

#. type: Plain text
#: original_texis/modes.texi:3668
msgid "It is ok for a mode to use @code{font-lock-face} for some text and also use the normal Font Lock machinery.  But if the mode does not use the normal Font Lock machinery, it should not set the variable @code{font-lock-defaults}.  In this case the @code{face} property will not be overridden, so using the @code{face} property could work too.  However, using @code{font-lock-face} is generally preferable as it allows the user to control the fontification by toggling @code{font-lock-mode}, and lets the code work regardless of whether the mode uses Font Lock machinery or not."
msgstr "何らかのテキストにたいして@code{font-lock-face}を使用するモードや、通常のFont Lock機構を使用するモードでも問題はありません。しかし通常のFont Lock機構を使用しないモードでは、変数@code{font-lock-defaults}をセットするべきではありません。この場合には@code{face}プロパティはオーバーライドされないので、@code{face}プロパティの使用も機能します。しかし@code{font-lock-mode}の切り替えによりユーザーがフォント化を制御でき、かつモードのFont Lock機構の使用の有無に関わらずコードが機能するので、一般的には@code{font-lock-face}の使用の方が優っています。"

#. type: cindex
#: original_texis/modes.texi:3671
#, no-wrap
msgid "faces for font lock"
msgstr "faces for font lock"

#. type: cindex
#: original_texis/modes.texi:3672
#, no-wrap
msgid "font lock faces"
msgstr "font lock faces"

#. type: Plain text
#: original_texis/modes.texi:3679
msgid "Font Lock mode can highlight using any face, but Emacs defines several faces specifically for Font Lock to use to highlight text.  These @dfn{Font Lock faces} are listed below.  They can also be used by major modes for syntactic highlighting outside of Font Lock mode (@pxref{Major Mode Conventions})."
msgstr "Font Lockモードはハイライトに任意のフェイスを使用できますが、Emacsは特にFontLockがテキストのハイライトに使用するいくつかのフェイスを定義しています。これらの@dfn{Font Lockフェイス(Font Lock faces)}を以下にリストします。これらのフェイスはFontLockモードの外部における構文的なハイライトでメジャーモードが使用することもできます(@ref{Major Mode Conventions}を参照)。"

#. type: Plain text
#: original_texis/modes.texi:3683
msgid "Each of these symbols is both a face name, and a variable whose default value is the symbol itself.  Thus, the default value of @code{font-lock-comment-face} is @code{font-lock-comment-face}."
msgstr "以下の各シンボルはフェイス名であり、かつデフォルト値がシンボル自身であるような変数でもあります。つまり@code{font-lock-comment-face}のデフォルト値は@code{font-lock-comment-face}です。"

#. type: Plain text
#: original_texis/modes.texi:3688
msgid "The faces are listed with descriptions of their typical usage, and in order of greater to lesser prominence.  If a mode's syntactic categories do not fit well with the usage descriptions, the faces can be assigned using the ordering as a guide."
msgstr "リストはそのフェイスの典型的な使い方の説明とともに、重要度が高い順にソートされています。あるモードの構文的カテゴリーが以下の使い方の記述にうまく適合しない場合には、この並び順をガイドとして使用することによってフェイスを割り当てることができるでしょう。"

#. type: vindex
#: original_texis/modes.texi:3690 original_texis/modes.texi:3691
#, no-wrap
msgid "font-lock-warning-face"
msgstr "font-lock-warning-face"

#. type: table
#: original_texis/modes.texi:3696
msgid "for a construct that is peculiar (e.g., an unescaped confusable quote in an Emacs Lisp symbol like @samp{‘foo}), or that greatly changes the meaning of other text, like @samp{;;;###autoload} in Emacs Lisp and @samp{#error} in C."
msgstr "特有な構文(たとえば@samp{‘foo}のようにEmacs Lispシンボルにおけるエスケープされていない判りにくいクォート)や、Emacs Lispの@samp{;;;###autoload}、Cの@samp{#error}のような他のテキストの意味を大きく変更する構文にたいして使用される。"

#. type: vindex
#: original_texis/modes.texi:3697 original_texis/modes.texi:3698
#, no-wrap
msgid "font-lock-function-name-face"
msgstr "font-lock-function-name-face"

#. type: table
#: original_texis/modes.texi:3700
msgid "for the name of a function being defined or declared."
msgstr "定義、または宣言される関数の名前にたいして使用される。"

#. type: vindex
#: original_texis/modes.texi:3701 original_texis/modes.texi:3702
#, no-wrap
msgid "font-lock-function-call-face"
msgstr "font-lock-function-call-face"

#. type: table
#: original_texis/modes.texi:3705
msgid "for the name of a function being called.  This face inherits, by default, from @code{font-lock-function-name-face}."
msgstr "呼び出される関数の名前にたいして使用される。このフェイスはデフォルトでは@code{font-lock-function-name-face}を継承する。"

#. type: vindex
#: original_texis/modes.texi:3706 original_texis/modes.texi:3707
#, no-wrap
msgid "font-lock-variable-name-face"
msgstr "font-lock-variable-name-face"

#. type: table
#: original_texis/modes.texi:3709
msgid "for the name of a variable being defined or declared."
msgstr "定義、または宣言される変数の名前にたいして使用される。"

#. type: vindex
#: original_texis/modes.texi:3710 original_texis/modes.texi:3711
#, no-wrap
msgid "font-lock-variable-use-face"
msgstr "font-lock-variable-use-face"

#. type: table
#: original_texis/modes.texi:3714
msgid "for the name of a variable being referenced.  This face inherits, by default, from @code{font-lock-variable-name-face}."
msgstr "参照される変数の名前にたいして使用される。このフェイスはデフォルトでは@code{font-lock-variable-name-face}を継承する。"

#. type: vindex
#: original_texis/modes.texi:3715 original_texis/modes.texi:3716
#, no-wrap
msgid "font-lock-keyword-face"
msgstr "font-lock-keyword-face"

#. type: table
#: original_texis/modes.texi:3719
msgid "for a keyword with special syntactic significance, like @samp{for} and @samp{if} in C."
msgstr "Cの@samp{for}や@samp{if}のように、構文的に特別な意味をもつキーワードにたいして使用される。"

#. type: vindex
#: original_texis/modes.texi:3720 original_texis/modes.texi:3721
#, no-wrap
msgid "font-lock-comment-face"
msgstr "font-lock-comment-face"

#. type: table
#: original_texis/modes.texi:3723
msgid "for comments."
msgstr "コメントにたいして使用される。"

#. type: vindex
#: original_texis/modes.texi:3724 original_texis/modes.texi:3725
#, no-wrap
msgid "font-lock-comment-delimiter-face"
msgstr "font-lock-comment-delimiter-face"

#. type: table
#: original_texis/modes.texi:3728
msgid "for comments delimiters, like @samp{/*} and @samp{*/} in C@.  On most terminals, this inherits from @code{font-lock-comment-face}."
msgstr "Cの@samp{/*}と@samp{*/}のようなコメント区切りにたいして使用される。ほとんどの端末ではこのフェイスは@code{font-lock-comment-face}を継承する。"

#. type: vindex
#: original_texis/modes.texi:3729 original_texis/modes.texi:3730
#, no-wrap
msgid "font-lock-type-face"
msgstr "font-lock-type-face"

#. type: table
#: original_texis/modes.texi:3732
msgid "for the names of user-defined data types."
msgstr "ユーザー定義データ型にたいして使用される。"

#. type: vindex
#: original_texis/modes.texi:3733 original_texis/modes.texi:3734
#, no-wrap
msgid "font-lock-constant-face"
msgstr "font-lock-constant-face"

#. type: table
#: original_texis/modes.texi:3736
msgid "for the names of constants, like @samp{NULL} in C."
msgstr "Cの@samp{NULL}のような定数の名前にたいして使用される。"

#. type: vindex
#: original_texis/modes.texi:3737 original_texis/modes.texi:3738
#, no-wrap
msgid "font-lock-builtin-face"
msgstr "font-lock-builtin-face"

#. type: table
#: original_texis/modes.texi:3740
msgid "for the names of built-in functions."
msgstr "ビルトイン関数の名前にたいして使用される。"

#. type: vindex
#: original_texis/modes.texi:3741 original_texis/modes.texi:3742
#, no-wrap
msgid "font-lock-preprocessor-face"
msgstr "font-lock-preprocessor-face"

#. type: table
#: original_texis/modes.texi:3745
msgid "for preprocessor commands.  This inherits, by default, from @code{font-lock-builtin-face}."
msgstr "プロセッサーコマンドにたいして使用される。デフォルトでは、@code{font-lock-builtin-face}を継承する。"

#. type: vindex
#: original_texis/modes.texi:3746 original_texis/modes.texi:3747
#, no-wrap
msgid "font-lock-string-face"
msgstr "font-lock-string-face"

#. type: table
#: original_texis/modes.texi:3749
msgid "for string constants."
msgstr "文字列定数にたいして使用される。"

#. type: vindex
#: original_texis/modes.texi:3750 original_texis/modes.texi:3751
#, no-wrap
msgid "font-lock-doc-face"
msgstr "font-lock-doc-face"

#. type: table
#: original_texis/modes.texi:3755
msgid "for documentation embedded in program code inside specially-formed comments or strings.  This face inherits, by default, from @code{font-lock-string-face}."
msgstr "特別な形式のコメントや文字列内のプログラムコード内に埋め込まれたドキュメントにたいして使用される。デフォルトでは@code{font-lock-string-face}を継承する。"

#. type: vindex
#: original_texis/modes.texi:3756 original_texis/modes.texi:3757
#, no-wrap
msgid "font-lock-doc-markup-face"
msgstr "font-lock-doc-markup-face"

#. type: table
#: original_texis/modes.texi:3762
msgid "for mark-up elements in text using @code{font-lock-doc-face}.  It is typically used for the mark-up constructs in documentation embedded in program code, following conventions such as Haddock, Javadoc or Doxygen.  This face inherits, by default, from @code{font-lock-constant-face}."
msgstr "@code{font-lock-doc-face}を使用するテキスト内のmark-up要素にたいして使用される。これは通常はHaddock、Javadoc、Doxygenなどの慣例にしたがってプログラムコード内に埋め込まれた、ドキュメント内のマークアップ構文にたいして使用される。このフェイスは、デフォルトでは@code{font-lock-constant-face}を継承する。"

#. type: vindex
#: original_texis/modes.texi:3763 original_texis/modes.texi:3764
#, no-wrap
msgid "font-lock-negation-char-face"
msgstr "font-lock-negation-char-face"

#. type: table
#: original_texis/modes.texi:3766
msgid "for easily-overlooked negation characters."
msgstr "見逃しやすい否定文字にたいして使用される。"

#. type: vindex
#: original_texis/modes.texi:3767 original_texis/modes.texi:3768
#, no-wrap
msgid "font-lock-escape-face"
msgstr "font-lock-escape-face"

#. type: table
#: original_texis/modes.texi:3771
msgid "for escape sequences in strings.  This face inherits, by default, from @code{font-lock-regexp-grouping-backslash}."
msgstr "文字列内のエスケープシーケンスにたいして使用される。このフェイスはデフォルトでは@code{font-lock-regexp-grouping-backslash}を継承する。"

#. type: table
#: original_texis/modes.texi:3773
msgid "Here is an example in Python, where the escape sequence @code{\\n} is used:"
msgstr "以下はPythonでエスケープシーケンス@code{\\n}が使用されている例:"

#. type: group
#: original_texis/modes.texi:3777
#, no-wrap
msgid "print('Hello world!\\n')\n"
msgstr "print('Hello world!\\n')\n"

#. type: vindex
#: original_texis/modes.texi:3780 original_texis/modes.texi:3781
#, no-wrap
msgid "font-lock-number-face"
msgstr "font-lock-number-face"

#. type: table
#: original_texis/modes.texi:3783
msgid "for numbers."
msgstr "数値にたいして。"

#. type: vindex
#: original_texis/modes.texi:3784 original_texis/modes.texi:3785
#, no-wrap
msgid "font-lock-operator-face"
msgstr "font-lock-operator-face"

#. type: table
#: original_texis/modes.texi:3787
msgid "for operators."
msgstr "演算子にたいして。"

#. type: vindex
#: original_texis/modes.texi:3788 original_texis/modes.texi:3789
#, no-wrap
msgid "font-lock-property-name-face"
msgstr "font-lock-property-name-face"

#. type: table
#: original_texis/modes.texi:3793
msgid "for properties of an object, such as the declaration of fields in a struct.  This face inherits, by default, from @code{font-lock-variable-name-face}."
msgstr "構造体におけるフィールド定義のようなオブジェクトのプロパティにたいして使用される。このフェイスはデフォルトでは@code{font-lock-variable-name-face}を継承する。"

#. type: vindex
#: original_texis/modes.texi:3794 original_texis/modes.texi:3795
#, no-wrap
msgid "font-lock-property-use-face"
msgstr "font-lock-property-use-face"

#. type: table
#: original_texis/modes.texi:3798
msgid "for properties of an object, such as use of fields in a struct.  This face inherits, by default, from @code{font-lock-property-name-face}."
msgstr "構造体のフィールドの使用のように、オブジェクトのプロパティにたいして使用される。このフェイスはデフォルトでは@code{font-lock-property-name-face}を継承する。"

#. type: group
#: original_texis/modes.texi:3808
#, no-wrap
msgid ""
"typedef struct\n"
"@{\n"
"  int prop;\n"
"//    ^ property\n"
"@} obj;\n"
"\n"
msgstr ""
"typedef struct\n"
"@{\n"
"  int prop;\n"
"//    ^ property\n"
"@} obj;\n"
"\n"

#. type: group
#: original_texis/modes.texi:3815
#, no-wrap
msgid ""
"int main()\n"
"@{\n"
"  obj o;\n"
"  o.prop = 3;\n"
"//  ^ property\n"
"@}\n"
msgstr ""
"int main()\n"
"@{\n"
"  obj o;\n"
"  o.prop = 3;\n"
"//  ^ property\n"
"@}\n"

#. type: vindex
#: original_texis/modes.texi:3818 original_texis/modes.texi:3819
#, no-wrap
msgid "font-lock-punctuation-face"
msgstr "font-lock-punctuation-face"

#. type: table
#: original_texis/modes.texi:3821
msgid "for punctuation such as brackets and delimiters."
msgstr "カッコや区切り文字などの句読点文字。"

#. type: vindex
#: original_texis/modes.texi:3822 original_texis/modes.texi:3823
#, no-wrap
msgid "font-lock-bracket-face"
msgstr "font-lock-bracket-face"

#. type: table
#: original_texis/modes.texi:3826
msgid "for brackets (e.g., @code{()}, @code{[]}, @code{@{@}}).  This face inherits, by default, from @code{font-lock-punctuation-face}."
msgstr "カッコ(@code{()}、@code{[]}、@code{@{@}})にたいして使用される。このフェイスはデフォルトでは@code{font-lock-punctuation-face}を継承する。"

#. type: vindex
#: original_texis/modes.texi:3827 original_texis/modes.texi:3828
#, no-wrap
msgid "font-lock-delimiter-face"
msgstr "font-lock-delimiter-face"

#. type: table
#: original_texis/modes.texi:3831
msgid "for delimiters (e.g., @code{;}, @code{:}, @code{,}).  This face inherits, by default, from @code{font-lock-punctuation-face}."
msgstr "区切り文字(@code{;}、@code{:}、@code{,})にたいして使用される。このフェイスはデフォルトでは@code{font-lock-punctuation-face}を継承する。"

#. type: vindex
#: original_texis/modes.texi:3832 original_texis/modes.texi:3833
#, no-wrap
msgid "font-lock-misc-punctuation-face"
msgstr "font-lock-misc-punctuation-face"

#. type: table
#: original_texis/modes.texi:3836
msgid "for punctuation that is not a bracket or delimiter.  This face inherits, by default, from @code{font-lock-punctuation-face}."
msgstr "カッコや区切り文字以外の句読点文字にたいして使用される。このフェイスはデフォルトでは@code{font-lock-builtin-face}を継承する。"

#. type: cindex
#: original_texis/modes.texi:3840
#, no-wrap
msgid "syntactic font lock"
msgstr "syntactic font lock"

#. type: Plain text
#: original_texis/modes.texi:3849
msgid "Syntactic fontification uses a syntax table (@pxref{Syntax Tables}) to find and highlight syntactically relevant text.  If enabled, it runs prior to search-based fontification.  The variable @code{font-lock-syntactic-face-function}, documented below, determines which syntactic constructs to highlight.  There are several variables that affect syntactic fontification; you should set them by means of @code{font-lock-defaults} (@pxref{Font Lock Basics})."
msgstr "構文的フォント表示(syntactic fontification)は、構文的に関連性のあるテキストを探してハイライトするために構文テーブル(syntax table: @ref{Syntax Tables}を参照)を使用します。有効な場合には検索ベースのフォント表示に先立って実行されます。以下で説明する変数@code{font-lock-syntactic-face-function}はどの構文的構造をハイライトするかを決定します。構文的フォント表示に影響を与える変数がいくつかあります。@code{font-lock-defaults}のためにそれらをセットするべきです(@ref{Font Lock Basics}を参照)。"

#. type: Plain text
#: original_texis/modes.texi:3855
msgid "Whenever Font Lock mode performs syntactic fontification on a stretch of text, it first calls the function specified by @code{syntax-propertize-function}.  Major modes can use this to apply @code{syntax-table} text properties to override the buffer's syntax table in special cases.  @xref{Syntax Properties}."
msgstr "Font Lockモードが一連のテキストにたいして構文的フォント表示を処理するときは、常に@code{syntax-propertize-function}で指定される関数を最初に呼び出します。メジャーモードは特別なケースでは@code{syntax-table}テキストプロパティを適用してバッファーの構文テーブルをオーバーライドするために、これを使用することができます。@ref{Syntax Properties}を参照してください。"

#. type: defvar
#: original_texis/modes.texi:3856
#, no-wrap
msgid "font-lock-keywords-only"
msgstr "font-lock-keywords-only"

#. type: defvar
#: original_texis/modes.texi:3865
msgid "If the value of this variable is non-@code{nil}, Font Lock does not do syntactic fontification, only search-based fontification based on @code{font-lock-keywords}.  It is normally set by Font Lock mode based on the @var{keywords-only} element in @code{font-lock-defaults}.  If the value is @code{nil}, Font Lock will call @code{jit-lock-register} (@pxref{Other Font Lock Variables}) to set up for automatic refontification of buffer text following a modified line to reflect the new syntactic context due to the change."
msgstr "この変数の値が非@code{nil}なら、Font Lockは構文的フォント表示を行わずに@code{font-lock-keywords}にもとづく検索ベースのフォント表示だけを行う。これは通常は@code{font-lock-defaults}内の@var{keywords-only}要素にもとづいてFont Lockモードによりセットされる。値が@code{nil}ならFont Lockは@code{jit-lock-register} (@ref{Other Font Lock Variables}を参照)を呼び出して、変更行以降のバッファーテキストに変更による新たな構文コンテキストを反映するために、自動的な再フォント表示をセットアップする。"

#. type: defvar
#: original_texis/modes.texi:3869
msgid "To use only syntactic fontification, this variable should be non-@code{nil}, while @code{font-lock-keywords} should be set to @code{nil} (@pxref{Font Lock Basics})."
msgstr "構文的なフォント表示だけを使用するにはこの変数に非@code{nil}、そして@code{font-lock-keywords}に@code{nil}をセットする必要がある(@ref{Font Lock Basics}を参照)。"

#. type: defvar
#: original_texis/modes.texi:3871
#, no-wrap
msgid "font-lock-syntax-table"
msgstr "font-lock-syntax-table"

#. type: defvar
#: original_texis/modes.texi:3878
msgid "This variable holds the syntax table to use for fontification of comments and strings.  It is normally set by Font Lock mode based on the @var{syntax-alist} element in @code{font-lock-defaults}.  If this value is @code{nil}, syntactic fontification uses the buffer's syntax table (the value returned by the function @code{syntax-table}; @pxref{Syntax Table Functions})."
msgstr "この変数はコメントと文字列のフォント表示に使用するための構文テーブルを保持する。これは通常は@code{font-lock-defaults}内の@var{syntax-alist}要素にもとづいてFont Lockモードによりセットされる。この値が@code{nil}なら、構文的フォント表示はバッファーの構文テーブル(関数@code{syntax-table}がリターンする構文テーブル。@ref{Syntax Table Functions}を参照)を使用する。"

#. type: defvar
#: original_texis/modes.texi:3880
#, no-wrap
msgid "font-lock-syntactic-face-function"
msgstr "font-lock-syntactic-face-function"

#. type: defvar
#: original_texis/modes.texi:3883
msgid "If this variable is non-@code{nil}, it should be a function to determine which face to use for a given syntactic element (a string or a comment)."
msgstr "この変数が非@code{nil}なら、それは与えられた構文的要素(文字列かコメント)にどのフェイスを使用するかを決定する関数であること。"

#. type: defvar
#: original_texis/modes.texi:3889
msgid "The function is called with one argument, the parse state at point returned by @code{parse-partial-sexp}, and should return a face.  The default value returns @code{font-lock-comment-face} for comments and @code{font-lock-string-face} for strings (@pxref{Faces for Font Lock})."
msgstr "この関数は1つの引数で呼び出され、@code{parse-partial-sexp}がリターンするポイントの状態をパースしてフェイスをリターンすること。リターンされるデフォルト値はコメントにたいしては@code{font-lock-comment-face}、文字列にたいしては@code{font-lock-string-face} (@ref{Faces for Font Lock}を参照)。"

#. type: defvar
#: original_texis/modes.texi:3892
msgid "This variable is normally set through the ``other'' elements in @code{font-lock-defaults}:"
msgstr "この変数は通常は@code{font-lock-defaults}内の``他''の要素を通じてセットされる:"

#. type: lisp
#: original_texis/modes.texi:3899
#, no-wrap
msgid ""
"(setq-local font-lock-defaults\n"
"            `(,python-font-lock-keywords\n"
"              nil nil nil nil\n"
"              (font-lock-syntactic-face-function\n"
"               . python-font-lock-syntactic-face-function)))\n"
msgstr ""
"(setq-local font-lock-defaults\n"
"            `(,python-font-lock-keywords\n"
"              nil nil nil nil\n"
"              (font-lock-syntactic-face-function\n"
"               . python-font-lock-syntactic-face-function)))\n"

#. type: subsection
#: original_texis/modes.texi:3903
#, no-wrap
msgid "Multiline Font Lock Constructs"
msgstr "Multiline Font Lock Constructs"

#. type: cindex
#: original_texis/modes.texi:3904
#, no-wrap
msgid "multiline font lock"
msgstr "multiline font lock"

#. type: Plain text
#: original_texis/modes.texi:3911
msgid "Normally, elements of @code{font-lock-keywords} should not match across multiple lines; that doesn't work reliably, because Font Lock usually scans just part of the buffer, and it can miss a multi-line construct that crosses the line boundary where the scan starts.  (The scan normally starts at the beginning of a line.)"
msgstr "@code{font-lock-keywords}の要素は、通常は複数行にわたるマッチを行うべきではありません。それらの動作に信頼性はありません。なぜならFont Lockは通常はバッファーのごく一部をスキャンするので、そのスキャンが開始される行境界をまたがる複数行構造を見逃しかねないからです(スキャンは通常は行頭から開始される)。"

#. type: Plain text
#: original_texis/modes.texi:3922
msgid "Making elements that match multiline constructs work properly has two aspects: correct @emph{identification} and correct @emph{rehighlighting}.  The first means that Font Lock finds all multiline constructs.  The second means that Font Lock will correctly rehighlight all the relevant text when a multiline construct is changed---for example, if some of the text that was previously part of a multiline construct ceases to be part of it.  The two aspects are closely related, and often getting one of them to work will appear to make the other also work.  However, for reliable results you must attend explicitly to both aspects."
msgstr "ある要素にたいして複数行構造にたいするマッチを正しく機能させるために2つの観点があります。それは@emph{識別(identification)}の補正と、@emph{再ハイライト(rehighlighting)}の補正です。1つ目はFont Lockがすべての複数行構造を探すことを意味します。2つ目は複数行構造が変更されたとき、たとえば以前は複数行構造の一部だったテキストが複数行構造から除外されたときに、関連するすべてのテキストをFont Lockに正しく再ハイライトさせることを意味します。これら2つの観点は密接に関連しており、一方を機能させることがもう一方を機能させるようなことが多々あります。しかし信頼性のある結果を得るためには、これら2つの観点双方にたいして明示的に注意しなければなりません。"

#. type: Plain text
#: original_texis/modes.texi:3925
msgid "There are three ways to ensure correct identification of multiline constructs:"
msgstr "複数行構造の識別を確実に補正するには3つの方法があります:"

#. type: itemize
#: original_texis/modes.texi:3931
msgid "Add a function to @code{font-lock-extend-region-functions} that does the @emph{identification} and extends the scan so that the scanned text never starts or ends in the middle of a multiline construct."
msgstr "スキャンされるテキストが複数行構造の途中で開始や終了することがないように@emph{識別}を行ってスキャンを拡張する関数を@code{font-lock-extend-region-functions}に追加する。"

#. type: itemize
#: original_texis/modes.texi:3935
msgid "Use the @code{font-lock-fontify-region-function} hook similarly to extend the scan so that the scanned text never starts or ends in the middle of a multiline construct."
msgstr "同様に、スキャンされるテキストが複数行構造の途中で開始や終了することがないようスキャンを拡張するために、@code{font-lock-fontify-region-function}フックを使用する。"

#. type: itemize
#: original_texis/modes.texi:3941
msgid "Somehow identify the multiline construct right when it gets inserted into the buffer (or at any point after that but before font-lock tries to highlight it), and mark it with a @code{font-lock-multiline} which will instruct font-lock not to start or end the scan in the middle of the construct."
msgstr "複数行構造がバッファーに挿入されたとき(または挿入後にFont Lockがハイライトを試みる前の任意のタイミングで)、何らかの方法によりそれを正しく認識して、Font Lockが複数行構造の途中で開始や終了しないように指示する@code{font-lock-multiline}でそれをマークする。"

#. type: Plain text
#: original_texis/modes.texi:3944
msgid "There are several ways to do rehighlighting of multiline constructs:"
msgstr "複数行構造の再ハイライトを行うにはいくつかの方法があります:"

#. type: itemize
#: original_texis/modes.texi:3951
msgid "Place a @code{font-lock-multiline} property on the construct.  This will rehighlight the whole construct if any part of it is changed.  In some cases you can do this automatically by setting the @code{font-lock-multiline} variable, which see."
msgstr "その構造にたいして正しく@code{font-lock-multiline}を配置する。これによりその構造の一部が変更されると構造全体が再ハイライトされるだろう。あるケースにおいてはそれを参照する@code{font-lock-multiline}変数をセットすることにより自動的にこれを行うことができる。"

#. type: itemize
#: original_texis/modes.texi:3959
msgid "Make sure @code{jit-lock-contextually} is set and rely on it doing its job.  This will only rehighlight the part of the construct that follows the actual change, and will do it after a short delay.  This only works if the highlighting of the various parts of your multiline construct never depends on text in subsequent lines.  Since @code{jit-lock-contextually} is activated by default, this can be an attractive solution."
msgstr "@code{jit-lock-contextually}を確実にセットしてそれが行う処理に委ねる。これにより、実際の変更に続いて構造の一部だけが若干の遅延の後に再ハイライトされるだろう。これは複数行構造のさまざまな箇所のハイライトが後続行のテキストに依存しない場合のみ機能する。@code{jit-lock-contextually}はデフォルトでアクティブなので、これは魅力的な解決策になり得る。"

#. type: itemize
#: original_texis/modes.texi:3965
msgid "Place a @code{jit-lock-defer-multiline} property on the construct.  This works only if @code{jit-lock-contextually} is used, and with the same delay before rehighlighting, but like @code{font-lock-multiline}, it also handles the case where highlighting depends on subsequent lines."
msgstr "その構造上に正しく@code{jit-lock-defer-multiline}を配置する。これは@code{jit-lock-contextually}が使用された場合のみ機能し、再ハイライト前に同様の遅延を伴うが、@code{font-lock-multiline}のように後続行に依存する箇所のハイライトも処理する。"

#. type: itemize
#: original_texis/modes.texi:3976
msgid "If parsing the @emph{syntax} of a construct depends on it being parsed in one single chunk, you can add the @code{syntax-multiline} text property over the construct in question.  The most common use for this is when the syntax property to apply to @samp{FOO} depend on some later text @samp{BAR}: By placing this text property over the whole of @samp{FOO...BAR}, you make sure that any change of @samp{BAR} will also cause the syntax property of @samp{FOO} to be recomputed.  Note: For this to work, the mode needs to add @code{syntax-propertize-multiline} to @code{syntax-propertize-extend-region-functions}."
msgstr "構造(construct)の@emph{構文(syntax)}のパースが単一のchunkでパースされることに依存している場合には、問題となっている構造にテキストプロパティ@code{syntax-multiline}を追加できる。これのもっとも一般的な用途は、@samp{FOO}に適用する構文プロパティ(syntax property)が後出するテキスト@samp{BAR}に依存する場合である。このテキストプロパティを@samp{FOO...BAR}全体に配置することによって、@samp{BAR}にたいする任意の変更が@samp{FOO}の構文プロパティに影響を与えて再計算されることが保証される。これが機能するためには、モードが@code{syntax-propertize-extend-region-functions}に@code{syntax-propertize-multiline}を追加する必要があることに注意。"

#. type: subsubsection
#: original_texis/modes.texi:3982 original_texis/modes.texi:3984
#: original_texis/modes.texi:3985
#, no-wrap
msgid "Font Lock Multiline"
msgstr "Font Lock Multiline"

#. type: menuentry
#: original_texis/modes.texi:3982
msgid "Marking multiline chunks with a text property."
msgstr "テキストプロパティで複数行塊をマークする。"

#. type: node
#: original_texis/modes.texi:3982 original_texis/modes.texi:4031
#, no-wrap
msgid "Region to Refontify"
msgstr "Region to Refontify"

#. type: menuentry
#: original_texis/modes.texi:3982
msgid "Controlling which region gets refontified after a buffer change."
msgstr "バッファー変更後にどのリージョンを再フォント表示するかを制御する。"

#. type: Plain text
#: original_texis/modes.texi:3991
msgid "One way to ensure reliable rehighlighting of multiline Font Lock constructs is to put on them the text property @code{font-lock-multiline}.  It should be present and non-@code{nil} for text that is part of a multiline construct."
msgstr "複数行構造のFont Lockを確実に再ハイライトする方法の1つは、それらをテキストプロパティ@code{font-lock-multiline}にputする方法です。複数行構造の一部であるようなテキストには値が非@code{nil}であるようなこのプロパティが存在するべきです。"

#. type: Plain text
#: original_texis/modes.texi:3999
msgid "When Font Lock is about to highlight a range of text, it first extends the boundaries of the range as necessary so that they do not fall within text marked with the @code{font-lock-multiline} property.  Then it removes any @code{font-lock-multiline} properties from the range, and highlights it.  The highlighting specification (mostly @code{font-lock-keywords}) must reinstall this property each time, whenever it is appropriate."
msgstr "Font Lockがテキスト範囲をハイライトしようとする際は、まずそれらが@code{font-lock-multiline}プロパティでマークされたテキストにならないように必要に応じて範囲の境界を拡張します。それからその範囲のすべての@code{font-lock-multiline}を削除してハイライトします。ハイライト指定(大抵は@code{font-lock-keywords})は、適宜このプロパティを毎回再インストールしなければなりません。"

#. type: Plain text
#: original_texis/modes.texi:4002
msgid "@strong{Warning:} don't use the @code{font-lock-multiline} property on large ranges of text, because that will make rehighlighting slow."
msgstr "@strong{警告:} ハイライトが低速になるので大きなテキスト範囲にたいして@code{font-lock-multiline}を使用してはならない。"

#. type: defvar
#: original_texis/modes.texi:4003
#, no-wrap
msgid "font-lock-multiline"
msgstr "font-lock-multiline"

#. type: defvar
#: original_texis/modes.texi:4010
msgid "If the @code{font-lock-multiline} variable is set to @code{t}, Font Lock will try to add the @code{font-lock-multiline} property automatically on multiline constructs.  This is not a universal solution, however, since it slows down Font Lock somewhat.  It can miss some multiline constructs, or make the property larger or smaller than necessary."
msgstr "@code{font-lock-multiline}変数が@code{t}にセットされているとFont Lockは自動的に複数行構造にたいして@code{font-lock-multiline}プロパティの追加を試みる。しかしこれによりFont Lockが幾分遅くなるので普遍的解決策ではない。これは何らかの複数行構造を見逃したり、必要なものより多く、または少なくプロパティをセットするかもしれない。"

#. type: defvar
#: original_texis/modes.texi:4015
msgid "For elements whose @var{matcher} is a function, the function should ensure that submatch 0 covers the whole relevant multiline construct, even if only a small subpart will be highlighted.  It is often just as easy to add the @code{font-lock-multiline} property by hand."
msgstr "@var{matcher}が関数であるような要素は、たとえ少量のサブパート(subpart)だけがハイライトされるような場合でも、submatch 0(訳注:正規表現の後方参照においてsubmatch 0はマッチした文字列全体を指す)が関連する複数行構造全体を確実に網羅するようにすべきである。単に手動で@code{font-lock-multiline}を追加するのが容易な場合も多々ある。"

#. type: Plain text
#: original_texis/modes.texi:4026
msgid "The @code{font-lock-multiline} property is meant to ensure proper refontification; it does not automatically identify new multiline constructs.  Identifying them requires that Font Lock mode operate on large enough chunks at a time.  This will happen by accident on many cases, which may give the impression that multiline constructs magically work.  If you set the @code{font-lock-multiline} variable non-@code{nil}, this impression will be even stronger, since the highlighting of those constructs which are found will be properly updated from then on.  But that does not work reliably."
msgstr "@code{font-lock-multiline}プロパティは正しい再フォント表示を確実に行うことを意図しています。これは新たな複数行構造を自動的に認識しません。それらを認識するためにはFont Lockが一度に十分な大きさのchunkを処理することを要求します。これは多くの場合にアクシデントにより発生し得るかもしれないので、複数行構造が不可解に機能するような印象を与えるかもしれません。変数@code{font-lock-multiline}を非@code{nil}にセットした場合には、発見されたこれらの構造にたいするハイライトは変数をセットした後は正しく更新されるので、さらにこの印象が強くなるでしょう。しかしこれは信頼性をもって機能しません。"

#. type: Plain text
#: original_texis/modes.texi:4030
msgid "To find multiline constructs reliably, you must either manually place the @code{font-lock-multiline} property on the text before Font Lock mode looks at it, or use @code{font-lock-fontify-region-function}."
msgstr "信頼性を保ち複数行構造を見つけるためには、Font Lockが調べる前にテキストの@code{font-lock-multiline}プロパティを手動で配置するか、@code{font-lock-fontify-region-function}を使用しなければなりません。"

#. type: subsubsection
#: original_texis/modes.texi:4032
#, no-wrap
msgid "Region to Fontify after a Buffer Change"
msgstr "Region to Fontify after a Buffer Change"

#. type: Plain text
#: original_texis/modes.texi:4039
msgid "When a buffer is changed, the region that Font Lock refontifies is by default the smallest sequence of whole lines that spans the change.  While this works well most of the time, sometimes it doesn't---for example, when a change alters the syntactic meaning of text on an earlier line."
msgstr "バッファーが変更されたときFont Lockが再フォント表示するリージョンは、デフォルトではその変更に関連する最小の行全体からなるシーケンスです。これはほとんどの場合は良好に機能しますが、うまく機能しないとき(たとえば変更がそれより前の行のテキストの構文的な意味を変更してしまうとき)もあります。"

#. type: Plain text
#: original_texis/modes.texi:4042
msgid "You can enlarge (or even reduce) the region to refontify by setting the following variable:"
msgstr "以下の変数をセットすることにより、再フォント表示するリージョンを拡張(または縮小さえ)することができます:"

#. type: defvar
#: original_texis/modes.texi:4043
#, no-wrap
msgid "font-lock-extend-after-change-region-function"
msgstr "font-lock-extend-after-change-region-function"

#. type: defvar
#: original_texis/modes.texi:4046
msgid "This buffer-local variable is either @code{nil} or a function for Font Lock mode to call to determine the region to scan and fontify."
msgstr "このバッファーローカル変数は@code{nil}、またはFont Lockモードにたいしてスキャンしてフォント表示すべきリージョンを決定するために呼び出される関数である。"

#. type: defvar
#: original_texis/modes.texi:4055
msgid "The function is given three parameters, the standard @var{beg}, @var{end}, and @var{old-len} from @code{after-change-functions} (@pxref{Change Hooks}).  It should return either a cons of the beginning and end buffer positions (in that order) of the region to fontify, or @code{nil} (which means choose the region in the standard way).  This function needs to preserve point, the match-data, and the current restriction.  The region it returns may start or end in the middle of a line."
msgstr "この関数には標準的な@var{beg}と@var{end}、および@code{after-change-functions}の@var{old-len} (@ref{Change Hooks}を参照)という3つのパラメーターが渡される。この関数はフォント表示するリージョンのバッファー位置の開始と終了(この順)からなるコンスセル、または@code{nil} (標準的な方法でリージョンを選択することを意味する)のいずれかをリターンすること。この関数はポイント位置、match-data、カレントのナローイングを保つ必要がある。これがリターンするリージョンは、行の途中で開始や終了するかもしれない。"

#. type: defvar
#: original_texis/modes.texi:4058
msgid "Since this function is called after every buffer change, it should be reasonably fast."
msgstr "この関数はバッファーを変更するたびに呼び出されるので有意に高速であること。"

#. type: cindex
#: original_texis/modes.texi:4062
#, no-wrap
msgid "parser-based font-lock"
msgstr "parser-based font-lock"

#. type: Plain text
#: original_texis/modes.texi:4072
msgid "Besides simple syntactic font lock and regexp-based font lock, Emacs also provides complete syntactic font lock with the help of a parser.  Currently, Emacs uses the tree-sitter library (@pxref{Parsing Program Source}) for this purpose."
msgstr "シンプルな構文的Font LockやregexpベースのFont Lockに加えて、Emacsはパーサーを用いた完全な構文的Font Lockも提供します。Emacsでは現在のところは、この目的のためにtree-sitterライブラリーを使用しています(@ref{Parsing Program Source}を参照)。"

#. type: Plain text
#: original_texis/modes.texi:4076
msgid "Parser-based font lock and other font lock mechanisms are not mutually exclusive.  By default, if enabled, parser-based font lock runs first, replacing syntactic font lock, followed by regexp-based font lock."
msgstr "パーサーベースのFont Lockそれ以外のFont Lockのメカニズムは互いに排他ではありません。もしパーサーベースのFont Lockが有効なら、最初に構文的Font Lock置き換わり実行されて、その後にregexpベースのFont Lockが実行されます。"

#. type: Plain text
#: original_texis/modes.texi:4081
msgid "Although parser-based font lock doesn't share the same customization variables with regexp-based font lock, it uses similar customization schemes.  The tree-sitter counterpart of @code{font-lock-keywords} is @code{treesit-font-lock-settings}."
msgstr "パーサーベースのFont LockがregexpベースのFont Lockと同じカスタマイズ変数を共有しないとしても、カスタマイズでは類似したスキームを使用します。tree-sitterにおいて@code{font-lock-keywords}のカウンターパートとなるのが@code{treesit-font-lock-settings}です。"

#. type: cindex
#: original_texis/modes.texi:4082
#, no-wrap
msgid "tree-sitter fontifications, overview"
msgstr "tree-sitter fontifications, overview"

#. type: cindex
#: original_texis/modes.texi:4083
#, no-wrap
msgid "fontifications with tree-sitter, overview"
msgstr "fontifications with tree-sitter, overview"

#. type: Plain text
#: original_texis/modes.texi:4085
msgid "In general, tree-sitter fontification works as follows:"
msgstr "tree-sitterのフォント表示は一般的には以下のように機能します:"

#. type: itemize
#: original_texis/modes.texi:4091
msgid "A Lisp program (usually, part of a major mode) provides a @dfn{query} consisting of @dfn{patterns}, each pattern associated with a @dfn{capture name}."
msgstr "Lispプログラム(通常はメジャーモードの一部)が@dfn{パターン(pattern)}から構成される@dfn{query}を提供する。ここでパターンはそれぞれ@dfn{キャプチャ名(capture name)}に関連付けられている。"

#. type: itemize
#: original_texis/modes.texi:4096
msgid "The tree-sitter library finds the nodes in the parse tree that match these patterns, tags the nodes with the corresponding capture names, and returns them to the Lisp program."
msgstr "tree-sitterライブラリーがこれらのパターンにマッチするパースツリー(parse tree: 解析木)からノードを探して、そのノードに対応するキャプチャ名でタグ付けして、それらをLispプログラムにリターンする。"

#. type: itemize
#: original_texis/modes.texi:4103
msgid "The Lisp program uses the returned nodes to highlight the portions of buffer text corresponding to each node as appropriate, using the tagged capture names of the nodes to determine the correct fontification.  For example, a node tagged @code{font-lock-keyword} would be highlighted in @code{font-lock-keyword} face."
msgstr "Lispプログラムはリターンされたノードを用いて、それぞれのノードに対応するバッファーのテキスト部分にたいして、ノードにタグ付けされたキャプチャ名から正しいフォント表示を決定して適切にハイライトする。たとえば@code{font-lock-keyword}とタグ付けされたノードなら、@code{font-lock-keyword}フェイスによってハイライトされることになるだろう。"

#. type: Plain text
#: original_texis/modes.texi:4107
msgid "For more information about queries, patterns, and capture names, see @ref{Pattern Matching}."
msgstr "クエリー、パターン、キャプチャ名ｎ関する詳細については@ref{Pattern Matching}を参照してください。"

#. type: Plain text
#: original_texis/modes.texi:4112
msgid "To set up tree-sitter fontification, a major mode should first set @code{treesit-font-lock-settings} with the output of @code{treesit-font-lock-rules}, then call @code{treesit-major-mode-setup}."
msgstr "tree-sitterのフォント表示をセットアップするためには、まずメジャーモードが@code{treesit-font-lock-rules}の出力を@code{treesit-font-lock-settings}にセットしてから@code{treesit-major-mode-setup}を呼び出す必要があります。"

#. type: defun
#: original_texis/modes.texi:4113
#, no-wrap
msgid "treesit-font-lock-rules &rest query-specs"
msgstr "treesit-font-lock-rules &rest query-specs"

#. type: defun
#: original_texis/modes.texi:4118
msgid "This function is used to set @code{treesit-font-lock-settings}.  It takes care of compiling queries and other post-processing, and outputs a value that @code{treesit-font-lock-settings} accepts.  Here's an example:"
msgstr "これは@code{treesit-font-lock-settings}のセットに使用される関数である。この関数はクエリーのコンパイルやその他の後処理を受けもち、@code{treesit-font-lock-settings}が受け入れる値を出力する。以下は例:"

#. type: group
#: original_texis/modes.texi:4130
#, no-wrap
msgid ""
"(treesit-font-lock-rules\n"
" :language 'javascript\n"
" :feature 'constant\n"
" :override t\n"
" '((true) @@font-lock-constant-face\n"
"   (false) @@font-lock-constant-face)\n"
" :language 'html\n"
" :feature 'script\n"
" \"(script_element) @@font-lock-builtin-face\")\n"
msgstr ""
"(treesit-font-lock-rules\n"
" :language 'javascript\n"
" :feature 'constant\n"
" :override t\n"
" '((true) @@font-lock-constant-face\n"
"   (false) @@font-lock-constant-face)\n"
" :language 'html\n"
" :feature 'script\n"
" \"(script_element) @@font-lock-builtin-face\")\n"

#. type: defun
#: original_texis/modes.texi:4137
msgid "This function takes a series of @var{query-spec}s, where each @var{query-spec} is a @var{query} preceded by one or more @var{keyword}/@var{value} pairs.  Each @var{query} is a tree-sitter query in either the string, s-expression, or compiled form."
msgstr "この関数は一連の@var{query-spec} (@var{query-spec}とは1つ以上の@var{keyword}/@var{value}が前置された@var{query}のこと)を受け取る。@var{query}とはそれぞれ文字列、S式、あるいはコンパイル済みフォームのいずれかによるtree-sitterクエリーのこと。"

#. type: defun
#: original_texis/modes.texi:4146
msgid "For each @var{query}, the @var{keyword}/@var{value} pairs that precede it add meta information to it.  The @code{:language} keyword declares @var{query}'s language.  The @code{:feature} keyword sets the feature name of @var{query}.  Users can control which features are enabled with @code{treesit-font-lock-level} and @code{treesit-font-lock-feature-list} (described below).  These two keywords are mandatory."
msgstr "@var{query}それぞれの前にはクエリーにメタ情報を付加する@var{keyword}/@var{value}ペアーが前置される。キーワード@code{:language}は@var{query}の言語を宣言、キーワード@code{:feature}は@var{query}のfeature名をセットする。ユーザーｈ@code{treesit-font-lock-level}と@code{treesit-font-lock-feature-list}によって、どのfeatureを有効にするかを制御できる(後述)。いずれのキーワードも必須。"

#. type: defun
#: original_texis/modes.texi:4148
msgid "Other keywords are optional:"
msgstr "その他のキーワードはオプションである:"

#. type: multitable
#: original_texis/modes.texi:4151
msgid "@headitem Keyword"
msgstr "@headitem キーワード"

#. type: multitable
#: original_texis/modes.texi:4151
msgid "Value"
msgstr "値"

#. type: multitable
#: original_texis/modes.texi:4151
msgid "Description"
msgstr "意味"

#. type: item
#: original_texis/modes.texi:4151
#, no-wrap
msgid "@code{:override} @tab @code{nil}"
msgstr "@code{:override} @tab @code{nil}"

#. type: multitable
#: original_texis/modes.texi:4153
msgid "If the region already has a face, discard the new face"
msgstr "そのリージョンにすでにフェイスがセットされていれば新たなフェイスを破棄"

#. type: item
#: original_texis/modes.texi:4153
#, no-wrap
msgid "@tab @code{t} @tab Always apply the new face"
msgstr "@tab @code{t} @tab 常に新たなフェイスを適用する"

#. type: item
#: original_texis/modes.texi:4154
#, no-wrap
msgid "@tab @code{append} @tab Append the new face to existing ones"
msgstr "@tab @code{append} @tab 既存フェイスの後に新たなフェイスを追加"

#. type: item
#: original_texis/modes.texi:4155
#, no-wrap
msgid "@tab @code{prepend} @tab Prepend the new face to existing ones"
msgstr "@tab @code{prepend} @tab 既存フェイスの前に新たなフェイスを追加"

#. type: item
#: original_texis/modes.texi:4156
#, no-wrap
msgid "@tab @code{keep} @tab Fill-in regions without an existing face"
msgstr "@tab @code{keep} @tab 既存フェイスなしでリージョンをフィルする"

#. type: defun
#: original_texis/modes.texi:4165
msgid "Lisp programs mark patterns in @var{query} with capture names (names that start with @code{@@}), and tree-sitter will return matched nodes tagged with those same capture names.  For the purpose of fontification, capture names in @var{query} should be face names like @code{font-lock-keyword-face}.  The captured node will be fontified with that face."
msgstr "Lispプログラムは@var{query}内のパターンをキャプチャ名(@code{@@}で始まる名前)でマークする。そしてtree-sitterは同じキャプチャ名でタグ付けされたノードをリターンする。フォント表示という目的のために、@var{query}のキャプチャ名は@code{font-lock-keyword-face}のようなフェイス名であること。キャプチャされたノードはそのフェイスによってフォント表示されることになる。"

#. type: findex
#: original_texis/modes.texi:4166
#, no-wrap
msgid "treesit-fontify-with-override"
msgstr "treesit-fontify-with-override"

#. type: defun
#: original_texis/modes.texi:4174
msgid "A capture name can also be a function name, in which case the function is called with 4 arguments: @var{node} and @var{override}, @var{start} and @var{end}, where @var{node} is the node itself, @var{override} is the @code{:override} property of the rule which captured this node, and @var{start} and @var{end} limit the region which this function should fontify.  (If this function wants to respect the @var{override} argument, it can use @code{treesit-fontify-with-override}.)"
msgstr "キャプチャ名は関数でもよい。この場合には@var{node} and @var{override}、@var{start}、@var{end}という4つの引数で呼び出される関数であること。ここで@var{node}はそのノード自身、@var{override}はそのノードにキャプチャされたルールの@code{:override}プロパティ、@var{start}と@var{end}はこの関数がフォント表示するべきリージョンを制限する(この関数が@var{override}を尊重したければ@code{treesit-fontify-with-override}を使用できる)。"

#. type: defun
#: original_texis/modes.texi:4177
msgid "Beyond the 4 arguments presented, this function should accept more arguments as optional arguments for future extensibility."
msgstr "機能拡張を可能にするために、その関数は5つ以上の引数が与えられた場合にはそれらをオプションの引数として受け入れる必要がある。"

#. type: defun
#: original_texis/modes.texi:4181
msgid "If a capture name is both a face and a function, the face takes priority.  If a capture name is neither a face nor a function, it is ignored."
msgstr "キャプチャ名がフェイスと関数のどちらにも当てはまる場合にはフェイスが優先される。フェイスにも関数にも当てはまらないキャプチャ名は無視される。"

#. type: defvar
#: original_texis/modes.texi:4184
#, no-wrap
msgid "treesit-font-lock-feature-list"
msgstr "treesit-font-lock-feature-list"

#. type: defvar
#: original_texis/modes.texi:4189
msgid "This is a list of lists of feature symbols.  Each element of the list is a list that represents a decoration level.  @code{treesit-font-lock-level} controls which levels are activated."
msgstr "これはfeatureシンボル(feature symbol: 機能シンボル)のリストのリスト。このリストの要素はそれぞれ装飾レベルを表すためのリストである。どのレベルをアクティブにするかを制御するのが@code{treesit-font-lock-level}。"

#. type: defvar
#: original_texis/modes.texi:4195
msgid "Each element of the list is a list of the form @w{@code{(@var{feature} @dots{})}}, where each @var{feature} corresponds to the @code{:feature} value of a query defined in @code{treesit-font-lock-rules}.  Removing a feature symbol from this list disables the corresponding query during font-lock."
msgstr "リストの要素はそれぞれ@w{@code{(@var{feature} @dots{})}}という形式のリスト。ここで@var{feature}はそれぞれ@code{treesit-font-lock-rules}内で定義されるクエリーで対応する@code{:feature}の値。このリストからfeatureシンボルを削除することによって、font-lockの間に対応するクエリーが無効なる。"

#. type: defvar
#: original_texis/modes.texi:4202
msgid "Common feature names, for many programming languages, include @code{definition}, @code{type}, @code{assignment}, @code{builtin}, @code{constant}, @code{keyword}, @code{string-interpolation}, @code{comment}, @code{doc}, @code{string}, @code{operator}, @code{preprocessor}, @code{escape-sequence}, and @code{key}.  Major modes are free to subdivide or extend these common features."
msgstr "多くのプログラミング言語にとって一般的なfeature名には@code{definition}、@code{type}、@code{assignment}、@code{builtin}、@code{constant}、@code{keyword}、@code{string-interpolation}、@code{comment}、@code{doc}、@code{string}、@code{operator}、@code{preprocessor}、@code{escape-sequence}、@code{key}が含まれる。メジャーモードはこれらの一般的なfeatureを自由に分割あるいは拡張ができる。"

#. type: defvar
#: original_texis/modes.texi:4211
msgid "Some of these features warrant some explanation: @code{definition} highlights whatever is being defined, e.g., the function name in a function definition, the struct name in a struct definition, the variable name in a variable definition; @code{assignment} highlights whatever is being assigned to, e.g., the variable or field in an assignment statement; @code{key} highlights keys in key-value pairs, e.g., keys in a JSON object or Python dictionary; @code{doc} highlights docstrings or doc-comments."
msgstr "これらのfeatureのうちいくつかは説明が必要だろう。@code{definition}は何であれ定義されつつあるものをハイライトする(関数定義の関数名、構造体定義構造体名、変数定義の変数など)。@code{assignment}は何であれ割り当てされつつあるものをハイライトする(割り当て命令の変数やフィールドなど)。@code{key}はキー/値ペアーのキーをハイライトする(JSONオブジェクトのキーやPythonのdictionaryなど)。@code{doc}はdoc文字列やdocコメントをハイライトする。"

#. type: defvar
#: original_texis/modes.texi:4213
msgid "For example, the value of this variable could be:"
msgstr "この変数の値はたとえば以下のようになるかもしれない:"

#. type: group
#: original_texis/modes.texi:4218
#, no-wrap
msgid ""
"((comment string doc) ; level 1\n"
" (function-name keyword type builtin constant) ; level 2\n"
" (variable-name string-interpolation key)) ; level 3\n"
msgstr ""
"((comment string doc) ; level 1\n"
" (function-name keyword type builtin constant) ; level 2\n"
" (variable-name string-interpolation key)) ; level 3\n"

#. type: defvar
#: original_texis/modes.texi:4223
msgid "Major modes should set this variable before calling @code{treesit-major-mode-setup}."
msgstr "メジャーモードは@code{treesit-major-mode-setup}の呼び出し前にこの変数をセットすること。"

#. type: findex
#: original_texis/modes.texi:4224
#, no-wrap
msgid "treesit-font-lock-recompute-features"
msgstr "treesit-font-lock-recompute-features"

#. type: defvar
#: original_texis/modes.texi:4230
msgid "For this variable to take effect, a Lisp program should call @code{treesit-font-lock-recompute-features} (which resets @code{treesit-font-lock-settings} accordingly), or @code{treesit-major-mode-setup} (which calls @code{treesit-font-lock-recompute-features})."
msgstr "この変数が効力をもつためには、Lispプログラムが(適宜@code{treesit-font-lock-settings}をリセットする)@code{treesit-font-lock-recompute-features}、または(@code{treesit-font-lock-recompute-features}を呼び出す)@code{treesit-major-mode-setup}を呼び出す必要がある。"

#. type: defvar
#: original_texis/modes.texi:4232
#, no-wrap
msgid "treesit-font-lock-settings"
msgstr "treesit-font-lock-settings"

#. type: defvar
#: original_texis/modes.texi:4236
msgid "A list of settings for tree-sitter based font lock.  The exact format of each setting is considered internal.  One should always use @code{treesit-font-lock-rules} to set this variable."
msgstr "tree-sitterベースのfont lock用のセッティングのリスト。セッティングそれぞれの正確なフォーマットは内部的なフォーマットとみなされる。この変数のセットには、常に@code{treesit-font-lock-rules}を使うこと。"

#. type: Plain text
#: original_texis/modes.texi:4246
msgid "Multi-language major modes should provide range functions in @code{treesit-range-functions}, and Emacs will set the ranges accordingly before fontifing a region (@pxref{Multiple Languages})."
msgstr "複数言語用のメジャーモードは@code{treesit-range-functions}でrange関数(range function: 範囲関数)を提供する必要があり、Emacsはリージョンのフォント表示を行う前にrangeを適宜セットします(@ref{Multiple Languages}を参照)。"

#. type: section
#: original_texis/modes.texi:4248
#, no-wrap
msgid "Automatic Indentation of code"
msgstr "Automatic Indentation of code"

#. type: Plain text
#: original_texis/modes.texi:4257
msgid "For programming languages, an important feature of a major mode is to provide automatic indentation.  There are two parts: one is to decide what is the right indentation of a line, and the other is to decide when to reindent a line.  By default, Emacs reindents a line whenever you type a character in @code{electric-indent-chars}, which by default only includes Newline.  Major modes can add chars to @code{electric-indent-chars} according to the syntax of the language."
msgstr "プログラミング言語のメジャーモードにとって、自動的なインデントの提供は重要な機能です。これには2つのパートがあります。1つ目は正しい行のインデントが何か、そして2つ目はいつ行を再インデントするかの判断です。デフォルトでは@code{electric-indent-chars}に含まれる文字(デフォルトでは改行のみ)をタイプしたとき、Emacsは常に行を再インデントします。メジャーモードはその言語の構文に合わせて@code{electric-indent-chars}に文字を追加できます。"

#. type: Plain text
#: original_texis/modes.texi:4264
msgid "Deciding what is the right indentation is controlled in Emacs by @code{indent-line-function} (@pxref{Mode-Specific Indent}).  For some modes, the @emph{right} indentation cannot be known reliably, typically because indentation is significant so several indentations are valid but with different meanings.  In that case, the mode should set @code{electric-indent-inhibit} to make sure the line is not constantly re-indented against the user's wishes."
msgstr "正しいインデントの決定は@code{indent-line-function}によりEmacs内で制御されます(@ref{Mode-Specific Indent}を参照)。いくつかのモードでは@emph{右}へのインデントは信頼性がないことが知られています。これは通常は複数のインデントが有効であり、それぞれが異なる意味をもつのでインデント自体が重要だからです。そのような場合には、そのモードは行が常にユーザーの意に反して行が毎回再インデントされないことを保証するために@code{electric-indent-inhibit}をセットするべきです。"

#. type: Plain text
#: original_texis/modes.texi:4273
msgid "Writing a good indentation function can be difficult and to a large extent it is still a black art.  Many major mode authors will start by writing a simple indentation function that works for simple cases, for example by comparing with the indentation of the previous text line.  For most programming languages that are not really line-based, this tends to scale very poorly: improving such a function to let it handle more diverse situations tends to become more and more difficult, resulting in the end with a large, complex, unmaintainable indentation function which nobody dares to touch."
msgstr "よいインデント関数の記述は難しく、その広範な領域において未だ黒魔術の域を脱していません。メジャーモード作者の多くは、単純なケース(たとえば前のテキスト行のインデントとの比較)にたいして機能する、単純な関数の記述からスタートすることでしょう。実際には行ベースではないほとんどのプログラミング言語にたいして、これは貧弱なスケールになりがちです。そのような関数にたいして、より多様な状況を処理するような改良を行うと関数はより一層複雑になり、最終的な結果は誰にも触れようとする気を起こさせない、巨大で複雑な保守不可能のインデント関数になる傾向があります。"

#. type: Plain text
#: original_texis/modes.texi:4280
msgid "A good indentation function will usually need to actually parse the text, according to the syntax of the language.  Luckily, it is not necessary to parse the text in as much detail as would be needed for a compiler, but on the other hand, the parser embedded in the indentation code will want to be somewhat friendly to syntactically incorrect code."
msgstr "よいインデント関数は、通常はその言語の構文に応じて実際にテキストをパースする必要があるでしょう。幸運なことにこのテキストパースはコンパイラーが要するほど詳細である必要はないでしょうが、その一方でインデントコードに埋め込まれたパーサーは構文的に不正なコードにたいして、コンパイラーより幾分寛容な振る舞いを求められるでしょう。"

#. type: Plain text
#: original_texis/modes.texi:4294
msgid "Good maintainable indentation functions usually fall into two categories: either parsing forward from some safe starting point until the position of interest, or parsing backward from the position of interest.  Neither of the two is a clearly better choice than the other: parsing backward is often more difficult than parsing forward because programming languages are designed to be parsed forward, but for the purpose of indentation it has the advantage of not needing to guess a safe starting point, and it generally enjoys the property that only a minimum of text will be analyzed to decide the indentation of a line, so indentation will tend to be less affected by syntax errors in some earlier unrelated piece of code.  Parsing forward on the other hand is usually easier and has the advantage of making it possible to reindent efficiently a whole region at a time, with a single parse."
msgstr "保守可能なよいインデント関数は、通常は2つのカテゴリーに落ち着きます。どちらも何らかの安全な開始ポイントから、関心のある位置まで前方か後方へパースを行います。この2つの方法は、いずれも一方が他方に明快に優る選択ではありません。後方へのパースはプログラミング言語が前方にパースされるようデザインされているため、前方へのパースに比べて難しいことが多々ありますが、インデントという目的においては安全な開始ポイントを推測する必要がないという利点があり、一般的にある行のインデントの判断のために分析を要するのは最小限のテキストだけという特性に恵まれているので、前の無関係なコード片内にある何らかの構文エラーの影響をインデントが受けにくくなる傾向があります。一方で前方へのパースは通常はより簡単であり、一度のパースでリージョン全体を効果的に再インデントすることが可能になるという利点があります。"

#.  FIXME: documentation?
#. type: Plain text
#: original_texis/modes.texi:4305
msgid "Rather than write your own indentation function from scratch, it is often preferable to try and reuse some existing ones or to rely on a generic indentation engine.  There are sadly few such engines.  The CC-mode indentation code (used with C, C++, Java, Awk and a few other such modes) has been made more generic over the years, so if your language seems somewhat similar to one of those languages, you might try to use that engine.  Another one is SMIE which takes an approach in the spirit of Lisp sexps and adapts it to non-Lisp languages. Yet another one is to rely on a full-blown parser, for example, the tree-sitter library."
msgstr "インデント関数をスクラッチから記述するよりも、既存のインデント関数の使用と再利用、または一般的なインデントエンジンに委ねるほうが優る場合がしばしばあります。しかしそのようなエンジンは悲しむべきほど少数しかありません。(C、C++、Java、Awk、およびその類のモードに使用される)CCモードのインデントコードは年月を経てより一般化されてきているので、あなたの言語にこれらの言語と何らかの類似点があるなら、このエンジンの使用を試みるかもしれません。もう一方のSMIEはLispのsexp精神によるアプローチを採用して、それを非Lisp言語に適応します。他にもたとえばtree-sitterライブラリーのような本格的なパーサーに頼る方法もあります。"

#. type: cindex
#: original_texis/modes.texi:4309 original_texis/modes.texi:4311
#: original_texis/modes.texi:4313
#, no-wrap
msgid "SMIE"
msgstr "SMIE"

#. type: menuentry
#: original_texis/modes.texi:4309
msgid "A simple minded indentation engine."
msgstr "SMIE: Simple Minded Indentation Engine(純真なインデントエンジン)"

#. type: subsection
#: original_texis/modes.texi:4309 original_texis/modes.texi:4968
#: original_texis/modes.texi:4969
#, no-wrap
msgid "Parser-based Indentation"
msgstr "Parser-based Indentation"

#. type: menuentry
#: original_texis/modes.texi:4309
msgid "Parser-based indentation engine."
msgstr "パーサーベースのインデントエンジン"

#. type: subsection
#: original_texis/modes.texi:4312
#, no-wrap
msgid "Simple Minded Indentation Engine"
msgstr "Simple Minded Indentation Engine"

#. type: Plain text
#: original_texis/modes.texi:4320
msgid "SMIE is a package that provides a generic navigation and indentation engine.  Based on a very simple parser using an operator precedence grammar, it lets major modes extend the sexp-based navigation of Lisp to non-Lisp languages as well as provide a simple to use but reliable auto-indentation."
msgstr "SMIEは一般的な操作とインデントを提供するエンジンです。これは演算子順位文法(operator precedence grammar)を使用する非常にシンプルなパーサーにもとづいたエンジンであり、メジャーモードがLispのS式ベースの操作を非Lisp言語に拡張するのを助けるとともにシンプルに使用できるにも関わらず、信頼できる自動インデントを提供します。"

#. type: Plain text
#: original_texis/modes.texi:4333
msgid "Operator precedence grammar is a very primitive technology for parsing compared to some of the more common techniques used in compilers.  It has the following characteristics: its parsing power is very limited, and it is largely unable to detect syntax errors, but it has the advantage of being algorithmically efficient and able to parse forward just as well as backward.  In practice that means that SMIE can use it for indentation based on backward parsing, that it can provide both @code{forward-sexp} and @code{backward-sexp} functionality, and that it will naturally work on syntactically incorrect code without any extra effort.  The downside is that it also means that most programming languages cannot be parsed correctly using SMIE, at least not without resorting to some special tricks (@pxref{SMIE Tricks})."
msgstr "演算子順位文法はコンパイラー内で使用されるより一般的なパーサーと比較すると非常に原始的なパーステクノロジーです。このパーサーには次のような特徴があります。このパーサーのパース能力は非常に限定的で構文エラーを大概は検出できません。しかしアルゴリズム的に前方パースと同様に後方パースを効果的に行うことが可能です。実際にそれはSMIEが後方パースにもとづくインデントを使用でき、@code{forward-sexp}と@code{backward-sexp}の両方の機能を提供できるとともに、特別な努力を要さずに構文的に不正なコードにたいして自然に機能するであろうことを意味します。欠点はほとんどのプログラミング言語は、少なくとも何らかの特別なトリック(@ref{SMIE Tricks}を参照)で再分類しなければSMIEを使用して正しくパースできないことをも意味することです。"

#. type: node
#: original_texis/modes.texi:4344 original_texis/modes.texi:4346
#, no-wrap
msgid "SMIE setup"
msgstr "SMIE setup"

#. type: menuentry
#: original_texis/modes.texi:4344
msgid "SMIE setup and features."
msgstr "SMIEのセットアップと機能。"

#. type: subsubsection
#: original_texis/modes.texi:4344 original_texis/modes.texi:4393
#: original_texis/modes.texi:4394
#, no-wrap
msgid "Operator Precedence Grammars"
msgstr "Operator Precedence Grammars"

#. type: menuentry
#: original_texis/modes.texi:4344
msgid "A very simple parsing technique."
msgstr "非常にシンプルなパース技術。"

#. type: node
#: original_texis/modes.texi:4344 original_texis/modes.texi:4481
#, no-wrap
msgid "SMIE Grammar"
msgstr "SMIE Grammar"

#. type: menuentry
#: original_texis/modes.texi:4344
msgid "Defining the grammar of a language."
msgstr "言語の文法を定義する。"

#. type: node
#: original_texis/modes.texi:4344 original_texis/modes.texi:4558
#, no-wrap
msgid "SMIE Lexer"
msgstr "SMIE Lexer"

#. type: menuentry
#: original_texis/modes.texi:4344
msgid "Defining tokens."
msgstr "トークンの定義。"

#. type: node
#: original_texis/modes.texi:4344 original_texis/modes.texi:4616
#, no-wrap
msgid "SMIE Tricks"
msgstr "SMIE Tricks"

#. type: menuentry
#: original_texis/modes.texi:4344
msgid "Working around the parser's limitations."
msgstr "パーサー制限の回避策。"

#. type: node
#: original_texis/modes.texi:4344 original_texis/modes.texi:4694
#, no-wrap
msgid "SMIE Indentation"
msgstr "SMIE Indentation"

#. type: menuentry
#: original_texis/modes.texi:4344
msgid "Specifying indentation rules."
msgstr "インデントルールの指定。"

#. type: node
#: original_texis/modes.texi:4344 original_texis/modes.texi:4770
#, no-wrap
msgid "SMIE Indentation Helpers"
msgstr "SMIE Indentation Helpers"

#. type: menuentry
#: original_texis/modes.texi:4344
msgid "Helper functions for indentation rules."
msgstr "インデントルールにたいするヘルパー関数。"

#. type: node
#: original_texis/modes.texi:4344 original_texis/modes.texi:4831
#, no-wrap
msgid "SMIE Indentation Example"
msgstr "SMIE Indentation Example"

#. type: menuentry
#: original_texis/modes.texi:4344
msgid "Sample indentation rules."
msgstr "インデントルールの例。"

#. type: node
#: original_texis/modes.texi:4344 original_texis/modes.texi:4924
#, no-wrap
msgid "SMIE Customization"
msgstr "SMIE Customization"

#. type: menuentry
#: original_texis/modes.texi:4344
msgid "Customizing indentation."
msgstr "インデントのカスタマイズ。"

#. type: subsubsection
#: original_texis/modes.texi:4347
#, no-wrap
msgid "SMIE Setup and Features"
msgstr "SMIE Setup and Features"

#. type: Plain text
#: original_texis/modes.texi:4354
msgid "SMIE is meant to be a one-stop shop for structural navigation and various other features which rely on the syntactic structure of code, in particular automatic indentation.  The main entry point is @code{smie-setup} which is a function typically called while setting up a major mode."
msgstr "SMIEは構造的な操作とコードの構造的構造にもとづくその他さまざまな機能、特に自動インデントにたいするワンストップショップ(一カ所で必要な全ての買い物ができる店やそのような場所)であることを意図しています。メインのエントリーポイントは@code{smie-setup}で、これは通常はメジャーモードセットアップの間に呼び出される関数です。"

#. type: defun
#: original_texis/modes.texi:4355
#, no-wrap
msgid "smie-setup grammar rules-function &rest keywords"
msgstr "smie-setup grammar rules-function &rest keywords"

#. type: defun
#: original_texis/modes.texi:4362
msgid "Setup SMIE navigation and indentation.  @var{grammar} is a grammar table generated by @code{smie-prec2->grammar}.  @var{rules-function} is a set of indentation rules for use on @code{smie-rules-function}.  @var{keywords} are additional arguments, which can include the following keywords:"
msgstr "SMIEの操作とインデントをセットアップする。@var{grammar}は@code{smie-prec2->grammar}により生成される文法テーブル(grammar table)、@var{rules-function}は@code{smie-rules-function}で使用されるインデントルールのセット、@var{keywords}は追加の引数であり以下のキーワードを含むことができる:"

#. type: itemize
#: original_texis/modes.texi:4365
msgid "@code{:forward-token} @var{fun}: Specify the forward lexer to use."
msgstr "@code{:forward-token} @var{fun}: 使用する前方lexer(lexer=lexical analyzer: 字句解析プログラム)を指定する。"

#. type: itemize
#: original_texis/modes.texi:4367
msgid "@code{:backward-token} @var{fun}: Specify the backward lexer to use."
msgstr "@code{:backward-token} @var{fun}: 使用する後方lexerを指定する。"

#. type: Plain text
#: original_texis/modes.texi:4377
msgid "Calling this function is sufficient to make commands such as @code{forward-sexp}, @code{backward-sexp}, and @code{transpose-sexps} be able to properly handle structural elements other than just the paired parentheses already handled by syntax tables.  For example, if the provided grammar is precise enough, @code{transpose-sexps} can correctly transpose the two arguments of a @code{+} operator, taking into account the precedence rules of the language."
msgstr "この関数を呼び出せば@code{forward-sexp}、@code{backward-sexp}、@code{transpose-sexps}のようなコマンドが、すでに構文テーブルにより処理されている単なるカッコのペア以外の、構造的な要素を正しく扱うことができるようになります。たとえば与えられた文法が十分に明快ならば、@code{transpose-sexps}はその言語の優先順位のルールを考慮して@code{+}演算子の2つの引数を正しく入れ替えることができます。"

#. type: Plain text
#: original_texis/modes.texi:4383
msgid "Calling @code{smie-setup} is also sufficient to make @key{TAB} indentation work in the expected way, extends @code{blink-matching-paren} to apply to elements like @code{begin...end}, and provides some commands that you can bind in the major mode keymap."
msgstr "@code{smie-setup}の呼び出しは@code{begin...end}のような要素に適用するために@code{blink-matching-paren}を拡張して@key{TAB}によるインデントを期待通り機能させるとともに、メジャーモードのキーマップ内でバインドできるいくつかのコマンドの提供を満足します。"

#. type: deffn
#: original_texis/modes.texi:4384
#, no-wrap
msgid "Command smie-close-block"
msgstr "Command smie-close-block"

#. type: deffn
#: original_texis/modes.texi:4386
msgid "This command closes the most recently opened (and not yet closed) block."
msgstr "このコマンドは、もっとも最近オープンされた(まだクローズされていない)ブロックをクローズする。"

#. type: deffn
#: original_texis/modes.texi:4388
#, no-wrap
msgid "Command smie-down-list &optional arg"
msgstr "Command smie-down-list &optional arg"

#. type: deffn
#: original_texis/modes.texi:4391
msgid "This command is like @code{down-list} but it also pays attention to nesting of tokens other than parentheses, such as @code{begin...end}."
msgstr "このコマンドは@code{down-list}と似ているが、@code{begin...end}のようなカッコ以外のネストされたトークンにも注意を払う。"

#. type: Plain text
#: original_texis/modes.texi:4409
msgid "SMIE's precedence grammars simply give to each token a pair of precedences: the left-precedence and the right-precedence.  We say @code{T1 < T2} if the right-precedence of token @code{T1} is less than the left-precedence of token @code{T2}.  A good way to read this @code{<} is as a kind of parenthesis: if we find @code{... T1 something T2 ...} then that should be parsed as @code{... T1 (something T2 ...} rather than as @code{... T1 something) T2 ...}.  The latter interpretation would be the case if we had @code{T1 > T2}.  If we have @code{T1 = T2}, it means that token T2 follows token T1 in the same syntactic construction, so typically we have @code{\"begin\" = \"end\"}.  Such pairs of precedences are sufficient to express left-associativity or right-associativity of infix operators, nesting of tokens like parentheses and many other cases."
msgstr "SMIEの演算子順位文法は、各トークンにたいしてシンプルに左優先(left-precedence)と右優先(right-precedence)という順位ペアを与えます。トークン@code{T1}の右優先がトークン@code{T2}の左優先より小さければ@code{T1 < T2}であると言うことにしましょう。これを解読するには@code{<}をカッコの一種だとみなすのがよい方法です。@code{... T1 something T2 ...}を見つけたら、これは@code{... T1 something) T2 ...}ではなく@code{... T1 (something T2 ...}とパースされるべきです。@code{... T1 something) T2 ...}と解釈するのは@code{T1 > T2}を見つけた場合でしょう。@code{T1 = T2}を見つけた場合、それはトークンT2とその後のトークンT1が同じ構文にあり、通常は@code{\"begin\" = \"end\"}を得ます。このような優先順位のペアは2項演算子(infix operator)、カッコのようなネストされたトークン、およびその他多くのケースにたいして左結合(left-associativity)や右結合(right-associativity)を表現するのに十分です。"

#. type: defun
#: original_texis/modes.texi:4417
#, no-wrap
msgid "smie-prec2->grammar table"
msgstr "smie-prec2->grammar table"

#. type: defun
#: original_texis/modes.texi:4421
msgid "This function takes a @emph{prec2} grammar @var{table} and returns an alist suitable for use in @code{smie-setup}.  The @emph{prec2} @var{table} is itself meant to be built by one of the functions below."
msgstr "この関数は@emph{prec2}文法@var{table}を引数に受け取り、@code{smie-setup}で使用するのに適したalistをリターンする。@emph{prec2}文法@var{table}は、それ自体が以下の関数のいずれかによりビルドされることを意図している。"

#. type: defun
#: original_texis/modes.texi:4423
#, no-wrap
msgid "smie-merge-prec2s &rest tables"
msgstr "smie-merge-prec2s &rest tables"

#. type: defun
#: original_texis/modes.texi:4426
msgid "This function takes several @emph{prec2} @var{tables} and merges them into a new @emph{prec2} table."
msgstr "この関数は複数の@emph{prec2}文法@var{tables}を、新たな@emph{prec2}テーブルにマージする。"

#. type: defun
#: original_texis/modes.texi:4428
#, no-wrap
msgid "smie-precs->prec2 precs"
msgstr "smie-precs->prec2 precs"

#. type: defun
#: original_texis/modes.texi:4437
msgid "This function builds a @emph{prec2} table from a table of precedences @var{precs}.  @var{precs} should be a list, sorted by precedence (for example @code{\"+\"} will come before @code{\"*\"}), of elements of the form @code{(@var{assoc} @var{op} ...)}, where each @var{op} is a token that acts as an operator; @var{assoc} is their associativity, which can be either @code{left}, @code{right}, @code{assoc}, or @code{nonassoc}.  All operators in a given element share the same precedence level and associativity."
msgstr "この関数は順位テーブル@var{precs}から@emph{prec2}テーブルをビルドする。@var{precs}は優先順(たとえば@code{\"+\"}は@code{\"*\"}より前にくる)にソートされたリストであり、要素は@code{(@var{assoc} @var{op} ...)}の形式であること。ここで@var{op}は演算子として振る舞うトークン、@var{assoc}はそれらの結合法則であり@code{left}、@code{right}、@code{assoc}、@code{nonassoc}のいずれかである。与えられた要素内のすべての演算子は同じ優先レベルと結合法則を共有する。"

#. type: defun
#: original_texis/modes.texi:4439
#, no-wrap
msgid "smie-bnf->prec2 bnf &rest resolvers"
msgstr "smie-bnf->prec2 bnf &rest resolvers"

#. type: defun
#: original_texis/modes.texi:4444
msgid "This function lets you specify the grammar using a BNF notation.  It accepts a @var{bnf} description of the grammar along with a set of conflict resolution rules @var{resolvers}, and returns a @emph{prec2} table."
msgstr "この関数によりBNF記法を使用した文法を指定することができる。これはその文法の@var{bnf}表記と、同様に競合解決ルール@var{resolvers}を受け取って@emph{prec2}テーブルをリターンする。"

#. type: defun
#: original_texis/modes.texi:4448
msgid "@var{bnf} is a list of nonterminal definitions of the form @code{(@var{nonterm} @var{rhs1} @var{rhs2} ...)} where each @var{rhs} is a (non-empty) list of terminals (aka tokens) or non-terminals."
msgstr "@var{bnf}は@code{(@var{nonterm} @var{rhs1} @var{rhs2} ...)}という形式の非終端定義、各@var{rhs}は終端記号(トークンとも呼ばれる)、または非終端記号の(空でない)リストである。"

#. type: defun
#: original_texis/modes.texi:4450
msgid "Not all grammars are accepted:"
msgstr "すべての文法が許容される訳ではない:"

#. type: itemize
#: original_texis/modes.texi:4454
msgid "An @var{rhs} cannot be an empty list (an empty list is never needed, since SMIE allows all non-terminals to match the empty string anyway)."
msgstr "@var{rhs}に空のリストは指定できない(いずれにせよSMIEは空文字列にマッチさせるためにすべての非終端記号を許容するので空リストが必要になることは決してない)。"

#. type: itemize
#: original_texis/modes.texi:4458
msgid "An @var{rhs} cannot have 2 consecutive non-terminals: each pair of non-terminals needs to be separated by a terminal (aka token).  This is a fundamental limitation of operator precedence grammars."
msgstr "@var{rhs}の後に連続する2つの非終端記号は指定できない。非終端記号の各ペアは終端記号(かトークン)で区切られる必要がある。これは演算子順位文法の基本的な制約である。"

#. type: defun
#: original_texis/modes.texi:4461
msgid "Additionally, conflicts can occur:"
msgstr "さらに競合が発生し得る:"

#. type: itemize
#: original_texis/modes.texi:4466
msgid "The returned @emph{prec2} table holds constraints between pairs of tokens, and for any given pair only one constraint can be present: T1 < T2, T1 = T2, or T1 > T2."
msgstr "リターンされる@emph{prec2}テーブルはトークンのペア間の制約を保持し、与えられた任意のペアはT1 < T2、T1 = T2、T1 > T2のいずれかのうち1つの制約をだけ与えることができる。"

#. type: itemize
#: original_texis/modes.texi:4470
msgid "A token can be an @code{opener} (something similar to an open-paren), a @code{closer} (like a close-paren), or @code{neither} of the two (e.g., an infix operator, or an inner token like @code{\"else\"})."
msgstr "トークンは@code{opener}(開カッコに似た何か)、@code{closer}(閉カッコのようなもの)、またはこれら2つのいずれでもない@code{neither}(2項演算子や@code{\"else\"}のようなinnerトークン)である。"

#. type: defun
#: original_texis/modes.texi:4479
msgid "Precedence conflicts can be resolved via @var{resolvers}, which is a list of @emph{precs} tables (see @code{smie-precs->prec2}): for each precedence conflict, if those @code{precs} tables specify a particular constraint, then the conflict is resolved by using this constraint instead, else a conflict is reported and one of the conflicting constraints is picked arbitrarily and the others are simply ignored."
msgstr "順位の競合は@var{resolvers}を通じて解決され得る。これは@emph{precs}テーブル(@code{smie-precs->prec2}を参照)のリストである。それぞれの順位競合にたいして、これらの@code{precs}テーブルが特定の制約を指定している場合は、かわりにこの制約により競合が解決され、それ以外は競合する制約のうち任意の1つが報告されて他は単に無視される。"

#. type: subsubsection
#: original_texis/modes.texi:4482
#, no-wrap
msgid "Defining the Grammar of a Language"
msgstr "Defining the Grammar of a Language"

#. type: cindex
#: original_texis/modes.texi:4483
#, no-wrap
msgid "SMIE grammar"
msgstr "SMIE grammar"

#. type: cindex
#: original_texis/modes.texi:4484
#, no-wrap
msgid "grammar, SMIE"
msgstr "grammar, SMIE"

#. type: Plain text
#: original_texis/modes.texi:4491
msgid "The usual way to define the SMIE grammar of a language is by defining a new global variable that holds the precedence table by giving a set of BNF rules.  For example, the grammar definition for a small Pascal-like language could look like:"
msgstr "ある言語にたいしてSMIE文法を定義する通常の方法は、順位のテーブルを保持する新たなグローバル変数を定義してBNFルールのセットを与える方法です。たとえば小規模なPascal風言語の文法定義は以下のようになるでしょう:"

#. type: group
#: original_texis/modes.texi:4497
#, no-wrap
msgid ""
"(require 'smie)\n"
"(defvar sample-smie-grammar\n"
"  (smie-prec2->grammar\n"
"   (smie-bnf->prec2\n"
msgstr ""
"(require 'smie)\n"
"(defvar sample-smie-grammar\n"
"  (smie-prec2->grammar\n"
"   (smie-bnf->prec2\n"

#. type: group
#: original_texis/modes.texi:4509
#, no-wrap
msgid ""
"    '((id)\n"
"      (inst (\"begin\" insts \"end\")\n"
"            (\"if\" exp \"then\" inst \"else\" inst)\n"
"            (id \":=\" exp)\n"
"            (exp))\n"
"      (insts (insts \";\" insts) (inst))\n"
"      (exp (exp \"+\" exp)\n"
"           (exp \"*\" exp)\n"
"           (\"(\" exps \")\"))\n"
"      (exps (exps \",\" exps) (exp)))\n"
msgstr ""
"    '((id)\n"
"      (inst (\"begin\" insts \"end\")\n"
"            (\"if\" exp \"then\" inst \"else\" inst)\n"
"            (id \":=\" exp)\n"
"            (exp))\n"
"      (insts (insts \";\" insts) (inst))\n"
"      (exp (exp \"+\" exp)\n"
"           (exp \"*\" exp)\n"
"           (\"(\" exps \")\"))\n"
"      (exps (exps \",\" exps) (exp)))\n"

#. type: group
#: original_texis/modes.texi:4514
#, no-wrap
msgid ""
"    '((assoc \";\"))\n"
"    '((assoc \",\"))\n"
"    '((assoc \"+\") (assoc \"*\")))))\n"
msgstr ""
"    '((assoc \";\"))\n"
"    '((assoc \",\"))\n"
"    '((assoc \"+\") (assoc \"*\")))))\n"

#. type: Plain text
#: original_texis/modes.texi:4519 original_texis/modes.texi:4851
msgid "A few things to note:"
msgstr "注意すべき点がいくつかあります:"

#. type: itemize
#: original_texis/modes.texi:4526
msgid "The above grammar does not explicitly mention the syntax of function calls: SMIE will automatically allow any sequence of sexps, such as identifiers, balanced parentheses, or @code{begin ... end} blocks to appear anywhere anyway."
msgstr "上記の文法は関数呼び出しの構文に明示的に言及していない。SMIEは識別子、対応がとれたカッコ(balanced parentheses)、または@code{begin ... end}ブロックのようなsexpの任意のシーケンスがどこに、どのように出現しても自動的にそれを許容するだろう。"

#. type: itemize
#: original_texis/modes.texi:4530
msgid "The grammar category @code{id} has no right hand side: this does not mean that it can match only the empty string, since as mentioned any sequence of sexps can appear anywhere anyway."
msgstr "文法カテゴリー@code{id}は右側に何ももたない。これは@code{id}が空文字列だけにマッチ可能なことを意味しない。なぜなら上述のように任意のsexpシーケンスはどこに、どのような方法でも出現するからである。"

#. type: itemize
#: original_texis/modes.texi:4535
msgid "Because non terminals cannot appear consecutively in the BNF grammar, it is difficult to correctly handle tokens that act as terminators, so the above grammar treats @code{\";\"} as a statement @emph{separator} instead, which SMIE can handle very well."
msgstr "BNF文法では非終端記号が連続して出現し得ないので、終端記号として作用するトークンを正しく扱うのが困難なため、上述の文法ではSMIEが容易に扱える@code{\";\"}を@emph{セパレーター(separator)}ステートメントのかわりとして扱っている。"

#. type: itemize
#: original_texis/modes.texi:4540
msgid "Separators used in sequences (such as @code{\",\"} and @code{\";\"} above)  are best defined with BNF rules such as @code{(foo (foo \"separator\" foo) ...)} which generate precedence conflicts which are then resolved by giving them an explicit @code{(assoc \"separator\")}."
msgstr "シーケンス内で使用される、(上記の@code{\",\"}や@code{\";\"}のような)セパレーターは、BNFルールでは@code{(foo (foo \"separator\" foo) ...)}のように定義するのが最善である。これは順位の競合を生成するが、明示的に@code{(assoc \"separator\")}を与えることにより解決される、"

#. type: itemize
#: original_texis/modes.texi:4546
msgid "The @code{(\"(\" exps \")\")} rule was not needed to pair up parens, since SMIE will pair up any characters that are marked as having paren syntax in the syntax table.  What this rule does instead (together with the definition of @code{exps}) is to make it clear that @code{\",\"} should not appear outside of parentheses."
msgstr "SMIEは構文テーブル(syntax table)内でカッコ構文(paren syntax)をもつようにマークされた任意の文字をペアにするだろうから、@code{(\"(\" exps \")\")}ルールにカッコをペアにする必要はなかった。(@code{exps}の定義と併せて)これはかわりに@code{\",\"}がカッコの外に出現すべきではないことを明確にするためのルール。"

#. type: itemize
#: original_texis/modes.texi:4550
msgid "Rather than have a single @emph{precs} table to resolve conflicts, it is preferable to have several tables, so as to let the BNF part of the grammar specify relative precedences where possible."
msgstr "競合解決のための@emph{precs}テーブルは単一のテーブルより複数のテーブルをもつほうが、可能な場合は文法のBNF部分が関連する順位を指定できるので優れている。"

#. type: itemize
#: original_texis/modes.texi:4556
msgid "Unless there is a very good reason to prefer @code{left} or @code{right}, it is usually preferable to mark operators as associative, using @code{assoc}.  For that reason @code{\"+\"} and @code{\"*\"} are defined above as @code{assoc}, although the language defines them formally as left associative."
msgstr "@code{left}や@code{right}を選択することが優るという明白な理由がなければ、通常は@code{assoc}を使用して演算子を結合演算子(associative)とマークするほうが優れている。この理由により上述の@code{\"+\"}と@code{\"*\"}は、たとえその言語がそれらを形式上は左結合(left associative)と定義していても@code{assoc}として定義されている。"

#. type: subsubsection
#: original_texis/modes.texi:4559
#, no-wrap
msgid "Defining Tokens"
msgstr "Defining Tokens"

#. type: cindex
#: original_texis/modes.texi:4560
#, no-wrap
msgid "SMIE lexer"
msgstr "SMIE lexer"

#. type: cindex
#: original_texis/modes.texi:4561
#, no-wrap
msgid "defining tokens, SMIE"
msgstr "defining tokens, SMIE"

#. type: Plain text
#: original_texis/modes.texi:4570
msgid "SMIE comes with a predefined lexical analyzer which uses syntax tables in the following way: any sequence of characters that have word or symbol syntax is considered a token, and so is any sequence of characters that have punctuation syntax.  This default lexer is often a good starting point but is rarely actually correct for any given language.  For example, it will consider @code{\"2,+3\"} to be composed of 3 tokens: @code{\"2\"}, @code{\",+\"}, and @code{\"3\"}."
msgstr "SMIEには事前定義された字句解析プログラムが付属しており、それは次の方法で構文テーブルを使用します: 文字の任意のシーケンスはトークンとみなせる単語構文(word syntax)かシンボル構文(symbol syntax)をもち、区切り文字構文(punctuation syntax)をもつ任意の文字シーケンスもトークンとみなされます。このデフォルトのlexerは開始ポイントとして適している場合が多々ありますが、任意の与えられた言語にたいして実際に正しいことは稀です。たとえばこれは@code{\"2,+3\"}が3つのトークン@code{\"2\"}、@code{\",+\"}、@code{\"3\"}から構成されていると判断するでしょう。"

#. type: Plain text
#: original_texis/modes.texi:4579
msgid "To describe the lexing rules of your language to SMIE, you need 2 functions, one to fetch the next token, and another to fetch the previous token.  Those functions will usually first skip whitespace and comments and then look at the next chunk of text to see if it is a special token.  If so it should skip the token and return a description of this token.  Usually this is simply the string extracted from the buffer, but it can be anything you want.  For example:"
msgstr "あなたの言語のlexerルールをSMIEにたいして説明するためには、次のトークンをfetchする関数と前のトークンをfetchする関数という2つの関数が必要になります。これらの関数は通常は最初に空白文字とコメントをスキップして、その後に次のテキストchunk(塊)を調べてそれが特別なトークンか確認します。これは通常は単にバッファーから抽出された文字列ですが、あなたが望む他の何かでも構いません。たとえば:"

#. type: group
#: original_texis/modes.texi:4583
#, no-wrap
msgid ""
"(defvar sample-keywords-regexp\n"
"  (regexp-opt '(\"+\" \"*\" \",\" \";\" \">\" \">=\" \"<\" \"<=\" \":=\" \"=\")))\n"
msgstr ""
"(defvar sample-keywords-regexp\n"
"  (regexp-opt '(\"+\" \"*\" \",\" \";\" \">\" \">=\" \"<\" \"<=\" \":=\" \"=\")))\n"

#. type: group
#: original_texis/modes.texi:4595
#, no-wrap
msgid ""
"(defun sample-smie-forward-token ()\n"
"  (forward-comment (point-max))\n"
"  (cond\n"
"   ((looking-at sample-keywords-regexp)\n"
"    (goto-char (match-end 0))\n"
"    (match-string-no-properties 0))\n"
"   (t (buffer-substring-no-properties\n"
"       (point)\n"
"       (progn (skip-syntax-forward \"w_\")\n"
"              (point))))))\n"
msgstr ""
"(defun sample-smie-forward-token ()\n"
"  (forward-comment (point-max))\n"
"  (cond\n"
"   ((looking-at sample-keywords-regexp)\n"
"    (goto-char (match-end 0))\n"
"    (match-string-no-properties 0))\n"
"   (t (buffer-substring-no-properties\n"
"       (point)\n"
"       (progn (skip-syntax-forward \"w_\")\n"
"              (point))))))\n"

#. type: group
#: original_texis/modes.texi:4607
#, no-wrap
msgid ""
"(defun sample-smie-backward-token ()\n"
"  (forward-comment (- (point)))\n"
"  (cond\n"
"   ((looking-back sample-keywords-regexp (- (point) 2) t)\n"
"    (goto-char (match-beginning 0))\n"
"    (match-string-no-properties 0))\n"
"   (t (buffer-substring-no-properties\n"
"       (point)\n"
"       (progn (skip-syntax-backward \"w_\")\n"
"              (point))))))\n"
msgstr ""
"(defun sample-smie-backward-token ()\n"
"  (forward-comment (- (point)))\n"
"  (cond\n"
"   ((looking-back sample-keywords-regexp (- (point) 2) t)\n"
"    (goto-char (match-beginning 0))\n"
"    (match-string-no-properties 0))\n"
"   (t (buffer-substring-no-properties\n"
"       (point)\n"
"       (progn (skip-syntax-backward \"w_\")\n"
"              (point))))))\n"

#. type: Plain text
#: original_texis/modes.texi:4615
msgid "Notice how those lexers return the empty string when in front of parentheses.  This is because SMIE automatically takes care of the parentheses defined in the syntax table.  More specifically if the lexer returns @code{nil} or an empty string, SMIE tries to handle the corresponding text as a sexp according to syntax tables."
msgstr "これらのlexerがカッコの前にあるとき空文字列をリターンする方法に注目してください。これはSMIEが構文テーブル内で定義されているカッコにたいして自動的に配慮するからです。より厳密にはlexerが@code{nil}、または空文字列をリターンしたら、SMIEは構文テーブルにしたがって対応するテキストをsexpとして処理します。"

#. type: subsubsection
#: original_texis/modes.texi:4617
#, no-wrap
msgid "Living With a Weak Parser"
msgstr "Living With a Weak Parser"

#. type: Plain text
#: original_texis/modes.texi:4623
msgid "The parsing technique used by SMIE does not allow tokens to behave differently in different contexts.  For most programming languages, this manifests itself by precedence conflicts when converting the BNF grammar."
msgstr "SMIEが使用するパーステクニックは、異なるコンテキストでトークンが異なる振る舞いをすることを許容しません。ほとんどのプログラミング言語にたいして、これは順位の競合によりBNF文法を変換するとき明らかになります。"

#. type: Plain text
#: original_texis/modes.texi:4627
msgid "Sometimes, those conflicts can be worked around by expressing the grammar slightly differently.  For example, for Modula-2 it might seem natural to have a BNF grammar that looks like this:"
msgstr "その文法を若干異なるように表現することにより、これらの競合を回避できる場合があります。たとえばModula-2にたいしては以下のようなBNF文法をもつことが自然に思えるかもしれません:"

#. type: example
#: original_texis/modes.texi:4637
#, no-wrap
msgid ""
"  ...\n"
"  (inst (\"IF\" exp \"THEN\" insts \"ELSE\" insts \"END\")\n"
"        (\"CASE\" exp \"OF\" cases \"END\")\n"
"        ...)\n"
"  (cases (cases \"|\" cases)\n"
"         (caselabel \":\" insts)\n"
"         (\"ELSE\" insts))\n"
"  ...\n"
msgstr ""
"  ...\n"
"  (inst (\"IF\" exp \"THEN\" insts \"ELSE\" insts \"END\")\n"
"        (\"CASE\" exp \"OF\" cases \"END\")\n"
"        ...)\n"
"  (cases (cases \"|\" cases)\n"
"         (caselabel \":\" insts)\n"
"         (\"ELSE\" insts))\n"
"  ...\n"

#. type: Plain text
#: original_texis/modes.texi:4644
msgid "But this will create conflicts for @code{\"ELSE\"}: on the one hand, the IF rule implies (among many other things) that @code{\"ELSE\" = \"END\"}; but on the other hand, since @code{\"ELSE\"} appears within @code{cases}, which appears left of @code{\"END\"}, we also have @code{\"ELSE\" > \"END\"}.  We can solve the conflict either by using:"
msgstr "しかしこれは@code{\"ELSE\"}にたいする競合を生み出すでしょう。その一方でIFルールは、(他の多くのものの中でも特に)@code{\"ELSE\" = \"END\"}を暗示します。しかしその一方で@code{\"ELSE\"}は@code{cases}内に出現しますが、@code{cases}は@code{\"END\"}の左に出現するので、わたしたちは@code{\"ELSE\" > \"END\"}も得ることになります。これは以下を使用して解決できます:"

#. type: example
#: original_texis/modes.texi:4652
#, no-wrap
msgid ""
"  ...\n"
"  (inst (\"IF\" exp \"THEN\" insts \"ELSE\" insts \"END\")\n"
"        (\"CASE\" exp \"OF\" cases \"END\")\n"
"        (\"CASE\" exp \"OF\" cases \"ELSE\" insts \"END\")\n"
"        ...)\n"
"  (cases (cases \"|\" cases) (caselabel \":\" insts))\n"
"  ...\n"
msgstr ""
"  ...\n"
"  (inst (\"IF\" exp \"THEN\" insts \"ELSE\" insts \"END\")\n"
"        (\"CASE\" exp \"OF\" cases \"END\")\n"
"        (\"CASE\" exp \"OF\" cases \"ELSE\" insts \"END\")\n"
"        ...)\n"
"  (cases (cases \"|\" cases) (caselabel \":\" insts))\n"
"  ...\n"

#. type: Plain text
#: original_texis/modes.texi:4654
msgid "or"
msgstr "または"

#. type: example
#: original_texis/modes.texi:4662
#, no-wrap
msgid ""
"  ...\n"
"  (inst (\"IF\" exp \"THEN\" else \"END\")\n"
"        (\"CASE\" exp \"OF\" cases \"END\")\n"
"        ...)\n"
"  (else (insts \"ELSE\" insts))\n"
"  (cases (cases \"|\" cases) (caselabel \":\" insts) (else))\n"
"  ...\n"
msgstr ""
"  ...\n"
"  (inst (\"IF\" exp \"THEN\" else \"END\")\n"
"        (\"CASE\" exp \"OF\" cases \"END\")\n"
"        ...)\n"
"  (else (insts \"ELSE\" insts))\n"
"  (cases (cases \"|\" cases) (caselabel \":\" insts) (else))\n"
"  ...\n"

#. type: Plain text
#: original_texis/modes.texi:4668
msgid "Reworking the grammar to try and solve conflicts has its downsides, tho, because SMIE assumes that the grammar reflects the logical structure of the code, so it is preferable to keep the BNF closer to the intended abstract syntax tree."
msgstr "文法書き換えによる競合の解決には欠点があります。なぜならSMIEはその文法がコードの論理的構造を反映すると仮定するからです。そのためBNFと意図する抽象的構文木の関係を密接に保つことが望まれます。"

#. type: Plain text
#: original_texis/modes.texi:4681
msgid "Other times, after careful consideration you may conclude that those conflicts are not serious and simply resolve them via the @var{resolvers} argument of @code{smie-bnf->prec2}.  Usually this is because the grammar is simply ambiguous: the conflict does not affect the set of programs described by the grammar, but only the way those programs are parsed.  This is typically the case for separators and associative infix operators, where you want to add a resolver like @code{'((assoc \"|\"))}.  Another case where this can happen is for the classic @emph{dangling else} problem, where you will use @code{'((assoc \"else\" \"then\"))}.  It can also happen for cases where the conflict is real and cannot really be resolved, but it is unlikely to pose a problem in practice."
msgstr "注意深く考慮した結果、これらの競合が深刻ではなく、@code{smie-bnf->prec2}の@var{resolvers}引数を通じて解決する決心をする場合もあるでしょう。これは通常はその文法が単に不明瞭だからです。その文法により記述されるプログラムセットは競合の影響を受けませんが、それらのプログラムにたいする唯一の方法はパースだけです。@code{'((assoc \"|\"))}のようなリゾルバ(resolver: 解決するもの)を追加したいと望むような場合、通常それはセパレーターと2項結合演算子にたいするケースです。これが発生し得る他のケースは@code{'((assoc \"else\" \"then\"))}を使用するような場合における、古典的な@emph{ぶら下がりelse問題(dangling else problem)}です。これは実際に競合があり解決不能なものの、実際のところ問題が発生しそうにないケースにたいしても発生し得ます。"

#. type: Plain text
#: original_texis/modes.texi:4693
msgid "Finally, in many cases some conflicts will remain despite all efforts to restructure the grammar.  Do not despair: while the parser cannot be made more clever, you can make the lexer as smart as you want.  So, the solution is then to look at the tokens involved in the conflict and to split one of those tokens into 2 (or more) different tokens.  E.g., if the grammar needs to distinguish between two incompatible uses of the token @code{\"begin\"}, make the lexer return different tokens (say @code{\"begin-fun\"} and @code{\"begin-plain\"}) depending on which kind of @code{\"begin\"} it finds.  This pushes the work of distinguishing the different cases to the lexer, which will thus have to look at the surrounding text to find ad-hoc clues."
msgstr "最後に多くのケースではすべての文法再構築努力にも関わらず、いくつかの競合が残るでしょう。しかし失望しないでください。パーサーをより賢くすることはできませんが、あなたの望むようにlexerをスマートにすることは可能です。その方法は競合が発生したら競合を引き起こしたトークンを調べて、それらのうちの1つを2つ以上の異なるトークンに分割する方法です。たとえばトークン@code{\"begin\"}にたいする互換性のない2つの使用を文法が区別する必要があり、見つかった@code{\"begin\"}の種類によってlexerに異なるトークン(たとえば@code{\"begin-fun\"}と@code{\"begin-plain\"})をリターンさせる場合です。これはlexerにたいして異なるケースを区別する処理を強制し、そのためにlexerは特別な手がかりを見つけるために周囲のテキストを調べる必要があるでしょう。"

#. type: subsubsection
#: original_texis/modes.texi:4695
#, no-wrap
msgid "Specifying Indentation Rules"
msgstr "Specifying Indentation Rules"

#. type: cindex
#: original_texis/modes.texi:4696
#, no-wrap
msgid "indentation rules, SMIE"
msgstr "indentation rules, SMIE"

#. type: Plain text
#: original_texis/modes.texi:4702
msgid "Based on the provided grammar, SMIE will be able to provide automatic indentation without any extra effort.  But in practice, this default indentation style will probably not be good enough.  You will want to tweak it in many different cases."
msgstr "提供された文法にもとづき、他に特別なことを行わなくてもSMIEは自動的なインデントを提供できるでしょう。しかし恐らく実際にはこのデフォルトのインデントスタイルでは十分ではありません。多くの異なる状況においてこれを微調整したいと思うかもしれません。"

#. type: Plain text
#: original_texis/modes.texi:4717
msgid "SMIE indentation is based on the idea that indentation rules should be as local as possible.  To this end, it relies on the idea of @emph{virtual} indentation, which is the indentation that a particular program point would have if it were at the beginning of a line.  Of course, if that program point is indeed at the beginning of a line, its virtual indentation is its current indentation.  But if not, then SMIE uses the indentation algorithm to compute the virtual indentation of that point.  Now in practice, the virtual indentation of a program point does not have to be identical to the indentation it would have if we inserted a newline before it.  To see how this works, the SMIE rule for indentation after a @code{@{} in C does not care whether the @code{@{} is standing on a line of its own or is at the end of the preceding line.  Instead, these different cases are handled in the indentation rule that decides how to indent before a @code{@{}."
msgstr "SMIEのインデントは、インデントルールは可能な限りローカルであるべきという考えにもとづきます。@emph{バーチャルインデント(virtual indentation)}という考えによってこの目的を達成しています。これは特定のプログラムポイント(program point)は行頭にバーチャルインデントがあれば、それをもつだろう、という発想です。もちろんそのプログラムポイントが正に行頭にあれば、そのプログラムポイントのバーチャルインデントはプログラムポイントのカレントのインデントです。しかしそうでなければSMIEがそのポイントのバーチャルインデントを計算するためにインデントアルゴリズムを使用します。ところで実際にはあるプログラムポイントのバーチャルインデントは、その前に改行を挿入した場合にプログラムポイントがもつであろうインデントと等しい必要はありません。これが機能する方法を確認するためには、Cにおける@code{@{}の後のSMIEのインデントルールは@code{@{}がインデントする行自体にあるか、あるいは前の行の終端にあるかを配慮しないことが挙げられます。かわりにこれらの異なるケースは@code{@{}の前のインデントを決定するインデントルール内で処理されます。"

#. type: Plain text
#: original_texis/modes.texi:4730
msgid "Another important concept is the notion of @emph{parent}: The @emph{parent} of a token, is the head token of the nearest enclosing syntactic construct.  For example, the parent of an @code{else} is the @code{if} to which it belongs, and the parent of an @code{if}, in turn, is the lead token of the surrounding construct.  The command @code{backward-sexp} jumps from a token to its parent, but there are some caveats: for @emph{openers} (tokens which start a construct, like @code{if}), you need to start with point before the token, while for others you need to start with point after the token.  @code{backward-sexp} stops with point before the parent token if that is the @emph{opener} of the token of interest, and otherwise it stops with point after the parent token."
msgstr "他の重要な考え方として@emph{parent}の概念があります。あるトークン@emph{parent}は周囲にある直近の構文構造の代表トークン(head token)です。たとえば@code{else}のparentはそれが属する@code{if}であり、@code{if}のparentは周囲を取り囲む構造の先導トークン(lead token)です。コマンド@code{backward-sexp}は、あるトークンからトークンのparentにジャンプしますが注意する点がいくつかあります。他のトークンではそのトークンの後のポイントから開始する必要があるのにたいして、@emph{opener} (@code{if}のようなある構造を開始するトークン)ではそのトークンの前のポイントから開始する必要があります。@code{backward-sexp}はparentトークンがそのトークンの@emph{opener}ならparentトークンの前のポイントで停止し、それ以外ではparentトークンの後のポイントで停止します。"

#. type: Plain text
#: original_texis/modes.texi:4734
msgid "SMIE indentation rules are specified using a function that takes two arguments @var{method} and @var{arg} where the meaning of @var{arg} and the expected return value depend on @var{method}."
msgstr "SMIEのインデントルールは、2つの引数@var{method}と@var{arg}を受け取る関数により指定されます。ここで@var{arg}の値と期待されるリターン値は@var{method}に依存します。"

#. type: Plain text
#: original_texis/modes.texi:4736
msgid "@var{method} can be:"
msgstr "@var{method}には以下のいずれかを指定できます:"

#. type: itemize
#: original_texis/modes.texi:4740
msgid "@code{:after}, in which case @var{arg} is a token and the function should return the @var{offset} to use for indentation after @var{arg}."
msgstr "@code{:after}: この場合、@var{arg}はトークンであり関数は@var{arg}の後に使用するインデントにたいする@var{offset}をリターンすること。"

#. type: itemize
#: original_texis/modes.texi:4743
msgid "@code{:before}, in which case @var{arg} is a token and the function should return the @var{offset} to use to indent @var{arg} itself."
msgstr "@code{:before}: この場合、@var{arg}はトークンであり関数は@var{arg}自体に使用するインデントの@var{offset}をリターンすること。"

#. type: itemize
#: original_texis/modes.texi:4748
msgid "@code{:elem}, in which case the function should return either the offset to use to indent function arguments (if @var{arg} is the symbol @code{arg}) or the basic indentation step (if @var{arg} is the symbol @code{basic})."
msgstr "@code{:elem}: この場合、関数は関数の引数に使用するインデントのオフセット(@var{arg}がシンボル@code{arg}の場合)、または基本的ナインデントステップ(@var{arg}がシンボル@code{basic}の場合)のいずれかをリターンすること。"

#. type: itemize
#: original_texis/modes.texi:4752
msgid "@code{:list-intro}, in which case @var{arg} is a token and the function should return non-@code{nil} if the token is followed by a list of expressions (not separated by any token) rather than an expression."
msgstr "@code{:list-intro}: この場合、@var{arg}はトークンであり関数はそのトークンの後が単一の式ではなく、(任意のトークンにより区切られない)式のリストが続くなら非@code{nil}をリターンすること。"

#. type: Plain text
#: original_texis/modes.texi:4758
msgid "When @var{arg} is a token, the function is called with point just before that token.  A return value of @code{nil} always means to fallback on the default behavior, so the function should return @code{nil} for arguments it does not expect."
msgstr "@var{arg}がトークンのとき関数はそのトークンの直前のポイントで呼び出されます。リターン値@code{nil}は常にデフォルトの振る舞いへのフォールバックを意味するので、関数は期待した引数でないときは@code{nil}をリターンするべきです。"

#. type: Plain text
#: original_texis/modes.texi:4760
msgid "@var{offset} can be:"
msgstr "@var{offset}には以下のいずれかを指定できます:"

#. type: itemize
#: original_texis/modes.texi:4763
msgid "@code{nil}: use the default indentation rule."
msgstr "@code{nil}: デフォルトのインデントルールを使用する。"

#. type: itemize
#: original_texis/modes.texi:4765
msgid "@code{(column . @var{column})}: indent to column @var{column}."
msgstr "@code{(column . @var{column})}: 列@var{column}にインデントする。"

#. type: itemize
#: original_texis/modes.texi:4768
msgid "@var{number}: offset by @var{number}, relative to a base token which is the current token for @code{:after} and its parent for @code{:before}."
msgstr "@var{number}: 基本トークン(base token: @code{:after}にたいするカレントトークンであり、かつ@code{:before}にたいしてparentであるようなトークン)にたいして相対的な@var{number}によるオフセット。"

#. type: subsubsection
#: original_texis/modes.texi:4771
#, no-wrap
msgid "Helper Functions for Indentation Rules"
msgstr "Helper Functions for Indentation Rules"

#. type: Plain text
#: original_texis/modes.texi:4777
msgid "SMIE provides various functions designed specifically for use in the indentation rules function (several of those functions break if used in another context).  These functions all start with the prefix @code{smie-rule-}."
msgstr "SMIEはインデントを決定する関数内で使用するために特別にデザインされたさまざまな関数を提供します(これらの関数のうちのいくつかは異なるコンテキスト内で使用された場合に中断する)。これらの関数はすべてプレフィックス@code{smie-rule-}で始まります。"

#. type: defun
#: original_texis/modes.texi:4778
#, no-wrap
msgid "smie-rule-bolp"
msgstr "smie-rule-bolp"

#. type: defun
#: original_texis/modes.texi:4780
msgid "Return non-@code{nil} if the current token is the first on the line."
msgstr "カレントトークンが行の先頭にあれば非@code{nil}をリターンする。"

#. type: defun
#: original_texis/modes.texi:4782
#, no-wrap
msgid "smie-rule-hanging-p"
msgstr "smie-rule-hanging-p"

#. type: defun
#: original_texis/modes.texi:4787
msgid "Return non-@code{nil} if the current token is @emph{hanging}.  A token is @emph{hanging} if it is the last token on the line and if it is preceded by other tokens: a lone token on a line is not hanging."
msgstr "カレントトークンが@emph{hanging(ぶら下がり)}なら非@code{nil}をリターンする。トークンがその行の最後のトークンであり、他のトークンが先行する場合、そのトークンは@emph{hanging}である。行に単独のトークンはhangingではない。"

#. type: defun
#: original_texis/modes.texi:4789
#, no-wrap
msgid "smie-rule-next-p &rest tokens"
msgstr "smie-rule-next-p &rest tokens"

#. type: defun
#: original_texis/modes.texi:4791
msgid "Return non-@code{nil} if the next token is among @var{tokens}."
msgstr "次のトークンが@var{tokens}内にあれば非@code{nil}をリターンする。"

#. type: defun
#: original_texis/modes.texi:4793
#, no-wrap
msgid "smie-rule-prev-p &rest tokens"
msgstr "smie-rule-prev-p &rest tokens"

#. type: defun
#: original_texis/modes.texi:4795
msgid "Return non-@code{nil} if the previous token is among @var{tokens}."
msgstr "前のトークンが@var{tokens}内にあれば非@code{nil}をリターンする。"

#. type: defun
#: original_texis/modes.texi:4797
#, no-wrap
msgid "smie-rule-parent-p &rest parents"
msgstr "smie-rule-parent-p &rest parents"

#. type: defun
#: original_texis/modes.texi:4799
msgid "Return non-@code{nil} if the current token's parent is among @var{parents}."
msgstr "カレントトークンのparentが@var{parents}内にあれば非@code{nil}をリターンする。"

#. type: defun
#: original_texis/modes.texi:4801
#, no-wrap
msgid "smie-rule-sibling-p"
msgstr "smie-rule-sibling-p"

#. type: defun
#: original_texis/modes.texi:4805
msgid "Return non-@code{nil} if the current token's parent is actually a sibling.  This is the case for example when the parent of a @code{\",\"} is just the previous @code{\",\"}."
msgstr "カレントトークンのparentが実際はsibling(兄弟)なら非@code{nil}をリターンする。たとえば@code{\",\"}のparentが直前の@code{\",\"}のような場合が該当。"

#. type: defun
#: original_texis/modes.texi:4807
#, no-wrap
msgid "smie-rule-parent &optional offset"
msgstr "smie-rule-parent &optional offset"

#. type: defun
#: original_texis/modes.texi:4811
msgid "Return the proper offset to align the current token with the parent.  If non-@code{nil}, @var{offset} should be an integer giving an additional offset to apply."
msgstr "カレントトークンをparentとアライン(align: 桁揃え)するための適切なオフセットをリターンする。@var{offset}が非@code{nil}なら、それは追加オフセットとして適用される整数であること。"

#. type: defun
#: original_texis/modes.texi:4813
#, no-wrap
msgid "smie-rule-separator method"
msgstr "smie-rule-separator method"

#. type: defun
#: original_texis/modes.texi:4815
msgid "Indent current token as a @emph{separator}."
msgstr "@emph{セパレーター(separator)}としてカレントトークンをインデントする。"

#. type: defun
#: original_texis/modes.texi:4820
msgid "By @emph{separator}, we mean here a token whose sole purpose is to separate various elements within some enclosing syntactic construct, and which does not have any semantic significance in itself (i.e., it would typically not exist as a node in an abstract syntax tree)."
msgstr "ここでの@emph{セパレーター}とは周囲を取り囲む何らかの構文構造内でさまざまな要素を区切ることを唯一の目的とするトークンであり、それ自体は何も意味をもたないトークン(通常は抽象構文木内でノードとして存在しないこと)を意味する。"

#. type: defun
#: original_texis/modes.texi:4826
msgid "Such a token is expected to have an associative syntax and be closely tied to its syntactic parent.  Typical examples are @code{\",\"} in lists of arguments (enclosed inside parentheses), or @code{\";\"} in sequences of instructions (enclosed in a @code{@{...@}} or @code{begin...end} block)."
msgstr "このようなトークンは結合構文をもち、その構文的parentと密に結び付けられることが期待される。典型的な例としては引数リスト内の@code{\",\"} (カッコで括られた内部)、または命令文シーケンス内の@code{\";\"} (@code{@{...@}}や@code{begin...end}で括られたブロックの内部)が挙げられる。"

#. type: defun
#: original_texis/modes.texi:4829
msgid "@var{method} should be the method name that was passed to @code{smie-rules-function}."
msgstr "@var{method}は@code{smie-rules-function}に渡されるメソッド名であること。"

#. type: subsubsection
#: original_texis/modes.texi:4832
#, no-wrap
msgid "Sample Indentation Rules"
msgstr "Sample Indentation Rules"

#. type: Plain text
#: original_texis/modes.texi:4835
msgid "Here is an example of an indentation function:"
msgstr "以下はインデント関数の例です:"

#. type: example
#: original_texis/modes.texi:4847
#, no-wrap
msgid ""
"(defun sample-smie-rules (kind token)\n"
"  (pcase (cons kind token)\n"
"    (`(:elem . basic) sample-indent-basic)\n"
"    (`(,_ . \",\") (smie-rule-separator kind))\n"
"    (`(:after . \":=\") sample-indent-basic)\n"
"    (`(:before . ,(or `\"begin\" `\"(\" `\"@{\"))\n"
"     (if (smie-rule-hanging-p) (smie-rule-parent)))\n"
"    (`(:before . \"if\")\n"
"     (and (not (smie-rule-bolp)) (smie-rule-prev-p \"else\")\n"
"          (smie-rule-parent)))))\n"
msgstr ""
"(defun sample-smie-rules (kind token)\n"
"  (pcase (cons kind token)\n"
"    (`(:elem . basic) sample-indent-basic)\n"
"    (`(,_ . \",\") (smie-rule-separator kind))\n"
"    (`(:after . \":=\") sample-indent-basic)\n"
"    (`(:before . ,(or `\"begin\" `\"(\" `\"@{\"))\n"
"     (if (smie-rule-hanging-p) (smie-rule-parent)))\n"
"    (`(:before . \"if\")\n"
"     (and (not (smie-rule-bolp)) (smie-rule-prev-p \"else\")\n"
"          (smie-rule-parent)))))\n"

#. type: itemize
#: original_texis/modes.texi:4859
msgid "The first case indicates the basic indentation increment to use.  If @code{sample-indent-basic} is @code{nil}, then SMIE uses the global setting @code{smie-indent-basic}.  The major mode could have set @code{smie-indent-basic} buffer-locally instead, but that is discouraged."
msgstr "最初のcaseは使用する基本的なインデントの増分を示す。@code{sample-indent-basic}が@code{nil}なら、SMIEはグローバルセッティング@code{smie-indent-basic}を使用する。メジャーモードがかわりに@code{smie-indent-basic}をバッファーローカルにセットするかもしれないが推奨しない。"

#. type: itemize
#: original_texis/modes.texi:4865
msgid "The rule for the token @code{\",\"} make SMIE try to be more clever when the comma separator is placed at the beginning of lines.  It tries to outdent the separator so as to align the code after the comma; for example:"
msgstr "トークン@code{\",\"}にたいするルールによってカンマセパレーターが行頭にある場合にSMIEをより賢明に振る舞わせようとしている。これはセパレーターのインデントを解除(outdent)、カンマの後のコードにアラインされるよう試みる。たとえば:"

#. type: example
#: original_texis/modes.texi:4871
#, no-wrap
msgid ""
"x = longfunctionname (\n"
"        arg1\n"
"      , arg2\n"
"    );\n"
msgstr ""
"x = longfunctionname (\n"
"        arg1\n"
"      , arg2\n"
"    );\n"

#. type: itemize
#: original_texis/modes.texi:4877
msgid "The rule for indentation after @code{\":=\"} exists because otherwise SMIE would treat @code{\":=\"} as an infix operator and would align the right argument with the left one."
msgstr "そうしなければSMIEが@code{\":=\"}を2項演算子として扱い、左の引数に併せて右の引数をアラインするであろうから、@code{\":=\"}の後のインデントのルールが存在する。"

#. type: itemize
#: original_texis/modes.texi:4885
msgid "The rule for indentation before @code{\"begin\"} is an example of the use of virtual indentation: This rule is used only when @code{\"begin\"} is hanging, which can happen only when @code{\"begin\"} is not at the beginning of a line.  So this is not used when indenting @code{\"begin\"} itself but only when indenting something relative to this @code{\"begin\"}.  Concretely, this rule changes the indentation from:"
msgstr "@code{\"begin\"}の前のインデントのルールはバーチャルインデントの使用例である。このルールは@code{\"begin\"}がhangingのときだけ使用され、これは@code{\"begin\"}が行頭にないときのみ発生し得る。そのためこれは@code{\"begin\"}自体のインデントには使用されないが、この@code{\"begin\"}に関連する何かをインデントするときだけ使用される。このルールは具体的には以下のフォームを:"

#. type: example
#: original_texis/modes.texi:4890
#, no-wrap
msgid ""
"    if x > 0 then begin\n"
"            dosomething(x);\n"
"        end\n"
msgstr ""
"    if x > 0 then begin\n"
"            dosomething(x);\n"
"        end\n"

#. type: itemize
#: original_texis/modes.texi:4892
msgid "to"
msgstr "以下に変更する"

#. type: example
#: original_texis/modes.texi:4896
#, no-wrap
msgid ""
"    if x > 0 then begin\n"
"        dosomething(x);\n"
"    end\n"
msgstr ""
"    if x > 0 then begin\n"
"        dosomething(x);\n"
"    end\n"

#. type: itemize
#: original_texis/modes.texi:4905
msgid "The rule for indentation before @code{\"if\"} is similar to the one for @code{\"begin\"}, but where the purpose is to treat @code{\"else if\"} as a single unit, so as to align a sequence of tests rather than indent each test further to the right.  This function does this only in the case where the @code{\"if\"} is not placed on a separate line, hence the @code{smie-rule-bolp} test."
msgstr "@code{\"if\"}の前のインデントのルールは@code{\"begin\"}のインデントルールと似ているが、ここでの目的は@code{\"else if\"}を1単位として扱うことにあり、それにより各テストより右にインデントされずに一連のテストにアラインされる。この関数は@code{smie-rule-bolp}をテストして@code{\"if\"}が別の行にないときだけこれを行う。"

#. type: itemize
#: original_texis/modes.texi:4909
msgid "If we know that the @code{\"else\"} is always aligned with its @code{\"if\"} and is always at the beginning of a line, we can use a more efficient rule:"
msgstr "@code{\"else\"}がそれの属する@code{\"if\"}にたいして常にアラインされて、かつそれが常に行頭であるることが判っていれば、より効果的なルールを使用できる:"

#. type: example
#: original_texis/modes.texi:4916
#, no-wrap
msgid ""
"((equal token \"if\")\n"
" (and (not (smie-rule-bolp))\n"
"      (smie-rule-prev-p \"else\")\n"
"      (save-excursion\n"
"        (sample-smie-backward-token)\n"
"        (cons 'column (current-column)))))\n"
msgstr ""
"((equal token \"if\")\n"
" (and (not (smie-rule-bolp))\n"
"      (smie-rule-prev-p \"else\")\n"
"      (save-excursion\n"
"        (sample-smie-backward-token)\n"
"        (cons 'column (current-column)))))\n"

#. type: itemize
#: original_texis/modes.texi:4921
msgid "The advantage of this formulation is that it reuses the indentation of the previous @code{\"else\"}, rather than going all the way back to the first @code{\"if\"} of the sequence."
msgstr "この式の利点はこれがシーケンスの最初の@code{\"if\"}まで戻ってすべてをやり直すのではなく、前の@code{\"else\"}のインデントを再利用することである。"

#. type: subsubsection
#: original_texis/modes.texi:4925
#, no-wrap
msgid "Customizing Indentation"
msgstr "Customizing Indentation"

#. type: Plain text
#: original_texis/modes.texi:4932
msgid "If you are using a mode whose indentation is provided by SMIE, you can customize the indentation to suit your preferences.  You can do this on a per-mode basis (using the option @code{smie-config}), or a per-file basis (using the function @code{smie-config-local} in a file-local variable specification)."
msgstr "SMIEにより提供されるインデントを使用するモードを使っている場合には、好みに合わせてインデントをカスタマイズできます。これはモードごと(オプション@code{smie-config}を使用)、またはファイルごと(ファイルローカル変数指定内で関数@code{smie-config-local}を使用)に行うことができます。"

#. type: defopt
#: original_texis/modes.texi:4933
#, no-wrap
msgid "smie-config"
msgstr "smie-config"

#. type: defopt
#: original_texis/modes.texi:4938
msgid "This option lets you customize indentation on a per-mode basis.  It is an alist with elements of the form @code{(@var{mode} . @var{rules})}.  For the precise form of rules, see the variable's documentation; but you may find it easier to use the command @code{smie-config-guess}."
msgstr "このオプションによりモードごとにインデントをカスタマイズできる。これは@code{(@var{mode} . @var{rules})}という形式の要素をもつalist。rulesの正確な形式については変数のドキュメントを参照のこと。しかしコマンド@code{smie-config-guess}を使用したほうが、より簡単に見つけられるかもしれない。"

#. type: deffn
#: original_texis/modes.texi:4940
#, no-wrap
msgid "Command smie-config-guess"
msgstr "Command smie-config-guess"

#. type: deffn
#: original_texis/modes.texi:4944
msgid "This command tries to work out appropriate settings to produce your preferred style of indentation.  Simply call the command while visiting a file that is indented with your style."
msgstr "このコマンドは好みのスタイルのインデントを生成する適切セッティングの解決を試みる。あなたのスタイルでインデントされたファイルをvisitしているときに単にこのコマンドを呼び出せばよい。"

#. type: deffn
#: original_texis/modes.texi:4946
#, no-wrap
msgid "Command smie-config-save"
msgstr "Command smie-config-save"

#. type: deffn
#: original_texis/modes.texi:4949
msgid "Call this command after using @code{smie-config-guess}, to save your settings for future sessions."
msgstr "@code{smie-config-guess}を使用した後にこのコマンドを呼び出すと将来のセッション用にセッティングを保存する。"

#. type: deffn
#: original_texis/modes.texi:4951
#, no-wrap
msgid "Command smie-config-show-indent &optional move"
msgstr "Command smie-config-show-indent &optional move"

#. type: deffn
#: original_texis/modes.texi:4954
msgid "This command displays the rules that are used to indent the current line."
msgstr "このコマンドはカレント行のインデントに使用されているルールを表示する。"

#. type: deffn
#: original_texis/modes.texi:4956
#, no-wrap
msgid "Command smie-config-set-indent"
msgstr "Command smie-config-set-indent"

#. type: deffn
#: original_texis/modes.texi:4958
msgid "This command adds a local rule to adjust the indentation of the current line."
msgstr "このコマンドはカレント行のインデントに合わせてローカルルールを追加する。"

#. type: defun
#: original_texis/modes.texi:4960
#, no-wrap
msgid "smie-config-local rules"
msgstr "smie-config-local rules"

#. type: defun
#: original_texis/modes.texi:4966
msgid "This function adds @var{rules} as indentation rules for the current buffer.  These add to any mode-specific rules defined by the @code{smie-config} option.  To specify custom indentation rules for a specific file, add an entry to the file's local variables of the form: @code{eval: (smie-config-local '(@var{rules}))}."
msgstr "この関数はカレントバッファーにたいするインデントルールとして@var{rules}を追加する。これらのルールは@code{smie-config}オプションにより定義された任意のモード固有ルールに追加される。特定のファイルにたいしてカスタムインデントルールを指定するには、@code{eval: (smie-config-local '(@var{rules}))}の形式のエントリーをそのファイルのローカル変数に追加する。"

#. type: cindex
#: original_texis/modes.texi:4970
#, no-wrap
msgid "parser-based indentation"
msgstr "parser-based indentation"

#. type: Plain text
#: original_texis/modes.texi:4985
msgid "When built with the tree-sitter library (@pxref{Parsing Program Source}), Emacs is capable of parsing the program source and producing a syntax tree.  This syntax tree can be used for guiding the program source indentation commands.  For maximum flexibility, it is possible to write a custom indentation function that queries the syntax tree and indents accordingly for each language, but that is a lot of work.  It is more convenient to use the simple indentation engine described below: then the major mode needs only write some indentation rules, and the engine takes care of the rest."
msgstr "tree-sitterライブラリー(@ref{Parsing Program Source}を参照)とともにEmacsをビルドした場合には、Emacsによるプログラムソースのパースと構文ツリー(syntax tree)の生成が可能になります。プログラムソースのインデントコマンドにたいするガイド役としてこの構文ツリーを使用することができます。柔軟性を最大限発揮できるように構文ツリーに問い合わせを行うインデント用のカスタマイズ関数を記述して、それぞれの言語に応じたインデントを行うことも可能ですが、これには多くの作業が伴います。より使いやすいのは、この後に説明するシンプルなインデント用エンジンでしょう。そうすればメジャーモードに要求されるのはいくつかのインデントルールの記述だけとなり、残りはこのエンジンが面倒を見てくれます。"

#. type: Plain text
#: original_texis/modes.texi:4990
msgid "To enable the parser-based indentation engine, either set @code{treesit-simple-indent-rules} and call @code{treesit-major-mode-setup}, or equivalently, set the value of @code{indent-line-function} to @code{treesit-indent}."
msgstr "パーサーベースのインデントエンジンを有効にするには@code{treesit-simple-indent-rules}をセットして@code{treesit-major-mode-setup}を呼び出すか、@code{indent-line-function}の値を@code{treesit-indent}にセットしてください(どちらを選んでも同じ)。"

#. type: defvar
#: original_texis/modes.texi:4991
#, no-wrap
msgid "treesit-indent-function"
msgstr "treesit-indent-function"

#. type: defvar
#: original_texis/modes.texi:4996
msgid "This variable stores the actual function called by @code{treesit-indent}.  By default, its value is @code{treesit-simple-indent}.  In the future we might add other, more complex indentation engines."
msgstr "この変数は@code{treesit-indent}によって呼び出される実際の関数が格納される。デフォルトの値は@code{treesit-simple-indent}。将来より複雑なエンジンが追加されるかもしれない。"

#. type: heading
#: original_texis/modes.texi:4998
#, no-wrap
msgid "Writing indentation rules"
msgstr "インデントルールの記述"

#. type: cindex
#: original_texis/modes.texi:4999
#, no-wrap
msgid "indentation rules, for parser-based indentation"
msgstr "indentation rules, for parser-based indentation"

#. type: defvar
#: original_texis/modes.texi:5001
#, no-wrap
msgid "treesit-simple-indent-rules"
msgstr "treesit-simple-indent-rules"

#. type: defvar
#: original_texis/modes.texi:5007
msgid "This local variable stores indentation rules for every language.  It is an alist with elements of the form @w{@code{(@var{language} . @var{rules})}}, where @var{language} is a language symbol, and @var{rules} is a list with elements of the form @w{@code{(@var{matcher} @var{anchor} @var{offset})}}."
msgstr "このローカル変数にはすべての言語用のインデントルールが格納される。値は@w{@code{(@var{language} . @var{rules})}}というフォームのalist。ここで@var{language}は言語シンボル、@var{rules}は@w{@code{(@var{matcher} @var{anchor} @var{offset})}}という形式の要素をもつリスト。"

#. type: defvar
#: original_texis/modes.texi:5014
msgid "First, Emacs passes the smallest tree-sitter node at the beginning of the current line to @var{matcher}; if it returns non-@code{nil}, this rule is applicable.  Then Emacs passes the node to @var{anchor}, which returns a buffer position.  Emacs takes the column number of that position, adds @var{offset} to it, and the result is the indentation column for the current line."
msgstr "最初にEmacsはカレント行の先頭にある最小のtree-sitterノードを@var{matcher}に渡して、非@code{nil}がリターンされればそのルールが適用できる。その後にEmacsはそのノードを@var{anchor}に渡して、バッファーの位置がリターンされる。Emacsがその位置の列番号を取得して@var{offset}を追加すると、、その結果がカレント行のインデント列となる。"

#. type: defvar
#: original_texis/modes.texi:5017
msgid "The @var{matcher} and @var{anchor} are functions, and Emacs provides convenient defaults for them."
msgstr "@var{matcher}と@var{anchor}は関数。これらにたいしてEmacsは便利なデフォルトを提供している。"

#. type: defvar
#: original_texis/modes.texi:5028
msgid "Each @var{matcher} or @var{anchor} is a function that takes three arguments: @var{node}, @var{parent}, and @var{bol}.  The argument @var{bol} is the buffer position whose indentation is required: the position of the first non-whitespace character after the beginning of the line.  The argument @var{node} is the largest node that starts at that position (and is not a root node); and @var{parent} is the parent of @var{node}.  However, when that position is in a whitespace or inside a multi-line string, no node can start at that position, so @var{node} is @code{nil}.  In that case, @var{parent} would be the smallest node that spans that position."
msgstr "@var{matcher}および@var{anchor}はそれぞれ@var{node}、@var{parent}、@var{bol}という3つの引数を受け取る関数。引数@var{bol}はインデントが要求されるバッファー位置(行頭の後の最初の非空白文字の位置)、引数@var{node}はその位置から開始されるもっとも大きい(かつルートではない)ノード、@var{parent}は@var{node}の親ノードである。ただしその位置にあるのが空白だったり、あるいは複数行文字列の内部の場合には、その位置から開始可能なノードは存在しないので、@var{node}は@code{nil}となる。このような場合には、その位置を跨ぐもっとも小さいノードが@var{parent}となる。"

#. type: defvar
#: original_texis/modes.texi:5031
msgid "@var{matcher} should return non-@code{nil} if the rule is applicable, and @var{anchor} should return a buffer position."
msgstr "ルールが適用可能なら@var{matcher}は非@code{nil}、@var{anchor}はバッファー位置をリターンすること。"

#. type: defvar
#: original_texis/modes.texi:5036
msgid "@var{offset} can be an integer, a variable whose value is an integer, or a function that returns an integer.  If it is a function, it is passed @var{node}, @var{parent}, and @var{bol}, like matchers and anchors."
msgstr "@var{offset}は整数、値が整数であるような変数、あるいは整数をリターンする関数を指定できる。関数の場合にはmatcherやanchorと同様に@var{node}、@var{parent}、@var{bol}が渡される。"

#. type: defvar
#: original_texis/modes.texi:5038
#, no-wrap
msgid "treesit-simple-indent-presets"
msgstr "treesit-simple-indent-presets"

#. type: defvar
#: original_texis/modes.texi:5043
msgid "This is a list of defaults for @var{matcher}s and @var{anchor}s in @code{treesit-simple-indent-rules}.  Each of them represents a function that takes 3 arguments: @var{node}, @var{parent}, and @var{bol}.  The available default functions are:"
msgstr "これは@code{treesit-simple-indent-rules}の@var{matcher}と@var{anchor}にたいするデフォルトのリスト。これらはそれぞれ@var{node}、@var{parent}、@var{bol}という3つの引数を受け取る関数である。利用できるデフォルト関数は以下のとおり:"

#. type: item
#: original_texis/modes.texi:5045
#, no-wrap
msgid "no-node"
msgstr "no-node"

#. type: defvar
#: original_texis/modes.texi:5051
msgid "This matcher is a function that is called with 3 arguments: @var{node}, @var{parent}, and @var{bol}.  It returns non-@code{nil}, indicating a match, if @var{node} is @code{nil}, i.e., there is no node that starts at @var{bol}.  This is the case when @var{bol} is on an empty line or inside a multi-line string, etc."
msgstr "このmatcherは@var{node}、@var{parent}、@var{bol}という3つの引数で呼び出される。@var{node}が@code{nil} (@var{bol}で始まるノードが存在せず、@var{bol}が空行や複数行の内部に@var{bol}がある場合などが該当)の場合には、マッチを表す非@code{nil}をリターンする。"

#. type: item
#: original_texis/modes.texi:5052
#, no-wrap
msgid "parent-is"
msgstr "parent-is"

#. type: defvar
#: original_texis/modes.texi:5057
msgid "This matcher is a function of one argument, @var{type}; it returns a function that is called with 3 arguments: @var{node}, @var{parent}, and @var{bol}, and returns non-@code{nil} (i.e., a match) if @var{parent}'s type matches regexp @var{type}."
msgstr "このmatcherは@var{type}という1つの引数で呼び出される関数をリターンする。この関数は@var{node}、@var{parent}、@var{bol}という3つの引数とともに呼び出されて、@var{parent}のタイプがregexpの@var{type}とマッチすれば非@code{nil} (マッチしたことを意味する)をリターンする。"

#. type: item
#: original_texis/modes.texi:5058
#, no-wrap
msgid "node-is"
msgstr "node-is"

#. type: defvar
#: original_texis/modes.texi:5063
msgid "This matcher is a function of one argument, @var{type}; it returns a function that is called with 3 arguments: @var{node}, @var{parent}, and @var{bol}, and returns non-@code{nil} if @var{node}'s type matches regexp @var{type}."
msgstr "このmatcherは@var{type}という1つの引数を受け取る関数。この関数は@var{node}、@var{parent}、@var{bol}という3つの引数とともに呼び出されて、@var{node}のタイプがregexpの@var{type}とマッチすれば非@code{nil}をリターンする。"

#. type: item
#: original_texis/modes.texi:5064
#, no-wrap
msgid "field-is"
msgstr "field-is"

#. type: defvar
#: original_texis/modes.texi:5069
msgid "This matcher is a function of one argument, @var{name}; it returns a function that is called with 3 arguments: @var{node}, @var{parent}, and @var{bol}, and returns non-@code{nil} if @var{node}'s field name in @var{parent} matches regexp @var{name}."
msgstr "このmatcherは@var{name}という1つの引数を受け取る関数。この関数は@var{node}、@var{parent}、@var{bol}という3つの引数とともに呼び出されて、@var{parent}の@var{node}のフィールド名がregexpの@var{name}とマッチすれば非@code{nil}をリターンする。"

#. type: item
#: original_texis/modes.texi:5070
#, no-wrap
msgid "query"
msgstr "query"

#. type: defvar
#: original_texis/modes.texi:5075
msgid "This matcher is a function of one argument, @var{query}; it returns a function that is called with 3 arguments: @var{node}, @var{parent}, and @var{bol}, and returns non-@code{nil} if querying @var{parent} with @var{query} captures @var{node} (@pxref{Pattern Matching})."
msgstr "このmatcherは@var{query}という1つの引数を受け取る関数。この関数は@var{node}、@var{parent}、@var{bol}という3つの引数とともに呼び出されて、@var{query}で@var{parent}に問い合わせた場合に@var{node}をキャプチャすれば非@code{nil}をリターンする(@ref{Pattern Matching}を参照)。"

#. type: item
#: original_texis/modes.texi:5076
#, no-wrap
msgid "match"
msgstr "match"

#. type: defvar
#: original_texis/modes.texi:5088
msgid "This matcher is a function of 5 arguments: @var{node-type}, @var{parent-type}, @var{node-field}, @var{node-index-min}, and @var{node-index-max}).  It returns a function that is called with 3 arguments: @var{node}, @var{parent}, and @var{bol}, and returns non-@code{nil} if @var{node}'s type matches regexp @var{node-type}, @var{parent}'s type matches regexp @var{parent-type}, @var{node}'s field name in @var{parent} matches regexp @var{node-field}, and @var{node}'s index among its siblings is between @var{node-index-min} and @var{node-index-max}.  If the value of an argument is @code{nil}, this matcher doesn't check that argument.  For example, to match the first child where parent is @code{argument_list}, use"
msgstr "このmatcherは@var{node-type}、@var{parent-type}、@var{node-field}、@var{node-index-min}、@var{node-index-max}という5つの引数とともに呼び出される関数。ここでリターンされた関数は@var{node}、@var{parent}、@var{bol}という3つの引数で呼び出される関数をリターンする。ここでリターンされた関数は@var{node}のタイプがregexpの@var{node-type}、@var{parent}のタイプがregexpの@var{parent-type}、@var{parent}の@var{node}のフィールド名がregexpの@var{node-field}、@var{node}のインデックスが兄弟ノード@var{node-index-min}と@var{node-index-max}の間にあれば非@code{nil}をリターンする。このmatcherは引数の値が@code{nil}であれば、その引数はチェックしない。たとえば親ノードとして@code{argument_list}をもつ最初の子ノードにマッチさせるには、以下のようにすればよい"

#. type: example
#: original_texis/modes.texi:5091
#, no-wrap
msgid "(match nil \"argument_list\" nil nil 0 0)\n"
msgstr "(match nil \"argument_list\" nil nil 0 0)\n"

#. type: defvar
#: original_texis/modes.texi:5095
msgid "In addition, @var{node-type} can be a special value @code{null}, which matches when the value of @var{node} is @code{nil}."
msgstr "更に@var{node-type}は特別な値@code{null}でもよく、これは@var{node}の値が@code{nil}のときにマッチする。"

#. type: item
#: original_texis/modes.texi:5096
#, no-wrap
msgid "n-p-gp"
msgstr "n-p-gp"

#. type: defvar
#: original_texis/modes.texi:5106
msgid "Short for ``node-parent-grandparent'', this matcher is a function of 3 arguments: @var{node-type}, @var{parent-type}, and @var{grandparent-type}.  It returns a function that is called with 3 arguments: @var{node}, @var{parent}, and @var{bol}, and returns non-@code{nil} if: (1) @var{node-type} matches @var{node}'s type, and (2) @var{parent-type} matches @var{parent}'s type, and (3)  @var{grandparent-type} matches @var{parent}'s parent's type.  If any of @var{node-type}, @var{parent-type}, and @var{grandparent-type} is @code{nil}, this function doesn't check for it."
msgstr "``node-parent-grandparent(ノード-親-祖父母)''の略。このmatcherは@var{node-type}、@var{parent-type}、@var{grandparent-type}という3つの引数を受け取る関数。これは@var{node}、@var{parent}、@var{bol}という3つの引数で呼び出されて(1) @var{node-type}が@var{node}'のタイプとマッチ、(2) @var{parent-type}が@var{parent}のタイプとマッチ (3) @var{grandparent-type}が@var{parent}の親のタイプという3つのマッチがすべて成り立てば非@code{nil}をリターンする関数をリターンする。この関数は@var{node-type}、@var{parent-type}、@var{grandparent-type}のいずれかが@code{nil}ならチェックを行わない。"

#. type: item
#: original_texis/modes.texi:5107
#, no-wrap
msgid "comment-end"
msgstr "comment-end"

#. type: defvar
#: original_texis/modes.texi:5112
msgid "This matcher is a function that is called with 3 arguments: @var{node}, @var{parent}, and @var{bol}, and returns non-@code{nil} if point is before a comment-ending token.  Comment-ending tokens are defined by regexp @code{comment-end-skip}."
msgstr "このmatcherは@var{node}、@var{parent}、@var{bol}という3つの引数で呼び出されて、コメント終了トークンｎ前にポイントがあれば非@code{nil}をリターンする関数。コメント終了トークンは@code{comment-end-skip}のregexpによって定義される。"

#. type: item
#: original_texis/modes.texi:5113
#, no-wrap
msgid "catch-all"
msgstr "catch-all"

#. type: defvar
#: original_texis/modes.texi:5117
msgid "This matcher is a function that is called with 3 arguments: @var{node}, @var{parent}, and @var{bol}.  It always returns non-@code{nil}, indicating a match."
msgstr "このmatcherは@var{node}、@var{parent}、@var{bol}という3つの引数で呼び出される関数。この関数はマッチを示すために常に非@code{nil}をリターンする。"

#. type: item
#: original_texis/modes.texi:5118
#, no-wrap
msgid "first-sibling"
msgstr "first-sibling"

#. type: defvar
#: original_texis/modes.texi:5122
msgid "This anchor is a function that is called with 3 arguments: @var{node}, @var{parent}, and @var{bol}, and returns the start of the first child of @var{parent}."
msgstr "このanchorは@var{node}、@var{parent}、@var{bol}という3つの引数とともに呼び出されて、@var{parent}の最初の子ノードの開始をリターンする関数。"

#. type: item
#: original_texis/modes.texi:5123
#, no-wrap
msgid "nth-sibling"
msgstr "nth-sibling"

#. type: defvar
#: original_texis/modes.texi:5130
msgid "This anchor is a function of two arguments: @var{n}, and an optional argument @var{named}.  It returns a function that is called with 3 arguments: @var{node}, @var{parent}, and @var{bol}, and returns the start of the @var{n}th child of @var{parent}.  If @var{named} is non-@code{nil}, only named children are counted (@pxref{tree-sitter named node, named node})."
msgstr "このanchorは@var{n}、オプションとして@var{named}という2つの引数を受け取る関数。@var{node}、@var{parent}、@var{bol}という3つｎ引数で呼び出されて、@var{parent}の@var{n}番目の開始をリターンする関数をリターンする。@var{named}が非@code{nil}なら、名前付きの子だけを考慮する(@ref{tree-sitter named node, named node}を参照)。"

#. type: item
#: original_texis/modes.texi:5131
#, no-wrap
msgid "parent"
msgstr "parent"

#. type: defvar
#: original_texis/modes.texi:5134
msgid "This anchor is a function that is called with 3 arguments: @var{node}, @var{parent}, and @var{bol}, and returns the start of @var{parent}."
msgstr "このanchorは@var{node}、@var{parent}、@var{bol}という3つの引数とともに呼び出されて、@var{parent}の開始をリターンする関数。"

#. type: item
#: original_texis/modes.texi:5135
#, no-wrap
msgid "grand-parent"
msgstr "grand-parent"

#. type: defvar
#: original_texis/modes.texi:5139
msgid "This anchor is a function that is called with 3 arguments: @var{node}, @var{parent}, and @var{bol}, and returns the start of @var{parent}'s parent."
msgstr "このanchorは@var{node}、@var{parent}、@var{bol}という3つの引数とともに呼び出されて、@var{parent}の親の開始をリターンする関数。"

#. type: item
#: original_texis/modes.texi:5140
#, no-wrap
msgid "great-grand-parent"
msgstr "great-grand-parent"

#. type: defvar
#: original_texis/modes.texi:5144
msgid "This anchor is a function that is called with 3 arguments: @var{node}, @var{parent}, and @var{bol}, and returns the start of @var{parent}'s parent's parent."
msgstr "このanchorは@var{node}、@var{parent}、@var{bol}という3つの引数とともに呼び出されて、@var{parent}の親の親の開始をリターンする関数。"

#. type: item
#: original_texis/modes.texi:5145
#, no-wrap
msgid "parent-bol"
msgstr "parent-bol"

#. type: defvar
#: original_texis/modes.texi:5149
msgid "This anchor is a function that is called with 3 arguments: @var{node}, @var{parent}, and @var{bol}, and returns the first non-space character on the line which @var{parent}'s start is on."
msgstr "このanchorは@var{node}、@var{parent}、@var{bol}という3つの引数とともに呼び出されて、@var{parent}の開始位置にある行の最初の非スペース文字をリターンする関数。"

#. type: item
#: original_texis/modes.texi:5150
#, no-wrap
msgid "standalone-parent"
msgstr "standalone-parent"

#. type: defvar
#: original_texis/modes.texi:5157
msgid "This anchor is a function that is called with 3 arguments: @var{node}, @var{parent}, and @var{bol}.  It finds the first ancestor node (parent, grandparent, etc.@:) of @var{node} that starts on its own line, and return the start of that node.  ``Starting on its own line'' means there is only whitespace character before the node on the line which the node's start is on."
msgstr "このanchorは@var{node}、@var{parent}、@var{bol}という3つの引数で呼び出される関数。この関数は独自の行で始まるような@var{node}の最初の祖先(親、祖父母、etc)を探して、そのノードの開始をリターンする。``独自の行で始まる''とはそのノードが開始する行において、ノードの前に空白文字しか存在しないことを意味する。"

#. type: item
#: original_texis/modes.texi:5158
#, no-wrap
msgid "prev-sibling"
msgstr "prev-sibling"

#. type: defvar
#: original_texis/modes.texi:5162
msgid "This anchor is a function that is called with 3 arguments: @var{node}, @var{parent}, and @var{bol}, and returns the start of the previous sibling of @var{node}."
msgstr "このanchorは@var{node}、@var{parent}、@var{bol}という3つの引数とともに呼び出されて、@var{node}の前の兄弟ノードの開始をリターンする関数。"

#. type: item
#: original_texis/modes.texi:5163
#, no-wrap
msgid "no-indent"
msgstr "no-indent"

#. type: defvar
#: original_texis/modes.texi:5166
msgid "This anchor is a function that is called with 3 arguments: @var{node}, @var{parent}, and @var{bol}, and returns the start of @var{node}."
msgstr "このanchorは@var{node}、@var{parent}、@var{bol}という3つの引数とともに呼び出されて、@var{node}の開始をリターンする関数。"

#. type: item
#: original_texis/modes.texi:5167
#, no-wrap
msgid "prev-line"
msgstr "prev-line"

#. type: defvar
#: original_texis/modes.texi:5171
msgid "This anchor is a function that is called with 3 arguments: @var{node}, @var{parent}, and @var{bol}, and returns the first non-whitespace character on the previous line."
msgstr "このanchorは@var{node}、@var{parent}、@var{bol}という3つの引数とともに呼び出されて、前の行の最初の必要空白文字をリターンする関数。"

#. type: item
#: original_texis/modes.texi:5172
#, no-wrap
msgid "column-0"
msgstr "column-0"

#. type: defvar
#: original_texis/modes.texi:5176
msgid "This anchor is a function that is called with 3 arguments: @var{node}, @var{parent}, and @var{bol}, and returns the beginning of the current line, which is at column 0."
msgstr "このanchorは@var{node}、@var{parent}、@var{bol}という3つの引数とともに呼び出されて、列0にあるカレント行先端をリターンする。"

#. type: item
#: original_texis/modes.texi:5177
#, no-wrap
msgid "comment-start"
msgstr "comment-start"

#. type: defvar
#: original_texis/modes.texi:5183
msgid "This anchor is a function that is called with 3 arguments: @var{node}, @var{parent}, and @var{bol}, and returns the position after the comment-start token.  Comment-start tokens are defined by regular expression @code{comment-start-skip}.  This function assumes @var{parent} is the comment node."
msgstr "このanchorは@var{node}、@var{parent}、@var{bol}という3つの引数とともに呼び出されて、コメント開始トークンの後の位置をリターンする。コメント開始トークンは正規表現@code{comment-start-skip}によって定義される。この関数は@var{parent}がコメントノードであるとみなす。"

#. type: item
#: original_texis/modes.texi:5184
#, no-wrap
msgid "prev-adaptive-prefix"
msgstr "prev-adaptive-prefix"

#. type: defvar
#: original_texis/modes.texi:5194
msgid "This anchor is a function that is called with 3 arguments: @var{node}, @var{parent}, and @var{bol}.  It tries to match @code{adaptive-fill-regexp} to the text at the beginning of the previous non-empty line.  If there is a match, this function returns the end of the match, otherwise it returns @code{nil}.  However, if the current line begins with a prefix (e.g., @samp{-}), return the beginning of the prefix of the previous line instead, so that the two prefixes align.  This anchor is useful for an @code{indent-relative}-like indent behavior for block comments."
msgstr "このanchorは@var{node}、@var{parent}、@var{bol}という3つの引数で呼び出される関数。前にある空ではない行の先頭にあるテキストにたいして、@code{adaptive-fill-regexp}とのマッチを試みる。マッチが存在すればマッチの終端、存在しなければ@code{nil}をリターンする。ただしカレント行がプレフィックス(例: @samp{-})で始まる場合には、前の行のプレフィックスと位置が揃うように、前の行のプレフィックスの開始をリターンする。このanchorはブロックコメントにたいして、@code{indent-relative}-*のような挙動のインデントを行う際に役に立つ。"

#. type: heading
#: original_texis/modes.texi:5198
#, no-wrap
msgid "Indentation utilities"
msgstr "インデント用のユーティリティー"

#. type: cindex
#: original_texis/modes.texi:5199
#, no-wrap
msgid "utility functions for parser-based indentation"
msgstr "utility functions for parser-based indentation"

#. type: Plain text
#: original_texis/modes.texi:5203
msgid "Here are some utility functions that can help writing parser-based indentation rules."
msgstr "以下にパーサーベースのインデントルールを記述する助けとなるユーティリティー関数をいくつか挙げます。"

#. type: deffn
#: original_texis/modes.texi:5204
#, no-wrap
msgid "Command treesit-check-indent mode"
msgstr "Command treesit-check-indent mode"

#.  Are colors customizable? faces?
#. type: deffn
#: original_texis/modes.texi:5211
msgid "This command checks the current buffer's indentation against major mode @var{mode}.  It indents the current buffer according to @var{mode} and compares the results with the current indentation.  Then it pops up a buffer showing the differences.  Correct indentation (target) is shown in green color, current indentation is shown in red color."
msgstr "このコマンドはメジャーモード@var{mode}にたいするカレントバッファーのインデントをチェックする。この関数は@var{mode}に応じてカレントバッファーをインデントして、その結果をカレントのインデントと比較、その後に差分を表示するバッファーをポップアップする。(インデント対象の)正しいインデントはグリーン、カレントのインデントは赤のカラーで示される。"

#. type: Plain text
#: original_texis/modes.texi:5215
msgid "It is also helpful to use @code{treesit-inspect-mode} (@pxref{Language Grammar}) when writing indentation rules."
msgstr "インデントのルールを記述する際には、@code{treesit-inspect-mode}を使用するのも助けとなるでしょう(@ref{Language Grammar}を参照)。"

#. type: cindex
#: original_texis/modes.texi:5218
#, no-wrap
msgid "desktop save mode"
msgstr "desktop save mode"

#. type: Plain text
#: original_texis/modes.texi:5225
msgid "@dfn{Desktop Save Mode} is a feature to save the state of Emacs from one session to another.  The user-level commands for using Desktop Save Mode are described in the GNU Emacs Manual (@pxref{Saving Emacs Sessions,,, emacs, the GNU Emacs Manual}).  Modes whose buffers visit a file, don't have to do anything to use this feature."
msgstr "@dfn{Desktop Saveモード}とは、あるセッションから別のセッションへEmacs状態を保存する機能です。Desktop Saveモードの使用に関するユーザーレベルのコマンドについては、GNU Emacsマニュアルに記載されています(@ref{Saving Emacs Sessions,,, emacs, the GNU Emacs Manual}を参照)。バッファーでファイルをvisitしているモードでは、この機能を使うために何も行う必要はありません。"

#. type: Plain text
#: original_texis/modes.texi:5229
msgid "For buffers not visiting a file to have their state saved, the major mode must bind the buffer local variable @code{desktop-save-buffer} to a non-@code{nil} value."
msgstr "ファイルをvisitしていないバッファーについて状態を保存するには、そのメジャーモードがバッファーローカル変数@code{desktop-save-buffer}を非@code{nil}値にバインドしなければなりません。"

#. type: defvar
#: original_texis/modes.texi:5230
#, no-wrap
msgid "desktop-save-buffer"
msgstr "desktop-save-buffer"

#. type: defvar
#: original_texis/modes.texi:5238
msgid "If this buffer-local variable is non-@code{nil}, the buffer will have its state saved in the desktop file at desktop save.  If the value is a function, it is called at desktop save with argument @var{desktop-dirname}, and its value is saved in the desktop file along with the state of the buffer for which it was called.  When file names are returned as part of the auxiliary information, they should be formatted using the call"
msgstr "このバッファーローカル変数が非@code{nil}なら、デスクトップ保存時にそのバッファー状態がdesktopファイルに保存される。値が関数なら、その関数はデスクトップ保存時に引数@var{desktop-dirname}で呼び出されて、関数が呼び出されたバッファーの状態とともに関数の値がdesktopファイルに保存される。補助的な情報の一部としてファイル名がリターンされたとき、それらは以下を呼び出してフォーマットされること"

#. type: example
#: original_texis/modes.texi:5241
#, no-wrap
msgid "(desktop-file-name @var{file-name} @var{desktop-dirname})\n"
msgstr "(desktop-file-name @var{file-name} @var{desktop-dirname})\n"

#. type: Plain text
#: original_texis/modes.texi:5248
msgid "For buffers not visiting a file to be restored, the major mode must define a function to do the job, and that function must be listed in the alist @code{desktop-buffer-mode-handlers}."
msgstr "ファイルをvisitしていないバッファーがリストアされるようにするには、メジャーモードがその処理を行う関数を定義しなければならず、その関数は連想リスト@code{desktop-buffer-mode-handlers}にリストされなければならない。"

#. type: defvar
#: original_texis/modes.texi:5249
#, no-wrap
msgid "desktop-buffer-mode-handlers"
msgstr "desktop-buffer-mode-handlers"

#. type: defvar
#: original_texis/modes.texi:5251
msgid "Alist with elements"
msgstr "以下を要素にもつalist"

#. type: example
#: original_texis/modes.texi:5254
#, no-wrap
msgid "(@var{major-mode} . @var{restore-buffer-function})\n"
msgstr "(@var{major-mode} . @var{restore-buffer-function})\n"

#. type: defvar
#: original_texis/modes.texi:5258
msgid "The function @var{restore-buffer-function} will be called with argument list"
msgstr "関数@var{restore-buffer-function}は以下の引数リストで呼び出される"

#. type: example
#: original_texis/modes.texi:5261
#, no-wrap
msgid "(@var{buffer-file-name} @var{buffer-name} @var{desktop-buffer-misc})\n"
msgstr "(@var{buffer-file-name} @var{buffer-name} @var{desktop-buffer-misc})\n"

#. type: defvar
#: original_texis/modes.texi:5266
msgid "and it should return the restored buffer.  Here @var{desktop-buffer-misc} is the value returned by the function optionally bound to @code{desktop-save-buffer}."
msgstr "この関数はリストアされたバッファーをリターンすること。ここで@var{desktop-buffer-misc}は、オプションで@code{desktop-save-buffer}にバインドされる関数がリターンする値。"
