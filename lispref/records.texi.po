# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Emacs 26.1\n"
"POT-Creation-Date: 2020-03-12 20:45+0900\n"
"PO-Revision-Date: 2020-03-14 20:29+0900\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: original_texis/records.texi:5 original_texis/records.texi:6
#, no-wrap
msgid "Records"
msgstr "Records"

#. type: cindex
#: original_texis/records.texi:7
#, no-wrap
msgid "records"
msgstr "records"

#. type: Plain text
#: original_texis/records.texi:13
msgid "The purpose of records is to allow programmers to create objects with new types that are not built into Emacs.  They are used as the underlying representation of @code{cl-defstruct} and @code{defclass} instances."
msgstr "レコードの目的はEmacsにビルトインされていない新たな型のオブジェクトをプログラマーが作成できるようにすることです。これらは@code{cl-defstruct}や@code{defclass}のインスタンスを表現する基礎として使用されています。"

#. type: Plain text
#: original_texis/records.texi:21
msgid "Internally, a record object is much like a vector; its slots can be accessed using @code{aref} and it can be copied using @code{copy-sequence}.  However, the first slot is used to hold its type as returned by @code{type-of}.  Also, in the current implementation records can have at most 4096 slots, whereas vectors can be much larger.  Like arrays, records use zero-origin indexing: the first slot has index 0."
msgstr "レコードオブジェクトは内部的にはベクターと似ています。レコードオブジェクトのスロットは@code{aref}を使用してアクセス可能であり、@code{copy-sequence}を使用してコピーできます。しかし最初のスロットは@code{type-of}がリターンする型を保持するために使用されます。更に現実装ではレコードは最大で4096スロットを所有できますが、ベクターはそれより多くのスロットを所有できます。レコードは配列と同じように0基準のインデックスを使用するので、最初のスロットはインデックスが0になります。"

#. type: Plain text
#: original_texis/records.texi:25
msgid "The type slot should be a symbol or a type descriptor.  If it's a type descriptor, the symbol naming its type will be returned; @ref{Type Descriptors}.  Any other kind of object is returned as-is."
msgstr "型スロット(type slot)はシンボルか型記述子であるべきです。型記述子なら型を命名するシンボルがリターンされます。@ref{Type Descriptors}を参照してください。その他の種類のオブジェクトはすべてそのままリターンされます。"

#. type: Plain text
#: original_texis/records.texi:29
msgid "The printed representation of records is @samp{#s} followed by a list specifying the contents.  The first list element must be the record type.  The following elements are the record slots."
msgstr "レコードのプリント表現では@samp{#s}の後にコンテンツを指定するリストが続きます。リストの最初の要素はそのレコードの型である必要があります。後続の要素はレコードのスロットです。"

#. type: Plain text
#: original_texis/records.texi:36
msgid "To avoid conflicts with other type names, Lisp programs that define new types of records should normally use the naming conventions of the package where these record types are introduced for the names of the types.  Note that the names of the types which could possibly conflict might not be known at the time the package defining a record type is loaded; they could be loaded at some future point in time."
msgstr "レコードの型を新たに定義するLispプログラムは他の型名との衝突を避けるために、通常はレコード型を導入する部分では型名にパッケージの命名規約を使用するべきです。衝突する可能性がある型名は、パッケージが定義したレコード型のロード時には不明かもしれないことに注意してください。これらは将来のある時点でロードされる可能性があります。"

#. type: Plain text
#: original_texis/records.texi:40
msgid "A record is considered a constant for evaluation: the result of evaluating it is the same record.  This does not evaluate or even examine the slots.  @xref{Self-Evaluating Forms}."
msgstr "レコードは評価にたいして定数とみなされます。評価すると結果は同じレコードになります。レコードは評価されずにスロットのチェックさえ行われません。@ref{Self-Evaluating Forms}を参照してください。"

#. type: section
#: original_texis/records.texi:44 original_texis/records.texi:46
#: original_texis/records.texi:47
#, no-wrap
msgid "Record Functions"
msgstr "Record Functions"

#. type: menuentry
#: original_texis/records.texi:44
msgid "Functions for records."
msgstr "レコード用の関数。"

#. type: section
#: original_texis/records.texi:44 original_texis/records.texi:84
#: original_texis/records.texi:85
#, no-wrap
msgid "Backward Compatibility"
msgstr "Backward Compatibility"

#. type: menuentry
#: original_texis/records.texi:44
msgid "Compatibility for cl-defstruct."
msgstr "cl-defstructにたいする後方互換について。"

#. type: defun
#: original_texis/records.texi:49
#, no-wrap
msgid "recordp object"
msgstr "recordp object"

#. type: defun
#: original_texis/records.texi:51
msgid "This function returns @code{t} if @var{object} is a record."
msgstr "この関数は@var{object}がレコードなら@code{t}をリターンする。"

#. type: group
#: original_texis/records.texi:56
#, no-wrap
msgid ""
"(recordp #s(a))\n"
"     @result{} t\n"
msgstr ""
"(recordp #s(a))\n"
"     @result{} t\n"

#. type: defun
#: original_texis/records.texi:60
#, no-wrap
msgid "record type &rest objects"
msgstr "record type &rest objects"

#. type: defun
#: original_texis/records.texi:63
msgid "This function creates and returns a record whose type is @var{type} and remaining slots are the rest of the arguments, @var{objects}."
msgstr "この関数は型が@var{type}であり、残りのスロットが残りの引数@var{objects}であるようなレコードを作成してリターンする。"

#. type: group
#: original_texis/records.texi:68
#, no-wrap
msgid ""
"(record 'foo 23 [bar baz] \"rats\")\n"
"     @result{} #s(foo 23 [bar baz] \"rats\")\n"
msgstr ""
"(record 'foo 23 [bar baz] \"rats\")\n"
"     @result{} #s(foo 23 [bar baz] \"rats\")\n"

#. type: defun
#: original_texis/records.texi:72
#, no-wrap
msgid "make-record type length object"
msgstr "make-record type length object"

#. type: defun
#: original_texis/records.texi:75
msgid "This function returns a new record with type @var{type} and @var{length} more slots, each initialized to @var{object}."
msgstr "この関数は型が@var{type}、@var{object}で初期化されたスロット数が@var{length}の新たなレコードをリターンする。"

#. type: group
#: original_texis/records.texi:80
#, no-wrap
msgid ""
"(setq sleepy (make-record 'foo 9 'Z))\n"
"     @result{} #s(foo Z Z Z Z Z Z Z Z Z)\n"
msgstr ""
"(setq sleepy (make-record 'foo 9 'Z))\n"
"     @result{} #s(foo Z Z Z Z Z Z Z Z Z)\n"

#. type: Plain text
#: original_texis/records.texi:92
msgid "Code compiled with older versions of @code{cl-defstruct} that doesn't use records may run into problems when used in a new Emacs.  To alleviate this, Emacs detects when an old @code{cl-defstruct} is used, and enables a mode in which @code{type-of} handles old struct objects as if they were records."
msgstr "レコードを使用しない古いバージョンの@code{cl-defstruct}でコンパイルされたコードを新しいEmacsで実行したときに問題が発生するかもしれません。この魔問題を軽減するために、Emacsは古い@code{cl-defstruct}の使用を検知した際に古い構造体オブジェクトがレコードであるかのように処理するモードを有効にします。"

#. type: defun
#: original_texis/records.texi:93
#, no-wrap
msgid "cl-old-struct-compat-mode arg"
msgstr "cl-old-struct-compat-mode arg"

#. type: defun
#: original_texis/records.texi:96
msgid "If @var{arg} is positive, enable backward compatibility with old-style structs."
msgstr "@var{arg}が正なら旧スタイルの構造体にたいする後方互換を有効にする。"
