# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2024-05-04 06:23+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: original_texis/variables.texi:5 original_texis/variables.texi:6
#, no-wrap
msgid "Variables"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:7
#, no-wrap
msgid "variable"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:18
msgid ""
"A @dfn{variable} is a name used in a program to stand for a value.  In Lisp, "
"each variable is represented by a Lisp symbol (@pxref{Symbols}).  The "
"variable name is simply the symbol's name, and the variable's value is "
"stored in the symbol's value cell@footnote{To be precise, under the default "
"@dfn{dynamic scoping} rule, the value cell always holds the variable's "
"current value, but this is not the case under the @dfn{lexical scoping} "
"rule.  @xref{Variable Scoping}, for details.}.  @xref{Symbol Components}.  "
"In Emacs Lisp, the use of a symbol as a variable is independent of its use "
"as a function name."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:25
msgid ""
"As previously noted in this manual, a Lisp program is represented primarily "
"by Lisp objects, and only secondarily as text.  The textual form of a Lisp "
"program is given by the read syntax of the Lisp objects that constitute the "
"program.  Hence, the textual form of a variable in a Lisp program is written "
"using the read syntax for the symbol representing the variable."
msgstr ""

#. type: section
#: original_texis/variables.texi:48 original_texis/variables.texi:50
#: original_texis/variables.texi:51
#, no-wrap
msgid "Global Variables"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:48
msgid "Variable values that exist permanently, everywhere."
msgstr ""

#. type: node
#: original_texis/variables.texi:48 original_texis/variables.texi:102
#, no-wrap
msgid "Constant Variables"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:48
msgid "Variables that never change."
msgstr ""

#. type: section
#: original_texis/variables.texi:48 original_texis/variables.texi:150
#: original_texis/variables.texi:151
#, no-wrap
msgid "Local Variables"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:48
msgid "Variable values that exist only temporarily."
msgstr ""

#. type: node
#: original_texis/variables.texi:48 original_texis/variables.texi:378
#, no-wrap
msgid "Void Variables"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:48
msgid "Symbols that lack values."
msgstr ""

#. type: node
#: original_texis/variables.texi:48 original_texis/variables.texi:474
#, no-wrap
msgid "Defining Variables"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:48
msgid "A definition says a symbol is used as a variable."
msgstr ""

#. type: node
#: original_texis/variables.texi:48 original_texis/variables.texi:622
#, no-wrap
msgid "Tips for Defining"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:48
msgid "Things you should think about when you define a variable."
msgstr ""

#. type: node
#: original_texis/variables.texi:48 original_texis/variables.texi:703
#, no-wrap
msgid "Accessing Variables"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:48
msgid "Examining values of variables whose names are known only at run time."
msgstr ""

#. type: node
#: original_texis/variables.texi:48 original_texis/variables.texi:759
#, no-wrap
msgid "Setting Variables"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:48
msgid "Storing new values in variables."
msgstr ""

#. type: node
#: original_texis/variables.texi:48 original_texis/variables.texi:902
#, no-wrap
msgid "Watching Variables"
msgstr ""

#. type: section
#: original_texis/variables.texi:48 original_texis/variables.texi:903
#, no-wrap
msgid "Running a function when a variable is changed."
msgstr ""

#. type: node
#: original_texis/variables.texi:48 original_texis/variables.texi:964
#, no-wrap
msgid "Variable Scoping"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:48
msgid "How Lisp chooses among local and global values."
msgstr ""

#. type: section
#: original_texis/variables.texi:48 original_texis/variables.texi:1415
#: original_texis/variables.texi:1416
#, no-wrap
msgid "Buffer-Local Variables"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:48
msgid "Variable values in effect only in one buffer."
msgstr ""

#. type: section
#: original_texis/variables.texi:48 original_texis/variables.texi:1934
#: original_texis/variables.texi:1935
#, no-wrap
msgid "File Local Variables"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:48
msgid "Handling local variable lists in files."
msgstr ""

#. type: section
#: original_texis/variables.texi:48 original_texis/variables.texi:2175
#: original_texis/variables.texi:2176
#, no-wrap
msgid "Directory Local Variables"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:48
msgid "Local variables common to all files in a directory."
msgstr ""

#. type: section
#: original_texis/variables.texi:48 original_texis/variables.texi:2286
#: original_texis/variables.texi:2287
#, no-wrap
msgid "Connection Local Variables"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:48
msgid "Local variables common for remote connections."
msgstr ""

#. type: section
#: original_texis/variables.texi:48 original_texis/variables.texi:2572
#: original_texis/variables.texi:2573
#, no-wrap
msgid "Variable Aliases"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:48
msgid "Variables that are aliases for other variables."
msgstr ""

#. type: section
#: original_texis/variables.texi:48 original_texis/variables.texi:2673
#: original_texis/variables.texi:2674
#, no-wrap
msgid "Variables with Restricted Values"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:48
msgid ""
"Non-constant variables whose value can @emph{not} be an arbitrary Lisp "
"object."
msgstr ""

#. type: section
#: original_texis/variables.texi:48 original_texis/variables.texi:2709
#: original_texis/variables.texi:2710
#, no-wrap
msgid "Generalized Variables"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:48
msgid "Extending the concept of variables."
msgstr ""

#. type: section
#: original_texis/variables.texi:48 original_texis/variables.texi:2986
#: original_texis/variables.texi:2987
#, no-wrap
msgid "Multisession Variables"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:48
msgid "Variables that survive restarting Emacs."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:52
#, no-wrap
msgid "global variable"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:59
msgid ""
"The simplest way to use a variable is @dfn{globally}.  This means that the "
"variable has just one value at a time, and this value is in effect (at least "
"for the moment) throughout the Lisp system.  The value remains in effect "
"until you specify a new one.  When a new value replaces the old one, no "
"trace of the old value remains in the variable."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:61
msgid "You specify a value for a symbol with @code{setq}.  For example,"
msgstr ""

#. type: example
#: original_texis/variables.texi:64
#, no-wrap
msgid "(setq x '(a b))\n"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:71
msgid ""
"gives the variable @code{x} the value @code{(a b)}.  Note that @code{setq} "
"is a special form (@pxref{Special Forms}); it does not evaluate its first "
"argument, the name of the variable, but it does evaluate the second "
"argument, the new value."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:74
msgid ""
"Once the variable has a value, you can refer to it by using the symbol "
"itself as an expression.  Thus,"
msgstr ""

#. type: group
#: original_texis/variables.texi:78
#, no-wrap
msgid "x @result{} (a b)\n"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:83
msgid "assuming the @code{setq} form shown above has already been executed."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:86
msgid "If you do set the same variable again, the new value replaces the old one:"
msgstr ""

#. type: group
#: original_texis/variables.texi:91
#, no-wrap
msgid ""
"x\n"
"     @result{} (a b)\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:95
#, no-wrap
msgid ""
"(setq x 4)\n"
"     @result{} 4\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:99
#, no-wrap
msgid ""
"x\n"
"     @result{} 4\n"
msgstr ""

#. type: section
#: original_texis/variables.texi:103
#, no-wrap
msgid "Variables that Never Change"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:104
#, no-wrap
msgid "@code{setting-constant} error"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:105
#, no-wrap
msgid "keyword symbol"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:106
#, no-wrap
msgid "variable with constant value"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:107 original_texis/variables.texi:572
#, no-wrap
msgid "constant variables"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:108
#, no-wrap
msgid "symbol that evaluates to itself"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:109
#, no-wrap
msgid "symbol with constant value"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:119
msgid ""
"In Emacs Lisp, certain symbols normally evaluate to themselves.  These "
"include @code{nil} and @code{t}, as well as any symbol whose name starts "
"with @samp{:} (these are called @dfn{keywords}).  These symbols cannot be "
"rebound, nor can their values be changed.  Any attempt to set or bind "
"@code{nil} or @code{t} signals a @code{setting-constant} error.  The same is "
"true for a keyword (a symbol whose name starts with @samp{:}), if it is "
"interned in the standard obarray, except that setting such a symbol to "
"itself is not an error."
msgstr ""

#. type: group
#: original_texis/variables.texi:124
#, no-wrap
msgid ""
"nil @equiv{} 'nil\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:128
#, no-wrap
msgid ""
"(setq nil 500)\n"
"@error{} Attempt to set constant symbol: nil\n"
msgstr ""

#. type: defun
#: original_texis/variables.texi:131
#, no-wrap
msgid "keywordp object"
msgstr ""

#. type: defun
#: original_texis/variables.texi:135
msgid ""
"function returns @code{t} if @var{object} is a symbol whose name starts with "
"@samp{:}, interned in the standard obarray, and returns @code{nil} "
"otherwise."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:142
msgid ""
"These constants are fundamentally different from the constants defined using "
"the @code{defconst} special form (@pxref{Defining Variables}).  A "
"@code{defconst} form serves to inform human readers that you do not intend "
"to change the value of a variable, but Emacs does not raise an error if you "
"actually change it."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:143
#, no-wrap
msgid "read-only variables"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:149
msgid ""
"A small number of additional symbols are made read-only for various "
"practical reasons.  These include @code{enable-multibyte-characters}, "
"@code{most-positive-fixnum}, @code{most-negative-fixnum}, and a few others.  "
"Any attempt to set or bind these also signals a @code{setting-constant} "
"error."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:152
#, no-wrap
msgid "binding local variables"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:153
#, no-wrap
msgid "local variables"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:154
#, no-wrap
msgid "local binding"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:155
#, no-wrap
msgid "global binding"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:163
msgid ""
"Global variables have values that last until explicitly superseded with new "
"values.  Sometimes it is useful to give a variable a @dfn{local value}---a "
"value that takes effect only within a certain part of a Lisp program.  When "
"a variable has a local value, we say that it is @dfn{locally bound} to that "
"value, and that it is a @dfn{local variable}."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:170
msgid ""
"For example, when a function is called, its argument variables receive local "
"values, which are the actual arguments supplied to the function call; these "
"local bindings take effect within the body of the function.  To take another "
"example, the @code{let} special form explicitly establishes local bindings "
"for specific variables, which take effect only within the body of the "
"@code{let} form."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:173
msgid ""
"We also speak of the @dfn{global binding}, which is where (conceptually) the "
"global value is kept."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:174
#, no-wrap
msgid "shadowing of variables"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:182
msgid ""
"Establishing a local binding saves away the variable's previous value (or "
"lack of one).  We say that the previous value is @dfn{shadowed}.  Both "
"global and local values may be shadowed.  If a local binding is in effect, "
"using @code{setq} on the local variable stores the specified value in the "
"local binding.  When that local binding is no longer in effect, the "
"previously shadowed value (or lack of one) comes back."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:183
#, no-wrap
msgid "current binding"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:189
msgid ""
"A variable can have more than one local binding at a time (e.g., if there "
"are nested @code{let} forms that bind the variable).  The @dfn{current "
"binding} is the local binding that is actually in effect.  It determines the "
"value returned by evaluating the variable symbol, and it is the binding "
"acted on by @code{setq}."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:203
msgid ""
"For most purposes, you can think of the current binding as the innermost "
"local binding, or the global binding if there is no local binding.  To be "
"more precise, a rule called the @dfn{scoping rule} determines where in a "
"program a local binding takes effect.  The default scoping rule in Emacs "
"Lisp is called @dfn{dynamic scoping}, which simply states that the current "
"binding at any given point in the execution of a program is the most "
"recently-created binding for that variable that still exists.  For details "
"about dynamic scoping, and an alternative scoping rule called @dfn{lexical "
"scoping}, @pxref{Variable Scoping}.  Lately Emacs is moving towards using "
"lexical binding in more and more places, with the goal of eventually making "
"lexical binding the default.  In particular, all Emacs Lisp source files and "
"the @file{*scratch*} buffer use lexical scoping."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:206
msgid "The special forms @code{let} and @code{let*} exist to create local bindings:"
msgstr ""

#. type: defspec
#: original_texis/variables.texi:207
#, no-wrap
msgid "let (bindings@dots{}) forms@dots{}"
msgstr ""

#. type: defspec
#: original_texis/variables.texi:213
msgid ""
"This special form sets up local bindings for a certain set of variables, as "
"specified by @var{bindings}, and then evaluates all of the @var{forms} in "
"textual order.  Its return value is the value of the last form in "
"@var{forms}.  The local bindings set up by @code{let} will be in effect only "
"within the body of @var{forms}."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:219
msgid ""
"Each of the @var{bindings} is either @w{(i) a} symbol, in which case that "
"symbol is locally bound to @code{nil}; or @w{(ii) a} list of the form "
"@code{(@var{symbol} @var{value-form})}, in which case @var{symbol} is "
"locally bound to the result of evaluating @var{value-form}.  If "
"@var{value-form} is omitted, @code{nil} is used."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:224
msgid ""
"All of the @var{value-form}s in @var{bindings} are evaluated in the order "
"they appear and @emph{before} binding any of the symbols to them.  Here is "
"an example of this: @code{z} is bound to the old value of @code{y}, which is "
"2, not the new value of @code{y}, which is 1."
msgstr ""

#. type: group
#: original_texis/variables.texi:229 original_texis/variables.texi:263
#, no-wrap
msgid ""
"(setq y 2)\n"
"     @result{} 2\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:236
#, no-wrap
msgid ""
"(let ((y 1)\n"
"      (z y))\n"
"  (list y z))\n"
"     @result{} (1 2)\n"
msgstr ""

#. type: defspec
#: original_texis/variables.texi:241
msgid ""
"On the other hand, the order of @emph{bindings} is unspecified: in the "
"following example, either 1 or 2 might be printed."
msgstr ""

#. type: example
#: original_texis/variables.texi:246
#, no-wrap
msgid ""
"(let ((x 1)\n"
"      (x 2))\n"
"  (print x))\n"
msgstr ""

#. type: defspec
#: original_texis/variables.texi:250
msgid ""
"Therefore, avoid binding a variable more than once in a single @code{let} "
"form."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:252
#, no-wrap
msgid "let* (bindings@dots{}) forms@dots{}"
msgstr ""

#. type: defspec
#: original_texis/variables.texi:258
msgid ""
"This special form is like @code{let}, but it binds each variable right after "
"computing its local value, before computing the local value for the next "
"variable.  Therefore, an expression in @var{bindings} can refer to the "
"preceding symbols bound in this @code{let*} form.  Compare the following "
"example with the example above for @code{let}."
msgstr ""

#. type: group
#: original_texis/variables.texi:270
#, no-wrap
msgid ""
"(let* ((y 1)\n"
"       (z y))    ; @r{Use the just-established value of @code{y}.}\n"
"  (list y z))\n"
"     @result{} (1 1)\n"
msgstr ""

#. type: defspec
#: original_texis/variables.texi:276
msgid ""
"Basically, the @code{let*} binding of @code{x} and @code{y} in the previous "
"example is equivalent to using nested @code{let} bindings:"
msgstr ""

#. type: example
#: original_texis/variables.texi:281
#, no-wrap
msgid ""
"(let ((y 1))\n"
"  (let ((z y))\n"
"    (list y z)))\n"
msgstr ""

#. type: defspec
#: original_texis/variables.texi:285
#, no-wrap
msgid "letrec (bindings@dots{}) forms@dots{}"
msgstr ""

#. type: defspec
#: original_texis/variables.texi:292
msgid ""
"This special form is like @code{let*}, but all the variables are bound "
"before any of the local values are computed.  The values are then assigned "
"to the locally bound variables.  This is only useful when lexical binding is "
"in effect, and you want to create closures that refer to bindings that would "
"otherwise not yet be in effect when using @code{let*}."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:295
msgid ""
"For instance, here's a closure that removes itself from a hook after being "
"run once:"
msgstr ""

#. type: lisp
#: original_texis/variables.texi:301
#, no-wrap
msgid ""
"(letrec ((hookfun (lambda ()\n"
"                    (message \"Run once\")\n"
"                    (remove-hook 'post-command-hook hookfun))))\n"
"  (add-hook 'post-command-hook hookfun))\n"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:304
#, no-wrap
msgid "dynamic binding, temporarily"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:305
#, no-wrap
msgid "dynamic let-binding"
msgstr ""

#. type: defspec
#: original_texis/variables.texi:306
#, no-wrap
msgid "dlet (bindings@dots{}) forms@dots{}"
msgstr ""

#. type: defspec
#: original_texis/variables.texi:312
msgid ""
"This special form is like @code{let}, but it binds all variables "
"dynamically.  This is rarely useful---you usually want to bind normal "
"variables lexically, and special variables (i.e., variables that are defined "
"with @code{defvar}) dynamically, and this is what @code{let} does."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:318
msgid ""
"@code{dlet} can be useful when interfacing with old code that assumes that "
"certain variables are dynamically bound (@pxref{Dynamic Binding}), but it's "
"impractical to @code{defvar} these variables.  @code{dlet} will temporarily "
"make the bound variables special, execute the forms, and then make the "
"variables non-special again."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:320
#, no-wrap
msgid "named-let name bindings &rest body"
msgstr ""

#. type: defspec
#: original_texis/variables.texi:330
msgid ""
"This special form is a looping construct inspired from the Scheme language.  "
"It is similar to @code{let}: It binds the variables in @var{bindings}, and "
"then evaluates @var{body}.  However, @code{named-let} also binds @var{name} "
"to a local function whose formal arguments are the variables in "
"@var{bindings} and whose body is @var{body}.  This allows @var{body} to call "
"itself recursively by calling @var{name}, where the arguments passed to "
"@var{name} are used as the new values of the bound variables in the "
"recursive invocation."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:332
msgid "Example of a loop summing a list of numbers:"
msgstr ""

#. type: lisp
#: original_texis/variables.texi:340
#, no-wrap
msgid ""
"(named-let sum ((numbers '(1 2 3 4))\n"
"                (running-sum 0))\n"
"  (if numbers\n"
"      (sum (cdr numbers) (+ running-sum (car numbers)))\n"
"    running-sum))\n"
"@result{} 10\n"
msgstr ""

#. type: anchor{#1}
#: original_texis/variables.texi:349
msgid "Tail recursion"
msgstr ""

#. type: defspec
#: original_texis/variables.texi:349
msgid ""
"Recursive calls to @var{name} that occur in @emph{tail positions} in "
"@var{body} are guaranteed to be optimized as @emph{tail calls}, which means "
"that they will not consume any additional stack space no matter how deeply "
"the recursion runs.  Such recursive calls will effectively jump to the top "
"of the loop with new values for the variables."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:353
msgid ""
"A function call is in the tail position if it's the very last thing done so "
"that the value returned by the call is the value of @var{body} itself, as is "
"the case in the recursive call to @code{sum} above."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:356
msgid ""
"@code{named-let} can only be used when lexical-binding is enabled.  "
"@xref{Lexical Binding}."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:360
msgid "Here is a complete list of the other facilities that create local bindings:"
msgstr ""

#. type: itemize
#: original_texis/variables.texi:364
msgid "Function calls (@pxref{Functions})."
msgstr ""

#. type: itemize
#: original_texis/variables.texi:367
msgid "Macro calls (@pxref{Macros})."
msgstr ""

#. type: itemize
#: original_texis/variables.texi:370
msgid "@code{condition-case} (@pxref{Errors})."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:377
msgid ""
"Variables can also have buffer-local bindings (@pxref{Buffer-Local "
"Variables}); a few variables have terminal-local bindings (@pxref{Multiple "
"Terminals}).  These kinds of bindings work somewhat like ordinary local "
"bindings, but they are localized depending on where you are in Emacs."
msgstr ""

#. type: section
#: original_texis/variables.texi:379
#, no-wrap
msgid "When a Variable is Void"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:380
#, no-wrap
msgid "@code{void-variable} error"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:381
#, no-wrap
msgid "void variable"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:385
msgid ""
"We say that a variable is void if its symbol has an unassigned value cell "
"(@pxref{Symbol Components})."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:394
msgid ""
"Under Emacs Lisp's default dynamic scoping rule (@pxref{Variable Scoping}), "
"the value cell stores the variable's current (local or global) value.  Note "
"that an unassigned value cell is @emph{not} the same as having @code{nil} in "
"the value cell.  The symbol @code{nil} is a Lisp object and can be the value "
"of a variable, just as any other object can be; but it is still a value.  If "
"a variable is void, trying to evaluate the variable signals a "
"@code{void-variable} error, instead of returning a value."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:400
msgid ""
"Under the optional lexical scoping rule, the value cell only holds the "
"variable's global value---the value outside of any lexical binding "
"construct.  When a variable is lexically bound, the local value is "
"determined by the lexical environment; hence, variables can have local "
"values even if their symbols' value cells are unassigned."
msgstr ""

#. type: defun
#: original_texis/variables.texi:401
#, no-wrap
msgid "makunbound symbol"
msgstr ""

#. type: defun
#: original_texis/variables.texi:404
msgid ""
"This function empties out the value cell of @var{symbol}, making the "
"variable void.  It returns @var{symbol}."
msgstr ""

#. type: defun
#: original_texis/variables.texi:410
msgid ""
"If @var{symbol} has a dynamic local binding, @code{makunbound} voids the "
"current binding, and this voidness lasts only as long as the local binding "
"is in effect.  Afterwards, the previously shadowed local or global binding "
"is reexposed; then the variable will no longer be void, unless the reexposed "
"binding is void too."
msgstr ""

#. type: defun
#: original_texis/variables.texi:412 original_texis/variables.texi:448
msgid "Here are some examples (assuming dynamic binding is in effect):"
msgstr ""

#. type: group
#: original_texis/variables.texi:421
#, no-wrap
msgid ""
"(setq x 1)               ; @r{Put a value in the global binding.}\n"
"     @result{} 1\n"
"(let ((x 2))             ; @r{Locally bind it.}\n"
"  (makunbound 'x)        ; @r{Void the local binding.}\n"
"  x)\n"
"@error{} Symbol's value as variable is void: x\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:425
#, no-wrap
msgid ""
"x                        ; @r{The global binding is unchanged.}\n"
"     @result{} 1\n"
"\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:431
#, no-wrap
msgid ""
"(let ((x 2))             ; @r{Locally bind it.}\n"
"  (let ((x 3))           ; @r{And again.}\n"
"    (makunbound 'x)      ; @r{Void the innermost-local binding.}\n"
"    x))                  ; @r{And refer: it's void.}\n"
"@error{} Symbol's value as variable is void: x\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:439
#, no-wrap
msgid ""
"(let ((x 2))\n"
"  (let ((x 3))\n"
"    (makunbound 'x))     ; @r{Void inner binding, then remove it.}\n"
"  x)                     ; @r{Now outer @code{let} binding is visible.}\n"
"     @result{} 2\n"
msgstr ""

#. type: defun
#: original_texis/variables.texi:443
#, no-wrap
msgid "boundp variable"
msgstr ""

#. type: defun
#: original_texis/variables.texi:446
msgid ""
"This function returns @code{t} if @var{variable} (a symbol) is not void, and "
"@code{nil} if it is void."
msgstr ""

#. type: group
#: original_texis/variables.texi:453
#, no-wrap
msgid ""
"(boundp 'abracadabra)          ; @r{Starts out void.}\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:458
#, no-wrap
msgid ""
"(let ((abracadabra 5))         ; @r{Locally bind it.}\n"
"  (boundp 'abracadabra))\n"
"     @result{} t\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:462
#, no-wrap
msgid ""
"(boundp 'abracadabra)          ; @r{Still globally void.}\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:466
#, no-wrap
msgid ""
"(setq abracadabra 5)           ; @r{Make it globally nonvoid.}\n"
"     @result{} 5\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:470
#, no-wrap
msgid ""
"(boundp 'abracadabra)\n"
"     @result{} t\n"
msgstr ""

#. type: section
#: original_texis/variables.texi:475
#, no-wrap
msgid "Defining Global Variables"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:476
#, no-wrap
msgid "variable definition"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:481
msgid ""
"A @dfn{variable definition} is a construct that announces your intention to "
"use a symbol as a global variable.  It uses the special forms @code{defvar} "
"or @code{defconst}, which are documented below."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:488
msgid ""
"A variable definition serves three purposes.  First, it informs people who "
"read the code that the symbol is @emph{intended} to be used a certain way "
"(as a variable).  Second, it informs the Lisp system of this, optionally "
"supplying an initial value and a documentation string.  Third, it provides "
"information to programming tools such as @command{etags}, allowing them to "
"find where the variable was defined."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:496
msgid ""
"The difference between @code{defconst} and @code{defvar} is mainly a matter "
"of intent, serving to inform human readers of whether the value should ever "
"change.  Emacs Lisp does not actually prevent you from changing the value of "
"a variable defined with @code{defconst}.  One notable difference between the "
"two forms is that @code{defconst} unconditionally initializes the variable, "
"whereas @code{defvar} initializes it only if it is originally void."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:500
msgid ""
"To define a customizable variable, you should use @code{defcustom} (which "
"calls @code{defvar} as a subroutine).  @xref{Variable Definitions}."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:501
#, no-wrap
msgid "defvar symbol [value [doc-string]]"
msgstr ""

#. type: defspec
#: original_texis/variables.texi:507
msgid ""
"This special form defines @var{symbol} as a variable.  Note that "
"@var{symbol} is not evaluated; the symbol to be defined should appear "
"explicitly in the @code{defvar} form.  The variable is marked as "
"@dfn{special}, meaning that it should always be dynamically bound "
"(@pxref{Variable Scoping})."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:514
msgid ""
"If @var{value} is specified, and @var{symbol} is void (i.e., it has no "
"dynamically bound value; @pxref{Void Variables}), then @var{value} is "
"evaluated and @var{symbol} is set to the result.  But if @var{symbol} is not "
"void, @var{value} is not evaluated, and @var{symbol}'s value is left "
"unchanged.  If @var{value} is omitted, the value of @var{symbol} is not "
"changed in any case."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:520
msgid ""
"Note that specifying a value, even @code{nil}, marks the variable as special "
"permanently.  Whereas if @var{value} is omitted then the variable is only "
"marked special locally (i.e.@: within the current lexical scope, or file if "
"at the top-level).  This can be useful for suppressing byte compilation "
"warnings, see @ref{Compiler Errors}."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:525
msgid ""
"If @var{symbol} has a buffer-local binding in the current buffer, "
"@code{defvar} acts on the default value, which is buffer-independent, rather "
"than the buffer-local binding.  It sets the default value if the default "
"value is void.  @xref{Buffer-Local Variables}."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:531
msgid ""
"If @var{symbol} is already let bound (e.g., if the @code{defvar} form occurs "
"in a @code{let} form), then @code{defvar} sets the toplevel default value, "
"like @code{set-default-toplevel-value}.  The let binding remains in effect "
"until its binding construct exits.  @xref{Variable Scoping}."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:532
#, no-wrap
msgid "@code{eval-defun}, and @code{defvar} forms"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:533
#, no-wrap
msgid "@code{eval-last-sexp}, and @code{defvar} forms"
msgstr ""

#. type: defspec
#: original_texis/variables.texi:539
msgid ""
"When you evaluate a top-level @code{defvar} form with @kbd{C-M-x} "
"(@code{eval-defun}) or with @kbd{C-x C-e} (@code{eval-last-sexp}) in Emacs "
"Lisp mode, a special feature of these two commands arranges to set the "
"variable unconditionally, without testing whether its value is void."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:543
msgid ""
"If the @var{doc-string} argument is supplied, it specifies the documentation "
"string for the variable (stored in the symbol's "
"@code{variable-documentation} property).  @xref{Documentation}."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:546
msgid ""
"Here are some examples.  This form defines @code{foo} but does not "
"initialize it:"
msgstr ""

#. type: group
#: original_texis/variables.texi:551
#, no-wrap
msgid ""
"(defvar foo)\n"
"     @result{} foo\n"
msgstr ""

#. type: defspec
#: original_texis/variables.texi:556
msgid ""
"This example initializes the value of @code{bar} to @code{23}, and gives it "
"a documentation string:"
msgstr ""

#. type: group
#: original_texis/variables.texi:562
#, no-wrap
msgid ""
"(defvar bar 23\n"
"  \"The normal weight of a bar.\")\n"
"     @result{} bar\n"
msgstr ""

#. type: defspec
#: original_texis/variables.texi:567
msgid ""
"The @code{defvar} form returns @var{symbol}, but it is normally used at top "
"level in a file where its value does not matter."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:570
msgid ""
"For a more elaborate example of using @code{defvar} without a value, see "
"@ref{Local defvar example}."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:573
#, no-wrap
msgid "defconst symbol value [doc-string]"
msgstr ""

#. type: defspec
#: original_texis/variables.texi:579
msgid ""
"This special form defines @var{symbol} as a value and initializes it.  It "
"informs a person reading your code that @var{symbol} has a standard global "
"value, established here, that should not be changed by the user or by other "
"programs.  Note that @var{symbol} is not evaluated; the symbol to be defined "
"must appear explicitly in the @code{defconst}."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:584
msgid ""
"The @code{defconst} form, like @code{defvar}, marks the variable as "
"@dfn{special}, meaning that it should always be dynamically bound "
"(@pxref{Variable Scoping}).  In addition, it marks the variable as risky "
"(@pxref{File Local Variables})."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:591
msgid ""
"@code{defconst} always evaluates @var{value}, and sets the value of "
"@var{symbol} to the result.  If @var{symbol} does have a buffer-local "
"binding in the current buffer, @code{defconst} sets the default value, not "
"the buffer-local value.  (But you should not be making buffer-local bindings "
"for a symbol that is defined with @code{defconst}.)"
msgstr ""

#. type: defspec
#: original_texis/variables.texi:597
msgid ""
"An example of the use of @code{defconst} is Emacs's definition of "
"@code{float-pi}---the mathematical constant @math{pi}, which ought not to be "
"changed by anyone (attempts by the Indiana State Legislature "
"notwithstanding).  As the second form illustrates, however, @code{defconst} "
"is only advisory."
msgstr ""

#. type: group
#: original_texis/variables.texi:602
#, no-wrap
msgid ""
"(defconst float-pi 3.141592653589793 \"The value of Pi.\")\n"
"     @result{} float-pi\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:606
#, no-wrap
msgid ""
"(setq float-pi 3)\n"
"     @result{} float-pi\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:610
#, no-wrap
msgid ""
"float-pi\n"
"     @result{} 3\n"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:621
msgid ""
"@strong{Warning:} If you use a @code{defconst} or @code{defvar} special form "
"while the variable has a local binding (made with @code{let}, or a function "
"argument), it sets the local binding rather than the global binding.  This "
"is not what you usually want.  To prevent this, use these special forms at "
"top level in a file, where normally no local binding is in effect, and make "
"sure to load the file before making a local binding for the variable."
msgstr ""

#. type: section
#: original_texis/variables.texi:623
#, no-wrap
msgid "Tips for Defining Variables Robustly"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:628
msgid ""
"When you define a variable whose value is a function, or a list of "
"functions, use a name that ends in @samp{-function} or @samp{-functions}, "
"respectively."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:631
msgid "There are several other variable name conventions; here is a complete list:"
msgstr ""

#. type: item
#: original_texis/variables.texi:633
#, no-wrap
msgid "@dots{}-hook"
msgstr ""

#. type: table
#: original_texis/variables.texi:635
msgid "The variable is a normal hook (@pxref{Hooks})."
msgstr ""

#. type: item
#: original_texis/variables.texi:636
#, no-wrap
msgid "@dots{}-function"
msgstr ""

#. type: table
#: original_texis/variables.texi:638
msgid "The value is a function."
msgstr ""

#. type: item
#: original_texis/variables.texi:639
#, no-wrap
msgid "@dots{}-functions"
msgstr ""

#. type: table
#: original_texis/variables.texi:641
msgid "The value is a list of functions."
msgstr ""

#. type: item
#: original_texis/variables.texi:642
#, no-wrap
msgid "@dots{}-form"
msgstr ""

#. type: table
#: original_texis/variables.texi:644
msgid "The value is a form (an expression)."
msgstr ""

#. type: item
#: original_texis/variables.texi:645
#, no-wrap
msgid "@dots{}-forms"
msgstr ""

#. type: table
#: original_texis/variables.texi:647
msgid "The value is a list of forms (expressions)."
msgstr ""

#. type: item
#: original_texis/variables.texi:648
#, no-wrap
msgid "@dots{}-predicate"
msgstr ""

#. type: table
#: original_texis/variables.texi:651
msgid ""
"The value is a predicate---a function of one argument that returns "
"non-@code{nil} for success and @code{nil} for failure."
msgstr ""

#. type: item
#: original_texis/variables.texi:652
#, no-wrap
msgid "@dots{}-flag"
msgstr ""

#. type: table
#: original_texis/variables.texi:656
msgid ""
"The value is significant only as to whether it is @code{nil} or not.  Since "
"such variables often end up acquiring more values over time, this convention "
"is not strongly recommended."
msgstr ""

#. type: item
#: original_texis/variables.texi:657
#, no-wrap
msgid "@dots{}-program"
msgstr ""

#. type: table
#: original_texis/variables.texi:659
msgid "The value is a program name."
msgstr ""

#. type: item
#: original_texis/variables.texi:660
#, no-wrap
msgid "@dots{}-command"
msgstr ""

#. type: table
#: original_texis/variables.texi:662
msgid "The value is a whole shell command."
msgstr ""

#. type: item
#: original_texis/variables.texi:663
#, no-wrap
msgid "@dots{}-switches"
msgstr ""

#. type: table
#: original_texis/variables.texi:665
msgid "The value specifies options for a command."
msgstr ""

#. type: item
#: original_texis/variables.texi:666
#, no-wrap
msgid "@var{prefix}--@dots{}"
msgstr ""

#. type: table
#: original_texis/variables.texi:670
msgid ""
"The variable is intended for internal use and is defined in the file "
"@file{@var{prefix}.el}.  (Emacs code contributed before 2018 may follow "
"other conventions, which are being phased out.)"
msgstr ""

#. type: item
#: original_texis/variables.texi:671
#, no-wrap
msgid "@dots{}-internal"
msgstr ""

#. type: table
#: original_texis/variables.texi:675
msgid ""
"The variable is intended for internal use and is defined in C code.  (Emacs "
"code contributed before 2018 may follow other conventions, which are being "
"phased out.)"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:679
msgid ""
"When you define a variable, always consider whether you should mark it as "
"safe or risky; see @ref{File Local Variables}."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:683
msgid ""
"When defining and initializing a variable that holds a complicated value "
"(such as a syntax table for a major mode), it's best to put the entire "
"computation of the value into the @code{defvar}, like this:"
msgstr ""

#. type: example
#: original_texis/variables.texi:691
#, no-wrap
msgid ""
"(defvar my-major-mode-syntax-table\n"
"  (let ((table (make-syntax-table)))\n"
"    (modify-syntax-entry ?# \"<\" table)\n"
"    @dots{}\n"
"    table)\n"
"  @var{docstring})\n"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:702
msgid ""
"This method has several benefits.  First, if the user quits while loading "
"the file, the variable is either still uninitialized or initialized "
"properly, never in-between.  If it is still uninitialized, reloading the "
"file will initialize it properly.  Second, reloading the file once the "
"variable is initialized will not alter it; that is important if the user has "
"changed its value.  Third, evaluating the @code{defvar} form with "
"@kbd{C-M-x} will reinitialize the variable completely."
msgstr ""

#. type: section
#: original_texis/variables.texi:704
#, no-wrap
msgid "Accessing Variable Values"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:708
msgid ""
"The usual way to reference a variable is to write the symbol which names "
"it.  @xref{Symbol Forms}."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:713
msgid ""
"Occasionally, you may want to reference a variable which is only determined "
"at run time.  In that case, you cannot specify the variable name in the text "
"of the program.  You can use the @code{symbol-value} function to extract the "
"value."
msgstr ""

#. type: defun
#: original_texis/variables.texi:714
#, no-wrap
msgid "symbol-value symbol"
msgstr ""

#. type: defun
#: original_texis/variables.texi:719
msgid ""
"This function returns the value stored in @var{symbol}'s value cell.  This "
"is where the variable's current (dynamic) value is stored.  If the variable "
"has no local binding, this is simply its global value.  If the variable is "
"void, a @code{void-variable} error is signaled."
msgstr ""

#. type: defun
#: original_texis/variables.texi:724
msgid ""
"If the variable is lexically bound, the value reported by "
"@code{symbol-value} is not necessarily the same as the variable's lexical "
"value, which is determined by the lexical environment rather than the "
"symbol's value cell.  @xref{Variable Scoping}."
msgstr ""

#. type: group
#: original_texis/variables.texi:729
#, no-wrap
msgid ""
"(setq abracadabra 5)\n"
"     @result{} 5\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:733
#, no-wrap
msgid ""
"(setq foo 9)\n"
"     @result{} 9\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:741
#, no-wrap
msgid ""
";; @r{Here the symbol @code{abracadabra}}\n"
";;   @r{is the symbol whose value is examined.}\n"
"(let ((abracadabra 'foo))\n"
"  (symbol-value 'abracadabra))\n"
"     @result{} foo\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:750
#, no-wrap
msgid ""
";; @r{Here, the value of @code{abracadabra},}\n"
";;   @r{which is @code{foo},}\n"
";;   @r{is the symbol whose value is examined.}\n"
"(let ((abracadabra 'foo))\n"
"  (symbol-value abracadabra))\n"
"     @result{} 9\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:755
#, no-wrap
msgid ""
"(symbol-value 'abracadabra)\n"
"     @result{} 5\n"
msgstr ""

#. type: section
#: original_texis/variables.texi:760
#, no-wrap
msgid "Setting Variable Values"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:765
msgid ""
"The usual way to change the value of a variable is with the special form "
"@code{setq}.  When you need to compute the choice of variable at run time, "
"use the function @code{set}."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:766
#, no-wrap
msgid "setq [symbol form]@dots{}"
msgstr ""

#. type: defspec
#: original_texis/variables.texi:771
msgid ""
"This special form is the most common method of changing a variable's value.  "
"Each @var{symbol} is given a new value, which is the result of evaluating "
"the corresponding @var{form}.  The current binding of the symbol is changed."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:775
msgid ""
"@code{setq} does not evaluate @var{symbol}; it sets the symbol that you "
"write.  We say that this argument is @dfn{automatically quoted}.  The "
"@samp{q} in @code{setq} stands for ``quoted''."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:777
msgid "The value of the @code{setq} form is the value of the last @var{form}."
msgstr ""

#. type: group
#: original_texis/variables.texi:782
#, no-wrap
msgid ""
"(setq x (1+ 2))\n"
"     @result{} 3\n"
msgstr ""

#. type: example
#: original_texis/variables.texi:785
#, no-wrap
msgid ""
"x                   ; @r{@code{x} now has a global value.}\n"
"     @result{} 3\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:790
#, no-wrap
msgid ""
"(let ((x 5))\n"
"  (setq x 6)        ; @r{The local binding of @code{x} is set.}\n"
"  x)\n"
"     @result{} 6\n"
msgstr ""

#. type: example
#: original_texis/variables.texi:793
#, no-wrap
msgid ""
"x                   ; @r{The global value is unchanged.}\n"
"     @result{} 3\n"
msgstr ""

#. type: defspec
#: original_texis/variables.texi:798
msgid ""
"Note that the first @var{form} is evaluated, then the first @var{symbol} is "
"set, then the second @var{form} is evaluated, then the second @var{symbol} "
"is set, and so on:"
msgstr ""

#. type: group
#: original_texis/variables.texi:804
#, no-wrap
msgid ""
"(setq x 10          ; @r{Notice that @code{x} is set before}\n"
"      y (1+ x))     ;   @r{the value of @code{y} is computed.}\n"
"     @result{} 11\n"
msgstr ""

#. type: defun
#: original_texis/variables.texi:808
#, no-wrap
msgid "set symbol value"
msgstr ""

#. type: defun
#: original_texis/variables.texi:813
msgid ""
"This function puts @var{value} in the value cell of @var{symbol}.  Since it "
"is a function rather than a special form, the expression written for "
"@var{symbol} is evaluated to obtain the symbol to set.  The return value is "
"@var{value}."
msgstr ""

#. type: defun
#: original_texis/variables.texi:820
msgid ""
"When dynamic variable binding is in effect (the default), @code{set} has the "
"same effect as @code{setq}, apart from the fact that @code{set} evaluates "
"its @var{symbol} argument whereas @code{setq} does not.  But when a variable "
"is lexically bound, @code{set} affects its @emph{dynamic} value, whereas "
"@code{setq} affects its current (lexical) value.  @xref{Variable Scoping}."
msgstr ""

#. type: group
#: original_texis/variables.texi:825
#, no-wrap
msgid ""
"(set one 1)\n"
"@error{} Symbol's value as variable is void: one\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:829
#, no-wrap
msgid ""
"(set 'one 1)\n"
"     @result{} 1\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:833
#, no-wrap
msgid ""
"(set 'two 'one)\n"
"     @result{} one\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:837
#, no-wrap
msgid ""
"(set two 2)         ; @r{@code{two} evaluates to symbol @code{one}.}\n"
"     @result{} 2\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:845
#, no-wrap
msgid ""
"one                 ; @r{So it is @code{one} that was set.}\n"
"     @result{} 2\n"
"(let ((one 1))      ; @r{This binding of @code{one} is set,}\n"
"  (set 'one 3)      ;   @r{not the global value.}\n"
"  one)\n"
"     @result{} 3\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:849
#, no-wrap
msgid ""
"one\n"
"     @result{} 2\n"
msgstr ""

#. type: defun
#: original_texis/variables.texi:854
msgid ""
"If @var{symbol} is not actually a symbol, a @code{wrong-type-argument} error "
"is signaled."
msgstr ""

#. type: example
#: original_texis/variables.texi:858
#, no-wrap
msgid ""
"(set '(x y) 'z)\n"
"@error{} Wrong type argument: symbolp, (x y)\n"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:861
#, no-wrap
msgid "setopt [symbol form]@dots{}"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:867
msgid ""
"This is like @code{setq} (see above), but meant for user options.  This "
"macro uses the Customize machinery to set the variable(s)  (@pxref{Variable "
"Definitions}).  In particular, @code{setopt} will run the setter function "
"associated with the variable.  For instance, if you have:"
msgstr ""

#. type: group
#: original_texis/variables.texi:876
#, no-wrap
msgid ""
"(defcustom my-var 1\n"
"  \"My var.\"\n"
"  :type 'number\n"
"  :set (lambda (var val)\n"
"         (set-default var val)\n"
"         (message \"We set %s to %s\" var val)))\n"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:882
msgid ""
"then the following, in addition to setting @code{my-var} to @samp{2}, will "
"also issue a message:"
msgstr ""

#. type: example
#: original_texis/variables.texi:885
#, no-wrap
msgid "(setopt my-var 2)\n"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:890
msgid ""
"@code{setopt} also checks whether the value is valid for the user option.  "
"For instance, using @code{setopt} to set a user option defined with a "
"@code{number} type to a string will signal an error."
msgstr ""

#. type: defmac
#: original_texis/variables.texi:896
msgid ""
"Unlike @code{defcustom} and related customization commands, such as "
"@code{customize-variable}, @code{setopt} is meant for non-interactive use, "
"in particular in the user init file.  For that reason, it doesn't record the "
"standard, saved, and user-set values, and doesn't mark the variable as "
"candidate for saving in the custom file."
msgstr ""

#. type: defmac
#: original_texis/variables.texi:900
msgid ""
"The @code{setopt} macro can be used on regular, non-user option variables, "
"but is much less efficient than @code{setq}.  The main use case for this "
"macro is setting user options in the user's init file."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:904
#, no-wrap
msgid "variable watchpoints"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:905
#, no-wrap
msgid "watchpoints for Lisp variables"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:912
msgid ""
"It is sometimes useful to take some action when a variable changes its "
"value.  The @dfn{variable watchpoint} facility provides the means to do so.  "
"Some possible uses for this feature include keeping display in sync with "
"variable settings, and invoking the debugger to track down unexpected "
"changes to variables (@pxref{Variable Debugging})."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:915
msgid ""
"The following functions may be used to manipulate and query the watch "
"functions for a variable."
msgstr ""

#. type: defun
#: original_texis/variables.texi:916
#, no-wrap
msgid "add-variable-watcher symbol watch-function"
msgstr ""

#. type: defun
#: original_texis/variables.texi:920
msgid ""
"This function arranges for @var{watch-function} to be called whenever "
"@var{symbol} is modified.  Modifications through aliases (@pxref{Variable "
"Aliases}) will have the same effect."
msgstr ""

#. type: defun
#: original_texis/variables.texi:932
msgid ""
"@var{watch-function} will be called, just before changing the value of "
"@var{symbol}, with 4 arguments: @var{symbol}, @var{newval}, @var{operation}, "
"and @var{where}.  @var{symbol} is the variable being changed.  @var{newval} "
"is the value it will be changed to.  (The old value is available to "
"@var{watch-function} as the value of @var{symbol}, since it was not yet "
"changed to @var{newval}.)  @var{operation} is a symbol representing the kind "
"of change, one of: @code{set}, @code{let}, @code{unlet}, @code{makunbound}, "
"or @code{defvaralias}.  @var{where} is a buffer if the buffer-local value of "
"the variable is being changed, @code{nil} otherwise."
msgstr ""

#. type: defun
#: original_texis/variables.texi:934
#, no-wrap
msgid "remove-variable-watcher symbol watch-function"
msgstr ""

#. type: defun
#: original_texis/variables.texi:937
msgid ""
"This function removes @var{watch-function} from @var{symbol}'s list of "
"watchers."
msgstr ""

#. type: defun
#: original_texis/variables.texi:939
#, no-wrap
msgid "get-variable-watchers symbol"
msgstr ""

#. type: defun
#: original_texis/variables.texi:942
msgid "This function returns the list of @var{symbol}'s active watcher functions."
msgstr ""

#. type: subsection
#: original_texis/variables.texi:944
#, no-wrap
msgid "Limitations"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:948
msgid ""
"There are a couple of ways in which a variable could be modified (or at "
"least appear to be modified) without triggering a watchpoint."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:952
msgid ""
"Since watchpoints are attached to symbols, modification to the objects "
"contained within variables (e.g., by a list modification function "
"@pxref{Modifying Lists}) is not caught by this mechanism."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:955
msgid ""
"Additionally, C code can modify the value of variables directly, bypassing "
"the watchpoint mechanism."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:962
msgid ""
"A minor limitation of this feature, again because it targets symbols, is "
"that only variables of dynamic scope may be watched.  This poses little "
"difficulty, since modifications to lexical variables can be discovered "
"easily by inspecting the code within the scope of the variable (unlike "
"dynamic variables, which can be modified by any code at all, @pxref{Variable "
"Scoping})."
msgstr ""

#. type: section
#: original_texis/variables.texi:965
#, no-wrap
msgid "Scoping Rules for Variable Bindings"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:966
#, no-wrap
msgid "scoping rule"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:971
msgid ""
"When you create a local binding for a variable, that binding takes effect "
"only within a limited portion of the program (@pxref{Local Variables}).  "
"This section describes exactly what this means."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:972
#, no-wrap
msgid "scope"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:973
#, no-wrap
msgid "extent"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:978
msgid ""
"Each local binding has a certain @dfn{scope} and @dfn{extent}.  @dfn{Scope} "
"refers to @emph{where} in the textual source code the binding can be "
"accessed.  @dfn{Extent} refers to @emph{when}, as the program is executing, "
"the binding exists."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:979
#, no-wrap
msgid "lexical binding"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:980
#, no-wrap
msgid "lexical scope"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:981
#, no-wrap
msgid "static scope"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:982
#, no-wrap
msgid "indefinite extent"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:994
msgid ""
"For historical reasons, there are two dialects of Emacs Lisp, selected via "
"the @code{lexical-binding} buffer-local variable.  In the modern Emacs Lisp "
"dialect, local bindings are lexical by default.  A @dfn{lexical binding} has "
"@dfn{lexical scope}, meaning that any reference to the variable must be "
"located textually within the binding construct@footnote{With some "
"exceptions; for instance, a lexical binding can also be accessed from the "
"Lisp debugger.}.  It also has @dfn{indefinite extent}, meaning that under "
"some circumstances the binding can live on even after the binding construct "
"has finished executing, by means of objects called @dfn{closures}.  Lexical "
"scoping is also commonly called @dfn{static scoping}."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:995
#, no-wrap
msgid "dynamic binding"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:996
#, no-wrap
msgid "dynamic scope"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:997
#, no-wrap
msgid "dynamic extent"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1005
msgid ""
"Local bindings can also be dynamic, which they always are in the old Emacs "
"Lisp dialect and optionally in the modern dialect.  A @dfn{dynamic binding} "
"has @dfn{dynamic scope}, meaning that any part of the program can "
"potentially access the variable binding.  It also has @dfn{dynamic extent}, "
"meaning that the binding lasts only while the binding construct (such as the "
"body of a @code{let} form) is being executed."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1011
msgid ""
"The old dynamic-only Emacs Lisp dialect is still the default in code loaded "
"or evaluated from Lisp files that lack a dialect declaration.  Eventually "
"the modern dialect will be made the default.  All Lisp files should declare "
"the dialect used to ensure that they keep working correctly in the future."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1015
msgid ""
"The following subsections describe lexical binding and dynamic binding in "
"greater detail, and how to enable lexical binding in Emacs Lisp programs."
msgstr ""

#. type: subsection
#: original_texis/variables.texi:1022 original_texis/variables.texi:1024
#: original_texis/variables.texi:1025
#, no-wrap
msgid "Lexical Binding"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:1022
msgid "The standard type of local variable binding."
msgstr ""

#. type: subsection
#: original_texis/variables.texi:1022 original_texis/variables.texi:1116
#: original_texis/variables.texi:1117
#, no-wrap
msgid "Dynamic Binding"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:1022
msgid "A different type of local variable binding."
msgstr ""

#. type: node
#: original_texis/variables.texi:1022 original_texis/variables.texi:1241
#, no-wrap
msgid "Dynamic Binding Tips"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:1022
msgid "Avoiding problems with dynamic binding."
msgstr ""

#. type: subsection
#: original_texis/variables.texi:1022 original_texis/variables.texi:1287
#: original_texis/variables.texi:1288
#, no-wrap
msgid "Selecting Lisp Dialect"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:1022
msgid "How to select the Emacs Lisp dialect to use."
msgstr ""

#. type: subsection
#: original_texis/variables.texi:1022 original_texis/variables.texi:1338
#: original_texis/variables.texi:1339
#, no-wrap
msgid "Converting to Lexical Binding"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:1022
msgid "Convert existing code to lexical binding."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1032
msgid ""
"Lexical binding is only available in the modern Emacs Lisp dialect.  "
"(@xref{Selecting Lisp Dialect}.)  A lexically-bound variable has "
"@dfn{lexical scope}, meaning that any reference to the variable must be "
"located textually within the binding construct.  Here is an example"
msgstr ""

#. type: group
#: original_texis/variables.texi:1038
#, no-wrap
msgid ""
"(let ((x 1))    ; @r{@code{x} is lexically bound.}\n"
"  (+ x 3))\n"
"     @result{} 4\n"
"\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1041 original_texis/variables.texi:1140
#, no-wrap
msgid ""
"(defun getx ()\n"
"  x)            ; @r{@code{x} is used free in this function.}\n"
"\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1045
#, no-wrap
msgid ""
"(let ((x 1))    ; @r{@code{x} is lexically bound.}\n"
"  (getx))\n"
"@error{} Symbol's value as variable is void: x\n"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1055
msgid ""
"Here, the variable @code{x} has no global value.  When it is lexically bound "
"within a @code{let} form, it can be used in the textual confines of that "
"@code{let} form.  But it can @emph{not} be used from within a @code{getx} "
"function called from the @code{let} form, since the function definition of "
"@code{getx} occurs outside the @code{let} form itself."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:1056
#, no-wrap
msgid "lexical environment"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1063
msgid ""
"Here is how lexical binding works.  Each binding construct defines a "
"@dfn{lexical environment}, specifying the variables that are bound within "
"the construct and their local values.  When the Lisp evaluator wants the "
"current value of a variable, it looks first in the lexical environment; if "
"the variable is not specified in there, it looks in the symbol's value cell, "
"where the dynamic value is stored."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:1064
#, no-wrap
msgid "closures, example of using"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1070
msgid ""
"Lexical bindings have indefinite extent.  Even after a binding construct has "
"finished executing, its lexical environment can be ``kept around'' in Lisp "
"objects called @dfn{closures}.  A closure is created when you define a named "
"or anonymous function with lexical binding enabled.  @xref{Closures}, for "
"details."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1074
msgid ""
"When a closure is called as a function, any lexical variable references "
"within its definition use the retained lexical environment.  Here is an "
"example:"
msgstr ""

#. type: example
#: original_texis/variables.texi:1078
#, no-wrap
msgid ""
"(defvar my-ticker nil)   ; @r{We will use this dynamically bound}\n"
"                         ; @r{variable to store a closure.}\n"
"\n"
msgstr ""

#. type: example
#: original_texis/variables.texi:1084
#, no-wrap
msgid ""
"(let ((x 0))             ; @r{@code{x} is lexically bound.}\n"
"  (setq my-ticker (lambda ()\n"
"                    (setq x (1+ x)))))\n"
"    @result{} #f(lambda () [(x 0)]\n"
"          (setq x (1+ x)))\n"
"\n"
msgstr ""

#. type: example
#: original_texis/variables.texi:1087
#, no-wrap
msgid ""
"(funcall my-ticker)\n"
"    @result{} 1\n"
"\n"
msgstr ""

#. type: example
#: original_texis/variables.texi:1090
#, no-wrap
msgid ""
"(funcall my-ticker)\n"
"    @result{} 2\n"
"\n"
msgstr ""

#. type: example
#: original_texis/variables.texi:1093
#, no-wrap
msgid ""
"(funcall my-ticker)\n"
"    @result{} 3\n"
"\n"
msgstr ""

#. type: example
#: original_texis/variables.texi:1096
#, no-wrap
msgid ""
"x                        ; @r{Note that @code{x} has no global value.}\n"
"@error{} Symbol's value as variable is void: x\n"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1107
msgid ""
"The @code{let} binding defines a lexical environment in which the variable "
"@code{x} is locally bound to 0.  Within this binding construct, we define a "
"lambda expression which increments @code{x} by one and returns the "
"incremented value.  This lambda expression is automatically turned into a "
"closure, in which the lexical environment lives on even after the @code{let} "
"binding construct has exited.  Each time we evaluate the closure, it "
"increments @code{x}, using the binding of @code{x} in that lexical "
"environment."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1115
msgid ""
"Note that unlike dynamic variables which are tied to the symbol object "
"itself, the relationship between lexical variables and symbols is only "
"present in the interpreter (or compiler).  Therefore, functions which take a "
"symbol argument (like @code{symbol-value}, @code{boundp}, and @code{set}) "
"can only retrieve or modify a variable's dynamic binding (i.e., the contents "
"of its symbol's value cell)."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1125
msgid ""
"Local variable bindings are dynamic in the modern Lisp dialect for special "
"variables (see below), and for all variables in the old Lisp dialect.  "
"(@xref{Selecting Lisp Dialect}.)  Dynamic variable bindings have their uses "
"but are in general more error-prone and less efficient than lexical "
"bindings, and the compiler is less able to find mistakes in code using "
"dynamic bindings."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1130
msgid ""
"When a variable is dynamically bound, its current binding at any point in "
"the execution of the Lisp program is simply the most recently-created "
"dynamic local binding for that symbol, or the global binding if there is no "
"such local binding."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1133
msgid ""
"Dynamic bindings have dynamic scope and extent, as shown by the following "
"example:"
msgstr ""

#. type: group
#: original_texis/variables.texi:1137
#, no-wrap
msgid ""
"(defvar x -99)  ; @r{@code{x} receives an initial value of @minus{}99.}\n"
"\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1144
#, no-wrap
msgid ""
"(let ((x 1))    ; @r{@code{x} is dynamically bound.}\n"
"  (getx))\n"
"     @result{} 1\n"
"\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1147 original_texis/variables.texi:1179
#, no-wrap
msgid ""
";; @r{After the @code{let} form finishes, @code{x} reverts to its}\n"
";; @r{previous value, which is @minus{}99.}\n"
"\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1150
#, no-wrap
msgid ""
"(getx)\n"
"     @result{} -99\n"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1161
msgid ""
"The function @code{getx} refers to @code{x}.  This is a @dfn{free} "
"reference, in the sense that there is no binding for @code{x} within that "
"@code{defun} construct itself.  When we call @code{getx} from within a "
"@code{let} form in which @code{x} is (dynamically) bound, it retrieves the "
"local value (i.e., 1).  But when we call @code{getx} outside the @code{let} "
"form, it retrieves the global value (i.e., @minus{}99)."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1164
msgid ""
"Here is another example, which illustrates setting a dynamically bound "
"variable using @code{setq}:"
msgstr ""

#. type: group
#: original_texis/variables.texi:1168
#, no-wrap
msgid ""
"(defvar x -99)      ; @r{@code{x} receives an initial value of "
"@minus{}99.}\n"
"\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1171
#, no-wrap
msgid ""
"(defun addx ()\n"
"  (setq x (1+ x)))  ; @r{Add 1 to @code{x} and return its new value.}\n"
"\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1176
#, no-wrap
msgid ""
"(let ((x 1))\n"
"  (addx)\n"
"  (addx))\n"
"     @result{} 3           ; @r{The two @code{addx} calls add to @code{x} "
"twice.}\n"
"\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1182
#, no-wrap
msgid ""
"(addx)\n"
"     @result{} -98\n"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:1185
#, no-wrap
msgid "special variables"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1192
msgid ""
"Even when lexical binding is enabled, certain variables will continue to be "
"dynamically bound.  These are called @dfn{special variables}.  Every "
"variable that has been defined with @code{defvar}, @code{defcustom} or "
"@code{defconst} is a special variable (@pxref{Defining Variables}).  All "
"other variables are subject to lexical binding."
msgstr ""

#. type: anchor{#1}
#: original_texis/variables.texi:1197
msgid "Local defvar example"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1197
msgid ""
"Using @code{defvar} without a value, it is possible to bind a variable "
"dynamically just in one file, or in just one part of a file while still "
"binding it lexically elsewhere.  For example:"
msgstr ""

#. type: group
#: original_texis/variables.texi:1205
#, no-wrap
msgid ""
"(let (_)\n"
"  (defvar x)      ; @r{Let-bindings of @code{x} will be dynamic within this "
"let.}\n"
"  (let ((x -99))  ; @r{This is a dynamic binding of @code{x}.}\n"
"    (defun get-dynamic-x ()\n"
"      x)))\n"
"\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1209
#, no-wrap
msgid ""
"(let ((x 'lexical)) ; @r{This is a lexical binding of @code{x}.}\n"
"  (defun get-lexical-x ()\n"
"    x))\n"
"\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1216
#, no-wrap
msgid ""
"(let (_)\n"
"  (defvar x)\n"
"  (let ((x 'dynamic))\n"
"    (list (get-lexical-x)\n"
"          (get-dynamic-x))))\n"
"    @result{} (lexical dynamic)\n"
msgstr ""

#. type: defun
#: original_texis/variables.texi:1219
#, no-wrap
msgid "special-variable-p symbol"
msgstr ""

#. type: defun
#: original_texis/variables.texi:1224
msgid ""
"This function returns non-@code{nil} if @var{symbol} is a special variable "
"(i.e., it has a @code{defvar}, @code{defcustom}, or @code{defconst} variable "
"definition).  Otherwise, the return value is @code{nil}."
msgstr ""

#. type: defun
#: original_texis/variables.texi:1228
msgid ""
"Note that since this is a function, it can only return non-@code{nil} for "
"variables which are permanently special, but not for those that are only "
"special in the current lexical scope."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1232
msgid ""
"The use of a special variable as a formal argument in a function is not "
"supported."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1240
msgid ""
"Dynamic binding is implemented in Emacs Lisp in a simple way.  Each symbol "
"has a value cell, which specifies its current dynamic value (or absence of "
"value).  @xref{Symbol Components}.  When a symbol is given a dynamic local "
"binding, Emacs records the contents of the value cell (or absence thereof) "
"in a stack, and stores the new local value in the value cell.  When the "
"binding construct finishes executing, Emacs pops the old value off the "
"stack, and puts it in the value cell."
msgstr ""

#. type: subsection
#: original_texis/variables.texi:1242
#, no-wrap
msgid "Proper Use of Dynamic Binding"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1248
msgid ""
"Dynamic binding is a powerful feature, as it allows programs to refer to "
"variables that are not defined within their local textual scope.  However, "
"if used without restraint, this can also make programs hard to understand."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1251
msgid ""
"First, choose the variable's name to avoid name conflicts (@pxref{Coding "
"Conventions})."
msgstr ""

#. type: itemize
#: original_texis/variables.texi:1259
msgid ""
"If the variable is only used when locally bound to a value, declare it "
"special using a @code{defvar} form without an initial value, and never "
"assign to it unless it is already bound.  This way, any attempt to refer to "
"the variable when unbound will result in a @code{void-variable} error."
msgstr ""

#. type: itemize
#: original_texis/variables.texi:1267
msgid ""
"Otherwise, define the variable with @code{defvar}, @code{defconst} "
"(@pxref{Defining Variables}), or @code{defcustom} (@pxref{Variable "
"Definitions}).  Usually, the definition should be at top-level in an Emacs "
"Lisp file.  As far as possible, it should include a documentation string "
"which explains the meaning and purpose of the variable."
msgstr ""

#. type: itemize
#: original_texis/variables.texi:1273
msgid ""
"Then you can bind the variable anywhere in a program, knowing reliably what "
"the effect will be.  Wherever you encounter the variable, it will be easy to "
"refer back to the definition, e.g., via the @kbd{C-h v} command (provided "
"the variable definition has been loaded into Emacs).  @xref{Name Help,,, "
"emacs, The GNU Emacs Manual}."
msgstr ""

#. type: itemize
#: original_texis/variables.texi:1276
msgid ""
"For example, it is common to use local bindings for customizable variables "
"like @code{case-fold-search}:"
msgstr ""

#. type: group
#: original_texis/variables.texi:1283
#, no-wrap
msgid ""
"(defun search-for-abc ()\n"
"  \"Search for the string \\\"abc\\\", ignoring case differences.\"\n"
"  (let ((case-fold-search t))\n"
"    (re-search-forward \"abc\")))\n"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1293
msgid ""
"When loading an Emacs Lisp file or evaluating a Lisp buffer, the Lisp "
"dialect is selected using the buffer-local variable @code{lexical-binding}."
msgstr ""

#. type: defvar
#: original_texis/variables.texi:1294
#, no-wrap
msgid "lexical-binding"
msgstr ""

#. type: defvar
#: original_texis/variables.texi:1303
msgid ""
"If this buffer-local variable is non-@code{nil}, Emacs Lisp files and "
"buffers are evaluated using the modern Lisp dialect that by default uses "
"lexical binding instead of dynamic binding.  If @code{nil}, the old dialect "
"is used that uses dynamic binding for all local variables.  This variable is "
"typically set for a whole Emacs Lisp file, as a file-local variable "
"(@pxref{File Local Variables}).  Note that unlike other such variables, this "
"one must be set in the first line of a file."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1308
msgid ""
"In practice, dialect selection means that the first line in an Emacs Lisp "
"file looks like:"
msgstr ""

#. type: example
#: original_texis/variables.texi:1311
#, no-wrap
msgid ";;; ...  -*- lexical-binding: t -*-\n"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1315
msgid "for the modern lexical-binding dialect, and"
msgstr ""

#. type: example
#: original_texis/variables.texi:1318
#, no-wrap
msgid ";;; ...  -*- lexical-binding: nil -*-\n"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1324
msgid ""
"for the old dynamic-only dialect.  When no declaration is present the old "
"dialect is used, but this may change in a future release.  The compiler will "
"warn if no declaration is present."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1328
msgid ""
"When evaluating Emacs Lisp code directly using an @code{eval} call, lexical "
"binding is enabled if the @var{lexical} argument to @code{eval} is "
"non-@code{nil}.  @xref{Eval}."
msgstr ""

#. type: findex
#: original_texis/variables.texi:1329
#, no-wrap
msgid "eval-expression@r{, and }lexical-binding"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1337
msgid ""
"Lexical binding is also enabled in Lisp Interaction and IELM mode, used in "
"the @file{*scratch*} and @file{*ielm*} buffers, and also when evaluating "
"expressions via @kbd{M-:} (@code{eval-expression}) and when processing the "
"@option{--eval} command-line options of Emacs (@pxref{Action Arguments,,, "
"emacs, The GNU Emacs Manual}) and @command{emacsclient} (@pxref{emacsclient "
"Options,,, emacs, The GNU Emacs Manual})."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1347
msgid ""
"Converting an Emacs Lisp program to lexical binding is easy.  First, add a "
"file-local variable setting of @code{lexical-binding} to @code{t} in the "
"header line of the Emacs Lisp source file (@pxref{File Local Variables}).  "
"Second, check that every variable in the program which needs to be "
"dynamically bound has a variable definition, so that it is not inadvertently "
"bound lexically."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:1348
#, no-wrap
msgid "free variable"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:1349
#, no-wrap
msgid "unused lexical variable"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1358
msgid ""
"A simple way to find out which variables need a variable definition is to "
"byte-compile the source file.  @xref{Byte Compilation}.  If a non-special "
"variable is used outside of a @code{let} form, the byte-compiler will warn "
"about reference or assignment to a free variable.  If a non-special variable "
"is bound but not used within a @code{let} form, the byte-compiler will warn "
"about an unused lexical variable.  The byte-compiler will also issue a "
"warning if you use a special variable as a function argument."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1363
msgid ""
"A warning about a reference or an assignment to a free variable is usually a "
"clear sign that that variable should be marked as dynamically scoped, so you "
"need to add an appropriate @code{defvar} before the first use of that "
"variable."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1375
msgid ""
"A warning about an unused variable may be a good hint that the variable was "
"intended to be dynamically scoped (because it is actually used, but in "
"another function), but it may also be an indication that the variable is "
"simply really not used and could simply be removed.  So you need to find out "
"which case it is, and based on that, either add a @code{defvar} or remove "
"the variable altogether.  If removal is not possible or not desirable "
"(typically because it is a formal argument and that we cannot or don't want "
"to change all the callers), you can also add a leading underscore to the "
"variable's name to indicate to the compiler that this is a variable known "
"not to be used.)"
msgstr ""

#. type: subsubheading
#: original_texis/variables.texi:1376
#, no-wrap
msgid "Cross-file variable checking"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1380
msgid ""
"@strong{Caution:} This is an experimental feature that may change or "
"disappear without prior notice."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1385
msgid ""
"The byte-compiler can also warn about lexical variables that are special in "
"other Emacs Lisp files, often indicating a missing @code{defvar} "
"declaration.  This useful but somewhat specialized check requires three "
"steps:"
msgstr ""

#. type: enumerate
#: original_texis/variables.texi:1394
msgid ""
"Byte-compile all files whose special variable declarations may be of "
"interest, with the environment variable @env{EMACS_GENERATE_DYNVARS} set to "
"a nonempty string.  These are typically all the files in the same package or "
"related packages or Emacs subsystems.  The process will generate a file "
"whose name ends in @file{.dynvars} for each compiled Emacs Lisp file."
msgstr ""

#. type: enumerate
#: original_texis/variables.texi:1397
msgid "Concatenate the @file{.dynvars} files into a single file."
msgstr ""

#. type: enumerate
#: original_texis/variables.texi:1402
msgid ""
"Byte-compile the files that need to be checked, this time with the "
"environment variable @env{EMACS_DYNVARS_FILE} set to the name of the "
"aggregated file created in step 2."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1406
msgid ""
"Here is an example illustrating how this could be done, assuming that a Unix "
"shell and @command{make} are used for byte-compilation:"
msgstr ""

#. type: example
#: original_texis/variables.texi:1413
#, no-wrap
msgid ""
"$ rm *.elc                                # force recompilation\n"
"$ EMACS_GENERATE_DYNVARS=1 make           # generate .dynvars\n"
"$ cat *.dynvars > ~/my-dynvars            # combine .dynvars\n"
"$ rm *.elc                                # force recompilation\n"
"$ EMACS_DYNVARS_FILE=~/my-dynvars make    # perform checks\n"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:1417
#, no-wrap
msgid "variable, buffer-local"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:1418
#, no-wrap
msgid "buffer-local variables"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1427
msgid ""
"Global and local variable bindings are found in most programming languages "
"in one form or another.  Emacs, however, also supports additional, unusual "
"kinds of variable binding, such as @dfn{buffer-local} bindings, which apply "
"only in one buffer.  Having different values for a variable in different "
"buffers is an important customization method.  (Variables can also have "
"bindings that are local to each terminal.  @xref{Multiple Terminals}.)"
msgstr ""

#. type: node
#: original_texis/variables.texi:1433 original_texis/variables.texi:1435
#, no-wrap
msgid "Intro to Buffer-Local"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:1433
msgid "Introduction and concepts."
msgstr ""

#. type: node
#: original_texis/variables.texi:1433 original_texis/variables.texi:1529
#, no-wrap
msgid "Creating Buffer-Local"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:1433
msgid "Creating and destroying buffer-local bindings."
msgstr ""

#. type: node
#: original_texis/variables.texi:1433 original_texis/variables.texi:1778
#, no-wrap
msgid "Default Value"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:1433
msgid ""
"The default value is seen in buffers that don't have their own buffer-local "
"values."
msgstr ""

#. type: subsection
#: original_texis/variables.texi:1436
#, no-wrap
msgid "Introduction to Buffer-Local Variables"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1444
msgid ""
"A buffer-local variable has a buffer-local binding associated with a "
"particular buffer.  The binding is in effect when that buffer is current; "
"otherwise, it is not in effect.  If you set the variable while a "
"buffer-local binding is in effect, the new value goes in that binding, so "
"its other bindings are unchanged.  This means that the change is visible "
"only in the buffer where you made it."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1448
msgid ""
"The variable's ordinary binding, which is not associated with any specific "
"buffer, is called the @dfn{default binding}.  In most cases, this is the "
"global binding."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1456
msgid ""
"A variable can have buffer-local bindings in some buffers but not in other "
"buffers.  The default binding is shared by all the buffers that don't have "
"their own bindings for the variable.  (This includes all newly-created "
"buffers.)  If you set the variable in a buffer that does not have a "
"buffer-local binding for it, this sets the default binding, so the new value "
"is visible in all the buffers that see the default binding."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1463
msgid ""
"The most common use of buffer-local bindings is for major modes to change "
"variables that control the behavior of commands.  For example, C mode and "
"Lisp mode both set the variable @code{paragraph-start} to specify that only "
"blank lines separate paragraphs.  They do this by making the variable "
"buffer-local in the buffer that is being put into C mode or Lisp mode, and "
"then setting it to the new value for that mode.  @xref{Major Modes}."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1469
msgid ""
"The usual way to make a buffer-local binding is with "
"@code{make-local-variable}, which is what major mode commands typically "
"use.  This affects just the current buffer; all other buffers (including "
"those yet to be created) will continue to share the default value unless "
"they are explicitly given their own buffer-local bindings."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:1470
#, no-wrap
msgid "automatically buffer-local"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1483
msgid ""
"A more powerful operation is to mark the variable as @dfn{automatically "
"buffer-local} by calling @code{make-variable-buffer-local}.  You can think "
"of this as making the variable local in all buffers, even those yet to be "
"created.  More precisely, the effect is that setting the variable "
"automatically makes the variable local to the current buffer if it is not "
"already so.  All buffers start out by sharing the default value of the "
"variable as usual, but setting the variable creates a buffer-local binding "
"for the current buffer.  The new value is stored in the buffer-local "
"binding, leaving the default binding untouched.  This means that the default "
"value cannot be changed with @code{setq} in any buffer; the only way to "
"change it is with @code{setq-default}."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1495
msgid ""
"@strong{Warning:} When a variable has buffer-local bindings in one or more "
"buffers, @code{let} rebinds the binding that's currently in effect.  For "
"instance, if the current buffer has a buffer-local value, @code{let} "
"temporarily rebinds that.  If no buffer-local bindings are in effect, "
"@code{let} rebinds the default value.  If inside the @code{let} you then "
"change to a different current buffer in which a different binding is in "
"effect, you won't see the @code{let} binding any more.  And if you exit the "
"@code{let} while still in the other buffer, you won't see the unbinding "
"occur (though it will occur properly).  Here is an example to illustrate:"
msgstr ""

#. type: group
#: original_texis/variables.texi:1501
#, no-wrap
msgid ""
"(setq foo 'g)\n"
"(set-buffer \"a\")\n"
"(make-local-variable 'foo)\n"
msgstr ""

#. type: example
#: original_texis/variables.texi:1508
#, no-wrap
msgid ""
"(setq foo 'a)\n"
"(let ((foo 'temp))\n"
"  ;; foo @result{} 'temp  ; @r{let binding in buffer @samp{a}}\n"
"  (set-buffer \"b\")\n"
"  ;; foo @result{} 'g     ; @r{the global value since foo is not local in "
"@samp{b}}\n"
"  @var{body}@dots{})\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1511
#, no-wrap
msgid ""
"foo @result{} 'g        ; @r{exiting restored the local value in buffer "
"@samp{a},}\n"
"                 ; @r{but we don't see that in buffer @samp{b}}\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1515
#, no-wrap
msgid ""
"(set-buffer \"a\") ; @r{verify the local value was restored}\n"
"foo @result{} 'a\n"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1521
msgid ""
"Note that references to @code{foo} in @var{body} access the buffer-local "
"binding of buffer @samp{b}."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1525
msgid ""
"When a file specifies local variable values, these become buffer-local "
"values when you visit the file.  @xref{File Variables,,, emacs, The GNU "
"Emacs Manual}."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1528
msgid ""
"A buffer-local variable cannot be made terminal-local (@pxref{Multiple "
"Terminals})."
msgstr ""

#. type: subsection
#: original_texis/variables.texi:1530
#, no-wrap
msgid "Creating and Deleting Buffer-Local Bindings"
msgstr ""

#. type: deffn
#: original_texis/variables.texi:1532
#, no-wrap
msgid "Command make-local-variable variable"
msgstr ""

#. type: deffn
#: original_texis/variables.texi:1536
msgid ""
"This function creates a buffer-local binding in the current buffer for "
"@var{variable} (a symbol).  Other buffers are not affected.  The value "
"returned is @var{variable}."
msgstr ""

#. type: deffn
#: original_texis/variables.texi:1540
msgid ""
"The buffer-local value of @var{variable} starts out as the same value "
"@var{variable} previously had.  If @var{variable} was void, it remains void."
msgstr ""

#. type: group
#: original_texis/variables.texi:1546
#, no-wrap
msgid ""
";; @r{In buffer @samp{b1}:}\n"
"(setq foo 5)                ; @r{Affects all buffers.}\n"
"     @result{} 5\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1550
#, no-wrap
msgid ""
"(make-local-variable 'foo)  ; @r{Now it is local in @samp{b1}.}\n"
"     @result{} foo\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1554
#, no-wrap
msgid ""
"foo                         ; @r{That did not change}\n"
"     @result{} 5                   ;   @r{the value.}\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1558
#, no-wrap
msgid ""
"(setq foo 6)                ; @r{Change the value}\n"
"     @result{} 6                   ;   @r{in @samp{b1}.}\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1562
#, no-wrap
msgid ""
"foo\n"
"     @result{} 6\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1569
#, no-wrap
msgid ""
";; @r{In buffer @samp{b2}, the value hasn't changed.}\n"
"(with-current-buffer \"b2\"\n"
"  foo)\n"
"     @result{} 5\n"
msgstr ""

#. type: deffn
#: original_texis/variables.texi:1577
msgid ""
"Making a variable buffer-local within a @code{let}-binding for that variable "
"does not work reliably, unless the buffer in which you do this is not "
"current either on entry to or exit from the @code{let}.  This is because "
"@code{let} does not distinguish between different kinds of bindings; it "
"knows only which variable the binding was made for."
msgstr ""

#. type: deffn
#: original_texis/variables.texi:1580 original_texis/variables.texi:1628
msgid ""
"It is an error to make a constant or a read-only variable buffer-local.  "
"@xref{Constant Variables}."
msgstr ""

#. type: deffn
#: original_texis/variables.texi:1584
msgid ""
"If the variable is terminal-local (@pxref{Multiple Terminals}), this "
"function signals an error.  Such variables cannot have buffer-local bindings "
"as well."
msgstr ""

#. type: deffn
#: original_texis/variables.texi:1589
msgid ""
"@strong{Warning:} do not use @code{make-local-variable} for a hook "
"variable.  The hook variables are automatically made buffer-local as needed "
"if you use the @var{local} argument to @code{add-hook} or "
"@code{remove-hook}."
msgstr ""

#. type: defmac
#: original_texis/variables.texi:1591
#, no-wrap
msgid "setq-local &rest pairs"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:1597
msgid ""
"@var{pairs} is a list of variable and value pairs.  This macro creates a "
"buffer-local binding in the current buffer for each of the variables, and "
"gives them a buffer-local value.  It is equivalent to calling "
"@code{make-local-variable} followed by @code{setq} for each of the "
"variables.  The variables should be unquoted symbols."
msgstr ""

#. type: lisp
#: original_texis/variables.texi:1601
#, no-wrap
msgid ""
"(setq-local var1 \"value1\"\n"
"            var2 \"value2\")\n"
msgstr ""

#. type: deffn
#: original_texis/variables.texi:1604
#, no-wrap
msgid "Command make-variable-buffer-local variable"
msgstr ""

#. type: deffn
#: original_texis/variables.texi:1611
msgid ""
"This function marks @var{variable} (a symbol) automatically buffer-local, so "
"that any subsequent attempt to set it will make it local to the current "
"buffer at the time.  Unlike @code{make-local-variable}, with which it is "
"often confused, this cannot be undone, and affects the behavior of the "
"variable in all buffers."
msgstr ""

#. type: deffn
#: original_texis/variables.texi:1617
msgid ""
"A peculiar wrinkle of this feature is that binding the variable (with "
"@code{let} or other binding constructs) does not create a buffer-local "
"binding for it.  Only setting the variable (with @code{set} or @code{setq}), "
"while the variable does not have a @code{let}-style binding that was made in "
"the current buffer, does so."
msgstr ""

#. type: deffn
#: original_texis/variables.texi:1623
msgid ""
"If @var{variable} does not have a default value, then calling this command "
"will give it a default value of @code{nil}.  If @var{variable} already has a "
"default value, that value remains unchanged.  Subsequently calling "
"@code{makunbound} on @var{variable} will result in a void buffer-local value "
"and leave the default value unaffected."
msgstr ""

#. type: deffn
#: original_texis/variables.texi:1625
msgid "The value returned is @var{variable}."
msgstr ""

#. type: deffn
#: original_texis/variables.texi:1634
msgid ""
"@strong{Warning:} Don't assume that you should use "
"@code{make-variable-buffer-local} for user-option variables, simply because "
"users @emph{might} want to customize them differently in different buffers.  "
"Users can make any variable local, when they wish to.  It is better to leave "
"the choice to them."
msgstr ""

#. type: deffn
#: original_texis/variables.texi:1640
msgid ""
"The time to use @code{make-variable-buffer-local} is when it is crucial that "
"no two buffers ever share the same binding.  For example, when a variable is "
"used for internal purposes in a Lisp program which depends on having "
"separate values in separate buffers, then using "
"@code{make-variable-buffer-local} can be the best solution."
msgstr ""

#. type: defmac
#: original_texis/variables.texi:1642
#, no-wrap
msgid "defvar-local variable value &optional docstring"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:1648
msgid ""
"This macro defines @var{variable} as a variable with initial value "
"@var{value} and @var{docstring}, and marks it as automatically "
"buffer-local.  It is equivalent to calling @code{defvar} followed by "
"@code{make-variable-buffer-local}.  @var{variable} should be an unquoted "
"symbol."
msgstr ""

#. type: defun
#: original_texis/variables.texi:1650
#, no-wrap
msgid "local-variable-p variable &optional buffer"
msgstr ""

#. type: defun
#: original_texis/variables.texi:1654
msgid ""
"This returns @code{t} if @var{variable} is buffer-local in buffer "
"@var{buffer} (which defaults to the current buffer); otherwise, @code{nil}."
msgstr ""

#. type: defun
#: original_texis/variables.texi:1656
#, no-wrap
msgid "local-variable-if-set-p variable &optional buffer"
msgstr ""

#. type: defun
#: original_texis/variables.texi:1661
msgid ""
"This returns @code{t} if @var{variable} either has a buffer-local value in "
"buffer @var{buffer}, or is automatically buffer-local.  Otherwise, it "
"returns @code{nil}.  If omitted or @code{nil}, @var{buffer} defaults to the "
"current buffer."
msgstr ""

#. type: defun
#: original_texis/variables.texi:1663
#, no-wrap
msgid "buffer-local-value variable buffer"
msgstr ""

#. type: defun
#: original_texis/variables.texi:1668
msgid ""
"This function returns the buffer-local binding of @var{variable} (a symbol) "
"in buffer @var{buffer}.  If @var{variable} does not have a buffer-local "
"binding in buffer @var{buffer}, it returns the default value (@pxref{Default "
"Value}) of @var{variable} instead."
msgstr ""

#. type: defun
#: original_texis/variables.texi:1670
#, no-wrap
msgid "buffer-local-boundp variable buffer"
msgstr ""

#. type: defun
#: original_texis/variables.texi:1674
msgid ""
"This returns non-@code{nil} if there's either a buffer-local binding of "
"@var{variable} (a symbol) in buffer @var{buffer}, or @var{variable} has a "
"global binding."
msgstr ""

#. type: defun
#: original_texis/variables.texi:1676
#, no-wrap
msgid "buffer-local-variables &optional buffer"
msgstr ""

#. type: defun
#: original_texis/variables.texi:1684
msgid ""
"This function returns a list describing the buffer-local variables in buffer "
"@var{buffer}.  (If @var{buffer} is omitted, the current buffer is used.)  "
"Normally, each list element has the form @w{@code{(@var{sym} . @var{val})}}, "
"where @var{sym} is a buffer-local variable (a symbol) and @var{val} is its "
"buffer-local value.  But when a variable's buffer-local binding in "
"@var{buffer} is void, its list element is just @var{sym}."
msgstr ""

#. type: group
#: original_texis/variables.texi:1691
#, no-wrap
msgid ""
"(make-local-variable 'foobar)\n"
"(makunbound 'foobar)\n"
"(make-local-variable 'bind-me)\n"
"(setq bind-me 69)\n"
msgstr ""

#. type: example
#: original_texis/variables.texi:1698
#, no-wrap
msgid ""
"(setq lcl (buffer-local-variables))\n"
"    ;; @r{First, built-in variables local in all buffers:}\n"
"@result{} ((mark-active . nil)\n"
"    (buffer-undo-list . nil)\n"
"    (mode-name . \"Fundamental\")\n"
"    @dots{}\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1704
#, no-wrap
msgid ""
"    ;; @r{Next, non-built-in buffer-local variables.}\n"
"    ;; @r{This one is buffer-local and void:}\n"
"    foobar\n"
"    ;; @r{This one is buffer-local and nonvoid:}\n"
"    (bind-me . 69))\n"
msgstr ""

#. type: defun
#: original_texis/variables.texi:1709
msgid ""
"Note that storing new values into the @sc{cdr}s of cons cells in this list "
"does @emph{not} change the buffer-local values of the variables."
msgstr ""

#. type: deffn
#: original_texis/variables.texi:1711
#, no-wrap
msgid "Command kill-local-variable variable"
msgstr ""

#. type: deffn
#: original_texis/variables.texi:1718
msgid ""
"This function deletes the buffer-local binding (if any) for @var{variable} "
"(a symbol) in the current buffer.  As a result, the default binding of "
"@var{variable} becomes visible in this buffer.  This typically results in a "
"change in the value of @var{variable}, since the default value is usually "
"different from the buffer-local value just eliminated."
msgstr ""

#. type: deffn
#: original_texis/variables.texi:1723
msgid ""
"If you kill the buffer-local binding of a variable that automatically "
"becomes buffer-local when set, this makes the default value visible in the "
"current buffer.  However, if you set the variable again, that will once "
"again create a buffer-local binding for it."
msgstr ""

#. type: deffn
#: original_texis/variables.texi:1725
msgid "@code{kill-local-variable} returns @var{variable}."
msgstr ""

#. type: deffn
#: original_texis/variables.texi:1729
msgid ""
"This function is a command because it is sometimes useful to kill one "
"buffer-local variable interactively, just as it is useful to create "
"buffer-local variables interactively."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:1731
#, no-wrap
msgid "local variables, killed by major mode"
msgstr ""

#. type: defun
#: original_texis/variables.texi:1732
#, no-wrap
msgid "kill-all-local-variables &optional kill-permanent"
msgstr ""

#. type: defun
#: original_texis/variables.texi:1740
msgid ""
"This function eliminates all the buffer-local variable bindings of the "
"current buffer.  As a result, the buffer will see the default values of most "
"variables.  By default, for variables marked as permanent and local hook "
"functions that have a non-@code{nil} @code{permanent-local-hook} property "
"(@pxref{Setting Hooks}) won't be killed, but if the optional "
"@var{kill-permanent} argument is non-@code{nil}, even these variables will "
"be killed."
msgstr ""

#. type: defun
#: original_texis/variables.texi:1746
msgid ""
"This function also resets certain other information pertaining to the "
"buffer: it sets the local keymap to @code{nil}, the syntax table to the "
"value of @code{(standard-syntax-table)}, the case table to "
"@code{(standard-case-table)}, and the abbrev table to the value of "
"@code{fundamental-mode-abbrev-table}."
msgstr ""

#. type: defun
#: original_texis/variables.texi:1749
msgid ""
"The very first thing this function does is run the normal hook "
"@code{change-major-mode-hook} (see below)."
msgstr ""

#. type: defun
#: original_texis/variables.texi:1754
msgid ""
"Every major mode command begins by calling this function, which has the "
"effect of switching to Fundamental mode and erasing most of the effects of "
"the previous major mode.  To ensure that this does its job, the variables "
"that major modes set should not be marked permanent."
msgstr ""

#. type: defun
#: original_texis/variables.texi:1756
msgid "@code{kill-all-local-variables} returns @code{nil}."
msgstr ""

#. type: defvar
#: original_texis/variables.texi:1758
#, no-wrap
msgid "change-major-mode-hook"
msgstr ""

#. type: defvar
#: original_texis/variables.texi:1764
msgid ""
"The function @code{kill-all-local-variables} runs this normal hook before it "
"does anything else.  This gives major modes a way to arrange for something "
"special to be done if the user switches to a different major mode.  It is "
"also useful for buffer-specific minor modes that should be forgotten if the "
"user changes the major mode."
msgstr ""

#. type: defvar
#: original_texis/variables.texi:1768
msgid ""
"For best results, make this variable buffer-local, so that it will disappear "
"after doing its job and will not interfere with the subsequent major mode.  "
"@xref{Hooks}."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:1770
#, no-wrap
msgid "permanent local variable"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1777
msgid ""
"A buffer-local variable is @dfn{permanent} if the variable name (a symbol) "
"has a @code{permanent-local} property that is non-@code{nil}.  Such "
"variables are unaffected by @code{kill-all-local-variables}, and their local "
"bindings are therefore not cleared by changing major modes.  Permanent "
"locals are appropriate for data pertaining to where the file came from or "
"how to save it, rather than with how to edit the contents."
msgstr ""

#. type: subsection
#: original_texis/variables.texi:1779
#, no-wrap
msgid "The Default Value of a Buffer-Local Variable"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:1780
#, no-wrap
msgid "default value"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1786
msgid ""
"The global value of a variable with buffer-local bindings is also called the "
"@dfn{default} value, because it is the value that is in effect whenever "
"neither the current buffer nor the selected frame has its own binding for "
"the variable."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1794
msgid ""
"The functions @code{default-value} and @code{setq-default} access and change "
"a variable's default value regardless of whether the current buffer has a "
"buffer-local binding.  For example, you could use @code{setq-default} to "
"change the default setting of @code{paragraph-start} for most buffers; and "
"this would work even when you are in a C or Lisp mode buffer that has a "
"buffer-local value for this variable."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1798
msgid ""
"The special forms @code{defvar} and @code{defconst} also set the default "
"value (if they set the variable at all), rather than any buffer-local value."
msgstr ""

#. type: defun
#: original_texis/variables.texi:1799
#, no-wrap
msgid "default-value symbol"
msgstr ""

#. type: defun
#: original_texis/variables.texi:1804
msgid ""
"This function returns @var{symbol}'s default value.  This is the value that "
"is seen in buffers and frames that do not have their own values for this "
"variable.  If @var{symbol} is not buffer-local, this is equivalent to "
"@code{symbol-value} (@pxref{Accessing Variables})."
msgstr ""

#. type: defun
#: original_texis/variables.texi:1806
#, no-wrap
msgid "default-boundp symbol"
msgstr ""

#. type: defun
#: original_texis/variables.texi:1810
msgid ""
"The function @code{default-boundp} tells you whether @var{symbol}'s default "
"value is nonvoid.  If @code{(default-boundp 'foo)} returns @code{nil}, then "
"@code{(default-value 'foo)} would get an error."
msgstr ""

#. type: defun
#: original_texis/variables.texi:1813
msgid ""
"@code{default-boundp} is to @code{default-value} as @code{boundp} is to "
"@code{symbol-value}."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:1815
#, no-wrap
msgid "setq-default [symbol form]@dots{}"
msgstr ""

#. type: defspec
#: original_texis/variables.texi:1820
msgid ""
"This special form gives each @var{symbol} a new default value, which is the "
"result of evaluating the corresponding @var{form}.  It does not evaluate "
"@var{symbol}, but does evaluate @var{form}.  The value of the "
"@code{setq-default} form is the value of the last @var{form}."
msgstr ""

#. type: defspec
#: original_texis/variables.texi:1827
msgid ""
"If a @var{symbol} is not buffer-local for the current buffer, and is not "
"marked automatically buffer-local, @code{setq-default} has the same effect "
"as @code{setq}.  If @var{symbol} is buffer-local for the current buffer, "
"then this changes the value that other buffers will see (as long as they "
"don't have a buffer-local value), but not the value that the current buffer "
"sees."
msgstr ""

#. type: group
#: original_texis/variables.texi:1833
#, no-wrap
msgid ""
";; @r{In buffer @samp{foo}:}\n"
"(make-local-variable 'buffer-local)\n"
"     @result{} buffer-local\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1837
#, no-wrap
msgid ""
"(setq buffer-local 'value-in-foo)\n"
"     @result{} value-in-foo\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1841
#, no-wrap
msgid ""
"(setq-default buffer-local 'new-default)\n"
"     @result{} new-default\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1845
#, no-wrap
msgid ""
"buffer-local\n"
"     @result{} value-in-foo\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1849 original_texis/variables.texi:1859
#, no-wrap
msgid ""
"(default-value 'buffer-local)\n"
"     @result{} new-default\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1855
#, no-wrap
msgid ""
";; @r{In (the new) buffer @samp{bar}:}\n"
"buffer-local\n"
"     @result{} new-default\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1863
#, no-wrap
msgid ""
"(setq buffer-local 'another-default)\n"
"     @result{} another-default\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1867
#, no-wrap
msgid ""
"(default-value 'buffer-local)\n"
"     @result{} another-default\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1875
#, no-wrap
msgid ""
";; @r{Back in buffer @samp{foo}:}\n"
"buffer-local\n"
"     @result{} value-in-foo\n"
"(default-value 'buffer-local)\n"
"     @result{} another-default\n"
msgstr ""

#. type: defun
#: original_texis/variables.texi:1879
#, no-wrap
msgid "set-default symbol value"
msgstr ""

#. type: defun
#: original_texis/variables.texi:1882
msgid ""
"This function is like @code{setq-default}, except that @var{symbol} is an "
"ordinary evaluated argument."
msgstr ""

#. type: group
#: original_texis/variables.texi:1887
#, no-wrap
msgid ""
"(set-default (car '(a b c)) 23)\n"
"     @result{} 23\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1891
#, no-wrap
msgid ""
"(default-value 'a)\n"
"     @result{} 23\n"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1902
msgid ""
"A variable can be let-bound (@pxref{Local Variables}) to a value.  This "
"makes its global value shadowed by the binding; @code{default-value} will "
"then return the value from that binding, not the global value, and "
"@code{set-default} will be prevented from setting the global value (it will "
"change the let-bound value instead).  The following two functions allow "
"referencing the global value even if it's shadowed by a let-binding."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:1903
#, no-wrap
msgid "top-level default value"
msgstr ""

#. type: defun
#: original_texis/variables.texi:1904
#, no-wrap
msgid "default-toplevel-value symbol"
msgstr ""

#. type: defun
#: original_texis/variables.texi:1907
msgid ""
"This function returns the @dfn{top-level} default value of @var{symbol}, "
"which is its value outside of any let-binding."
msgstr ""

#. type: group
#: original_texis/variables.texi:1913
#, no-wrap
msgid ""
"(defvar variable 'global-value)\n"
"    @result{} variable\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1918
#, no-wrap
msgid ""
"(let ((variable 'let-binding))\n"
"  (default-value 'variable))\n"
"    @result{} let-binding\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:1923
#, no-wrap
msgid ""
"(let ((variable 'let-binding))\n"
"  (default-toplevel-value 'variable))\n"
"    @result{} global-value\n"
msgstr ""

#. type: defun
#: original_texis/variables.texi:1926
#, no-wrap
msgid "set-default-toplevel-value symbol value"
msgstr ""

#. type: defun
#: original_texis/variables.texi:1931
msgid ""
"This function sets the top-level default value of @var{symbol} to the "
"specified @var{value}.  This comes in handy when you want to set the global "
"value of @var{symbol} regardless of whether your code runs in the context of "
"@var{symbol}'s let-binding."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:1936
#, no-wrap
msgid "file local variables"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1944
msgid ""
"A file can specify local variable values; Emacs uses these to create "
"buffer-local bindings for those variables in the buffer visiting that file.  "
"@xref{File Variables, , Local Variables in Files, emacs, The GNU Emacs "
"Manual}, for basic information about file-local variables.  This section "
"describes the functions and variables that affect how file-local variables "
"are processed."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1950
msgid ""
"If a file-local variable could specify an arbitrary function or Lisp "
"expression that would be called later, visiting a file could take over your "
"Emacs.  Emacs protects against this by automatically setting only those "
"file-local variables whose specified values are known to be safe.  Other "
"file-local variables are set only if the user agrees."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:1955
msgid ""
"For additional safety, @code{read-circle} is temporarily bound to @code{nil} "
"when Emacs reads file-local variables (@pxref{Input Functions}).  This "
"prevents the Lisp reader from recognizing circular and shared Lisp "
"structures (@pxref{Circular Objects})."
msgstr ""

#. type: defopt
#: original_texis/variables.texi:1956
#, no-wrap
msgid "enable-local-variables"
msgstr ""

#. type: defopt
#: original_texis/variables.texi:1959
msgid ""
"This variable controls whether to process file-local variables.  The "
"possible values are:"
msgstr ""

#. type: item
#: original_texis/variables.texi:1961
#, no-wrap
msgid "@code{t} (the default)"
msgstr ""

#. type: table
#: original_texis/variables.texi:1963
msgid "Set the safe variables, and query (once) about any unsafe variables."
msgstr ""

#. type: code{#1}
#: original_texis/variables.texi:1963
#, no-wrap
msgid ":safe"
msgstr ""

#. type: table
#: original_texis/variables.texi:1965
msgid "Set only the safe variables and do not query."
msgstr ""

#. type: code{#1}
#: original_texis/variables.texi:1965
#, no-wrap
msgid ":all"
msgstr ""

#. type: table
#: original_texis/variables.texi:1967
msgid "Set all the variables and do not query."
msgstr ""

#. type: code{#1}
#: original_texis/variables.texi:1967
#, no-wrap
msgid "nil"
msgstr ""

#. type: table
#: original_texis/variables.texi:1969
msgid "Don't set any variables."
msgstr ""

#. type: item
#: original_texis/variables.texi:1969
#, no-wrap
msgid "anything else"
msgstr ""

#. type: table
#: original_texis/variables.texi:1971
msgid "Query (once) about all the variables."
msgstr ""

#. type: defvar
#: original_texis/variables.texi:1974
#, no-wrap
msgid "inhibit-local-variables-regexps"
msgstr ""

#. type: defvar
#: original_texis/variables.texi:1979
msgid ""
"This is a list of regular expressions.  If a file has a name matching an "
"element of this list, then it is not scanned for any form of file-local "
"variable.  For examples of why you might want to use this, @pxref{Auto Major "
"Mode}."
msgstr ""

#. type: defvar
#: original_texis/variables.texi:1981
#, no-wrap
msgid "permanently-enabled-local-variables"
msgstr ""

#. type: defvar
#: original_texis/variables.texi:1987
msgid ""
"Some local variable settings will, by default, be heeded even if "
"@code{enable-local-variables} is @code{nil}.  By default, this is only the "
"case for the @code{lexical-binding} local variable setting, but this can be "
"controlled by using this variable, which is a list of symbols."
msgstr ""

#. type: defvar
#: original_texis/variables.texi:1989
#, no-wrap
msgid "safe-local-variable-directories"
msgstr ""

#. type: defvar
#: original_texis/variables.texi:1997
msgid ""
"This is a list of directories where local variables are always enabled.  "
"Directory-local variables loaded from these directories, such as the "
"variables in @file{.dir-locals.el}, will be enabled even if they are risky.  "
"The directories in this list must be fully-expanded absolute file names.  "
"They may also be remote directories if the variable "
"@code{enable-remote-dir-locals} is set non-@code{nil}."
msgstr ""

#. type: defun
#: original_texis/variables.texi:1999
#, no-wrap
msgid "hack-local-variables &optional handle-mode"
msgstr ""

#. type: defun
#: original_texis/variables.texi:2006
msgid ""
"This function parses, and binds or evaluates as appropriate, any local "
"variables specified by the contents of the current buffer.  The variable "
"@code{enable-local-variables} has its effect here.  However, this function "
"does not look for the @samp{mode:} local variable in the @w{@samp{-*-}} "
"line.  @code{set-auto-mode} does that, also taking "
"@code{enable-local-variables} into account (@pxref{Auto Major Mode})."
msgstr ""

#. type: defun
#: original_texis/variables.texi:2015
msgid ""
"This function works by walking the alist stored in "
"@code{file-local-variables-alist} and applying each local variable in turn.  "
"It calls @code{before-hack-local-variables-hook} and "
"@code{hack-local-variables-hook} before and after applying the variables, "
"respectively.  It only calls the before-hook if the alist is non-@code{nil}; "
"it always calls the other hook.  This function ignores a @samp{mode} element "
"if it specifies the same major mode as the buffer already has."
msgstr ""

#. type: defun
#: original_texis/variables.texi:2025
msgid ""
"If the optional argument @var{handle-mode} is @code{t}, then all this "
"function does is return a symbol specifying the major mode, if the "
"@w{@samp{-*-}} line or the local variables list specifies one, and "
"@code{nil} otherwise.  It does not set the mode or any other file-local "
"variable.  If @var{handle-mode} has any value other than @code{nil} or "
"@code{t}, any settings of @samp{mode} in the @w{@samp{-*-}} line or the "
"local variables list are ignored, and the other settings are applied.  If "
"@var{handle-mode} is @code{nil}, all the file local variables are set."
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2027
#, no-wrap
msgid "file-local-variables-alist"
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2035
msgid ""
"This buffer-local variable holds the alist of file-local variable settings.  "
"Each element of the alist is of the form @w{@code{(@var{var} "
". @var{value})}}, where @var{var} is a symbol of the local variable and "
"@var{value} is its value.  When Emacs visits a file, it first collects all "
"the file-local variables into this alist, and then the "
"@code{hack-local-variables} function applies them one by one."
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2037
#, no-wrap
msgid "before-hack-local-variables-hook"
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2040
msgid ""
"Emacs calls this hook immediately before applying file-local variables "
"stored in @code{file-local-variables-alist}."
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2042
#, no-wrap
msgid "hack-local-variables-hook"
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2045
msgid ""
"Emacs calls this hook immediately after it finishes applying file-local "
"variables stored in @code{file-local-variables-alist}."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:2047
#, no-wrap
msgid "safe local variable"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:2048
#, no-wrap
msgid "@code{safe-local-variable}, property of variable"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2057
msgid ""
"You can specify safe values for a variable with a @code{safe-local-variable} "
"property.  The property has to be a function of one argument; any value is "
"safe if the function returns non-@code{nil} given that value.  Many "
"commonly-encountered file variables have @code{safe-local-variable} "
"properties; these include @code{fill-column}, @code{fill-prefix}, and "
"@code{indent-tabs-mode}.  For boolean-valued variables that are safe, use "
"@code{booleanp} as the property value."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2062
msgid ""
"If you want to define @code{safe-local-variable} properties for variables "
"defined in C source code, add the names and the properties of those "
"variables to the list in the ``Safe local variables'' section of "
"@file{files.el}."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:2063
#, no-wrap
msgid "autoload cookie, and safe values of variable"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2072
msgid ""
"When defining a user option using @code{defcustom}, you can set its "
"@code{safe-local-variable} property by adding the arguments @code{:safe "
"@var{function}} to @code{defcustom} (@pxref{Variable Definitions}).  "
"However, a safety predicate defined using @code{:safe} will only be known "
"once the package that contains the @code{defcustom} is loaded, which is "
"often too late.  As an alternative, you can use the autoload cookie "
"(@pxref{Autoload}) to assign the option its safety predicate, like this:"
msgstr ""

#. type: lisp
#: original_texis/variables.texi:2075
#, no-wrap
msgid ";;;###autoload (put '@var{var} 'safe-local-variable '@var{pred})\n"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2082
msgid ""
"The safe value definitions specified with @code{autoload} are copied into "
"the package's autoloads file (@file{loaddefs.el} for most packages bundled "
"with Emacs), and are known to Emacs since the beginning of a session."
msgstr ""

#. type: defopt
#: original_texis/variables.texi:2083
#, no-wrap
msgid "safe-local-variable-values"
msgstr ""

#. type: defopt
#: original_texis/variables.texi:2088
msgid ""
"This variable provides another way to mark some variable values as safe.  It "
"is a list of cons cells @code{(@var{var} . @var{val})}, where @var{var} is a "
"variable name and @var{val} is a value which is safe for that variable."
msgstr ""

#. type: defopt
#: original_texis/variables.texi:2094
msgid ""
"When Emacs asks the user whether or not to obey a set of file-local variable "
"specifications, the user can choose to mark them as safe.  Doing so adds "
"those variable/value pairs to @code{safe-local-variable-values}, and saves "
"it to the user's custom file."
msgstr ""

#. type: defopt
#: original_texis/variables.texi:2096
#, no-wrap
msgid "ignored-local-variable-values"
msgstr ""

#. type: defopt
#: original_texis/variables.texi:2108
msgid ""
"If there are some values of particular local variables that you always want "
"to ignore completely, you can use this variable.  Its value has the same "
"form as @code{safe-local-variable-values}; a file-local variable setting to "
"the value that appears in the list will always be ignored when processing "
"the local variables specified by the file.  As with that variable, when "
"Emacs queries the user about whether to obey file-local variables, the user "
"can choose to ignore their particular values permanently, and that will "
"alter this variable and save it to the user's custom file.  Variable-value "
"pairs that appear in this variable take precedence over the same pairs in "
"@code{safe-local-variable-values}."
msgstr ""

#. type: defun
#: original_texis/variables.texi:2110
#, no-wrap
msgid "safe-local-variable-p sym val"
msgstr ""

#. type: defun
#: original_texis/variables.texi:2113
msgid ""
"This function returns non-@code{nil} if it is safe to give @var{sym} the "
"value @var{val}, based on the above criteria."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2121
msgid ""
"Some variables are considered @dfn{risky}.  If a variable is risky, it is "
"never entered automatically into @code{safe-local-variable-values}; Emacs "
"always queries before setting a risky variable, unless the user explicitly "
"allows a value by customizing @code{safe-local-variable-values} directly."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2135
msgid ""
"Any variable whose name has a non-@code{nil} @code{risky-local-variable} "
"property is considered risky.  When you define a user option using "
"@code{defcustom}, you can set its @code{risky-local-variable} property by "
"adding the arguments @code{:risky @var{value}} to @code{defcustom} "
"(@pxref{Variable Definitions}).  In addition, any variable whose name ends "
"in any of @samp{-command}, @samp{-frame-alist}, @samp{-function}, "
"@samp{-functions}, @samp{-hook}, @samp{-hooks}, @samp{-form}, @samp{-forms}, "
"@samp{-map}, @samp{-map-alist}, @samp{-mode-alist}, @samp{-program}, or "
"@samp{-predicate} is automatically considered risky.  The variables "
"@samp{font-lock-keywords}, @samp{font-lock-keywords} followed by a digit, "
"and @samp{font-lock-syntactic-keywords} are also considered risky."
msgstr ""

#. type: defun
#: original_texis/variables.texi:2136
#, no-wrap
msgid "risky-local-variable-p sym"
msgstr ""

#. type: defun
#: original_texis/variables.texi:2139
msgid ""
"This function returns non-@code{nil} if @var{sym} is a risky variable, based "
"on the above criteria."
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2141
#, no-wrap
msgid "ignored-local-variables"
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2145
msgid ""
"This variable holds a list of variables that should not be given local "
"values by files.  Any value specified for one of these variables is "
"completely ignored."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2149
msgid ""
"The @samp{Eval:} ``variable'' is also a potential loophole, so Emacs "
"normally asks for confirmation before handling it."
msgstr ""

#. type: defopt
#: original_texis/variables.texi:2150
#, no-wrap
msgid "enable-local-eval"
msgstr ""

#. type: defopt
#: original_texis/variables.texi:2156
msgid ""
"This variable controls processing of @samp{Eval:} in @samp{-*-} lines or "
"local variables lists in files being visited.  A value of @code{t} means "
"process them unconditionally; @code{nil} means ignore them; anything else "
"means ask the user what to do for each file.  The default value is "
"@code{maybe}."
msgstr ""

#. type: defopt
#: original_texis/variables.texi:2158
#, no-wrap
msgid "safe-local-eval-forms"
msgstr ""

#. type: defopt
#: original_texis/variables.texi:2162
msgid ""
"This variable holds a list of expressions that are safe to evaluate when "
"found in the @samp{Eval:} ``variable'' in a file local variables list."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2170
msgid ""
"If the expression is a function call and the function has a "
"@code{safe-local-eval-function} property, the property value determines "
"whether the expression is safe to evaluate.  The property value can be a "
"predicate to call to test the expression, a list of such predicates (it's "
"safe if any predicate succeeds), or @code{t} (always safe provided the "
"arguments are constant)."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2174
msgid ""
"Text properties are also potential loopholes, since their values could "
"include functions to call.  So Emacs discards all text properties from "
"string values specified for file-local variables."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:2177
#, no-wrap
msgid "directory local variables"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2184
msgid ""
"A directory can specify local variable values common to all files in that "
"directory; Emacs uses these to create buffer-local bindings for those "
"variables in buffers visiting any file in that directory.  This is useful "
"when the files in the directory belong to some @dfn{project} and therefore "
"share the same local variables."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2188
msgid ""
"There are two different methods for specifying directory local variables: by "
"putting them in a special file, or by defining a @dfn{project class} for "
"that directory."
msgstr ""

#. type: defvr
#: original_texis/variables.texi:2189
#, no-wrap
msgid "Constant dir-locals-file"
msgstr ""

#. type: defvr
#: original_texis/variables.texi:2209
msgid ""
"This constant is the name of the file where Emacs expects to find the "
"directory-local variables.  The name of the file is "
"@file{.dir-locals.el}@footnote{ The MS-DOS version of Emacs uses "
"@file{_dir-locals.el} instead, due to limitations of the DOS filesystems.  "
"}.  A file by that name in a directory causes Emacs to apply its settings to "
"any file in that directory or any of its subdirectories (optionally, you can "
"exclude subdirectories; see below).  If some of the subdirectories have "
"their own @file{.dir-locals.el} files, Emacs uses the settings from the "
"deepest file it finds starting from the file's directory and moving up the "
"directory tree.  This constant is also used to derive the name of a second "
"dir-locals file @file{.dir-locals-2.el}.  If this second dir-locals file is "
"present, then that is loaded in addition to @file{.dir-locals.el}.  This is "
"useful when @file{.dir-locals.el} is under version control in a shared "
"repository and cannot be used for personal customizations.  The file "
"specifies local variables as a specially formatted list; see @ref{Directory "
"Variables, , Per-directory Local Variables, emacs, The GNU Emacs Manual}, "
"for more details."
msgstr ""

#. type: defun
#: original_texis/variables.texi:2211
#, no-wrap
msgid "hack-dir-local-variables"
msgstr ""

#. type: defun
#: original_texis/variables.texi:2220
msgid ""
"This function reads the @code{.dir-locals.el} file and stores the "
"directory-local variables in @code{file-local-variables-alist} that is local "
"to the buffer visiting any file in the directory, without applying them.  It "
"also stores the directory-local settings in @code{dir-locals-class-alist}, "
"where it defines a special class for the directory in which "
"@file{.dir-locals.el} file was found.  This function works by calling "
"@code{dir-locals-set-class-variables} and "
"@code{dir-locals-set-directory-class}, described below."
msgstr ""

#. type: defun
#: original_texis/variables.texi:2222
#, no-wrap
msgid "hack-dir-local-variables-non-file-buffer"
msgstr ""

#. type: defun
#: original_texis/variables.texi:2229
msgid ""
"This function looks for directory-local variables, and immediately applies "
"them in the current buffer.  It is intended to be called in the mode "
"commands for non-file buffers, such as Dired buffers, to let them obey "
"directory-local variable settings.  For non-file buffers, Emacs looks for "
"directory-local variables in @code{default-directory} and its parent "
"directories."
msgstr ""

#. type: defun
#: original_texis/variables.texi:2231
#, no-wrap
msgid "dir-locals-set-class-variables class variables"
msgstr ""

#. type: defun
#: original_texis/variables.texi:2246
msgid ""
"This function defines a set of variable settings for the named @var{class}, "
"which is a symbol.  You can later assign the class to one or more "
"directories, and Emacs will apply those variable settings to all files in "
"those directories.  The list in @var{variables} can be of one of the two "
"forms: @code{(@var{major-mode} . @var{alist})} or @code{(@var{directory} "
". @var{list})}.  With the first form, if the file's buffer turns on a mode "
"that is derived from @var{major-mode}, then all the variables in the "
"associated @var{alist} are applied; @var{alist} should be of the form "
"@code{(@var{name} . @var{value})}.  A special value @code{nil} for "
"@var{major-mode} means the settings are applicable to any mode.  In "
"@var{alist}, you can use a special @var{name}: @code{subdirs}.  If the "
"associated value is @code{nil}, the alist is only applied to files in the "
"relevant directory, not to those in any subdirectories."
msgstr ""

#. type: defun
#: original_texis/variables.texi:2251
msgid ""
"With the second form of @var{variables}, if @var{directory} is the initial "
"substring of the file's directory, then @var{list} is applied recursively by "
"following the above rules; @var{list} should be of one of the two forms "
"accepted by this function in @var{variables}."
msgstr ""

#. type: defun
#: original_texis/variables.texi:2253
#, no-wrap
msgid "dir-locals-set-directory-class directory class &optional mtime"
msgstr ""

#. type: defun
#: original_texis/variables.texi:2259
msgid ""
"This function assigns @var{class} to all the files in @code{directory} and "
"its subdirectories.  Thereafter, all the variable settings specified for "
"@var{class} will be applied to any visited file in @var{directory} and its "
"children.  @var{class} must have been already defined by "
"@code{dir-locals-set-class-variables}."
msgstr ""

#. type: defun
#: original_texis/variables.texi:2266
msgid ""
"Emacs uses this function internally when it loads directory variables from a "
"@code{.dir-locals.el} file.  In that case, the optional argument @var{mtime} "
"holds the file modification time (as returned by @code{file-attributes}).  "
"Emacs uses this time to check stored local variables are still valid.  If "
"you are assigning a class directly, not via a file, this argument should be "
"@code{nil}."
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2268
#, no-wrap
msgid "dir-locals-class-alist"
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2271
msgid ""
"This alist holds the class symbols and the associated variable settings.  It "
"is updated by @code{dir-locals-set-class-variables}."
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2273
#, no-wrap
msgid "dir-locals-directory-cache"
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2278
msgid ""
"This alist holds directory names, their assigned class names, and "
"modification times of the associated directory local variables file (if "
"there is one).  The function @code{dir-locals-set-directory-class} updates "
"this list."
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2280
#, no-wrap
msgid "enable-dir-local-variables"
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2284
msgid ""
"If @code{nil}, directory-local variables are ignored.  This variable may be "
"useful for modes that want to ignore directory-locals while still respecting "
"file-local variables (@pxref{File Local Variables})."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:2288
#, no-wrap
msgid "connection local variables"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2294
msgid ""
"Connection-local variables provide a general mechanism for different "
"variable settings in buffers with a remote connection (@pxref{Remote Files,, "
"Remote Files, emacs, The GNU Emacs Manual}).  They are bound and set "
"depending on the remote connection a buffer is dedicated to."
msgstr ""

#. type: subsection
#: original_texis/variables.texi:2300 original_texis/variables.texi:2302
#: original_texis/variables.texi:2303
#, no-wrap
msgid "Connection Local Profiles"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:2300
msgid "Storing variable settings to apply to connections."
msgstr ""

#. type: subsection
#: original_texis/variables.texi:2300 original_texis/variables.texi:2425
#: original_texis/variables.texi:2426
#, no-wrap
msgid "Applying Connection Local Variables"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:2300
msgid "Using connection-local values in your code."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:2304
#, no-wrap
msgid "connection local profiles"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2310
msgid ""
"Emacs uses connection-local profiles to store the variable settings to apply "
"to particular connections.  You can then associate these with remote "
"connections by defining the criteria when they should apply, using "
"@code{connection-local-set-profiles}."
msgstr ""

#. type: defun
#: original_texis/variables.texi:2311
#, no-wrap
msgid "connection-local-set-profile-variables profile variables"
msgstr ""

#. type: defun
#: original_texis/variables.texi:2318
msgid ""
"This function defines a set of variable settings for the connection "
"@var{profile}, which is a symbol.  You can later assign the connection "
"profile to one or more remote connections, and Emacs will apply those "
"variable settings to all process buffers for those connections.  The list in "
"@var{variables} is an alist of the form "
"@code{(@var{name}@tie{}.@tie{}@var{value})}.  Example:"
msgstr ""

#. type: group
#: original_texis/variables.texi:2327
#, no-wrap
msgid ""
"(connection-local-set-profile-variables\n"
"  'remote-bash\n"
"  '((shell-file-name . \"/bin/bash\")\n"
"    (shell-command-switch . \"-c\")\n"
"    (shell-interactive-switch . \"-i\")\n"
"    (shell-login-switch . \"-l\")))\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:2336
#, no-wrap
msgid ""
"(connection-local-set-profile-variables\n"
"  'remote-ksh\n"
"  '((shell-file-name . \"/bin/ksh\")\n"
"    (shell-command-switch . \"-c\")\n"
"    (shell-interactive-switch . \"-i\")\n"
"    (shell-login-switch . \"-l\")))\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:2342
#, no-wrap
msgid ""
"(connection-local-set-profile-variables\n"
"  'remote-null-device\n"
"  '((null-device . \"/dev/null\")))\n"
msgstr ""

#. type: findex
#: original_texis/variables.texi:2345
#, no-wrap
msgid "connection-local-get-profile-variables"
msgstr ""

#. type: defun
#: original_texis/variables.texi:2349
msgid ""
"If you want to append variable settings to an existing profile, you could "
"use the function @code{connection-local-get-profile-variables} in order to "
"retrieve the existing settings, like"
msgstr ""

#. type: group
#: original_texis/variables.texi:2357
#, no-wrap
msgid ""
"(connection-local-set-profile-variables\n"
"  'remote-bash\n"
"  (append\n"
"   (connection-local-get-profile-variables 'remote-bash)\n"
"   '((shell-command-dont-erase-buffer . t))))\n"
msgstr ""

#. type: deffn
#: original_texis/variables.texi:2361
#, no-wrap
msgid "{User Option} connection-local-profile-alist"
msgstr ""

#. type: deffn
#: original_texis/variables.texi:2365
msgid ""
"This alist holds the connection profile symbols and the associated variable "
"settings.  It is updated by @code{connection-local-set-profile-variables}."
msgstr ""

#. type: defun
#: original_texis/variables.texi:2367
#, no-wrap
msgid "connection-local-set-profiles criteria &rest profiles"
msgstr ""

#. type: defun
#: original_texis/variables.texi:2376
msgid ""
"This function assigns @var{profiles}, which are symbols, to all remote "
"connections identified by @var{criteria}.  @var{criteria} is a plist "
"identifying a connection and the application using this connection.  "
"Property names might be @code{:application}, @code{:protocol}, @code{:user} "
"and @code{:machine}.  The property value of @code{:application} is a symbol, "
"all other property values are strings.  All properties are optional; if "
"@var{criteria} is @code{nil}, it always applies.  Example:"
msgstr ""

#. type: group
#: original_texis/variables.texi:2382
#, no-wrap
msgid ""
"(connection-local-set-profiles\n"
"  '(:application tramp :protocol \"ssh\" :machine \"localhost\")\n"
"  'remote-bash 'remote-null-device)\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:2389
#, no-wrap
msgid ""
"(connection-local-set-profiles\n"
"  '(:application tramp :protocol \"sudo\"\n"
"    :user \"root\" :machine \"localhost\")\n"
"  'remote-ksh 'remote-null-device)\n"
msgstr ""

#. type: defun
#: original_texis/variables.texi:2394
msgid ""
"If @var{criteria} is @code{nil}, it applies for all remote connections.  "
"Therefore, the example above would be equivalent to"
msgstr ""

#. type: group
#: original_texis/variables.texi:2400
#, no-wrap
msgid ""
"(connection-local-set-profiles\n"
"  '(:application tramp :protocol \"ssh\" :machine \"localhost\")\n"
"  'remote-bash)\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:2407
#, no-wrap
msgid ""
"(connection-local-set-profiles\n"
"  '(:application tramp :protocol \"sudo\"\n"
"    :user \"root\" :machine \"localhost\")\n"
"  'remote-ksh)\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:2412
#, no-wrap
msgid ""
"(connection-local-set-profiles\n"
"  nil 'remote-null-device)\n"
msgstr ""

#. type: defun
#: original_texis/variables.texi:2417
msgid ""
"Any connection profile of @var{profiles} must have been already defined by "
"@code{connection-local-set-profile-variables}."
msgstr ""

#. type: deffn
#: original_texis/variables.texi:2419
#, no-wrap
msgid "{User Option} connection-local-criteria-alist"
msgstr ""

#. type: deffn
#: original_texis/variables.texi:2423
msgid ""
"This alist contains connection criteria and their assigned profile names.  "
"The function @code{connection-local-set-profiles} updates this list."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:2427
#, no-wrap
msgid "connection local variables, applying"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2432
msgid ""
"When writing connection-aware code, you'll need to collect, and possibly "
"apply, any connection-local variables.  There are several ways to do this, "
"as described below."
msgstr ""

#. type: defun
#: original_texis/variables.texi:2433
#, no-wrap
msgid "hack-connection-local-variables criteria"
msgstr ""

#. type: defun
#: original_texis/variables.texi:2438
msgid ""
"This function collects applicable connection-local variables associated with "
"@var{criteria} in @code{connection-local-variables-alist}, without applying "
"them.  Example:"
msgstr ""

#. type: group
#: original_texis/variables.texi:2443
#, no-wrap
msgid ""
"(hack-connection-local-variables\n"
"  '(:application tramp :protocol \"ssh\" :machine \"localhost\"))\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:2452
#, no-wrap
msgid ""
"connection-local-variables-alist\n"
"     @result{} ((null-device . \"/dev/null\")\n"
"        (shell-login-switch . \"-l\")\n"
"        (shell-interactive-switch . \"-i\")\n"
"        (shell-command-switch . \"-c\")\n"
"        (shell-file-name . \"/bin/bash\"))\n"
msgstr ""

#. type: defun
#: original_texis/variables.texi:2456
#, no-wrap
msgid "hack-connection-local-variables-apply criteria"
msgstr ""

#. type: defun
#: original_texis/variables.texi:2459
msgid ""
"This function looks for connection-local variables according to "
"@var{criteria}, and immediately applies them in the current buffer."
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2461
#, no-wrap
msgid "with-connection-local-application-variables application &rest body"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2464
msgid ""
"Apply all connection-local variables for @code{application}, which are "
"specified by @code{default-directory}."
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2467
msgid ""
"After that, @var{body} is executed, and the connection-local variables are "
"unwound.  Example:"
msgstr ""

#. type: group
#: original_texis/variables.texi:2474
#, no-wrap
msgid ""
"(connection-local-set-profile-variables\n"
"  'my-remote-perl\n"
"  '((perl-command-name . \"/usr/local/bin/perl5\")\n"
"    (perl-command-switch . \"-e %s\")))\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:2480
#, no-wrap
msgid ""
"(connection-local-set-profiles\n"
"  '(:application my-app :protocol \"ssh\" :machine \"remotehost\")\n"
"  'my-remote-perl)\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:2486
#, no-wrap
msgid ""
"(let ((default-directory \"/ssh:remotehost:/working/dir/\"))\n"
"  (with-connection-local-application-variables 'my-app\n"
"    do something useful))\n"
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2490
#, no-wrap
msgid "connection-local-default-application"
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2496
msgid ""
"The default application, a symbol, to be applied in "
"@code{with-connection-local-variables}, @code{connection-local-p} and "
"@code{connection-local-value}.  It defaults to @code{tramp}, but you can "
"let-bind it to change the application temporarily (@pxref{Local Variables})."
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2498 original_texis/variables.texi:2549
msgid "This variable must not be changed globally."
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2500
#, no-wrap
msgid "with-connection-local-variables &rest body"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2504
msgid ""
"This is equivalent to @code{with-connection-local-application-variables}, "
"but uses @code{connection-local-default-application} for the application."
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2506
#, no-wrap
msgid "setq-connection-local [symbol form]@dots{}"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2512
msgid ""
"This macro sets each @var{symbol} connection-locally to the result of "
"evaluating the corresponding @var{form}, using the connection-local profile "
"specified in @code{connection-local-profile-name-for-setq}; if the profile "
"name is @code{nil}, this macro will just set the variables normally, as with "
"@code{setq} (@pxref{Setting Variables})."
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2517
msgid ""
"For example, you can use this macro in combination with "
"@code{with-connection-local-variables} or "
"@code{with-connection-local-application-variables} to lazily initialize "
"connection-local settings:"
msgstr ""

#. type: group
#: original_texis/variables.texi:2521
#, no-wrap
msgid ""
"(defvar my-app-variable nil)\n"
"\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:2525
#, no-wrap
msgid ""
"(connection-local-set-profile-variables\n"
" 'my-app-connection-default-profile\n"
" '((my-app-variable . nil)))\n"
"\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:2529
#, no-wrap
msgid ""
"(connection-local-set-profiles\n"
" '(:application my-app)\n"
" 'my-app-connection-default-profile)\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:2537
#, no-wrap
msgid ""
"(defun my-app-get-variable ()\n"
"  (with-connection-local-application-variables 'my-app\n"
"    (or my-app-variable\n"
"        (setq-connection-local my-app-variable\n"
"                               do something useful))))\n"
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2541
#, no-wrap
msgid "connection-local-profile-name-for-setq"
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2547
msgid ""
"The connection-local profile name, a symbol, to use when setting variables "
"via @code{setq-connection-local}.  This is let-bound in the body of "
"@code{with-connection-local-variables}, but you can also let-bind it "
"yourself if you'd like to set variables on a different profile."
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2551
#, no-wrap
msgid "connection-local-p symbol &optional application"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2556
msgid ""
"This macro returns non-@code{nil} if @var{symbol} has a connection-local "
"binding for @var{application}.  If @var{application} is @code{nil}, the "
"value of @code{connection-local-default-application} is used."
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2558
#, no-wrap
msgid "connection-local-value symbol &optional application"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2562
msgid ""
"This macro returns the connection-local value of @var{symbol} for "
"@var{application}.  If @var{application} is @code{nil}, the value of "
"@code{connection-local-default-application} is used."
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2565
msgid ""
"If @var{symbol} does not have a connection-local binding, the value is the "
"default binding of the variable."
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2567
#, no-wrap
msgid "enable-connection-local-variables"
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2570
msgid ""
"If @code{nil}, connection-local variables are ignored.  This variable shall "
"be changed temporarily only in special modes."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:2574
#, no-wrap
msgid "variable aliases"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:2575
#, no-wrap
msgid "alias, for variables"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2584
msgid ""
"It is sometimes useful to make two variables synonyms, so that both "
"variables always have the same value, and changing either one also changes "
"the other.  Whenever you change the name of a variable---either because you "
"realize its old name was not well chosen, or because its meaning has partly "
"changed---it can be useful to keep the old name as an @emph{alias} of the "
"new one for compatibility.  You can do this with @code{defvaralias}."
msgstr ""

#. type: defun
#: original_texis/variables.texi:2585
#, no-wrap
msgid "defvaralias new-alias base-variable &optional docstring"
msgstr ""

#. type: defun
#: original_texis/variables.texi:2592
msgid ""
"This function defines the symbol @var{new-alias} as a variable alias for "
"symbol @var{base-variable}. This means that retrieving the value of "
"@var{new-alias} returns the value of @var{base-variable}, and changing the "
"value of @var{new-alias} changes the value of @var{base-variable}.  The two "
"aliased variable names always share the same value and the same bindings."
msgstr ""

#. type: defun
#: original_texis/variables.texi:2598
msgid ""
"If the @var{docstring} argument is non-@code{nil}, it specifies the "
"documentation for @var{new-alias}; otherwise, the alias gets the same "
"documentation as @var{base-variable} has, if any, unless @var{base-variable} "
"is itself an alias, in which case @var{new-alias} gets the documentation of "
"the variable at the end of the chain of aliases."
msgstr ""

#. type: defun
#: original_texis/variables.texi:2600
msgid "This function returns @var{base-variable}."
msgstr ""

#. type: defun
#: original_texis/variables.texi:2603
msgid ""
"If the resulting variable definition chain would be circular, then Emacs "
"will signal a @code{cyclic-variable-indirection} error."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2609
msgid ""
"Variable aliases are convenient for replacing an old name for a variable "
"with a new name.  @code{make-obsolete-variable} declares that the old name "
"is obsolete and therefore that it may be removed at some stage in the "
"future."
msgstr ""

#. type: defun
#: original_texis/variables.texi:2610
#, no-wrap
msgid "make-obsolete-variable obsolete-name current-name when &optional access-type"
msgstr ""

#. type: defun
#: original_texis/variables.texi:2619
msgid ""
"This function makes the byte compiler warn that the variable "
"@var{obsolete-name} is obsolete.  If @var{current-name} is a symbol, it is "
"the variable's new name; then the warning message says to use "
"@var{current-name} instead of @var{obsolete-name}.  If @var{current-name} is "
"a string, this is the message and there is no replacement variable.  "
"@var{when} should be a string indicating when the variable was first made "
"obsolete (usually a version number string)."
msgstr ""

#. type: defun
#: original_texis/variables.texi:2623
msgid ""
"The optional argument @var{access-type}, if non-@code{nil}, should specify "
"the kind of access that will trigger obsolescence warnings; it can be either "
"@code{get} or @code{set}."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2627
msgid ""
"You can make two variables synonyms and declare one obsolete at the same "
"time using the macro @code{define-obsolete-variable-alias}."
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2628
#, no-wrap
msgid ""
"define-obsolete-variable-alias obsolete-name current-name when &optional "
"docstring"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2632
msgid ""
"This macro marks the variable @var{obsolete-name} as obsolete and also makes "
"it an alias for the variable @var{current-name}.  It is equivalent to the "
"following:"
msgstr ""

#. type: example
#: original_texis/variables.texi:2636
#, no-wrap
msgid ""
"(defvaralias @var{obsolete-name} @var{current-name} @var{docstring})\n"
"(make-obsolete-variable @var{obsolete-name} @var{current-name} @var{when})\n"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2641
msgid ""
"This macro evaluates all its parameters, and both @var{obsolete-name} and "
"@var{current-name} should be symbols, so a typical usage would look like:"
msgstr ""

#. type: lisp
#: original_texis/variables.texi:2644
#, no-wrap
msgid "(define-obsolete-variable-alias 'foo-thing 'bar-thing \"27.1\")\n"
msgstr ""

#. type: defun
#: original_texis/variables.texi:2647
#, no-wrap
msgid "indirect-variable variable"
msgstr ""

#. type: defun
#: original_texis/variables.texi:2651
msgid ""
"This function returns the variable at the end of the chain of aliases of "
"@var{variable}.  If @var{variable} is not a symbol, or if @var{variable} is "
"not defined as an alias, the function returns @var{variable}."
msgstr ""

#. type: example
#: original_texis/variables.texi:2662
#, no-wrap
msgid ""
"(defvaralias 'foo 'bar)\n"
"(indirect-variable 'foo)\n"
"     @result{} bar\n"
"(indirect-variable 'bar)\n"
"     @result{} bar\n"
"(setq bar 2)\n"
"bar\n"
"     @result{} 2\n"
msgstr ""

#. type: group
#: original_texis/variables.texi:2665
#, no-wrap
msgid ""
"foo\n"
"     @result{} 2\n"
msgstr ""

#. type: example
#: original_texis/variables.texi:2671
#, no-wrap
msgid ""
"(setq foo 0)\n"
"bar\n"
"     @result{} 0\n"
"foo\n"
"     @result{} 0\n"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:2675
#, no-wrap
msgid "lisp variables defined in C, restrictions"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2686
msgid ""
"Ordinary Lisp variables can be assigned any value that is a valid Lisp "
"object.  However, certain Lisp variables are not defined in Lisp, but in "
"C@.  Most of these variables are defined in the C code using "
"@code{DEFVAR_LISP}.  Like variables defined in Lisp, these can take on any "
"value.  However, some variables are defined using @code{DEFVAR_INT} or "
"@code{DEFVAR_BOOL}.  @xref{Defining Lisp variables in C,, Writing Emacs "
"Primitives}, in particular the description of functions of the type "
"@code{syms_of_@var{filename}}, for a brief discussion of the C "
"implementation."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2690
msgid ""
"Variables of type @code{DEFVAR_BOOL} can only take on the values @code{nil} "
"or @code{t}.  Attempting to assign them any other value will set them to "
"@code{t}:"
msgstr ""

#. type: example
#: original_texis/variables.texi:2695
#, no-wrap
msgid ""
"(let ((display-hourglass 5))\n"
"  display-hourglass)\n"
"     @result{} t\n"
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2697
#, no-wrap
msgid "byte-boolean-vars"
msgstr ""

#. type: defvar
#: original_texis/variables.texi:2699
msgid "This variable holds a list of all variables of type @code{DEFVAR_BOOL}."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2703
msgid ""
"Variables of type @code{DEFVAR_INT} can take on only integer values.  "
"Attempting to assign them any other value will result in an error:"
msgstr ""

#. type: example
#: original_texis/variables.texi:2707
#, no-wrap
msgid ""
"(setq undo-limit 1000.0)\n"
"@error{} Wrong type argument: integerp, 1000.0\n"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:2712
#, no-wrap
msgid "generalized variable"
msgstr ""

#. type: cindex
#: original_texis/variables.texi:2713
#, no-wrap
msgid "place form"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2720
msgid ""
"A @dfn{generalized variable} or @dfn{place form} is one of the many places "
"in Lisp memory where values can be stored using the @code{setf} macro "
"(@pxref{Setting Generalized Variables}).  The simplest place form is a "
"regular Lisp variable.  But the @sc{car}s and @sc{cdr}s of lists, elements "
"of arrays, properties of symbols, and many other locations are also places "
"where Lisp values get stored."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2726
msgid ""
"Generalized variables are analogous to lvalues in the C language, where "
"@samp{x = a[i]} gets an element from an array and @samp{a[i] = x} stores an "
"element using the same notation.  Just as certain forms like @code{a[i]} can "
"be lvalues in C, there is a set of forms that can be generalized variables "
"in Lisp."
msgstr ""

#. type: node
#: original_texis/variables.texi:2730 original_texis/variables.texi:2732
#, no-wrap
msgid "Setting Generalized Variables"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:2730
msgid "The @code{setf} macro."
msgstr ""

#. type: node
#: original_texis/variables.texi:2730 original_texis/variables.texi:2863
#, no-wrap
msgid "Adding Generalized Variables"
msgstr ""

#. type: menuentry
#: original_texis/variables.texi:2730
msgid "Defining new @code{setf} forms."
msgstr ""

#. type: subsection
#: original_texis/variables.texi:2733
#, no-wrap
msgid "The @code{setf} Macro"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2742
msgid ""
"The @code{setf} macro is the most basic way to operate on generalized "
"variables.  The @code{setf} form is like @code{setq}, except that it accepts "
"arbitrary place forms in the first (left) argument of each pair rather than "
"just symbols.  For example, @code{(setf (car a) b)} sets the car of @code{a} "
"to @code{b}, doing the same operation as @code{(setcar a b)}, but without "
"you having to use two separate functions for setting and accessing this type "
"of place."
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2743
#, no-wrap
msgid "setf [place form]@dots{}"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2749
msgid ""
"This macro evaluates @var{form} and stores its value in @var{place}, which "
"must be a valid generalized variable form.  If there are several @var{place} "
"and @var{form} pairs, the assignments are done sequentially just as with "
"@code{setq}.  @code{setf} returns the value of the last @var{form}."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2754
msgid ""
"The following Lisp forms are the forms in Emacs that will work as "
"generalized variables, and so may appear in the @var{place} argument of "
"@code{setf}:"
msgstr ""

#. type: itemize
#: original_texis/variables.texi:2764
msgid ""
"A symbol.  In other words, @code{(setf x y)} is exactly equivalent to "
"@code{(setq x y)}, and @code{setq} itself is strictly speaking redundant "
"given that @code{setf} exists.  Most programmers will continue to prefer "
"@code{setq} for setting simple variables, though, for stylistic and "
"historical reasons.  The macro @code{(setf x y)} actually expands to "
"@code{(setq x y)}, so there is no performance penalty for using it in "
"compiled code."
msgstr ""

#. type: itemize
#: original_texis/variables.texi:2767
msgid "A call to any of the following standard Lisp functions:"
msgstr ""

#. type: smallexample
#: original_texis/variables.texi:2775
#, no-wrap
msgid ""
"aref      cddr      symbol-function\n"
"car       elt       symbol-plist\n"
"caar      get       symbol-value\n"
"cadr      gethash\n"
"cdr       nth\n"
"cdar      nthcdr\n"
msgstr ""

#. type: itemize
#: original_texis/variables.texi:2779
msgid "A call to any of the following Emacs-specific functions:"
msgstr ""

#. type: smallexample
#: original_texis/variables.texi:2796
#, no-wrap
msgid ""
"alist-get                     overlay-start\n"
"default-value                 overlay-get\n"
"face-background               process-buffer\n"
"face-font                     process-filter\n"
"face-foreground               process-get\n"
"face-stipple                  process-sentinel\n"
"face-underline-p              terminal-parameter\n"
"file-modes                    window-buffer\n"
"frame-parameter               window-dedicated-p\n"
"frame-parameters              window-display-table\n"
"get-register                  window-hscroll\n"
"getenv                        window-parameter\n"
"keymap-parent                 window-point\n"
"match-data                    window-start\n"
"overlay-end\n"
msgstr ""

#. type: itemize
#: original_texis/variables.texi:2804
msgid ""
"A call of the form @code{(substring @var{subplace} @var{n} [@var{m}])}, "
"where @var{subplace} is itself a valid generalized variable whose current "
"value is a string, and where the value stored is also a string.  The new "
"string is spliced into the specified part of the destination string.  For "
"example:"
msgstr ""

#. type: example
#: original_texis/variables.texi:2818
#, no-wrap
msgid ""
"(setq a (list \"hello\" \"world\"))\n"
"     @result{} (\"hello\" \"world\")\n"
"(cadr a)\n"
"     @result{} \"world\"\n"
"(substring (cadr a) 2 4)\n"
"     @result{} \"rl\"\n"
"(setf (substring (cadr a) 2 4) \"o\")\n"
"     @result{} \"o\"\n"
"(cadr a)\n"
"     @result{} \"wood\"\n"
"a\n"
"     @result{} (\"hello\" \"wood\")\n"
msgstr ""

#. type: itemize
#: original_texis/variables.texi:2824
msgid ""
"The @code{if} and @code{cond} conditionals will work as generalized "
"variables.  For instance, this will set either the @code{foo} or the "
"@code{bar} variable to @code{zot}:"
msgstr ""

#. type: example
#: original_texis/variables.texi:2830
#, no-wrap
msgid ""
"(setf (if (zerop (random 2))\n"
"\t  foo\n"
"\tbar)\n"
"      'zot)\n"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2836
msgid ""
"@code{setf} signals an error if you pass a @var{place} form that it does not "
"know how to handle."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2843
msgid ""
"Note that for @code{nthcdr}, the list argument of the function must itself "
"be a valid @var{place} form.  For example, @code{(setf (nthcdr 0 foo) 7)} "
"will set @code{foo} itself to 7."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2857
msgid ""
"The macros @code{push} (@pxref{List Variables}) and @code{pop} (@pxref{List "
"Elements}) can manipulate generalized variables, not just lists.  @code{(pop "
"@var{place})} removes and returns the first element of the list stored in "
"@var{place}.  It is analogous to @code{(prog1 (car @var{place}) (setf "
"@var{place} (cdr @var{place})))}, except that it takes care to evaluate all "
"subforms only once.  @code{(push @var{x} @var{place})} inserts @var{x} at "
"the front of the list stored in @var{place}.  It is analogous to @code{(setf "
"@var{place} (cons @var{x} @var{place}))}, except for evaluation of the "
"subforms.  Note that @code{push} and @code{pop} on an @code{nthcdr} place "
"can be used to insert or delete at any position in a list."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2861
msgid ""
"The @file{cl-lib} library defines various extensions for generalized "
"variables, including additional @code{setf} places.  @xref{Generalized "
"Variables,,, cl, Common Lisp Extensions}."
msgstr ""

#. type: subsection
#: original_texis/variables.texi:2864
#, no-wrap
msgid "Defining new @code{setf} forms"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2868
msgid ""
"This section describes how to define new forms that @code{setf} can operate "
"on."
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2869
#, no-wrap
msgid "gv-define-simple-setter name setter &optional fix-return"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2875
msgid ""
"This macro enables you to easily define @code{setf} methods for simple "
"cases.  @var{name} is the name of a function, macro, or special form.  You "
"can use this macro whenever @var{name} has a directly corresponding "
"@var{setter} function that updates it, e.g., @code{(gv-define-simple-setter "
"car setcar)}."
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2877
msgid "This macro translates a call of the form"
msgstr ""

#. type: example
#: original_texis/variables.texi:2880
#, no-wrap
msgid "(setf (@var{name} @var{args}@dots{}) @var{value})\n"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2883
msgid "into"
msgstr ""

#. type: example
#: original_texis/variables.texi:2885
#, no-wrap
msgid "(@var{setter} @var{args}@dots{} @var{value})\n"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2894
msgid ""
"Such a @code{setf} call is documented to return @var{value}.  This is no "
"problem with, e.g., @code{car} and @code{setcar}, because @code{setcar} "
"returns the value that it set.  If your @var{setter} function does not "
"return @var{value}, use a non-@code{nil} value for the @var{fix-return} "
"argument of @code{gv-define-simple-setter}.  This expands into something "
"equivalent to"
msgstr ""

#. type: example
#: original_texis/variables.texi:2898
#, no-wrap
msgid ""
"(let ((temp @var{value}))\n"
"  (@var{setter} @var{args}@dots{} temp)\n"
"  temp)\n"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2900
msgid "so ensuring that it returns the correct result."
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2903
#, no-wrap
msgid "gv-define-setter name arglist &rest body"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2908
msgid ""
"This macro allows for more complex @code{setf} expansions than the previous "
"form.  You may need to use this form, for example, if there is no simple "
"setter function to call, or if there is one but it requires different "
"arguments to the place form."
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2916
msgid ""
"This macro expands the form @code{(setf (@var{name} @var{args}@dots{}) "
"@var{value})} by first binding the @code{setf} argument forms "
"@code{(@var{value} @var{args}@dots{})} according to @var{arglist}, and then "
"executing @var{body}.  @var{body} should return a Lisp form that does the "
"assignment, and finally returns the value that was set.  An example of using "
"this macro is:"
msgstr ""

#. type: example
#: original_texis/variables.texi:2919
#, no-wrap
msgid "(gv-define-setter caar (val x) `(setcar (car ,x) ,val))\n"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2922
#, no-wrap
msgid "gv-define-expander name handler"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2926
msgid ""
"For more control over the expansion, the @code{gv-define-expander} macro can "
"be used.  For instance, a settable @code{substring} could be implemented "
"this way:"
msgstr ""

#. type: example
#: original_texis/variables.texi:2939
#, no-wrap
msgid ""
"(gv-define-expander substring\n"
"  (lambda (do place from &optional to)\n"
"    (gv-letplace (getter setter) place\n"
"      (macroexp-let2* (from to)\n"
"        (funcall do `(substring ,getter ,from ,to)\n"
"                 (lambda (v)\n"
"                   (macroexp-let2* (v)\n"
"                     `(progn\n"
"                        ,(funcall setter `(cl--set-substring\n"
"                                           ,getter ,from ,to ,v))\n"
"                        ,v))))))))\n"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2942
#, no-wrap
msgid "gv-letplace (getter setter) place &rest body"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2946
msgid ""
"The macro @code{gv-letplace} can be useful in defining macros that perform "
"similarly to @code{setf}; for example, the @code{incf} macro of Common Lisp "
"could be implemented this way:"
msgstr ""

#. type: example
#: original_texis/variables.texi:2952
#, no-wrap
msgid ""
"(defmacro incf (place &optional n)\n"
"  (gv-letplace (getter setter) place\n"
"    (macroexp-let2* ((v (or n 1)))\n"
"      (funcall setter `(+ ,v ,getter)))))\n"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:2959
msgid ""
"@var{getter} will be bound to a copyable expression that returns the value "
"of @var{place}.  @var{setter} will be bound to a function that takes an "
"expression @var{v} and returns a new expression that sets @var{place} to "
"@var{v}.  @var{body} should return a Emacs Lisp expression manipulating "
"@var{place} via @var{getter} and @var{setter}."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2962
msgid "Consult the source file @file{gv.el} for more details."
msgstr ""

#. type: defun
#: original_texis/variables.texi:2963
#, no-wrap
msgid "make-obsolete-generalized-variable obsolete-name current-name when"
msgstr ""

#. type: defun
#: original_texis/variables.texi:2971
msgid ""
"This function makes the byte compiler warn that the generalized variable "
"@var{obsolete-name} is obsolete.  If @var{current-name} is a symbol, then "
"the warning message says to use @var{current-name} instead of "
"@var{obsolete-name}.  If @var{current-name} is a string, this is the "
"message.  @var{when} should be a string indicating when the variable was "
"first made obsolete (usually a version number string)."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:2973
#, no-wrap
msgid "CL note---no @code{setf} functions"
msgstr ""

#. type: quotation
#: original_texis/variables.texi:2984
msgid ""
"@b{Common Lisp note:} Common Lisp defines another way to specify the "
"@code{setf} behavior of a function, namely @code{setf} functions, whose "
"names are lists @code{(setf @var{name})} rather than symbols.  For example, "
"@code{(defun (setf foo) @dots{})} defines the function that is used when "
"@code{setf} is applied to @code{foo}.  Emacs does not support this.  It is a "
"compile-time error to use @code{setf} on a form that has not already had an "
"appropriate expansion defined.  In Common Lisp, this is not an error since "
"the function @code{(setf @var{func})} might be defined later."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:2989
#, no-wrap
msgid "multisession variable"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:2997
msgid ""
"When you set a variable to a value and then close Emacs and restart it, that "
"value won't be automatically restored.  Users usually set normal variables "
"in their startup files, or use Customize (@pxref{Customization}) to set user "
"options permanently, and various packages have various files where they "
"store the data (e.g., Gnus stores this in @file{.newsrc.eld} and the URL "
"library stores cookies in @file{~/.emacs.d/url/cookies})."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:3004
msgid ""
"For things in between these two extremes (i.e., configuration which goes in "
"the startup file, and massive application state that goes into separate "
"files), Emacs provides a facility to replicate data between sessions called "
"@dfn{multisession variables}.  (This facility may not be available on all "
"systems.)  To give you an idea of how these are meant to be used, here's a "
"small example:"
msgstr ""

#. type: group
#: original_texis/variables.texi:3013
#, no-wrap
msgid ""
"(define-multisession-variable foo 0)\n"
"(defun my-adder (num)\n"
"  (interactive \"nAdd number: \")\n"
"  (setf (multisession-value foo)\n"
"        (+ (multisession-value foo) num))\n"
"  (message \"The new number is: %s\" (multisession-value foo)))\n"
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:3022
msgid ""
"This defines the variable @code{foo} and binds it to a special multisession "
"object which is initialized with the value @samp{0} (if the variable doesn't "
"already exist from a previous session).  The @code{my-adder} command queries "
"the user for a number, adds this to the old (possibly saved value), and then "
"saves the new value."
msgstr ""

#. type: Plain text
#: original_texis/variables.texi:3025
msgid ""
"This facility isn't meant to be used for huge data structures, but should be "
"performant for most values."
msgstr ""

#. type: defmac
#: original_texis/variables.texi:3026
#, no-wrap
msgid "define-multisession-variable name initial-value &optional doc &rest args"
msgstr ""

#. type: defmac
#: original_texis/variables.texi:3031
msgid ""
"This macro defines @var{name} as a multisession variable, and gives it the "
"@var{initial-value} if this variable hasn't been assigned a value earlier.  "
"@var{doc} is the doc string, and several keyword arguments can be used in "
"@var{args}:"
msgstr ""

#. type: item
#: original_texis/variables.texi:3033
#, no-wrap
msgid ":package @var{package-symbol}"
msgstr ""

#. type: table
#: original_texis/variables.texi:3042
msgid ""
"This keyword says that a multisession variable belongs to the package "
"specified by @var{package-symbol}.  The combination of @var{package-symbol} "
"and @var{name} has to be unique.  If @var{package-symbol} isn't given, this "
"will default to the first ``segment'' of the @var{name} symbol's name, which "
"is the part of its name up to and excluding the first @samp{-}.  For "
"instance, if @var{name} is @code{foo} and @var{package-symbol} isn't given, "
"@var{package-symbol} will default to @code{foo}."
msgstr ""

#. type: cindex
#: original_texis/variables.texi:3043
#, no-wrap
msgid "synchronized multisession variables"
msgstr ""

#. type: item
#: original_texis/variables.texi:3044
#, no-wrap
msgid ":synchronized @var{bool}"
msgstr ""

#. type: table
#: original_texis/variables.texi:3052
msgid ""
"Multisession variables can be @dfn{synchronized} if @var{bool} is "
"non-@code{nil}.  This means that if there're two concurrent Emacs instances "
"running, and the other Emacs changes the multisession variable @code{foo}, "
"the current Emacs instance will retrieve that modified data when accessing "
"the value.  If @var{synchronized} is @code{nil} or missing, this won't "
"happen, and the values in all Emacs sessions using the variable will be "
"independent of each other."
msgstr ""

#. type: item
#: original_texis/variables.texi:3053
#, no-wrap
msgid ":storage @var{storage}"
msgstr ""

#. type: table
#: original_texis/variables.texi:3058
msgid ""
"Use the specified @var{storage} method.  This can be either @code{sqlite} "
"(in Emacs compiled with SQLite support) or @code{files}.  If not given, this "
"defaults to the value of the @code{multisession-storage} variable, described "
"below."
msgstr ""

#. type: defun
#: original_texis/variables.texi:3061
#, no-wrap
msgid "multisession-value variable"
msgstr ""

#. type: defun
#: original_texis/variables.texi:3068
msgid ""
"This function returns the current value of @var{variable}.  If this variable "
"hasn't been accessed before in this Emacs session, or if it's changed "
"externally, it will be read in from external storage.  If not, the current "
"value in this session is returned as is.  It is an error to call this "
"function for a @var{variable} that is not a multisession variable."
msgstr ""

#. type: defun
#: original_texis/variables.texi:3071
msgid ""
"Values retrieved via @code{multisession-value} may or may not be @code{eq} "
"to each other, but they will always be @code{equal}."
msgstr ""

#. type: defun
#: original_texis/variables.texi:3074
msgid ""
"This is a generalized variable (@pxref{Generalized Variables}), so the way "
"to update such a variable is to say, for instance:"
msgstr ""

#. type: lisp
#: original_texis/variables.texi:3077
#, no-wrap
msgid "(setf (multisession-value foo-bar) 'zot)\n"
msgstr ""

#. type: defun
#: original_texis/variables.texi:3081
msgid ""
"Only Emacs Lisp values that have a readable print syntax (@pxref{Printed "
"Representation}) can be saved this way."
msgstr ""

#. type: defun
#: original_texis/variables.texi:3084
msgid ""
"If the multisession variable is synchronized, setting it may update the "
"value first.  For instance:"
msgstr ""

#. type: lisp
#: original_texis/variables.texi:3087
#, no-wrap
msgid "(cl-incf (multisession-value foo-bar))\n"
msgstr ""

#. type: defun
#: original_texis/variables.texi:3094
msgid ""
"This first checks whether the value has changed in a different Emacs "
"instance, retrieves that value, and then adds 1 to that value and stores "
"it.  But note that this is done without locking, so if many instances are "
"updating the value at the same time, it's unpredictable which instance "
"``wins''."
msgstr ""

#. type: defun
#: original_texis/variables.texi:3096
#, no-wrap
msgid "multisession-delete object"
msgstr ""

#. type: defun
#: original_texis/variables.texi:3099
msgid ""
"This function deletes @var{object} and its value from its persistent "
"storage."
msgstr ""

#. type: defun
#: original_texis/variables.texi:3102
#, no-wrap
msgid "make-multisession"
msgstr ""

#. type: defun
#: original_texis/variables.texi:3105
msgid ""
"You can also make persistent values that aren't tied to a specific variable, "
"but are tied to an explicit package and key."
msgstr ""

#. type: example
#: original_texis/variables.texi:3110
#, no-wrap
msgid ""
"(setq foo (make-multisession :package \"mail\"\n"
"                             :key \"friends\"))\n"
"(setf (multisession-value foo) 'everybody)\n"
msgstr ""

#. type: defun
#: original_texis/variables.texi:3115
msgid ""
"This supports the same keywords as @code{define-multisession-variable}, but "
"also supports a @code{:initial-value} keyword, which specifies the default "
"value."
msgstr ""

#. type: defopt
#: original_texis/variables.texi:3117
#, no-wrap
msgid "multisession-storage"
msgstr ""

#. type: defopt
#: original_texis/variables.texi:3124
msgid ""
"This variable controls how the multisession variables are stored.  It value "
"defaults to @code{files}, which means that the values are stored in a "
"one-file-per-variable structure inside the directory specified by "
"@code{multisession-directory}.  If this value is @code{sqlite} instead, the "
"values are stored in an SQLite database; this is only available if Emacs was "
"built with SQLite support."
msgstr ""

#. type: defopt
#: original_texis/variables.texi:3126
#, no-wrap
msgid "multisession-directory"
msgstr ""

#. type: defopt
#: original_texis/variables.texi:3131
msgid ""
"The multisession variables are stored under this directory, which defaults "
"to @file{multisession/} subdirectory of the @code{user-emacs-directory}, "
"which is typically @file{~/.emacs.d/multisession/}."
msgstr ""

#. type: findex
#: original_texis/variables.texi:3133
#, no-wrap
msgid "multisession-edit-mode"
msgstr ""

#. type: deffn
#: original_texis/variables.texi:3134
#, no-wrap
msgid "Command list-multisession-values"
msgstr ""

#. type: deffn
#: original_texis/variables.texi:3138
msgid ""
"This command pops up a buffer listing all the multisession variables, and "
"enters a special mode @code{multisession-edit-mode} which allows you to "
"delete them and edit their values."
msgstr ""
