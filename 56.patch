From 280831064f515ca85c79b7f6ca827ecb88525c14 Mon Sep 17 00:00:00 2001
From: m-kirihara <sfaddmki-git@yahoo.co.jp>
Date: Tue, 15 Aug 2023 21:58:26 +0900
Subject: [PATCH 1/9] =?UTF-8?q?=E3=82=82=E3=81=A3=E3=81=A8=E3=82=82?=
 =?UTF-8?q?=E7=B0=A1=E5=8D=98=E3=81=AA=E4=BD=BF=E3=81=84=E6=96=B9=E3=81=A7?=
 =?UTF-8?q?=E3=81=AF=E2=87=92=E3=82=82=E3=81=A3=E3=81=A8=E3=82=82=E5=8D=98?=
 =?UTF-8?q?=E7=B4=94=E3=81=AA=E5=A0=B4=E5=90=88=E3=80=81?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

http://www.fan.gr.jp/~ring/doc/elisp_20/elisp_13.html#SEC175 参照．
---
 lispref/eval.texi.po | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lispref/eval.texi.po b/lispref/eval.texi.po
index b52c4262..b776ec4d 100644
--- a/lispref/eval.texi.po
+++ b/lispref/eval.texi.po
@@ -1261,7 +1261,7 @@ msgstr "forms, backquote"
 #. type: Plain text
 #: original_texis/eval.texi:630
 msgid "@dfn{Backquote constructs} allow you to quote a list, but selectively evaluate elements of that list.  In the simplest case, it is identical to the special form"
-msgstr "@dfn{バッククォート構文(backquote constructs)}を使用することにより、リストをクォートしてそのリストのある要素を選択的に評価することができます。もっとも簡単な使い方ではスペシャルフォーム"
+msgstr "@dfn{バッククォート構文(backquote constructs)}を使用することにより、リストをクォートしてそのリストのある要素を選択的に評価することができます。もっとも単純な場合、スペシャルフォーム"
 
 #. type: iftex
 #: original_texis/eval.texi:632

From 2027d03f2d8ce17cdfa1bbc303d0b2ef2d840ac5 Mon Sep 17 00:00:00 2001
From: m-kirihara <sfaddmki-git@yahoo.co.jp>
Date: Tue, 15 Aug 2023 22:01:20 +0900
Subject: [PATCH 2/9] =?UTF-8?q?=E5=8F=82=E7=85=A7)=E3=80=82=E2=87=92?=
 =?UTF-8?q?=E5=8F=82=E7=85=A7)=E3=81=A8=E5=90=8C=E3=81=98=E3=81=AB?=
 =?UTF-8?q?=E3=81=AA=E3=82=8A=E3=81=BE=E3=81=99=E3=80=82?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

体言止めではなくidenticalの訳を含んだ述語にしています．
---
 lispref/eval.texi.po | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lispref/eval.texi.po b/lispref/eval.texi.po
index b776ec4d..8ba80456 100644
--- a/lispref/eval.texi.po
+++ b/lispref/eval.texi.po
@@ -1271,7 +1271,7 @@ msgstr "@code{quote}と同じです。"
 #. type: ifnottex
 #: original_texis/eval.texi:636
 msgid "@code{quote} (described in the previous section; @pxref{Quoting})."
-msgstr "@code{quote} (前セクションで説明済み。@ref{Quoting}を参照)。"
+msgstr "@code{quote} (前セクションで説明済み。@ref{Quoting}を参照)と同じになります。"
 
 #. type: Plain text
 #: original_texis/eval.texi:638

From f1cbf051c8c622b5fcc031256d44cb05b1fac14d Mon Sep 17 00:00:00 2001
From: m-kirihara <sfaddmki-git@yahoo.co.jp>
Date: Tue, 15 Aug 2023 22:05:48 +0900
Subject: [PATCH 3/9] =?UTF-8?q?=E4=B8=8D=E8=A6=81=E3=81=AA=E3=82=89?=
 =?UTF-8?q?=E2=87=92=E4=B8=8D=E8=A6=81=E3=81=A8=E3=81=84=E3=81=86=E3=81=93?=
 =?UTF-8?q?=E3=81=A8=E3=81=8C=E3=82=8F=E3=81=8B=E3=81=A3=E3=81=9F=E5=A0=B4?=
 =?UTF-8?q?=E5=90=88=E3=81=AB=EF=BC=8C=E9=81=85=E5=BB=B6=E3=81=A7=E3=81=8D?=
 =?UTF-8?q?=E3=82=8C=E3=81=B0=E2=87=92=E9=81=85=E5=BB=B6=E3=81=95=E3=81=9B?=
 =?UTF-8?q?=E3=82=8B=E3=81=A8?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

https://runebook.dev/ja/docs/elisp/deferred-eval 参照．
---
 lispref/eval.texi.po | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lispref/eval.texi.po b/lispref/eval.texi.po
index 8ba80456..2e4a93f6 100644
--- a/lispref/eval.texi.po
+++ b/lispref/eval.texi.po
@@ -1709,7 +1709,7 @@ msgstr "lazy evaluation"
 #. type: Plain text
 #: original_texis/eval.texi:923
 msgid "Sometimes it is useful to delay the evaluation of an expression, for example if you want to avoid performing a time-consuming calculation if it turns out that the result is not needed in the future of the program.  The @file{thunk} library provides the following functions and macros to support such @dfn{deferred evaluation}:"
-msgstr "たとえばプログラムの将来において計算結果が不要なら時間を要する計算処理を回避したい等、式の評価を遅延できれば便利な場合があります。そのような@dfn{遅延評価(deferred evaluation)}をサポートするために、@file{thunk}は以下の関数とマクロを提供します。"
+msgstr "たとえばプログラムの将来において計算結果が不要ということがわかった場合に時間を要する計算処理を回避したい等、式の評価を遅延させると便利な場合があります。そのような@dfn{遅延評価(deferred evaluation)}をサポートするために、@file{thunk}は以下の関数とマクロを提供します。"
 
 #. type: cindex
 #: original_texis/eval.texi:924

From 1f4ff486e6658844f8cf5222130a0bb20e32fa75 Mon Sep 17 00:00:00 2001
From: m-kirihara <sfaddmki-git@yahoo.co.jp>
Date: Tue, 15 Aug 2023 22:08:02 +0900
Subject: [PATCH 4/9] =?UTF-8?q?thunk=E3=81=A8=E3=81=AF=E5=88=A5=E3=81=AE?=
 =?UTF-8?q?=E3=82=B5=E3=83=96=E3=83=AB=E3=83=BC=E3=83=81=E3=83=B3=E2=87=92?=
 =?UTF-8?q?thunk=E3=81=A8=E3=81=AF=E3=80=81=E5=88=A5=E3=81=AE=E3=82=B5?=
 =?UTF-8?q?=E3=83=96=E3=83=AB=E3=83=BC=E3=83=81=E3=83=B3?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

読点がないと「thunkというサブルーチンもあるがそれとは別のサブルーチン」という風に読めてしまうので．
---
 lispref/eval.texi.po | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lispref/eval.texi.po b/lispref/eval.texi.po
index 2e4a93f6..5c732c02 100644
--- a/lispref/eval.texi.po
+++ b/lispref/eval.texi.po
@@ -1726,7 +1726,7 @@ msgstr "thunk-delay forms@dots{}"
 #. type: defmac
 #: original_texis/eval.texi:930
 msgid "Return a @dfn{thunk} for evaluating the @var{forms}.  A thunk is a closure (@pxref{Closures}) that inherits the lexical environment of the @code{thunk-delay} call.  Using this macro requires @code{lexical-binding}."
-msgstr "@var{forms}を評価するための@dfn{thunk}をリターンする(訳注: thunkとは別のサブルーチンに計算を追加で挿入するために使用するサブルーチンであり、計算結果が必要になるまで計算を遅延したり、別のサブルーチンの先頭や最後に処理を挿入するために使用される。英語版Wikipediaより)。thunkは@code{thunk-delay}呼び出しのlexical環境を継承するクロージャである(@ref{Closures}を参照)。このマクロの使用には@code{lexical-binding}が必要。"
+msgstr "@var{forms}を評価するための@dfn{thunk}をリターンする(訳注: thunkとは、別のサブルーチンに計算を追加で挿入するために使用するサブルーチンであり、計算結果が必要になるまで計算を遅延したり、別のサブルーチンの先頭や最後に処理を挿入するために使用される。英語版Wikipediaより)。thunkは@code{thunk-delay}呼び出しのlexical環境を継承するクロージャである(@ref{Closures}を参照)。このマクロの使用には@code{lexical-binding}が必要。"
 
 #. type: defun
 #: original_texis/eval.texi:932

From d8301baa627a735ee26ccc9ef3704e6dbde86f83 Mon Sep 17 00:00:00 2001
From: m-kirihara <sfaddmki-git@yahoo.co.jp>
Date: Tue, 15 Aug 2023 22:13:40 +0900
Subject: [PATCH 5/9] =?UTF-8?q?=E6=9C=80=E5=86=85=E2=87=92=E6=9C=80?=
 =?UTF-8?q?=E3=82=82=E5=86=85=E5=81=B4?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

競艇では「最内(さいうち)」という言葉はあるようですが，普通は「最内(さいない)」という言葉は使わないと思います．
---
 lispref/control.texi.po | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/lispref/control.texi.po b/lispref/control.texi.po
index f464576b..bee7dd8c 100644
--- a/lispref/control.texi.po
+++ b/lispref/control.texi.po
@@ -2665,7 +2665,7 @@ msgstr "@code{throw}フォームが実行されると、対応する@code{catch}
 #. type: Plain text
 #: original_texis/control.texi:1654
 msgid "The function @code{throw} finds the matching @code{catch} based on the first argument: it searches for a @code{catch} whose first argument is @code{eq} to the one specified in the @code{throw}.  If there is more than one applicable @code{catch}, the innermost one takes precedence.  Thus, in the above example, the @code{throw} specifies @code{foo}, and the @code{catch} in @code{foo-outer} specifies the same symbol, so that @code{catch} is the applicable one (assuming there is no other matching @code{catch} in between)."
-msgstr "関数@code{throw}は1番目の引数にもとづいて、それにマッチする@code{catch}を探します。@code{throw}は1番目の引数が、@code{throw}で指定されたものと@code{eq}であるような@code{catch}を検索します。複数の該当する@code{catch}がある場合には、最内のものが優先されます。したがって上記の例では@code{throw}が@code{foo}を指定していて、@code{foo-outer}内の@code{catch}が同じシンボルを指定しているので、(この間に他のマッチする@code{catch}は存在しないと仮定するなら)その@code{catch}が該当します。"
+msgstr "関数@code{throw}は1番目の引数にもとづいて、それにマッチする@code{catch}を探します。@code{throw}は1番目の引数が、@code{throw}で指定されたものと@code{eq}であるような@code{catch}を検索します。複数の該当する@code{catch}がある場合には、最も内側にあるものが優先されます。したがって上記の例では@code{throw}が@code{foo}を指定していて、@code{foo-outer}内の@code{catch}が同じシンボルを指定しているので、(この間に他のマッチする@code{catch}は存在しないと仮定するなら)その@code{catch}が該当します。"
 
 #. type: Plain text
 #: original_texis/control.texi:1664
@@ -2724,7 +2724,7 @@ msgstr "throw tag value"
 #. type: defun
 #: original_texis/control.texi:1706
 msgid "The purpose of @code{throw} is to return from a return point previously established with @code{catch}.  The argument @var{tag} is used to choose among the various existing return points; it must be @code{eq} to the value specified in the @code{catch}.  If multiple return points match @var{tag}, the innermost one is used."
-msgstr "@code{throw}の目的は、以前に@code{catch}により確立されたリターン位置に戻ることである。引数@var{tag}は、既存のさまざまなリターン位置からリターン位置を選択するために使用される。複数のリターン位置が@var{tag}にマッチしたら、最内のものが使用される。"
+msgstr "@code{throw}の目的は、以前に@code{catch}により確立されたリターン位置に戻ることである。引数@var{tag}は、既存のさまざまなリターン位置からリターン位置を選択するために使用される。複数のリターン位置が@var{tag}にマッチしたら、最も内側のものが使用される。"
 
 #. type: defun
 #: original_texis/control.texi:1709
@@ -3310,7 +3310,7 @@ msgstr ""
 #. type: defspec
 #: original_texis/control.texi:2129
 msgid "Each error that occurs has an @dfn{error symbol} that describes what kind of error it is, and which describes also a list of condition names (@pxref{Error Symbols}).  Emacs searches all the active @code{condition-case} forms for a handler that specifies one or more of these condition names; the innermost matching @code{condition-case} handles the error.  Within this @code{condition-case}, the first applicable handler handles the error."
-msgstr "発生するエラーはそれぞれ、それが何の種類のエラーかを記述する@dfn{エラーシンボル(error symbol)}をもち、これはコンディション名のリストも記述する(@ref{Error Symbols}を参照)。Emacsは1つ以上のコンディション名を指定するハンドラーにたいして、すべてのアクティブな@code{condition-case}フォームを検索する。@code{condition-case}の最内のマッチがそのエラーを処理する。@code{condition-case}内では、最初に適合したハンドラーがそのエラーを処理する。"
+msgstr "発生するエラーはそれぞれ、それが何の種類のエラーかを記述する@dfn{エラーシンボル(error symbol)}をもち、これはコンディション名のリストも記述する(@ref{Error Symbols}を参照)。Emacsは1つ以上のコンディション名を指定するハンドラーにたいして、すべてのアクティブな@code{condition-case}フォームを検索する。@code{condition-case}の最も内側のマッチがそのエラーを処理する。@code{condition-case}内では、最初に適合したハンドラーがそのエラーを処理する。"
 
 #. type: defspec
 #: original_texis/control.texi:2133

From 08297fcba334159f28216282f770d5baead52661 Mon Sep 17 00:00:00 2001
From: m-kirihara <sfaddmki-git@yahoo.co.jp>
Date: Tue, 15 Aug 2023 22:17:21 +0900
Subject: [PATCH 6/9] =?UTF-8?q?=E3=83=AA=E3=82=BF=E3=83=BC=E3=83=B3?=
 =?UTF-8?q?=E4=BD=8D=E7=BD=AE=E3=81=8C=E5=8A=B9=E6=9E=9C=E3=82=92=E3=82=82?=
 =?UTF-8?q?=E3=81=A4=E3=81=93=E3=81=A8=E3=81=AB=E3=82=88=E3=82=8A=E2=87=92?=
 =?UTF-8?q?=E3=83=AA=E3=82=BF=E3=83=BC=E3=83=B3=E4=BD=8D=E7=BD=AE=E3=81=8C?=
 =?UTF-8?q?=E6=9C=89=E5=8A=B9=E3=81=AA=E5=A0=B4=E5=90=88?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

訳を変えてみました．
---
 lispref/control.texi.po | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lispref/control.texi.po b/lispref/control.texi.po
index bee7dd8c..7b8c871c 100644
--- a/lispref/control.texi.po
+++ b/lispref/control.texi.po
@@ -2708,7 +2708,7 @@ msgstr "@code{catch}は@code{throw}関数にたいするリターン位置を確
 #. type: defspec
 #: original_texis/control.texi:1693
 msgid "With the return point in effect, @code{catch} evaluates the forms of the @var{body} in textual order.  If the forms execute normally (without error or nonlocal exit) the value of the last body form is returned from the @code{catch}."
-msgstr "リターン位置が効果をもつことにより、@code{catch}は@var{body}のフォームをテキスト順に評価する。フォームが(エラーや非ローカル脱出なしで)通常に実行されたなら、bodyの最後のフォームの値が@code{catch}からリターンされる。"
+msgstr "リターン位置が有効な場合、@code{catch}は@var{body}のフォームをテキスト順に評価する。フォームが(エラーや非ローカル脱出なしで)通常に実行されたなら、bodyの最後のフォームの値が@code{catch}からリターンされる。"
 
 #. type: defspec
 #: original_texis/control.texi:1698

From 1fd862ec5f5ee5e0ca256a8c4dab2188714a23e1 Mon Sep 17 00:00:00 2001
From: m-kirihara <sfaddmki-git@yahoo.co.jp>
Date: Tue, 15 Aug 2023 22:19:25 +0900
Subject: [PATCH 7/9] =?UTF-8?q?=E3=81=9D=E3=81=AE=E3=83=A1=E3=83=83?=
 =?UTF-8?q?=E3=82=BB=E3=83=BC=E3=82=B8=E3=81=AF=E4=BD=95=E3=81=8C=E6=82=AA?=
 =?UTF-8?q?=E3=81=84=E3=81=AE=E3=81=8B=E2=80=A6=E2=87=92=E3=81=9D=E3=81=AE?=
 =?UTF-8?q?=E3=83=A1=E3=83=83=E3=82=BB=E3=83=BC=E3=82=B8=E3=81=AF=E3=81=A9?=
 =?UTF-8?q?=E3=81=86=E3=81=A7=E3=81=82=E3=82=8B=E3=81=B9=E3=81=8D=E3=81=8B?=
 =?UTF-8?q?=E2=80=A6?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

文の訳を変えてみました．
---
 lispref/control.texi.po | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lispref/control.texi.po b/lispref/control.texi.po
index 7b8c871c..28f609d9 100644
--- a/lispref/control.texi.po
+++ b/lispref/control.texi.po
@@ -2948,7 +2948,7 @@ msgstr "ユーザーが@kbd{C-g}をタイプしたときに発生するquitは
 #. type: Plain text
 #: original_texis/control.texi:1848
 msgid "Every error specifies an error message, one way or another.  The message should state what is wrong (``File does not exist''), not how things ought to be (``File must exist'').  The convention in Emacs Lisp is that error messages should start with a capital letter, but should not end with any sort of punctuation."
-msgstr "すべてのエラーメッセージはそれぞれ、何らかのエラーメッセージを指定します。そのメッセージは何が悪いのか(``File does not exist'')、物事がどうしてそうあるべきではない(``File must exist'')かを示すべきです。Emacs Lispの慣習ではエラーメッセージは大文字で開始され、区切り文字で終わるべきではありません。"
+msgstr "すべてのエラーメッセージはそれぞれ、何らかのエラーメッセージを指定します。そのメッセージはどうであるべきか(``File must exist'')ではなく、何が悪いのか(``File does not exist'')を示すべきです。Emacs Lispの慣習ではエラーメッセージは大文字で開始され、区切り文字で終わるべきではありません。"
 
 #. type: defun
 #: original_texis/control.texi:1849

From cf8b4869ce42092fd7efa8a06eb319e84de55478 Mon Sep 17 00:00:00 2001
From: m-kirihara <sfaddmki-git@yahoo.co.jp>
Date: Tue, 15 Aug 2023 22:21:34 +0900
Subject: [PATCH 8/9] =?UTF-8?q?=E3=83=A9=E3=82=A4=E3=82=BF=E3=83=BC(writer?=
 =?UTF-8?q?)=E2=87=92=E4=BD=9C=E6=88=90=E8=80=85=EF=BC=8C=E4=B8=80?=
 =?UTF-8?q?=E9=83=A8=E5=89=8A=E9=99=A4=EF=BC=8C=E5=8F=97=E3=81=91=E3=82=8B?=
 =?UTF-8?q?=E2=87=92=E5=8F=97=E3=81=91=E6=98=93=E3=81=84?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

訳をいくらか変えてみました．
---
 lispref/control.texi.po | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lispref/control.texi.po b/lispref/control.texi.po
index 28f609d9..d58537cb 100644
--- a/lispref/control.texi.po
+++ b/lispref/control.texi.po
@@ -3806,7 +3806,7 @@ msgstr "ftp-login"
 #. type: Plain text
 #: original_texis/control.texi:2448
 msgid "Here is an actual example derived from an FTP package.  It creates a process (@pxref{Processes}) to try to establish a connection to a remote machine.  As the function @code{ftp-login} is highly susceptible to numerous problems that the writer of the function cannot anticipate, it is protected with a form that guarantees deletion of the process in the event of failure.  Otherwise, Emacs might fill up with useless subprocesses."
-msgstr "以下はFTPパッケージ由来の実例です。これはリモートマシンへの接続の確立を試みるために、プロセス(@ref{Processes}を参照)を作成しています。関数@code{ftp-login}は関数のライター(writer)が予想できないことによる多くの問題から非常に影響を受けるので、失敗イベントでプロセスの削除を保証するフォームで保護されています。そうしないとEmacsは無用なサブプロセスで一杯になってしまうでしょう。"
+msgstr "以下はFTPパッケージ由来の実例です。これはリモートマシンへの接続の確立を試みるために、プロセス(@ref{Processes}を参照)を作成しています。関数@code{ftp-login}は関数の作成者が予想できない多くの問題から非常に影響を受け易いので、失敗イベントでプロセスの削除を保証するフォームで保護されています。そうしないとEmacsは無用なサブプロセスで一杯になってしまうでしょう。"
 
 #. type: group
 #: original_texis/control.texi:2459

From f3ae9ec5cfd5d0a438144385498f0ddfa25ead0c Mon Sep 17 00:00:00 2001
From: m-kirihara <sfaddmki-git@yahoo.co.jp>
Date: Tue, 15 Aug 2023 22:38:48 +0900
Subject: [PATCH 9/9] typo

typo
---
 lispref/control.texi.po | 18 +++++++++---------
 lispref/eval.texi.po    | 10 +++++-----
 2 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/lispref/control.texi.po b/lispref/control.texi.po
index d58537cb..74785059 100644
--- a/lispref/control.texi.po
+++ b/lispref/control.texi.po
@@ -647,7 +647,7 @@ msgstr "すべての@var{conditions}が非@code{nil}なら、それらの最後
 #. type: defspec
 #: original_texis/control.texi:375
 msgid "Here is an example.  The first condition returns the integer 1, which is not @code{nil}.  Similarly, the second condition returns the integer 2, which is not @code{nil}.  The third condition is @code{nil}, so the remaining condition is never evaluated."
-msgstr "以下に例を示す。1番目の条件は整数1をリターンし、これは@code{nil}ではまい。同様に2番目の条件は整数2をリターンし、これも@code{nil}ではない。3番目の条件は@code{nil}なので、のこりの条件が評価されることは決してない。"
+msgstr "以下に例を示す。1番目の条件は整数1をリターンし、これは@code{nil}ではない。同様に2番目の条件は整数2をリターンし、これも@code{nil}ではない。3番目の条件は@code{nil}なので、のこりの条件が評価されることは決してない。"
 
 #. type: group
 #: original_texis/control.texi:382
@@ -1876,12 +1876,12 @@ msgstr "structural matching"
 #. type: Plain text
 #: original_texis/control.texi:1135
 msgid "This subsection describes @dfn{backquote-style patterns}, a set of builtin patterns that eases structural matching.  For background, @pxref{Pattern-Matching Conditional}."
-msgstr "このサブセクションでは構造化マッチングを容易にするビルトインパターン@dfn{バッククォートスタイルパターン(backquote-style patterns)}について説明します。背景については@ref{Pattern-Matching Conditional}を参照してください。"
+msgstr "このサブセクションでは構造化マッチングを容易にするビルトインパターンである@dfn{バッククォートスタイルパターン(backquote-style patterns)}について説明します。背景については@ref{Pattern-Matching Conditional}を参照してください。"
 
 #. type: Plain text
 #: original_texis/control.texi:1139
 msgid "Backquote-style patterns are a powerful set of @code{pcase} pattern extensions (created using @code{pcase-defmacro}) that make it easy to match @var{expval} against specifications of its @emph{structure}."
-msgstr "バッククォートスタイルパターンは(@code{pcase-defmacro}を使用して作成された)強力な@code{pcase}パターン拡張であり、その@emph{構造(structure)}の仕様にたいする@var{expval}をマッチを容易にします。"
+msgstr "バッククォートスタイルパターンは(@code{pcase-defmacro}を使用して作成された)強力な@code{pcase}パターン拡張であり、その@emph{構造(structure)}の仕様にたいする@var{expval}のマッチを容易にします。"
 
 #. type: Plain text
 #: original_texis/control.texi:1143
@@ -2086,7 +2086,7 @@ msgstr ""
 #. type: Plain text
 #: original_texis/control.texi:1281
 msgid "This will not only extract @code{x} and @code{y} but will additionally test that @code{my-list} is a list containing exactly 3 elements and whose first element is the symbol @code{add}.  If any of those tests fail, @code{pcase} will immediately return @code{nil} without calling @code{message}."
-msgstr "これは@code{x}と@code{y}を抽出すだけではなく、加えて@code{my-list}が正確に3つの要素を含むリストであり、最初の要素がシンボル@code{add}かどうかをテストします。これらのテストのいずれかが失敗したら、@code{pcase}は@code{message}を呼び出さずに即座に@code{nil}をリターンします。"
+msgstr "これは@code{x}と@code{y}を抽出するだけではなく、加えて@code{my-list}が正確に3つの要素を含むリストであり、最初の要素がシンボル@code{add}かどうかをテストします。これらのテストのいずれかが失敗したら、@code{pcase}は@code{message}を呼び出さずに即座に@code{nil}をリターンします。"
 
 #. type: Plain text
 #: original_texis/control.texi:1288
@@ -2168,7 +2168,7 @@ msgstr "pcase-let* bindings body@dots{}"
 #. type: defmac
 #: original_texis/control.texi:1351
 msgid "@var{bindings} is a list of bindings of the form @code{(@var{pattern} @var{exp})}, where @var{exp} is an expression to evaluate and @var{pattern} is a @code{pcase} pattern.  The variable bindings are produced by destructuring binding of elements of @var{pattern} to the values of the corresponding elements of the evaluated @var{exp}."
-msgstr "@var{bindings}は@code{(@var{pattern} @var{exp})}という形式のバインディングのリスト。ここで@var{exp}は評価する式、@var{pattern}は@code{pcase}パターン。この変数バインディングは@var{pattern}の要素を、評価された@var{exp}の対応する要素の値に分割してのバインディングすることにより生成される。"
+msgstr "@var{bindings}は@code{(@var{pattern} @var{exp})}という形式のバインディングのリスト。ここで@var{exp}は評価する式、@var{pattern}は@code{pcase}パターン。この変数バインディングは@var{pattern}の要素を、評価された@var{exp}の対応する要素の値に分割してバインディングすることにより生成される。"
 
 #. type: defmac
 #: original_texis/control.texi:1358
@@ -2184,7 +2184,7 @@ msgstr "pcase-dolist (pattern list) body@dots{}"
 #. type: defmac
 #: original_texis/control.texi:1367
 msgid "Execute @var{body} once for each element of @var{list}, on each iteration performing a destructuring binding of variables in @var{pattern} to the values of the corresponding subfields of the element of @var{list}.  The bindings are performed as if by @code{pcase-let}.  When @var{pattern} is a simple variable, this ends up being equivalent to @code{dolist} (@pxref{Iteration})."
-msgstr "繰り返しごとに@var{pattern}の変数を@var{list}の要素の対応するサブフィールドに分割バインディングしながら、@var{list}の各要素ごとに一度@var{body}を実行するこのバインディングは@code{pcase-let}の場合のように行われる。@var{pattern}が単なる変数なら@code{dolist}と等価(@ref{Iteration}を参照)。"
+msgstr "繰り返しごとに@var{pattern}の変数を@var{list}の要素の対応するサブフィールドに分割バインディングしながら、@var{list}の各要素ごとに一度@var{body}を実行する。このバインディングは@code{pcase-let}の場合のように行われる。@var{pattern}が単なる変数なら@code{dolist}と等価(@ref{Iteration}を参照)。"
 
 #. type: defmac
 #: original_texis/control.texi:1369
@@ -2867,7 +2867,7 @@ msgstr "エラーがシグナルされるとエラーメッセージを表示し
 #. type: Plain text
 #: original_texis/control.texi:1811
 msgid "In complicated programs, simple termination may not be what you want.  For example, the program may have made temporary changes in data structures, or created temporary buffers that should be deleted before the program is finished.  In such cases, you would use @code{unwind-protect} to establish @dfn{cleanup expressions} to be evaluated in case of error.  (@xref{Cleanups}.)  Occasionally, you may wish the program to continue execution despite an error in a subroutine.  In these cases, you would use @code{condition-case} to establish @dfn{error handlers} to recover control in case of error."
-msgstr "複雑なプログラムでは単なる終了が望ましくない場合もあるでしょう。たとえばそのプログラムがータ構造に一時的に変更を行なっていたり、プログラム終了前に削除する必要がある一時バッファーを作成しているかもしれません。このような場合には、エラー時に評価される@dfn{クリーンアップ式(cleanup expressions)}を設定するために、@code{unwind-protect}を使用するでしょう(@ref{Cleanups}を参照)。サブルーチン内のエラーにもかかわらずに、プログラムの実行を継続したいときがあるかもしれません。このような場合には、エラー時のリカバリーを制御する@dfn{エラーハンドラー(error handlers)}を設定するために@code{condition-case}を使用するでしょう。"
+msgstr "複雑なプログラムでは単なる終了が望ましくない場合もあるでしょう。たとえばそのプログラムがデータ構造に一時的に変更を行なっていたり、プログラム終了前に削除する必要がある一時バッファーを作成しているかもしれません。このような場合には、エラー時に評価される@dfn{クリーンアップ式(cleanup expressions)}を設定するために、@code{unwind-protect}を使用するでしょう(@ref{Cleanups}を参照)。サブルーチン内のエラーにもかかわらずに、プログラムの実行を継続したいときがあるかもしれません。このような場合には、エラー時のリカバリーを制御する@dfn{エラーハンドラー(error handlers)}を設定するために@code{condition-case}を使用するでしょう。"
 
 #. type: Plain text
 #: original_texis/control.texi:1815
@@ -2989,7 +2989,7 @@ msgstr ""
 #. type: defun
 #: original_texis/control.texi:1871
 msgid "@code{error} works by calling @code{signal} with two arguments: the error symbol @code{error}, and a list containing the string returned by @code{format-message}."
-msgstr "2つの引数 --- エラーシンボル@code{error}と@code{format-message}がリターンするる文字列を含むリスト --- で@code{signal}を呼び出すことにより@code{error}は機能する。"
+msgstr "2つの引数 --- エラーシンボル@code{error}と@code{format-message}がリターンする文字列を含むリスト --- で@code{signal}を呼び出すことにより@code{error}は機能する。"
 
 #. type: defun
 #: original_texis/control.texi:1876
@@ -3538,7 +3538,7 @@ msgstr ""
 #. type: defmac
 #: original_texis/control.texi:2265
 msgid "@var{condition} can also be a list of error conditions."
-msgstr "@var{condition}はエエラーコンディションのリストでも可。"
+msgstr "@var{condition}はエラーコンディションのリストでも可。"
 
 #. type: defmac
 #: original_texis/control.texi:2267
diff --git a/lispref/eval.texi.po b/lispref/eval.texi.po
index 5c732c02..72c859f2 100644
--- a/lispref/eval.texi.po
+++ b/lispref/eval.texi.po
@@ -161,7 +161,7 @@ msgstr "以降のセクションでは、各種フォームにたいしてそれ
 #. type: Plain text
 #: original_texis/eval.texi:65
 msgid "It is very common to read a Lisp form and then evaluate the form, but reading and evaluation are separate activities, and either can be performed alone.  Reading per se does not evaluate anything; it converts the printed representation of a Lisp object to the object itself.  It is up to the caller of @code{read} to specify whether this object is a form to be evaluated, or serves some entirely different purpose.  @xref{Input Functions}."
-msgstr "Lispフォームを読み取ってそのフォームを評価するのは、非常に一般的なアクティビティーですが、読み取りと評価は別のアクティビティーであって、どちらか一方を単独で処理することができます。読み取っただけでは何も評価されません。読み取りはLispオブジェクトのプリント表現をそのオブジェクト自体に変換します。そのオブジェクトが評価されるべきフォームなのか、そのれともまったく違う目的をもつかを指定するのは、@code{read}の呼び出し元の役目です。@ref{Input Functions}を参照してください。"
+msgstr "Lispフォームを読み取ってそのフォームを評価するのは、非常に一般的なアクティビティーですが、読み取りと評価は別のアクティビティーであって、どちらか一方を単独で処理することができます。読み取っただけでは何も評価されません。読み取りはLispオブジェクトのプリント表現をそのオブジェクト自体に変換します。そのオブジェクトが評価されるべきフォームなのか、それともまったく違う目的をもつかを指定するのは、@code{read}の呼び出し元の役目です。@ref{Input Functions}を参照してください。"
 
 #. type: cindex
 #: original_texis/eval.texi:66
@@ -172,7 +172,7 @@ msgstr "recursive evaluation"
 #. type: Plain text
 #: original_texis/eval.texi:77
 msgid "Evaluation is a recursive process, and evaluating a form often involves evaluating parts within that form.  For instance, when you evaluate a @dfn{function call} form such as @code{(car x)}, Emacs first evaluates the argument (the subform @code{x}).  After evaluating the argument, Emacs @dfn{executes} the function (@code{car}), and if the function is written in Lisp, execution works by evaluating the @dfn{body} of the function (in this example, however, @code{car} is not a Lisp function; it is a primitive function implemented in C).  @xref{Functions}, for more information about functions and function calls."
-msgstr "評価とは再帰的な処理であり、あるフォームを評価するとそのフォームの一部が評価されるといったことがよくあります。たとえば@code{(car x)}のような@dfn{関数呼び出し(function call)}のフォームを評価する場合、Emacsは最初にその引数(サブフォーム@code{x})を評価します。引数を評価した後、Emacsはその関数(@code{car})を@dfn{実行(executes)}します。その関数がLispで記述されていれば、関数の@dfn{body(本文)}を評価することによって実行が行なわれます(しかしこの例で使用している@code{car}はLisp関数ではなくCで実装されたプリミティブ関数である)。関数と関数呼び出しについての情報は@ref{Functions}を参照してください。"
+msgstr "評価とは再帰的な処理であり、あるフォームを評価するとそのフォームの一部が評価されるといったことがよくあります。たとえば@code{(car x)}のような@dfn{関数呼び出し(function call)}のフォームを評価する場合、Emacsは最初にその引数(サブフォーム @code{x})を評価します。引数を評価した後、Emacsはその関数(@code{car})を@dfn{実行(executes)}します。その関数がLispで記述されていれば、関数の@dfn{body(本文)}を評価することによって実行が行なわれます(しかしこの例で使用している@code{car}はLisp関数ではなくCで実装されたプリミティブ関数である)。関数と関数呼び出しについての情報は@ref{Functions}を参照してください。"
 
 #. type: cindex
 #: original_texis/eval.texi:78
@@ -681,7 +681,7 @@ msgstr "この関数は@var{function}が意味するものを関数としてリ
 #. type: defun
 #: original_texis/eval.texi:345
 msgid "This function returns @code{nil} if the final symbol is unbound.  It signals a @code{cyclic-function-indirection} error if there is a loop in the chain of symbols."
-msgstr "この関数は最終的なシンボルがバインドされていなければ@code{nil}をリターンする。特定のシンボル内にループがれば、この関数は@code{cyclic-function-indirection}エラーをシグナルする。"
+msgstr "この関数は最終的なシンボルがバインドされていなければ@code{nil}をリターンする。特定のシンボル内にループがあれば、この関数は@code{cyclic-function-indirection}エラーをシグナルする。"
 
 #. type: defun
 #: original_texis/eval.texi:348
@@ -851,7 +851,7 @@ msgstr "スペシャルフォームはそれぞれ、どの引数を評価して
 #. type: Plain text
 #: original_texis/eval.texi:454
 msgid "If an expression's first symbol is that of a special form, the expression should follow the rules of that special form; otherwise, Emacs's behavior is not well-defined (though it will not crash).  For example, @code{((lambda (x) x . 3) 4)} contains a subexpression that begins with @code{lambda} but is not a well-formed @code{lambda} expression, so Emacs may signal an error, or may return 3 or 4 or @code{nil}, or may behave in other ways."
-msgstr "式の最初のシンボルがスペシャルフォームなら、式はそのスペシャルフォームのルールにしたがう必要があります。それ以外ならEmacsの挙動は(たとえクラッシュしなくいとしても)未定義です。たとえば@code{((lambda (x) x . 3) 4)}は@code{lambda}で始まるサブ式を含みますが、これは適正な@code{lambda}式ではないので、Emacsはエラーをシグナルするかもしれないし、3や4や@code{nil}をリターンしたり、もしかしたら他の挙動を示すかもしれません。"
+msgstr "式の最初のシンボルがスペシャルフォームなら、式はそのスペシャルフォームのルールにしたがう必要があります。それ以外ならEmacsの挙動は(たとえクラッシュしてないとしても)未定義です。たとえば@code{((lambda (x) x . 3) 4)}は@code{lambda}で始まるサブ式を含みますが、これは適正な@code{lambda}式ではないので、Emacsはエラーをシグナルするかもしれないし、3や4や@code{nil}をリターンしたり、もしかしたら他の挙動を示すかもしれません。"
 
 #. type: defun
 #: original_texis/eval.texi:455
@@ -1709,7 +1709,7 @@ msgstr "lazy evaluation"
 #. type: Plain text
 #: original_texis/eval.texi:923
 msgid "Sometimes it is useful to delay the evaluation of an expression, for example if you want to avoid performing a time-consuming calculation if it turns out that the result is not needed in the future of the program.  The @file{thunk} library provides the following functions and macros to support such @dfn{deferred evaluation}:"
-msgstr "たとえばプログラムの将来において計算結果が不要ということがわかった場合に時間を要する計算処理を回避したい等、式の評価を遅延させると便利な場合があります。そのような@dfn{遅延評価(deferred evaluation)}をサポートするために、@file{thunk}は以下の関数とマクロを提供します。"
+msgstr "たとえばプログラムの将来において計算結果が不要ということがわかった場合に時間を要する計算処理を回避したい等、式の評価を遅延させると便利な場合があります。そのような@dfn{遅延評価(deferred evaluation)}をサポートするために、@file{thunk}ライブラリは以下の関数とマクロを提供します。"
 
 #. type: cindex
 #: original_texis/eval.texi:924
